// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ClipperLib.IntPoint
#include "ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: TEdge
  class TEdge;
}
// Completed forward declares
// Type namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: IntersectNode
  class IntersectNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ClipperLib::IntersectNode);
DEFINE_IL2CPP_ARG_TYPE(::ClipperLib::IntersectNode*, "ClipperLib", "IntersectNode");
// Type namespace: ClipperLib
namespace ClipperLib {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ClipperLib.IntersectNode
  // [TokenAttribute] Offset: FFFFFFFF
  class IntersectNode : public ::Il2CppObject {
    public:
    public:
    // ClipperLib.TEdge Edge1
    // Size: 0x8
    // Offset: 0x10
    ::ClipperLib::TEdge* Edge1;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge Edge2
    // Size: 0x8
    // Offset: 0x18
    ::ClipperLib::TEdge* Edge2;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.IntPoint Pt
    // Size: 0x10
    // Offset: 0x20
    ::ClipperLib::IntPoint Pt;
    // Field size check
    static_assert(sizeof(::ClipperLib::IntPoint) == 0x10);
    public:
    // Get instance field reference: ClipperLib.TEdge Edge1
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_Edge1();
    // Get instance field reference: ClipperLib.TEdge Edge2
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_Edge2();
    // Get instance field reference: ClipperLib.IntPoint Pt
    [[deprecated("Use field access instead!")]] ::ClipperLib::IntPoint& dyn_Pt();
    // public System.Void .ctor()
    // Offset: 0x1B8273C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IntersectNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ClipperLib::IntersectNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IntersectNode*, creationType>()));
    }
  }; // ClipperLib.IntersectNode
  #pragma pack(pop)
  static check_size<sizeof(IntersectNode), 32 + sizeof(::ClipperLib::IntPoint)> __ClipperLib_IntersectNodeSizeCheck;
  static_assert(sizeof(IntersectNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ClipperLib::IntersectNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
