// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: TEdge
  class TEdge;
}
// Completed forward declares
// Type namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: LocalMinima
  class LocalMinima;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ClipperLib::LocalMinima);
DEFINE_IL2CPP_ARG_TYPE(::ClipperLib::LocalMinima*, "ClipperLib", "LocalMinima");
// Type namespace: ClipperLib
namespace ClipperLib {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ClipperLib.LocalMinima
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalMinima : public ::Il2CppObject {
    public:
    public:
    // System.Int64 Y
    // Size: 0x8
    // Offset: 0x10
    int64_t Y;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // ClipperLib.TEdge LeftBound
    // Size: 0x8
    // Offset: 0x18
    ::ClipperLib::TEdge* LeftBound;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge RightBound
    // Size: 0x8
    // Offset: 0x20
    ::ClipperLib::TEdge* RightBound;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.LocalMinima Next
    // Size: 0x8
    // Offset: 0x28
    ::ClipperLib::LocalMinima* Next;
    // Field size check
    static_assert(sizeof(::ClipperLib::LocalMinima*) == 0x8);
    public:
    // Get instance field reference: System.Int64 Y
    [[deprecated("Use field access instead!")]] int64_t& dyn_Y();
    // Get instance field reference: ClipperLib.TEdge LeftBound
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_LeftBound();
    // Get instance field reference: ClipperLib.TEdge RightBound
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_RightBound();
    // Get instance field reference: ClipperLib.LocalMinima Next
    [[deprecated("Use field access instead!")]] ::ClipperLib::LocalMinima*& dyn_Next();
    // public System.Void .ctor()
    // Offset: 0x1B842A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalMinima* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ClipperLib::LocalMinima::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalMinima*, creationType>()));
    }
  }; // ClipperLib.LocalMinima
  #pragma pack(pop)
  static check_size<sizeof(LocalMinima), 40 + sizeof(::ClipperLib::LocalMinima*)> __ClipperLib_LocalMinimaSizeCheck;
  static_assert(sizeof(LocalMinima) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ClipperLib::LocalMinima::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
