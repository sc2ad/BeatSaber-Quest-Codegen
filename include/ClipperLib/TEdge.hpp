// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ClipperLib.IntPoint
#include "ClipperLib/IntPoint.hpp"
// Including type: ClipperLib.PolyType
#include "ClipperLib/PolyType.hpp"
// Including type: ClipperLib.EdgeSide
#include "ClipperLib/EdgeSide.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: TEdge
  class TEdge;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ClipperLib::TEdge);
DEFINE_IL2CPP_ARG_TYPE(::ClipperLib::TEdge*, "ClipperLib", "TEdge");
// Type namespace: ClipperLib
namespace ClipperLib {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: ClipperLib.TEdge
  // [TokenAttribute] Offset: FFFFFFFF
  class TEdge : public ::Il2CppObject {
    public:
    public:
    // ClipperLib.IntPoint Bot
    // Size: 0x10
    // Offset: 0x10
    ::ClipperLib::IntPoint Bot;
    // Field size check
    static_assert(sizeof(::ClipperLib::IntPoint) == 0x10);
    // ClipperLib.IntPoint Curr
    // Size: 0x10
    // Offset: 0x20
    ::ClipperLib::IntPoint Curr;
    // Field size check
    static_assert(sizeof(::ClipperLib::IntPoint) == 0x10);
    // ClipperLib.IntPoint Top
    // Size: 0x10
    // Offset: 0x30
    ::ClipperLib::IntPoint Top;
    // Field size check
    static_assert(sizeof(::ClipperLib::IntPoint) == 0x10);
    // ClipperLib.IntPoint Delta
    // Size: 0x10
    // Offset: 0x40
    ::ClipperLib::IntPoint Delta;
    // Field size check
    static_assert(sizeof(::ClipperLib::IntPoint) == 0x10);
    // System.Double Dx
    // Size: 0x8
    // Offset: 0x50
    double Dx;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // ClipperLib.PolyType PolyTyp
    // Size: 0x4
    // Offset: 0x58
    ::ClipperLib::PolyType PolyTyp;
    // Field size check
    static_assert(sizeof(::ClipperLib::PolyType) == 0x4);
    // ClipperLib.EdgeSide Side
    // Size: 0x4
    // Offset: 0x5C
    ::ClipperLib::EdgeSide Side;
    // Field size check
    static_assert(sizeof(::ClipperLib::EdgeSide) == 0x4);
    // System.Int32 WindDelta
    // Size: 0x4
    // Offset: 0x60
    int WindDelta;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 WindCnt
    // Size: 0x4
    // Offset: 0x64
    int WindCnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 WindCnt2
    // Size: 0x4
    // Offset: 0x68
    int WindCnt2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 OutIdx
    // Size: 0x4
    // Offset: 0x6C
    int OutIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // ClipperLib.TEdge Next
    // Size: 0x8
    // Offset: 0x70
    ::ClipperLib::TEdge* Next;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge Prev
    // Size: 0x8
    // Offset: 0x78
    ::ClipperLib::TEdge* Prev;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge NextInLML
    // Size: 0x8
    // Offset: 0x80
    ::ClipperLib::TEdge* NextInLML;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge NextInAEL
    // Size: 0x8
    // Offset: 0x88
    ::ClipperLib::TEdge* NextInAEL;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge PrevInAEL
    // Size: 0x8
    // Offset: 0x90
    ::ClipperLib::TEdge* PrevInAEL;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge NextInSEL
    // Size: 0x8
    // Offset: 0x98
    ::ClipperLib::TEdge* NextInSEL;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // ClipperLib.TEdge PrevInSEL
    // Size: 0x8
    // Offset: 0xA0
    ::ClipperLib::TEdge* PrevInSEL;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    public:
    // Get instance field reference: ClipperLib.IntPoint Bot
    [[deprecated("Use field access instead!")]] ::ClipperLib::IntPoint& dyn_Bot();
    // Get instance field reference: ClipperLib.IntPoint Curr
    [[deprecated("Use field access instead!")]] ::ClipperLib::IntPoint& dyn_Curr();
    // Get instance field reference: ClipperLib.IntPoint Top
    [[deprecated("Use field access instead!")]] ::ClipperLib::IntPoint& dyn_Top();
    // Get instance field reference: ClipperLib.IntPoint Delta
    [[deprecated("Use field access instead!")]] ::ClipperLib::IntPoint& dyn_Delta();
    // Get instance field reference: System.Double Dx
    [[deprecated("Use field access instead!")]] double& dyn_Dx();
    // Get instance field reference: ClipperLib.PolyType PolyTyp
    [[deprecated("Use field access instead!")]] ::ClipperLib::PolyType& dyn_PolyTyp();
    // Get instance field reference: ClipperLib.EdgeSide Side
    [[deprecated("Use field access instead!")]] ::ClipperLib::EdgeSide& dyn_Side();
    // Get instance field reference: System.Int32 WindDelta
    [[deprecated("Use field access instead!")]] int& dyn_WindDelta();
    // Get instance field reference: System.Int32 WindCnt
    [[deprecated("Use field access instead!")]] int& dyn_WindCnt();
    // Get instance field reference: System.Int32 WindCnt2
    [[deprecated("Use field access instead!")]] int& dyn_WindCnt2();
    // Get instance field reference: System.Int32 OutIdx
    [[deprecated("Use field access instead!")]] int& dyn_OutIdx();
    // Get instance field reference: ClipperLib.TEdge Next
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_Next();
    // Get instance field reference: ClipperLib.TEdge Prev
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_Prev();
    // Get instance field reference: ClipperLib.TEdge NextInLML
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_NextInLML();
    // Get instance field reference: ClipperLib.TEdge NextInAEL
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_NextInAEL();
    // Get instance field reference: ClipperLib.TEdge PrevInAEL
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_PrevInAEL();
    // Get instance field reference: ClipperLib.TEdge NextInSEL
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_NextInSEL();
    // Get instance field reference: ClipperLib.TEdge PrevInSEL
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_PrevInSEL();
    // public System.Void .ctor()
    // Offset: 0x1B84CB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TEdge* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ClipperLib::TEdge::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TEdge*, creationType>()));
    }
  }; // ClipperLib.TEdge
  #pragma pack(pop)
  static check_size<sizeof(TEdge), 160 + sizeof(::ClipperLib::TEdge*)> __ClipperLib_TEdgeSizeCheck;
  static_assert(sizeof(TEdge) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ClipperLib::TEdge::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
