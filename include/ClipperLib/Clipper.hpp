// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ClipperLib.ClipperBase
#include "ClipperLib/ClipperBase.hpp"
// Including type: ClipperLib.ClipType
#include "ClipperLib/ClipType.hpp"
// Including type: ClipperLib.PolyFillType
#include "ClipperLib/PolyFillType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: Maxima
  class Maxima;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: IntersectNode
  class IntersectNode;
  // Forward declaring type: Join
  class Join;
  // Forward declaring type: OutPt
  class OutPt;
  // Forward declaring type: OutRec
  class OutRec;
  // Forward declaring type: Direction
  struct Direction;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Completed forward declares
// Type namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: Clipper
  class Clipper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ClipperLib::Clipper);
DEFINE_IL2CPP_ARG_TYPE(::ClipperLib::Clipper*, "ClipperLib", "Clipper");
// Type namespace: ClipperLib
namespace ClipperLib {
  // Size: 0x8B
  #pragma pack(push, 1)
  // Autogenerated type: ClipperLib.Clipper
  // [TokenAttribute] Offset: FFFFFFFF
  class Clipper : public ::ClipperLib::ClipperBase {
    public:
    // Writing base type padding for base size: 0x43 to desired offset: 0x44
    char ___base_padding[0x1] = {};
    public:
    // private ClipperLib.ClipType m_ClipType
    // Size: 0x4
    // Offset: 0x44
    ::ClipperLib::ClipType m_ClipType;
    // Field size check
    static_assert(sizeof(::ClipperLib::ClipType) == 0x4);
    // private ClipperLib.Maxima m_Maxima
    // Size: 0x8
    // Offset: 0x48
    ::ClipperLib::Maxima* m_Maxima;
    // Field size check
    static_assert(sizeof(::ClipperLib::Maxima*) == 0x8);
    // private ClipperLib.TEdge m_SortedEdges
    // Size: 0x8
    // Offset: 0x50
    ::ClipperLib::TEdge* m_SortedEdges;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // private System.Collections.Generic.List`1<ClipperLib.IntersectNode> m_IntersectList
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::ClipperLib::IntersectNode*>* m_IntersectList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ClipperLib::IntersectNode*>*) == 0x8);
    // private System.Collections.Generic.IComparer`1<ClipperLib.IntersectNode> m_IntersectNodeComparer
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::IComparer_1<::ClipperLib::IntersectNode*>* m_IntersectNodeComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IComparer_1<::ClipperLib::IntersectNode*>*) == 0x8);
    // private System.Boolean m_ExecuteLocked
    // Size: 0x1
    // Offset: 0x68
    bool m_ExecuteLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ExecuteLocked and: m_ClipFillType
    char __padding5[0x3] = {};
    // private ClipperLib.PolyFillType m_ClipFillType
    // Size: 0x4
    // Offset: 0x6C
    ::ClipperLib::PolyFillType m_ClipFillType;
    // Field size check
    static_assert(sizeof(::ClipperLib::PolyFillType) == 0x4);
    // private ClipperLib.PolyFillType m_SubjFillType
    // Size: 0x4
    // Offset: 0x70
    ::ClipperLib::PolyFillType m_SubjFillType;
    // Field size check
    static_assert(sizeof(::ClipperLib::PolyFillType) == 0x4);
    // Padding between fields: m_SubjFillType and: m_Joins
    char __padding7[0x4] = {};
    // private System.Collections.Generic.List`1<ClipperLib.Join> m_Joins
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::ClipperLib::Join*>* m_Joins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ClipperLib::Join*>*) == 0x8);
    // private System.Collections.Generic.List`1<ClipperLib.Join> m_GhostJoins
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::ClipperLib::Join*>* m_GhostJoins;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ClipperLib::Join*>*) == 0x8);
    // private System.Boolean m_UsingPolyTree
    // Size: 0x1
    // Offset: 0x88
    bool m_UsingPolyTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReverseSolution>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool ReverseSolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <StrictlySimple>k__BackingField
    // Size: 0x1
    // Offset: 0x8A
    bool StrictlySimple;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private ClipperLib.ClipType m_ClipType
    [[deprecated("Use field access instead!")]] ::ClipperLib::ClipType& dyn_m_ClipType();
    // Get instance field reference: private ClipperLib.Maxima m_Maxima
    [[deprecated("Use field access instead!")]] ::ClipperLib::Maxima*& dyn_m_Maxima();
    // Get instance field reference: private ClipperLib.TEdge m_SortedEdges
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_m_SortedEdges();
    // Get instance field reference: private System.Collections.Generic.List`1<ClipperLib.IntersectNode> m_IntersectList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ClipperLib::IntersectNode*>*& dyn_m_IntersectList();
    // Get instance field reference: private System.Collections.Generic.IComparer`1<ClipperLib.IntersectNode> m_IntersectNodeComparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IComparer_1<::ClipperLib::IntersectNode*>*& dyn_m_IntersectNodeComparer();
    // Get instance field reference: private System.Boolean m_ExecuteLocked
    [[deprecated("Use field access instead!")]] bool& dyn_m_ExecuteLocked();
    // Get instance field reference: private ClipperLib.PolyFillType m_ClipFillType
    [[deprecated("Use field access instead!")]] ::ClipperLib::PolyFillType& dyn_m_ClipFillType();
    // Get instance field reference: private ClipperLib.PolyFillType m_SubjFillType
    [[deprecated("Use field access instead!")]] ::ClipperLib::PolyFillType& dyn_m_SubjFillType();
    // Get instance field reference: private System.Collections.Generic.List`1<ClipperLib.Join> m_Joins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ClipperLib::Join*>*& dyn_m_Joins();
    // Get instance field reference: private System.Collections.Generic.List`1<ClipperLib.Join> m_GhostJoins
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ClipperLib::Join*>*& dyn_m_GhostJoins();
    // Get instance field reference: private System.Boolean m_UsingPolyTree
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsingPolyTree();
    // Get instance field reference: private System.Boolean <ReverseSolution>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReverseSolution$k__BackingField();
    // Get instance field reference: private System.Boolean <StrictlySimple>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$StrictlySimple$k__BackingField();
    // public System.Boolean get_ReverseSolution()
    // Offset: 0x1B7DB60
    bool get_ReverseSolution();
    // public System.Void set_ReverseSolution(System.Boolean value)
    // Offset: 0x1B7DB68
    void set_ReverseSolution(bool value);
    // public System.Boolean get_StrictlySimple()
    // Offset: 0x1B7DB74
    bool get_StrictlySimple();
    // public System.Void set_StrictlySimple(System.Boolean value)
    // Offset: 0x1B7DB7C
    void set_StrictlySimple(bool value);
    // public System.Void .ctor(System.Int32 InitOptions)
    // Offset: 0x1B7D8B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Clipper* New_ctor(int InitOptions) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ClipperLib::Clipper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Clipper*, creationType>(InitOptions)));
    }
    // private System.Void InsertMaxima(System.Int64 X)
    // Offset: 0x1B7DA74
    void InsertMaxima(int64_t X);
    // public System.Boolean Execute(ClipperLib.ClipType clipType, System.Collections.Generic.List`1<System.Collections.Generic.List`1<ClipperLib.IntPoint>> solution, ClipperLib.PolyFillType subjFillType, ClipperLib.PolyFillType clipFillType)
    // Offset: 0x1B7DB88
    bool Execute(::ClipperLib::ClipType clipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>* solution, ::ClipperLib::PolyFillType subjFillType, ::ClipperLib::PolyFillType clipFillType);
    // private System.Boolean ExecuteInternal()
    // Offset: 0x1B7DD4C
    bool ExecuteInternal();
    // private System.Void DisposeAllPolyPts()
    // Offset: 0x1B7E328
    void DisposeAllPolyPts();
    // private System.Void AddJoin(ClipperLib.OutPt Op1, ClipperLib.OutPt Op2, ClipperLib.IntPoint OffPt)
    // Offset: 0x1B7F520
    void AddJoin(::ClipperLib::OutPt* Op1, ::ClipperLib::OutPt* Op2, ::ClipperLib::IntPoint OffPt);
    // private System.Void AddGhostJoin(ClipperLib.OutPt Op, ClipperLib.IntPoint OffPt)
    // Offset: 0x1B7F5CC
    void AddGhostJoin(::ClipperLib::OutPt* Op, ::ClipperLib::IntPoint OffPt);
    // private System.Void InsertLocalMinimaIntoAEL(System.Int64 botY)
    // Offset: 0x1B7E3E8
    void InsertLocalMinimaIntoAEL(int64_t botY);
    // private System.Void InsertEdgeIntoAEL(ClipperLib.TEdge edge, ClipperLib.TEdge startEdge)
    // Offset: 0x1B7F66C
    void InsertEdgeIntoAEL(::ClipperLib::TEdge* edge, ::ClipperLib::TEdge* startEdge);
    // private System.Boolean E2InsertsBeforeE1(ClipperLib.TEdge e1, ClipperLib.TEdge e2)
    // Offset: 0x1B806BC
    bool E2InsertsBeforeE1(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2);
    // private System.Boolean IsEvenOddFillType(ClipperLib.TEdge edge)
    // Offset: 0x1B8078C
    bool IsEvenOddFillType(::ClipperLib::TEdge* edge);
    // private System.Boolean IsEvenOddAltFillType(ClipperLib.TEdge edge)
    // Offset: 0x1B807C0
    bool IsEvenOddAltFillType(::ClipperLib::TEdge* edge);
    // private System.Boolean IsContributing(ClipperLib.TEdge edge)
    // Offset: 0x1B7F960
    bool IsContributing(::ClipperLib::TEdge* edge);
    // private System.Void SetWindingCount(ClipperLib.TEdge edge)
    // Offset: 0x1B7F724
    void SetWindingCount(::ClipperLib::TEdge* edge);
    // private System.Void AddEdgeToSEL(ClipperLib.TEdge edge)
    // Offset: 0x1B7FF98
    void AddEdgeToSEL(::ClipperLib::TEdge* edge);
    // System.Boolean PopEdgeFromSEL(out ClipperLib.TEdge e)
    // Offset: 0x1B807F4
    bool PopEdgeFromSEL(ByRef<::ClipperLib::TEdge*> e);
    // private System.Void CopyAELToSEL()
    // Offset: 0x1B80824
    void CopyAELToSEL();
    // private System.Void SwapPositionsInSEL(ClipperLib.TEdge edge1, ClipperLib.TEdge edge2)
    // Offset: 0x1B80844
    void SwapPositionsInSEL(::ClipperLib::TEdge* edge1, ::ClipperLib::TEdge* edge2);
    // private System.Void AddLocalMaxPoly(ClipperLib.TEdge e1, ClipperLib.TEdge e2, ClipperLib.IntPoint pt)
    // Offset: 0x1B80930
    void AddLocalMaxPoly(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2, ::ClipperLib::IntPoint pt);
    // private ClipperLib.OutPt AddLocalMinPoly(ClipperLib.TEdge e1, ClipperLib.TEdge e2, ClipperLib.IntPoint pt)
    // Offset: 0x1B7FDBC
    ::ClipperLib::OutPt* AddLocalMinPoly(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2, ::ClipperLib::IntPoint pt);
    // private ClipperLib.OutPt AddOutPt(ClipperLib.TEdge e, ClipperLib.IntPoint pt)
    // Offset: 0x1B7FAE0
    ::ClipperLib::OutPt* AddOutPt(::ClipperLib::TEdge* e, ::ClipperLib::IntPoint pt);
    // private ClipperLib.OutPt GetLastOutPt(ClipperLib.TEdge e)
    // Offset: 0x1B80E28
    ::ClipperLib::OutPt* GetLastOutPt(::ClipperLib::TEdge* e);
    // private System.Boolean HorzSegmentsOverlap(System.Int64 seg1a, System.Int64 seg1b, System.Int64 seg2a, System.Int64 seg2b)
    // Offset: 0x1B7FFDC
    bool HorzSegmentsOverlap(int64_t seg1a, int64_t seg1b, int64_t seg2a, int64_t seg2b);
    // private System.Void SetHoleState(ClipperLib.TEdge e, ClipperLib.OutRec outRec)
    // Offset: 0x1B80D1C
    void SetHoleState(::ClipperLib::TEdge* e, ::ClipperLib::OutRec* outRec);
    // private System.Double GetDx(ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2)
    // Offset: 0x1B80ED4
    double GetDx(::ClipperLib::IntPoint pt1, ::ClipperLib::IntPoint pt2);
    // private System.Boolean FirstIsBottomPt(ClipperLib.OutPt btmPt1, ClipperLib.OutPt btmPt2)
    // Offset: 0x1B80EFC
    bool FirstIsBottomPt(::ClipperLib::OutPt* btmPt1, ::ClipperLib::OutPt* btmPt2);
    // private ClipperLib.OutPt GetBottomPt(ClipperLib.OutPt pp)
    // Offset: 0x1B81228
    ::ClipperLib::OutPt* GetBottomPt(::ClipperLib::OutPt* pp);
    // private ClipperLib.OutRec GetLowermostRec(ClipperLib.OutRec outRec1, ClipperLib.OutRec outRec2)
    // Offset: 0x1B81340
    ::ClipperLib::OutRec* GetLowermostRec(::ClipperLib::OutRec* outRec1, ::ClipperLib::OutRec* outRec2);
    // private System.Boolean OutRec1RightOfOutRec2(ClipperLib.OutRec outRec1, ClipperLib.OutRec outRec2)
    // Offset: 0x1B8141C
    bool OutRec1RightOfOutRec2(::ClipperLib::OutRec* outRec1, ::ClipperLib::OutRec* outRec2);
    // private ClipperLib.OutRec GetOutRec(System.Int32 idx)
    // Offset: 0x1B8144C
    ::ClipperLib::OutRec* GetOutRec(int idx);
    // private System.Void AppendPolygon(ClipperLib.TEdge e1, ClipperLib.TEdge e2)
    // Offset: 0x1B809EC
    void AppendPolygon(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2);
    // private System.Void ReversePolyPtLinks(ClipperLib.OutPt pp)
    // Offset: 0x1B7ED20
    void ReversePolyPtLinks(::ClipperLib::OutPt* pp);
    // static private System.Void SwapSides(ClipperLib.TEdge edge1, ClipperLib.TEdge edge2)
    // Offset: 0x1B8152C
    static void SwapSides(::ClipperLib::TEdge* edge1, ::ClipperLib::TEdge* edge2);
    // static private System.Void SwapPolyIndexes(ClipperLib.TEdge edge1, ClipperLib.TEdge edge2)
    // Offset: 0x1B81558
    static void SwapPolyIndexes(::ClipperLib::TEdge* edge1, ::ClipperLib::TEdge* edge2);
    // private System.Void IntersectEdges(ClipperLib.TEdge e1, ClipperLib.TEdge e2, ClipperLib.IntPoint pt)
    // Offset: 0x1B800A8
    void IntersectEdges(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2, ::ClipperLib::IntPoint pt);
    // private System.Void ProcessHorizontals()
    // Offset: 0x1B7E7AC
    void ProcessHorizontals();
    // private System.Void GetHorzDirection(ClipperLib.TEdge HorzEdge, out ClipperLib.Direction Dir, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x1B81B5C
    void GetHorzDirection(::ClipperLib::TEdge* HorzEdge, ByRef<::ClipperLib::Direction> Dir, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Void ProcessHorizontal(ClipperLib.TEdge horzEdge)
    // Offset: 0x1B81584
    void ProcessHorizontal(::ClipperLib::TEdge* horzEdge);
    // private ClipperLib.TEdge GetNextInAEL(ClipperLib.TEdge e, ClipperLib.Direction Direction)
    // Offset: 0x1B81C10
    ::ClipperLib::TEdge* GetNextInAEL(::ClipperLib::TEdge* e, ::ClipperLib::Direction Direction);
    // private System.Boolean IsMaxima(ClipperLib.TEdge e, System.Double Y)
    // Offset: 0x1B81F8C
    bool IsMaxima(::ClipperLib::TEdge* e, double Y);
    // private System.Boolean IsIntermediate(ClipperLib.TEdge e, System.Double Y)
    // Offset: 0x1B81FB8
    bool IsIntermediate(::ClipperLib::TEdge* e, double Y);
    // ClipperLib.TEdge GetMaximaPair(ClipperLib.TEdge e)
    // Offset: 0x1B81B9C
    ::ClipperLib::TEdge* GetMaximaPair(::ClipperLib::TEdge* e);
    // ClipperLib.TEdge GetMaximaPairEx(ClipperLib.TEdge e)
    // Offset: 0x1B81FF0
    ::ClipperLib::TEdge* GetMaximaPairEx(::ClipperLib::TEdge* e);
    // private System.Boolean ProcessIntersections(System.Int64 topY)
    // Offset: 0x1B7E7F8
    bool ProcessIntersections(int64_t topY);
    // private System.Void BuildIntersectList(System.Int64 topY)
    // Offset: 0x1B82030
    void BuildIntersectList(int64_t topY);
    // private System.Boolean EdgesAdjacent(ClipperLib.IntersectNode inode)
    // Offset: 0x1B82744
    bool EdgesAdjacent(::ClipperLib::IntersectNode* inode);
    // private System.Boolean FixupIntersectionOrder()
    // Offset: 0x1B8219C
    bool FixupIntersectionOrder();
    // private System.Void ProcessIntersectList()
    // Offset: 0x1B823DC
    void ProcessIntersectList();
    // static System.Int64 Round(System.Double value)
    // Offset: 0x1B82788
    static int64_t Round(double value);
    // static private System.Int64 TopX(ClipperLib.TEdge edge, System.Int64 currentY)
    // Offset: 0x1B80734
    static int64_t TopX(::ClipperLib::TEdge* edge, int64_t currentY);
    // private System.Void IntersectPoint(ClipperLib.TEdge edge1, ClipperLib.TEdge edge2, out ClipperLib.IntPoint ip)
    // Offset: 0x1B82498
    void IntersectPoint(::ClipperLib::TEdge* edge1, ::ClipperLib::TEdge* edge2, ByRef<::ClipperLib::IntPoint> ip);
    // private System.Void ProcessEdgesAtTopOfScanbeam(System.Int64 topY)
    // Offset: 0x1B7E96C
    void ProcessEdgesAtTopOfScanbeam(int64_t topY);
    // private System.Void DoMaxima(ClipperLib.TEdge e)
    // Offset: 0x1B827A4
    void DoMaxima(::ClipperLib::TEdge* e);
    // private System.Int32 PointCount(ClipperLib.OutPt pts)
    // Offset: 0x1B82950
    int PointCount(::ClipperLib::OutPt* pts);
    // private System.Void BuildResult(System.Collections.Generic.List`1<System.Collections.Generic.List`1<ClipperLib.IntPoint>> polyg)
    // Offset: 0x1B7E19C
    void BuildResult(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>* polyg);
    // private System.Void FixupOutPolyline(ClipperLib.OutRec outrec)
    // Offset: 0x1B7F098
    void FixupOutPolyline(::ClipperLib::OutRec* outrec);
    // private System.Void FixupOutPolygon(ClipperLib.OutRec outRec)
    // Offset: 0x1B7F128
    void FixupOutPolygon(::ClipperLib::OutRec* outRec);
    // private ClipperLib.OutPt DupOutPt(ClipperLib.OutPt outPt, System.Boolean InsertAfter)
    // Offset: 0x1B82A80
    ::ClipperLib::OutPt* DupOutPt(::ClipperLib::OutPt* outPt, bool InsertAfter);
    // private System.Boolean GetOverlap(System.Int64 a1, System.Int64 a2, System.Int64 b1, System.Int64 b2, out System.Int64 Left, out System.Int64 Right)
    // Offset: 0x1B82B44
    bool GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, ByRef<int64_t> Left, ByRef<int64_t> Right);
    // private System.Boolean JoinHorz(ClipperLib.OutPt op1, ClipperLib.OutPt op1b, ClipperLib.OutPt op2, ClipperLib.OutPt op2b, ClipperLib.IntPoint Pt, System.Boolean DiscardLeft)
    // Offset: 0x1B82CA4
    bool JoinHorz(::ClipperLib::OutPt* op1, ::ClipperLib::OutPt* op1b, ::ClipperLib::OutPt* op2, ::ClipperLib::OutPt* op2b, ::ClipperLib::IntPoint Pt, bool DiscardLeft);
    // private System.Boolean JoinPoints(ClipperLib.Join j, ClipperLib.OutRec outRec1, ClipperLib.OutRec outRec2)
    // Offset: 0x1B82FB8
    bool JoinPoints(::ClipperLib::Join* j, ::ClipperLib::OutRec* outRec1, ::ClipperLib::OutRec* outRec2);
    // static private System.Int32 PointInPolygon(ClipperLib.IntPoint pt, ClipperLib.OutPt op)
    // Offset: 0x1B834B8
    static int PointInPolygon(::ClipperLib::IntPoint pt, ::ClipperLib::OutPt* op);
    // static private System.Boolean Poly2ContainsPoly1(ClipperLib.OutPt outPt1, ClipperLib.OutPt outPt2)
    // Offset: 0x1B835B4
    static bool Poly2ContainsPoly1(::ClipperLib::OutPt* outPt1, ::ClipperLib::OutPt* outPt2);
    // private System.Void FixupFirstLefts1(ClipperLib.OutRec OldOutRec, ClipperLib.OutRec NewOutRec)
    // Offset: 0x1B83614
    void FixupFirstLefts1(::ClipperLib::OutRec* OldOutRec, ::ClipperLib::OutRec* NewOutRec);
    // private System.Void FixupFirstLefts2(ClipperLib.OutRec innerOutRec, ClipperLib.OutRec outerOutRec)
    // Offset: 0x1B83770
    void FixupFirstLefts2(::ClipperLib::OutRec* innerOutRec, ::ClipperLib::OutRec* outerOutRec);
    // private System.Void FixupFirstLefts3(ClipperLib.OutRec OldOutRec, ClipperLib.OutRec NewOutRec)
    // Offset: 0x1B8392C
    void FixupFirstLefts3(::ClipperLib::OutRec* OldOutRec, ::ClipperLib::OutRec* NewOutRec);
    // static private ClipperLib.OutRec ParseFirstLeft(ClipperLib.OutRec FirstLeft)
    // Offset: 0x1B83758
    static ::ClipperLib::OutRec* ParseFirstLeft(::ClipperLib::OutRec* FirstLeft);
    // private System.Void JoinCommonEdges()
    // Offset: 0x1B7ED50
    void JoinCommonEdges();
    // private System.Void UpdateOutPtIdxs(ClipperLib.OutRec outrec)
    // Offset: 0x1B83A54
    void UpdateOutPtIdxs(::ClipperLib::OutRec* outrec);
    // private System.Void DoSimplePolygons()
    // Offset: 0x1B7F270
    void DoSimplePolygons();
    // System.Double Area(ClipperLib.OutRec outRec)
    // Offset: 0x1B7ED08
    double Area(::ClipperLib::OutRec* outRec);
    // System.Double Area(ClipperLib.OutPt op)
    // Offset: 0x1B811C8
    double Area(::ClipperLib::OutPt* op);
  }; // ClipperLib.Clipper
  #pragma pack(pop)
  static check_size<sizeof(Clipper), 138 + sizeof(bool)> __ClipperLib_ClipperSizeCheck;
  static_assert(sizeof(Clipper) == 0x8B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ClipperLib::Clipper::get_ReverseSolution
// Il2CppName: get_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::get_ReverseSolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "get_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::set_ReverseSolution
// Il2CppName: set_ReverseSolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(bool)>(&ClipperLib::Clipper::set_ReverseSolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "set_ReverseSolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::get_StrictlySimple
// Il2CppName: get_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::get_StrictlySimple)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "get_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::set_StrictlySimple
// Il2CppName: set_StrictlySimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(bool)>(&ClipperLib::Clipper::set_StrictlySimple)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "set_StrictlySimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ClipperLib::Clipper::InsertMaxima
// Il2CppName: InsertMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(int64_t)>(&ClipperLib::Clipper::InsertMaxima)> {
  static const MethodInfo* get() {
    static auto* X = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "InsertMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{X});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::ClipType, ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>*, ::ClipperLib::PolyFillType, ::ClipperLib::PolyFillType)>(&ClipperLib::Clipper::Execute)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("ClipperLib", "ClipType")->byval_arg;
    static auto* solution = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")})})->byval_arg;
    static auto* subjFillType = &::il2cpp_utils::GetClassFromName("ClipperLib", "PolyFillType")->byval_arg;
    static auto* clipFillType = &::il2cpp_utils::GetClassFromName("ClipperLib", "PolyFillType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType, solution, subjFillType, clipFillType});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ExecuteInternal
// Il2CppName: ExecuteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::ExecuteInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ExecuteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::DisposeAllPolyPts
// Il2CppName: DisposeAllPolyPts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::DisposeAllPolyPts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "DisposeAllPolyPts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddJoin
// Il2CppName: AddJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutPt*, ::ClipperLib::OutPt*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::AddJoin)> {
  static const MethodInfo* get() {
    static auto* Op1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* Op2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op1, Op2, OffPt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddGhostJoin
// Il2CppName: AddGhostJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutPt*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::AddGhostJoin)> {
  static const MethodInfo* get() {
    static auto* Op = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* OffPt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddGhostJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Op, OffPt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::InsertLocalMinimaIntoAEL
// Il2CppName: InsertLocalMinimaIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(int64_t)>(&ClipperLib::Clipper::InsertLocalMinimaIntoAEL)> {
  static const MethodInfo* get() {
    static auto* botY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "InsertLocalMinimaIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{botY});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::InsertEdgeIntoAEL
// Il2CppName: InsertEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::InsertEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* startEdge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "InsertEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, startEdge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::E2InsertsBeforeE1
// Il2CppName: E2InsertsBeforeE1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::E2InsertsBeforeE1)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "E2InsertsBeforeE1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IsEvenOddFillType
// Il2CppName: IsEvenOddFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::IsEvenOddFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IsEvenOddFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IsEvenOddAltFillType
// Il2CppName: IsEvenOddAltFillType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::IsEvenOddAltFillType)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IsEvenOddAltFillType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IsContributing
// Il2CppName: IsContributing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::IsContributing)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IsContributing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::SetWindingCount
// Il2CppName: SetWindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::SetWindingCount)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "SetWindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddEdgeToSEL
// Il2CppName: AddEdgeToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::AddEdgeToSEL)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddEdgeToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::PopEdgeFromSEL
// Il2CppName: PopEdgeFromSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(ByRef<::ClipperLib::TEdge*>)>(&ClipperLib::Clipper::PopEdgeFromSEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "PopEdgeFromSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::CopyAELToSEL
// Il2CppName: CopyAELToSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::CopyAELToSEL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "CopyAELToSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::SwapPositionsInSEL
// Il2CppName: SwapPositionsInSEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::SwapPositionsInSEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "SwapPositionsInSEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddLocalMaxPoly
// Il2CppName: AddLocalMaxPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::AddLocalMaxPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddLocalMaxPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddLocalMinPoly
// Il2CppName: AddLocalMinPoly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutPt* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::AddLocalMinPoly)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddLocalMinPoly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AddOutPt
// Il2CppName: AddOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutPt* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::AddOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AddOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, pt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetLastOutPt
// Il2CppName: GetLastOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutPt* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::GetLastOutPt)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetLastOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::HorzSegmentsOverlap
// Il2CppName: HorzSegmentsOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(int64_t, int64_t, int64_t, int64_t)>(&ClipperLib::Clipper::HorzSegmentsOverlap)> {
  static const MethodInfo* get() {
    static auto* seg1a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg1b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2a = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* seg2b = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "HorzSegmentsOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seg1a, seg1b, seg2a, seg2b});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::SetHoleState
// Il2CppName: SetHoleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::SetHoleState)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* outRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "SetHoleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, outRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetDx
// Il2CppName: GetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ClipperLib::Clipper::*)(::ClipperLib::IntPoint, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::GetDx)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FirstIsBottomPt
// Il2CppName: FirstIsBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::OutPt*, ::ClipperLib::OutPt*)>(&ClipperLib::Clipper::FirstIsBottomPt)> {
  static const MethodInfo* get() {
    static auto* btmPt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* btmPt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FirstIsBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btmPt1, btmPt2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetBottomPt
// Il2CppName: GetBottomPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutPt* (ClipperLib::Clipper::*)(::ClipperLib::OutPt*)>(&ClipperLib::Clipper::GetBottomPt)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetBottomPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetLowermostRec
// Il2CppName: GetLowermostRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutRec* (ClipperLib::Clipper::*)(::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::GetLowermostRec)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetLowermostRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::OutRec1RightOfOutRec2
// Il2CppName: OutRec1RightOfOutRec2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::OutRec1RightOfOutRec2)> {
  static const MethodInfo* get() {
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "OutRec1RightOfOutRec2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetOutRec
// Il2CppName: GetOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutRec* (ClipperLib::Clipper::*)(int)>(&ClipperLib::Clipper::GetOutRec)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::AppendPolygon
// Il2CppName: AppendPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::AppendPolygon)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "AppendPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ReversePolyPtLinks
// Il2CppName: ReversePolyPtLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutPt*)>(&ClipperLib::Clipper::ReversePolyPtLinks)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ReversePolyPtLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::SwapSides
// Il2CppName: SwapSides
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::SwapSides)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "SwapSides", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::SwapPolyIndexes
// Il2CppName: SwapPolyIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::Clipper::SwapPolyIndexes)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "SwapPolyIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IntersectEdges
// Il2CppName: IntersectEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ::ClipperLib::IntPoint)>(&ClipperLib::Clipper::IntersectEdges)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IntersectEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, pt});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ProcessHorizontals
// Il2CppName: ProcessHorizontals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::ProcessHorizontals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ProcessHorizontals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetHorzDirection
// Il2CppName: GetHorzDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ByRef<::ClipperLib::Direction>, ByRef<int64_t>, ByRef<int64_t>)>(&ClipperLib::Clipper::GetHorzDirection)> {
  static const MethodInfo* get() {
    static auto* HorzEdge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* Dir = &::il2cpp_utils::GetClassFromName("ClipperLib", "Direction")->this_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetHorzDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HorzEdge, Dir, Left, Right});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ProcessHorizontal
// Il2CppName: ProcessHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::ProcessHorizontal)> {
  static const MethodInfo* get() {
    static auto* horzEdge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ProcessHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horzEdge});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetNextInAEL
// Il2CppName: GetNextInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::Direction)>(&ClipperLib::Clipper::GetNextInAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* Direction = &::il2cpp_utils::GetClassFromName("ClipperLib", "Direction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetNextInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Direction});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IsMaxima
// Il2CppName: IsMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, double)>(&ClipperLib::Clipper::IsMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IsMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IsIntermediate
// Il2CppName: IsIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, double)>(&ClipperLib::Clipper::IsIntermediate)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IsIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, Y});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetMaximaPair
// Il2CppName: GetMaximaPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::GetMaximaPair)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetMaximaPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetMaximaPairEx
// Il2CppName: GetMaximaPairEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::GetMaximaPairEx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetMaximaPairEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ProcessIntersections
// Il2CppName: ProcessIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(int64_t)>(&ClipperLib::Clipper::ProcessIntersections)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ProcessIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::BuildIntersectList
// Il2CppName: BuildIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(int64_t)>(&ClipperLib::Clipper::BuildIntersectList)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "BuildIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::EdgesAdjacent
// Il2CppName: EdgesAdjacent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::IntersectNode*)>(&ClipperLib::Clipper::EdgesAdjacent)> {
  static const MethodInfo* get() {
    static auto* inode = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntersectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "EdgesAdjacent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inode});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupIntersectionOrder
// Il2CppName: FixupIntersectionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::FixupIntersectionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupIntersectionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ProcessIntersectList
// Il2CppName: ProcessIntersectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::ProcessIntersectList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ProcessIntersectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&ClipperLib::Clipper::Round)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::TopX
// Il2CppName: TopX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::ClipperLib::TEdge*, int64_t)>(&ClipperLib::Clipper::TopX)> {
  static const MethodInfo* get() {
    static auto* edge = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* currentY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "TopX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge, currentY});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::IntersectPoint
// Il2CppName: IntersectPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ByRef<::ClipperLib::IntPoint>)>(&ClipperLib::Clipper::IntersectPoint)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* ip = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "IntersectPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2, ip});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam
// Il2CppName: ProcessEdgesAtTopOfScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(int64_t)>(&ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam)> {
  static const MethodInfo* get() {
    static auto* topY = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ProcessEdgesAtTopOfScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topY});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::DoMaxima
// Il2CppName: DoMaxima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::TEdge*)>(&ClipperLib::Clipper::DoMaxima)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "DoMaxima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::PointCount
// Il2CppName: PointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ClipperLib::Clipper::*)(::ClipperLib::OutPt*)>(&ClipperLib::Clipper::PointCount)> {
  static const MethodInfo* get() {
    static auto* pts = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "PointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pts});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::BuildResult
// Il2CppName: BuildResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>*)>(&ClipperLib::Clipper::BuildResult)> {
  static const MethodInfo* get() {
    static auto* polyg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "BuildResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyg});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupOutPolyline
// Il2CppName: FixupOutPolyline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*)>(&ClipperLib::Clipper::FixupOutPolyline)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupOutPolyline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupOutPolygon
// Il2CppName: FixupOutPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*)>(&ClipperLib::Clipper::FixupOutPolygon)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupOutPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::DupOutPt
// Il2CppName: DupOutPt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutPt* (ClipperLib::Clipper::*)(::ClipperLib::OutPt*, bool)>(&ClipperLib::Clipper::DupOutPt)> {
  static const MethodInfo* get() {
    static auto* outPt = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* InsertAfter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "DupOutPt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt, InsertAfter});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::GetOverlap
// Il2CppName: GetOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(int64_t, int64_t, int64_t, int64_t, ByRef<int64_t>, ByRef<int64_t>)>(&ClipperLib::Clipper::GetOverlap)> {
  static const MethodInfo* get() {
    static auto* a1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* a2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* b2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* Left = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* Right = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "GetOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a1, a2, b1, b2, Left, Right});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::JoinHorz
// Il2CppName: JoinHorz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::OutPt*, ::ClipperLib::OutPt*, ::ClipperLib::OutPt*, ::ClipperLib::OutPt*, ::ClipperLib::IntPoint, bool)>(&ClipperLib::Clipper::JoinHorz)> {
  static const MethodInfo* get() {
    static auto* op1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* op1b = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* op2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* op2b = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* Pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* DiscardLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "JoinHorz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op1, op1b, op2, op2b, Pt, DiscardLeft});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::JoinPoints
// Il2CppName: JoinPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::Clipper::*)(::ClipperLib::Join*, ::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::JoinPoints)> {
  static const MethodInfo* get() {
    static auto* j = &::il2cpp_utils::GetClassFromName("ClipperLib", "Join")->byval_arg;
    static auto* outRec1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* outRec2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "JoinPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{j, outRec1, outRec2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::PointInPolygon
// Il2CppName: PointInPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ClipperLib::IntPoint, ::ClipperLib::OutPt*)>(&ClipperLib::Clipper::PointInPolygon)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "PointInPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, op});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::Poly2ContainsPoly1
// Il2CppName: Poly2ContainsPoly1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ClipperLib::OutPt*, ::ClipperLib::OutPt*)>(&ClipperLib::Clipper::Poly2ContainsPoly1)> {
  static const MethodInfo* get() {
    static auto* outPt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    static auto* outPt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "Poly2ContainsPoly1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outPt1, outPt2});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupFirstLefts1
// Il2CppName: FixupFirstLefts1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::FixupFirstLefts1)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupFirstLefts1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupFirstLefts2
// Il2CppName: FixupFirstLefts2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::FixupFirstLefts2)> {
  static const MethodInfo* get() {
    static auto* innerOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* outerOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupFirstLefts2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerOutRec, outerOutRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::FixupFirstLefts3
// Il2CppName: FixupFirstLefts3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*, ::ClipperLib::OutRec*)>(&ClipperLib::Clipper::FixupFirstLefts3)> {
  static const MethodInfo* get() {
    static auto* OldOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    static auto* NewOutRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "FixupFirstLefts3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OldOutRec, NewOutRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::ParseFirstLeft
// Il2CppName: ParseFirstLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutRec* (*)(::ClipperLib::OutRec*)>(&ClipperLib::Clipper::ParseFirstLeft)> {
  static const MethodInfo* get() {
    static auto* FirstLeft = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "ParseFirstLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FirstLeft});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::JoinCommonEdges
// Il2CppName: JoinCommonEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::JoinCommonEdges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "JoinCommonEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::UpdateOutPtIdxs
// Il2CppName: UpdateOutPtIdxs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)(::ClipperLib::OutRec*)>(&ClipperLib::Clipper::UpdateOutPtIdxs)> {
  static const MethodInfo* get() {
    static auto* outrec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "UpdateOutPtIdxs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outrec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::DoSimplePolygons
// Il2CppName: DoSimplePolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::Clipper::*)()>(&ClipperLib::Clipper::DoSimplePolygons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "DoSimplePolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ClipperLib::Clipper::*)(::ClipperLib::OutRec*)>(&ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* outRec = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutRec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outRec});
  }
};
// Writing MetadataGetter for method: ClipperLib::Clipper::Area
// Il2CppName: Area
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ClipperLib::Clipper::*)(::ClipperLib::OutPt*)>(&ClipperLib::Clipper::Area)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("ClipperLib", "OutPt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::Clipper*), "Area", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
