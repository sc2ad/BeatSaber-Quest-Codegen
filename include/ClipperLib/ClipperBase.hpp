// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ClipperLib.IntPoint
#include "ClipperLib/IntPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: LocalMinima
  class LocalMinima;
  // Forward declaring type: TEdge
  class TEdge;
  // Forward declaring type: Scanbeam
  class Scanbeam;
  // Forward declaring type: OutRec
  class OutRec;
  // Forward declaring type: PolyType
  struct PolyType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: ClipperLib
namespace ClipperLib {
  // Forward declaring type: ClipperBase
  class ClipperBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ClipperLib::ClipperBase);
DEFINE_IL2CPP_ARG_TYPE(::ClipperLib::ClipperBase*, "ClipperLib", "ClipperBase");
// Type namespace: ClipperLib
namespace ClipperLib {
  // Size: 0x43
  #pragma pack(push, 1)
  // Autogenerated type: ClipperLib.ClipperBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ClipperBase : public ::Il2CppObject {
    public:
    public:
    // ClipperLib.LocalMinima m_MinimaList
    // Size: 0x8
    // Offset: 0x10
    ::ClipperLib::LocalMinima* m_MinimaList;
    // Field size check
    static_assert(sizeof(::ClipperLib::LocalMinima*) == 0x8);
    // ClipperLib.LocalMinima m_CurrentLM
    // Size: 0x8
    // Offset: 0x18
    ::ClipperLib::LocalMinima* m_CurrentLM;
    // Field size check
    static_assert(sizeof(::ClipperLib::LocalMinima*) == 0x8);
    // System.Collections.Generic.List`1<System.Collections.Generic.List`1<ClipperLib.TEdge>> m_edges
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::TEdge*>*>* m_edges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::TEdge*>*>*) == 0x8);
    // ClipperLib.Scanbeam m_Scanbeam
    // Size: 0x8
    // Offset: 0x28
    ::ClipperLib::Scanbeam* m_Scanbeam;
    // Field size check
    static_assert(sizeof(::ClipperLib::Scanbeam*) == 0x8);
    // System.Collections.Generic.List`1<ClipperLib.OutRec> m_PolyOuts
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::ClipperLib::OutRec*>* m_PolyOuts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ClipperLib::OutRec*>*) == 0x8);
    // ClipperLib.TEdge m_ActiveEdges
    // Size: 0x8
    // Offset: 0x38
    ::ClipperLib::TEdge* m_ActiveEdges;
    // Field size check
    static_assert(sizeof(::ClipperLib::TEdge*) == 0x8);
    // System.Boolean m_UseFullRange
    // Size: 0x1
    // Offset: 0x40
    bool m_UseFullRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_HasOpenPaths
    // Size: 0x1
    // Offset: 0x41
    bool m_HasOpenPaths;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <PreserveCollinear>k__BackingField
    // Size: 0x1
    // Offset: 0x42
    bool PreserveCollinear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: ClipperLib.LocalMinima m_MinimaList
    [[deprecated("Use field access instead!")]] ::ClipperLib::LocalMinima*& dyn_m_MinimaList();
    // Get instance field reference: ClipperLib.LocalMinima m_CurrentLM
    [[deprecated("Use field access instead!")]] ::ClipperLib::LocalMinima*& dyn_m_CurrentLM();
    // Get instance field reference: System.Collections.Generic.List`1<System.Collections.Generic.List`1<ClipperLib.TEdge>> m_edges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::TEdge*>*>*& dyn_m_edges();
    // Get instance field reference: ClipperLib.Scanbeam m_Scanbeam
    [[deprecated("Use field access instead!")]] ::ClipperLib::Scanbeam*& dyn_m_Scanbeam();
    // Get instance field reference: System.Collections.Generic.List`1<ClipperLib.OutRec> m_PolyOuts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ClipperLib::OutRec*>*& dyn_m_PolyOuts();
    // Get instance field reference: ClipperLib.TEdge m_ActiveEdges
    [[deprecated("Use field access instead!")]] ::ClipperLib::TEdge*& dyn_m_ActiveEdges();
    // Get instance field reference: System.Boolean m_UseFullRange
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseFullRange();
    // Get instance field reference: System.Boolean m_HasOpenPaths
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasOpenPaths();
    // Get instance field reference: private System.Boolean <PreserveCollinear>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PreserveCollinear$k__BackingField();
    // public System.Boolean get_PreserveCollinear()
    // Offset: 0x1B83A8C
    bool get_PreserveCollinear();
    // public System.Void set_PreserveCollinear(System.Boolean value)
    // Offset: 0x1B83A94
    void set_PreserveCollinear(bool value);
    // System.Void .ctor()
    // Offset: 0x1B7D9F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClipperBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ClipperLib::ClipperBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClipperBase*, creationType>()));
    }
    // public System.Void Swap(ref System.Int64 val1, ref System.Int64 val2)
    // Offset: 0x1B80EC0
    void Swap(ByRef<int64_t> val1, ByRef<int64_t> val2);
    // static System.Boolean IsHorizontal(ClipperLib.TEdge e)
    // Offset: 0x1B7FF78
    static bool IsHorizontal(::ClipperLib::TEdge* e);
    // static System.Boolean SlopesEqual(ClipperLib.TEdge e1, ClipperLib.TEdge e2, System.Boolean UseFullRange)
    // Offset: 0x1B81EF8
    static bool SlopesEqual(::ClipperLib::TEdge* e1, ::ClipperLib::TEdge* e2, bool UseFullRange);
    // static System.Boolean SlopesEqual(ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2, ClipperLib.IntPoint pt3, System.Boolean UseFullRange)
    // Offset: 0x1B82980
    static bool SlopesEqual(::ClipperLib::IntPoint pt1, ::ClipperLib::IntPoint pt2, ::ClipperLib::IntPoint pt3, bool UseFullRange);
    // static System.Boolean SlopesEqual(ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2, ClipperLib.IntPoint pt3, ClipperLib.IntPoint pt4, System.Boolean UseFullRange)
    // Offset: 0x1B8000C
    static bool SlopesEqual(::ClipperLib::IntPoint pt1, ::ClipperLib::IntPoint pt2, ::ClipperLib::IntPoint pt3, ::ClipperLib::IntPoint pt4, bool UseFullRange);
    // private System.Void RangeTest(ClipperLib.IntPoint Pt, ref System.Boolean useFullRange)
    // Offset: 0x1B83BB0
    void RangeTest(::ClipperLib::IntPoint Pt, ByRef<bool> useFullRange);
    // private System.Void InitEdge(ClipperLib.TEdge e, ClipperLib.TEdge eNext, ClipperLib.TEdge ePrev, ClipperLib.IntPoint pt)
    // Offset: 0x1B83CC8
    void InitEdge(::ClipperLib::TEdge* e, ::ClipperLib::TEdge* eNext, ::ClipperLib::TEdge* ePrev, ::ClipperLib::IntPoint pt);
    // private System.Void InitEdge2(ClipperLib.TEdge e, ClipperLib.PolyType polyType)
    // Offset: 0x1B83CEC
    void InitEdge2(::ClipperLib::TEdge* e, ::ClipperLib::PolyType polyType);
    // private ClipperLib.TEdge FindNextLocMin(ClipperLib.TEdge E)
    // Offset: 0x1B83DA4
    ::ClipperLib::TEdge* FindNextLocMin(::ClipperLib::TEdge* E);
    // private ClipperLib.TEdge ProcessBound(ClipperLib.TEdge E, System.Boolean LeftBoundIsForward)
    // Offset: 0x1B83E9C
    ::ClipperLib::TEdge* ProcessBound(::ClipperLib::TEdge* E, bool LeftBoundIsForward);
    // public System.Boolean AddPath(System.Collections.Generic.List`1<ClipperLib.IntPoint> pg, ClipperLib.PolyType polyType, System.Boolean Closed)
    // Offset: 0x1B84320
    bool AddPath(::System::Collections::Generic::List_1<::ClipperLib::IntPoint>* pg, ::ClipperLib::PolyType polyType, bool Closed);
    // public System.Boolean AddPaths(System.Collections.Generic.List`1<System.Collections.Generic.List`1<ClipperLib.IntPoint>> ppg, ClipperLib.PolyType polyType, System.Boolean closed)
    // Offset: 0x1B84CF8
    bool AddPaths(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>* ppg, ::ClipperLib::PolyType polyType, bool closed);
    // System.Boolean Pt2IsBetweenPt1AndPt3(ClipperLib.IntPoint pt1, ClipperLib.IntPoint pt2, ClipperLib.IntPoint pt3)
    // Offset: 0x1B82A18
    bool Pt2IsBetweenPt1AndPt3(::ClipperLib::IntPoint pt1, ::ClipperLib::IntPoint pt2, ::ClipperLib::IntPoint pt3);
    // private ClipperLib.TEdge RemoveEdge(ClipperLib.TEdge e)
    // Offset: 0x1B84CB8
    ::ClipperLib::TEdge* RemoveEdge(::ClipperLib::TEdge* e);
    // private System.Void SetDx(ClipperLib.TEdge e)
    // Offset: 0x1B83D58
    void SetDx(::ClipperLib::TEdge* e);
    // private System.Void InsertLocalMinima(ClipperLib.LocalMinima newLm)
    // Offset: 0x1B842AC
    void InsertLocalMinima(::ClipperLib::LocalMinima* newLm);
    // System.Boolean PopLocalMinima(System.Int64 Y, out ClipperLib.LocalMinima current)
    // Offset: 0x1B80688
    bool PopLocalMinima(int64_t Y, ByRef<::ClipperLib::LocalMinima*> current);
    // private System.Void ReverseHorizontal(ClipperLib.TEdge e)
    // Offset: 0x1B842FC
    void ReverseHorizontal(::ClipperLib::TEdge* e);
    // System.Void Reset()
    // Offset: 0x1B84DC0
    void Reset();
    // System.Void InsertScanbeam(System.Int64 Y)
    // Offset: 0x1B7FC98
    void InsertScanbeam(int64_t Y);
    // System.Boolean PopScanbeam(out System.Int64 Y)
    // Offset: 0x1B7E3A8
    bool PopScanbeam(ByRef<int64_t> Y);
    // System.Boolean LocalMinimaPending()
    // Offset: 0x1B7ECF8
    bool LocalMinimaPending();
    // ClipperLib.OutRec CreateOutRec()
    // Offset: 0x1B80C68
    ::ClipperLib::OutRec* CreateOutRec();
    // System.Void DisposeOutRec(System.Int32 index)
    // Offset: 0x1B7F484
    void DisposeOutRec(int index);
    // System.Void UpdateEdgeIntoAEL(ref ClipperLib.TEdge e)
    // Offset: 0x1B81D64
    void UpdateEdgeIntoAEL(ByRef<::ClipperLib::TEdge*> e);
    // System.Void SwapPositionsInAEL(ClipperLib.TEdge edge1, ClipperLib.TEdge edge2)
    // Offset: 0x1B81C90
    void SwapPositionsInAEL(::ClipperLib::TEdge* edge1, ::ClipperLib::TEdge* edge2);
    // System.Void DeleteFromAEL(ClipperLib.TEdge e)
    // Offset: 0x1B81C38
    void DeleteFromAEL(::ClipperLib::TEdge* e);
  }; // ClipperLib.ClipperBase
  #pragma pack(pop)
  static check_size<sizeof(ClipperBase), 66 + sizeof(bool)> __ClipperLib_ClipperBaseSizeCheck;
  static_assert(sizeof(ClipperBase) == 0x43);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ClipperLib::ClipperBase::get_PreserveCollinear
// Il2CppName: get_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)()>(&ClipperLib::ClipperBase::get_PreserveCollinear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "get_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::set_PreserveCollinear
// Il2CppName: set_PreserveCollinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(bool)>(&ClipperLib::ClipperBase::set_PreserveCollinear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "set_PreserveCollinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ClipperLib::ClipperBase::Swap
// Il2CppName: Swap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(ByRef<int64_t>, ByRef<int64_t>)>(&ClipperLib::ClipperBase::Swap)> {
  static const MethodInfo* get() {
    static auto* val1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* val2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "Swap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val1, val2});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::IsHorizontal
// Il2CppName: IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::IsHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, bool)>(&ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* e1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e1, e2, UseFullRange});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ClipperLib::IntPoint, ::ClipperLib::IntPoint, ::ClipperLib::IntPoint, bool)>(&ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, UseFullRange});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::SlopesEqual
// Il2CppName: SlopesEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ClipperLib::IntPoint, ::ClipperLib::IntPoint, ::ClipperLib::IntPoint, ::ClipperLib::IntPoint, bool)>(&ClipperLib::ClipperBase::SlopesEqual)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt4 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* UseFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "SlopesEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3, pt4, UseFullRange});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::RangeTest
// Il2CppName: RangeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::IntPoint, ByRef<bool>)>(&ClipperLib::ClipperBase::RangeTest)> {
  static const MethodInfo* get() {
    static auto* Pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* useFullRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "RangeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Pt, useFullRange});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::InitEdge
// Il2CppName: InitEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ::ClipperLib::TEdge*, ::ClipperLib::IntPoint)>(&ClipperLib::ClipperBase::InitEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* eNext = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* ePrev = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* pt = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "InitEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, eNext, ePrev, pt});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::InitEdge2
// Il2CppName: InitEdge2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*, ::ClipperLib::PolyType)>(&ClipperLib::ClipperBase::InitEdge2)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("ClipperLib", "PolyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "InitEdge2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, polyType});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::FindNextLocMin
// Il2CppName: FindNextLocMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::FindNextLocMin)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "FindNextLocMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::ProcessBound
// Il2CppName: ProcessBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*, bool)>(&ClipperLib::ClipperBase::ProcessBound)> {
  static const MethodInfo* get() {
    static auto* E = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* LeftBoundIsForward = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "ProcessBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{E, LeftBoundIsForward});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::AddPath
// Il2CppName: AddPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*, ::ClipperLib::PolyType, bool)>(&ClipperLib::ClipperBase::AddPath)> {
  static const MethodInfo* get() {
    static auto* pg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("ClipperLib", "PolyType")->byval_arg;
    static auto* Closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "AddPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pg, polyType, Closed});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::AddPaths
// Il2CppName: AddPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::ClipperLib::IntPoint>*>*, ::ClipperLib::PolyType, bool)>(&ClipperLib::ClipperBase::AddPaths)> {
  static const MethodInfo* get() {
    static auto* ppg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")})})->byval_arg;
    static auto* polyType = &::il2cpp_utils::GetClassFromName("ClipperLib", "PolyType")->byval_arg;
    static auto* closed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "AddPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ppg, polyType, closed});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3
// Il2CppName: Pt2IsBetweenPt1AndPt3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)(::ClipperLib::IntPoint, ::ClipperLib::IntPoint, ::ClipperLib::IntPoint)>(&ClipperLib::ClipperBase::Pt2IsBetweenPt1AndPt3)> {
  static const MethodInfo* get() {
    static auto* pt1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    static auto* pt3 = &::il2cpp_utils::GetClassFromName("ClipperLib", "IntPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "Pt2IsBetweenPt1AndPt3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt1, pt2, pt3});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::RemoveEdge
// Il2CppName: RemoveEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::TEdge* (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::RemoveEdge)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "RemoveEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::SetDx
// Il2CppName: SetDx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::SetDx)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "SetDx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::InsertLocalMinima
// Il2CppName: InsertLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::LocalMinima*)>(&ClipperLib::ClipperBase::InsertLocalMinima)> {
  static const MethodInfo* get() {
    static auto* newLm = &::il2cpp_utils::GetClassFromName("ClipperLib", "LocalMinima")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "InsertLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLm});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::PopLocalMinima
// Il2CppName: PopLocalMinima
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)(int64_t, ByRef<::ClipperLib::LocalMinima*>)>(&ClipperLib::ClipperBase::PopLocalMinima)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* current = &::il2cpp_utils::GetClassFromName("ClipperLib", "LocalMinima")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "PopLocalMinima", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y, current});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::ReverseHorizontal
// Il2CppName: ReverseHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::ReverseHorizontal)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "ReverseHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)()>(&ClipperLib::ClipperBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::InsertScanbeam
// Il2CppName: InsertScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(int64_t)>(&ClipperLib::ClipperBase::InsertScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "InsertScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::PopScanbeam
// Il2CppName: PopScanbeam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)(ByRef<int64_t>)>(&ClipperLib::ClipperBase::PopScanbeam)> {
  static const MethodInfo* get() {
    static auto* Y = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "PopScanbeam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Y});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::LocalMinimaPending
// Il2CppName: LocalMinimaPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClipperLib::ClipperBase::*)()>(&ClipperLib::ClipperBase::LocalMinimaPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "LocalMinimaPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::CreateOutRec
// Il2CppName: CreateOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ClipperLib::OutRec* (ClipperLib::ClipperBase::*)()>(&ClipperLib::ClipperBase::CreateOutRec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "CreateOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::DisposeOutRec
// Il2CppName: DisposeOutRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(int)>(&ClipperLib::ClipperBase::DisposeOutRec)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "DisposeOutRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::UpdateEdgeIntoAEL
// Il2CppName: UpdateEdgeIntoAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(ByRef<::ClipperLib::TEdge*>)>(&ClipperLib::ClipperBase::UpdateEdgeIntoAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "UpdateEdgeIntoAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::SwapPositionsInAEL
// Il2CppName: SwapPositionsInAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*, ::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::SwapPositionsInAEL)> {
  static const MethodInfo* get() {
    static auto* edge1 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    static auto* edge2 = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "SwapPositionsInAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{edge1, edge2});
  }
};
// Writing MetadataGetter for method: ClipperLib::ClipperBase::DeleteFromAEL
// Il2CppName: DeleteFromAEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClipperLib::ClipperBase::*)(::ClipperLib::TEdge*)>(&ClipperLib::ClipperBase::DeleteFromAEL)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("ClipperLib", "TEdge")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ClipperLib::ClipperBase*), "DeleteFromAEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
