// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachinePOV
  class CinemachinePOV;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachinePOV);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachinePOV*, "Cinemachine", "CinemachinePOV");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x165
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachinePOV
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987268
  // [AddComponentMenu] Offset: 987268
  // [SaveDuringPlayAttribute] Offset: 987268
  class CinemachinePOV : public ::Cinemachine::CinemachineComponentBase {
    public:
    // Nested type: ::Cinemachine::CinemachinePOV::RecenterTargetMode
    struct RecenterTargetMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct RecenterTargetMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RecenterTargetMode
      constexpr RecenterTargetMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode None
      static constexpr const int None = 0;
      // Get static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode None
      static ::Cinemachine::CinemachinePOV::RecenterTargetMode _get_None();
      // Set static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode None
      static void _set_None(::Cinemachine::CinemachinePOV::RecenterTargetMode value);
      // static field const value: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode FollowTargetForward
      static constexpr const int FollowTargetForward = 1;
      // Get static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode FollowTargetForward
      static ::Cinemachine::CinemachinePOV::RecenterTargetMode _get_FollowTargetForward();
      // Set static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode FollowTargetForward
      static void _set_FollowTargetForward(::Cinemachine::CinemachinePOV::RecenterTargetMode value);
      // static field const value: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode LookAtTargetForward
      static constexpr const int LookAtTargetForward = 2;
      // Get static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode LookAtTargetForward
      static ::Cinemachine::CinemachinePOV::RecenterTargetMode _get_LookAtTargetForward();
      // Set static field: static public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode LookAtTargetForward
      static void _set_LookAtTargetForward(::Cinemachine::CinemachinePOV::RecenterTargetMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachinePOV::RecenterTargetMode), 0 + sizeof(int)> __Cinemachine_CinemachinePOV_RecenterTargetModeSizeCheck;
    static_assert(sizeof(CinemachinePOV::RecenterTargetMode) == 0x4);
    public:
    // public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode m_RecenterTarget
    // Size: 0x4
    // Offset: 0x50
    ::Cinemachine::CinemachinePOV::RecenterTargetMode m_RecenterTarget;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachinePOV::RecenterTargetMode) == 0x4);
    // Padding between fields: m_RecenterTarget and: m_VerticalAxis
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0x98B808
    // [AxisStatePropertyAttribute] Offset: 0x98B808
    // public Cinemachine.AxisState m_VerticalAxis
    // Size: 0x66
    // Offset: 0x58
    ::Cinemachine::AxisState m_VerticalAxis;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState) == 0x66);
    // Padding between fields: m_VerticalAxis and: m_VerticalRecentering
    char __padding1[0x2] = {};
    // [TooltipAttribute] Offset: 0x98B854
    // public Cinemachine.AxisState/Cinemachine.Recentering m_VerticalRecentering
    // Size: 0x1C
    // Offset: 0xC0
    ::Cinemachine::AxisState::Recentering m_VerticalRecentering;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x1C);
    // Padding between fields: m_VerticalRecentering and: m_HorizontalAxis
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0x98B88C
    // [AxisStatePropertyAttribute] Offset: 0x98B88C
    // public Cinemachine.AxisState m_HorizontalAxis
    // Size: 0x66
    // Offset: 0xE0
    ::Cinemachine::AxisState m_HorizontalAxis;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState) == 0x66);
    // Padding between fields: m_HorizontalAxis and: m_HorizontalRecentering
    char __padding3[0x2] = {};
    // [TooltipAttribute] Offset: 0x98B8D8
    // public Cinemachine.AxisState/Cinemachine.Recentering m_HorizontalRecentering
    // Size: 0x1C
    // Offset: 0x148
    ::Cinemachine::AxisState::Recentering m_HorizontalRecentering;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x1C);
    // [TooltipAttribute] Offset: 0x98B910
    // public System.Boolean m_ApplyBeforeBody
    // Size: 0x1
    // Offset: 0x164
    bool m_ApplyBeforeBody;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Cinemachine.CinemachinePOV/Cinemachine.RecenterTargetMode m_RecenterTarget
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePOV::RecenterTargetMode& dyn_m_RecenterTarget();
    // Get instance field reference: public Cinemachine.AxisState m_VerticalAxis
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& dyn_m_VerticalAxis();
    // Get instance field reference: public Cinemachine.AxisState/Cinemachine.Recentering m_VerticalRecentering
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_VerticalRecentering();
    // Get instance field reference: public Cinemachine.AxisState m_HorizontalAxis
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState& dyn_m_HorizontalAxis();
    // Get instance field reference: public Cinemachine.AxisState/Cinemachine.Recentering m_HorizontalRecentering
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_HorizontalRecentering();
    // Get instance field reference: public System.Boolean m_ApplyBeforeBody
    [[deprecated("Use field access instead!")]] bool& dyn_m_ApplyBeforeBody();
    // private System.Void OnValidate()
    // Offset: 0x105F318
    void OnValidate();
    // private System.Void OnEnable()
    // Offset: 0x105F360
    void OnEnable();
    // public System.Void UpdateInputAxisProvider()
    // Offset: 0x105F364
    void UpdateInputAxisProvider();
    // public UnityEngine.Vector2 GetRecenterTarget()
    // Offset: 0x105F798
    ::UnityEngine::Vector2 GetRecenterTarget();
    // private System.Void SetAxesForRotation(UnityEngine.Quaternion targetRot)
    // Offset: 0x105FA70
    void SetAxesForRotation(::UnityEngine::Quaternion targetRot);
    // public override System.Boolean get_IsValid()
    // Offset: 0x105F308
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0x105F310
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Cinemachine.Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public System.Void .ctor()
    // Offset: 0x105FFF8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachinePOV* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePOV::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachinePOV*, creationType>()));
    }
    // public override System.Void PrePipelineMutateCameraState(ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x105F47C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::PrePipelineMutateCameraState(ref Cinemachine.CameraState state, System.Single deltaTime)
    void PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> state, float deltaTime);
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x105F480
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x105FA5C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Boolean OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams transitionParams)
    // Offset: 0x105FEA4
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams transitionParams)
    bool OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams);
  }; // Cinemachine.CinemachinePOV
  #pragma pack(pop)
  static check_size<sizeof(CinemachinePOV), 356 + sizeof(bool)> __Cinemachine_CinemachinePOVSizeCheck;
  static_assert(sizeof(CinemachinePOV) == 0x165);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachinePOV::RecenterTargetMode, "Cinemachine", "CinemachinePOV/RecenterTargetMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::UpdateInputAxisProvider
// Il2CppName: UpdateInputAxisProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::UpdateInputAxisProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "UpdateInputAxisProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::GetRecenterTarget
// Il2CppName: GetRecenterTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::GetRecenterTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "GetRecenterTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::SetAxesForRotation
// Il2CppName: SetAxesForRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)(::UnityEngine::Quaternion)>(&Cinemachine::CinemachinePOV::SetAxesForRotation)> {
  static const MethodInfo* get() {
    static auto* targetRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "SetAxesForRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachinePOV::*)()>(&Cinemachine::CinemachinePOV::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::PrePipelineMutateCameraState
// Il2CppName: PrePipelineMutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachinePOV::PrePipelineMutateCameraState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "PrePipelineMutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachinePOV::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePOV::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachinePOV::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePOV::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachinePOV::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams>)>(&Cinemachine::CinemachinePOV::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* transitionParams = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase/TransitionParams")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePOV*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime, transitionParams});
  }
};
