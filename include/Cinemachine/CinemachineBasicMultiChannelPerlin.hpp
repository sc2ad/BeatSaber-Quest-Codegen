// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: NoiseSettings
  class NoiseSettings;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBasicMultiChannelPerlin
  class CinemachineBasicMultiChannelPerlin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineBasicMultiChannelPerlin);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBasicMultiChannelPerlin*, "Cinemachine", "CinemachineBasicMultiChannelPerlin");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineBasicMultiChannelPerlin
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986FC8
  // [AddComponentMenu] Offset: 986FC8
  // [SaveDuringPlayAttribute] Offset: 986FC8
  class CinemachineBasicMultiChannelPerlin : public ::Cinemachine::CinemachineComponentBase {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98A2C4
    // [FormerlySerializedAsAttribute] Offset: 0x98A2C4
    // [NoiseSettingsPropertyAttribute] Offset: 0x98A2C4
    // public Cinemachine.NoiseSettings m_NoiseProfile
    // Size: 0x8
    // Offset: 0x50
    ::Cinemachine::NoiseSettings* m_NoiseProfile;
    // Field size check
    static_assert(sizeof(::Cinemachine::NoiseSettings*) == 0x8);
    // [TooltipAttribute] Offset: 0x98A334
    // public UnityEngine.Vector3 m_PivotOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 m_PivotOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x98A36C
    // public System.Single m_AmplitudeGain
    // Size: 0x4
    // Offset: 0x64
    float m_AmplitudeGain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A3A4
    // public System.Single m_FrequencyGain
    // Size: 0x4
    // Offset: 0x68
    float m_FrequencyGain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean mInitialized
    // Size: 0x1
    // Offset: 0x6C
    bool mInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mInitialized and: mNoiseTime
    char __padding4[0x3] = {};
    // private System.Single mNoiseTime
    // Size: 0x4
    // Offset: 0x70
    float mNoiseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 mNoiseOffsets
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 mNoiseOffsets;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public Cinemachine.NoiseSettings m_NoiseProfile
    [[deprecated("Use field access instead!")]] ::Cinemachine::NoiseSettings*& dyn_m_NoiseProfile();
    // Get instance field reference: public UnityEngine.Vector3 m_PivotOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PivotOffset();
    // Get instance field reference: public System.Single m_AmplitudeGain
    [[deprecated("Use field access instead!")]] float& dyn_m_AmplitudeGain();
    // Get instance field reference: public System.Single m_FrequencyGain
    [[deprecated("Use field access instead!")]] float& dyn_m_FrequencyGain();
    // Get instance field reference: private System.Boolean mInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_mInitialized();
    // Get instance field reference: private System.Single mNoiseTime
    [[deprecated("Use field access instead!")]] float& dyn_mNoiseTime();
    // Get instance field reference: private UnityEngine.Vector3 mNoiseOffsets
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mNoiseOffsets();
    // public System.Void ReSeed()
    // Offset: 0x14024A4
    void ReSeed();
    // private System.Void Initialize()
    // Offset: 0x14023AC
    void Initialize();
    // public override System.Boolean get_IsValid()
    // Offset: 0x1401D84
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0x1401E14
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Cinemachine.Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public System.Void .ctor()
    // Offset: 0x1402550
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineBasicMultiChannelPerlin* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBasicMultiChannelPerlin::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineBasicMultiChannelPerlin*, creationType>()));
    }
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x1401E1C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
  }; // Cinemachine.CinemachineBasicMultiChannelPerlin
  #pragma pack(pop)
  static check_size<sizeof(CinemachineBasicMultiChannelPerlin), 116 + sizeof(::UnityEngine::Vector3)> __Cinemachine_CinemachineBasicMultiChannelPerlinSizeCheck;
  static_assert(sizeof(CinemachineBasicMultiChannelPerlin) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::ReSeed
// Il2CppName: ReSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBasicMultiChannelPerlin::*)()>(&Cinemachine::CinemachineBasicMultiChannelPerlin::ReSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBasicMultiChannelPerlin*), "ReSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBasicMultiChannelPerlin::*)()>(&Cinemachine::CinemachineBasicMultiChannelPerlin::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBasicMultiChannelPerlin*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBasicMultiChannelPerlin::*)()>(&Cinemachine::CinemachineBasicMultiChannelPerlin::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBasicMultiChannelPerlin*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachineBasicMultiChannelPerlin::*)()>(&Cinemachine::CinemachineBasicMultiChannelPerlin::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBasicMultiChannelPerlin*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineBasicMultiChannelPerlin::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBasicMultiChannelPerlin::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineBasicMultiChannelPerlin::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBasicMultiChannelPerlin*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
