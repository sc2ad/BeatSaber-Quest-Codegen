// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: BlendHintValue because it is already included!
  // Skipping declaration: CustomBlendable because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CameraState, "Cinemachine", "CameraState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0xE4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.CameraState
  // [TokenAttribute] Offset: FFFFFFFF
  struct CameraState/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Cinemachine::CameraState::BlendHintValue
    struct BlendHintValue;
    // Nested type: ::Cinemachine::CameraState::CustomBlendable
    struct CustomBlendable;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CameraState/Cinemachine.BlendHintValue
    // [TokenAttribute] Offset: FFFFFFFF
    struct BlendHintValue/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BlendHintValue
      constexpr BlendHintValue(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue Nothing
      static constexpr const int Nothing = 0;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue Nothing
      static ::Cinemachine::CameraState::BlendHintValue _get_Nothing();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue Nothing
      static void _set_Nothing(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoPosition
      static constexpr const int NoPosition = 1;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoPosition
      static ::Cinemachine::CameraState::BlendHintValue _get_NoPosition();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoPosition
      static void _set_NoPosition(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoOrientation
      static constexpr const int NoOrientation = 2;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoOrientation
      static ::Cinemachine::CameraState::BlendHintValue _get_NoOrientation();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoOrientation
      static void _set_NoOrientation(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoTransform
      static constexpr const int NoTransform = 3;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoTransform
      static ::Cinemachine::CameraState::BlendHintValue _get_NoTransform();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoTransform
      static void _set_NoTransform(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue SphericalPositionBlend
      static constexpr const int SphericalPositionBlend = 4;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue SphericalPositionBlend
      static ::Cinemachine::CameraState::BlendHintValue _get_SphericalPositionBlend();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue SphericalPositionBlend
      static void _set_SphericalPositionBlend(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue CylindricalPositionBlend
      static constexpr const int CylindricalPositionBlend = 8;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue CylindricalPositionBlend
      static ::Cinemachine::CameraState::BlendHintValue _get_CylindricalPositionBlend();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue CylindricalPositionBlend
      static void _set_CylindricalPositionBlend(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue RadialAimBlend
      static constexpr const int RadialAimBlend = 16;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue RadialAimBlend
      static ::Cinemachine::CameraState::BlendHintValue _get_RadialAimBlend();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue RadialAimBlend
      static void _set_RadialAimBlend(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue IgnoreLookAtTarget
      static constexpr const int IgnoreLookAtTarget = 32;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue IgnoreLookAtTarget
      static ::Cinemachine::CameraState::BlendHintValue _get_IgnoreLookAtTarget();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue IgnoreLookAtTarget
      static void _set_IgnoreLookAtTarget(::Cinemachine::CameraState::BlendHintValue value);
      // static field const value: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoLens
      static constexpr const int NoLens = 64;
      // Get static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoLens
      static ::Cinemachine::CameraState::BlendHintValue _get_NoLens();
      // Set static field: static public Cinemachine.CameraState/Cinemachine.BlendHintValue NoLens
      static void _set_NoLens(::Cinemachine::CameraState::BlendHintValue value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CameraState/Cinemachine.BlendHintValue
    #pragma pack(pop)
    static check_size<sizeof(CameraState::BlendHintValue), 0 + sizeof(int)> __Cinemachine_CameraState_BlendHintValueSizeCheck;
    static_assert(sizeof(CameraState::BlendHintValue) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CameraState/Cinemachine.CustomBlendable
    // [TokenAttribute] Offset: FFFFFFFF
    struct CustomBlendable/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Object m_Custom
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Object* m_Custom;
      // Field size check
      static_assert(sizeof(::UnityEngine::Object*) == 0x8);
      // public System.Single m_Weight
      // Size: 0x4
      // Offset: 0x8
      float m_Weight;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: CustomBlendable
      constexpr CustomBlendable(::UnityEngine::Object* m_Custom_ = {}, float m_Weight_ = {}) noexcept : m_Custom{m_Custom_}, m_Weight{m_Weight_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Object m_Custom
      [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_m_Custom();
      // Get instance field reference: public System.Single m_Weight
      [[deprecated("Use field access instead!")]] float& dyn_m_Weight();
      // public System.Void .ctor(UnityEngine.Object custom, System.Single weight)
      // Offset: 0xA5CF50
      // ABORTED: conflicts with another method.  CustomBlendable(::UnityEngine::Object* custom, float weight);
    }; // Cinemachine.CameraState/Cinemachine.CustomBlendable
    #pragma pack(pop)
    static check_size<sizeof(CameraState::CustomBlendable), 8 + sizeof(float)> __Cinemachine_CameraState_CustomBlendableSizeCheck;
    static_assert(sizeof(CameraState::CustomBlendable) == 0xC);
    public:
    // private Cinemachine.LensSettings <Lens>k__BackingField
    // Size: 0x2E
    // Offset: 0x0
    ::Cinemachine::LensSettings Lens;
    // Field size check
    static_assert(sizeof(::Cinemachine::LensSettings) == 0x2E);
    // Padding between fields: Lens and: ReferenceUp
    char __padding0[0x2] = {};
    // private UnityEngine.Vector3 <ReferenceUp>k__BackingField
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 ReferenceUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <ReferenceLookAt>k__BackingField
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 ReferenceLookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <RawPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 RawPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <RawOrientation>k__BackingField
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Quaternion RawOrientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 <PositionDampingBypass>k__BackingField
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 PositionDampingBypass;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <ShotQuality>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    float ShotQuality;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <PositionCorrection>k__BackingField
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 PositionCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <OrientationCorrection>k__BackingField
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Quaternion OrientationCorrection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private Cinemachine.CameraState/Cinemachine.BlendHintValue <BlendHint>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    ::Cinemachine::CameraState::BlendHintValue BlendHint;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState::BlendHintValue) == 0x4);
    // Padding between fields: BlendHint and: mCustom0
    char __padding9[0x4] = {};
    // private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom0
    // Size: 0xC
    // Offset: 0x98
    ::Cinemachine::CameraState::CustomBlendable mCustom0;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState::CustomBlendable) == 0xC);
    // Padding between fields: mCustom0 and: mCustom1
    char __padding10[0x4] = {};
    // private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom1
    // Size: 0xC
    // Offset: 0xA8
    ::Cinemachine::CameraState::CustomBlendable mCustom1;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState::CustomBlendable) == 0xC);
    // Padding between fields: mCustom1 and: mCustom2
    char __padding11[0x4] = {};
    // private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom2
    // Size: 0xC
    // Offset: 0xB8
    ::Cinemachine::CameraState::CustomBlendable mCustom2;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState::CustomBlendable) == 0xC);
    // Padding between fields: mCustom2 and: mCustom3
    char __padding12[0x4] = {};
    // private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom3
    // Size: 0xC
    // Offset: 0xC8
    ::Cinemachine::CameraState::CustomBlendable mCustom3;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState::CustomBlendable) == 0xC);
    // Padding between fields: mCustom3 and: m_CustomOverflow
    char __padding13[0x4] = {};
    // private System.Collections.Generic.List`1<Cinemachine.CameraState/Cinemachine.CustomBlendable> m_CustomOverflow
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>* m_CustomOverflow;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>*) == 0x8);
    // private System.Int32 <NumCustomBlendables>k__BackingField
    // Size: 0x4
    // Offset: 0xE0
    int NumCustomBlendables;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CameraState
    constexpr CameraState(::Cinemachine::LensSettings Lens_ = {}, ::UnityEngine::Vector3 ReferenceUp_ = {}, ::UnityEngine::Vector3 ReferenceLookAt_ = {}, ::UnityEngine::Vector3 RawPosition_ = {}, ::UnityEngine::Quaternion RawOrientation_ = {}, ::UnityEngine::Vector3 PositionDampingBypass_ = {}, float ShotQuality_ = {}, ::UnityEngine::Vector3 PositionCorrection_ = {}, ::UnityEngine::Quaternion OrientationCorrection_ = {}, ::Cinemachine::CameraState::BlendHintValue BlendHint_ = {}, ::Cinemachine::CameraState::CustomBlendable mCustom0_ = {}, ::Cinemachine::CameraState::CustomBlendable mCustom1_ = {}, ::Cinemachine::CameraState::CustomBlendable mCustom2_ = {}, ::Cinemachine::CameraState::CustomBlendable mCustom3_ = {}, ::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>* m_CustomOverflow_ = {}, int NumCustomBlendables_ = {}) noexcept : Lens{Lens_}, ReferenceUp{ReferenceUp_}, ReferenceLookAt{ReferenceLookAt_}, RawPosition{RawPosition_}, RawOrientation{RawOrientation_}, PositionDampingBypass{PositionDampingBypass_}, ShotQuality{ShotQuality_}, PositionCorrection{PositionCorrection_}, OrientationCorrection{OrientationCorrection_}, BlendHint{BlendHint_}, mCustom0{mCustom0_}, mCustom1{mCustom1_}, mCustom2{mCustom2_}, mCustom3{mCustom3_}, m_CustomOverflow{m_CustomOverflow_}, NumCustomBlendables{NumCustomBlendables_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public UnityEngine.Vector3 kNoPoint
    static ::UnityEngine::Vector3 _get_kNoPoint();
    // Set static field: static public UnityEngine.Vector3 kNoPoint
    static void _set_kNoPoint(::UnityEngine::Vector3 value);
    // Get instance field reference: private Cinemachine.LensSettings <Lens>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& dyn_$Lens$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <ReferenceUp>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$ReferenceUp$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <ReferenceLookAt>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$ReferenceLookAt$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <RawPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$RawPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <RawOrientation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$RawOrientation$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <PositionDampingBypass>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$PositionDampingBypass$k__BackingField();
    // Get instance field reference: private System.Single <ShotQuality>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$ShotQuality$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <PositionCorrection>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$PositionCorrection$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <OrientationCorrection>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$OrientationCorrection$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState/Cinemachine.BlendHintValue <BlendHint>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::BlendHintValue& dyn_$BlendHint$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom0
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& dyn_mCustom0();
    // Get instance field reference: private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom1
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& dyn_mCustom1();
    // Get instance field reference: private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom2
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& dyn_mCustom2();
    // Get instance field reference: private Cinemachine.CameraState/Cinemachine.CustomBlendable mCustom3
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState::CustomBlendable& dyn_mCustom3();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CameraState/Cinemachine.CustomBlendable> m_CustomOverflow
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CameraState::CustomBlendable>*& dyn_m_CustomOverflow();
    // Get instance field reference: private System.Int32 <NumCustomBlendables>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$NumCustomBlendables$k__BackingField();
    // public Cinemachine.LensSettings get_Lens()
    // Offset: 0xA5CDE0
    ::Cinemachine::LensSettings get_Lens();
    // public System.Void set_Lens(Cinemachine.LensSettings value)
    // Offset: 0xA5CDF4
    void set_Lens(::Cinemachine::LensSettings value);
    // public UnityEngine.Vector3 get_ReferenceUp()
    // Offset: 0xA5CE08
    ::UnityEngine::Vector3 get_ReferenceUp();
    // public System.Void set_ReferenceUp(UnityEngine.Vector3 value)
    // Offset: 0xA5CE14
    void set_ReferenceUp(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_ReferenceLookAt()
    // Offset: 0xA5CE20
    ::UnityEngine::Vector3 get_ReferenceLookAt();
    // public System.Void set_ReferenceLookAt(UnityEngine.Vector3 value)
    // Offset: 0xA5CE2C
    void set_ReferenceLookAt(::UnityEngine::Vector3 value);
    // public System.Boolean get_HasLookAt()
    // Offset: 0xA5CE38
    bool get_HasLookAt();
    // public UnityEngine.Vector3 get_RawPosition()
    // Offset: 0xA5CE40
    ::UnityEngine::Vector3 get_RawPosition();
    // public System.Void set_RawPosition(UnityEngine.Vector3 value)
    // Offset: 0xA5CE4C
    void set_RawPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_RawOrientation()
    // Offset: 0xA5CE58
    ::UnityEngine::Quaternion get_RawOrientation();
    // public System.Void set_RawOrientation(UnityEngine.Quaternion value)
    // Offset: 0xA5CE64
    void set_RawOrientation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_PositionDampingBypass()
    // Offset: 0xA5CE70
    ::UnityEngine::Vector3 get_PositionDampingBypass();
    // public System.Void set_PositionDampingBypass(UnityEngine.Vector3 value)
    // Offset: 0xA5CE7C
    void set_PositionDampingBypass(::UnityEngine::Vector3 value);
    // public System.Single get_ShotQuality()
    // Offset: 0xA5CE88
    float get_ShotQuality();
    // public System.Void set_ShotQuality(System.Single value)
    // Offset: 0xA5CE90
    void set_ShotQuality(float value);
    // public UnityEngine.Vector3 get_PositionCorrection()
    // Offset: 0xA5CE98
    ::UnityEngine::Vector3 get_PositionCorrection();
    // public System.Void set_PositionCorrection(UnityEngine.Vector3 value)
    // Offset: 0xA5CEA4
    void set_PositionCorrection(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_OrientationCorrection()
    // Offset: 0xA5CEB0
    ::UnityEngine::Quaternion get_OrientationCorrection();
    // public System.Void set_OrientationCorrection(UnityEngine.Quaternion value)
    // Offset: 0xA5CEBC
    void set_OrientationCorrection(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_CorrectedPosition()
    // Offset: 0xA5CEC8
    ::UnityEngine::Vector3 get_CorrectedPosition();
    // public UnityEngine.Quaternion get_CorrectedOrientation()
    // Offset: 0xA5CED0
    ::UnityEngine::Quaternion get_CorrectedOrientation();
    // public UnityEngine.Vector3 get_FinalPosition()
    // Offset: 0xA5CED8
    ::UnityEngine::Vector3 get_FinalPosition();
    // public UnityEngine.Quaternion get_FinalOrientation()
    // Offset: 0xA5CEE0
    ::UnityEngine::Quaternion get_FinalOrientation();
    // public Cinemachine.CameraState/Cinemachine.BlendHintValue get_BlendHint()
    // Offset: 0xA5CEE8
    ::Cinemachine::CameraState::BlendHintValue get_BlendHint();
    // public System.Void set_BlendHint(Cinemachine.CameraState/Cinemachine.BlendHintValue value)
    // Offset: 0xA5CEF0
    void set_BlendHint(::Cinemachine::CameraState::BlendHintValue value);
    // static public Cinemachine.CameraState get_Default()
    // Offset: 0x13FE2DC
    static ::Cinemachine::CameraState get_Default();
    // public System.Int32 get_NumCustomBlendables()
    // Offset: 0xA5CEF8
    int get_NumCustomBlendables();
    // private System.Void set_NumCustomBlendables(System.Int32 value)
    // Offset: 0xA5CF00
    void set_NumCustomBlendables(int value);
    // static private System.Void .cctor()
    // Offset: 0x13FFDB8
    static void _cctor();
    // public Cinemachine.CameraState/Cinemachine.CustomBlendable GetCustomBlendable(System.Int32 index)
    // Offset: 0xA5CF08
    ::Cinemachine::CameraState::CustomBlendable GetCustomBlendable(int index);
    // private System.Int32 FindCustomBlendable(UnityEngine.Object custom)
    // Offset: 0xA5CF10
    int FindCustomBlendable(::UnityEngine::Object* custom);
    // public System.Void AddCustomBlendable(Cinemachine.CameraState/Cinemachine.CustomBlendable b)
    // Offset: 0xA5CF18
    void AddCustomBlendable(::Cinemachine::CameraState::CustomBlendable b);
    // static public Cinemachine.CameraState Lerp(Cinemachine.CameraState stateA, Cinemachine.CameraState stateB, System.Single t)
    // Offset: 0x13FE930
    static ::Cinemachine::CameraState Lerp(::Cinemachine::CameraState stateA, ::Cinemachine::CameraState stateB, float t);
    // static private System.Single InterpolateFOV(System.Single fovA, System.Single fovB, System.Single dA, System.Single dB, System.Single t)
    // Offset: 0x13FF8DC
    static float InterpolateFOV(float fovA, float fovB, float dA, float dB, float t);
    // static private UnityEngine.Vector3 ApplyPosBlendHint(UnityEngine.Vector3 posA, Cinemachine.CameraState/Cinemachine.BlendHintValue hintA, UnityEngine.Vector3 posB, Cinemachine.CameraState/Cinemachine.BlendHintValue hintB, UnityEngine.Vector3 original, UnityEngine.Vector3 blended)
    // Offset: 0x13FF858
    static ::UnityEngine::Vector3 ApplyPosBlendHint(::UnityEngine::Vector3 posA, ::Cinemachine::CameraState::BlendHintValue hintA, ::UnityEngine::Vector3 posB, ::Cinemachine::CameraState::BlendHintValue hintB, ::UnityEngine::Vector3 original, ::UnityEngine::Vector3 blended);
    // static private UnityEngine.Quaternion ApplyRotBlendHint(UnityEngine.Quaternion rotA, Cinemachine.CameraState/Cinemachine.BlendHintValue hintA, UnityEngine.Quaternion rotB, Cinemachine.CameraState/Cinemachine.BlendHintValue hintB, UnityEngine.Quaternion original, UnityEngine.Quaternion blended)
    // Offset: 0x13FF898
    static ::UnityEngine::Quaternion ApplyRotBlendHint(::UnityEngine::Quaternion rotA, ::Cinemachine::CameraState::BlendHintValue hintA, ::UnityEngine::Quaternion rotB, ::Cinemachine::CameraState::BlendHintValue hintB, ::UnityEngine::Quaternion original, ::UnityEngine::Quaternion blended);
    // private UnityEngine.Vector3 InterpolatePosition(UnityEngine.Vector3 posA, UnityEngine.Vector3 pivotA, UnityEngine.Vector3 posB, UnityEngine.Vector3 pivotB, System.Single t)
    // Offset: 0xA5CF20
    ::UnityEngine::Vector3 InterpolatePosition(::UnityEngine::Vector3 posA, ::UnityEngine::Vector3 pivotA, ::UnityEngine::Vector3 posB, ::UnityEngine::Vector3 pivotB, float t);
  }; // Cinemachine.CameraState
  #pragma pack(pop)
  static check_size<sizeof(CameraState), 224 + sizeof(int)> __Cinemachine_CameraStateSizeCheck;
  static_assert(sizeof(CameraState) == 0xE4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CameraState::CustomBlendable, "Cinemachine", "CameraState/CustomBlendable");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CameraState::BlendHintValue, "Cinemachine", "CameraState/BlendHintValue");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CameraState::get_Lens
// Il2CppName: get_Lens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::LensSettings (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_Lens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_Lens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_Lens
// Il2CppName: set_Lens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::Cinemachine::LensSettings)>(&Cinemachine::CameraState::set_Lens)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "LensSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_Lens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_ReferenceUp
// Il2CppName: get_ReferenceUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_ReferenceUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_ReferenceUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_ReferenceUp
// Il2CppName: set_ReferenceUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Vector3)>(&Cinemachine::CameraState::set_ReferenceUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_ReferenceUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_ReferenceLookAt
// Il2CppName: get_ReferenceLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_ReferenceLookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_ReferenceLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_ReferenceLookAt
// Il2CppName: set_ReferenceLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Vector3)>(&Cinemachine::CameraState::set_ReferenceLookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_ReferenceLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_HasLookAt
// Il2CppName: get_HasLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_HasLookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_HasLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_RawPosition
// Il2CppName: get_RawPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_RawPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_RawPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_RawPosition
// Il2CppName: set_RawPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Vector3)>(&Cinemachine::CameraState::set_RawPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_RawPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_RawOrientation
// Il2CppName: get_RawOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_RawOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_RawOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_RawOrientation
// Il2CppName: set_RawOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Quaternion)>(&Cinemachine::CameraState::set_RawOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_RawOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_PositionDampingBypass
// Il2CppName: get_PositionDampingBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_PositionDampingBypass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_PositionDampingBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_PositionDampingBypass
// Il2CppName: set_PositionDampingBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Vector3)>(&Cinemachine::CameraState::set_PositionDampingBypass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_PositionDampingBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_ShotQuality
// Il2CppName: get_ShotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_ShotQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_ShotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_ShotQuality
// Il2CppName: set_ShotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(float)>(&Cinemachine::CameraState::set_ShotQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_ShotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_PositionCorrection
// Il2CppName: get_PositionCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_PositionCorrection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_PositionCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_PositionCorrection
// Il2CppName: set_PositionCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Vector3)>(&Cinemachine::CameraState::set_PositionCorrection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_PositionCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_OrientationCorrection
// Il2CppName: get_OrientationCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_OrientationCorrection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_OrientationCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_OrientationCorrection
// Il2CppName: set_OrientationCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::UnityEngine::Quaternion)>(&Cinemachine::CameraState::set_OrientationCorrection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_OrientationCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_CorrectedPosition
// Il2CppName: get_CorrectedPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_CorrectedPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_CorrectedPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_CorrectedOrientation
// Il2CppName: get_CorrectedOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_CorrectedOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_CorrectedOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_FinalPosition
// Il2CppName: get_FinalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_FinalPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_FinalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_FinalOrientation
// Il2CppName: get_FinalOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_FinalOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_FinalOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_BlendHint
// Il2CppName: get_BlendHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState::BlendHintValue (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_BlendHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_BlendHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_BlendHint
// Il2CppName: set_BlendHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::Cinemachine::CameraState::BlendHintValue)>(&Cinemachine::CameraState::set_BlendHint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/BlendHintValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_BlendHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_Default
// Il2CppName: get_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (*)()>(&Cinemachine::CameraState::get_Default)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::get_NumCustomBlendables
// Il2CppName: get_NumCustomBlendables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CameraState::*)()>(&Cinemachine::CameraState::get_NumCustomBlendables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "get_NumCustomBlendables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::set_NumCustomBlendables
// Il2CppName: set_NumCustomBlendables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(int)>(&Cinemachine::CameraState::set_NumCustomBlendables)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "set_NumCustomBlendables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CameraState::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::GetCustomBlendable
// Il2CppName: GetCustomBlendable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState::CustomBlendable (Cinemachine::CameraState::*)(int)>(&Cinemachine::CameraState::GetCustomBlendable)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "GetCustomBlendable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::FindCustomBlendable
// Il2CppName: FindCustomBlendable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CameraState::*)(::UnityEngine::Object*)>(&Cinemachine::CameraState::FindCustomBlendable)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "FindCustomBlendable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::AddCustomBlendable
// Il2CppName: AddCustomBlendable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CameraState::*)(::Cinemachine::CameraState::CustomBlendable)>(&Cinemachine::CameraState::AddCustomBlendable)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/CustomBlendable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "AddCustomBlendable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (*)(::Cinemachine::CameraState, ::Cinemachine::CameraState, float)>(&Cinemachine::CameraState::Lerp)> {
  static const MethodInfo* get() {
    static auto* stateA = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    static auto* stateB = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateA, stateB, t});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::InterpolateFOV
// Il2CppName: InterpolateFOV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Cinemachine::CameraState::InterpolateFOV)> {
  static const MethodInfo* get() {
    static auto* fovA = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fovB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dA = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "InterpolateFOV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fovA, fovB, dA, dB, t});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::ApplyPosBlendHint
// Il2CppName: ApplyPosBlendHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::Cinemachine::CameraState::BlendHintValue, ::UnityEngine::Vector3, ::Cinemachine::CameraState::BlendHintValue, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CameraState::ApplyPosBlendHint)> {
  static const MethodInfo* get() {
    static auto* posA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hintA = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/BlendHintValue")->byval_arg;
    static auto* posB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hintB = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/BlendHintValue")->byval_arg;
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* blended = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "ApplyPosBlendHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posA, hintA, posB, hintB, original, blended});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::ApplyRotBlendHint
// Il2CppName: ApplyRotBlendHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion, ::Cinemachine::CameraState::BlendHintValue, ::UnityEngine::Quaternion, ::Cinemachine::CameraState::BlendHintValue, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&Cinemachine::CameraState::ApplyRotBlendHint)> {
  static const MethodInfo* get() {
    static auto* rotA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* hintA = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/BlendHintValue")->byval_arg;
    static auto* rotB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* hintB = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState/BlendHintValue")->byval_arg;
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* blended = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "ApplyRotBlendHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotA, hintA, rotB, hintB, original, blended});
  }
};
// Writing MetadataGetter for method: Cinemachine::CameraState::InterpolatePosition
// Il2CppName: InterpolatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CameraState::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Cinemachine::CameraState::InterpolatePosition)> {
  static const MethodInfo* get() {
    static auto* posA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pivotA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* posB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pivotB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CameraState), "InterpolatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{posA, pivotA, posB, pivotB, t});
  }
};
