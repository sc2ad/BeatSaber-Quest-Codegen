// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint
#include "Cinemachine/CinemachineVirtualCameraBase_BlendHint.hpp"
// Including type: Cinemachine.CinemachineBrain
#include "Cinemachine/CinemachineBrain.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineVirtualCameraBase::TransitionParams, "Cinemachine", "CinemachineVirtualCameraBase/TransitionParams");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams
  // [TokenAttribute] Offset: FFFFFFFF
  struct CinemachineVirtualCameraBase::TransitionParams/*, public ::System::ValueType*/ {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98E00C
    // [FormerlySerializedAsAttribute] Offset: 0x98E00C
    // public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint m_BlendHint
    // Size: 0x4
    // Offset: 0x0
    ::Cinemachine::CinemachineVirtualCameraBase::BlendHint m_BlendHint;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::BlendHint) == 0x4);
    // [TooltipAttribute] Offset: 0x98E06C
    // public System.Boolean m_InheritPosition
    // Size: 0x1
    // Offset: 0x4
    bool m_InheritPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_InheritPosition and: m_OnCameraLive
    char __padding1[0x3] = {};
    // [TooltipAttribute] Offset: 0x98E0A4
    // public Cinemachine.CinemachineBrain/Cinemachine.VcamActivatedEvent m_OnCameraLive
    // Size: 0x8
    // Offset: 0x8
    ::Cinemachine::CinemachineBrain::VcamActivatedEvent* m_OnCameraLive;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain::VcamActivatedEvent*) == 0x8);
    public:
    // Creating value type constructor for type: TransitionParams
    constexpr TransitionParams(::Cinemachine::CinemachineVirtualCameraBase::BlendHint m_BlendHint_ = {}, bool m_InheritPosition_ = {}, ::Cinemachine::CinemachineBrain::VcamActivatedEvent* m_OnCameraLive_ = {}) noexcept : m_BlendHint{m_BlendHint_}, m_InheritPosition{m_InheritPosition_}, m_OnCameraLive{m_OnCameraLive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint m_BlendHint
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& dyn_m_BlendHint();
    // Get instance field reference: public System.Boolean m_InheritPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_InheritPosition();
    // Get instance field reference: public Cinemachine.CinemachineBrain/Cinemachine.VcamActivatedEvent m_OnCameraLive
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::VcamActivatedEvent*& dyn_m_OnCameraLive();
  }; // Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams
  #pragma pack(pop)
  static check_size<sizeof(CinemachineVirtualCameraBase::TransitionParams), 8 + sizeof(::Cinemachine::CinemachineBrain::VcamActivatedEvent*)> __Cinemachine_CinemachineVirtualCameraBase_TransitionParamsSizeCheck;
  static_assert(sizeof(CinemachineVirtualCameraBase::TransitionParams) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
