// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: StaticPointVirtualCamera
  class StaticPointVirtualCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::StaticPointVirtualCamera);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::StaticPointVirtualCamera*, "Cinemachine", "StaticPointVirtualCamera");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x114
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.StaticPointVirtualCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class StaticPointVirtualCamera : public ::Il2CppObject/*, public ::Cinemachine::ICinemachineCamera*/ {
    public:
    public:
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <Priority>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Priority and: LookAt
    char __padding1[0x4] = {};
    // private UnityEngine.Transform <LookAt>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <Follow>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Cinemachine.CameraState <State>k__BackingField
    // Size: 0xE4
    // Offset: 0x30
    ::Cinemachine::CameraState State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    public:
    // Creating interface conversion operator: operator ::Cinemachine::ICinemachineCamera
    operator ::Cinemachine::ICinemachineCamera() noexcept {
      return *reinterpret_cast<::Cinemachine::ICinemachineCamera*>(this);
    }
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Int32 <Priority>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Priority$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <LookAt>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$LookAt$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <Follow>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$Follow$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState <State>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_$State$k__BackingField();
    // public System.String get_Name()
    // Offset: 0x1453D34
    ::StringW get_Name();
    // private System.Void set_Name(System.String value)
    // Offset: 0x1453D3C
    void set_Name(::StringW value);
    // public System.String get_Description()
    // Offset: 0x1453D44
    ::StringW get_Description();
    // public System.Int32 get_Priority()
    // Offset: 0x1453D8C
    int get_Priority();
    // public System.Void set_Priority(System.Int32 value)
    // Offset: 0x1453D94
    void set_Priority(int value);
    // public UnityEngine.Transform get_LookAt()
    // Offset: 0x1453D9C
    ::UnityEngine::Transform* get_LookAt();
    // public System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x1453DA4
    void set_LookAt(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_Follow()
    // Offset: 0x1453DAC
    ::UnityEngine::Transform* get_Follow();
    // public System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x1453DB4
    void set_Follow(::UnityEngine::Transform* value);
    // public Cinemachine.CameraState get_State()
    // Offset: 0x1453DBC
    ::Cinemachine::CameraState get_State();
    // private System.Void set_State(Cinemachine.CameraState value)
    // Offset: 0x1453DCC
    void set_State(::Cinemachine::CameraState value);
    // public UnityEngine.GameObject get_VirtualCameraGameObject()
    // Offset: 0x1453DE8
    ::UnityEngine::GameObject* get_VirtualCameraGameObject();
    // public System.Boolean get_IsValid()
    // Offset: 0x1453DF0
    bool get_IsValid();
    // public Cinemachine.ICinemachineCamera get_ParentCamera()
    // Offset: 0x1453DF8
    ::Cinemachine::ICinemachineCamera* get_ParentCamera();
    // public System.Void .ctor(Cinemachine.CameraState state, System.String name)
    // Offset: 0x144B684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StaticPointVirtualCamera* New_ctor(::Cinemachine::CameraState state, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::StaticPointVirtualCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StaticPointVirtualCamera*, creationType>(state, name)));
    }
    // public System.Void SetState(Cinemachine.CameraState state)
    // Offset: 0x1453D18
    void SetState(::Cinemachine::CameraState state);
    // public System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x1453E00
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public System.Void UpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1453E08
    void UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1453E0C
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1453E10
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // public System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x1453E14
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
  }; // Cinemachine.StaticPointVirtualCamera
  #pragma pack(pop)
  static check_size<sizeof(StaticPointVirtualCamera), 48 + sizeof(::Cinemachine::CameraState)> __Cinemachine_StaticPointVirtualCameraSizeCheck;
  static_assert(sizeof(StaticPointVirtualCamera) == 0x114);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::StringW)>(&Cinemachine::StaticPointVirtualCamera::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_Priority
// Il2CppName: get_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_Priority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(int)>(&Cinemachine::StaticPointVirtualCamera::set_Priority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::StaticPointVirtualCamera::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::StaticPointVirtualCamera::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::Cinemachine::CameraState)>(&Cinemachine::StaticPointVirtualCamera::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_VirtualCameraGameObject
// Il2CppName: get_VirtualCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_VirtualCameraGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_VirtualCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::get_ParentCamera
// Il2CppName: get_ParentCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::StaticPointVirtualCamera::*)()>(&Cinemachine::StaticPointVirtualCamera::get_ParentCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "get_ParentCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::Cinemachine::CameraState)>(&Cinemachine::StaticPointVirtualCamera::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::StaticPointVirtualCamera::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::StaticPointVirtualCamera::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::UpdateCameraState
// Il2CppName: UpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::StaticPointVirtualCamera::UpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "UpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::StaticPointVirtualCamera::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::StaticPointVirtualCamera::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::StaticPointVirtualCamera::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::StaticPointVirtualCamera::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::StaticPointVirtualCamera::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::StaticPointVirtualCamera*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
