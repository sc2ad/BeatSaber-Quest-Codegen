// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineConfiner
#include "Cinemachine/CinemachineConfiner.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineConfiner::VcamExtraState);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner::VcamExtraState*, "Cinemachine", "CinemachineConfiner/VcamExtraState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineConfiner/Cinemachine.VcamExtraState
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineConfiner::VcamExtraState : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 m_previousDisplacement
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 m_previousDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single confinerDisplacement
    // Size: 0x4
    // Offset: 0x1C
    float confinerDisplacement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 m_previousDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_previousDisplacement();
    // Get instance field reference: public System.Single confinerDisplacement
    [[deprecated("Use field access instead!")]] float& dyn_confinerDisplacement();
    // public System.Void .ctor()
    // Offset: 0x141173C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineConfiner::VcamExtraState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::VcamExtraState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineConfiner::VcamExtraState*, creationType>()));
    }
  }; // Cinemachine.CinemachineConfiner/Cinemachine.VcamExtraState
  #pragma pack(pop)
  static check_size<sizeof(CinemachineConfiner::VcamExtraState), 28 + sizeof(float)> __Cinemachine_CinemachineConfiner_VcamExtraStateSizeCheck;
  static_assert(sizeof(CinemachineConfiner::VcamExtraState) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::VcamExtraState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
