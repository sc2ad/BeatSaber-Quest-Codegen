// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: AxisBase
  struct AxisBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::AxisBase, "Cinemachine", "AxisBase");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.AxisBase
  // [TokenAttribute] Offset: FFFFFFFF
  struct AxisBase/*, public ::System::ValueType*/ {
    public:
    public:
    // [NoSaveDuringPlayAttribute] Offset: 0x98C570
    // [TooltipAttribute] Offset: 0x98C570
    // public System.Single m_Value
    // Size: 0x4
    // Offset: 0x0
    float m_Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C5BC
    // public System.Single m_MinValue
    // Size: 0x4
    // Offset: 0x4
    float m_MinValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C5F4
    // public System.Single m_MaxValue
    // Size: 0x4
    // Offset: 0x8
    float m_MaxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C62C
    // public System.Boolean m_Wrap
    // Size: 0x1
    // Offset: 0xC
    bool m_Wrap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: AxisBase
    constexpr AxisBase(float m_Value_ = {}, float m_MinValue_ = {}, float m_MaxValue_ = {}, bool m_Wrap_ = {}) noexcept : m_Value{m_Value_}, m_MinValue{m_MinValue_}, m_MaxValue{m_MaxValue_}, m_Wrap{m_Wrap_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single m_Value
    [[deprecated("Use field access instead!")]] float& dyn_m_Value();
    // Get instance field reference: public System.Single m_MinValue
    [[deprecated("Use field access instead!")]] float& dyn_m_MinValue();
    // Get instance field reference: public System.Single m_MaxValue
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxValue();
    // Get instance field reference: public System.Boolean m_Wrap
    [[deprecated("Use field access instead!")]] bool& dyn_m_Wrap();
    // public System.Void Validate()
    // Offset: 0xA5CB5C
    void Validate();
  }; // Cinemachine.AxisBase
  #pragma pack(pop)
  static check_size<sizeof(AxisBase), 12 + sizeof(bool)> __Cinemachine_AxisBaseSizeCheck;
  static_assert(sizeof(AxisBase) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::AxisBase::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisBase::*)()>(&Cinemachine::AxisBase::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisBase), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
