// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineVirtualCameraBase::BlendHint, "Cinemachine", "CinemachineVirtualCameraBase/BlendHint");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint
  // [TokenAttribute] Offset: FFFFFFFF
  struct CinemachineVirtualCameraBase::BlendHint/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BlendHint
    constexpr BlendHint(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint None
    static constexpr const int None = 0;
    // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint None
    static ::Cinemachine::CinemachineVirtualCameraBase::BlendHint _get_None();
    // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint None
    static void _set_None(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value);
    // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint SphericalPosition
    static constexpr const int SphericalPosition = 1;
    // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint SphericalPosition
    static ::Cinemachine::CinemachineVirtualCameraBase::BlendHint _get_SphericalPosition();
    // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint SphericalPosition
    static void _set_SphericalPosition(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value);
    // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint CylindricalPosition
    static constexpr const int CylindricalPosition = 2;
    // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint CylindricalPosition
    static ::Cinemachine::CinemachineVirtualCameraBase::BlendHint _get_CylindricalPosition();
    // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint CylindricalPosition
    static void _set_CylindricalPosition(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value);
    // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint ScreenSpaceAimWhenTargetsDiffer
    static constexpr const int ScreenSpaceAimWhenTargetsDiffer = 3;
    // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint ScreenSpaceAimWhenTargetsDiffer
    static ::Cinemachine::CinemachineVirtualCameraBase::BlendHint _get_ScreenSpaceAimWhenTargetsDiffer();
    // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint ScreenSpaceAimWhenTargetsDiffer
    static void _set_ScreenSpaceAimWhenTargetsDiffer(::Cinemachine::CinemachineVirtualCameraBase::BlendHint value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint
  #pragma pack(pop)
  static check_size<sizeof(CinemachineVirtualCameraBase::BlendHint), 0 + sizeof(int)> __Cinemachine_CinemachineVirtualCameraBase_BlendHintSizeCheck;
  static_assert(sizeof(CinemachineVirtualCameraBase::BlendHint) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
