// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachinePathBase
#include "Cinemachine/CinemachinePathBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachinePath
  class CinemachinePath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachinePath);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachinePath*, "Cinemachine", "CinemachinePath");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachinePath
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986B40
  // [AddComponentMenu] Offset: 986B40
  // [SaveDuringPlayAttribute] Offset: 986B40
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 986B40
  class CinemachinePath : public ::Cinemachine::CinemachinePathBase {
    public:
    // Nested type: ::Cinemachine::CinemachinePath::Waypoint
    struct Waypoint;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachinePath/Cinemachine.Waypoint
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 98798C
    struct Waypoint/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x98D850
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // [TooltipAttribute] Offset: 0x98D888
      // public UnityEngine.Vector3 tangent
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 tangent;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // [TooltipAttribute] Offset: 0x98D8C0
      // public System.Single roll
      // Size: 0x4
      // Offset: 0x18
      float roll;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Waypoint
      constexpr Waypoint(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Vector3 tangent_ = {}, float roll_ = {}) noexcept : position{position_}, tangent{tangent_}, roll{roll_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Vector3 tangent
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tangent();
      // Get instance field reference: public System.Single roll
      [[deprecated("Use field access instead!")]] float& dyn_roll();
    }; // Cinemachine.CinemachinePath/Cinemachine.Waypoint
    #pragma pack(pop)
    static check_size<sizeof(CinemachinePath::Waypoint), 24 + sizeof(float)> __Cinemachine_CinemachinePath_WaypointSizeCheck;
    static_assert(sizeof(CinemachinePath::Waypoint) == 0x1C);
    public:
    // [TooltipAttribute] Offset: 0x98972C
    // public System.Boolean m_Looped
    // Size: 0x1
    // Offset: 0x48
    bool m_Looped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Looped and: m_Waypoints
    char __padding0[0x7] = {};
    // [TooltipAttribute] Offset: 0x989764
    // public Cinemachine.CinemachinePath/Cinemachine.Waypoint[] m_Waypoints
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::Cinemachine::CinemachinePath::Waypoint> m_Waypoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachinePath::Waypoint>) == 0x8);
    public:
    // Get instance field reference: public System.Boolean m_Looped
    [[deprecated("Use field access instead!")]] bool& dyn_m_Looped();
    // Get instance field reference: public Cinemachine.CinemachinePath/Cinemachine.Waypoint[] m_Waypoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachinePath::Waypoint>& dyn_m_Waypoints();
    // private System.Void Reset()
    // Offset: 0x1060200
    void Reset();
    // private System.Single GetBoundingIndices(System.Single pos, out System.Int32 indexA, out System.Int32 indexB)
    // Offset: 0x10603E0
    float GetBoundingIndices(float pos, ByRef<int> indexA, ByRef<int> indexB);
    // private System.Void OnValidate()
    // Offset: 0x1060D04
    void OnValidate();
    // public override System.Single get_MinPos()
    // Offset: 0x10601B0
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Single CinemachinePathBase::get_MinPos()
    float get_MinPos();
    // public override System.Single get_MaxPos()
    // Offset: 0x10601B8
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Single CinemachinePathBase::get_MaxPos()
    float get_MaxPos();
    // public override System.Boolean get_Looped()
    // Offset: 0x10601F8
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Boolean CinemachinePathBase::get_Looped()
    bool get_Looped();
    // public override System.Int32 get_DistanceCacheSampleStepsPerSegment()
    // Offset: 0x10603D8
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Int32 CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment()
    int get_DistanceCacheSampleStepsPerSegment();
    // public System.Void .ctor()
    // Offset: 0x1060D14
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: System.Void CinemachinePathBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachinePath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachinePath*, creationType>()));
    }
    // public override UnityEngine.Vector3 EvaluatePosition(System.Single pos)
    // Offset: 0x1060554
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Vector3 CinemachinePathBase::EvaluatePosition(System.Single pos)
    ::UnityEngine::Vector3 EvaluatePosition(float pos);
    // public override UnityEngine.Vector3 EvaluateTangent(System.Single pos)
    // Offset: 0x1060774
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Vector3 CinemachinePathBase::EvaluateTangent(System.Single pos)
    ::UnityEngine::Vector3 EvaluateTangent(float pos);
    // public override UnityEngine.Quaternion EvaluateOrientation(System.Single pos)
    // Offset: 0x1060A1C
    // Implemented from: Cinemachine.CinemachinePathBase
    // Base method: UnityEngine.Quaternion CinemachinePathBase::EvaluateOrientation(System.Single pos)
    ::UnityEngine::Quaternion EvaluateOrientation(float pos);
  }; // Cinemachine.CinemachinePath
  #pragma pack(pop)
  static check_size<sizeof(CinemachinePath), 80 + sizeof(::ArrayW<::Cinemachine::CinemachinePath::Waypoint>)> __Cinemachine_CinemachinePathSizeCheck;
  static_assert(sizeof(CinemachinePath) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachinePath::Waypoint, "Cinemachine", "CinemachinePath/Waypoint");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::GetBoundingIndices
// Il2CppName: GetBoundingIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePath::*)(float, ByRef<int>, ByRef<int>)>(&Cinemachine::CinemachinePath::GetBoundingIndices)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "GetBoundingIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, indexA, indexB});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::get_MinPos
// Il2CppName: get_MinPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::get_MinPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "get_MinPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::get_MaxPos
// Il2CppName: get_MaxPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::get_MaxPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "get_MaxPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::get_Looped
// Il2CppName: get_Looped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::get_Looped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "get_Looped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::get_DistanceCacheSampleStepsPerSegment
// Il2CppName: get_DistanceCacheSampleStepsPerSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachinePath::*)()>(&Cinemachine::CinemachinePath::get_DistanceCacheSampleStepsPerSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "get_DistanceCacheSampleStepsPerSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::EvaluatePosition
// Il2CppName: EvaluatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePath::*)(float)>(&Cinemachine::CinemachinePath::EvaluatePosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "EvaluatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::EvaluateTangent
// Il2CppName: EvaluateTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePath::*)(float)>(&Cinemachine::CinemachinePath::EvaluateTangent)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "EvaluateTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePath::EvaluateOrientation
// Il2CppName: EvaluateOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachinePath::*)(float)>(&Cinemachine::CinemachinePath::EvaluateOrientation)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePath*), "EvaluateOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
