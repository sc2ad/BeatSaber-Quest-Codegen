// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.LensSettings
#include "Cinemachine/LensSettings.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams
#include "Cinemachine/CinemachineVirtualCameraBase_TransitionParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineComponentBase
  class CinemachineComponentBase;
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCamera
  class CinemachineVirtualCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineVirtualCamera);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineVirtualCamera*, "Cinemachine", "CinemachineVirtualCamera");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x1C8
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineVirtualCamera
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986ED8
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 986ED8
  // [HelpURLAttribute] Offset: 986ED8
  class CinemachineVirtualCamera : public ::Cinemachine::CinemachineVirtualCameraBase {
    public:
    // Writing base type padding for base size: 0x64 to desired offset: 0x68
    char ___base_padding[0x4] = {};
    // Nested type: ::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate
    class CreatePipelineDelegate;
    // Nested type: ::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate
    class DestroyPipelineDelegate;
    // Nested type: ::Cinemachine::CinemachineVirtualCamera::$$c
    class $$c;
    public:
    // [TooltipAttribute] Offset: 0x989EA4
    // [NoSaveDuringPlayAttribute] Offset: 0x989EA4
    // [VcamTargetPropertyAttribute] Offset: 0x989EA4
    // public UnityEngine.Transform m_LookAt
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* m_LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x989F00
    // [NoSaveDuringPlayAttribute] Offset: 0x989F00
    // [VcamTargetPropertyAttribute] Offset: 0x989F00
    // public UnityEngine.Transform m_Follow
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* m_Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x989F5C
    // [TooltipAttribute] Offset: 0x989F5C
    // public Cinemachine.LensSettings m_Lens
    // Size: 0x2E
    // Offset: 0x78
    ::Cinemachine::LensSettings m_Lens;
    // Field size check
    static_assert(sizeof(::Cinemachine::LensSettings) == 0x2E);
    // Padding between fields: m_Lens and: m_Transitions
    char __padding2[0x2] = {};
    // public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams m_Transitions
    // Size: 0x10
    // Offset: 0xA8
    ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams m_Transitions;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::TransitionParams) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0x989FBC
    // [FormerlySerializedAsAttribute] Offset: 0x989FBC
    // private Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint m_LegacyBlendHint
    // Size: 0x4
    // Offset: 0xB8
    ::Cinemachine::CinemachineVirtualCameraBase::BlendHint m_LegacyBlendHint;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::BlendHint) == 0x4);
    // private System.Boolean <UserIsDragging>k__BackingField
    // Size: 0x1
    // Offset: 0xBC
    bool UserIsDragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UserIsDragging and: m_State
    char __padding5[0x3] = {};
    // private Cinemachine.CameraState m_State
    // Size: 0xE4
    // Offset: 0xC0
    ::Cinemachine::CameraState m_State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    // Padding between fields: m_State and: m_ComponentPipeline
    char __padding6[0x4] = {};
    // private Cinemachine.CinemachineComponentBase[] m_ComponentPipeline
    // Size: 0x8
    // Offset: 0x1A8
    ::ArrayW<::Cinemachine::CinemachineComponentBase*> m_ComponentPipeline;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineComponentBase*>) == 0x8);
    // private UnityEngine.Transform m_ComponentOwner
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Transform* m_ComponentOwner;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform mCachedLookAtTarget
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Transform* mCachedLookAtTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
    // Size: 0x8
    // Offset: 0x1C0
    ::Cinemachine::CinemachineVirtualCameraBase* mCachedLookAtTargetVcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    public:
    // static field const value: static public System.String PipelineName
    static constexpr const char* PipelineName = "cm";
    // Get static field: static public System.String PipelineName
    static ::StringW _get_PipelineName();
    // Set static field: static public System.String PipelineName
    static void _set_PipelineName(::StringW value);
    // Get static field: static public Cinemachine.CinemachineVirtualCamera/Cinemachine.CreatePipelineDelegate CreatePipelineOverride
    static ::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate* _get_CreatePipelineOverride();
    // Set static field: static public Cinemachine.CinemachineVirtualCamera/Cinemachine.CreatePipelineDelegate CreatePipelineOverride
    static void _set_CreatePipelineOverride(::Cinemachine::CinemachineVirtualCamera::CreatePipelineDelegate* value);
    // Get static field: static public Cinemachine.CinemachineVirtualCamera/Cinemachine.DestroyPipelineDelegate DestroyPipelineOverride
    static ::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate* _get_DestroyPipelineOverride();
    // Set static field: static public Cinemachine.CinemachineVirtualCamera/Cinemachine.DestroyPipelineDelegate DestroyPipelineOverride
    static void _set_DestroyPipelineOverride(::Cinemachine::CinemachineVirtualCamera::DestroyPipelineDelegate* value);
    // Get instance field reference: public UnityEngine.Transform m_LookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_LookAt();
    // Get instance field reference: public UnityEngine.Transform m_Follow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Follow();
    // Get instance field reference: public Cinemachine.LensSettings m_Lens
    [[deprecated("Use field access instead!")]] ::Cinemachine::LensSettings& dyn_m_Lens();
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams m_Transitions
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams& dyn_m_Transitions();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint m_LegacyBlendHint
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::BlendHint& dyn_m_LegacyBlendHint();
    // Get instance field reference: private System.Boolean <UserIsDragging>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UserIsDragging$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState m_State
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_m_State();
    // Get instance field reference: private Cinemachine.CinemachineComponentBase[] m_ComponentPipeline
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineComponentBase*>& dyn_m_ComponentPipeline();
    // Get instance field reference: private UnityEngine.Transform m_ComponentOwner
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ComponentOwner();
    // Get instance field reference: private UnityEngine.Transform mCachedLookAtTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mCachedLookAtTarget();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_mCachedLookAtTargetVcam();
    // public System.Boolean get_UserIsDragging()
    // Offset: 0x1449808
    bool get_UserIsDragging();
    // public System.Void set_UserIsDragging(System.Boolean value)
    // Offset: 0x1449810
    void set_UserIsDragging(bool value);
    // private System.Void OnTransformChildrenChanged()
    // Offset: 0x14489C4
    void OnTransformChildrenChanged();
    // private System.Void Reset()
    // Offset: 0x14489CC
    void Reset();
    // private System.Void DestroyPipeline()
    // Offset: 0x14489D0
    void DestroyPipeline();
    // private UnityEngine.Transform CreatePipeline(Cinemachine.CinemachineVirtualCamera copyFrom)
    // Offset: 0x1449228
    ::UnityEngine::Transform* CreatePipeline(::Cinemachine::CinemachineVirtualCamera* copyFrom);
    // public System.Void InvalidateComponentPipeline()
    // Offset: 0x1448354
    void InvalidateComponentPipeline();
    // public UnityEngine.Transform GetComponentOwner()
    // Offset: 0x14497E4
    ::UnityEngine::Transform* GetComponentOwner();
    // public Cinemachine.CinemachineComponentBase[] GetComponentPipeline()
    // Offset: 0x1449390
    ::ArrayW<::Cinemachine::CinemachineComponentBase*> GetComponentPipeline();
    // public Cinemachine.CinemachineComponentBase GetCinemachineComponent(Cinemachine.CinemachineCore/Cinemachine.Stage stage)
    // Offset: 0x14483D8
    ::Cinemachine::CinemachineComponentBase* GetCinemachineComponent(::Cinemachine::CinemachineCore::Stage stage);
    // public T GetCinemachineComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetCinemachineComponent() {
      static_assert(std::is_convertible_v<T, ::Cinemachine::CinemachineComponentBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCinemachineComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public T AddCinemachineComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T AddCinemachineComponent() {
      static_assert(std::is_convertible_v<T, ::Cinemachine::CinemachineComponentBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::AddCinemachineComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCinemachineComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Void DestroyCinemachineComponent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DestroyCinemachineComponent() {
      static_assert(std::is_convertible_v<T, ::Cinemachine::CinemachineComponentBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::DestroyCinemachineComponent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyCinemachineComponent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // private System.Void UpdateComponentPipeline()
    // Offset: 0x1447048
    void UpdateComponentPipeline();
    // static System.Void SetFlagsForHiddenChild(UnityEngine.GameObject child)
    // Offset: 0x144981C
    static void SetFlagsForHiddenChild(::UnityEngine::GameObject* child);
    // private Cinemachine.CameraState CalculateNewState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1447818
    ::Cinemachine::CameraState CalculateNewState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // System.Void SetStateRawPosition(UnityEngine.Vector3 pos)
    // Offset: 0x144A184
    void SetStateRawPosition(::UnityEngine::Vector3 pos);
    // public override Cinemachine.CameraState get_State()
    // Offset: 0x1446C00
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: Cinemachine.CameraState CinemachineVirtualCameraBase::get_State()
    ::Cinemachine::CameraState get_State();
    // public override UnityEngine.Transform get_LookAt()
    // Offset: 0x1446C10
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_LookAt()
    ::UnityEngine::Transform* get_LookAt();
    // public override System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x1446D34
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_LookAt(UnityEngine.Transform value)
    void set_LookAt(::UnityEngine::Transform* value);
    // public override UnityEngine.Transform get_Follow()
    // Offset: 0x1446D3C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_Follow()
    ::UnityEngine::Transform* get_Follow();
    // public override System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x1446E60
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_Follow(UnityEngine.Transform value)
    void set_Follow(::UnityEngine::Transform* value);
    // public System.Void .ctor()
    // Offset: 0x144A688
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineVirtualCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineVirtualCamera*, creationType>()));
    }
    // public override System.Single GetMaxDampTime()
    // Offset: 0x1446E68
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Single CinemachineVirtualCameraBase::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1447618
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected override System.Void OnEnable()
    // Offset: 0x1447CD8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnEnable()
    void OnEnable();
    // protected override System.Void OnDestroy()
    // Offset: 0x1448478
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnDestroy()
    void OnDestroy();
    // protected override System.Void OnValidate()
    // Offset: 0x14487F0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnValidate()
    void OnValidate();
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x1449C78
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x1449F24
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x144A194
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
  }; // Cinemachine.CinemachineVirtualCamera
  #pragma pack(pop)
  static check_size<sizeof(CinemachineVirtualCamera), 448 + sizeof(::Cinemachine::CinemachineVirtualCameraBase*)> __Cinemachine_CinemachineVirtualCameraSizeCheck;
  static_assert(sizeof(CinemachineVirtualCamera) == 0x1C8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::get_UserIsDragging
// Il2CppName: get_UserIsDragging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::get_UserIsDragging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "get_UserIsDragging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::set_UserIsDragging
// Il2CppName: set_UserIsDragging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(bool)>(&Cinemachine::CinemachineVirtualCamera::set_UserIsDragging)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "set_UserIsDragging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::DestroyPipeline
// Il2CppName: DestroyPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::DestroyPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "DestroyPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::CreatePipeline
// Il2CppName: CreatePipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCamera::*)(::Cinemachine::CinemachineVirtualCamera*)>(&Cinemachine::CinemachineVirtualCamera::CreatePipeline)> {
  static const MethodInfo* get() {
    static auto* copyFrom = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "CreatePipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copyFrom});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::InvalidateComponentPipeline
// Il2CppName: InvalidateComponentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::InvalidateComponentPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "InvalidateComponentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::GetComponentOwner
// Il2CppName: GetComponentOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::GetComponentOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "GetComponentOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::GetComponentPipeline
// Il2CppName: GetComponentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineComponentBase*> (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::GetComponentPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "GetComponentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent
// Il2CppName: GetCinemachineComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineComponentBase* (Cinemachine::CinemachineVirtualCamera::*)(::Cinemachine::CinemachineCore::Stage)>(&Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent)> {
  static const MethodInfo* get() {
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "GetCinemachineComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stage});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::GetCinemachineComponent
// Il2CppName: GetCinemachineComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::AddCinemachineComponent
// Il2CppName: AddCinemachineComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::DestroyCinemachineComponent
// Il2CppName: DestroyCinemachineComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::UpdateComponentPipeline
// Il2CppName: UpdateComponentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::UpdateComponentPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "UpdateComponentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::SetFlagsForHiddenChild
// Il2CppName: SetFlagsForHiddenChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&Cinemachine::CinemachineVirtualCamera::SetFlagsForHiddenChild)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "SetFlagsForHiddenChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::CalculateNewState
// Il2CppName: CalculateNewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCamera::CalculateNewState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "CalculateNewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::SetStateRawPosition
// Il2CppName: SetStateRawPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineVirtualCamera::SetStateRawPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "SetStateRawPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCamera::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCamera::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCamera::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)()>(&Cinemachine::CinemachineVirtualCamera::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineVirtualCamera::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineVirtualCamera::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCamera::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCamera::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCamera::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCamera*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
