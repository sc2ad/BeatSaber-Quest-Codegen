// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlenderSettings
  class CinemachineBlenderSettings;
  // Skipping declaration: ICinemachineCamera because it is already included!
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineClearShot
  class CinemachineClearShot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineClearShot);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineClearShot*, "Cinemachine", "CinemachineClearShot");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x1D0
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineClearShot
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986588
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 986588
  // [HelpURLAttribute] Offset: 986588
  class CinemachineClearShot : public ::Cinemachine::CinemachineVirtualCameraBase {
    public:
    // Writing base type padding for base size: 0x64 to desired offset: 0x68
    char ___base_padding[0x4] = {};
    // Nested type: ::Cinemachine::CinemachineClearShot::Pair
    struct Pair;
    // Nested type: ::Cinemachine::CinemachineClearShot::$$c
    class $$c;
    public:
    // [TooltipAttribute] Offset: 0x9883C8
    // [NoSaveDuringPlayAttribute] Offset: 0x9883C8
    // [VcamTargetPropertyAttribute] Offset: 0x9883C8
    // public UnityEngine.Transform m_LookAt
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* m_LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x988424
    // [NoSaveDuringPlayAttribute] Offset: 0x988424
    // [VcamTargetPropertyAttribute] Offset: 0x988424
    // public UnityEngine.Transform m_Follow
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* m_Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x988480
    // [NoSaveDuringPlayAttribute] Offset: 0x988480
    // public System.Boolean m_ShowDebugText
    // Size: 0x1
    // Offset: 0x78
    bool m_ShowDebugText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShowDebugText and: m_ChildCameras
    char __padding2[0x7] = {};
    // [NoSaveDuringPlayAttribute] Offset: 0x9884CC
    // Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> m_ChildCameras;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>) == 0x8);
    // [TooltipAttribute] Offset: 0x988514
    // public System.Single m_ActivateAfter
    // Size: 0x4
    // Offset: 0x88
    float m_ActivateAfter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98854C
    // public System.Single m_MinDuration
    // Size: 0x4
    // Offset: 0x8C
    float m_MinDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x988584
    // public System.Boolean m_RandomizeChoice
    // Size: 0x1
    // Offset: 0x90
    bool m_RandomizeChoice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RandomizeChoice and: m_DefaultBlend
    char __padding6[0x7] = {};
    // [CinemachineBlendDefinitionPropertyAttribute] Offset: 0x9885BC
    // [TooltipAttribute] Offset: 0x9885BC
    // public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    // Size: 0x10
    // Offset: 0x98
    ::Cinemachine::CinemachineBlendDefinition m_DefaultBlend;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlendDefinition) == 0x10);
    // public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    // Size: 0x8
    // Offset: 0xA8
    ::Cinemachine::CinemachineBlenderSettings* m_CustomBlends;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlenderSettings*) == 0x8);
    // private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    // Size: 0x8
    // Offset: 0xB0
    ::Cinemachine::ICinemachineCamera* LiveChild;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private Cinemachine.CameraState m_State
    // Size: 0xE4
    // Offset: 0xB8
    ::Cinemachine::CameraState m_State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    // Padding between fields: m_State and: mActivationTime
    char __padding10[0x4] = {};
    // private System.Single mActivationTime
    // Size: 0x4
    // Offset: 0x1A0
    float mActivationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single mPendingActivationTime
    // Size: 0x4
    // Offset: 0x1A4
    float mPendingActivationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Cinemachine.ICinemachineCamera mPendingCamera
    // Size: 0x8
    // Offset: 0x1A8
    ::Cinemachine::ICinemachineCamera* mPendingCamera;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private Cinemachine.CinemachineBlend mActiveBlend
    // Size: 0x8
    // Offset: 0x1B0
    ::Cinemachine::CinemachineBlend* mActiveBlend;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlend*) == 0x8);
    // private System.Boolean mRandomizeNow
    // Size: 0x1
    // Offset: 0x1B8
    bool mRandomizeNow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mRandomizeNow and: m_RandomizedChilden
    char __padding15[0x7] = {};
    // private Cinemachine.CinemachineVirtualCameraBase[] m_RandomizedChilden
    // Size: 0x8
    // Offset: 0x1C0
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> m_RandomizedChilden;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>) == 0x8);
    // private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
    // Size: 0x8
    // Offset: 0x1C8
    ::Cinemachine::ICinemachineCamera* TransitioningFrom;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform m_LookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_LookAt();
    // Get instance field reference: public UnityEngine.Transform m_Follow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Follow();
    // Get instance field reference: public System.Boolean m_ShowDebugText
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowDebugText();
    // Get instance field reference: Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& dyn_m_ChildCameras();
    // Get instance field reference: public System.Single m_ActivateAfter
    [[deprecated("Use field access instead!")]] float& dyn_m_ActivateAfter();
    // Get instance field reference: public System.Single m_MinDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_MinDuration();
    // Get instance field reference: public System.Boolean m_RandomizeChoice
    [[deprecated("Use field access instead!")]] bool& dyn_m_RandomizeChoice();
    // Get instance field reference: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& dyn_m_DefaultBlend();
    // Get instance field reference: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& dyn_m_CustomBlends();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$LiveChild$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState m_State
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_m_State();
    // Get instance field reference: private System.Single mActivationTime
    [[deprecated("Use field access instead!")]] float& dyn_mActivationTime();
    // Get instance field reference: private System.Single mPendingActivationTime
    [[deprecated("Use field access instead!")]] float& dyn_mPendingActivationTime();
    // Get instance field reference: private Cinemachine.ICinemachineCamera mPendingCamera
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_mPendingCamera();
    // Get instance field reference: private Cinemachine.CinemachineBlend mActiveBlend
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& dyn_mActiveBlend();
    // Get instance field reference: private System.Boolean mRandomizeNow
    [[deprecated("Use field access instead!")]] bool& dyn_mRandomizeNow();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase[] m_RandomizedChilden
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& dyn_m_RandomizedChilden();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$TransitioningFrom$k__BackingField();
    // public Cinemachine.ICinemachineCamera get_LiveChild()
    // Offset: 0x1407880
    ::Cinemachine::ICinemachineCamera* get_LiveChild();
    // public System.Void set_LiveChild(Cinemachine.ICinemachineCamera value)
    // Offset: 0x1407878
    void set_LiveChild(::Cinemachine::ICinemachineCamera* value);
    // public System.Boolean get_IsBlending()
    // Offset: 0x1408BC0
    bool get_IsBlending();
    // public Cinemachine.CinemachineVirtualCameraBase[] get_ChildCameras()
    // Offset: 0x1408BD0
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> get_ChildCameras();
    // private Cinemachine.ICinemachineCamera get_TransitioningFrom()
    // Offset: 0x1408F00
    ::Cinemachine::ICinemachineCamera* get_TransitioningFrom();
    // private System.Void set_TransitioningFrom(Cinemachine.ICinemachineCamera value)
    // Offset: 0x1408F08
    void set_TransitioningFrom(::Cinemachine::ICinemachineCamera* value);
    // public System.Void OnTransformChildrenChanged()
    // Offset: 0x1408A18
    void OnTransformChildrenChanged();
    // private System.Void OnGuiHandler()
    // Offset: 0x1408A28
    void OnGuiHandler();
    // private System.Void InvalidateListOfChildren()
    // Offset: 0x1408938
    void InvalidateListOfChildren();
    // public System.Void ResetRandomization()
    // Offset: 0x1408BF4
    void ResetRandomization();
    // private System.Void UpdateListOfChildren()
    // Offset: 0x14079B0
    void UpdateListOfChildren();
    // private Cinemachine.ICinemachineCamera ChooseCurrentCamera(UnityEngine.Vector3 worldUp)
    // Offset: 0x1407FF4
    ::Cinemachine::ICinemachineCamera* ChooseCurrentCamera(::UnityEngine::Vector3 worldUp);
    // private Cinemachine.CinemachineVirtualCameraBase[] Randomize(Cinemachine.CinemachineVirtualCameraBase[] src)
    // Offset: 0x1408C04
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> Randomize(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> src);
    // private Cinemachine.CinemachineBlendDefinition LookupBlend(Cinemachine.ICinemachineCamera fromKey, Cinemachine.ICinemachineCamera toKey)
    // Offset: 0x14085B8
    ::Cinemachine::CinemachineBlendDefinition LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey);
    // public override System.String get_Description()
    // Offset: 0x1407730
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.String CinemachineVirtualCameraBase::get_Description()
    ::StringW get_Description();
    // public override Cinemachine.CameraState get_State()
    // Offset: 0x1407888
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: Cinemachine.CameraState CinemachineVirtualCameraBase::get_State()
    ::Cinemachine::CameraState get_State();
    // public override UnityEngine.Transform get_LookAt()
    // Offset: 0x14078BC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_LookAt()
    ::UnityEngine::Transform* get_LookAt();
    // public override System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x14078C8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_LookAt(UnityEngine.Transform value)
    void set_LookAt(::UnityEngine::Transform* value);
    // public override UnityEngine.Transform get_Follow()
    // Offset: 0x14078D0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_Follow()
    ::UnityEngine::Transform* get_Follow();
    // public override System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x14078DC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_Follow(UnityEngine.Transform value)
    void set_Follow(::UnityEngine::Transform* value);
    // public System.Void .ctor()
    // Offset: 0x1408F10
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineClearShot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineClearShot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineClearShot*, creationType>()));
    }
    // public override System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x1407898
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x14078E4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x1407B48
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1407C48
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected override System.Void OnEnable()
    // Offset: 0x1408804
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1408948
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnDisable()
    void OnDisable();
    // public override System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1408E5C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
  }; // Cinemachine.CinemachineClearShot
  #pragma pack(pop)
  static check_size<sizeof(CinemachineClearShot), 456 + sizeof(::Cinemachine::ICinemachineCamera*)> __Cinemachine_CinemachineClearShotSizeCheck;
  static_assert(sizeof(CinemachineClearShot) == 0x1D0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_LiveChild
// Il2CppName: get_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_LiveChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::set_LiveChild
// Il2CppName: set_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineClearShot::set_LiveChild)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "set_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_IsBlending
// Il2CppName: get_IsBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_IsBlending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_IsBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_ChildCameras
// Il2CppName: get_ChildCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_ChildCameras)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_ChildCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_TransitioningFrom
// Il2CppName: get_TransitioningFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_TransitioningFrom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_TransitioningFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::set_TransitioningFrom
// Il2CppName: set_TransitioningFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineClearShot::set_TransitioningFrom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "set_TransitioningFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnGuiHandler
// Il2CppName: OnGuiHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::OnGuiHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnGuiHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::InvalidateListOfChildren
// Il2CppName: InvalidateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::InvalidateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "InvalidateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::ResetRandomization
// Il2CppName: ResetRandomization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::ResetRandomization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "ResetRandomization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::UpdateListOfChildren
// Il2CppName: UpdateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::UpdateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "UpdateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::ChooseCurrentCamera
// Il2CppName: ChooseCurrentCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineClearShot::ChooseCurrentCamera)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "ChooseCurrentCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::Randomize
// Il2CppName: Randomize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> (Cinemachine::CinemachineClearShot::*)(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>)>(&Cinemachine::CinemachineClearShot::Randomize)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "Randomize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::LookupBlend
// Il2CppName: LookupBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlendDefinition (Cinemachine::CinemachineClearShot::*)(::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineClearShot::LookupBlend)> {
  static const MethodInfo* get() {
    static auto* fromKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* toKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "LookupBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromKey, toKey});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineClearShot::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineClearShot::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineClearShot::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineClearShot::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineClearShot::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineClearShot::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineClearShot::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)()>(&Cinemachine::CinemachineClearShot::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineClearShot::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineClearShot::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineClearShot::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineClearShot*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
