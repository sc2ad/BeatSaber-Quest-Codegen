// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Cinemachine.AxisState/Cinemachine.IInputAxisProvider
#include "Cinemachine/AxisState_IInputAxisProvider.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionReference
  class InputActionReference;
  // Forward declaring type: InputAction
  class InputAction;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineInputProvider
  class CinemachineInputProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineInputProvider);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineInputProvider*, "Cinemachine", "CinemachineInputProvider");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineInputProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 98754C
  class CinemachineInputProvider : public ::UnityEngine::MonoBehaviour/*, public ::Cinemachine::AxisState::IInputAxisProvider*/ {
    public:
    // Nested type: ::Cinemachine::CinemachineInputProvider::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    public:
    // [TooltipAttribute] Offset: 0x98CC70
    // public System.Int32 PlayerIndex
    // Size: 0x4
    // Offset: 0x18
    int PlayerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: PlayerIndex and: XYAxis
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0x98CCA8
    // public UnityEngine.InputSystem.InputActionReference XYAxis
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::InputActionReference* XYAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionReference*) == 0x8);
    // [TooltipAttribute] Offset: 0x98CCE0
    // public UnityEngine.InputSystem.InputActionReference ZAxis
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::InputSystem::InputActionReference* ZAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionReference*) == 0x8);
    // private UnityEngine.InputSystem.InputAction[] m_cachedActions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::InputSystem::InputAction*> m_cachedActions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputAction*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Cinemachine::AxisState::IInputAxisProvider
    operator ::Cinemachine::AxisState::IInputAxisProvider() noexcept {
      return *reinterpret_cast<::Cinemachine::AxisState::IInputAxisProvider*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 NUM_AXES
    static constexpr const int NUM_AXES = 3;
    // Get static field: static private System.Int32 NUM_AXES
    static int _get_NUM_AXES();
    // Set static field: static private System.Int32 NUM_AXES
    static void _set_NUM_AXES(int value);
    // Get instance field reference: public System.Int32 PlayerIndex
    [[deprecated("Use field access instead!")]] int& dyn_PlayerIndex();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionReference XYAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& dyn_XYAxis();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionReference ZAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& dyn_ZAxis();
    // Get instance field reference: private UnityEngine.InputSystem.InputAction[] m_cachedActions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputAction*>& dyn_m_cachedActions();
    // public System.Void .ctor()
    // Offset: 0x105C708
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineInputProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineInputProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineInputProvider*, creationType>()));
    }
    // public System.Single GetAxisValue(System.Int32 axis)
    // Offset: 0x105C284
    float GetAxisValue(int axis);
    // protected UnityEngine.InputSystem.InputAction ResolveForPlayer(System.Int32 axis, UnityEngine.InputSystem.InputActionReference actionRef)
    // Offset: 0x105C358
    ::UnityEngine::InputSystem::InputAction* ResolveForPlayer(int axis, ::UnityEngine::InputSystem::InputActionReference* actionRef);
    // protected System.Void OnDisable()
    // Offset: 0x105C700
    void OnDisable();
  }; // Cinemachine.CinemachineInputProvider
  #pragma pack(pop)
  static check_size<sizeof(CinemachineInputProvider), 48 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputAction*>)> __Cinemachine_CinemachineInputProviderSizeCheck;
  static_assert(sizeof(CinemachineInputProvider) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineInputProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineInputProvider::GetAxisValue
// Il2CppName: GetAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineInputProvider::*)(int)>(&Cinemachine::CinemachineInputProvider::GetAxisValue)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputProvider*), "GetAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineInputProvider::ResolveForPlayer
// Il2CppName: ResolveForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (Cinemachine::CinemachineInputProvider::*)(int, ::UnityEngine::InputSystem::InputActionReference*)>(&Cinemachine::CinemachineInputProvider::ResolveForPlayer)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* actionRef = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionReference")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputProvider*), "ResolveForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, actionRef});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineInputProvider::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineInputProvider::*)()>(&Cinemachine::CinemachineInputProvider::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputProvider*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
