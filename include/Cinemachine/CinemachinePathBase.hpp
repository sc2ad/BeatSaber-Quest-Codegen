// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachinePathBase
  class CinemachinePathBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachinePathBase);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachinePathBase*, "Cinemachine", "CinemachinePathBase");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachinePathBase
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachinePathBase : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Cinemachine::CinemachinePathBase::Appearance
    class Appearance;
    // Nested type: ::Cinemachine::CinemachinePathBase::PositionUnits
    struct PositionUnits;
    public:
    // [TooltipAttribute] Offset: 0x98C790
    // [RangeAttribute] Offset: 0x98C790
    // public System.Int32 m_Resolution
    // Size: 0x4
    // Offset: 0x18
    int m_Resolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Resolution and: m_Appearance
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0x98C7E8
    // public Cinemachine.CinemachinePathBase/Cinemachine.Appearance m_Appearance
    // Size: 0x8
    // Offset: 0x20
    ::Cinemachine::CinemachinePathBase::Appearance* m_Appearance;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachinePathBase::Appearance*) == 0x8);
    // private System.Single[] m_DistanceToPos
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> m_DistanceToPos;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_PosToDistance
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<float> m_PosToDistance;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 m_CachedSampleSteps
    // Size: 0x4
    // Offset: 0x38
    int m_CachedSampleSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_PathLength
    // Size: 0x4
    // Offset: 0x3C
    float m_PathLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_cachedPosStepSize
    // Size: 0x4
    // Offset: 0x40
    float m_cachedPosStepSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_cachedDistanceStepSize
    // Size: 0x4
    // Offset: 0x44
    float m_cachedDistanceStepSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 m_Resolution
    [[deprecated("Use field access instead!")]] int& dyn_m_Resolution();
    // Get instance field reference: public Cinemachine.CinemachinePathBase/Cinemachine.Appearance m_Appearance
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachinePathBase::Appearance*& dyn_m_Appearance();
    // Get instance field reference: private System.Single[] m_DistanceToPos
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_DistanceToPos();
    // Get instance field reference: private System.Single[] m_PosToDistance
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_PosToDistance();
    // Get instance field reference: private System.Int32 m_CachedSampleSteps
    [[deprecated("Use field access instead!")]] int& dyn_m_CachedSampleSteps();
    // Get instance field reference: private System.Single m_PathLength
    [[deprecated("Use field access instead!")]] float& dyn_m_PathLength();
    // Get instance field reference: private System.Single m_cachedPosStepSize
    [[deprecated("Use field access instead!")]] float& dyn_m_cachedPosStepSize();
    // Get instance field reference: private System.Single m_cachedDistanceStepSize
    [[deprecated("Use field access instead!")]] float& dyn_m_cachedDistanceStepSize();
    // public System.Single get_MinPos()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_MinPos();
    // public System.Single get_MaxPos()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_MaxPos();
    // public System.Boolean get_Looped()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Looped();
    // public System.Int32 get_DistanceCacheSampleStepsPerSegment()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_DistanceCacheSampleStepsPerSegment();
    // public System.Single get_PathLength()
    // Offset: 0x1061274
    float get_PathLength();
    // protected System.Void .ctor()
    // Offset: 0x1060D70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachinePathBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachinePathBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachinePathBase*, creationType>()));
    }
    // public System.Single StandardizePos(System.Single pos)
    // Offset: 0x1060DDC
    float StandardizePos(float pos);
    // public UnityEngine.Vector3 EvaluatePosition(System.Single pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 EvaluatePosition(float pos);
    // public UnityEngine.Vector3 EvaluateTangent(System.Single pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 EvaluateTangent(float pos);
    // public UnityEngine.Quaternion EvaluateOrientation(System.Single pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Quaternion EvaluateOrientation(float pos);
    // public System.Single FindClosestPoint(UnityEngine.Vector3 p, System.Int32 startSegment, System.Int32 searchRadius, System.Int32 stepsPerSegment)
    // Offset: 0x1060EE8
    float FindClosestPoint(::UnityEngine::Vector3 p, int startSegment, int searchRadius, int stepsPerSegment);
    // public System.Single MinUnit(Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x106122C
    float MinUnit(::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public System.Single MaxUnit(Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x106124C
    float MaxUnit(::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public System.Single StandardizeUnit(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x10612E0
    float StandardizeUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public UnityEngine.Vector3 EvaluatePositionAtUnit(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x1050194
    ::UnityEngine::Vector3 EvaluatePositionAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public UnityEngine.Vector3 EvaluateTangentAtUnit(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x1061620
    ::UnityEngine::Vector3 EvaluateTangentAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public UnityEngine.Quaternion EvaluateOrientationAtUnit(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x10501C0
    ::UnityEngine::Quaternion EvaluateOrientationAtUnit(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public System.Void InvalidateDistanceCache()
    // Offset: 0x106164C
    void InvalidateDistanceCache();
    // public System.Boolean DistanceCacheIsValid()
    // Offset: 0x1061658
    bool DistanceCacheIsValid();
    // public System.Single StandardizePathDistance(System.Single distance)
    // Offset: 0x106137C
    float StandardizePathDistance(float distance);
    // public System.Single ToNativePathUnits(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x1061458
    float ToNativePathUnits(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // public System.Single FromPathNativeUnits(System.Single pos, Cinemachine.CinemachinePathBase/Cinemachine.PositionUnits units)
    // Offset: 0x1061A10
    float FromPathNativeUnits(float pos, ::Cinemachine::CinemachinePathBase::PositionUnits units);
    // private System.Void ResamplePath(System.Int32 stepsPerSegment)
    // Offset: 0x10616F0
    void ResamplePath(int stepsPerSegment);
  }; // Cinemachine.CinemachinePathBase
  #pragma pack(pop)
  static check_size<sizeof(CinemachinePathBase), 68 + sizeof(float)> __Cinemachine_CinemachinePathBaseSizeCheck;
  static_assert(sizeof(CinemachinePathBase) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::get_MinPos
// Il2CppName: get_MinPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::get_MinPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "get_MinPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::get_MaxPos
// Il2CppName: get_MaxPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::get_MaxPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "get_MaxPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::get_Looped
// Il2CppName: get_Looped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::get_Looped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "get_Looped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment
// Il2CppName: get_DistanceCacheSampleStepsPerSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::get_DistanceCacheSampleStepsPerSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "get_DistanceCacheSampleStepsPerSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::get_PathLength
// Il2CppName: get_PathLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::get_PathLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "get_PathLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::StandardizePos
// Il2CppName: StandardizePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(float)>(&Cinemachine::CinemachinePathBase::StandardizePos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "StandardizePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluatePosition
// Il2CppName: EvaluatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePathBase::*)(float)>(&Cinemachine::CinemachinePathBase::EvaluatePosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluateTangent
// Il2CppName: EvaluateTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePathBase::*)(float)>(&Cinemachine::CinemachinePathBase::EvaluateTangent)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluateTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluateOrientation
// Il2CppName: EvaluateOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachinePathBase::*)(float)>(&Cinemachine::CinemachinePathBase::EvaluateOrientation)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluateOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::FindClosestPoint
// Il2CppName: FindClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(::UnityEngine::Vector3, int, int, int)>(&Cinemachine::CinemachinePathBase::FindClosestPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* searchRadius = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stepsPerSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "FindClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, startSegment, searchRadius, stepsPerSegment});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::MinUnit
// Il2CppName: MinUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::MinUnit)> {
  static const MethodInfo* get() {
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "MinUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::MaxUnit
// Il2CppName: MaxUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::MaxUnit)> {
  static const MethodInfo* get() {
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "MaxUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::StandardizeUnit
// Il2CppName: StandardizeUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::StandardizeUnit)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "StandardizeUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluatePositionAtUnit
// Il2CppName: EvaluatePositionAtUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::EvaluatePositionAtUnit)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluatePositionAtUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluateTangentAtUnit
// Il2CppName: EvaluateTangentAtUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::EvaluateTangentAtUnit)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluateTangentAtUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::EvaluateOrientationAtUnit
// Il2CppName: EvaluateOrientationAtUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::EvaluateOrientationAtUnit)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "EvaluateOrientationAtUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::InvalidateDistanceCache
// Il2CppName: InvalidateDistanceCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::InvalidateDistanceCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "InvalidateDistanceCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::DistanceCacheIsValid
// Il2CppName: DistanceCacheIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachinePathBase::*)()>(&Cinemachine::CinemachinePathBase::DistanceCacheIsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "DistanceCacheIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::StandardizePathDistance
// Il2CppName: StandardizePathDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(float)>(&Cinemachine::CinemachinePathBase::StandardizePathDistance)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "StandardizePathDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::ToNativePathUnits
// Il2CppName: ToNativePathUnits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::ToNativePathUnits)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "ToNativePathUnits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::FromPathNativeUnits
// Il2CppName: FromPathNativeUnits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachinePathBase::*)(float, ::Cinemachine::CinemachinePathBase::PositionUnits)>(&Cinemachine::CinemachinePathBase::FromPathNativeUnits)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* units = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachinePathBase/PositionUnits")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "FromPathNativeUnits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, units});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachinePathBase::ResamplePath
// Il2CppName: ResamplePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachinePathBase::*)(int)>(&Cinemachine::CinemachinePathBase::ResamplePath)> {
  static const MethodInfo* get() {
    static auto* stepsPerSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachinePathBase*), "ResamplePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepsPerSegment});
  }
};
