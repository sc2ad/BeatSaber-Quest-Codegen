// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineStoryboard
#include "Cinemachine/CinemachineStoryboard.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: RawImage
  class RawImage;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineStoryboard::CanvasInfo);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStoryboard::CanvasInfo*, "Cinemachine", "CinemachineStoryboard/CanvasInfo");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineStoryboard::CanvasInfo : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject mCanvas
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* mCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public Cinemachine.CinemachineBrain mCanvasParent
    // Size: 0x8
    // Offset: 0x18
    ::Cinemachine::CinemachineBrain* mCanvasParent;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain*) == 0x8);
    // public UnityEngine.RectTransform mViewport
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* mViewport;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public UnityEngine.UI.RawImage mRawImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::RawImage* mRawImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::RawImage*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject mCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mCanvas();
    // Get instance field reference: public Cinemachine.CinemachineBrain mCanvasParent
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain*& dyn_mCanvasParent();
    // Get instance field reference: public UnityEngine.RectTransform mViewport
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_mViewport();
    // Get instance field reference: public UnityEngine.UI.RawImage mRawImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::RawImage*& dyn_mRawImage();
    // public System.Void .ctor()
    // Offset: 0x1440080
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineStoryboard::CanvasInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::CanvasInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineStoryboard::CanvasInfo*, creationType>()));
    }
  }; // Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo
  #pragma pack(pop)
  static check_size<sizeof(CinemachineStoryboard::CanvasInfo), 40 + sizeof(::UnityEngine::UI::RawImage*)> __Cinemachine_CinemachineStoryboard_CanvasInfoSizeCheck;
  static_assert(sizeof(CinemachineStoryboard::CanvasInfo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::CanvasInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
