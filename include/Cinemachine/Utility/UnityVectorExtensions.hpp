// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Forward declaring type: UnityVectorExtensions
  class UnityVectorExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Utility::UnityVectorExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Utility::UnityVectorExtensions*, "Cinemachine.Utility", "UnityVectorExtensions");
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Utility.UnityVectorExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class UnityVectorExtensions : public ::Il2CppObject {
    public:
    // static field const value: static public System.Single Epsilon
    static constexpr const float Epsilon = 0.0001;
    // Get static field: static public System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static public System.Single Epsilon
    static void _set_Epsilon(float value);
    // static public System.Boolean IsNaN(UnityEngine.Vector2 v)
    // Offset: 0x1BA121C
    static bool IsNaN(::UnityEngine::Vector2 v);
    // static public System.Boolean IsNaN(UnityEngine.Vector3 v)
    // Offset: 0x1BA125C
    static bool IsNaN(::UnityEngine::Vector3 v);
    // static public System.Single ClosestPointOnSegment(UnityEngine.Vector3 p, UnityEngine.Vector3 s0, UnityEngine.Vector3 s1)
    // Offset: 0x1BA12B0
    static float ClosestPointOnSegment(::UnityEngine::Vector3 p, ::UnityEngine::Vector3 s0, ::UnityEngine::Vector3 s1);
    // static public System.Single ClosestPointOnSegment(UnityEngine.Vector2 p, UnityEngine.Vector2 s0, UnityEngine.Vector2 s1)
    // Offset: 0x1BA1424
    static float ClosestPointOnSegment(::UnityEngine::Vector2 p, ::UnityEngine::Vector2 s0, ::UnityEngine::Vector2 s1);
    // static public UnityEngine.Vector3 ProjectOntoPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal)
    // Offset: 0x1BA09DC
    static ::UnityEngine::Vector3 ProjectOntoPlane(::UnityEngine::Vector3 vector, ::UnityEngine::Vector3 planeNormal);
    // static public System.Int32 FindIntersection(in UnityEngine.Vector2 p1, in UnityEngine.Vector2 p2, in UnityEngine.Vector2 p3, in UnityEngine.Vector2 p4, out UnityEngine.Vector2 intersection)
    // Offset: 0x1BA1580
    static int FindIntersection(ByRef<::UnityEngine::Vector2> p1, ByRef<::UnityEngine::Vector2> p2, ByRef<::UnityEngine::Vector2> p3, ByRef<::UnityEngine::Vector2> p4, ByRef<::UnityEngine::Vector2> intersection);
    // static public UnityEngine.Vector2 Abs(UnityEngine.Vector2 v)
    // Offset: 0x1BA1840
    static ::UnityEngine::Vector2 Abs(::UnityEngine::Vector2 v);
    // static public UnityEngine.Vector3 Abs(UnityEngine.Vector3 v)
    // Offset: 0x1BA18C8
    static ::UnityEngine::Vector3 Abs(::UnityEngine::Vector3 v);
    // static public System.Boolean AlmostZero(UnityEngine.Vector3 v)
    // Offset: 0x1B9EF6C
    static bool AlmostZero(::UnityEngine::Vector3 v);
    // static public System.Single Angle(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2)
    // Offset: 0x1BA1970
    static float Angle(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2);
    // static public System.Single SignedAngle(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 up)
    // Offset: 0x1BA0EF8
    static float SignedAngle(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, ::UnityEngine::Vector3 up);
    // static public UnityEngine.Quaternion SafeFromToRotation(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 up)
    // Offset: 0x1BA1AD4
    static ::UnityEngine::Quaternion SafeFromToRotation(::UnityEngine::Vector3 v1, ::UnityEngine::Vector3 v2, ::UnityEngine::Vector3 up);
    // static public UnityEngine.Vector3 SlerpWithReferenceUp(UnityEngine.Vector3 vA, UnityEngine.Vector3 vB, System.Single t, UnityEngine.Vector3 up)
    // Offset: 0x1BA1C48
    static ::UnityEngine::Vector3 SlerpWithReferenceUp(::UnityEngine::Vector3 vA, ::UnityEngine::Vector3 vB, float t, ::UnityEngine::Vector3 up);
  }; // Cinemachine.Utility.UnityVectorExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::IsNaN
// Il2CppName: IsNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2)>(&Cinemachine::Utility::UnityVectorExtensions::IsNaN)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "IsNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::IsNaN
// Il2CppName: IsNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::IsNaN)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "IsNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment
// Il2CppName: ClosestPointOnSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* s0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "ClosestPointOnSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, s0, s1});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment
// Il2CppName: ClosestPointOnSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Cinemachine::Utility::UnityVectorExtensions::ClosestPointOnSegment)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* s0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "ClosestPointOnSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, s0, s1});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::ProjectOntoPlane
// Il2CppName: ProjectOntoPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::ProjectOntoPlane)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* planeNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "ProjectOntoPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, planeNormal});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::FindIntersection
// Il2CppName: FindIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&Cinemachine::Utility::UnityVectorExtensions::FindIntersection)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* p4 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* intersection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "FindIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p4, intersection});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2)>(&Cinemachine::Utility::UnityVectorExtensions::Abs)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::Abs)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::AlmostZero
// Il2CppName: AlmostZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::AlmostZero)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "AlmostZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::Angle
// Il2CppName: Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::Angle)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::SignedAngle
// Il2CppName: SignedAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::SignedAngle)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "SignedAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::SafeFromToRotation
// Il2CppName: SafeFromToRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::SafeFromToRotation)> {
  static const MethodInfo* get() {
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "SafeFromToRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v1, v2, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityVectorExtensions::SlerpWithReferenceUp
// Il2CppName: SlerpWithReferenceUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityVectorExtensions::SlerpWithReferenceUp)> {
  static const MethodInfo* get() {
    static auto* vA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityVectorExtensions*), "SlerpWithReferenceUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vA, vB, t, up});
  }
};
