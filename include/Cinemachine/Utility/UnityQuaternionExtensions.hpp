// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Forward declaring type: UnityQuaternionExtensions
  class UnityQuaternionExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Utility::UnityQuaternionExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Utility::UnityQuaternionExtensions*, "Cinemachine.Utility", "UnityQuaternionExtensions");
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Utility.UnityQuaternionExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class UnityQuaternionExtensions : public ::Il2CppObject {
    public:
    // static public UnityEngine.Quaternion SlerpWithReferenceUp(UnityEngine.Quaternion qA, UnityEngine.Quaternion qB, System.Single t, UnityEngine.Vector3 up)
    // Offset: 0x1BA0670
    static ::UnityEngine::Quaternion SlerpWithReferenceUp(::UnityEngine::Quaternion qA, ::UnityEngine::Quaternion qB, float t, ::UnityEngine::Vector3 up);
    // static public UnityEngine.Quaternion Normalized(UnityEngine.Quaternion q)
    // Offset: 0x1BA0AB8
    static ::UnityEngine::Quaternion Normalized(::UnityEngine::Quaternion q);
    // static public UnityEngine.Vector2 GetCameraRotationToTarget(UnityEngine.Quaternion orient, UnityEngine.Vector3 lookAtDir, UnityEngine.Vector3 worldUp)
    // Offset: 0x1BA0B10
    static ::UnityEngine::Vector2 GetCameraRotationToTarget(::UnityEngine::Quaternion orient, ::UnityEngine::Vector3 lookAtDir, ::UnityEngine::Vector3 worldUp);
    // static public UnityEngine.Quaternion ApplyCameraRotation(UnityEngine.Quaternion orient, UnityEngine.Vector2 rot, UnityEngine.Vector3 worldUp)
    // Offset: 0x1BA1034
    static ::UnityEngine::Quaternion ApplyCameraRotation(::UnityEngine::Quaternion orient, ::UnityEngine::Vector2 rot, ::UnityEngine::Vector3 worldUp);
  }; // Cinemachine.Utility.UnityQuaternionExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Utility::UnityQuaternionExtensions::SlerpWithReferenceUp
// Il2CppName: SlerpWithReferenceUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityQuaternionExtensions::SlerpWithReferenceUp)> {
  static const MethodInfo* get() {
    static auto* qA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* qB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityQuaternionExtensions*), "SlerpWithReferenceUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qA, qB, t, up});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityQuaternionExtensions::Normalized
// Il2CppName: Normalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion)>(&Cinemachine::Utility::UnityQuaternionExtensions::Normalized)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityQuaternionExtensions*), "Normalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityQuaternionExtensions::GetCameraRotationToTarget
// Il2CppName: GetCameraRotationToTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityQuaternionExtensions::GetCameraRotationToTarget)> {
  static const MethodInfo* get() {
    static auto* orient = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* lookAtDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityQuaternionExtensions*), "GetCameraRotationToTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orient, lookAtDir, worldUp});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::UnityQuaternionExtensions::ApplyCameraRotation
// Il2CppName: ApplyCameraRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector2, ::UnityEngine::Vector3)>(&Cinemachine::Utility::UnityQuaternionExtensions::ApplyCameraRotation)> {
  static const MethodInfo* get() {
    static auto* orient = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::UnityQuaternionExtensions*), "ApplyCameraRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orient, rot, worldUp});
  }
};
