// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Forward declaring type: HeadingTracker
  class HeadingTracker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Utility::HeadingTracker);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Utility::HeadingTracker*, "Cinemachine.Utility", "HeadingTracker");
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Utility.HeadingTracker
  // [TokenAttribute] Offset: FFFFFFFF
  class HeadingTracker : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::Utility::HeadingTracker::Item
    struct Item;
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.Utility.HeadingTracker/Cinemachine.Utility.Item
    // [TokenAttribute] Offset: FFFFFFFF
    struct Item/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 velocity
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 velocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single weight
      // Size: 0x4
      // Offset: 0xC
      float weight;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single time
      // Size: 0x4
      // Offset: 0x10
      float time;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Item
      constexpr Item(::UnityEngine::Vector3 velocity_ = {}, float weight_ = {}, float time_ = {}) noexcept : velocity{velocity_}, weight{weight_}, time{time_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 velocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
      // Get instance field reference: public System.Single weight
      [[deprecated("Use field access instead!")]] float& dyn_weight();
      // Get instance field reference: public System.Single time
      [[deprecated("Use field access instead!")]] float& dyn_time();
    }; // Cinemachine.Utility.HeadingTracker/Cinemachine.Utility.Item
    #pragma pack(pop)
    static check_size<sizeof(HeadingTracker::Item), 16 + sizeof(float)> __Cinemachine_Utility_HeadingTracker_ItemSizeCheck;
    static_assert(sizeof(HeadingTracker::Item) == 0x14);
    public:
    // private Cinemachine.Utility.HeadingTracker/Cinemachine.Utility.Item[] mHistory
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Cinemachine::Utility::HeadingTracker::Item> mHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::Utility::HeadingTracker::Item>) == 0x8);
    // private System.Int32 mTop
    // Size: 0x4
    // Offset: 0x18
    int mTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mBottom
    // Size: 0x4
    // Offset: 0x1C
    int mBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mCount
    // Size: 0x4
    // Offset: 0x20
    int mCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 mHeadingSum
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 mHeadingSum;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single mWeightSum
    // Size: 0x4
    // Offset: 0x30
    float mWeightSum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single mWeightTime
    // Size: 0x4
    // Offset: 0x34
    float mWeightTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 mLastGoodHeading
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 mLastGoodHeading;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get static field: static private System.Single mDecayExponent
    static float _get_mDecayExponent();
    // Set static field: static private System.Single mDecayExponent
    static void _set_mDecayExponent(float value);
    // Get instance field reference: private Cinemachine.Utility.HeadingTracker/Cinemachine.Utility.Item[] mHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::Utility::HeadingTracker::Item>& dyn_mHistory();
    // Get instance field reference: private System.Int32 mTop
    [[deprecated("Use field access instead!")]] int& dyn_mTop();
    // Get instance field reference: private System.Int32 mBottom
    [[deprecated("Use field access instead!")]] int& dyn_mBottom();
    // Get instance field reference: private System.Int32 mCount
    [[deprecated("Use field access instead!")]] int& dyn_mCount();
    // Get instance field reference: private UnityEngine.Vector3 mHeadingSum
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mHeadingSum();
    // Get instance field reference: private System.Single mWeightSum
    [[deprecated("Use field access instead!")]] float& dyn_mWeightSum();
    // Get instance field reference: private System.Single mWeightTime
    [[deprecated("Use field access instead!")]] float& dyn_mWeightTime();
    // Get instance field reference: private UnityEngine.Vector3 mLastGoodHeading
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mLastGoodHeading();
    // public System.Int32 get_FilterSize()
    // Offset: 0x1B9E8EC
    int get_FilterSize();
    // public System.Void .ctor(System.Int32 filterSize)
    // Offset: 0x1B9E778
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeadingTracker* New_ctor(int filterSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::HeadingTracker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeadingTracker*, creationType>(filterSize)));
    }
    // private System.Void ClearHistory()
    // Offset: 0x1B9E870
    void ClearHistory();
    // static private System.Single Decay(System.Single time)
    // Offset: 0x1B9E908
    static float Decay(float time);
    // public System.Void Add(UnityEngine.Vector3 velocity)
    // Offset: 0x1B9E988
    void Add(::UnityEngine::Vector3 velocity);
    // private System.Void PopBottom()
    // Offset: 0x1B9EB6C
    void PopBottom();
    // public System.Void DecayHistory()
    // Offset: 0x1B9ED1C
    void DecayHistory();
    // public UnityEngine.Vector3 GetReliableHeading()
    // Offset: 0x1B9EE24
    ::UnityEngine::Vector3 GetReliableHeading();
  }; // Cinemachine.Utility.HeadingTracker
  #pragma pack(pop)
  static check_size<sizeof(HeadingTracker), 56 + sizeof(::UnityEngine::Vector3)> __Cinemachine_Utility_HeadingTrackerSizeCheck;
  static_assert(sizeof(HeadingTracker) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Utility::HeadingTracker::Item, "Cinemachine.Utility", "HeadingTracker/Item");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::get_FilterSize
// Il2CppName: get_FilterSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::Utility::HeadingTracker::*)()>(&Cinemachine::Utility::HeadingTracker::get_FilterSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "get_FilterSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::ClearHistory
// Il2CppName: ClearHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Utility::HeadingTracker::*)()>(&Cinemachine::Utility::HeadingTracker::ClearHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "ClearHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::Decay
// Il2CppName: Decay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Cinemachine::Utility::HeadingTracker::Decay)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "Decay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Utility::HeadingTracker::*)(::UnityEngine::Vector3)>(&Cinemachine::Utility::HeadingTracker::Add)> {
  static const MethodInfo* get() {
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocity});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::PopBottom
// Il2CppName: PopBottom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Utility::HeadingTracker::*)()>(&Cinemachine::Utility::HeadingTracker::PopBottom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "PopBottom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::DecayHistory
// Il2CppName: DecayHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Utility::HeadingTracker::*)()>(&Cinemachine::Utility::HeadingTracker::DecayHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "DecayHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::HeadingTracker::GetReliableHeading
// Il2CppName: GetReliableHeading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::Utility::HeadingTracker::*)()>(&Cinemachine::Utility::HeadingTracker::GetReliableHeading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::HeadingTracker*), "GetReliableHeading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
