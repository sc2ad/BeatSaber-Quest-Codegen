// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Forward declaring type: SplineHelpers
  class SplineHelpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Utility::SplineHelpers);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Utility::SplineHelpers*, "Cinemachine.Utility", "SplineHelpers");
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Utility.SplineHelpers
  // [TokenAttribute] Offset: FFFFFFFF
  class SplineHelpers : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector3 Bezier3(System.Single t, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3)
    // Offset: 0x1B9F40C
    static ::UnityEngine::Vector3 Bezier3(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3);
    // static public UnityEngine.Vector3 BezierTangent3(System.Single t, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3)
    // Offset: 0x1B9F604
    static ::UnityEngine::Vector3 BezierTangent3(float t, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3);
    // static public System.Single Bezier1(System.Single t, System.Single p0, System.Single p1, System.Single p2, System.Single p3)
    // Offset: 0x1B9F964
    static float Bezier1(float t, float p0, float p1, float p2, float p3);
    // static public System.Single BezierTangent1(System.Single t, System.Single p0, System.Single p1, System.Single p2, System.Single p3)
    // Offset: 0x1B9FA44
    static float BezierTangent1(float t, float p0, float p1, float p2, float p3);
    // static public System.Void ComputeSmoothControlPoints(ref UnityEngine.Vector4[] knot, ref UnityEngine.Vector4[] ctrl1, ref UnityEngine.Vector4[] ctrl2)
    // Offset: 0x1B9FB34
    static void ComputeSmoothControlPoints(ByRef<::ArrayW<::UnityEngine::Vector4>> knot, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl1, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl2);
    // static public System.Void ComputeSmoothControlPointsLooped(ref UnityEngine.Vector4[] knot, ref UnityEngine.Vector4[] ctrl1, ref UnityEngine.Vector4[] ctrl2)
    // Offset: 0x1BA036C
    static void ComputeSmoothControlPointsLooped(ByRef<::ArrayW<::UnityEngine::Vector4>> knot, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl1, ByRef<::ArrayW<::UnityEngine::Vector4>> ctrl2);
  }; // Cinemachine.Utility.SplineHelpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::Bezier3
// Il2CppName: Bezier3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::SplineHelpers::Bezier3)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "Bezier3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::BezierTangent3
// Il2CppName: BezierTangent3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::Utility::SplineHelpers::BezierTangent3)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "BezierTangent3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::Bezier1
// Il2CppName: Bezier1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Cinemachine::Utility::SplineHelpers::Bezier1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "Bezier1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::BezierTangent1
// Il2CppName: BezierTangent1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Cinemachine::Utility::SplineHelpers::BezierTangent1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "BezierTangent1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, p0, p1, p2, p3});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPoints
// Il2CppName: ComputeSmoothControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::Vector4>>, ByRef<::ArrayW<::UnityEngine::Vector4>>, ByRef<::ArrayW<::UnityEngine::Vector4>>)>(&Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPoints)> {
  static const MethodInfo* get() {
    static auto* knot = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    static auto* ctrl1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    static auto* ctrl2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "ComputeSmoothControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{knot, ctrl1, ctrl2});
  }
};
// Writing MetadataGetter for method: Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPointsLooped
// Il2CppName: ComputeSmoothControlPointsLooped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::Vector4>>, ByRef<::ArrayW<::UnityEngine::Vector4>>, ByRef<::ArrayW<::UnityEngine::Vector4>>)>(&Cinemachine::Utility::SplineHelpers::ComputeSmoothControlPointsLooped)> {
  static const MethodInfo* get() {
    static auto* knot = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    static auto* ctrl1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    static auto* ctrl2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Utility::SplineHelpers*), "ComputeSmoothControlPointsLooped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{knot, ctrl1, ctrl2});
  }
};
