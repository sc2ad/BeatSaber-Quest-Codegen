// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // Forward declaring type: GaussianWindow1d`1<T>
  template<typename T>
  class GaussianWindow1d_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Cinemachine::Utility::GaussianWindow1d_1, "Cinemachine.Utility", "GaussianWindow1d`1");
// Type namespace: Cinemachine.Utility
namespace Cinemachine::Utility {
  // WARNING Size may be invalid!
  // Autogenerated type: Cinemachine.Utility.GaussianWindow1d`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class GaussianWindow1d_1 : public ::Il2CppObject {
    public:
    public:
    // protected T[] mData
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> mData;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // protected System.Single[] mKernel
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> mKernel;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // protected System.Int32 mCurrentPos
    // Size: 0x4
    // Offset: 0x0
    int mCurrentPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <Sigma>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float Sigma;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: protected T[] mData
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_mData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::dyn_mData");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mData"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single[] mKernel
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_mKernel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::dyn_mKernel");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mKernel"))->offset;
      return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 mCurrentPos
    [[deprecated("Use field access instead!")]] int& dyn_mCurrentPos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::dyn_mCurrentPos");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mCurrentPos"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <Sigma>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Sigma$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::dyn_$Sigma$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Sigma>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Single get_Sigma()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_Sigma() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::get_Sigma");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Sigma", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // private System.Void set_Sigma(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Sigma(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::set_Sigma");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Sigma", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_KernelSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_KernelSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::get_KernelSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_KernelSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_BufferLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_BufferLength() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::get_BufferLength");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Single sigma, System.Int32 maxKernelRadius)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GaussianWindow1d_1<T>* New_ctor(float sigma, int maxKernelRadius) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GaussianWindow1d_1<T>*, creationType>(sigma, maxKernelRadius)));
    }
    // private System.Void GenerateKernel(System.Single sigma, System.Int32 maxKernelRadius)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GenerateKernel(float sigma, int maxKernelRadius) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::GenerateKernel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sigma), ::il2cpp_utils::ExtractType(maxKernelRadius)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sigma, maxKernelRadius);
    }
    // protected T Compute(System.Int32 windowPos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Compute(int windowPos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::Compute");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Cinemachine::Utility::GaussianWindow1d_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, windowPos);
    }
    // public System.Void Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::Reset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean IsEmpty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsEmpty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::IsEmpty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void AddValue(T v)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddValue(T v) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::AddValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, v);
    }
    // public T Filter(T v)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Filter(T v) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::Filter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Filter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, v);
    }
    // public T Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void SetBufferValue(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetBufferValue(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::SetBufferValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBufferValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public T GetBufferValue(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetBufferValue(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Utility::GaussianWindow1d_1::GetBufferValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBufferValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
  }; // Cinemachine.Utility.GaussianWindow1d`1
  // Could not write size check! Type: Cinemachine.Utility.GaussianWindow1d`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
