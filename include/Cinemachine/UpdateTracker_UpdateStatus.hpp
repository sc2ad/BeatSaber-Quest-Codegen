// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.UpdateTracker
#include "Cinemachine/UpdateTracker.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: Cinemachine.UpdateTracker/Cinemachine.UpdateClock
#include "Cinemachine/UpdateTracker_UpdateClock.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::UpdateTracker::UpdateStatus);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::UpdateTracker::UpdateStatus*, "Cinemachine", "UpdateTracker/UpdateStatus");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.UpdateTracker/Cinemachine.UpdateStatus
  // [TokenAttribute] Offset: FFFFFFFF
  class UpdateTracker::UpdateStatus : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 windowStart
    // Size: 0x4
    // Offset: 0x10
    int windowStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 numWindowLateUpdateMoves
    // Size: 0x4
    // Offset: 0x14
    int numWindowLateUpdateMoves;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 numWindowFixedUpdateMoves
    // Size: 0x4
    // Offset: 0x18
    int numWindowFixedUpdateMoves;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 numWindows
    // Size: 0x4
    // Offset: 0x1C
    int numWindows;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastFrameUpdated
    // Size: 0x4
    // Offset: 0x20
    int lastFrameUpdated;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Matrix4x4 lastPos
    // Size: 0x40
    // Offset: 0x24
    ::UnityEngine::Matrix4x4 lastPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private Cinemachine.UpdateTracker/Cinemachine.UpdateClock <PreferredUpdate>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    ::Cinemachine::UpdateTracker::UpdateClock PreferredUpdate;
    // Field size check
    static_assert(sizeof(::Cinemachine::UpdateTracker::UpdateClock) == 0x4);
    public:
    // static field const value: static private System.Int32 kWindowSize
    static constexpr const int kWindowSize = 30;
    // Get static field: static private System.Int32 kWindowSize
    static int _get_kWindowSize();
    // Set static field: static private System.Int32 kWindowSize
    static void _set_kWindowSize(int value);
    // Get instance field reference: private System.Int32 windowStart
    [[deprecated("Use field access instead!")]] int& dyn_windowStart();
    // Get instance field reference: private System.Int32 numWindowLateUpdateMoves
    [[deprecated("Use field access instead!")]] int& dyn_numWindowLateUpdateMoves();
    // Get instance field reference: private System.Int32 numWindowFixedUpdateMoves
    [[deprecated("Use field access instead!")]] int& dyn_numWindowFixedUpdateMoves();
    // Get instance field reference: private System.Int32 numWindows
    [[deprecated("Use field access instead!")]] int& dyn_numWindows();
    // Get instance field reference: private System.Int32 lastFrameUpdated
    [[deprecated("Use field access instead!")]] int& dyn_lastFrameUpdated();
    // Get instance field reference: private UnityEngine.Matrix4x4 lastPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_lastPos();
    // Get instance field reference: private Cinemachine.UpdateTracker/Cinemachine.UpdateClock <PreferredUpdate>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::UpdateTracker::UpdateClock& dyn_$PreferredUpdate$k__BackingField();
    // public Cinemachine.UpdateTracker/Cinemachine.UpdateClock get_PreferredUpdate()
    // Offset: 0x1B9D5A4
    ::Cinemachine::UpdateTracker::UpdateClock get_PreferredUpdate();
    // private System.Void set_PreferredUpdate(Cinemachine.UpdateTracker/Cinemachine.UpdateClock value)
    // Offset: 0x1B9D5AC
    void set_PreferredUpdate(::Cinemachine::UpdateTracker::UpdateClock value);
    // public System.Void .ctor(System.Int32 currentFrame, UnityEngine.Matrix4x4 pos)
    // Offset: 0x1B9D3B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UpdateTracker::UpdateStatus* New_ctor(int currentFrame, ::UnityEngine::Matrix4x4 pos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::UpdateTracker::UpdateStatus::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UpdateTracker::UpdateStatus*, creationType>(currentFrame, pos)));
    }
    // public System.Void OnUpdate(System.Int32 currentFrame, Cinemachine.UpdateTracker/Cinemachine.UpdateClock currentClock, UnityEngine.Matrix4x4 pos)
    // Offset: 0x1B9D06C
    void OnUpdate(int currentFrame, ::Cinemachine::UpdateTracker::UpdateClock currentClock, ::UnityEngine::Matrix4x4 pos);
  }; // Cinemachine.UpdateTracker/Cinemachine.UpdateStatus
  #pragma pack(pop)
  static check_size<sizeof(UpdateTracker::UpdateStatus), 100 + sizeof(::Cinemachine::UpdateTracker::UpdateClock)> __Cinemachine_UpdateTracker_UpdateStatusSizeCheck;
  static_assert(sizeof(UpdateTracker::UpdateStatus) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::UpdateTracker::UpdateStatus::get_PreferredUpdate
// Il2CppName: get_PreferredUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::UpdateTracker::UpdateClock (Cinemachine::UpdateTracker::UpdateStatus::*)()>(&Cinemachine::UpdateTracker::UpdateStatus::get_PreferredUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::UpdateTracker::UpdateStatus*), "get_PreferredUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::UpdateTracker::UpdateStatus::set_PreferredUpdate
// Il2CppName: set_PreferredUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::UpdateTracker::UpdateStatus::*)(::Cinemachine::UpdateTracker::UpdateClock)>(&Cinemachine::UpdateTracker::UpdateStatus::set_PreferredUpdate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "UpdateTracker/UpdateClock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::UpdateTracker::UpdateStatus*), "set_PreferredUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::UpdateTracker::UpdateStatus::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::UpdateTracker::UpdateStatus::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::UpdateTracker::UpdateStatus::*)(int, ::Cinemachine::UpdateTracker::UpdateClock, ::UnityEngine::Matrix4x4)>(&Cinemachine::UpdateTracker::UpdateStatus::OnUpdate)> {
  static const MethodInfo* get() {
    static auto* currentFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* currentClock = &::il2cpp_utils::GetClassFromName("Cinemachine", "UpdateTracker/UpdateClock")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::UpdateTracker::UpdateStatus*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentFrame, currentClock, pos});
  }
};
