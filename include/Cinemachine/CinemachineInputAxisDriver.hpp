// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: AxisBase
  struct AxisBase;
  // Forward declaring type: AxisState
  struct AxisState;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineInputAxisDriver
  struct CinemachineInputAxisDriver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineInputAxisDriver, "Cinemachine", "CinemachineInputAxisDriver");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.CinemachineInputAxisDriver
  // [TokenAttribute] Offset: FFFFFFFF
  struct CinemachineInputAxisDriver/*, public ::System::ValueType*/ {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98C664
    // public System.Single multiplier
    // Size: 0x4
    // Offset: 0x0
    float multiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C69C
    // public System.Single accelTime
    // Size: 0x4
    // Offset: 0x4
    float accelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C6D4
    // public System.Single decelTime
    // Size: 0x4
    // Offset: 0x8
    float decelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: decelTime and: name
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0x98C70C
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [NoSaveDuringPlayAttribute] Offset: 0x98C744
    // [TooltipAttribute] Offset: 0x98C744
    // public System.Single inputValue
    // Size: 0x4
    // Offset: 0x18
    float inputValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single mCurrentSpeed
    // Size: 0x4
    // Offset: 0x1C
    float mCurrentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: CinemachineInputAxisDriver
    constexpr CinemachineInputAxisDriver(float multiplier_ = {}, float accelTime_ = {}, float decelTime_ = {}, ::StringW name_ = {}, float inputValue_ = {}, float mCurrentSpeed_ = {}) noexcept : multiplier{multiplier_}, accelTime{accelTime_}, decelTime{decelTime_}, name{name_}, inputValue{inputValue_}, mCurrentSpeed{mCurrentSpeed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Single Epsilon
    static constexpr const float Epsilon = 0.0001;
    // Get static field: static private System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static private System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get instance field reference: public System.Single multiplier
    [[deprecated("Use field access instead!")]] float& dyn_multiplier();
    // Get instance field reference: public System.Single accelTime
    [[deprecated("Use field access instead!")]] float& dyn_accelTime();
    // Get instance field reference: public System.Single decelTime
    [[deprecated("Use field access instead!")]] float& dyn_decelTime();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Single inputValue
    [[deprecated("Use field access instead!")]] float& dyn_inputValue();
    // Get instance field reference: private System.Single mCurrentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_mCurrentSpeed();
    // public System.Void Validate()
    // Offset: 0xA51C04
    void Validate();
    // public System.Boolean Update(System.Single deltaTime, ref Cinemachine.AxisBase axis)
    // Offset: 0xA51C0C
    bool Update(float deltaTime, ByRef<::Cinemachine::AxisBase> axis);
    // public System.Boolean Update(System.Single deltaTime, ref Cinemachine.AxisState axis)
    // Offset: 0xA51C14
    bool Update(float deltaTime, ByRef<::Cinemachine::AxisState> axis);
    // private System.Single ClampValue(ref Cinemachine.AxisBase axis, System.Single v)
    // Offset: 0xA51C70
    float ClampValue(ByRef<::Cinemachine::AxisBase> axis, float v);
  }; // Cinemachine.CinemachineInputAxisDriver
  #pragma pack(pop)
  static check_size<sizeof(CinemachineInputAxisDriver), 28 + sizeof(float)> __Cinemachine_CinemachineInputAxisDriverSizeCheck;
  static_assert(sizeof(CinemachineInputAxisDriver) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineInputAxisDriver::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineInputAxisDriver::*)()>(&Cinemachine::CinemachineInputAxisDriver::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputAxisDriver), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineInputAxisDriver::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineInputAxisDriver::*)(float, ByRef<::Cinemachine::AxisBase>)>(&Cinemachine::CinemachineInputAxisDriver::Update)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisBase")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputAxisDriver), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, axis});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineInputAxisDriver::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineInputAxisDriver::*)(float, ByRef<::Cinemachine::AxisState>)>(&Cinemachine::CinemachineInputAxisDriver::Update)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputAxisDriver), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, axis});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineInputAxisDriver::ClampValue
// Il2CppName: ClampValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineInputAxisDriver::*)(ByRef<::Cinemachine::AxisBase>, float)>(&Cinemachine::CinemachineInputAxisDriver::ClampValue)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisBase")->this_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineInputAxisDriver), "ClampValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, v});
  }
};
