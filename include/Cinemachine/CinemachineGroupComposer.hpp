// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComposer
#include "Cinemachine/CinemachineComposer.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ICinemachineTargetGroup
  class ICinemachineTargetGroup;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineGroupComposer
  class CinemachineGroupComposer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineGroupComposer);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineGroupComposer*, "Cinemachine", "CinemachineGroupComposer");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x1B8
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineGroupComposer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 9870E8
  // [AddComponentMenu] Offset: 9870E8
  // [SaveDuringPlayAttribute] Offset: 9870E8
  class CinemachineGroupComposer : public ::Cinemachine::CinemachineComposer {
    public:
    // Nested type: ::Cinemachine::CinemachineGroupComposer::FramingMode
    struct FramingMode;
    // Nested type: ::Cinemachine::CinemachineGroupComposer::AdjustmentMode
    struct AdjustmentMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987A28
    struct FramingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FramingMode
      constexpr FramingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Horizontal
      static ::Cinemachine::CinemachineGroupComposer::FramingMode _get_Horizontal();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Horizontal
      static void _set_Horizontal(::Cinemachine::CinemachineGroupComposer::FramingMode value);
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Vertical
      static ::Cinemachine::CinemachineGroupComposer::FramingMode _get_Vertical();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode Vertical
      static void _set_Vertical(::Cinemachine::CinemachineGroupComposer::FramingMode value);
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode HorizontalAndVertical
      static constexpr const int HorizontalAndVertical = 2;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode HorizontalAndVertical
      static ::Cinemachine::CinemachineGroupComposer::FramingMode _get_HorizontalAndVertical();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode HorizontalAndVertical
      static void _set_HorizontalAndVertical(::Cinemachine::CinemachineGroupComposer::FramingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineGroupComposer::FramingMode), 0 + sizeof(int)> __Cinemachine_CinemachineGroupComposer_FramingModeSizeCheck;
    static_assert(sizeof(CinemachineGroupComposer::FramingMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AdjustmentMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AdjustmentMode
      constexpr AdjustmentMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode ZoomOnly
      static constexpr const int ZoomOnly = 0;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode ZoomOnly
      static ::Cinemachine::CinemachineGroupComposer::AdjustmentMode _get_ZoomOnly();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode ZoomOnly
      static void _set_ZoomOnly(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value);
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyOnly
      static constexpr const int DollyOnly = 1;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyOnly
      static ::Cinemachine::CinemachineGroupComposer::AdjustmentMode _get_DollyOnly();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyOnly
      static void _set_DollyOnly(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value);
      // static field const value: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyThenZoom
      static constexpr const int DollyThenZoom = 2;
      // Get static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyThenZoom
      static ::Cinemachine::CinemachineGroupComposer::AdjustmentMode _get_DollyThenZoom();
      // Set static field: static public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode DollyThenZoom
      static void _set_DollyThenZoom(::Cinemachine::CinemachineGroupComposer::AdjustmentMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineGroupComposer::AdjustmentMode), 0 + sizeof(int)> __Cinemachine_CinemachineGroupComposer_AdjustmentModeSizeCheck;
    static_assert(sizeof(CinemachineGroupComposer::AdjustmentMode) == 0x4);
    public:
    // [SpaceAttribute] Offset: 0x98B254
    // [TooltipAttribute] Offset: 0x98B254
    // public System.Single m_GroupFramingSize
    // Size: 0x4
    // Offset: 0x128
    float m_GroupFramingSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B2A0
    // public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode m_FramingMode
    // Size: 0x4
    // Offset: 0x12C
    ::Cinemachine::CinemachineGroupComposer::FramingMode m_FramingMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineGroupComposer::FramingMode) == 0x4);
    // [RangeAttribute] Offset: 0x98B2D8
    // [TooltipAttribute] Offset: 0x98B2D8
    // public System.Single m_FrameDamping
    // Size: 0x4
    // Offset: 0x130
    float m_FrameDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B32C
    // public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode m_AdjustmentMode
    // Size: 0x4
    // Offset: 0x134
    ::Cinemachine::CinemachineGroupComposer::AdjustmentMode m_AdjustmentMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineGroupComposer::AdjustmentMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98B364
    // public System.Single m_MaxDollyIn
    // Size: 0x4
    // Offset: 0x138
    float m_MaxDollyIn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B39C
    // public System.Single m_MaxDollyOut
    // Size: 0x4
    // Offset: 0x13C
    float m_MaxDollyOut;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B3D4
    // public System.Single m_MinimumDistance
    // Size: 0x4
    // Offset: 0x140
    float m_MinimumDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B40C
    // public System.Single m_MaximumDistance
    // Size: 0x4
    // Offset: 0x144
    float m_MaximumDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98B444
    // [TooltipAttribute] Offset: 0x98B444
    // public System.Single m_MinimumFOV
    // Size: 0x4
    // Offset: 0x148
    float m_MinimumFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98B49C
    // [TooltipAttribute] Offset: 0x98B49C
    // public System.Single m_MaximumFOV
    // Size: 0x4
    // Offset: 0x14C
    float m_MaximumFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B4F4
    // public System.Single m_MinimumOrthoSize
    // Size: 0x4
    // Offset: 0x150
    float m_MinimumOrthoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B52C
    // public System.Single m_MaximumOrthoSize
    // Size: 0x4
    // Offset: 0x154
    float m_MaximumOrthoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_prevFramingDistance
    // Size: 0x4
    // Offset: 0x158
    float m_prevFramingDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_prevFOV
    // Size: 0x4
    // Offset: 0x15C
    float m_prevFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Bounds <LastBounds>k__BackingField
    // Size: 0x18
    // Offset: 0x160
    ::UnityEngine::Bounds LastBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
    // Size: 0x40
    // Offset: 0x178
    ::UnityEngine::Matrix4x4 LastBoundsMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Get instance field reference: public System.Single m_GroupFramingSize
    [[deprecated("Use field access instead!")]] float& dyn_m_GroupFramingSize();
    // Get instance field reference: public Cinemachine.CinemachineGroupComposer/Cinemachine.FramingMode m_FramingMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineGroupComposer::FramingMode& dyn_m_FramingMode();
    // Get instance field reference: public System.Single m_FrameDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_FrameDamping();
    // Get instance field reference: public Cinemachine.CinemachineGroupComposer/Cinemachine.AdjustmentMode m_AdjustmentMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineGroupComposer::AdjustmentMode& dyn_m_AdjustmentMode();
    // Get instance field reference: public System.Single m_MaxDollyIn
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDollyIn();
    // Get instance field reference: public System.Single m_MaxDollyOut
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDollyOut();
    // Get instance field reference: public System.Single m_MinimumDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumDistance();
    // Get instance field reference: public System.Single m_MaximumDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumDistance();
    // Get instance field reference: public System.Single m_MinimumFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumFOV();
    // Get instance field reference: public System.Single m_MaximumFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumFOV();
    // Get instance field reference: public System.Single m_MinimumOrthoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumOrthoSize();
    // Get instance field reference: public System.Single m_MaximumOrthoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumOrthoSize();
    // Get instance field reference: private System.Single m_prevFramingDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_prevFramingDistance();
    // Get instance field reference: private System.Single m_prevFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_prevFOV();
    // Get instance field reference: private UnityEngine.Bounds <LastBounds>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_$LastBounds$k__BackingField();
    // Get instance field reference: private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_$LastBoundsMatrix$k__BackingField();
    // public UnityEngine.Bounds get_LastBounds()
    // Offset: 0x10583CC
    ::UnityEngine::Bounds get_LastBounds();
    // private System.Void set_LastBounds(UnityEngine.Bounds value)
    // Offset: 0x10583E0
    void set_LastBounds(::UnityEngine::Bounds value);
    // public UnityEngine.Matrix4x4 get_LastBoundsMatrix()
    // Offset: 0x10583F4
    ::UnityEngine::Matrix4x4 get_LastBoundsMatrix();
    // private System.Void set_LastBoundsMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x1058420
    void set_LastBoundsMatrix(::UnityEngine::Matrix4x4 value);
    // private System.Void OnValidate()
    // Offset: 0x105829C
    void OnValidate();
    // private System.Single GetTargetHeight(UnityEngine.Vector2 boundsSize)
    // Offset: 0x10595A4
    float GetTargetHeight(::UnityEngine::Vector2 boundsSize);
    // static private UnityEngine.Bounds GetScreenSpaceGroupBoundingBox(Cinemachine.ICinemachineTargetGroup group, UnityEngine.Matrix4x4 observer, out UnityEngine.Vector3 newFwd)
    // Offset: 0x1059210
    static ::UnityEngine::Bounds GetScreenSpaceGroupBoundingBox(::Cinemachine::ICinemachineTargetGroup* group, ::UnityEngine::Matrix4x4 observer, ByRef<::UnityEngine::Vector3> newFwd);
    // public System.Void .ctor()
    // Offset: 0x105975C
    // Implemented from: Cinemachine.CinemachineComposer
    // Base method: System.Void CinemachineComposer::.ctor()
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineGroupComposer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineGroupComposer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineGroupComposer*, creationType>()));
    }
    // public override System.Single GetMaxDampTime()
    // Offset: 0x105844C
    // Implemented from: Cinemachine.CinemachineComposer
    // Base method: System.Single CinemachineComposer::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x10584D4
    // Implemented from: Cinemachine.CinemachineComposer
    // Base method: System.Void CinemachineComposer::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
  }; // Cinemachine.CinemachineGroupComposer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineGroupComposer), 376 + sizeof(::UnityEngine::Matrix4x4)> __Cinemachine_CinemachineGroupComposerSizeCheck;
  static_assert(sizeof(CinemachineGroupComposer) == 0x1B8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineGroupComposer::AdjustmentMode, "Cinemachine", "CinemachineGroupComposer/AdjustmentMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineGroupComposer::FramingMode, "Cinemachine", "CinemachineGroupComposer/FramingMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::get_LastBounds
// Il2CppName: get_LastBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Cinemachine::CinemachineGroupComposer::*)()>(&Cinemachine::CinemachineGroupComposer::get_LastBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "get_LastBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::set_LastBounds
// Il2CppName: set_LastBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineGroupComposer::*)(::UnityEngine::Bounds)>(&Cinemachine::CinemachineGroupComposer::set_LastBounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "set_LastBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::get_LastBoundsMatrix
// Il2CppName: get_LastBoundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Cinemachine::CinemachineGroupComposer::*)()>(&Cinemachine::CinemachineGroupComposer::get_LastBoundsMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "get_LastBoundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::set_LastBoundsMatrix
// Il2CppName: set_LastBoundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineGroupComposer::*)(::UnityEngine::Matrix4x4)>(&Cinemachine::CinemachineGroupComposer::set_LastBoundsMatrix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "set_LastBoundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineGroupComposer::*)()>(&Cinemachine::CinemachineGroupComposer::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::GetTargetHeight
// Il2CppName: GetTargetHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineGroupComposer::*)(::UnityEngine::Vector2)>(&Cinemachine::CinemachineGroupComposer::GetTargetHeight)> {
  static const MethodInfo* get() {
    static auto* boundsSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "GetTargetHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundsSize});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::GetScreenSpaceGroupBoundingBox
// Il2CppName: GetScreenSpaceGroupBoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::Cinemachine::ICinemachineTargetGroup*, ::UnityEngine::Matrix4x4, ByRef<::UnityEngine::Vector3>)>(&Cinemachine::CinemachineGroupComposer::GetScreenSpaceGroupBoundingBox)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineTargetGroup")->byval_arg;
    static auto* observer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* newFwd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "GetScreenSpaceGroupBoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, observer, newFwd});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineGroupComposer::*)()>(&Cinemachine::CinemachineGroupComposer::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineGroupComposer::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineGroupComposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineGroupComposer::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineGroupComposer*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
