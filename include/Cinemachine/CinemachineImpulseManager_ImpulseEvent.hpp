// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineImpulseManager
#include "Cinemachine/CinemachineImpulseManager.hpp"
// Including type: Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition
#include "Cinemachine/CinemachineImpulseManager_EnvelopeDefinition.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ISignalSource6D
  class ISignalSource6D;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineImpulseManager::ImpulseEvent);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseManager::ImpulseEvent*, "Cinemachine", "CinemachineImpulseManager/ImpulseEvent");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineImpulseManager::ImpulseEvent : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode
    struct DirectionMode;
    // Nested type: ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode
    struct DissipationMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DirectionMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DirectionMode
      constexpr DirectionMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode Fixed
      static constexpr const int Fixed = 0;
      // Get static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode Fixed
      static ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode _get_Fixed();
      // Set static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode Fixed
      static void _set_Fixed(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode value);
      // static field const value: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode RotateTowardSource
      static constexpr const int RotateTowardSource = 1;
      // Get static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode RotateTowardSource
      static ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode _get_RotateTowardSource();
      // Set static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode RotateTowardSource
      static void _set_RotateTowardSource(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineImpulseManager::ImpulseEvent::DirectionMode), 0 + sizeof(int)> __Cinemachine_CinemachineImpulseManager_ImpulseEvent_DirectionModeSizeCheck;
    static_assert(sizeof(CinemachineImpulseManager::ImpulseEvent::DirectionMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DissipationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DissipationMode
      constexpr DissipationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode LinearDecay
      static constexpr const int LinearDecay = 0;
      // Get static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode LinearDecay
      static ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode _get_LinearDecay();
      // Set static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode LinearDecay
      static void _set_LinearDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value);
      // static field const value: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode SoftDecay
      static constexpr const int SoftDecay = 1;
      // Get static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode SoftDecay
      static ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode _get_SoftDecay();
      // Set static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode SoftDecay
      static void _set_SoftDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value);
      // static field const value: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode ExponentialDecay
      static constexpr const int ExponentialDecay = 2;
      // Get static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode ExponentialDecay
      static ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode _get_ExponentialDecay();
      // Set static field: static public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode ExponentialDecay
      static void _set_ExponentialDecay(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineImpulseManager::ImpulseEvent::DissipationMode), 0 + sizeof(int)> __Cinemachine_CinemachineImpulseManager_ImpulseEvent_DissipationModeSizeCheck;
    static_assert(sizeof(CinemachineImpulseManager::ImpulseEvent::DissipationMode) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x98E514
    // public System.Single m_StartTime
    // Size: 0x4
    // Offset: 0x10
    float m_StartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_StartTime and: m_Envelope
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0x98E54C
    // public Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition m_Envelope
    // Size: 0x1E
    // Offset: 0x18
    ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition m_Envelope;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition) == 0x1E);
    // Padding between fields: m_Envelope and: m_SignalSource
    char __padding1[0x2] = {};
    // [TooltipAttribute] Offset: 0x98E584
    // public Cinemachine.ISignalSource6D m_SignalSource
    // Size: 0x8
    // Offset: 0x38
    ::Cinemachine::ISignalSource6D* m_SignalSource;
    // Field size check
    static_assert(sizeof(::Cinemachine::ISignalSource6D*) == 0x8);
    // [TooltipAttribute] Offset: 0x98E5BC
    // public UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x98E5F4
    // public System.Single m_Radius
    // Size: 0x4
    // Offset: 0x4C
    float m_Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98E62C
    // public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode m_DirectionMode
    // Size: 0x4
    // Offset: 0x50
    ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode m_DirectionMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98E664
    // public System.Int32 m_Channel
    // Size: 0x4
    // Offset: 0x54
    int m_Channel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x98E69C
    // public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode m_DissipationMode
    // Size: 0x4
    // Offset: 0x58
    ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode m_DissipationMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98E6D4
    // public System.Single m_DissipationDistance
    // Size: 0x4
    // Offset: 0x5C
    float m_DissipationDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98E70C
    // public System.Single m_PropagationSpeed
    // Size: 0x4
    // Offset: 0x60
    float m_PropagationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single m_StartTime
    [[deprecated("Use field access instead!")]] float& dyn_m_StartTime();
    // Get instance field reference: public Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition m_Envelope
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition& dyn_m_Envelope();
    // Get instance field reference: public Cinemachine.ISignalSource6D m_SignalSource
    [[deprecated("Use field access instead!")]] ::Cinemachine::ISignalSource6D*& dyn_m_SignalSource();
    // Get instance field reference: public UnityEngine.Vector3 m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Position();
    // Get instance field reference: public System.Single m_Radius
    [[deprecated("Use field access instead!")]] float& dyn_m_Radius();
    // Get instance field reference: public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DirectionMode m_DirectionMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode& dyn_m_DirectionMode();
    // Get instance field reference: public System.Int32 m_Channel
    [[deprecated("Use field access instead!")]] int& dyn_m_Channel();
    // Get instance field reference: public Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent/Cinemachine.DissipationMode m_DissipationMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode& dyn_m_DissipationMode();
    // Get instance field reference: public System.Single m_DissipationDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_DissipationDistance();
    // Get instance field reference: public System.Single m_PropagationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_PropagationSpeed();
    // public System.Boolean get_Expired()
    // Offset: 0x105AC50
    bool get_Expired();
    // System.Void .ctor()
    // Offset: 0x105B3BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineImpulseManager::ImpulseEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineImpulseManager::ImpulseEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineImpulseManager::ImpulseEvent*, creationType>()));
    }
    // public System.Void Cancel(System.Single time, System.Boolean forceNoDecay)
    // Offset: 0x105B5F4
    void Cancel(float time, bool forceNoDecay);
    // public System.Single DistanceDecay(System.Single distance)
    // Offset: 0x105B630
    float DistanceDecay(float distance);
    // public System.Boolean GetDecayedSignal(UnityEngine.Vector3 listenerPosition, System.Boolean use2D, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x105AE00
    bool GetDecayedSignal(::UnityEngine::Vector3 listenerPosition, bool use2D, ByRef<::UnityEngine::Vector3> pos, ByRef<::UnityEngine::Quaternion> rot);
    // public System.Void Clear()
    // Offset: 0x105AD64
    void Clear();
  }; // Cinemachine.CinemachineImpulseManager/Cinemachine.ImpulseEvent
  #pragma pack(pop)
  static check_size<sizeof(CinemachineImpulseManager::ImpulseEvent), 96 + sizeof(float)> __Cinemachine_CinemachineImpulseManager_ImpulseEventSizeCheck;
  static_assert(sizeof(CinemachineImpulseManager::ImpulseEvent) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DissipationMode, "Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DissipationMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseManager::ImpulseEvent::DirectionMode, "Cinemachine", "CinemachineImpulseManager/ImpulseEvent/DirectionMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::get_Expired
// Il2CppName: get_Expired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineImpulseManager::ImpulseEvent::*)()>(&Cinemachine::CinemachineImpulseManager::ImpulseEvent::get_Expired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::ImpulseEvent*), "get_Expired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::ImpulseEvent::*)(float, bool)>(&Cinemachine::CinemachineImpulseManager::ImpulseEvent::Cancel)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* forceNoDecay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::ImpulseEvent*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, forceNoDecay});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::DistanceDecay
// Il2CppName: DistanceDecay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineImpulseManager::ImpulseEvent::*)(float)>(&Cinemachine::CinemachineImpulseManager::ImpulseEvent::DistanceDecay)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::ImpulseEvent*), "DistanceDecay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::GetDecayedSignal
// Il2CppName: GetDecayedSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineImpulseManager::ImpulseEvent::*)(::UnityEngine::Vector3, bool, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Cinemachine::CinemachineImpulseManager::ImpulseEvent::GetDecayedSignal)> {
  static const MethodInfo* get() {
    static auto* listenerPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* use2D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::ImpulseEvent*), "GetDecayedSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listenerPosition, use2D, pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::ImpulseEvent::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::ImpulseEvent::*)()>(&Cinemachine::CinemachineImpulseManager::ImpulseEvent::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::ImpulseEvent*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
