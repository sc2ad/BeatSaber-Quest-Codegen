// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Plane
  struct Plane;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ICinemachineCamera
  class ICinemachineCamera;
  // Forward declaring type: CameraState
  struct CameraState;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineCollider
  class CinemachineCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineCollider);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineCollider*, "Cinemachine", "CinemachineCollider");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineCollider
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 98662C
  // [AddComponentMenu] Offset: 98662C
  // [SaveDuringPlayAttribute] Offset: 98662C
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 98662C
  class CinemachineCollider : public ::Cinemachine::CinemachineExtension {
    public:
    // Nested type: ::Cinemachine::CinemachineCollider::ResolutionStrategy
    struct ResolutionStrategy;
    // Nested type: ::Cinemachine::CinemachineCollider::VcamExtraState
    class VcamExtraState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy
    // [TokenAttribute] Offset: FFFFFFFF
    struct ResolutionStrategy/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ResolutionStrategy
      constexpr ResolutionStrategy(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PullCameraForward
      static constexpr const int PullCameraForward = 0;
      // Get static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PullCameraForward
      static ::Cinemachine::CinemachineCollider::ResolutionStrategy _get_PullCameraForward();
      // Set static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PullCameraForward
      static void _set_PullCameraForward(::Cinemachine::CinemachineCollider::ResolutionStrategy value);
      // static field const value: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraHeight
      static constexpr const int PreserveCameraHeight = 1;
      // Get static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraHeight
      static ::Cinemachine::CinemachineCollider::ResolutionStrategy _get_PreserveCameraHeight();
      // Set static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraHeight
      static void _set_PreserveCameraHeight(::Cinemachine::CinemachineCollider::ResolutionStrategy value);
      // static field const value: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraDistance
      static constexpr const int PreserveCameraDistance = 2;
      // Get static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraDistance
      static ::Cinemachine::CinemachineCollider::ResolutionStrategy _get_PreserveCameraDistance();
      // Set static field: static public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy PreserveCameraDistance
      static void _set_PreserveCameraDistance(::Cinemachine::CinemachineCollider::ResolutionStrategy value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy
    #pragma pack(pop)
    static check_size<sizeof(CinemachineCollider::ResolutionStrategy), 0 + sizeof(int)> __Cinemachine_CinemachineCollider_ResolutionStrategySizeCheck;
    static_assert(sizeof(CinemachineCollider::ResolutionStrategy) == 0x4);
    public:
    // [HeaderAttribute] Offset: 0x988638
    // [TooltipAttribute] Offset: 0x988638
    // public UnityEngine.LayerMask m_CollideAgainst
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LayerMask m_CollideAgainst;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: m_CollideAgainst and: m_IgnoreTag
    char __padding0[0x4] = {};
    // [TagFieldAttribute] Offset: 0x988698
    // [TooltipAttribute] Offset: 0x988698
    // public System.String m_IgnoreTag
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_IgnoreTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0x9886E4
    // public UnityEngine.LayerMask m_TransparentLayers
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::LayerMask m_TransparentLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // [TooltipAttribute] Offset: 0x98871C
    // public System.Single m_MinimumDistanceFromTarget
    // Size: 0x4
    // Offset: 0x3C
    float m_MinimumDistanceFromTarget;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x988754
    // [TooltipAttribute] Offset: 0x988754
    // [FormerlySerializedAsAttribute] Offset: 0x988754
    // public System.Boolean m_AvoidObstacles
    // Size: 0x1
    // Offset: 0x40
    bool m_AvoidObstacles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AvoidObstacles and: m_DistanceLimit
    char __padding4[0x3] = {};
    // [TooltipAttribute] Offset: 0x9887C4
    // [FormerlySerializedAsAttribute] Offset: 0x9887C4
    // public System.Single m_DistanceLimit
    // Size: 0x4
    // Offset: 0x44
    float m_DistanceLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x988824
    // public System.Single m_MinimumOcclusionTime
    // Size: 0x4
    // Offset: 0x48
    float m_MinimumOcclusionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98885C
    // public System.Single m_CameraRadius
    // Size: 0x4
    // Offset: 0x4C
    float m_CameraRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x988894
    // public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy m_Strategy
    // Size: 0x4
    // Offset: 0x50
    ::Cinemachine::CinemachineCollider::ResolutionStrategy m_Strategy;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineCollider::ResolutionStrategy) == 0x4);
    // [RangeAttribute] Offset: 0x9888CC
    // [TooltipAttribute] Offset: 0x9888CC
    // public System.Int32 m_MaximumEffort
    // Size: 0x4
    // Offset: 0x54
    int m_MaximumEffort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x988920
    // [TooltipAttribute] Offset: 0x988920
    // public System.Single m_SmoothingTime
    // Size: 0x4
    // Offset: 0x58
    float m_SmoothingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x988974
    // [TooltipAttribute] Offset: 0x988974
    // [FormerlySerializedAsAttribute] Offset: 0x988974
    // public System.Single m_Damping
    // Size: 0x4
    // Offset: 0x5C
    float m_Damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x9889EC
    // [TooltipAttribute] Offset: 0x9889EC
    // public System.Single m_DampingWhenOccluded
    // Size: 0x4
    // Offset: 0x60
    float m_DampingWhenOccluded;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x988A40
    // [TooltipAttribute] Offset: 0x988A40
    // public System.Single m_OptimalTargetDistance
    // Size: 0x4
    // Offset: 0x64
    float m_OptimalTargetDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RaycastHit[] m_CornerBuffer
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::RaycastHit> m_CornerBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Collider[] mColliderBuffer
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Collider*> mColliderBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    public:
    // static field const value: static private System.Single PrecisionSlush
    static constexpr const float PrecisionSlush = 0.001;
    // Get static field: static private System.Single PrecisionSlush
    static float _get_PrecisionSlush();
    // Set static field: static private System.Single PrecisionSlush
    static void _set_PrecisionSlush(float value);
    // static field const value: static private System.Single AngleThreshold
    static constexpr const float AngleThreshold = 0.1;
    // Get static field: static private System.Single AngleThreshold
    static float _get_AngleThreshold();
    // Set static field: static private System.Single AngleThreshold
    static void _set_AngleThreshold(float value);
    // Get static field: static private UnityEngine.SphereCollider mCameraCollider
    static ::UnityEngine::SphereCollider* _get_mCameraCollider();
    // Set static field: static private UnityEngine.SphereCollider mCameraCollider
    static void _set_mCameraCollider(::UnityEngine::SphereCollider* value);
    // Get static field: static private UnityEngine.GameObject mCameraColliderGameObject
    static ::UnityEngine::GameObject* _get_mCameraColliderGameObject();
    // Set static field: static private UnityEngine.GameObject mCameraColliderGameObject
    static void _set_mCameraColliderGameObject(::UnityEngine::GameObject* value);
    // Get instance field reference: public UnityEngine.LayerMask m_CollideAgainst
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_CollideAgainst();
    // Get instance field reference: public System.String m_IgnoreTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_IgnoreTag();
    // Get instance field reference: public UnityEngine.LayerMask m_TransparentLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_TransparentLayers();
    // Get instance field reference: public System.Single m_MinimumDistanceFromTarget
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumDistanceFromTarget();
    // Get instance field reference: public System.Boolean m_AvoidObstacles
    [[deprecated("Use field access instead!")]] bool& dyn_m_AvoidObstacles();
    // Get instance field reference: public System.Single m_DistanceLimit
    [[deprecated("Use field access instead!")]] float& dyn_m_DistanceLimit();
    // Get instance field reference: public System.Single m_MinimumOcclusionTime
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumOcclusionTime();
    // Get instance field reference: public System.Single m_CameraRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_CameraRadius();
    // Get instance field reference: public Cinemachine.CinemachineCollider/Cinemachine.ResolutionStrategy m_Strategy
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCollider::ResolutionStrategy& dyn_m_Strategy();
    // Get instance field reference: public System.Int32 m_MaximumEffort
    [[deprecated("Use field access instead!")]] int& dyn_m_MaximumEffort();
    // Get instance field reference: public System.Single m_SmoothingTime
    [[deprecated("Use field access instead!")]] float& dyn_m_SmoothingTime();
    // Get instance field reference: public System.Single m_Damping
    [[deprecated("Use field access instead!")]] float& dyn_m_Damping();
    // Get instance field reference: public System.Single m_DampingWhenOccluded
    [[deprecated("Use field access instead!")]] float& dyn_m_DampingWhenOccluded();
    // Get instance field reference: public System.Single m_OptimalTargetDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_OptimalTargetDistance();
    // Get instance field reference: private UnityEngine.RaycastHit[] m_CornerBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_m_CornerBuffer();
    // Get instance field reference: private UnityEngine.Collider[] mColliderBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_mColliderBuffer();
    // public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> get_DebugPaths()
    // Offset: 0x1409330
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>* get_DebugPaths();
    // public System.Boolean IsTargetObscured(Cinemachine.ICinemachineCamera vcam)
    // Offset: 0x1409030
    bool IsTargetObscured(::Cinemachine::ICinemachineCamera* vcam);
    // public System.Boolean CameraWasDisplaced(Cinemachine.ICinemachineCamera vcam)
    // Offset: 0x14090A0
    bool CameraWasDisplaced(::Cinemachine::ICinemachineCamera* vcam);
    // public System.Single GetCameraDisplacementDistance(Cinemachine.ICinemachineCamera vcam)
    // Offset: 0x14090BC
    float GetCameraDisplacementDistance(::Cinemachine::ICinemachineCamera* vcam);
    // private System.Void OnValidate()
    // Offset: 0x140912C
    void OnValidate();
    // private UnityEngine.Vector3 PreserveLignOfSight(ref Cinemachine.CameraState state, ref Cinemachine.CinemachineCollider/Cinemachine.VcamExtraState extra)
    // Offset: 0x1409D5C
    ::UnityEngine::Vector3 PreserveLignOfSight(ByRef<::Cinemachine::CameraState> state, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*> extra);
    // private UnityEngine.Vector3 PullCameraInFrontOfNearestObstacle(UnityEngine.Vector3 cameraPos, UnityEngine.Vector3 lookAtPos, System.Int32 layerMask, ref UnityEngine.RaycastHit hitInfo)
    // Offset: 0x140B304
    ::UnityEngine::Vector3 PullCameraInFrontOfNearestObstacle(::UnityEngine::Vector3 cameraPos, ::UnityEngine::Vector3 lookAtPos, int layerMask, ByRef<::UnityEngine::RaycastHit> hitInfo);
    // private UnityEngine.Vector3 PushCameraBack(UnityEngine.Vector3 currentPos, UnityEngine.Vector3 pushDir, UnityEngine.RaycastHit obstacle, UnityEngine.Vector3 lookAtPos, UnityEngine.Plane startPlane, System.Single targetDistance, System.Int32 iterations, ref Cinemachine.CinemachineCollider/Cinemachine.VcamExtraState extra)
    // Offset: 0x140B684
    ::UnityEngine::Vector3 PushCameraBack(::UnityEngine::Vector3 currentPos, ::UnityEngine::Vector3 pushDir, ::UnityEngine::RaycastHit obstacle, ::UnityEngine::Vector3 lookAtPos, ::UnityEngine::Plane startPlane, float targetDistance, int iterations, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*> extra);
    // private System.Boolean GetWalkingDirection(UnityEngine.Vector3 pos, UnityEngine.Vector3 pushDir, UnityEngine.RaycastHit obstacle, ref UnityEngine.Vector3 outDir)
    // Offset: 0x140BCA8
    bool GetWalkingDirection(::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 pushDir, ::UnityEngine::RaycastHit obstacle, ByRef<::UnityEngine::Vector3> outDir);
    // private System.Single GetPushBackDistance(UnityEngine.Ray ray, UnityEngine.Plane startPlane, System.Single targetDistance, UnityEngine.Vector3 lookAtPos)
    // Offset: 0x140C3A8
    float GetPushBackDistance(::UnityEngine::Ray ray, ::UnityEngine::Plane startPlane, float targetDistance, ::UnityEngine::Vector3 lookAtPos);
    // private System.Single ClampRayToBounds(UnityEngine.Ray ray, System.Single distance, UnityEngine.Bounds bounds)
    // Offset: 0x140C600
    float ClampRayToBounds(::UnityEngine::Ray ray, float distance, ::UnityEngine::Bounds bounds);
    // static private System.Void DestroyCollider()
    // Offset: 0x1409228
    static void DestroyCollider();
    // private UnityEngine.Vector3 RespectCameraRadius(UnityEngine.Vector3 cameraPos, ref Cinemachine.CameraState state)
    // Offset: 0x140A2C8
    ::UnityEngine::Vector3 RespectCameraRadius(::UnityEngine::Vector3 cameraPos, ByRef<::Cinemachine::CameraState> state);
    // private System.Boolean CheckForTargetObstructions(Cinemachine.CameraState state)
    // Offset: 0x140B128
    bool CheckForTargetObstructions(::Cinemachine::CameraState state);
    // private System.Boolean IsTargetOffscreen(Cinemachine.CameraState state)
    // Offset: 0x140ADC0
    bool IsTargetOffscreen(::Cinemachine::CameraState state);
    // public System.Void .ctor()
    // Offset: 0x140CCD0
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineCollider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCollider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineCollider*, creationType>()));
    }
    // protected override System.Void OnDestroy()
    // Offset: 0x1409200
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::OnDestroy()
    void OnDestroy();
    // public override System.Single GetMaxDampTime()
    // Offset: 0x1409494
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Single CinemachineExtension::GetMaxDampTime()
    float GetMaxDampTime();
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x1409528
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
  }; // Cinemachine.CinemachineCollider
  #pragma pack(pop)
  static check_size<sizeof(CinemachineCollider), 112 + sizeof(::ArrayW<::UnityEngine::Collider*>)> __Cinemachine_CinemachineColliderSizeCheck;
  static_assert(sizeof(CinemachineCollider) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineCollider::ResolutionStrategy, "Cinemachine", "CinemachineCollider/ResolutionStrategy");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::get_DebugPaths
// Il2CppName: get_DebugPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>* (Cinemachine::CinemachineCollider::*)()>(&Cinemachine::CinemachineCollider::get_DebugPaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "get_DebugPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::IsTargetObscured
// Il2CppName: IsTargetObscured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCollider::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCollider::IsTargetObscured)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "IsTargetObscured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::CameraWasDisplaced
// Il2CppName: CameraWasDisplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCollider::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCollider::CameraWasDisplaced)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "CameraWasDisplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::GetCameraDisplacementDistance
// Il2CppName: GetCameraDisplacementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineCollider::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCollider::GetCameraDisplacementDistance)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "GetCameraDisplacementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCollider::*)()>(&Cinemachine::CinemachineCollider::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::PreserveLignOfSight
// Il2CppName: PreserveLignOfSight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineCollider::*)(ByRef<::Cinemachine::CameraState>, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*>)>(&Cinemachine::CinemachineCollider::PreserveLignOfSight)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* extra = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCollider/VcamExtraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "PreserveLignOfSight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, extra});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::PullCameraInFrontOfNearestObstacle
// Il2CppName: PullCameraInFrontOfNearestObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineCollider::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, int, ByRef<::UnityEngine::RaycastHit>)>(&Cinemachine::CinemachineCollider::PullCameraInFrontOfNearestObstacle)> {
  static const MethodInfo* get() {
    static auto* cameraPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lookAtPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "PullCameraInFrontOfNearestObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraPos, lookAtPos, layerMask, hitInfo});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::PushCameraBack
// Il2CppName: PushCameraBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineCollider::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::RaycastHit, ::UnityEngine::Vector3, ::UnityEngine::Plane, float, int, ByRef<::Cinemachine::CinemachineCollider::VcamExtraState*>)>(&Cinemachine::CinemachineCollider::PushCameraBack)> {
  static const MethodInfo* get() {
    static auto* currentPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pushDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* obstacle = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* lookAtPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* startPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* targetDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* iterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* extra = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCollider/VcamExtraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "PushCameraBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPos, pushDir, obstacle, lookAtPos, startPlane, targetDistance, iterations, extra});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::GetWalkingDirection
// Il2CppName: GetWalkingDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCollider::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::RaycastHit, ByRef<::UnityEngine::Vector3>)>(&Cinemachine::CinemachineCollider::GetWalkingDirection)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pushDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* obstacle = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* outDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "GetWalkingDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, pushDir, obstacle, outDir});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::GetPushBackDistance
// Il2CppName: GetPushBackDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineCollider::*)(::UnityEngine::Ray, ::UnityEngine::Plane, float, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineCollider::GetPushBackDistance)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* startPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* targetDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lookAtPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "GetPushBackDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, startPlane, targetDistance, lookAtPos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::ClampRayToBounds
// Il2CppName: ClampRayToBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineCollider::*)(::UnityEngine::Ray, float, ::UnityEngine::Bounds)>(&Cinemachine::CinemachineCollider::ClampRayToBounds)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "ClampRayToBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, distance, bounds});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::DestroyCollider
// Il2CppName: DestroyCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineCollider::DestroyCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "DestroyCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::RespectCameraRadius
// Il2CppName: RespectCameraRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineCollider::*)(::UnityEngine::Vector3, ByRef<::Cinemachine::CameraState>)>(&Cinemachine::CinemachineCollider::RespectCameraRadius)> {
  static const MethodInfo* get() {
    static auto* cameraPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "RespectCameraRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraPos, state});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::CheckForTargetObstructions
// Il2CppName: CheckForTargetObstructions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCollider::*)(::Cinemachine::CameraState)>(&Cinemachine::CinemachineCollider::CheckForTargetObstructions)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "CheckForTargetObstructions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::IsTargetOffscreen
// Il2CppName: IsTargetOffscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCollider::*)(::Cinemachine::CameraState)>(&Cinemachine::CinemachineCollider::IsTargetOffscreen)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "IsTargetOffscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCollider::*)()>(&Cinemachine::CinemachineCollider::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineCollider::*)()>(&Cinemachine::CinemachineCollider::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCollider::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCollider::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineCollider::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCollider*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
