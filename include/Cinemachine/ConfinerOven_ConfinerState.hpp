// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.ConfinerOven
#include "Cinemachine/ConfinerOven.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ShrinkablePolygon
  class ShrinkablePolygon;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ConfinerOven::ConfinerState);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ConfinerOven::ConfinerState*, "Cinemachine", "ConfinerOven/ConfinerState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ConfinerOven/Cinemachine.ConfinerState
  // [TokenAttribute] Offset: FFFFFFFF
  class ConfinerOven::ConfinerState : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> m_Polygons
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>* m_Polygons;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*) == 0x8);
    // public System.Single m_FrustumHeight
    // Size: 0x4
    // Offset: 0x18
    float m_FrustumHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single m_State
    // Size: 0x4
    // Offset: 0x1C
    float m_State;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> m_Polygons
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*& dyn_m_Polygons();
    // Get instance field reference: public System.Single m_FrustumHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_FrustumHeight();
    // Get instance field reference: public System.Single m_State
    [[deprecated("Use field access instead!")]] float& dyn_m_State();
    // public System.Void .ctor()
    // Offset: 0x144DEB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConfinerOven::ConfinerState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ConfinerOven::ConfinerState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConfinerOven::ConfinerState*, creationType>()));
    }
  }; // Cinemachine.ConfinerOven/Cinemachine.ConfinerState
  #pragma pack(pop)
  static check_size<sizeof(ConfinerOven::ConfinerState), 28 + sizeof(float)> __Cinemachine_ConfinerOven_ConfinerStateSizeCheck;
  static_assert(sizeof(ConfinerOven::ConfinerState) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ConfinerOven::ConfinerState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
