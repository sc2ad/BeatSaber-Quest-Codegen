// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: AxisState
  struct AxisState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::AxisState, "Cinemachine", "AxisState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x66
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.AxisState
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 9873E8
  struct AxisState/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Cinemachine::AxisState::SpeedMode
    struct SpeedMode;
    // Nested type: ::Cinemachine::AxisState::IInputAxisProvider
    class IInputAxisProvider;
    // Nested type: ::Cinemachine::AxisState::Recentering
    struct Recentering;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.AxisState/Cinemachine.SpeedMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpeedMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpeedMode
      constexpr SpeedMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.AxisState/Cinemachine.SpeedMode MaxSpeed
      static constexpr const int MaxSpeed = 0;
      // Get static field: static public Cinemachine.AxisState/Cinemachine.SpeedMode MaxSpeed
      static ::Cinemachine::AxisState::SpeedMode _get_MaxSpeed();
      // Set static field: static public Cinemachine.AxisState/Cinemachine.SpeedMode MaxSpeed
      static void _set_MaxSpeed(::Cinemachine::AxisState::SpeedMode value);
      // static field const value: static public Cinemachine.AxisState/Cinemachine.SpeedMode InputValueGain
      static constexpr const int InputValueGain = 1;
      // Get static field: static public Cinemachine.AxisState/Cinemachine.SpeedMode InputValueGain
      static ::Cinemachine::AxisState::SpeedMode _get_InputValueGain();
      // Set static field: static public Cinemachine.AxisState/Cinemachine.SpeedMode InputValueGain
      static void _set_InputValueGain(::Cinemachine::AxisState::SpeedMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.AxisState/Cinemachine.SpeedMode
    #pragma pack(pop)
    static check_size<sizeof(AxisState::SpeedMode), 0 + sizeof(int)> __Cinemachine_AxisState_SpeedModeSizeCheck;
    static_assert(sizeof(AxisState::SpeedMode) == 0x4);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.AxisState/Cinemachine.Recentering
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987A9C
    struct Recentering/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x98DD2C
      // public System.Boolean m_enabled
      // Size: 0x1
      // Offset: 0x0
      bool m_enabled;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: m_enabled and: m_WaitTime
      char __padding0[0x3] = {};
      // [TooltipAttribute] Offset: 0x98DD64
      // public System.Single m_WaitTime
      // Size: 0x4
      // Offset: 0x4
      float m_WaitTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // [TooltipAttribute] Offset: 0x98DD9C
      // public System.Single m_RecenteringTime
      // Size: 0x4
      // Offset: 0x8
      float m_RecenteringTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single mLastAxisInputTime
      // Size: 0x4
      // Offset: 0xC
      float mLastAxisInputTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single mRecenteringVelocity
      // Size: 0x4
      // Offset: 0x10
      float mRecenteringVelocity;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // [FormerlySerializedAsAttribute] Offset: 0x98DDD4
      // private System.Int32 m_LegacyHeadingDefinition
      // Size: 0x4
      // Offset: 0x14
      int m_LegacyHeadingDefinition;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // [FormerlySerializedAsAttribute] Offset: 0x98DE30
      // private System.Int32 m_LegacyVelocityFilterStrength
      // Size: 0x4
      // Offset: 0x18
      int m_LegacyVelocityFilterStrength;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Recentering
      constexpr Recentering(bool m_enabled_ = {}, float m_WaitTime_ = {}, float m_RecenteringTime_ = {}, float mLastAxisInputTime_ = {}, float mRecenteringVelocity_ = {}, int m_LegacyHeadingDefinition_ = {}, int m_LegacyVelocityFilterStrength_ = {}) noexcept : m_enabled{m_enabled_}, m_WaitTime{m_WaitTime_}, m_RecenteringTime{m_RecenteringTime_}, mLastAxisInputTime{mLastAxisInputTime_}, mRecenteringVelocity{mRecenteringVelocity_}, m_LegacyHeadingDefinition{m_LegacyHeadingDefinition_}, m_LegacyVelocityFilterStrength{m_LegacyVelocityFilterStrength_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean m_enabled
      [[deprecated("Use field access instead!")]] bool& dyn_m_enabled();
      // Get instance field reference: public System.Single m_WaitTime
      [[deprecated("Use field access instead!")]] float& dyn_m_WaitTime();
      // Get instance field reference: public System.Single m_RecenteringTime
      [[deprecated("Use field access instead!")]] float& dyn_m_RecenteringTime();
      // Get instance field reference: private System.Single mLastAxisInputTime
      [[deprecated("Use field access instead!")]] float& dyn_mLastAxisInputTime();
      // Get instance field reference: private System.Single mRecenteringVelocity
      [[deprecated("Use field access instead!")]] float& dyn_mRecenteringVelocity();
      // Get instance field reference: private System.Int32 m_LegacyHeadingDefinition
      [[deprecated("Use field access instead!")]] int& dyn_m_LegacyHeadingDefinition();
      // Get instance field reference: private System.Int32 m_LegacyVelocityFilterStrength
      [[deprecated("Use field access instead!")]] int& dyn_m_LegacyVelocityFilterStrength();
      // public System.Void .ctor(System.Boolean enabled, System.Single waitTime, System.Single recenteringTime)
      // Offset: 0xA5CD10
      Recentering(bool enabled, float waitTime, float recenteringTime);
      // public System.Void Validate()
      // Offset: 0xA5CD2C
      void Validate();
      // public System.Void CopyStateFrom(ref Cinemachine.AxisState/Cinemachine.Recentering other)
      // Offset: 0xA5CD34
      void CopyStateFrom(ByRef<::Cinemachine::AxisState::Recentering> other);
      // public System.Void CancelRecentering()
      // Offset: 0xA5CD50
      void CancelRecentering();
      // public System.Void RecenterNow()
      // Offset: 0xA5CD58
      void RecenterNow();
      // public System.Void DoRecentering(ref Cinemachine.AxisState axis, System.Single deltaTime, System.Single recenterTarget)
      // Offset: 0xA5CD60
      void DoRecentering(ByRef<::Cinemachine::AxisState> axis, float deltaTime, float recenterTarget);
      // System.Boolean LegacyUpgrade(ref System.Int32 heading, ref System.Int32 velocityFilter)
      // Offset: 0xA5CD68
      bool LegacyUpgrade(ByRef<int> heading, ByRef<int> velocityFilter);
    }; // Cinemachine.AxisState/Cinemachine.Recentering
    #pragma pack(pop)
    static check_size<sizeof(AxisState::Recentering), 24 + sizeof(int)> __Cinemachine_AxisState_RecenteringSizeCheck;
    static_assert(sizeof(AxisState::Recentering) == 0x1C);
    public:
    // [NoSaveDuringPlayAttribute] Offset: 0x98BFD0
    // [TooltipAttribute] Offset: 0x98BFD0
    // public System.Single Value
    // Size: 0x4
    // Offset: 0x0
    float Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C01C
    // public Cinemachine.AxisState/Cinemachine.SpeedMode m_SpeedMode
    // Size: 0x4
    // Offset: 0x4
    ::Cinemachine::AxisState::SpeedMode m_SpeedMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::SpeedMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98C054
    // public System.Single m_MaxSpeed
    // Size: 0x4
    // Offset: 0x8
    float m_MaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C08C
    // public System.Single m_AccelTime
    // Size: 0x4
    // Offset: 0xC
    float m_AccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C0C4
    // public System.Single m_DecelTime
    // Size: 0x4
    // Offset: 0x10
    float m_DecelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_DecelTime and: m_InputAxisName
    char __padding4[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x98C0FC
    // [TooltipAttribute] Offset: 0x98C0FC
    // public System.String m_InputAxisName
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_InputAxisName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [NoSaveDuringPlayAttribute] Offset: 0x98C15C
    // [TooltipAttribute] Offset: 0x98C15C
    // public System.Single m_InputAxisValue
    // Size: 0x4
    // Offset: 0x20
    float m_InputAxisValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x98C1A8
    // [TooltipAttribute] Offset: 0x98C1A8
    // public System.Boolean m_InvertInput
    // Size: 0x1
    // Offset: 0x24
    bool m_InvertInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_InvertInput and: m_MinValue
    char __padding7[0x3] = {};
    // [TooltipAttribute] Offset: 0x98C208
    // public System.Single m_MinValue
    // Size: 0x4
    // Offset: 0x28
    float m_MinValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C240
    // public System.Single m_MaxValue
    // Size: 0x4
    // Offset: 0x2C
    float m_MaxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C278
    // public System.Boolean m_Wrap
    // Size: 0x1
    // Offset: 0x30
    bool m_Wrap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Wrap and: m_Recentering
    char __padding10[0x3] = {};
    // [TooltipAttribute] Offset: 0x98C2B0
    // public Cinemachine.AxisState/Cinemachine.Recentering m_Recentering
    // Size: 0x1C
    // Offset: 0x34
    ::Cinemachine::AxisState::Recentering m_Recentering;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::Recentering) == 0x1C);
    // private System.Single mCurrentSpeed
    // Size: 0x4
    // Offset: 0x50
    float mCurrentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: mCurrentSpeed and: m_InputAxisProvider
    char __padding12[0x4] = {};
    // private Cinemachine.AxisState/Cinemachine.IInputAxisProvider m_InputAxisProvider
    // Size: 0x8
    // Offset: 0x58
    ::Cinemachine::AxisState::IInputAxisProvider* m_InputAxisProvider;
    // Field size check
    static_assert(sizeof(::Cinemachine::AxisState::IInputAxisProvider*) == 0x8);
    // private System.Int32 m_InputAxisIndex
    // Size: 0x4
    // Offset: 0x60
    int m_InputAxisIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ValueRangeLocked>k__BackingField
    // Size: 0x1
    // Offset: 0x64
    bool ValueRangeLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <HasRecentering>k__BackingField
    // Size: 0x1
    // Offset: 0x65
    bool HasRecentering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: AxisState
    constexpr AxisState(float Value_ = {}, ::Cinemachine::AxisState::SpeedMode m_SpeedMode_ = {}, float m_MaxSpeed_ = {}, float m_AccelTime_ = {}, float m_DecelTime_ = {}, ::StringW m_InputAxisName_ = {}, float m_InputAxisValue_ = {}, bool m_InvertInput_ = {}, float m_MinValue_ = {}, float m_MaxValue_ = {}, bool m_Wrap_ = {}, ::Cinemachine::AxisState::Recentering m_Recentering_ = {}, float mCurrentSpeed_ = {}, ::Cinemachine::AxisState::IInputAxisProvider* m_InputAxisProvider_ = {}, int m_InputAxisIndex_ = {}, bool ValueRangeLocked_ = {}, bool HasRecentering_ = {}) noexcept : Value{Value_}, m_SpeedMode{m_SpeedMode_}, m_MaxSpeed{m_MaxSpeed_}, m_AccelTime{m_AccelTime_}, m_DecelTime{m_DecelTime_}, m_InputAxisName{m_InputAxisName_}, m_InputAxisValue{m_InputAxisValue_}, m_InvertInput{m_InvertInput_}, m_MinValue{m_MinValue_}, m_MaxValue{m_MaxValue_}, m_Wrap{m_Wrap_}, m_Recentering{m_Recentering_}, mCurrentSpeed{mCurrentSpeed_}, m_InputAxisProvider{m_InputAxisProvider_}, m_InputAxisIndex{m_InputAxisIndex_}, ValueRangeLocked{ValueRangeLocked_}, HasRecentering{HasRecentering_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Single Epsilon
    static constexpr const float Epsilon = 0.0001;
    // Get static field: static private System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static private System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get instance field reference: public System.Single Value
    [[deprecated("Use field access instead!")]] float& dyn_Value();
    // Get instance field reference: public Cinemachine.AxisState/Cinemachine.SpeedMode m_SpeedMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::SpeedMode& dyn_m_SpeedMode();
    // Get instance field reference: public System.Single m_MaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxSpeed();
    // Get instance field reference: public System.Single m_AccelTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AccelTime();
    // Get instance field reference: public System.Single m_DecelTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DecelTime();
    // Get instance field reference: public System.String m_InputAxisName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_InputAxisName();
    // Get instance field reference: public System.Single m_InputAxisValue
    [[deprecated("Use field access instead!")]] float& dyn_m_InputAxisValue();
    // Get instance field reference: public System.Boolean m_InvertInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_InvertInput();
    // Get instance field reference: public System.Single m_MinValue
    [[deprecated("Use field access instead!")]] float& dyn_m_MinValue();
    // Get instance field reference: public System.Single m_MaxValue
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxValue();
    // Get instance field reference: public System.Boolean m_Wrap
    [[deprecated("Use field access instead!")]] bool& dyn_m_Wrap();
    // Get instance field reference: public Cinemachine.AxisState/Cinemachine.Recentering m_Recentering
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::Recentering& dyn_m_Recentering();
    // Get instance field reference: private System.Single mCurrentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_mCurrentSpeed();
    // Get instance field reference: private Cinemachine.AxisState/Cinemachine.IInputAxisProvider m_InputAxisProvider
    [[deprecated("Use field access instead!")]] ::Cinemachine::AxisState::IInputAxisProvider*& dyn_m_InputAxisProvider();
    // Get instance field reference: private System.Int32 m_InputAxisIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_InputAxisIndex();
    // Get instance field reference: private System.Boolean <ValueRangeLocked>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ValueRangeLocked$k__BackingField();
    // Get instance field reference: private System.Boolean <HasRecentering>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasRecentering$k__BackingField();
    // public System.Boolean get_HasInputProvider()
    // Offset: 0xA5CC34
    bool get_HasInputProvider();
    // public System.Boolean get_ValueRangeLocked()
    // Offset: 0xA5CC64
    bool get_ValueRangeLocked();
    // public System.Void set_ValueRangeLocked(System.Boolean value)
    // Offset: 0xA5CC6C
    void set_ValueRangeLocked(bool value);
    // public System.Boolean get_HasRecentering()
    // Offset: 0xA5CC78
    bool get_HasRecentering();
    // public System.Void set_HasRecentering(System.Boolean value)
    // Offset: 0xA5CC80
    void set_HasRecentering(bool value);
    // public System.Void .ctor(System.Single minValue, System.Single maxValue, System.Boolean wrap, System.Boolean rangeLocked, System.Single maxSpeed, System.Single accelTime, System.Single decelTime, System.String name, System.Boolean invert)
    // Offset: 0xA5CBA0
    AxisState(float minValue, float maxValue, bool wrap, bool rangeLocked, float maxSpeed, float accelTime, float decelTime, ::StringW name, bool invert);
    // public System.Void Validate()
    // Offset: 0xA5CC14
    void Validate();
    // public System.Void Reset()
    // Offset: 0xA5CC1C
    void Reset();
    // public System.Void SetInputAxisProvider(System.Int32 axis, Cinemachine.AxisState/Cinemachine.IInputAxisProvider provider)
    // Offset: 0xA5CC28
    void SetInputAxisProvider(int axis, ::Cinemachine::AxisState::IInputAxisProvider* provider);
    // public System.Boolean Update(System.Single deltaTime)
    // Offset: 0xA5CC44
    bool Update(float deltaTime);
    // private System.Single ClampValue(System.Single v)
    // Offset: 0xA5CC4C
    float ClampValue(float v);
    // private System.Boolean MaxSpeedUpdate(System.Single input, System.Single deltaTime)
    // Offset: 0xA5CC54
    bool MaxSpeedUpdate(float input, float deltaTime);
    // private System.Single GetMaxSpeed()
    // Offset: 0xA5CC5C
    float GetMaxSpeed();
  }; // Cinemachine.AxisState
  #pragma pack(pop)
  static check_size<sizeof(AxisState), 101 + sizeof(bool)> __Cinemachine_AxisStateSizeCheck;
  static_assert(sizeof(AxisState) == 0x66);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::AxisState::Recentering, "Cinemachine", "AxisState/Recentering");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::AxisState::SpeedMode, "Cinemachine", "AxisState/SpeedMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::AxisState::get_HasInputProvider
// Il2CppName: get_HasInputProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::get_HasInputProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "get_HasInputProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::get_ValueRangeLocked
// Il2CppName: get_ValueRangeLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::get_ValueRangeLocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "get_ValueRangeLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::set_ValueRangeLocked
// Il2CppName: set_ValueRangeLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisState::*)(bool)>(&Cinemachine::AxisState::set_ValueRangeLocked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "set_ValueRangeLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::get_HasRecentering
// Il2CppName: get_HasRecentering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::get_HasRecentering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "get_HasRecentering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::set_HasRecentering
// Il2CppName: set_HasRecentering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisState::*)(bool)>(&Cinemachine::AxisState::set_HasRecentering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "set_HasRecentering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::AxisState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::AxisState::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::SetInputAxisProvider
// Il2CppName: SetInputAxisProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::AxisState::*)(int, ::Cinemachine::AxisState::IInputAxisProvider*)>(&Cinemachine::AxisState::SetInputAxisProvider)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("Cinemachine", "AxisState/IInputAxisProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "SetInputAxisProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, provider});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::AxisState::*)(float)>(&Cinemachine::AxisState::Update)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::ClampValue
// Il2CppName: ClampValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::AxisState::*)(float)>(&Cinemachine::AxisState::ClampValue)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "ClampValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::MaxSpeedUpdate
// Il2CppName: MaxSpeedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::AxisState::*)(float, float)>(&Cinemachine::AxisState::MaxSpeedUpdate)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "MaxSpeedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::AxisState::GetMaxSpeed
// Il2CppName: GetMaxSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::AxisState::*)()>(&Cinemachine::AxisState::GetMaxSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::AxisState), "GetMaxSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
