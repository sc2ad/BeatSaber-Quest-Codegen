// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.TargetPositionCache
#include "Cinemachine/TargetPositionCache.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: Item because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::TargetPositionCache::CacheCurve);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::CacheCurve*, "Cinemachine", "TargetPositionCache/CacheCurve");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.TargetPositionCache/Cinemachine.CacheCurve
  // [TokenAttribute] Offset: FFFFFFFF
  class TargetPositionCache::CacheCurve : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::TargetPositionCache::CacheCurve::Item
    struct Item;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item
    // [TokenAttribute] Offset: FFFFFFFF
    struct Item/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 Pos
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 Pos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion Rot
      // Size: 0x10
      // Offset: 0xC
      ::UnityEngine::Quaternion Rot;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      public:
      // Creating value type constructor for type: Item
      constexpr Item(::UnityEngine::Vector3 Pos_ = {}, ::UnityEngine::Quaternion Rot_ = {}) noexcept : Pos{Pos_}, Rot{Rot_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 Pos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Pos();
      // Get instance field reference: public UnityEngine.Quaternion Rot
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_Rot();
      // static public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item get_Empty()
      // Offset: 0x1B9C698
      static ::Cinemachine::TargetPositionCache::CacheCurve::Item get_Empty();
      // static public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item Lerp(Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item a, Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item b, System.Single t)
      // Offset: 0x1B9C53C
      static ::Cinemachine::TargetPositionCache::CacheCurve::Item Lerp(::Cinemachine::TargetPositionCache::CacheCurve::Item a, ::Cinemachine::TargetPositionCache::CacheCurve::Item b, float t);
    }; // Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item
    #pragma pack(pop)
    static check_size<sizeof(TargetPositionCache::CacheCurve::Item), 12 + sizeof(::UnityEngine::Quaternion)> __Cinemachine_TargetPositionCache_CacheCurve_ItemSizeCheck;
    static_assert(sizeof(TargetPositionCache::CacheCurve::Item) == 0x1C);
    public:
    // public System.Single StartTime
    // Size: 0x4
    // Offset: 0x10
    float StartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single StepSize
    // Size: 0x4
    // Offset: 0x14
    float StepSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item> m_Cache
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>* m_Cache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>*) == 0x8);
    public:
    // Get instance field reference: public System.Single StartTime
    [[deprecated("Use field access instead!")]] float& dyn_StartTime();
    // Get instance field reference: public System.Single StepSize
    [[deprecated("Use field access instead!")]] float& dyn_StepSize();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item> m_Cache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>*& dyn_m_Cache();
    // public System.Int32 get_Count()
    // Offset: 0x1454B74
    int get_Count();
    // public System.Void .ctor(System.Single startTime, System.Single endTime, System.Single stepSize)
    // Offset: 0x1454BC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TargetPositionCache::CacheCurve* New_ctor(float startTime, float endTime, float stepSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TargetPositionCache::CacheCurve*, creationType>(startTime, endTime, stepSize)));
    }
    // public System.Void Add(Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item item)
    // Offset: 0x1454CA8
    void Add(::Cinemachine::TargetPositionCache::CacheCurve::Item item);
    // public System.Void AddUntil(Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item item, System.Single time, System.Boolean isCut)
    // Offset: 0x1454D3C
    void AddUntil(::Cinemachine::TargetPositionCache::CacheCurve::Item item, float time, bool isCut);
    // public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item Evaluate(System.Single time)
    // Offset: 0x1454994
    ::Cinemachine::TargetPositionCache::CacheCurve::Item Evaluate(float time);
  }; // Cinemachine.TargetPositionCache/Cinemachine.CacheCurve
  #pragma pack(pop)
  static check_size<sizeof(TargetPositionCache::CacheCurve), 24 + sizeof(::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheCurve::Item>*)> __Cinemachine_TargetPositionCache_CacheCurveSizeCheck;
  static_assert(sizeof(TargetPositionCache::CacheCurve) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::CacheCurve::Item, "Cinemachine", "TargetPositionCache/CacheCurve/Item");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheCurve::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::TargetPositionCache::CacheCurve::*)()>(&Cinemachine::TargetPositionCache::CacheCurve::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheCurve*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheCurve::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::TargetPositionCache::CacheCurve::*)(::Cinemachine::TargetPositionCache::CacheCurve::Item)>(&Cinemachine::TargetPositionCache::CacheCurve::Add)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Cinemachine", "TargetPositionCache/CacheCurve/Item")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheCurve*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheCurve::AddUntil
// Il2CppName: AddUntil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::TargetPositionCache::CacheCurve::*)(::Cinemachine::TargetPositionCache::CacheCurve::Item, float, bool)>(&Cinemachine::TargetPositionCache::CacheCurve::AddUntil)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Cinemachine", "TargetPositionCache/CacheCurve/Item")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isCut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheCurve*), "AddUntil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, time, isCut});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheCurve::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::TargetPositionCache::CacheCurve::Item (Cinemachine::TargetPositionCache::CacheCurve::*)(float)>(&Cinemachine::TargetPositionCache::CacheCurve::Evaluate)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheCurve*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
