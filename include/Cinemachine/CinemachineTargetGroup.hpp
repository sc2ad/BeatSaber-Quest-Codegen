// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Cinemachine.ICinemachineTargetGroup
#include "Cinemachine/ICinemachineTargetGroup.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: BoundingSphere
  struct BoundingSphere;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: Target because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineTargetGroup
  class CinemachineTargetGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineTargetGroup);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTargetGroup*, "Cinemachine", "CinemachineTargetGroup");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineTargetGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986E34
  // [AddComponentMenu] Offset: 986E34
  // [SaveDuringPlayAttribute] Offset: 986E34
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 986E34
  class CinemachineTargetGroup : public ::UnityEngine::MonoBehaviour/*, public ::Cinemachine::ICinemachineTargetGroup*/ {
    public:
    // Nested type: ::Cinemachine::CinemachineTargetGroup::Target
    struct Target;
    // Nested type: ::Cinemachine::CinemachineTargetGroup::PositionMode
    struct PositionMode;
    // Nested type: ::Cinemachine::CinemachineTargetGroup::RotationMode
    struct RotationMode;
    // Nested type: ::Cinemachine::CinemachineTargetGroup::UpdateMethod
    struct UpdateMethod;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineTargetGroup/Cinemachine.Target
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 9879C8
    struct Target/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x98DA48
      // public UnityEngine.Transform target
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Transform* target;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // [TooltipAttribute] Offset: 0x98DA80
      // public System.Single weight
      // Size: 0x4
      // Offset: 0x8
      float weight;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // [TooltipAttribute] Offset: 0x98DAB8
      // public System.Single radius
      // Size: 0x4
      // Offset: 0xC
      float radius;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Target
      constexpr Target(::UnityEngine::Transform* target_ = {}, float weight_ = {}, float radius_ = {}) noexcept : target{target_}, weight{weight_}, radius{radius_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Transform target
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
      // Get instance field reference: public System.Single weight
      [[deprecated("Use field access instead!")]] float& dyn_weight();
      // Get instance field reference: public System.Single radius
      [[deprecated("Use field access instead!")]] float& dyn_radius();
    }; // Cinemachine.CinemachineTargetGroup/Cinemachine.Target
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTargetGroup::Target), 12 + sizeof(float)> __Cinemachine_CinemachineTargetGroup_TargetSizeCheck;
    static_assert(sizeof(CinemachineTargetGroup::Target) == 0x10);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 9879DC
    struct PositionMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PositionMode
      constexpr PositionMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupCenter
      static constexpr const int GroupCenter = 0;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupCenter
      static ::Cinemachine::CinemachineTargetGroup::PositionMode _get_GroupCenter();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupCenter
      static void _set_GroupCenter(::Cinemachine::CinemachineTargetGroup::PositionMode value);
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupAverage
      static constexpr const int GroupAverage = 1;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupAverage
      static ::Cinemachine::CinemachineTargetGroup::PositionMode _get_GroupAverage();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode GroupAverage
      static void _set_GroupAverage(::Cinemachine::CinemachineTargetGroup::PositionMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTargetGroup::PositionMode), 0 + sizeof(int)> __Cinemachine_CinemachineTargetGroup_PositionModeSizeCheck;
    static_assert(sizeof(CinemachineTargetGroup::PositionMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 9879F0
    struct RotationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationMode
      constexpr RotationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode Manual
      static constexpr const int Manual = 0;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode Manual
      static ::Cinemachine::CinemachineTargetGroup::RotationMode _get_Manual();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode Manual
      static void _set_Manual(::Cinemachine::CinemachineTargetGroup::RotationMode value);
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode GroupAverage
      static constexpr const int GroupAverage = 1;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode GroupAverage
      static ::Cinemachine::CinemachineTargetGroup::RotationMode _get_GroupAverage();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode GroupAverage
      static void _set_GroupAverage(::Cinemachine::CinemachineTargetGroup::RotationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTargetGroup::RotationMode), 0 + sizeof(int)> __Cinemachine_CinemachineTargetGroup_RotationModeSizeCheck;
    static_assert(sizeof(CinemachineTargetGroup::RotationMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateMethod/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateMethod
      constexpr UpdateMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod Update
      static constexpr const int Update = 0;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod Update
      static ::Cinemachine::CinemachineTargetGroup::UpdateMethod _get_Update();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod Update
      static void _set_Update(::Cinemachine::CinemachineTargetGroup::UpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod FixedUpdate
      static constexpr const int FixedUpdate = 1;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod FixedUpdate
      static ::Cinemachine::CinemachineTargetGroup::UpdateMethod _get_FixedUpdate();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod FixedUpdate
      static void _set_FixedUpdate(::Cinemachine::CinemachineTargetGroup::UpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod LateUpdate
      static constexpr const int LateUpdate = 2;
      // Get static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod LateUpdate
      static ::Cinemachine::CinemachineTargetGroup::UpdateMethod _get_LateUpdate();
      // Set static field: static public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod LateUpdate
      static void _set_LateUpdate(::Cinemachine::CinemachineTargetGroup::UpdateMethod value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTargetGroup::UpdateMethod), 0 + sizeof(int)> __Cinemachine_CinemachineTargetGroup_UpdateMethodSizeCheck;
    static_assert(sizeof(CinemachineTargetGroup::UpdateMethod) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x989DA0
    // public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode m_PositionMode
    // Size: 0x4
    // Offset: 0x18
    ::Cinemachine::CinemachineTargetGroup::PositionMode m_PositionMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTargetGroup::PositionMode) == 0x4);
    // [TooltipAttribute] Offset: 0x989DD8
    // public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode m_RotationMode
    // Size: 0x4
    // Offset: 0x1C
    ::Cinemachine::CinemachineTargetGroup::RotationMode m_RotationMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTargetGroup::RotationMode) == 0x4);
    // [TooltipAttribute] Offset: 0x989E10
    // public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod m_UpdateMethod
    // Size: 0x4
    // Offset: 0x20
    ::Cinemachine::CinemachineTargetGroup::UpdateMethod m_UpdateMethod;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTargetGroup::UpdateMethod) == 0x4);
    // Padding between fields: m_UpdateMethod and: m_Targets
    char __padding2[0x4] = {};
    // [NoSaveDuringPlayAttribute] Offset: 0x989E48
    // [TooltipAttribute] Offset: 0x989E48
    // public Cinemachine.CinemachineTargetGroup/Cinemachine.Target[] m_Targets
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Cinemachine::CinemachineTargetGroup::Target> m_Targets;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineTargetGroup::Target>) == 0x8);
    // private UnityEngine.Bounds <BoundingBox>k__BackingField
    // Size: 0x18
    // Offset: 0x30
    ::UnityEngine::Bounds BoundingBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private System.Single mMaxWeight
    // Size: 0x4
    // Offset: 0x48
    float mMaxWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 mAveragePos
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 mAveragePos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating interface conversion operator: operator ::Cinemachine::ICinemachineTargetGroup
    operator ::Cinemachine::ICinemachineTargetGroup() noexcept {
      return *reinterpret_cast<::Cinemachine::ICinemachineTargetGroup*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Cinemachine.CinemachineTargetGroup/Cinemachine.PositionMode m_PositionMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::PositionMode& dyn_m_PositionMode();
    // Get instance field reference: public Cinemachine.CinemachineTargetGroup/Cinemachine.RotationMode m_RotationMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::RotationMode& dyn_m_RotationMode();
    // Get instance field reference: public Cinemachine.CinemachineTargetGroup/Cinemachine.UpdateMethod m_UpdateMethod
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTargetGroup::UpdateMethod& dyn_m_UpdateMethod();
    // Get instance field reference: public Cinemachine.CinemachineTargetGroup/Cinemachine.Target[] m_Targets
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineTargetGroup::Target>& dyn_m_Targets();
    // Get instance field reference: private UnityEngine.Bounds <BoundingBox>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_$BoundingBox$k__BackingField();
    // Get instance field reference: private System.Single mMaxWeight
    [[deprecated("Use field access instead!")]] float& dyn_mMaxWeight();
    // Get instance field reference: private UnityEngine.Vector3 mAveragePos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mAveragePos();
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x1440F30
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Bounds get_BoundingBox()
    // Offset: 0x1440F38
    ::UnityEngine::Bounds get_BoundingBox();
    // private System.Void set_BoundingBox(UnityEngine.Bounds value)
    // Offset: 0x1440F4C
    void set_BoundingBox(::UnityEngine::Bounds value);
    // public UnityEngine.BoundingSphere get_Sphere()
    // Offset: 0x1440F60
    ::UnityEngine::BoundingSphere get_Sphere();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x14410B0
    bool get_IsEmpty();
    // public System.Void .ctor()
    // Offset: 0x1443414
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineTargetGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTargetGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineTargetGroup*, creationType>()));
    }
    // public System.Void AddMember(UnityEngine.Transform t, System.Single weight, System.Single radius)
    // Offset: 0x14411BC
    void AddMember(::UnityEngine::Transform* t, float weight, float radius);
    // public System.Void RemoveMember(UnityEngine.Transform t)
    // Offset: 0x14412DC
    void RemoveMember(::UnityEngine::Transform* t);
    // public System.Int32 FindMember(UnityEngine.Transform t)
    // Offset: 0x14413BC
    int FindMember(::UnityEngine::Transform* t);
    // public UnityEngine.BoundingSphere GetWeightedBoundsForMember(System.Int32 index)
    // Offset: 0x144149C
    ::UnityEngine::BoundingSphere GetWeightedBoundsForMember(int index);
    // public UnityEngine.Bounds GetViewSpaceBoundingBox(UnityEngine.Matrix4x4 observer)
    // Offset: 0x14416BC
    ::UnityEngine::Bounds GetViewSpaceBoundingBox(::UnityEngine::Matrix4x4 observer);
    // static private UnityEngine.BoundingSphere WeightedMemberBounds(Cinemachine.CinemachineTargetGroup/Cinemachine.Target t, UnityEngine.Vector3 avgPos, System.Single maxWeight)
    // Offset: 0x1441500
    static ::UnityEngine::BoundingSphere WeightedMemberBounds(::Cinemachine::CinemachineTargetGroup::Target t, ::UnityEngine::Vector3 avgPos, float maxWeight);
    // public System.Void DoUpdate()
    // Offset: 0x1441EA4
    void DoUpdate();
    // private UnityEngine.Vector3 CalculateAveragePosition(out System.Single maxWeight)
    // Offset: 0x1441FAC
    ::UnityEngine::Vector3 CalculateAveragePosition(ByRef<float> maxWeight);
    // private UnityEngine.Quaternion CalculateAverageOrientation()
    // Offset: 0x14424E4
    ::UnityEngine::Quaternion CalculateAverageOrientation();
    // private UnityEngine.Bounds CalculateBoundingBox(UnityEngine.Vector3 avgPos, System.Single maxWeight)
    // Offset: 0x1442298
    ::UnityEngine::Bounds CalculateBoundingBox(::UnityEngine::Vector3 avgPos, float maxWeight);
    // private System.Void OnValidate()
    // Offset: 0x1442D88
    void OnValidate();
    // private System.Void FixedUpdate()
    // Offset: 0x1442EA4
    void FixedUpdate();
    // private System.Void Update()
    // Offset: 0x1442EB8
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x1442EF8
    void LateUpdate();
    // public System.Void GetViewSpaceAngularBounds(UnityEngine.Matrix4x4 observer, out UnityEngine.Vector2 minAngles, out UnityEngine.Vector2 maxAngles, out UnityEngine.Vector2 zRange)
    // Offset: 0x1442F0C
    void GetViewSpaceAngularBounds(::UnityEngine::Matrix4x4 observer, ByRef<::UnityEngine::Vector2> minAngles, ByRef<::UnityEngine::Vector2> maxAngles, ByRef<::UnityEngine::Vector2> zRange);
  }; // Cinemachine.CinemachineTargetGroup
  #pragma pack(pop)
  static check_size<sizeof(CinemachineTargetGroup), 76 + sizeof(::UnityEngine::Vector3)> __Cinemachine_CinemachineTargetGroupSizeCheck;
  static_assert(sizeof(CinemachineTargetGroup) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTargetGroup::UpdateMethod, "Cinemachine", "CinemachineTargetGroup/UpdateMethod");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTargetGroup::RotationMode, "Cinemachine", "CinemachineTargetGroup/RotationMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTargetGroup::PositionMode, "Cinemachine", "CinemachineTargetGroup/PositionMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTargetGroup::Target, "Cinemachine", "CinemachineTargetGroup/Target");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::get_BoundingBox
// Il2CppName: get_BoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::get_BoundingBox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "get_BoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::set_BoundingBox
// Il2CppName: set_BoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Bounds)>(&Cinemachine::CinemachineTargetGroup::set_BoundingBox)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "set_BoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::get_Sphere
// Il2CppName: get_Sphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoundingSphere (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::get_Sphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "get_Sphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::AddMember
// Il2CppName: AddMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Transform*, float, float)>(&Cinemachine::CinemachineTargetGroup::AddMember)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "AddMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, weight, radius});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::RemoveMember
// Il2CppName: RemoveMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineTargetGroup::RemoveMember)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "RemoveMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::FindMember
// Il2CppName: FindMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineTargetGroup::FindMember)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "FindMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::GetWeightedBoundsForMember
// Il2CppName: GetWeightedBoundsForMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoundingSphere (Cinemachine::CinemachineTargetGroup::*)(int)>(&Cinemachine::CinemachineTargetGroup::GetWeightedBoundsForMember)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "GetWeightedBoundsForMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::GetViewSpaceBoundingBox
// Il2CppName: GetViewSpaceBoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Matrix4x4)>(&Cinemachine::CinemachineTargetGroup::GetViewSpaceBoundingBox)> {
  static const MethodInfo* get() {
    static auto* observer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "GetViewSpaceBoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{observer});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::WeightedMemberBounds
// Il2CppName: WeightedMemberBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::BoundingSphere (*)(::Cinemachine::CinemachineTargetGroup::Target, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineTargetGroup::WeightedMemberBounds)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineTargetGroup/Target")->byval_arg;
    static auto* avgPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "WeightedMemberBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, avgPos, maxWeight});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::DoUpdate
// Il2CppName: DoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::DoUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "DoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::CalculateAveragePosition
// Il2CppName: CalculateAveragePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTargetGroup::*)(ByRef<float>)>(&Cinemachine::CinemachineTargetGroup::CalculateAveragePosition)> {
  static const MethodInfo* get() {
    static auto* maxWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "CalculateAveragePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxWeight});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::CalculateAverageOrientation
// Il2CppName: CalculateAverageOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::CalculateAverageOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "CalculateAverageOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::CalculateBoundingBox
// Il2CppName: CalculateBoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineTargetGroup::CalculateBoundingBox)> {
  static const MethodInfo* get() {
    static auto* avgPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* maxWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "CalculateBoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avgPos, maxWeight});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)()>(&Cinemachine::CinemachineTargetGroup::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTargetGroup::GetViewSpaceAngularBounds
// Il2CppName: GetViewSpaceAngularBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTargetGroup::*)(::UnityEngine::Matrix4x4, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&Cinemachine::CinemachineTargetGroup::GetViewSpaceAngularBounds)> {
  static const MethodInfo* get() {
    static auto* observer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* minAngles = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* maxAngles = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* zRange = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTargetGroup*), "GetViewSpaceAngularBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{observer, minAngles, maxAngles, zRange});
  }
};
