// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
  // Forward declaring type: CameraState
  struct CameraState;
  // Forward declaring type: ICinemachineCamera
  class ICinemachineCamera;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: Cinemachine3rdPersonAim
  class Cinemachine3rdPersonAim;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::Cinemachine3rdPersonAim);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::Cinemachine3rdPersonAim*, "Cinemachine", "Cinemachine3rdPersonAim");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.Cinemachine3rdPersonAim
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 9863E4
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class Cinemachine3rdPersonAim : public ::Cinemachine::CinemachineExtension {
    public:
    public:
    // [HeaderAttribute] Offset: 0x987E90
    // [TooltipAttribute] Offset: 0x987E90
    // public UnityEngine.LayerMask AimCollisionFilter
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LayerMask AimCollisionFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: AimCollisionFilter and: IgnoreTag
    char __padding0[0x4] = {};
    // [TagFieldAttribute] Offset: 0x987EF0
    // [TooltipAttribute] Offset: 0x987EF0
    // public System.String IgnoreTag
    // Size: 0x8
    // Offset: 0x30
    ::StringW IgnoreTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0x987F3C
    // public System.Single AimDistance
    // Size: 0x4
    // Offset: 0x38
    float AimDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: AimDistance and: AimTargetReticle
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0x987F74
    // public UnityEngine.RectTransform AimTargetReticle
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::RectTransform* AimTargetReticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.LayerMask AimCollisionFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_AimCollisionFilter();
    // Get instance field reference: public System.String IgnoreTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_IgnoreTag();
    // Get instance field reference: public System.Single AimDistance
    [[deprecated("Use field access instead!")]] float& dyn_AimDistance();
    // Get instance field reference: public UnityEngine.RectTransform AimTargetReticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_AimTargetReticle();
    // private System.Void OnValidate()
    // Offset: 0x13FFE40
    void OnValidate();
    // private System.Void Reset()
    // Offset: 0x13FFEC0
    void Reset();
    // private System.Void DrawReticle(Cinemachine.CinemachineBrain brain)
    // Offset: 0x1400054
    void DrawReticle(::Cinemachine::CinemachineBrain* brain);
    // private UnityEngine.Vector3 GetLookAtPoint(ref Cinemachine.CameraState state)
    // Offset: 0x1400728
    ::UnityEngine::Vector3 GetLookAtPoint(ByRef<::Cinemachine::CameraState> state);
    // public System.Void .ctor()
    // Offset: 0x1400AA4
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cinemachine3rdPersonAim* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::Cinemachine3rdPersonAim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cinemachine3rdPersonAim*, creationType>()));
    }
    // public override System.Boolean OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x13FFF34
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Boolean CinemachineExtension::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    bool OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x1400920
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
  }; // Cinemachine.Cinemachine3rdPersonAim
  #pragma pack(pop)
  static check_size<sizeof(Cinemachine3rdPersonAim), 64 + sizeof(::UnityEngine::RectTransform*)> __Cinemachine_Cinemachine3rdPersonAimSizeCheck;
  static_assert(sizeof(Cinemachine3rdPersonAim) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonAim::*)()>(&Cinemachine::Cinemachine3rdPersonAim::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonAim::*)()>(&Cinemachine::Cinemachine3rdPersonAim::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::DrawReticle
// Il2CppName: DrawReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonAim::*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::Cinemachine3rdPersonAim::DrawReticle)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "DrawReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::GetLookAtPoint
// Il2CppName: GetLookAtPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::Cinemachine3rdPersonAim::*)(ByRef<::Cinemachine::CameraState>)>(&Cinemachine::Cinemachine3rdPersonAim::GetLookAtPoint)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "GetLookAtPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::Cinemachine3rdPersonAim::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::Cinemachine3rdPersonAim::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::Cinemachine3rdPersonAim::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::Cinemachine3rdPersonAim::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::Cinemachine3rdPersonAim::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::Cinemachine3rdPersonAim*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
