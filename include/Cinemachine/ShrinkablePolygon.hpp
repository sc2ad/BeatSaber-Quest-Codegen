// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: ShrinkablePoint2 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ShrinkablePolygon
  class ShrinkablePolygon;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::ShrinkablePolygon);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ShrinkablePolygon*, "Cinemachine", "ShrinkablePolygon");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.ShrinkablePolygon
  // [TokenAttribute] Offset: FFFFFFFF
  class ShrinkablePolygon : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::ShrinkablePolygon::ShrinkablePoint2
    struct ShrinkablePoint2;
    // Nested type: ::Cinemachine::ShrinkablePolygon::AspectData
    struct AspectData;
    // Nested type: ::Cinemachine::ShrinkablePolygon::$$c
    class $$c;
    // Size: 0x19
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShrinkablePoint2/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector2 m_Position
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Vector2 m_Position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // public UnityEngine.Vector2 m_OriginalPosition
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Vector2 m_OriginalPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // public UnityEngine.Vector2 m_ShrinkDirection
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Vector2 m_ShrinkDirection;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // public System.Boolean m_CantIntersect
      // Size: 0x1
      // Offset: 0x18
      bool m_CantIntersect;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: ShrinkablePoint2
      constexpr ShrinkablePoint2(::UnityEngine::Vector2 m_Position_ = {}, ::UnityEngine::Vector2 m_OriginalPosition_ = {}, ::UnityEngine::Vector2 m_ShrinkDirection_ = {}, bool m_CantIntersect_ = {}) noexcept : m_Position{m_Position_}, m_OriginalPosition{m_OriginalPosition_}, m_ShrinkDirection{m_ShrinkDirection_}, m_CantIntersect{m_CantIntersect_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly UnityEngine.Vector2 m_Vector2NaN
      static ::UnityEngine::Vector2 _get_m_Vector2NaN();
      // Set static field: static public readonly UnityEngine.Vector2 m_Vector2NaN
      static void _set_m_Vector2NaN(::UnityEngine::Vector2 value);
      // Get instance field reference: public UnityEngine.Vector2 m_Position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Position();
      // Get instance field reference: public UnityEngine.Vector2 m_OriginalPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_OriginalPosition();
      // Get instance field reference: public UnityEngine.Vector2 m_ShrinkDirection
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ShrinkDirection();
      // Get instance field reference: public System.Boolean m_CantIntersect
      [[deprecated("Use field access instead!")]] bool& dyn_m_CantIntersect();
      // static private System.Void .cctor()
      // Offset: 0x1453CA8
      static void _cctor();
    }; // Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2
    #pragma pack(pop)
    static check_size<sizeof(ShrinkablePolygon::ShrinkablePoint2), 24 + sizeof(bool)> __Cinemachine_ShrinkablePolygon_ShrinkablePoint2SizeCheck;
    static_assert(sizeof(ShrinkablePolygon::ShrinkablePoint2) == 0x19);
    public:
    // public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> m_Points
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* m_Points;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*) == 0x8);
    // public System.Single m_FrustumHeight
    // Size: 0x4
    // Offset: 0x18
    float m_FrustumHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 m_State
    // Size: 0x4
    // Offset: 0x1C
    int m_State;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.List`1<UnityEngine.Vector2> m_IntersectionPoints
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* m_IntersectionPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    // public System.Single m_Area
    // Size: 0x4
    // Offset: 0x28
    float m_Area;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Vector2> s_edgeNormalsCache
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* _get_s_edgeNormalsCache();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Vector2> s_edgeNormalsCache
    static void _set_s_edgeNormalsCache(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> s_extendedPointsCache
    static ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* _get_s_extendedPointsCache();
    // Set static field: static private readonly System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> s_extendedPointsCache
    static void _set_s_extendedPointsCache(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* value);
    // Get static field: static private readonly System.Int32 FloatToIntScaler
    static int _get_FloatToIntScaler();
    // Set static field: static private readonly System.Int32 FloatToIntScaler
    static void _set_FloatToIntScaler(int value);
    // static field const value: static System.Int32 k_NonLerpableStateChangePenalty
    static constexpr const int k_NonLerpableStateChangePenalty = 10;
    // Get static field: static System.Int32 k_NonLerpableStateChangePenalty
    static int _get_k_NonLerpableStateChangePenalty();
    // Set static field: static System.Int32 k_NonLerpableStateChangePenalty
    static void _set_k_NonLerpableStateChangePenalty(int value);
    // Get static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> s_rollPointsCache
    static ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* _get_s_rollPointsCache();
    // Set static field: static private System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> s_rollPointsCache
    static void _set_s_rollPointsCache(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* value);
    // Get instance field reference: public System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> m_Points
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*& dyn_m_Points();
    // Get instance field reference: public System.Single m_FrustumHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_FrustumHeight();
    // Get instance field reference: public System.Int32 m_State
    [[deprecated("Use field access instead!")]] int& dyn_m_State();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector2> m_IntersectionPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_m_IntersectionPoints();
    // Get instance field reference: public System.Single m_Area
    [[deprecated("Use field access instead!")]] float& dyn_m_Area();
    // private System.Boolean get_ClockwiseOrientation()
    // Offset: 0x144F748
    bool get_ClockwiseOrientation();
    // public System.Void .ctor()
    // Offset: 0x144DEB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShrinkablePolygon* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShrinkablePolygon*, creationType>()));
    }
    // public System.Void .ctor(System.Collections.Generic.List`1<UnityEngine.Vector2> points)
    // Offset: 0x144D52C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShrinkablePolygon* New_ctor(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* points) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::ShrinkablePolygon::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShrinkablePolygon*, creationType>(points)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1453B48
    static void _cctor();
    // public Cinemachine.ShrinkablePolygon DeepCopy()
    // Offset: 0x144C6C8
    ::Cinemachine::ShrinkablePolygon* DeepCopy();
    // public System.Single ComputeSignedArea()
    // Offset: 0x144F758
    float ComputeSignedArea();
    // public System.Boolean DoesSelfIntersect()
    // Offset: 0x144D02C
    bool DoesSelfIntersect();
    // private System.Void ComputeNormals(System.Boolean fixBigCornerAngles)
    // Offset: 0x144F888
    void ComputeNormals(bool fixBigCornerAngles);
    // public System.Void ComputeAspectBasedShrinkDirections(in Cinemachine.ShrinkablePolygon/Cinemachine.AspectData aspectData)
    // Offset: 0x144C4A0
    void ComputeAspectBasedShrinkDirections(ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData);
    // static public System.Void ConvertToPath(in System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> shrinkablePolygons, in System.Single aspectRatio, in System.Single frustumHeight, in System.Single maxCachedFrustumHeight, out System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> path, out System.Boolean hasIntersections)
    // Offset: 0x1450ABC
    static void ConvertToPath(ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> shrinkablePolygons, ByRef<float> aspectRatio, ByRef<float> frustumHeight, ByRef<float> maxCachedFrustumHeight, ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> path, ByRef<bool> hasIntersections);
    // static public System.Boolean IsInside(in System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> polygons, in UnityEngine.Vector2 p)
    // Offset: 0x14520EC
    static bool IsInside(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*> polygons, ByRef<::UnityEngine::Vector2> p);
    // static private UnityEngine.Vector2 FindMidPoint(in UnityEngine.Vector2 A, in UnityEngine.Vector2 B, in UnityEngine.Vector2 C, in UnityEngine.Vector2 D1, in UnityEngine.Vector2 D2)
    // Offset: 0x1452548
    static ::UnityEngine::Vector2 FindMidPoint(ByRef<::UnityEngine::Vector2> A, ByRef<::UnityEngine::Vector2> B, ByRef<::UnityEngine::Vector2> C, ByRef<::UnityEngine::Vector2> D1, ByRef<::UnityEngine::Vector2> D2);
    // private UnityEngine.Vector2 CalculateShrinkDirection(in UnityEngine.Vector2 normal, in UnityEngine.Vector2 prevPoint, in UnityEngine.Vector2 thisPoint, in UnityEngine.Vector2 nextPoint, in Cinemachine.ShrinkablePolygon/Cinemachine.AspectData aspectData)
    // Offset: 0x14502E0
    ::UnityEngine::Vector2 CalculateShrinkDirection(ByRef<::UnityEngine::Vector2> normal, ByRef<::UnityEngine::Vector2> prevPoint, ByRef<::UnityEngine::Vector2> thisPoint, ByRef<::UnityEngine::Vector2> nextPoint, ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData);
    // public System.Boolean IsShrinkable()
    // Offset: 0x144D434
    bool IsShrinkable();
    // public System.Boolean Shrink(System.Single stepSize, System.Boolean shrinkToPoint, in System.Single aspectRatio)
    // Offset: 0x144C8B8
    bool Shrink(float stepSize, bool shrinkToPoint, ByRef<float> aspectRatio);
    // private UnityEngine.Vector2 CenterOfMass()
    // Offset: 0x1452A4C
    ::UnityEngine::Vector2 CenterOfMass();
    // private System.Single SqrDistanceTo(UnityEngine.Vector2 p)
    // Offset: 0x1452B8C
    float SqrDistanceTo(::UnityEngine::Vector2 p);
    // private UnityEngine.Vector2 ClosestPolygonPoint(UnityEngine.Vector2 p)
    // Offset: 0x1451F60
    ::UnityEngine::Vector2 ClosestPolygonPoint(::UnityEngine::Vector2 p);
    // public UnityEngine.Vector2 ClosestPolygonPoint(Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2 p)
    // Offset: 0x144DEC0
    ::UnityEngine::Vector2 ClosestPolygonPoint(::Cinemachine::ShrinkablePolygon::ShrinkablePoint2 p);
    // public System.Boolean Simplify(System.Single delta)
    // Offset: 0x144CD7C
    bool Simplify(float delta);
    // static private System.Boolean DivideShrinkablePolygon(ref Cinemachine.ShrinkablePolygon shrinkablePolygon, ref System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> subPolygons)
    // Offset: 0x1452CDC
    static bool DivideShrinkablePolygon(ByRef<::Cinemachine::ShrinkablePolygon*> shrinkablePolygon, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> subPolygons);
    // static public System.Void DivideAlongIntersections(Cinemachine.ShrinkablePolygon poly, ref System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon> divided, in Cinemachine.ShrinkablePolygon/Cinemachine.AspectData aspectData)
    // Offset: 0x144D318
    static void DivideAlongIntersections(::Cinemachine::ShrinkablePolygon* poly, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*> divided, ByRef<::Cinemachine::ShrinkablePolygon::AspectData> aspectData);
    // static private System.Void RollListToClosest(System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> points, in UnityEngine.Vector2 point)
    // Offset: 0x14536D0
    static void RollListToClosest(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points, ByRef<::UnityEngine::Vector2> point);
    // static private System.Void RollListToLeftmost(System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> points)
    // Offset: 0x1453594
    static void RollListToLeftmost(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points);
    // static private System.Void RollList(System.Collections.Generic.List`1<Cinemachine.ShrinkablePolygon/Cinemachine.ShrinkablePoint2> points, System.Int32 newFirstElement)
    // Offset: 0x1453840
    static void RollList(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>* points, int newFirstElement);
  }; // Cinemachine.ShrinkablePolygon
  #pragma pack(pop)
  static check_size<sizeof(ShrinkablePolygon), 40 + sizeof(float)> __Cinemachine_ShrinkablePolygonSizeCheck;
  static_assert(sizeof(ShrinkablePolygon) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::ShrinkablePolygon::ShrinkablePoint2, "Cinemachine", "ShrinkablePolygon/ShrinkablePoint2");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::get_ClockwiseOrientation
// Il2CppName: get_ClockwiseOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::get_ClockwiseOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "get_ClockwiseOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::ShrinkablePolygon::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::DeepCopy
// Il2CppName: DeepCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ShrinkablePolygon* (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::DeepCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "DeepCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ComputeSignedArea
// Il2CppName: ComputeSignedArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::ComputeSignedArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ComputeSignedArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::DoesSelfIntersect
// Il2CppName: DoesSelfIntersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::DoesSelfIntersect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "DoesSelfIntersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ComputeNormals
// Il2CppName: ComputeNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ShrinkablePolygon::*)(bool)>(&Cinemachine::ShrinkablePolygon::ComputeNormals)> {
  static const MethodInfo* get() {
    static auto* fixBigCornerAngles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ComputeNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixBigCornerAngles});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ComputeAspectBasedShrinkDirections
// Il2CppName: ComputeAspectBasedShrinkDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::ShrinkablePolygon::*)(ByRef<::Cinemachine::ShrinkablePolygon::AspectData>)>(&Cinemachine::ShrinkablePolygon::ComputeAspectBasedShrinkDirections)> {
  static const MethodInfo* get() {
    static auto* aspectData = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/AspectData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ComputeAspectBasedShrinkDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aspectData});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ConvertToPath
// Il2CppName: ConvertToPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*>, ByRef<bool>)>(&Cinemachine::ShrinkablePolygon::ConvertToPath)> {
  static const MethodInfo* get() {
    static auto* shrinkablePolygons = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon")})->this_arg;
    static auto* aspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* frustumHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxCachedFrustumHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})})->this_arg;
    static auto* hasIntersections = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ConvertToPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shrinkablePolygons, aspectRatio, frustumHeight, maxCachedFrustumHeight, path, hasIntersections});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::IsInside
// Il2CppName: IsInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*>, ByRef<::UnityEngine::Vector2>)>(&Cinemachine::ShrinkablePolygon::IsInside)> {
  static const MethodInfo* get() {
    static auto* polygons = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})})->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "IsInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polygons, p});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::FindMidPoint
// Il2CppName: FindMidPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&Cinemachine::ShrinkablePolygon::FindMidPoint)> {
  static const MethodInfo* get() {
    static auto* A = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* C = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* D1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* D2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "FindMidPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, B, C, D1, D2});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::CalculateShrinkDirection
// Il2CppName: CalculateShrinkDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::ShrinkablePolygon::*)(ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::Cinemachine::ShrinkablePolygon::AspectData>)>(&Cinemachine::ShrinkablePolygon::CalculateShrinkDirection)> {
  static const MethodInfo* get() {
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* prevPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* thisPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* nextPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* aspectData = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/AspectData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "CalculateShrinkDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normal, prevPoint, thisPoint, nextPoint, aspectData});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::IsShrinkable
// Il2CppName: IsShrinkable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::IsShrinkable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "IsShrinkable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::Shrink
// Il2CppName: Shrink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ShrinkablePolygon::*)(float, bool, ByRef<float>)>(&Cinemachine::ShrinkablePolygon::Shrink)> {
  static const MethodInfo* get() {
    static auto* stepSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shrinkToPoint = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* aspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "Shrink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepSize, shrinkToPoint, aspectRatio});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::CenterOfMass
// Il2CppName: CenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::ShrinkablePolygon::*)()>(&Cinemachine::ShrinkablePolygon::CenterOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "CenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::SqrDistanceTo
// Il2CppName: SqrDistanceTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::ShrinkablePolygon::*)(::UnityEngine::Vector2)>(&Cinemachine::ShrinkablePolygon::SqrDistanceTo)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "SqrDistanceTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ClosestPolygonPoint
// Il2CppName: ClosestPolygonPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::ShrinkablePolygon::*)(::UnityEngine::Vector2)>(&Cinemachine::ShrinkablePolygon::ClosestPolygonPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ClosestPolygonPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::ClosestPolygonPoint
// Il2CppName: ClosestPolygonPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Cinemachine::ShrinkablePolygon::*)(::Cinemachine::ShrinkablePolygon::ShrinkablePoint2)>(&Cinemachine::ShrinkablePolygon::ClosestPolygonPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "ClosestPolygonPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::Simplify
// Il2CppName: Simplify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::ShrinkablePolygon::*)(float)>(&Cinemachine::ShrinkablePolygon::Simplify)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "Simplify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::DivideShrinkablePolygon
// Il2CppName: DivideShrinkablePolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Cinemachine::ShrinkablePolygon*>, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>)>(&Cinemachine::ShrinkablePolygon::DivideShrinkablePolygon)> {
  static const MethodInfo* get() {
    static auto* shrinkablePolygon = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon")->this_arg;
    static auto* subPolygons = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "DivideShrinkablePolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shrinkablePolygon, subPolygons});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::DivideAlongIntersections
// Il2CppName: DivideAlongIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::ShrinkablePolygon*, ByRef<::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon*>*>, ByRef<::Cinemachine::ShrinkablePolygon::AspectData>)>(&Cinemachine::ShrinkablePolygon::DivideAlongIntersections)> {
  static const MethodInfo* get() {
    static auto* poly = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon")->byval_arg;
    static auto* divided = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon")})->this_arg;
    static auto* aspectData = &::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/AspectData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "DivideAlongIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poly, divided, aspectData});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::RollListToClosest
// Il2CppName: RollListToClosest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*, ByRef<::UnityEngine::Vector2>)>(&Cinemachine::ShrinkablePolygon::RollListToClosest)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2")})->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "RollListToClosest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, point});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::RollListToLeftmost
// Il2CppName: RollListToLeftmost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*)>(&Cinemachine::ShrinkablePolygon::RollListToLeftmost)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "RollListToLeftmost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: Cinemachine::ShrinkablePolygon::RollList
// Il2CppName: RollList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::Cinemachine::ShrinkablePolygon::ShrinkablePoint2>*, int)>(&Cinemachine::ShrinkablePolygon::RollList)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Cinemachine", "ShrinkablePolygon/ShrinkablePoint2")})->byval_arg;
    static auto* newFirstElement = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::ShrinkablePolygon*), "RollList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, newFirstElement});
  }
};
