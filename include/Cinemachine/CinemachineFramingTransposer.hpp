// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine::Utility
namespace Cinemachine::Utility {
  // Forward declaring type: PositionPredictor
  class PositionPredictor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ICinemachineTargetGroup
  class ICinemachineTargetGroup;
  // Forward declaring type: CameraState
  struct CameraState;
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineFramingTransposer
  class CinemachineFramingTransposer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineFramingTransposer);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineFramingTransposer*, "Cinemachine", "CinemachineFramingTransposer");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x164
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineFramingTransposer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987088
  // [AddComponentMenu] Offset: 987088
  // [SaveDuringPlayAttribute] Offset: 987088
  class CinemachineFramingTransposer : public ::Cinemachine::CinemachineComponentBase {
    public:
    // Nested type: ::Cinemachine::CinemachineFramingTransposer::FramingMode
    struct FramingMode;
    // Nested type: ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode
    struct AdjustmentMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987A14
    struct FramingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FramingMode
      constexpr FramingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Horizontal
      static ::Cinemachine::CinemachineFramingTransposer::FramingMode _get_Horizontal();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Horizontal
      static void _set_Horizontal(::Cinemachine::CinemachineFramingTransposer::FramingMode value);
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Vertical
      static ::Cinemachine::CinemachineFramingTransposer::FramingMode _get_Vertical();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode Vertical
      static void _set_Vertical(::Cinemachine::CinemachineFramingTransposer::FramingMode value);
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode HorizontalAndVertical
      static constexpr const int HorizontalAndVertical = 2;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode HorizontalAndVertical
      static ::Cinemachine::CinemachineFramingTransposer::FramingMode _get_HorizontalAndVertical();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode HorizontalAndVertical
      static void _set_HorizontalAndVertical(::Cinemachine::CinemachineFramingTransposer::FramingMode value);
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode None
      static constexpr const int None = 3;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode None
      static ::Cinemachine::CinemachineFramingTransposer::FramingMode _get_None();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode None
      static void _set_None(::Cinemachine::CinemachineFramingTransposer::FramingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineFramingTransposer::FramingMode), 0 + sizeof(int)> __Cinemachine_CinemachineFramingTransposer_FramingModeSizeCheck;
    static_assert(sizeof(CinemachineFramingTransposer::FramingMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AdjustmentMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AdjustmentMode
      constexpr AdjustmentMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode ZoomOnly
      static constexpr const int ZoomOnly = 0;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode ZoomOnly
      static ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode _get_ZoomOnly();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode ZoomOnly
      static void _set_ZoomOnly(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value);
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyOnly
      static constexpr const int DollyOnly = 1;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyOnly
      static ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode _get_DollyOnly();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyOnly
      static void _set_DollyOnly(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value);
      // static field const value: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyThenZoom
      static constexpr const int DollyThenZoom = 2;
      // Get static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyThenZoom
      static ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode _get_DollyThenZoom();
      // Set static field: static public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode DollyThenZoom
      static void _set_DollyThenZoom(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineFramingTransposer::AdjustmentMode), 0 + sizeof(int)> __Cinemachine_CinemachineFramingTransposer_AdjustmentModeSizeCheck;
    static_assert(sizeof(CinemachineFramingTransposer::AdjustmentMode) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x98A8EC
    // public UnityEngine.Vector3 m_TrackedObjectOffset
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 m_TrackedObjectOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x98A924
    // [RangeAttribute] Offset: 0x98A924
    // [SpaceAttribute] Offset: 0x98A924
    // public System.Single m_LookaheadTime
    // Size: 0x4
    // Offset: 0x5C
    float m_LookaheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A988
    // [RangeAttribute] Offset: 0x98A988
    // public System.Single m_LookaheadSmoothing
    // Size: 0x4
    // Offset: 0x60
    float m_LookaheadSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A9DC
    // public System.Boolean m_LookaheadIgnoreY
    // Size: 0x1
    // Offset: 0x64
    bool m_LookaheadIgnoreY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_LookaheadIgnoreY and: m_XDamping
    char __padding3[0x3] = {};
    // [SpaceAttribute] Offset: 0x98AA14
    // [RangeAttribute] Offset: 0x98AA14
    // [TooltipAttribute] Offset: 0x98AA14
    // public System.Single m_XDamping
    // Size: 0x4
    // Offset: 0x68
    float m_XDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98AA78
    // [TooltipAttribute] Offset: 0x98AA78
    // public System.Single m_YDamping
    // Size: 0x4
    // Offset: 0x6C
    float m_YDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98AACC
    // [TooltipAttribute] Offset: 0x98AACC
    // public System.Single m_ZDamping
    // Size: 0x4
    // Offset: 0x70
    float m_ZDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98AB20
    // public System.Boolean m_TargetMovementOnly
    // Size: 0x1
    // Offset: 0x74
    bool m_TargetMovementOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TargetMovementOnly and: m_ScreenX
    char __padding7[0x3] = {};
    // [SpaceAttribute] Offset: 0x98AB58
    // [RangeAttribute] Offset: 0x98AB58
    // [TooltipAttribute] Offset: 0x98AB58
    // public System.Single m_ScreenX
    // Size: 0x4
    // Offset: 0x78
    float m_ScreenX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98ABBC
    // [TooltipAttribute] Offset: 0x98ABBC
    // public System.Single m_ScreenY
    // Size: 0x4
    // Offset: 0x7C
    float m_ScreenY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98AC10
    // public System.Single m_CameraDistance
    // Size: 0x4
    // Offset: 0x80
    float m_CameraDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x98AC48
    // [RangeAttribute] Offset: 0x98AC48
    // [TooltipAttribute] Offset: 0x98AC48
    // public System.Single m_DeadZoneWidth
    // Size: 0x4
    // Offset: 0x84
    float m_DeadZoneWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98ACAC
    // [TooltipAttribute] Offset: 0x98ACAC
    // public System.Single m_DeadZoneHeight
    // Size: 0x4
    // Offset: 0x88
    float m_DeadZoneHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98AD00
    // [FormerlySerializedAsAttribute] Offset: 0x98AD00
    // public System.Single m_DeadZoneDepth
    // Size: 0x4
    // Offset: 0x8C
    float m_DeadZoneDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x98AD60
    // [TooltipAttribute] Offset: 0x98AD60
    // public System.Boolean m_UnlimitedSoftZone
    // Size: 0x1
    // Offset: 0x90
    bool m_UnlimitedSoftZone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UnlimitedSoftZone and: m_SoftZoneWidth
    char __padding14[0x3] = {};
    // [RangeAttribute] Offset: 0x98ADAC
    // [TooltipAttribute] Offset: 0x98ADAC
    // public System.Single m_SoftZoneWidth
    // Size: 0x4
    // Offset: 0x94
    float m_SoftZoneWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98AE00
    // [TooltipAttribute] Offset: 0x98AE00
    // public System.Single m_SoftZoneHeight
    // Size: 0x4
    // Offset: 0x98
    float m_SoftZoneHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98AE54
    // [TooltipAttribute] Offset: 0x98AE54
    // public System.Single m_BiasX
    // Size: 0x4
    // Offset: 0x9C
    float m_BiasX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98AEA8
    // [TooltipAttribute] Offset: 0x98AEA8
    // public System.Single m_BiasY
    // Size: 0x4
    // Offset: 0xA0
    float m_BiasY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98AEFC
    // public System.Boolean m_CenterOnActivate
    // Size: 0x1
    // Offset: 0xA4
    bool m_CenterOnActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CenterOnActivate and: m_GroupFramingMode
    char __padding19[0x3] = {};
    // [SpaceAttribute] Offset: 0x98AF34
    // [TooltipAttribute] Offset: 0x98AF34
    // [FormerlySerializedAsAttribute] Offset: 0x98AF34
    // public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode m_GroupFramingMode
    // Size: 0x4
    // Offset: 0xA8
    ::Cinemachine::CinemachineFramingTransposer::FramingMode m_GroupFramingMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineFramingTransposer::FramingMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98AFA4
    // public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode m_AdjustmentMode
    // Size: 0x4
    // Offset: 0xAC
    ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode m_AdjustmentMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98AFDC
    // public System.Single m_GroupFramingSize
    // Size: 0x4
    // Offset: 0xB0
    float m_GroupFramingSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B014
    // public System.Single m_MaxDollyIn
    // Size: 0x4
    // Offset: 0xB4
    float m_MaxDollyIn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B04C
    // public System.Single m_MaxDollyOut
    // Size: 0x4
    // Offset: 0xB8
    float m_MaxDollyOut;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B084
    // public System.Single m_MinimumDistance
    // Size: 0x4
    // Offset: 0xBC
    float m_MinimumDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B0BC
    // public System.Single m_MaximumDistance
    // Size: 0x4
    // Offset: 0xC0
    float m_MaximumDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98B0F4
    // [TooltipAttribute] Offset: 0x98B0F4
    // public System.Single m_MinimumFOV
    // Size: 0x4
    // Offset: 0xC4
    float m_MinimumFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98B14C
    // [TooltipAttribute] Offset: 0x98B14C
    // public System.Single m_MaximumFOV
    // Size: 0x4
    // Offset: 0xC8
    float m_MaximumFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B1A4
    // public System.Single m_MinimumOrthoSize
    // Size: 0x4
    // Offset: 0xCC
    float m_MinimumOrthoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98B1DC
    // public System.Single m_MaximumOrthoSize
    // Size: 0x4
    // Offset: 0xD0
    float m_MaximumOrthoSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_PreviousCameraPosition
    // Size: 0xC
    // Offset: 0xD4
    ::UnityEngine::Vector3 m_PreviousCameraPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Cinemachine.Utility.PositionPredictor m_Predictor
    // Size: 0x8
    // Offset: 0xE0
    ::Cinemachine::Utility::PositionPredictor* m_Predictor;
    // Field size check
    static_assert(sizeof(::Cinemachine::Utility::PositionPredictor*) == 0x8);
    // private UnityEngine.Vector3 <TrackedPoint>k__BackingField
    // Size: 0xC
    // Offset: 0xE8
    ::UnityEngine::Vector3 TrackedPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean <InheritingPosition>k__BackingField
    // Size: 0x1
    // Offset: 0xF4
    bool InheritingPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InheritingPosition and: m_prevFOV
    char __padding34[0x3] = {};
    // private System.Single m_prevFOV
    // Size: 0x4
    // Offset: 0xF8
    float m_prevFOV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion m_prevRotation
    // Size: 0x10
    // Offset: 0xFC
    ::UnityEngine::Quaternion m_prevRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Bounds <LastBounds>k__BackingField
    // Size: 0x18
    // Offset: 0x10C
    ::UnityEngine::Bounds LastBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
    // Size: 0x40
    // Offset: 0x124
    ::UnityEngine::Matrix4x4 LastBoundsMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // static field const value: static private System.Single kMinimumCameraDistance
    static constexpr const float kMinimumCameraDistance = 0.01;
    // Get static field: static private System.Single kMinimumCameraDistance
    static float _get_kMinimumCameraDistance();
    // Set static field: static private System.Single kMinimumCameraDistance
    static void _set_kMinimumCameraDistance(float value);
    // static field const value: static private System.Single kMinimumGroupSize
    static constexpr const float kMinimumGroupSize = 0.01;
    // Get static field: static private System.Single kMinimumGroupSize
    static float _get_kMinimumGroupSize();
    // Set static field: static private System.Single kMinimumGroupSize
    static void _set_kMinimumGroupSize(float value);
    // Get instance field reference: public UnityEngine.Vector3 m_TrackedObjectOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TrackedObjectOffset();
    // Get instance field reference: public System.Single m_LookaheadTime
    [[deprecated("Use field access instead!")]] float& dyn_m_LookaheadTime();
    // Get instance field reference: public System.Single m_LookaheadSmoothing
    [[deprecated("Use field access instead!")]] float& dyn_m_LookaheadSmoothing();
    // Get instance field reference: public System.Boolean m_LookaheadIgnoreY
    [[deprecated("Use field access instead!")]] bool& dyn_m_LookaheadIgnoreY();
    // Get instance field reference: public System.Single m_XDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_XDamping();
    // Get instance field reference: public System.Single m_YDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_YDamping();
    // Get instance field reference: public System.Single m_ZDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_ZDamping();
    // Get instance field reference: public System.Boolean m_TargetMovementOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_TargetMovementOnly();
    // Get instance field reference: public System.Single m_ScreenX
    [[deprecated("Use field access instead!")]] float& dyn_m_ScreenX();
    // Get instance field reference: public System.Single m_ScreenY
    [[deprecated("Use field access instead!")]] float& dyn_m_ScreenY();
    // Get instance field reference: public System.Single m_CameraDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_CameraDistance();
    // Get instance field reference: public System.Single m_DeadZoneWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZoneWidth();
    // Get instance field reference: public System.Single m_DeadZoneHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZoneHeight();
    // Get instance field reference: public System.Single m_DeadZoneDepth
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZoneDepth();
    // Get instance field reference: public System.Boolean m_UnlimitedSoftZone
    [[deprecated("Use field access instead!")]] bool& dyn_m_UnlimitedSoftZone();
    // Get instance field reference: public System.Single m_SoftZoneWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_SoftZoneWidth();
    // Get instance field reference: public System.Single m_SoftZoneHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_SoftZoneHeight();
    // Get instance field reference: public System.Single m_BiasX
    [[deprecated("Use field access instead!")]] float& dyn_m_BiasX();
    // Get instance field reference: public System.Single m_BiasY
    [[deprecated("Use field access instead!")]] float& dyn_m_BiasY();
    // Get instance field reference: public System.Boolean m_CenterOnActivate
    [[deprecated("Use field access instead!")]] bool& dyn_m_CenterOnActivate();
    // Get instance field reference: public Cinemachine.CinemachineFramingTransposer/Cinemachine.FramingMode m_GroupFramingMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineFramingTransposer::FramingMode& dyn_m_GroupFramingMode();
    // Get instance field reference: public Cinemachine.CinemachineFramingTransposer/Cinemachine.AdjustmentMode m_AdjustmentMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineFramingTransposer::AdjustmentMode& dyn_m_AdjustmentMode();
    // Get instance field reference: public System.Single m_GroupFramingSize
    [[deprecated("Use field access instead!")]] float& dyn_m_GroupFramingSize();
    // Get instance field reference: public System.Single m_MaxDollyIn
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDollyIn();
    // Get instance field reference: public System.Single m_MaxDollyOut
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxDollyOut();
    // Get instance field reference: public System.Single m_MinimumDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumDistance();
    // Get instance field reference: public System.Single m_MaximumDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumDistance();
    // Get instance field reference: public System.Single m_MinimumFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumFOV();
    // Get instance field reference: public System.Single m_MaximumFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumFOV();
    // Get instance field reference: public System.Single m_MinimumOrthoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MinimumOrthoSize();
    // Get instance field reference: public System.Single m_MaximumOrthoSize
    [[deprecated("Use field access instead!")]] float& dyn_m_MaximumOrthoSize();
    // Get instance field reference: private UnityEngine.Vector3 m_PreviousCameraPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousCameraPosition();
    // Get instance field reference: private Cinemachine.Utility.PositionPredictor m_Predictor
    [[deprecated("Use field access instead!")]] ::Cinemachine::Utility::PositionPredictor*& dyn_m_Predictor();
    // Get instance field reference: private UnityEngine.Vector3 <TrackedPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TrackedPoint$k__BackingField();
    // Get instance field reference: private System.Boolean <InheritingPosition>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$InheritingPosition$k__BackingField();
    // Get instance field reference: private System.Single m_prevFOV
    [[deprecated("Use field access instead!")]] float& dyn_m_prevFOV();
    // Get instance field reference: private UnityEngine.Quaternion m_prevRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_prevRotation();
    // Get instance field reference: private UnityEngine.Bounds <LastBounds>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_$LastBounds$k__BackingField();
    // Get instance field reference: private UnityEngine.Matrix4x4 <LastBoundsMatrix>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_$LastBoundsMatrix$k__BackingField();
    // UnityEngine.Rect get_SoftGuideRect()
    // Offset: 0x1051070
    ::UnityEngine::Rect get_SoftGuideRect();
    // System.Void set_SoftGuideRect(UnityEngine.Rect value)
    // Offset: 0x10510BC
    void set_SoftGuideRect(::UnityEngine::Rect value);
    // UnityEngine.Rect get_HardGuideRect()
    // Offset: 0x105121C
    ::UnityEngine::Rect get_HardGuideRect();
    // System.Void set_HardGuideRect(UnityEngine.Rect value)
    // Offset: 0x1051320
    void set_HardGuideRect(::UnityEngine::Rect value);
    // public UnityEngine.Vector3 get_TrackedPoint()
    // Offset: 0x1051754
    ::UnityEngine::Vector3 get_TrackedPoint();
    // private System.Void set_TrackedPoint(UnityEngine.Vector3 value)
    // Offset: 0x1051760
    void set_TrackedPoint(::UnityEngine::Vector3 value);
    // private System.Boolean get_InheritingPosition()
    // Offset: 0x1051ABC
    bool get_InheritingPosition();
    // private System.Void set_InheritingPosition(System.Boolean value)
    // Offset: 0x1051AC4
    void set_InheritingPosition(bool value);
    // public UnityEngine.Bounds get_LastBounds()
    // Offset: 0x1051CF8
    ::UnityEngine::Bounds get_LastBounds();
    // private System.Void set_LastBounds(UnityEngine.Bounds value)
    // Offset: 0x1051D14
    void set_LastBounds(::UnityEngine::Bounds value);
    // public UnityEngine.Matrix4x4 get_LastBoundsMatrix()
    // Offset: 0x1051D30
    ::UnityEngine::Matrix4x4 get_LastBoundsMatrix();
    // private System.Void set_LastBoundsMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x1051D5C
    void set_LastBoundsMatrix(::UnityEngine::Matrix4x4 value);
    // private System.Void OnValidate()
    // Offset: 0x1051544
    void OnValidate();
    // private UnityEngine.Rect ScreenToOrtho(UnityEngine.Rect rScreen, System.Single orthoSize, System.Single aspect)
    // Offset: 0x1051AD0
    ::UnityEngine::Rect ScreenToOrtho(::UnityEngine::Rect rScreen, float orthoSize, float aspect);
    // private UnityEngine.Vector3 OrthoOffsetToScreenBounds(UnityEngine.Vector3 targetPos2D, UnityEngine.Rect screenRect)
    // Offset: 0x1051BAC
    ::UnityEngine::Vector3 OrthoOffsetToScreenBounds(::UnityEngine::Vector3 targetPos2D, ::UnityEngine::Rect screenRect);
    // private System.Single GetTargetHeight(UnityEngine.Vector2 boundsSize)
    // Offset: 0x1053388
    float GetTargetHeight(::UnityEngine::Vector2 boundsSize);
    // private UnityEngine.Vector3 ComputeGroupBounds(Cinemachine.ICinemachineTargetGroup group, ref Cinemachine.CameraState curState)
    // Offset: 0x1052E30
    ::UnityEngine::Vector3 ComputeGroupBounds(::Cinemachine::ICinemachineTargetGroup* group, ByRef<::Cinemachine::CameraState> curState);
    // static private UnityEngine.Bounds GetScreenSpaceGroupBoundingBox(Cinemachine.ICinemachineTargetGroup group, ref UnityEngine.Vector3 pos, UnityEngine.Quaternion orientation)
    // Offset: 0x10534B4
    static ::UnityEngine::Bounds GetScreenSpaceGroupBoundingBox(::Cinemachine::ICinemachineTargetGroup* group, ByRef<::UnityEngine::Vector3> pos, ::UnityEngine::Quaternion orientation);
    // public override System.Boolean get_IsValid()
    // Offset: 0x10516A4
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0x1051744
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Cinemachine.Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public override System.Boolean get_BodyAppliesAfterAim()
    // Offset: 0x105174C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_BodyAppliesAfterAim()
    bool get_BodyAppliesAfterAim();
    // public System.Void .ctor()
    // Offset: 0x1053A7C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineFramingTransposer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineFramingTransposer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineFramingTransposer*, creationType>()));
    }
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x105176C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x10518C8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Single GetMaxDampTime()
    // Offset: 0x1051910
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Single CinemachineComponentBase::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Boolean OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams transitionParams)
    // Offset: 0x10519A4
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams transitionParams)
    bool OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams);
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x1051D88
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
  }; // Cinemachine.CinemachineFramingTransposer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineFramingTransposer), 292 + sizeof(::UnityEngine::Matrix4x4)> __Cinemachine_CinemachineFramingTransposerSizeCheck;
  static_assert(sizeof(CinemachineFramingTransposer) == 0x164);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineFramingTransposer::AdjustmentMode, "Cinemachine", "CinemachineFramingTransposer/AdjustmentMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineFramingTransposer::FramingMode, "Cinemachine", "CinemachineFramingTransposer/FramingMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_SoftGuideRect
// Il2CppName: get_SoftGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_SoftGuideRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_SoftGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_SoftGuideRect
// Il2CppName: set_SoftGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Rect)>(&Cinemachine::CinemachineFramingTransposer::set_SoftGuideRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_SoftGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_HardGuideRect
// Il2CppName: get_HardGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_HardGuideRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_HardGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_HardGuideRect
// Il2CppName: set_HardGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Rect)>(&Cinemachine::CinemachineFramingTransposer::set_HardGuideRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_HardGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_TrackedPoint
// Il2CppName: get_TrackedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_TrackedPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_TrackedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_TrackedPoint
// Il2CppName: set_TrackedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineFramingTransposer::set_TrackedPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_TrackedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_InheritingPosition
// Il2CppName: get_InheritingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_InheritingPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_InheritingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_InheritingPosition
// Il2CppName: set_InheritingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(bool)>(&Cinemachine::CinemachineFramingTransposer::set_InheritingPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_InheritingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_LastBounds
// Il2CppName: get_LastBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_LastBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_LastBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_LastBounds
// Il2CppName: set_LastBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Bounds)>(&Cinemachine::CinemachineFramingTransposer::set_LastBounds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_LastBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_LastBoundsMatrix
// Il2CppName: get_LastBoundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_LastBoundsMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_LastBoundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::set_LastBoundsMatrix
// Il2CppName: set_LastBoundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Matrix4x4)>(&Cinemachine::CinemachineFramingTransposer::set_LastBoundsMatrix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "set_LastBoundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::ScreenToOrtho
// Il2CppName: ScreenToOrtho
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Rect, float, float)>(&Cinemachine::CinemachineFramingTransposer::ScreenToOrtho)> {
  static const MethodInfo* get() {
    static auto* rScreen = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* orthoSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aspect = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "ScreenToOrtho", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rScreen, orthoSize, aspect});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::OrthoOffsetToScreenBounds
// Il2CppName: OrthoOffsetToScreenBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Rect)>(&Cinemachine::CinemachineFramingTransposer::OrthoOffsetToScreenBounds)> {
  static const MethodInfo* get() {
    static auto* targetPos2D = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "OrthoOffsetToScreenBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPos2D, screenRect});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::GetTargetHeight
// Il2CppName: GetTargetHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Vector2)>(&Cinemachine::CinemachineFramingTransposer::GetTargetHeight)> {
  static const MethodInfo* get() {
    static auto* boundsSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "GetTargetHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundsSize});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::ComputeGroupBounds
// Il2CppName: ComputeGroupBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineFramingTransposer::*)(::Cinemachine::ICinemachineTargetGroup*, ByRef<::Cinemachine::CameraState>)>(&Cinemachine::CinemachineFramingTransposer::ComputeGroupBounds)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineTargetGroup")->byval_arg;
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "ComputeGroupBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, curState});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::GetScreenSpaceGroupBoundingBox
// Il2CppName: GetScreenSpaceGroupBoundingBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::Cinemachine::ICinemachineTargetGroup*, ByRef<::UnityEngine::Vector3>, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineFramingTransposer::GetScreenSpaceGroupBoundingBox)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineTargetGroup")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "GetScreenSpaceGroupBoundingBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, pos, orientation});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::get_BodyAppliesAfterAim
// Il2CppName: get_BodyAppliesAfterAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::get_BodyAppliesAfterAim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "get_BodyAppliesAfterAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineFramingTransposer::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineFramingTransposer::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineFramingTransposer::*)()>(&Cinemachine::CinemachineFramingTransposer::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineFramingTransposer::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams>)>(&Cinemachine::CinemachineFramingTransposer::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* transitionParams = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase/TransitionParams")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime, transitionParams});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineFramingTransposer::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineFramingTransposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineFramingTransposer::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineFramingTransposer*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
