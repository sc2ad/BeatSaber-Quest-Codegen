// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: Style because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlendDefinition
  struct CinemachineBlendDefinition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBlendDefinition, "Cinemachine", "CinemachineBlendDefinition");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.CinemachineBlendDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 9873FC
  struct CinemachineBlendDefinition/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Cinemachine::CinemachineBlendDefinition::Style
    struct Style;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineBlendDefinition/Cinemachine.Style
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987AB0
    struct Style/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Style
      constexpr Style(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Cut
      static constexpr const int Cut = 0;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Cut
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_Cut();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Cut
      static void _set_Cut(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseInOut
      static constexpr const int EaseInOut = 1;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseInOut
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_EaseInOut();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseInOut
      static void _set_EaseInOut(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseIn
      static constexpr const int EaseIn = 2;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseIn
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_EaseIn();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseIn
      static void _set_EaseIn(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseOut
      static constexpr const int EaseOut = 3;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseOut
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_EaseOut();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style EaseOut
      static void _set_EaseOut(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardIn
      static constexpr const int HardIn = 4;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardIn
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_HardIn();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardIn
      static void _set_HardIn(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardOut
      static constexpr const int HardOut = 5;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardOut
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_HardOut();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style HardOut
      static void _set_HardOut(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Linear
      static constexpr const int Linear = 6;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Linear
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_Linear();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Linear
      static void _set_Linear(::Cinemachine::CinemachineBlendDefinition::Style value);
      // static field const value: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Custom
      static constexpr const int Custom = 7;
      // Get static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Custom
      static ::Cinemachine::CinemachineBlendDefinition::Style _get_Custom();
      // Set static field: static public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style Custom
      static void _set_Custom(::Cinemachine::CinemachineBlendDefinition::Style value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineBlendDefinition/Cinemachine.Style
    #pragma pack(pop)
    static check_size<sizeof(CinemachineBlendDefinition::Style), 0 + sizeof(int)> __Cinemachine_CinemachineBlendDefinition_StyleSizeCheck;
    static_assert(sizeof(CinemachineBlendDefinition::Style) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x98C408
    // public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style m_Style
    // Size: 0x4
    // Offset: 0x0
    ::Cinemachine::CinemachineBlendDefinition::Style m_Style;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlendDefinition::Style) == 0x4);
    // [TooltipAttribute] Offset: 0x98C440
    // public System.Single m_Time
    // Size: 0x4
    // Offset: 0x4
    float m_Time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AnimationCurve m_CustomCurve
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::AnimationCurve* m_CustomCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Creating value type constructor for type: CinemachineBlendDefinition
    constexpr CinemachineBlendDefinition(::Cinemachine::CinemachineBlendDefinition::Style m_Style_ = {}, float m_Time_ = {}, ::UnityEngine::AnimationCurve* m_CustomCurve_ = {}) noexcept : m_Style{m_Style_}, m_Time{m_Time_}, m_CustomCurve{m_CustomCurve_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private UnityEngine.AnimationCurve[] sStandardCurves
    static ::ArrayW<::UnityEngine::AnimationCurve*> _get_sStandardCurves();
    // Set static field: static private UnityEngine.AnimationCurve[] sStandardCurves
    static void _set_sStandardCurves(::ArrayW<::UnityEngine::AnimationCurve*> value);
    // Get instance field reference: public Cinemachine.CinemachineBlendDefinition/Cinemachine.Style m_Style
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition::Style& dyn_m_Style();
    // Get instance field reference: public System.Single m_Time
    [[deprecated("Use field access instead!")]] float& dyn_m_Time();
    // Get instance field reference: public UnityEngine.AnimationCurve m_CustomCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_CustomCurve();
    // public System.Single get_BlendTime()
    // Offset: 0xA5CF5C
    float get_BlendTime();
    // public UnityEngine.AnimationCurve get_BlendCurve()
    // Offset: 0xA5CF88
    ::UnityEngine::AnimationCurve* get_BlendCurve();
    // public System.Void .ctor(Cinemachine.CinemachineBlendDefinition/Cinemachine.Style style, System.Single time)
    // Offset: 0xA5CF74
    CinemachineBlendDefinition(::Cinemachine::CinemachineBlendDefinition::Style style, float time);
    // private System.Void CreateStandardCurves()
    // Offset: 0xA5CF84
    void CreateStandardCurves();
  }; // Cinemachine.CinemachineBlendDefinition
  #pragma pack(pop)
  static check_size<sizeof(CinemachineBlendDefinition), 8 + sizeof(::UnityEngine::AnimationCurve*)> __Cinemachine_CinemachineBlendDefinitionSizeCheck;
  static_assert(sizeof(CinemachineBlendDefinition) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBlendDefinition::Style, "Cinemachine", "CinemachineBlendDefinition/Style");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineBlendDefinition::get_BlendTime
// Il2CppName: get_BlendTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineBlendDefinition::*)()>(&Cinemachine::CinemachineBlendDefinition::get_BlendTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlendDefinition), "get_BlendTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlendDefinition::get_BlendCurve
// Il2CppName: get_BlendCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Cinemachine::CinemachineBlendDefinition::*)()>(&Cinemachine::CinemachineBlendDefinition::get_BlendCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlendDefinition), "get_BlendCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlendDefinition::CinemachineBlendDefinition
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineBlendDefinition::CreateStandardCurves
// Il2CppName: CreateStandardCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlendDefinition::*)()>(&Cinemachine::CinemachineBlendDefinition::CreateStandardCurves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlendDefinition), "CreateStandardCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
