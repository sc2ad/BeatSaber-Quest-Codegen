// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ICinemachineCamera
  class ICinemachineCamera;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineBlend);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBlend*, "Cinemachine", "CinemachineBlend");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineBlend
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineBlend : public ::Il2CppObject {
    public:
    public:
    // private Cinemachine.ICinemachineCamera <CamA>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Cinemachine::ICinemachineCamera* CamA;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private Cinemachine.ICinemachineCamera <CamB>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Cinemachine::ICinemachineCamera* CamB;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private UnityEngine.AnimationCurve <BlendCurve>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* BlendCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single <TimeInBlend>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float TimeInBlend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <Duration>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float Duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private Cinemachine.ICinemachineCamera <CamA>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$CamA$k__BackingField();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <CamB>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$CamB$k__BackingField();
    // Get instance field reference: private UnityEngine.AnimationCurve <BlendCurve>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_$BlendCurve$k__BackingField();
    // Get instance field reference: private System.Single <TimeInBlend>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$TimeInBlend$k__BackingField();
    // Get instance field reference: private System.Single <Duration>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Duration$k__BackingField();
    // public Cinemachine.ICinemachineCamera get_CamA()
    // Offset: 0x14025E0
    ::Cinemachine::ICinemachineCamera* get_CamA();
    // public System.Void set_CamA(Cinemachine.ICinemachineCamera value)
    // Offset: 0x14025E8
    void set_CamA(::Cinemachine::ICinemachineCamera* value);
    // public Cinemachine.ICinemachineCamera get_CamB()
    // Offset: 0x14025F0
    ::Cinemachine::ICinemachineCamera* get_CamB();
    // public System.Void set_CamB(Cinemachine.ICinemachineCamera value)
    // Offset: 0x14025F8
    void set_CamB(::Cinemachine::ICinemachineCamera* value);
    // public UnityEngine.AnimationCurve get_BlendCurve()
    // Offset: 0x1402600
    ::UnityEngine::AnimationCurve* get_BlendCurve();
    // public System.Void set_BlendCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x1402608
    void set_BlendCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_TimeInBlend()
    // Offset: 0x1402610
    float get_TimeInBlend();
    // public System.Void set_TimeInBlend(System.Single value)
    // Offset: 0x1402618
    void set_TimeInBlend(float value);
    // public System.Single get_BlendWeight()
    // Offset: 0x1402620
    float get_BlendWeight();
    // public System.Boolean get_IsValid()
    // Offset: 0x13FD58C
    bool get_IsValid();
    // public System.Single get_Duration()
    // Offset: 0x1402724
    float get_Duration();
    // public System.Void set_Duration(System.Single value)
    // Offset: 0x140272C
    void set_Duration(float value);
    // public System.Boolean get_IsComplete()
    // Offset: 0x14026F4
    bool get_IsComplete();
    // public System.String get_Description()
    // Offset: 0x13FD1E8
    ::StringW get_Description();
    // public Cinemachine.CameraState get_State()
    // Offset: 0x13FD9D4
    ::Cinemachine::CameraState get_State();
    // public System.Void .ctor(Cinemachine.ICinemachineCamera a, Cinemachine.ICinemachineCamera b, UnityEngine.AnimationCurve curve, System.Single duration, System.Single t)
    // Offset: 0x1402844
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineBlend* New_ctor(::Cinemachine::ICinemachineCamera* a, ::Cinemachine::ICinemachineCamera* b, ::UnityEngine::AnimationCurve* curve, float duration, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlend::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineBlend*, creationType>(a, b, curve, duration, t)));
    }
    // public System.Boolean Uses(Cinemachine.ICinemachineCamera cam)
    // Offset: 0x1402734
    bool Uses(::Cinemachine::ICinemachineCamera* cam);
    // public System.Void UpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x13FD76C
    void UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
  }; // Cinemachine.CinemachineBlend
  #pragma pack(pop)
  static check_size<sizeof(CinemachineBlend), 44 + sizeof(float)> __Cinemachine_CinemachineBlendSizeCheck;
  static_assert(sizeof(CinemachineBlend) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_CamA
// Il2CppName: get_CamA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_CamA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_CamA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::set_CamA
// Il2CppName: set_CamA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineBlend::set_CamA)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "set_CamA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_CamB
// Il2CppName: get_CamB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_CamB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_CamB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::set_CamB
// Il2CppName: set_CamB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineBlend::set_CamB)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "set_CamB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_BlendCurve
// Il2CppName: get_BlendCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_BlendCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_BlendCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::set_BlendCurve
// Il2CppName: set_BlendCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(::UnityEngine::AnimationCurve*)>(&Cinemachine::CinemachineBlend::set_BlendCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "set_BlendCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_TimeInBlend
// Il2CppName: get_TimeInBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_TimeInBlend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_TimeInBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::set_TimeInBlend
// Il2CppName: set_TimeInBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(float)>(&Cinemachine::CinemachineBlend::set_TimeInBlend)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "set_TimeInBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_BlendWeight
// Il2CppName: get_BlendWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_BlendWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_BlendWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_Duration
// Il2CppName: get_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_Duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::set_Duration
// Il2CppName: set_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(float)>(&Cinemachine::CinemachineBlend::set_Duration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "set_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_IsComplete
// Il2CppName: get_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_IsComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineBlend::*)()>(&Cinemachine::CinemachineBlend::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::Uses
// Il2CppName: Uses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBlend::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineBlend::Uses)> {
  static const MethodInfo* get() {
    static auto* cam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "Uses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBlend::UpdateCameraState
// Il2CppName: UpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBlend::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineBlend::UpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlend*), "UpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
