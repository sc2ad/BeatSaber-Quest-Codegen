// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Cinemachine.ICinemachineCamera
#include "Cinemachine/ICinemachineCamera.hpp"
// Including type: Cinemachine.CinemachineCore/Cinemachine.Stage
#include "Cinemachine/CinemachineCore_Stage.hpp"
// Including type: Cinemachine.AxisState
#include "Cinemachine/AxisState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineExtension
  class CinemachineExtension;
  // Forward declaring type: CameraState
  struct CameraState;
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
  // Forward declaring type: CinemachineBlendDefinition
  struct CinemachineBlendDefinition;
  // Forward declaring type: LensSettings
  struct LensSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineVirtualCameraBase);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineVirtualCameraBase*, "Cinemachine", "CinemachineVirtualCameraBase");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineVirtualCameraBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  class CinemachineVirtualCameraBase : public ::UnityEngine::MonoBehaviour/*, public ::Cinemachine::ICinemachineCamera*/ {
    public:
    // Nested type: ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode
    struct StandbyUpdateMode;
    // Nested type: ::Cinemachine::CinemachineVirtualCameraBase::BlendHint
    struct BlendHint;
    // Nested type: ::Cinemachine::CinemachineVirtualCameraBase::TransitionParams
    struct TransitionParams;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct StandbyUpdateMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StandbyUpdateMode
      constexpr StandbyUpdateMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Never
      static constexpr const int Never = 0;
      // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Never
      static ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode _get_Never();
      // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Never
      static void _set_Never(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value);
      // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Always
      static constexpr const int Always = 1;
      // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Always
      static ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode _get_Always();
      // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode Always
      static void _set_Always(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value);
      // static field const value: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode RoundRobin
      static constexpr const int RoundRobin = 2;
      // Get static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode RoundRobin
      static ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode _get_RoundRobin();
      // Set static field: static public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode RoundRobin
      static void _set_RoundRobin(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineVirtualCameraBase::StandbyUpdateMode), 0 + sizeof(int)> __Cinemachine_CinemachineVirtualCameraBase_StandbyUpdateModeSizeCheck;
    static_assert(sizeof(CinemachineVirtualCameraBase::StandbyUpdateMode) == 0x4);
    public:
    // [NoSaveDuringPlayAttribute] Offset: 0x98C830
    // public System.String[] m_ExcludedPropertiesInInspector
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> m_ExcludedPropertiesInInspector;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // [NoSaveDuringPlayAttribute] Offset: 0x98C878
    // public Cinemachine.CinemachineCore/Cinemachine.Stage[] m_LockStageInInspector
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Cinemachine::CinemachineCore::Stage> m_LockStageInInspector;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineCore::Stage>) == 0x8);
    // private System.Int32 m_ValidatingStreamVersion
    // Size: 0x4
    // Offset: 0x28
    int m_ValidatingStreamVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_OnValidateCalled
    // Size: 0x1
    // Offset: 0x2C
    bool m_OnValidateCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OnValidateCalled and: m_StreamingVersion
    char __padding3[0x3] = {};
    // [NoSaveDuringPlayAttribute] Offset: 0x98C8C0
    // private System.Int32 m_StreamingVersion
    // Size: 0x4
    // Offset: 0x30
    int m_StreamingVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [NoSaveDuringPlayAttribute] Offset: 0x98C908
    // [TooltipAttribute] Offset: 0x98C908
    // public System.Int32 m_Priority
    // Size: 0x4
    // Offset: 0x34
    int m_Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <FollowTargetAttachment>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float FollowTargetAttachment;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <LookAtTargetAttachment>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    float LookAtTargetAttachment;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98C974
    // public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode m_StandbyUpdate
    // Size: 0x4
    // Offset: 0x40
    ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode m_StandbyUpdate;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode) == 0x4);
    // Padding between fields: m_StandbyUpdate and: mExtensions
    char __padding8[0x4] = {};
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineExtension> mExtensions
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineExtension*>* mExtensions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineExtension*>*) == 0x8);
    // private System.Boolean <PreviousStateIsValid>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool PreviousStateIsValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_WasStarted
    // Size: 0x1
    // Offset: 0x51
    bool m_WasStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean mSlaveStatusUpdated
    // Size: 0x1
    // Offset: 0x52
    bool mSlaveStatusUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mSlaveStatusUpdated and: m_parentVcam
    char __padding12[0x5] = {};
    // private Cinemachine.CinemachineVirtualCameraBase m_parentVcam
    // Size: 0x8
    // Offset: 0x58
    ::Cinemachine::CinemachineVirtualCameraBase* m_parentVcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    // private System.Int32 m_QueuePriority
    // Size: 0x4
    // Offset: 0x60
    int m_QueuePriority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Cinemachine::ICinemachineCamera
    operator ::Cinemachine::ICinemachineCamera() noexcept {
      return *reinterpret_cast<::Cinemachine::ICinemachineCamera*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String[] m_ExcludedPropertiesInInspector
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_ExcludedPropertiesInInspector();
    // Get instance field reference: public Cinemachine.CinemachineCore/Cinemachine.Stage[] m_LockStageInInspector
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineCore::Stage>& dyn_m_LockStageInInspector();
    // Get instance field reference: private System.Int32 m_ValidatingStreamVersion
    [[deprecated("Use field access instead!")]] int& dyn_m_ValidatingStreamVersion();
    // Get instance field reference: private System.Boolean m_OnValidateCalled
    [[deprecated("Use field access instead!")]] bool& dyn_m_OnValidateCalled();
    // Get instance field reference: private System.Int32 m_StreamingVersion
    [[deprecated("Use field access instead!")]] int& dyn_m_StreamingVersion();
    // Get instance field reference: public System.Int32 m_Priority
    [[deprecated("Use field access instead!")]] int& dyn_m_Priority();
    // Get instance field reference: private System.Single <FollowTargetAttachment>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$FollowTargetAttachment$k__BackingField();
    // Get instance field reference: private System.Single <LookAtTargetAttachment>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$LookAtTargetAttachment$k__BackingField();
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase/Cinemachine.StandbyUpdateMode m_StandbyUpdate
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode& dyn_m_StandbyUpdate();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineExtension> mExtensions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineExtension*>*& dyn_mExtensions();
    // Get instance field reference: private System.Boolean <PreviousStateIsValid>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PreviousStateIsValid$k__BackingField();
    // Get instance field reference: private System.Boolean m_WasStarted
    [[deprecated("Use field access instead!")]] bool& dyn_m_WasStarted();
    // Get instance field reference: private System.Boolean mSlaveStatusUpdated
    [[deprecated("Use field access instead!")]] bool& dyn_mSlaveStatusUpdated();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase m_parentVcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_m_parentVcam();
    // Get instance field reference: private System.Int32 m_QueuePriority
    [[deprecated("Use field access instead!")]] int& dyn_m_QueuePriority();
    // public System.Int32 get_ValidatingStreamVersion()
    // Offset: 0x144835C
    int get_ValidatingStreamVersion();
    // private System.Void set_ValidatingStreamVersion(System.Int32 value)
    // Offset: 0x144A974
    void set_ValidatingStreamVersion(int value);
    // public System.Single get_FollowTargetAttachment()
    // Offset: 0x144A97C
    float get_FollowTargetAttachment();
    // public System.Void set_FollowTargetAttachment(System.Single value)
    // Offset: 0x144A984
    void set_FollowTargetAttachment(float value);
    // public System.Single get_LookAtTargetAttachment()
    // Offset: 0x144A98C
    float get_LookAtTargetAttachment();
    // public System.Void set_LookAtTargetAttachment(System.Single value)
    // Offset: 0x144A994
    void set_LookAtTargetAttachment(float value);
    // public System.String get_Name()
    // Offset: 0x144AEB0
    ::StringW get_Name();
    // public System.String get_Description()
    // Offset: 0x144AEB8
    ::StringW get_Description();
    // public System.Int32 get_Priority()
    // Offset: 0x144AF00
    int get_Priority();
    // public System.Void set_Priority(System.Int32 value)
    // Offset: 0x144AF08
    void set_Priority(int value);
    // public UnityEngine.GameObject get_VirtualCameraGameObject()
    // Offset: 0x144AF10
    ::UnityEngine::GameObject* get_VirtualCameraGameObject();
    // public System.Boolean get_IsValid()
    // Offset: 0x144AF9C
    bool get_IsValid();
    // public Cinemachine.CameraState get_State()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Cinemachine::CameraState get_State();
    // public Cinemachine.ICinemachineCamera get_ParentCamera()
    // Offset: 0x144AE74
    ::Cinemachine::ICinemachineCamera* get_ParentCamera();
    // public UnityEngine.Transform get_LookAt()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Transform* get_LookAt();
    // public System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_LookAt(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_Follow()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Transform* get_Follow();
    // public System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Follow(::UnityEngine::Transform* value);
    // public System.Boolean get_PreviousStateIsValid()
    // Offset: 0x144B0E8
    bool get_PreviousStateIsValid();
    // public System.Void set_PreviousStateIsValid(System.Boolean value)
    // Offset: 0x144B0F0
    void set_PreviousStateIsValid(bool value);
    // protected System.Void .ctor()
    // Offset: 0x144A758
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineVirtualCameraBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineVirtualCameraBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineVirtualCameraBase*, creationType>()));
    }
    // public System.Single GetMaxDampTime()
    // Offset: 0x1446F5C
    float GetMaxDampTime();
    // public System.Single DetachedFollowTargetDamp(System.Single initial, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x1445CFC
    float DetachedFollowTargetDamp(float initial, float dampTime, float deltaTime);
    // public UnityEngine.Vector3 DetachedFollowTargetDamp(UnityEngine.Vector3 initial, UnityEngine.Vector3 dampTime, System.Single deltaTime)
    // Offset: 0x1445DC0
    ::UnityEngine::Vector3 DetachedFollowTargetDamp(::UnityEngine::Vector3 initial, ::UnityEngine::Vector3 dampTime, float deltaTime);
    // public UnityEngine.Vector3 DetachedFollowTargetDamp(UnityEngine.Vector3 initial, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x144A99C
    ::UnityEngine::Vector3 DetachedFollowTargetDamp(::UnityEngine::Vector3 initial, float dampTime, float deltaTime);
    // public System.Single DetachedLookAtTargetDamp(System.Single initial, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x144AA78
    float DetachedLookAtTargetDamp(float initial, float dampTime, float deltaTime);
    // public UnityEngine.Vector3 DetachedLookAtTargetDamp(UnityEngine.Vector3 initial, UnityEngine.Vector3 dampTime, System.Single deltaTime)
    // Offset: 0x144AB3C
    ::UnityEngine::Vector3 DetachedLookAtTargetDamp(::UnityEngine::Vector3 initial, ::UnityEngine::Vector3 dampTime, float deltaTime);
    // public UnityEngine.Vector3 DetachedLookAtTargetDamp(UnityEngine.Vector3 initial, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x144AC70
    ::UnityEngine::Vector3 DetachedLookAtTargetDamp(::UnityEngine::Vector3 initial, float dampTime, float deltaTime);
    // public System.Void AddExtension(Cinemachine.CinemachineExtension extension)
    // Offset: 0x144AD4C
    void AddExtension(::Cinemachine::CinemachineExtension* extension);
    // public System.Void RemoveExtension(Cinemachine.CinemachineExtension extension)
    // Offset: 0x144AE00
    void RemoveExtension(::Cinemachine::CinemachineExtension* extension);
    // protected System.Void InvokePostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState newState, System.Single deltaTime)
    // Offset: 0x1449AB4
    void InvokePostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> newState, float deltaTime);
    // protected System.Void InvokePrePipelineMutateCameraStateCallback(Cinemachine.CinemachineVirtualCameraBase vcam, ref Cinemachine.CameraState newState, System.Single deltaTime)
    // Offset: 0x14498F4
    void InvokePrePipelineMutateCameraStateCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> newState, float deltaTime);
    // protected System.Boolean InvokeOnTransitionInExtensions(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x144A478
    bool InvokeOnTransitionInExtensions(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected System.Void ApplyPositionBlendMethod(ref Cinemachine.CameraState state, Cinemachine.CinemachineVirtualCameraBase/Cinemachine.BlendHint hint)
    // Offset: 0x1447CB0
    void ApplyPositionBlendMethod(ByRef<::Cinemachine::CameraState> state, ::Cinemachine::CinemachineVirtualCameraBase::BlendHint hint);
    // public System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x144B0E0
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public System.Void UpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x144A5E0
    void UpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // public System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x144A420
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected System.Void OnDestroy()
    // Offset: 0x1448778
    void OnDestroy();
    // protected System.Void OnTransformParentChanged()
    // Offset: 0x144B0FC
    void OnTransformParentChanged();
    // protected System.Void Start()
    // Offset: 0x144B2A0
    void Start();
    // System.Void EnsureStarted()
    // Offset: 0x144B2AC
    void EnsureStarted();
    // public Cinemachine.AxisState/Cinemachine.IInputAxisProvider GetInputAxisProvider()
    // Offset: 0x144B364
    ::Cinemachine::AxisState::IInputAxisProvider* GetInputAxisProvider();
    // protected System.Void OnValidate()
    // Offset: 0x1448828
    void OnValidate();
    // protected System.Void OnEnable()
    // Offset: 0x1447EE4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x144B424
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x144B4A4
    void Update();
    // private System.Void UpdateSlaveStatus()
    // Offset: 0x144B014
    void UpdateSlaveStatus();
    // protected UnityEngine.Transform ResolveLookAt(UnityEngine.Transform localLookAt)
    // Offset: 0x1446C18
    ::UnityEngine::Transform* ResolveLookAt(::UnityEngine::Transform* localLookAt);
    // protected UnityEngine.Transform ResolveFollow(UnityEngine.Transform localFollow)
    // Offset: 0x1446D44
    ::UnityEngine::Transform* ResolveFollow(::UnityEngine::Transform* localFollow);
    // private System.Void UpdateVcamPoolStatus()
    // Offset: 0x144B19C
    void UpdateVcamPoolStatus();
    // public System.Void MoveToTopOfPrioritySubqueue()
    // Offset: 0x1446BFC
    void MoveToTopOfPrioritySubqueue();
    // public System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x1449E58
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x144A090
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // protected Cinemachine.CinemachineBlend CreateBlend(Cinemachine.ICinemachineCamera camA, Cinemachine.ICinemachineCamera camB, Cinemachine.CinemachineBlendDefinition blendDef, Cinemachine.CinemachineBlend activeBlend)
    // Offset: 0x144B4BC
    ::Cinemachine::CinemachineBlend* CreateBlend(::Cinemachine::ICinemachineCamera* camA, ::Cinemachine::ICinemachineCamera* camB, ::Cinemachine::CinemachineBlendDefinition blendDef, ::Cinemachine::CinemachineBlend* activeBlend);
    // protected Cinemachine.CameraState PullStateFromVirtualCamera(UnityEngine.Vector3 worldUp, ref Cinemachine.LensSettings lens)
    // Offset: 0x1448118
    ::Cinemachine::CameraState PullStateFromVirtualCamera(::UnityEngine::Vector3 worldUp, ByRef<::Cinemachine::LensSettings> lens);
  }; // Cinemachine.CinemachineVirtualCameraBase
  #pragma pack(pop)
  static check_size<sizeof(CinemachineVirtualCameraBase), 96 + sizeof(int)> __Cinemachine_CinemachineVirtualCameraBaseSizeCheck;
  static_assert(sizeof(CinemachineVirtualCameraBase) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineVirtualCameraBase::StandbyUpdateMode, "Cinemachine", "CinemachineVirtualCameraBase/StandbyUpdateMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_ValidatingStreamVersion
// Il2CppName: get_ValidatingStreamVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_ValidatingStreamVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_ValidatingStreamVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_ValidatingStreamVersion
// Il2CppName: set_ValidatingStreamVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(int)>(&Cinemachine::CinemachineVirtualCameraBase::set_ValidatingStreamVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_ValidatingStreamVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_FollowTargetAttachment
// Il2CppName: get_FollowTargetAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_FollowTargetAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_FollowTargetAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_FollowTargetAttachment
// Il2CppName: set_FollowTargetAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(float)>(&Cinemachine::CinemachineVirtualCameraBase::set_FollowTargetAttachment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_FollowTargetAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_LookAtTargetAttachment
// Il2CppName: get_LookAtTargetAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_LookAtTargetAttachment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_LookAtTargetAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_LookAtTargetAttachment
// Il2CppName: set_LookAtTargetAttachment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(float)>(&Cinemachine::CinemachineVirtualCameraBase::set_LookAtTargetAttachment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_LookAtTargetAttachment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_Priority
// Il2CppName: get_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_Priority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(int)>(&Cinemachine::CinemachineVirtualCameraBase::set_Priority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_VirtualCameraGameObject
// Il2CppName: get_VirtualCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_VirtualCameraGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_VirtualCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_ParentCamera
// Il2CppName: get_ParentCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_ParentCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_ParentCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCameraBase::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCameraBase::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::get_PreviousStateIsValid
// Il2CppName: get_PreviousStateIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::get_PreviousStateIsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "get_PreviousStateIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::set_PreviousStateIsValid
// Il2CppName: set_PreviousStateIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(bool)>(&Cinemachine::CinemachineVirtualCameraBase::set_PreviousStateIsValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "set_PreviousStateIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp
// Il2CppName: DetachedFollowTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCameraBase::*)(float, float, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedFollowTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp
// Il2CppName: DetachedFollowTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedFollowTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp
// Il2CppName: DetachedFollowTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, float, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedFollowTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedFollowTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp
// Il2CppName: DetachedLookAtTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineVirtualCameraBase::*)(float, float, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp
// Il2CppName: DetachedLookAtTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp
// Il2CppName: DetachedLookAtTargetDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, float, float)>(&Cinemachine::CinemachineVirtualCameraBase::DetachedLookAtTargetDamp)> {
  static const MethodInfo* get() {
    static auto* initial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dampTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "DetachedLookAtTargetDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initial, dampTime, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::AddExtension
// Il2CppName: AddExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::CinemachineExtension*)>(&Cinemachine::CinemachineVirtualCameraBase::AddExtension)> {
  static const MethodInfo* get() {
    static auto* extension = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "AddExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extension});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::RemoveExtension
// Il2CppName: RemoveExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::CinemachineExtension*)>(&Cinemachine::CinemachineVirtualCameraBase::RemoveExtension)> {
  static const MethodInfo* get() {
    static auto* extension = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineExtension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "RemoveExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extension});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::InvokePostPipelineStageCallback
// Il2CppName: InvokePostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineVirtualCameraBase::InvokePostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "InvokePostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, newState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::InvokePrePipelineMutateCameraStateCallback
// Il2CppName: InvokePrePipelineMutateCameraStateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::CinemachineVirtualCameraBase*, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineVirtualCameraBase::InvokePrePipelineMutateCameraStateCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "InvokePrePipelineMutateCameraStateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, newState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::InvokeOnTransitionInExtensions
// Il2CppName: InvokeOnTransitionInExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::InvokeOnTransitionInExtensions)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "InvokeOnTransitionInExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::ApplyPositionBlendMethod
// Il2CppName: ApplyPositionBlendMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(ByRef<::Cinemachine::CameraState>, ::Cinemachine::CinemachineVirtualCameraBase::BlendHint)>(&Cinemachine::CinemachineVirtualCameraBase::ApplyPositionBlendMethod)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase/BlendHint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "ApplyPositionBlendMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, hint});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineVirtualCameraBase::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::UpdateCameraState
// Il2CppName: UpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::UpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "UpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineVirtualCameraBase::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnTransformParentChanged
// Il2CppName: OnTransformParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::OnTransformParentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnTransformParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::EnsureStarted
// Il2CppName: EnsureStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::EnsureStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "EnsureStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::GetInputAxisProvider
// Il2CppName: GetInputAxisProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::AxisState::IInputAxisProvider* (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::GetInputAxisProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "GetInputAxisProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::UpdateSlaveStatus
// Il2CppName: UpdateSlaveStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::UpdateSlaveStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "UpdateSlaveStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::ResolveLookAt
// Il2CppName: ResolveLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCameraBase::ResolveLookAt)> {
  static const MethodInfo* get() {
    static auto* localLookAt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "ResolveLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localLookAt});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::ResolveFollow
// Il2CppName: ResolveFollow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineVirtualCameraBase::ResolveFollow)> {
  static const MethodInfo* get() {
    static auto* localFollow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "ResolveFollow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localFollow});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::UpdateVcamPoolStatus
// Il2CppName: UpdateVcamPoolStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::UpdateVcamPoolStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "UpdateVcamPoolStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::MoveToTopOfPrioritySubqueue
// Il2CppName: MoveToTopOfPrioritySubqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)()>(&Cinemachine::CinemachineVirtualCameraBase::MoveToTopOfPrioritySubqueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "MoveToTopOfPrioritySubqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineVirtualCameraBase::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineVirtualCameraBase::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::CreateBlend
// Il2CppName: CreateBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlend* (Cinemachine::CinemachineVirtualCameraBase::*)(::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*, ::Cinemachine::CinemachineBlendDefinition, ::Cinemachine::CinemachineBlend*)>(&Cinemachine::CinemachineVirtualCameraBase::CreateBlend)> {
  static const MethodInfo* get() {
    static auto* camA = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* camB = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* blendDef = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBlendDefinition")->byval_arg;
    static auto* activeBlend = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBlend")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "CreateBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camA, camB, blendDef, activeBlend});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineVirtualCameraBase::PullStateFromVirtualCamera
// Il2CppName: PullStateFromVirtualCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineVirtualCameraBase::*)(::UnityEngine::Vector3, ByRef<::Cinemachine::LensSettings>)>(&Cinemachine::CinemachineVirtualCameraBase::PullStateFromVirtualCamera)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* lens = &::il2cpp_utils::GetClassFromName("Cinemachine", "LensSettings")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineVirtualCameraBase*), "PullStateFromVirtualCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, lens});
  }
};
