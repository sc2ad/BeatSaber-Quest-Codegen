// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlenderSettings
  class CinemachineBlenderSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineBlenderSettings);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBlenderSettings*, "Cinemachine", "CinemachineBlenderSettings");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineBlenderSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987410
  // [HelpURLAttribute] Offset: 987410
  class CinemachineBlenderSettings : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::Cinemachine::CinemachineBlenderSettings::CustomBlend
    struct CustomBlend;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineBlenderSettings/Cinemachine.CustomBlend
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987AC4
    struct CustomBlend/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x98DE8C
      // public System.String m_From
      // Size: 0x8
      // Offset: 0x0
      ::StringW m_From;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // [TooltipAttribute] Offset: 0x98DEC4
      // public System.String m_To
      // Size: 0x8
      // Offset: 0x8
      ::StringW m_To;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // [CinemachineBlendDefinitionPropertyAttribute] Offset: 0x98DEFC
      // [TooltipAttribute] Offset: 0x98DEFC
      // public Cinemachine.CinemachineBlendDefinition m_Blend
      // Size: 0x10
      // Offset: 0x10
      ::Cinemachine::CinemachineBlendDefinition m_Blend;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineBlendDefinition) == 0x10);
      public:
      // Creating value type constructor for type: CustomBlend
      constexpr CustomBlend(::StringW m_From_ = {}, ::StringW m_To_ = {}, ::Cinemachine::CinemachineBlendDefinition m_Blend_ = {}) noexcept : m_From{m_From_}, m_To{m_To_}, m_Blend{m_Blend_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String m_From
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_From();
      // Get instance field reference: public System.String m_To
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_To();
      // Get instance field reference: public Cinemachine.CinemachineBlendDefinition m_Blend
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& dyn_m_Blend();
    }; // Cinemachine.CinemachineBlenderSettings/Cinemachine.CustomBlend
    #pragma pack(pop)
    static check_size<sizeof(CinemachineBlenderSettings::CustomBlend), 16 + sizeof(::Cinemachine::CinemachineBlendDefinition)> __Cinemachine_CinemachineBlenderSettings_CustomBlendSizeCheck;
    static_assert(sizeof(CinemachineBlenderSettings::CustomBlend) == 0x20);
    public:
    // [TooltipAttribute] Offset: 0x98C518
    // public Cinemachine.CinemachineBlenderSettings/Cinemachine.CustomBlend[] m_CustomBlends
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend> m_CustomBlends;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String kBlendFromAnyCameraLabel
    static constexpr const char* kBlendFromAnyCameraLabel = "**ANY CAMERA**";
    // Get static field: static public System.String kBlendFromAnyCameraLabel
    static ::StringW _get_kBlendFromAnyCameraLabel();
    // Set static field: static public System.String kBlendFromAnyCameraLabel
    static void _set_kBlendFromAnyCameraLabel(::StringW value);
    // Get instance field reference: public Cinemachine.CinemachineBlenderSettings/Cinemachine.CustomBlend[] m_CustomBlends
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend>& dyn_m_CustomBlends();
    // public System.Void .ctor()
    // Offset: 0x1404370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineBlenderSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBlenderSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineBlenderSettings*, creationType>()));
    }
    // public Cinemachine.CinemachineBlendDefinition GetBlendForVirtualCameras(System.String fromCameraName, System.String toCameraName, Cinemachine.CinemachineBlendDefinition defaultBlend)
    // Offset: 0x140413C
    ::Cinemachine::CinemachineBlendDefinition GetBlendForVirtualCameras(::StringW fromCameraName, ::StringW toCameraName, ::Cinemachine::CinemachineBlendDefinition defaultBlend);
  }; // Cinemachine.CinemachineBlenderSettings
  #pragma pack(pop)
  static check_size<sizeof(CinemachineBlenderSettings), 24 + sizeof(::ArrayW<::Cinemachine::CinemachineBlenderSettings::CustomBlend>)> __Cinemachine_CinemachineBlenderSettingsSizeCheck;
  static_assert(sizeof(CinemachineBlenderSettings) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBlenderSettings::CustomBlend, "Cinemachine", "CinemachineBlenderSettings/CustomBlend");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineBlenderSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineBlenderSettings::GetBlendForVirtualCameras
// Il2CppName: GetBlendForVirtualCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlendDefinition (Cinemachine::CinemachineBlenderSettings::*)(::StringW, ::StringW, ::Cinemachine::CinemachineBlendDefinition)>(&Cinemachine::CinemachineBlenderSettings::GetBlendForVirtualCameras)> {
  static const MethodInfo* get() {
    static auto* fromCameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* toCameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultBlend = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBlendDefinition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBlenderSettings*), "GetBlendForVirtualCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCameraName, toCameraName, defaultBlend});
  }
};
