// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.TargetPositionCache
#include "Cinemachine/TargetPositionCache.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item
#include "Cinemachine/TargetPositionCache_CacheCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::TargetPositionCache::CacheEntry);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::CacheEntry*, "Cinemachine", "TargetPositionCache/CacheEntry");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.TargetPositionCache/Cinemachine.CacheEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class TargetPositionCache::CacheEntry : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem
    struct RecordingItem;
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.TargetPositionCache/Cinemachine.CacheEntry/Cinemachine.RecordingItem
    // [TokenAttribute] Offset: FFFFFFFF
    struct RecordingItem/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single Time
      // Size: 0x4
      // Offset: 0x0
      float Time;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Boolean IsCut
      // Size: 0x1
      // Offset: 0x4
      bool IsCut;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: IsCut and: Item
      char __padding1[0x3] = {};
      // public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item Item
      // Size: 0x1C
      // Offset: 0x8
      ::Cinemachine::TargetPositionCache::CacheCurve::Item Item;
      // Field size check
      static_assert(sizeof(::Cinemachine::TargetPositionCache::CacheCurve::Item) == 0x1C);
      public:
      // Creating value type constructor for type: RecordingItem
      constexpr RecordingItem(float Time_ = {}, bool IsCut_ = {}, ::Cinemachine::TargetPositionCache::CacheCurve::Item Item_ = {}) noexcept : Time{Time_}, IsCut{IsCut_}, Item{Item_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Single Time
      [[deprecated("Use field access instead!")]] float& dyn_Time();
      // Get instance field reference: public System.Boolean IsCut
      [[deprecated("Use field access instead!")]] bool& dyn_IsCut();
      // Get instance field reference: public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve/Cinemachine.Item Item
      [[deprecated("Use field access instead!")]] ::Cinemachine::TargetPositionCache::CacheCurve::Item& dyn_Item();
    }; // Cinemachine.TargetPositionCache/Cinemachine.CacheEntry/Cinemachine.RecordingItem
    #pragma pack(pop)
    static check_size<sizeof(TargetPositionCache::CacheEntry::RecordingItem), 8 + sizeof(::Cinemachine::TargetPositionCache::CacheCurve::Item)> __Cinemachine_TargetPositionCache_CacheEntry_RecordingItemSizeCheck;
    static_assert(sizeof(TargetPositionCache::CacheEntry::RecordingItem) == 0x24);
    public:
    // public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve Curve
    // Size: 0x8
    // Offset: 0x10
    ::Cinemachine::TargetPositionCache::CacheCurve* Curve;
    // Field size check
    static_assert(sizeof(::Cinemachine::TargetPositionCache::CacheCurve*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/Cinemachine.CacheEntry/Cinemachine.RecordingItem> RawItems
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>* RawItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>*) == 0x8);
    public:
    // Get instance field reference: public Cinemachine.TargetPositionCache/Cinemachine.CacheCurve Curve
    [[deprecated("Use field access instead!")]] ::Cinemachine::TargetPositionCache::CacheCurve*& dyn_Curve();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.TargetPositionCache/Cinemachine.CacheEntry/Cinemachine.RecordingItem> RawItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>*& dyn_RawItems();
    // public System.Void .ctor()
    // Offset: 0x1B9CC04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TargetPositionCache::CacheEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::TargetPositionCache::CacheEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TargetPositionCache::CacheEntry*, creationType>()));
    }
    // public System.Void AddRawItem(System.Single time, System.Boolean isCut, UnityEngine.Transform target)
    // Offset: 0x1B9C728
    void AddRawItem(float time, bool isCut, ::UnityEngine::Transform* target);
    // public System.Void CreateCurves()
    // Offset: 0x1B9C978
    void CreateCurves();
  }; // Cinemachine.TargetPositionCache/Cinemachine.CacheEntry
  #pragma pack(pop)
  static check_size<sizeof(TargetPositionCache::CacheEntry), 24 + sizeof(::System::Collections::Generic::List_1<::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem>*)> __Cinemachine_TargetPositionCache_CacheEntrySizeCheck;
  static_assert(sizeof(TargetPositionCache::CacheEntry) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::TargetPositionCache::CacheEntry::RecordingItem, "Cinemachine", "TargetPositionCache/CacheEntry/RecordingItem");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheEntry::AddRawItem
// Il2CppName: AddRawItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::TargetPositionCache::CacheEntry::*)(float, bool, ::UnityEngine::Transform*)>(&Cinemachine::TargetPositionCache::CacheEntry::AddRawItem)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isCut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheEntry*), "AddRawItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, isCut, target});
  }
};
// Writing MetadataGetter for method: Cinemachine::TargetPositionCache::CacheEntry::CreateCurves
// Il2CppName: CreateCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::TargetPositionCache::CacheEntry::*)()>(&Cinemachine::TargetPositionCache::CacheEntry::CreateCurves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::TargetPositionCache::CacheEntry*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
