// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine::Utility
namespace Cinemachine::Utility {
  // Forward declaring type: PositionPredictor
  class PositionPredictor;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
  // Forward declaring type: LensSettings
  struct LensSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineComposer
  class CinemachineComposer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineComposer);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineComposer*, "Cinemachine", "CinemachineComposer");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x128
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineComposer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987028
  // [AddComponentMenu] Offset: 987028
  // [SaveDuringPlayAttribute] Offset: 987028
  class CinemachineComposer : public ::Cinemachine::CinemachineComponentBase {
    public:
    // Nested type: ::Cinemachine::CinemachineComposer::FovCache
    struct FovCache;
    // Size: 0x50
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineComposer/Cinemachine.FovCache
    // [TokenAttribute] Offset: FFFFFFFF
    struct FovCache/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Rect mFovSoftGuideRect
      // Size: 0x10
      // Offset: 0x0
      ::UnityEngine::Rect mFovSoftGuideRect;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      // public UnityEngine.Rect mFovHardGuideRect
      // Size: 0x10
      // Offset: 0x10
      ::UnityEngine::Rect mFovHardGuideRect;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      // public System.Single mFovH
      // Size: 0x4
      // Offset: 0x20
      float mFovH;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single mFov
      // Size: 0x4
      // Offset: 0x24
      float mFov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single mOrthoSizeOverDistance
      // Size: 0x4
      // Offset: 0x28
      float mOrthoSizeOverDistance;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Single mAspect
      // Size: 0x4
      // Offset: 0x2C
      float mAspect;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private UnityEngine.Rect mSoftGuideRect
      // Size: 0x10
      // Offset: 0x30
      ::UnityEngine::Rect mSoftGuideRect;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      // private UnityEngine.Rect mHardGuideRect
      // Size: 0x10
      // Offset: 0x40
      ::UnityEngine::Rect mHardGuideRect;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rect) == 0x10);
      public:
      // Creating value type constructor for type: FovCache
      constexpr FovCache(::UnityEngine::Rect mFovSoftGuideRect_ = {}, ::UnityEngine::Rect mFovHardGuideRect_ = {}, float mFovH_ = {}, float mFov_ = {}, float mOrthoSizeOverDistance_ = {}, float mAspect_ = {}, ::UnityEngine::Rect mSoftGuideRect_ = {}, ::UnityEngine::Rect mHardGuideRect_ = {}) noexcept : mFovSoftGuideRect{mFovSoftGuideRect_}, mFovHardGuideRect{mFovHardGuideRect_}, mFovH{mFovH_}, mFov{mFov_}, mOrthoSizeOverDistance{mOrthoSizeOverDistance_}, mAspect{mAspect_}, mSoftGuideRect{mSoftGuideRect_}, mHardGuideRect{mHardGuideRect_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Rect mFovSoftGuideRect
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_mFovSoftGuideRect();
      // Get instance field reference: public UnityEngine.Rect mFovHardGuideRect
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_mFovHardGuideRect();
      // Get instance field reference: public System.Single mFovH
      [[deprecated("Use field access instead!")]] float& dyn_mFovH();
      // Get instance field reference: public System.Single mFov
      [[deprecated("Use field access instead!")]] float& dyn_mFov();
      // Get instance field reference: private System.Single mOrthoSizeOverDistance
      [[deprecated("Use field access instead!")]] float& dyn_mOrthoSizeOverDistance();
      // Get instance field reference: private System.Single mAspect
      [[deprecated("Use field access instead!")]] float& dyn_mAspect();
      // Get instance field reference: private UnityEngine.Rect mSoftGuideRect
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_mSoftGuideRect();
      // Get instance field reference: private UnityEngine.Rect mHardGuideRect
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_mHardGuideRect();
      // public System.Void UpdateCache(Cinemachine.LensSettings lens, UnityEngine.Rect softGuide, UnityEngine.Rect hardGuide, System.Single targetDistance)
      // Offset: 0xA5D080
      void UpdateCache(::Cinemachine::LensSettings lens, ::UnityEngine::Rect softGuide, ::UnityEngine::Rect hardGuide, float targetDistance);
      // private UnityEngine.Rect ScreenToFOV(UnityEngine.Rect rScreen, System.Single fov, System.Single fovH, System.Single aspect)
      // Offset: 0xA5D0BC
      ::UnityEngine::Rect ScreenToFOV(::UnityEngine::Rect rScreen, float fov, float fovH, float aspect);
    }; // Cinemachine.CinemachineComposer/Cinemachine.FovCache
    #pragma pack(pop)
    static check_size<sizeof(CinemachineComposer::FovCache), 64 + sizeof(::UnityEngine::Rect)> __Cinemachine_CinemachineComposer_FovCacheSizeCheck;
    static_assert(sizeof(CinemachineComposer::FovCache) == 0x50);
    public:
    // [TooltipAttribute] Offset: 0x98A414
    // public UnityEngine.Vector3 m_TrackedObjectOffset
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 m_TrackedObjectOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0x98A44C
    // [TooltipAttribute] Offset: 0x98A44C
    // [RangeAttribute] Offset: 0x98A44C
    // public System.Single m_LookaheadTime
    // Size: 0x4
    // Offset: 0x5C
    float m_LookaheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A4B0
    // [RangeAttribute] Offset: 0x98A4B0
    // public System.Single m_LookaheadSmoothing
    // Size: 0x4
    // Offset: 0x60
    float m_LookaheadSmoothing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A504
    // public System.Boolean m_LookaheadIgnoreY
    // Size: 0x1
    // Offset: 0x64
    bool m_LookaheadIgnoreY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_LookaheadIgnoreY and: m_HorizontalDamping
    char __padding3[0x3] = {};
    // [SpaceAttribute] Offset: 0x98A53C
    // [RangeAttribute] Offset: 0x98A53C
    // [TooltipAttribute] Offset: 0x98A53C
    // public System.Single m_HorizontalDamping
    // Size: 0x4
    // Offset: 0x68
    float m_HorizontalDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A5A0
    // [TooltipAttribute] Offset: 0x98A5A0
    // public System.Single m_VerticalDamping
    // Size: 0x4
    // Offset: 0x6C
    float m_VerticalDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x98A5F4
    // [RangeAttribute] Offset: 0x98A5F4
    // [TooltipAttribute] Offset: 0x98A5F4
    // public System.Single m_ScreenX
    // Size: 0x4
    // Offset: 0x70
    float m_ScreenX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A658
    // [TooltipAttribute] Offset: 0x98A658
    // public System.Single m_ScreenY
    // Size: 0x4
    // Offset: 0x74
    float m_ScreenY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A6AC
    // [TooltipAttribute] Offset: 0x98A6AC
    // public System.Single m_DeadZoneWidth
    // Size: 0x4
    // Offset: 0x78
    float m_DeadZoneWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A700
    // [TooltipAttribute] Offset: 0x98A700
    // public System.Single m_DeadZoneHeight
    // Size: 0x4
    // Offset: 0x7C
    float m_DeadZoneHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A754
    // [TooltipAttribute] Offset: 0x98A754
    // public System.Single m_SoftZoneWidth
    // Size: 0x4
    // Offset: 0x80
    float m_SoftZoneWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A7A8
    // [TooltipAttribute] Offset: 0x98A7A8
    // public System.Single m_SoftZoneHeight
    // Size: 0x4
    // Offset: 0x84
    float m_SoftZoneHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A7FC
    // [TooltipAttribute] Offset: 0x98A7FC
    // public System.Single m_BiasX
    // Size: 0x4
    // Offset: 0x88
    float m_BiasX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98A850
    // [TooltipAttribute] Offset: 0x98A850
    // public System.Single m_BiasY
    // Size: 0x4
    // Offset: 0x8C
    float m_BiasY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98A8A4
    // public System.Boolean m_CenterOnActivate
    // Size: 0x1
    // Offset: 0x90
    bool m_CenterOnActivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CenterOnActivate and: TrackedPoint
    char __padding14[0x3] = {};
    // private UnityEngine.Vector3 <TrackedPoint>k__BackingField
    // Size: 0xC
    // Offset: 0x94
    ::UnityEngine::Vector3 TrackedPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_CameraPosPrevFrame
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 m_CameraPosPrevFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_LookAtPrevFrame
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 m_LookAtPrevFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 m_ScreenOffsetPrevFrame
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Vector2 m_ScreenOffsetPrevFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Quaternion m_CameraOrientationPrevFrame
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Quaternion m_CameraOrientationPrevFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Cinemachine.Utility.PositionPredictor m_Predictor
    // Size: 0x8
    // Offset: 0xD0
    ::Cinemachine::Utility::PositionPredictor* m_Predictor;
    // Field size check
    static_assert(sizeof(::Cinemachine::Utility::PositionPredictor*) == 0x8);
    // private Cinemachine.CinemachineComposer/Cinemachine.FovCache mCache
    // Size: 0x50
    // Offset: 0xD8
    ::Cinemachine::CinemachineComposer::FovCache mCache;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineComposer::FovCache) == 0x50);
    public:
    // Get instance field reference: public UnityEngine.Vector3 m_TrackedObjectOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TrackedObjectOffset();
    // Get instance field reference: public System.Single m_LookaheadTime
    [[deprecated("Use field access instead!")]] float& dyn_m_LookaheadTime();
    // Get instance field reference: public System.Single m_LookaheadSmoothing
    [[deprecated("Use field access instead!")]] float& dyn_m_LookaheadSmoothing();
    // Get instance field reference: public System.Boolean m_LookaheadIgnoreY
    [[deprecated("Use field access instead!")]] bool& dyn_m_LookaheadIgnoreY();
    // Get instance field reference: public System.Single m_HorizontalDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_HorizontalDamping();
    // Get instance field reference: public System.Single m_VerticalDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_VerticalDamping();
    // Get instance field reference: public System.Single m_ScreenX
    [[deprecated("Use field access instead!")]] float& dyn_m_ScreenX();
    // Get instance field reference: public System.Single m_ScreenY
    [[deprecated("Use field access instead!")]] float& dyn_m_ScreenY();
    // Get instance field reference: public System.Single m_DeadZoneWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZoneWidth();
    // Get instance field reference: public System.Single m_DeadZoneHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZoneHeight();
    // Get instance field reference: public System.Single m_SoftZoneWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_SoftZoneWidth();
    // Get instance field reference: public System.Single m_SoftZoneHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_SoftZoneHeight();
    // Get instance field reference: public System.Single m_BiasX
    [[deprecated("Use field access instead!")]] float& dyn_m_BiasX();
    // Get instance field reference: public System.Single m_BiasY
    [[deprecated("Use field access instead!")]] float& dyn_m_BiasY();
    // Get instance field reference: public System.Boolean m_CenterOnActivate
    [[deprecated("Use field access instead!")]] bool& dyn_m_CenterOnActivate();
    // Get instance field reference: private UnityEngine.Vector3 <TrackedPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TrackedPoint$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 m_CameraPosPrevFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_CameraPosPrevFrame();
    // Get instance field reference: private UnityEngine.Vector3 m_LookAtPrevFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LookAtPrevFrame();
    // Get instance field reference: private UnityEngine.Vector2 m_ScreenOffsetPrevFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScreenOffsetPrevFrame();
    // Get instance field reference: private UnityEngine.Quaternion m_CameraOrientationPrevFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_CameraOrientationPrevFrame();
    // Get instance field reference: Cinemachine.Utility.PositionPredictor m_Predictor
    [[deprecated("Use field access instead!")]] ::Cinemachine::Utility::PositionPredictor*& dyn_m_Predictor();
    // Get instance field reference: private Cinemachine.CinemachineComposer/Cinemachine.FovCache mCache
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineComposer::FovCache& dyn_mCache();
    // public UnityEngine.Vector3 get_TrackedPoint()
    // Offset: 0x140E3DC
    ::UnityEngine::Vector3 get_TrackedPoint();
    // private System.Void set_TrackedPoint(UnityEngine.Vector3 value)
    // Offset: 0x140E3E8
    void set_TrackedPoint(::UnityEngine::Vector3 value);
    // UnityEngine.Rect get_SoftGuideRect()
    // Offset: 0x140F178
    ::UnityEngine::Rect get_SoftGuideRect();
    // System.Void set_SoftGuideRect(UnityEngine.Rect value)
    // Offset: 0x140F898
    void set_SoftGuideRect(::UnityEngine::Rect value);
    // UnityEngine.Rect get_HardGuideRect()
    // Offset: 0x140F1C4
    ::UnityEngine::Rect get_HardGuideRect();
    // System.Void set_HardGuideRect(UnityEngine.Rect value)
    // Offset: 0x140F9F8
    void set_HardGuideRect(::UnityEngine::Rect value);
    // protected UnityEngine.Vector3 GetLookAtPointAndSetTrackedPoint(UnityEngine.Vector3 lookAt, UnityEngine.Vector3 up, System.Single deltaTime)
    // Offset: 0x140E3F4
    ::UnityEngine::Vector3 GetLookAtPointAndSetTrackedPoint(::UnityEngine::Vector3 lookAt, ::UnityEngine::Vector3 up, float deltaTime);
    // private System.Void RotateToScreenBounds(ref Cinemachine.CameraState state, UnityEngine.Rect screenRect, UnityEngine.Vector3 trackedPoint, ref UnityEngine.Quaternion rigOrientation, System.Single fov, System.Single fovH, System.Single deltaTime)
    // Offset: 0x140F610
    void RotateToScreenBounds(ByRef<::Cinemachine::CameraState> state, ::UnityEngine::Rect screenRect, ::UnityEngine::Vector3 trackedPoint, ByRef<::UnityEngine::Quaternion> rigOrientation, float fov, float fovH, float deltaTime);
    // private System.Boolean ClampVerticalBounds(ref UnityEngine.Rect r, UnityEngine.Vector3 dir, UnityEngine.Vector3 up, System.Single fov)
    // Offset: 0x140FC1C
    bool ClampVerticalBounds(ByRef<::UnityEngine::Rect> r, ::UnityEngine::Vector3 dir, ::UnityEngine::Vector3 up, float fov);
    // public override System.Boolean get_IsValid()
    // Offset: 0x140E338
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0x140E3D4
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Cinemachine.Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public System.Void .ctor()
    // Offset: 0x140FE08
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineComposer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComposer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineComposer*, creationType>()));
    }
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x140E6B0
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x140E81C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Single GetMaxDampTime()
    // Offset: 0x140E830
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Single CinemachineComponentBase::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Void PrePipelineMutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x140E8A8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::PrePipelineMutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x140E920
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
  }; // Cinemachine.CinemachineComposer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineComposer), 216 + sizeof(::Cinemachine::CinemachineComposer::FovCache)> __Cinemachine_CinemachineComposerSizeCheck;
  static_assert(sizeof(CinemachineComposer) == 0x128);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineComposer::FovCache, "Cinemachine", "CinemachineComposer/FovCache");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::get_TrackedPoint
// Il2CppName: get_TrackedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::get_TrackedPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "get_TrackedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::set_TrackedPoint
// Il2CppName: set_TrackedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineComposer::set_TrackedPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "set_TrackedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::get_SoftGuideRect
// Il2CppName: get_SoftGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::get_SoftGuideRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "get_SoftGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::set_SoftGuideRect
// Il2CppName: set_SoftGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(::UnityEngine::Rect)>(&Cinemachine::CinemachineComposer::set_SoftGuideRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "set_SoftGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::get_HardGuideRect
// Il2CppName: get_HardGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::get_HardGuideRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "get_HardGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::set_HardGuideRect
// Il2CppName: set_HardGuideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(::UnityEngine::Rect)>(&Cinemachine::CinemachineComposer::set_HardGuideRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "set_HardGuideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::GetLookAtPointAndSetTrackedPoint
// Il2CppName: GetLookAtPointAndSetTrackedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineComposer::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineComposer::GetLookAtPointAndSetTrackedPoint)> {
  static const MethodInfo* get() {
    static auto* lookAt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "GetLookAtPointAndSetTrackedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lookAt, up, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::RotateToScreenBounds
// Il2CppName: RotateToScreenBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(ByRef<::Cinemachine::CameraState>, ::UnityEngine::Rect, ::UnityEngine::Vector3, ByRef<::UnityEngine::Quaternion>, float, float, float)>(&Cinemachine::CinemachineComposer::RotateToScreenBounds)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* trackedPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rigOrientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* fov = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fovH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "RotateToScreenBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, screenRect, trackedPoint, rigOrientation, fov, fovH, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::ClampVerticalBounds
// Il2CppName: ClampVerticalBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineComposer::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineComposer::ClampVerticalBounds)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fov = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "ClampVerticalBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, dir, up, fov});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineComposer::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineComposer::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineComposer::*)()>(&Cinemachine::CinemachineComposer::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::PrePipelineMutateCameraState
// Il2CppName: PrePipelineMutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineComposer::PrePipelineMutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "PrePipelineMutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComposer::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineComposer::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComposer*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
