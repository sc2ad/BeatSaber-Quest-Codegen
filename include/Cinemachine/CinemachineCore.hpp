// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.UpdateTracker
#include "Cinemachine/UpdateTracker.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: BrainEvent
  class CinemachineBrain_BrainEvent;
  // Skipping declaration: UpdateFilter because it is already included!
  // Forward declaring type: ICinemachineCamera
  class ICinemachineCamera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineCore
  class CinemachineCore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineCore);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineCore*, "Cinemachine", "CinemachineCore");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineCore
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineCore : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::CinemachineCore::Stage
    struct Stage;
    // Nested type: ::Cinemachine::CinemachineCore::AxisInputDelegate
    class AxisInputDelegate;
    // Nested type: ::Cinemachine::CinemachineCore::GetBlendOverrideDelegate
    class GetBlendOverrideDelegate;
    // Nested type: ::Cinemachine::CinemachineCore::UpdateStatus
    class UpdateStatus;
    // Nested type: ::Cinemachine::CinemachineCore::UpdateFilter
    struct UpdateFilter;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineCore/Cinemachine.UpdateFilter
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateFilter/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateFilter
      constexpr UpdateFilter(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Fixed
      static constexpr const int Fixed = 0;
      // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Fixed
      static ::Cinemachine::CinemachineCore::UpdateFilter _get_Fixed();
      // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Fixed
      static void _set_Fixed(::Cinemachine::CinemachineCore::UpdateFilter value);
      // static field const value: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Late
      static constexpr const int Late = 1;
      // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Late
      static ::Cinemachine::CinemachineCore::UpdateFilter _get_Late();
      // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Late
      static void _set_Late(::Cinemachine::CinemachineCore::UpdateFilter value);
      // static field const value: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Smart
      static constexpr const int Smart = 8;
      // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Smart
      static ::Cinemachine::CinemachineCore::UpdateFilter _get_Smart();
      // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter Smart
      static void _set_Smart(::Cinemachine::CinemachineCore::UpdateFilter value);
      // static field const value: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartFixed
      static constexpr const int SmartFixed = 8;
      // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartFixed
      static ::Cinemachine::CinemachineCore::UpdateFilter _get_SmartFixed();
      // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartFixed
      static void _set_SmartFixed(::Cinemachine::CinemachineCore::UpdateFilter value);
      // static field const value: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartLate
      static constexpr const int SmartLate = 9;
      // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartLate
      static ::Cinemachine::CinemachineCore::UpdateFilter _get_SmartLate();
      // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.UpdateFilter SmartLate
      static void _set_SmartLate(::Cinemachine::CinemachineCore::UpdateFilter value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineCore/Cinemachine.UpdateFilter
    #pragma pack(pop)
    static check_size<sizeof(CinemachineCore::UpdateFilter), 0 + sizeof(int)> __Cinemachine_CinemachineCore_UpdateFilterSizeCheck;
    static_assert(sizeof(CinemachineCore::UpdateFilter) == 0x4);
    public:
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain> mActiveBrains
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain*>* mActiveBrains;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain*>*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase> mActiveCameras
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>* mActiveCameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase>> mAllCameras
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*>* mAllCameras;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*>*) == 0x8);
    // private Cinemachine.CinemachineVirtualCameraBase mRoundRobinVcamLastFrame
    // Size: 0x8
    // Offset: 0x28
    ::Cinemachine::CinemachineVirtualCameraBase* mRoundRobinVcamLastFrame;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,Cinemachine.CinemachineCore/Cinemachine.UpdateStatus> mUpdateStatus
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::UpdateStatus*>* mUpdateStatus;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::UpdateStatus*>*) == 0x8);
    // private Cinemachine.CinemachineCore/Cinemachine.UpdateFilter <CurrentUpdateFilter>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    ::Cinemachine::CinemachineCore::UpdateFilter CurrentUpdateFilter;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineCore::UpdateFilter) == 0x4);
    public:
    // Get static field: static public readonly System.Int32 kStreamingVersion
    static int _get_kStreamingVersion();
    // Set static field: static public readonly System.Int32 kStreamingVersion
    static void _set_kStreamingVersion(int value);
    // Get static field: static public readonly System.String kVersionString
    static ::StringW _get_kVersionString();
    // Set static field: static public readonly System.String kVersionString
    static void _set_kVersionString(::StringW value);
    // Get static field: static private Cinemachine.CinemachineCore sInstance
    static ::Cinemachine::CinemachineCore* _get_sInstance();
    // Set static field: static private Cinemachine.CinemachineCore sInstance
    static void _set_sInstance(::Cinemachine::CinemachineCore* value);
    // Get static field: static public System.Boolean sShowHiddenObjects
    static bool _get_sShowHiddenObjects();
    // Set static field: static public System.Boolean sShowHiddenObjects
    static void _set_sShowHiddenObjects(bool value);
    // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.AxisInputDelegate GetInputAxis
    static ::Cinemachine::CinemachineCore::AxisInputDelegate* _get_GetInputAxis();
    // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.AxisInputDelegate GetInputAxis
    static void _set_GetInputAxis(::Cinemachine::CinemachineCore::AxisInputDelegate* value);
    // Get static field: static public System.Single UniformDeltaTimeOverride
    static float _get_UniformDeltaTimeOverride();
    // Set static field: static public System.Single UniformDeltaTimeOverride
    static void _set_UniformDeltaTimeOverride(float value);
    // Get static field: static public System.Single CurrentTimeOverride
    static float _get_CurrentTimeOverride();
    // Set static field: static public System.Single CurrentTimeOverride
    static void _set_CurrentTimeOverride(float value);
    // Get static field: static public Cinemachine.CinemachineCore/Cinemachine.GetBlendOverrideDelegate GetBlendOverride
    static ::Cinemachine::CinemachineCore::GetBlendOverrideDelegate* _get_GetBlendOverride();
    // Set static field: static public Cinemachine.CinemachineCore/Cinemachine.GetBlendOverrideDelegate GetBlendOverride
    static void _set_GetBlendOverride(::Cinemachine::CinemachineCore::GetBlendOverrideDelegate* value);
    // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent CameraUpdatedEvent
    static ::Cinemachine::CinemachineBrain_BrainEvent* _get_CameraUpdatedEvent();
    // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent CameraUpdatedEvent
    static void _set_CameraUpdatedEvent(::Cinemachine::CinemachineBrain_BrainEvent* value);
    // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent CameraCutEvent
    static ::Cinemachine::CinemachineBrain_BrainEvent* _get_CameraCutEvent();
    // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent CameraCutEvent
    static void _set_CameraCutEvent(::Cinemachine::CinemachineBrain_BrainEvent* value);
    // Get static field: static private System.Single mLastUpdateTime
    static float _get_mLastUpdateTime();
    // Set static field: static private System.Single mLastUpdateTime
    static void _set_mLastUpdateTime(float value);
    // Get static field: static private System.Int32 <FixedFrameCount>k__BackingField
    static int _get_$FixedFrameCount$k__BackingField();
    // Set static field: static private System.Int32 <FixedFrameCount>k__BackingField
    static void _set_$FixedFrameCount$k__BackingField(int value);
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain> mActiveBrains
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain*>*& dyn_mActiveBrains();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase> mActiveCameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*& dyn_mActiveCameras();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Cinemachine.CinemachineVirtualCameraBase>> mAllCameras
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Cinemachine::CinemachineVirtualCameraBase*>*>*& dyn_mAllCameras();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase mRoundRobinVcamLastFrame
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_mRoundRobinVcamLastFrame();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,Cinemachine.CinemachineCore/Cinemachine.UpdateStatus> mUpdateStatus
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::UpdateStatus*>*& dyn_mUpdateStatus();
    // Get instance field reference: private Cinemachine.CinemachineCore/Cinemachine.UpdateFilter <CurrentUpdateFilter>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineCore::UpdateFilter& dyn_$CurrentUpdateFilter$k__BackingField();
    // static public Cinemachine.CinemachineCore get_Instance()
    // Offset: 0x104D948
    static ::Cinemachine::CinemachineCore* get_Instance();
    // static public System.Single get_DeltaTime()
    // Offset: 0x104DAC4
    static float get_DeltaTime();
    // static public System.Single get_CurrentTime()
    // Offset: 0x104DB64
    static float get_CurrentTime();
    // public System.Int32 get_BrainCount()
    // Offset: 0x104DC04
    int get_BrainCount();
    // public System.Int32 get_VirtualCameraCount()
    // Offset: 0x104DDAC
    int get_VirtualCameraCount();
    // static private System.Int32 get_FixedFrameCount()
    // Offset: 0x104E2FC
    static int get_FixedFrameCount();
    // static private System.Void set_FixedFrameCount(System.Int32 value)
    // Offset: 0x104E364
    static void set_FixedFrameCount(int value);
    // Cinemachine.CinemachineCore/Cinemachine.UpdateFilter get_CurrentUpdateFilter()
    // Offset: 0x104EF28
    ::Cinemachine::CinemachineCore::UpdateFilter get_CurrentUpdateFilter();
    // System.Void set_CurrentUpdateFilter(Cinemachine.CinemachineCore/Cinemachine.UpdateFilter value)
    // Offset: 0x104EF30
    void set_CurrentUpdateFilter(::Cinemachine::CinemachineCore::UpdateFilter value);
    // public System.Void .ctor()
    // Offset: 0x104DA04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineCore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineCore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineCore*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x104F488
    static void _cctor();
    // public Cinemachine.CinemachineBrain GetActiveBrain(System.Int32 index)
    // Offset: 0x104DC54
    ::Cinemachine::CinemachineBrain* GetActiveBrain(int index);
    // System.Void AddActiveBrain(Cinemachine.CinemachineBrain brain)
    // Offset: 0x104DCCC
    void AddActiveBrain(::Cinemachine::CinemachineBrain* brain);
    // System.Void RemoveActiveBrain(Cinemachine.CinemachineBrain brain)
    // Offset: 0x104DD44
    void RemoveActiveBrain(::Cinemachine::CinemachineBrain* brain);
    // public Cinemachine.CinemachineVirtualCameraBase GetVirtualCamera(System.Int32 index)
    // Offset: 0x104DDFC
    ::Cinemachine::CinemachineVirtualCameraBase* GetVirtualCamera(int index);
    // System.Void AddActiveCamera(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104DE74
    void AddActiveCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // System.Void RemoveActiveCamera(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104DF54
    void RemoveActiveCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // System.Void CameraDestroyed(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104DFBC
    void CameraDestroyed(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // System.Void CameraEnabled(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104E090
    void CameraEnabled(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // System.Void CameraDisabled(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104E210
    void CameraDisabled(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // System.Void UpdateAllActiveVirtualCameras(System.Int32 layerMask, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x104E3D0
    void UpdateAllActiveVirtualCameras(int layerMask, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // System.Void UpdateVirtualCamera(Cinemachine.CinemachineVirtualCameraBase vcam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x104E900
    void UpdateVirtualCamera(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // static private System.Void InitializeModule()
    // Offset: 0x104EE90
    static void InitializeModule();
    // static private UnityEngine.Transform GetUpdateTarget(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104ED10
    static ::UnityEngine::Transform* GetUpdateTarget(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // Cinemachine.UpdateTracker/Cinemachine.UpdateClock GetVcamUpdateStatus(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104EF38
    ::Cinemachine::UpdateTracker::UpdateClock GetVcamUpdateStatus(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // public System.Boolean IsLive(Cinemachine.ICinemachineCamera vcam)
    // Offset: 0x104E80C
    bool IsLive(::Cinemachine::ICinemachineCamera* vcam);
    // public System.Void GenerateCameraActivationEvent(Cinemachine.ICinemachineCamera vcam, Cinemachine.ICinemachineCamera vcamFrom)
    // Offset: 0x104EFC4
    void GenerateCameraActivationEvent(::Cinemachine::ICinemachineCamera* vcam, ::Cinemachine::ICinemachineCamera* vcamFrom);
    // public System.Void GenerateCameraCutEvent(Cinemachine.ICinemachineCamera vcam)
    // Offset: 0x104F0D8
    void GenerateCameraCutEvent(::Cinemachine::ICinemachineCamera* vcam);
    // public Cinemachine.CinemachineBrain FindPotentialTargetBrain(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x104F248
    ::Cinemachine::CinemachineBrain* FindPotentialTargetBrain(::Cinemachine::CinemachineVirtualCameraBase* vcam);
  }; // Cinemachine.CinemachineCore
  #pragma pack(pop)
  static check_size<sizeof(CinemachineCore), 56 + sizeof(::Cinemachine::CinemachineCore::UpdateFilter)> __Cinemachine_CinemachineCoreSizeCheck;
  static_assert(sizeof(CinemachineCore) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineCore::UpdateFilter, "Cinemachine", "CinemachineCore/UpdateFilter");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore* (*)()>(&Cinemachine::CinemachineCore::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_DeltaTime
// Il2CppName: get_DeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Cinemachine::CinemachineCore::get_DeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_DeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_CurrentTime
// Il2CppName: get_CurrentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Cinemachine::CinemachineCore::get_CurrentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_CurrentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_BrainCount
// Il2CppName: get_BrainCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineCore::*)()>(&Cinemachine::CinemachineCore::get_BrainCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_BrainCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_VirtualCameraCount
// Il2CppName: get_VirtualCameraCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineCore::*)()>(&Cinemachine::CinemachineCore::get_VirtualCameraCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_VirtualCameraCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_FixedFrameCount
// Il2CppName: get_FixedFrameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Cinemachine::CinemachineCore::get_FixedFrameCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_FixedFrameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::set_FixedFrameCount
// Il2CppName: set_FixedFrameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Cinemachine::CinemachineCore::set_FixedFrameCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "set_FixedFrameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::get_CurrentUpdateFilter
// Il2CppName: get_CurrentUpdateFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::UpdateFilter (Cinemachine::CinemachineCore::*)()>(&Cinemachine::CinemachineCore::get_CurrentUpdateFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "get_CurrentUpdateFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::set_CurrentUpdateFilter
// Il2CppName: set_CurrentUpdateFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineCore::UpdateFilter)>(&Cinemachine::CinemachineCore::set_CurrentUpdateFilter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/UpdateFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "set_CurrentUpdateFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineCore::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GetActiveBrain
// Il2CppName: GetActiveBrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBrain* (Cinemachine::CinemachineCore::*)(int)>(&Cinemachine::CinemachineCore::GetActiveBrain)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GetActiveBrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::AddActiveBrain
// Il2CppName: AddActiveBrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::CinemachineCore::AddActiveBrain)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "AddActiveBrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::RemoveActiveBrain
// Il2CppName: RemoveActiveBrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::CinemachineCore::RemoveActiveBrain)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "RemoveActiveBrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GetVirtualCamera
// Il2CppName: GetVirtualCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineVirtualCameraBase* (Cinemachine::CinemachineCore::*)(int)>(&Cinemachine::CinemachineCore::GetVirtualCamera)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GetVirtualCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::AddActiveCamera
// Il2CppName: AddActiveCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::AddActiveCamera)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "AddActiveCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::RemoveActiveCamera
// Il2CppName: RemoveActiveCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::RemoveActiveCamera)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "RemoveActiveCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::CameraDestroyed
// Il2CppName: CameraDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::CameraDestroyed)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "CameraDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::CameraEnabled
// Il2CppName: CameraEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::CameraEnabled)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "CameraEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::CameraDisabled
// Il2CppName: CameraDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::CameraDisabled)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "CameraDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::UpdateAllActiveVirtualCameras
// Il2CppName: UpdateAllActiveVirtualCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(int, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineCore::UpdateAllActiveVirtualCameras)> {
  static const MethodInfo* get() {
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "UpdateAllActiveVirtualCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerMask, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::UpdateVirtualCamera
// Il2CppName: UpdateVirtualCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineCore::UpdateVirtualCamera)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "UpdateVirtualCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::InitializeModule
// Il2CppName: InitializeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineCore::InitializeModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "InitializeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GetUpdateTarget
// Il2CppName: GetUpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::GetUpdateTarget)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GetUpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GetVcamUpdateStatus
// Il2CppName: GetVcamUpdateStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::UpdateTracker::UpdateClock (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::GetVcamUpdateStatus)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GetVcamUpdateStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::IsLive
// Il2CppName: IsLive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineCore::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCore::IsLive)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "IsLive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GenerateCameraActivationEvent
// Il2CppName: GenerateCameraActivationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCore::GenerateCameraActivationEvent)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* vcamFrom = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GenerateCameraActivationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, vcamFrom});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::GenerateCameraCutEvent
// Il2CppName: GenerateCameraCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineCore::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineCore::GenerateCameraCutEvent)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "GenerateCameraCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineCore::FindPotentialTargetBrain
// Il2CppName: FindPotentialTargetBrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBrain* (Cinemachine::CinemachineCore::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineCore::FindPotentialTargetBrain)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineCore*), "FindPotentialTargetBrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
