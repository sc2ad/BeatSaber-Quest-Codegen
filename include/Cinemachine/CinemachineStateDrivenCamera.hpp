// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: UnityEngine.AnimatorClipInfo
#include "UnityEngine/AnimatorClipInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlenderSettings
  class CinemachineBlenderSettings;
  // Skipping declaration: ICinemachineCamera because it is already included!
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineStateDrivenCamera
  class CinemachineStateDrivenCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineStateDrivenCamera);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStateDrivenCamera*, "Cinemachine", "CinemachineStateDrivenCamera");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x218
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineStateDrivenCamera
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986CEC
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 986CEC
  // [HelpURLAttribute] Offset: 986CEC
  class CinemachineStateDrivenCamera : public ::Cinemachine::CinemachineVirtualCameraBase {
    public:
    // Writing base type padding for base size: 0x64 to desired offset: 0x68
    char ___base_padding[0x4] = {};
    // Nested type: ::Cinemachine::CinemachineStateDrivenCamera::Instruction
    struct Instruction;
    // Nested type: ::Cinemachine::CinemachineStateDrivenCamera::ParentHash
    struct ParentHash;
    // Nested type: ::Cinemachine::CinemachineStateDrivenCamera::HashPair
    struct HashPair;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction
    // [TokenAttribute] Offset: FFFFFFFF
    struct Instruction/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x98D968
      // public System.Int32 m_FullHash
      // Size: 0x4
      // Offset: 0x0
      int m_FullHash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: m_FullHash and: m_VirtualCamera
      char __padding0[0x4] = {};
      // [TooltipAttribute] Offset: 0x98D9A0
      // public Cinemachine.CinemachineVirtualCameraBase m_VirtualCamera
      // Size: 0x8
      // Offset: 0x8
      ::Cinemachine::CinemachineVirtualCameraBase* m_VirtualCamera;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
      // [TooltipAttribute] Offset: 0x98D9D8
      // public System.Single m_ActivateAfter
      // Size: 0x4
      // Offset: 0x10
      float m_ActivateAfter;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // [TooltipAttribute] Offset: 0x98DA10
      // public System.Single m_MinDuration
      // Size: 0x4
      // Offset: 0x14
      float m_MinDuration;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Instruction
      constexpr Instruction(int m_FullHash_ = {}, ::Cinemachine::CinemachineVirtualCameraBase* m_VirtualCamera_ = {}, float m_ActivateAfter_ = {}, float m_MinDuration_ = {}) noexcept : m_FullHash{m_FullHash_}, m_VirtualCamera{m_VirtualCamera_}, m_ActivateAfter{m_ActivateAfter_}, m_MinDuration{m_MinDuration_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 m_FullHash
      [[deprecated("Use field access instead!")]] int& dyn_m_FullHash();
      // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase m_VirtualCamera
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_m_VirtualCamera();
      // Get instance field reference: public System.Single m_ActivateAfter
      [[deprecated("Use field access instead!")]] float& dyn_m_ActivateAfter();
      // Get instance field reference: public System.Single m_MinDuration
      [[deprecated("Use field access instead!")]] float& dyn_m_MinDuration();
    }; // Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction
    #pragma pack(pop)
    static check_size<sizeof(CinemachineStateDrivenCamera::Instruction), 20 + sizeof(float)> __Cinemachine_CinemachineStateDrivenCamera_InstructionSizeCheck;
    static_assert(sizeof(CinemachineStateDrivenCamera::Instruction) == 0x18);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineStateDrivenCamera/Cinemachine.ParentHash
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 9879B4
    struct ParentHash/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 m_Hash
      // Size: 0x4
      // Offset: 0x0
      int m_Hash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 m_ParentHash
      // Size: 0x4
      // Offset: 0x4
      int m_ParentHash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ParentHash
      constexpr ParentHash(int m_Hash_ = {}, int m_ParentHash_ = {}) noexcept : m_Hash{m_Hash_}, m_ParentHash{m_ParentHash_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 m_Hash
      [[deprecated("Use field access instead!")]] int& dyn_m_Hash();
      // Get instance field reference: public System.Int32 m_ParentHash
      [[deprecated("Use field access instead!")]] int& dyn_m_ParentHash();
      // public System.Void .ctor(System.Int32 h, System.Int32 p)
      // Offset: 0xA5D538
      // ABORTED: conflicts with another method.  ParentHash(int h, int p);
    }; // Cinemachine.CinemachineStateDrivenCamera/Cinemachine.ParentHash
    #pragma pack(pop)
    static check_size<sizeof(CinemachineStateDrivenCamera::ParentHash), 4 + sizeof(int)> __Cinemachine_CinemachineStateDrivenCamera_ParentHashSizeCheck;
    static_assert(sizeof(CinemachineStateDrivenCamera::ParentHash) == 0x8);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineStateDrivenCamera/Cinemachine.HashPair
    // [TokenAttribute] Offset: FFFFFFFF
    struct HashPair/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 parentHash
      // Size: 0x4
      // Offset: 0x0
      int parentHash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 hash
      // Size: 0x4
      // Offset: 0x4
      int hash;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HashPair
      constexpr HashPair(int parentHash_ = {}, int hash_ = {}) noexcept : parentHash{parentHash_}, hash{hash_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 parentHash
      [[deprecated("Use field access instead!")]] int& dyn_parentHash();
      // Get instance field reference: public System.Int32 hash
      [[deprecated("Use field access instead!")]] int& dyn_hash();
    }; // Cinemachine.CinemachineStateDrivenCamera/Cinemachine.HashPair
    #pragma pack(pop)
    static check_size<sizeof(CinemachineStateDrivenCamera::HashPair), 4 + sizeof(int)> __Cinemachine_CinemachineStateDrivenCamera_HashPairSizeCheck;
    static_assert(sizeof(CinemachineStateDrivenCamera::HashPair) == 0x8);
    public:
    // [TooltipAttribute] Offset: 0x98980C
    // [NoSaveDuringPlayAttribute] Offset: 0x98980C
    // [VcamTargetPropertyAttribute] Offset: 0x98980C
    // public UnityEngine.Transform m_LookAt
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* m_LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x989868
    // [NoSaveDuringPlayAttribute] Offset: 0x989868
    // [VcamTargetPropertyAttribute] Offset: 0x989868
    // public UnityEngine.Transform m_Follow
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* m_Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [SpaceAttribute] Offset: 0x9898C4
    // [TooltipAttribute] Offset: 0x9898C4
    // [NoSaveDuringPlayAttribute] Offset: 0x9898C4
    // public UnityEngine.Animator m_AnimatedTarget
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Animator* m_AnimatedTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // [TooltipAttribute] Offset: 0x989920
    // [NoSaveDuringPlayAttribute] Offset: 0x989920
    // public System.Int32 m_LayerIndex
    // Size: 0x4
    // Offset: 0x80
    int m_LayerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x98996C
    // public System.Boolean m_ShowDebugText
    // Size: 0x1
    // Offset: 0x84
    bool m_ShowDebugText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShowDebugText and: m_ChildCameras
    char __padding4[0x3] = {};
    // [NoSaveDuringPlayAttribute] Offset: 0x9899A4
    // Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> m_ChildCameras;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>) == 0x8);
    // [TooltipAttribute] Offset: 0x9899EC
    // public Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction[] m_Instructions
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::Instruction> m_Instructions;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::Instruction>) == 0x8);
    // [CinemachineBlendDefinitionPropertyAttribute] Offset: 0x989A24
    // [TooltipAttribute] Offset: 0x989A24
    // public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    // Size: 0x10
    // Offset: 0x98
    ::Cinemachine::CinemachineBlendDefinition m_DefaultBlend;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlendDefinition) == 0x10);
    // [TooltipAttribute] Offset: 0x989A70
    // public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    // Size: 0x8
    // Offset: 0xA8
    ::Cinemachine::CinemachineBlenderSettings* m_CustomBlends;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlenderSettings*) == 0x8);
    // Cinemachine.CinemachineStateDrivenCamera/Cinemachine.ParentHash[] m_ParentHash
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::ParentHash> m_ParentHash;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::ParentHash>) == 0x8);
    // private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::Cinemachine::ICinemachineCamera* LiveChild;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
    // Size: 0x8
    // Offset: 0xC0
    ::Cinemachine::ICinemachineCamera* TransitioningFrom;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private Cinemachine.CameraState m_State
    // Size: 0xE4
    // Offset: 0xC8
    ::Cinemachine::CameraState m_State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    // Padding between fields: m_State and: mHashCache
    char __padding12[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<UnityEngine.AnimationClip,System.Collections.Generic.List`1<Cinemachine.CinemachineStateDrivenCamera/Cinemachine.HashPair>> mHashCache
    // Size: 0x8
    // Offset: 0x1B0
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::AnimationClip*, ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStateDrivenCamera::HashPair>*>* mHashCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::AnimationClip*, ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStateDrivenCamera::HashPair>*>*) == 0x8);
    // private System.Single mActivationTime
    // Size: 0x4
    // Offset: 0x1B8
    float mActivationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: mActivationTime and: mActiveInstruction
    char __padding14[0x4] = {};
    // private Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction mActiveInstruction
    // Size: 0x18
    // Offset: 0x1C0
    ::Cinemachine::CinemachineStateDrivenCamera::Instruction mActiveInstruction;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineStateDrivenCamera::Instruction) == 0x18);
    // private System.Single mPendingActivationTime
    // Size: 0x4
    // Offset: 0x1D8
    float mPendingActivationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: mPendingActivationTime and: mPendingInstruction
    char __padding16[0x4] = {};
    // private Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction mPendingInstruction
    // Size: 0x18
    // Offset: 0x1E0
    ::Cinemachine::CinemachineStateDrivenCamera::Instruction mPendingInstruction;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineStateDrivenCamera::Instruction) == 0x18);
    // private Cinemachine.CinemachineBlend mActiveBlend
    // Size: 0x8
    // Offset: 0x1F8
    ::Cinemachine::CinemachineBlend* mActiveBlend;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlend*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mInstructionDictionary
    // Size: 0x8
    // Offset: 0x200
    ::System::Collections::Generic::Dictionary_2<int, int>* mInstructionDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mStateParentLookup
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Generic::Dictionary_2<int, int>* mStateParentLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> m_clipInfoList
    // Size: 0x8
    // Offset: 0x210
    ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>* m_clipInfoList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform m_LookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_LookAt();
    // Get instance field reference: public UnityEngine.Transform m_Follow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Follow();
    // Get instance field reference: public UnityEngine.Animator m_AnimatedTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_m_AnimatedTarget();
    // Get instance field reference: public System.Int32 m_LayerIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_LayerIndex();
    // Get instance field reference: public System.Boolean m_ShowDebugText
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowDebugText();
    // Get instance field reference: Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& dyn_m_ChildCameras();
    // Get instance field reference: public Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction[] m_Instructions
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::Instruction>& dyn_m_Instructions();
    // Get instance field reference: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& dyn_m_DefaultBlend();
    // Get instance field reference: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& dyn_m_CustomBlends();
    // Get instance field reference: Cinemachine.CinemachineStateDrivenCamera/Cinemachine.ParentHash[] m_ParentHash
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineStateDrivenCamera::ParentHash>& dyn_m_ParentHash();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$LiveChild$k__BackingField();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <TransitioningFrom>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$TransitioningFrom$k__BackingField();
    // Get instance field reference: private Cinemachine.CameraState m_State
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_m_State();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.AnimationClip,System.Collections.Generic.List`1<Cinemachine.CinemachineStateDrivenCamera/Cinemachine.HashPair>> mHashCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::AnimationClip*, ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStateDrivenCamera::HashPair>*>*& dyn_mHashCache();
    // Get instance field reference: private System.Single mActivationTime
    [[deprecated("Use field access instead!")]] float& dyn_mActivationTime();
    // Get instance field reference: private Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction mActiveInstruction
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStateDrivenCamera::Instruction& dyn_mActiveInstruction();
    // Get instance field reference: private System.Single mPendingActivationTime
    [[deprecated("Use field access instead!")]] float& dyn_mPendingActivationTime();
    // Get instance field reference: private Cinemachine.CinemachineStateDrivenCamera/Cinemachine.Instruction mPendingInstruction
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStateDrivenCamera::Instruction& dyn_mPendingInstruction();
    // Get instance field reference: private Cinemachine.CinemachineBlend mActiveBlend
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& dyn_mActiveBlend();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mInstructionDictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_mInstructionDictionary();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> mStateParentLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_mStateParentLookup();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> m_clipInfoList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>*& dyn_m_clipInfoList();
    // public Cinemachine.ICinemachineCamera get_LiveChild()
    // Offset: 0x1062DF8
    ::Cinemachine::ICinemachineCamera* get_LiveChild();
    // public System.Void set_LiveChild(Cinemachine.ICinemachineCamera value)
    // Offset: 0x1062DF0
    void set_LiveChild(::Cinemachine::ICinemachineCamera* value);
    // private Cinemachine.ICinemachineCamera get_TransitioningFrom()
    // Offset: 0x1063274
    ::Cinemachine::ICinemachineCamera* get_TransitioningFrom();
    // private System.Void set_TransitioningFrom(Cinemachine.ICinemachineCamera value)
    // Offset: 0x106327C
    void set_TransitioningFrom(::Cinemachine::ICinemachineCamera* value);
    // public Cinemachine.CinemachineVirtualCameraBase[] get_ChildCameras()
    // Offset: 0x1064178
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> get_ChildCameras();
    // public System.Boolean get_IsBlending()
    // Offset: 0x106419C
    bool get_IsBlending();
    // public System.Void OnTransformChildrenChanged()
    // Offset: 0x1063FD4
    void OnTransformChildrenChanged();
    // private System.Void OnGuiHandler()
    // Offset: 0x1063FE0
    void OnGuiHandler();
    // static public System.Int32 CreateFakeHash(System.Int32 parentHash, UnityEngine.AnimationClip clip)
    // Offset: 0x10641AC
    static int CreateFakeHash(int parentHash, ::UnityEngine::AnimationClip* clip);
    // private System.Int32 LookupFakeHash(System.Int32 parentHash, UnityEngine.AnimationClip clip)
    // Offset: 0x1064240
    int LookupFakeHash(int parentHash, ::UnityEngine::AnimationClip* clip);
    // private System.Void InvalidateListOfChildren()
    // Offset: 0x1063EF8
    void InvalidateListOfChildren();
    // private System.Void UpdateListOfChildren()
    // Offset: 0x1062F2C
    void UpdateListOfChildren();
    // System.Void ValidateInstructions()
    // Offset: 0x106441C
    void ValidateInstructions();
    // private Cinemachine.CinemachineVirtualCameraBase ChooseCurrentCamera()
    // Offset: 0x10636B8
    ::Cinemachine::CinemachineVirtualCameraBase* ChooseCurrentCamera();
    // private System.Int32 GetClipHash(System.Int32 hash, System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> clips)
    // Offset: 0x1064680
    int GetClipHash(int hash, ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>* clips);
    // private Cinemachine.CinemachineBlendDefinition LookupBlend(Cinemachine.ICinemachineCamera fromKey, Cinemachine.ICinemachineCamera toKey)
    // Offset: 0x1063B7C
    ::Cinemachine::CinemachineBlendDefinition LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey);
    // public override System.String get_Description()
    // Offset: 0x1062CA4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.String CinemachineVirtualCameraBase::get_Description()
    ::StringW get_Description();
    // public override Cinemachine.CameraState get_State()
    // Offset: 0x1062E28
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: Cinemachine.CameraState CinemachineVirtualCameraBase::get_State()
    ::Cinemachine::CameraState get_State();
    // public override UnityEngine.Transform get_LookAt()
    // Offset: 0x1062E38
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_LookAt()
    ::UnityEngine::Transform* get_LookAt();
    // public override System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x1062E44
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_LookAt(UnityEngine.Transform value)
    void set_LookAt(::UnityEngine::Transform* value);
    // public override UnityEngine.Transform get_Follow()
    // Offset: 0x1062E4C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_Follow()
    ::UnityEngine::Transform* get_Follow();
    // public override System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x1062E58
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_Follow(UnityEngine.Transform value)
    void set_Follow(::UnityEngine::Transform* value);
    // public System.Void .ctor()
    // Offset: 0x1064824
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineStateDrivenCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStateDrivenCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineStateDrivenCamera*, creationType>()));
    }
    // public override System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x1062E00
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x1062E60
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x10630E8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public override System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x10631E8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // public override System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x1063284
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
    // protected override System.Void OnEnable()
    // Offset: 0x1063DC8
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1063F04
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnDisable()
    void OnDisable();
  }; // Cinemachine.CinemachineStateDrivenCamera
  #pragma pack(pop)
  static check_size<sizeof(CinemachineStateDrivenCamera), 528 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>*)> __Cinemachine_CinemachineStateDrivenCameraSizeCheck;
  static_assert(sizeof(CinemachineStateDrivenCamera) == 0x218);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStateDrivenCamera::HashPair, "Cinemachine", "CinemachineStateDrivenCamera/HashPair");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStateDrivenCamera::ParentHash, "Cinemachine", "CinemachineStateDrivenCamera/ParentHash");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStateDrivenCamera::Instruction, "Cinemachine", "CinemachineStateDrivenCamera/Instruction");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_LiveChild
// Il2CppName: get_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_LiveChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::set_LiveChild
// Il2CppName: set_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineStateDrivenCamera::set_LiveChild)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "set_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_TransitioningFrom
// Il2CppName: get_TransitioningFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_TransitioningFrom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_TransitioningFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::set_TransitioningFrom
// Il2CppName: set_TransitioningFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineStateDrivenCamera::set_TransitioningFrom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "set_TransitioningFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_ChildCameras
// Il2CppName: get_ChildCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_ChildCameras)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_ChildCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_IsBlending
// Il2CppName: get_IsBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_IsBlending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_IsBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnGuiHandler
// Il2CppName: OnGuiHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::OnGuiHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnGuiHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::CreateFakeHash
// Il2CppName: CreateFakeHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::UnityEngine::AnimationClip*)>(&Cinemachine::CinemachineStateDrivenCamera::CreateFakeHash)> {
  static const MethodInfo* get() {
    static auto* parentHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "CreateFakeHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentHash, clip});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::LookupFakeHash
// Il2CppName: LookupFakeHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineStateDrivenCamera::*)(int, ::UnityEngine::AnimationClip*)>(&Cinemachine::CinemachineStateDrivenCamera::LookupFakeHash)> {
  static const MethodInfo* get() {
    static auto* parentHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "LookupFakeHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentHash, clip});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::InvalidateListOfChildren
// Il2CppName: InvalidateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::InvalidateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "InvalidateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::UpdateListOfChildren
// Il2CppName: UpdateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::UpdateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "UpdateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::ValidateInstructions
// Il2CppName: ValidateInstructions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::ValidateInstructions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "ValidateInstructions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::ChooseCurrentCamera
// Il2CppName: ChooseCurrentCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineVirtualCameraBase* (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::ChooseCurrentCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "ChooseCurrentCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::GetClipHash
// Il2CppName: GetClipHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineStateDrivenCamera::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::AnimatorClipInfo>*)>(&Cinemachine::CinemachineStateDrivenCamera::GetClipHash)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clips = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "AnimatorClipInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "GetClipHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, clips});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::LookupBlend
// Il2CppName: LookupBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlendDefinition (Cinemachine::CinemachineStateDrivenCamera::*)(::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineStateDrivenCamera::LookupBlend)> {
  static const MethodInfo* get() {
    static auto* fromKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* toKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "LookupBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromKey, toKey});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineStateDrivenCamera::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineStateDrivenCamera::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineStateDrivenCamera::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineStateDrivenCamera::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineStateDrivenCamera::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineStateDrivenCamera::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineStateDrivenCamera::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineStateDrivenCamera::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStateDrivenCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStateDrivenCamera::*)()>(&Cinemachine::CinemachineStateDrivenCamera::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStateDrivenCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
