// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineComponentBase
#include "Cinemachine/CinemachineComponentBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CameraState
  struct CameraState;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineTransposer
  class CinemachineTransposer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineTransposer);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTransposer*, "Cinemachine", "CinemachineTransposer");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineTransposer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987388
  // [AddComponentMenu] Offset: 987388
  // [SaveDuringPlayAttribute] Offset: 987388
  class CinemachineTransposer : public ::Cinemachine::CinemachineComponentBase {
    public:
    // Nested type: ::Cinemachine::CinemachineTransposer::BindingMode
    struct BindingMode;
    // Nested type: ::Cinemachine::CinemachineTransposer::AngularDampingMode
    struct AngularDampingMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineTransposer/Cinemachine.BindingMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987A88
    struct BindingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BindingMode
      constexpr BindingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetOnAssign
      static constexpr const int LockToTargetOnAssign = 0;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetOnAssign
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_LockToTargetOnAssign();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetOnAssign
      static void _set_LockToTargetOnAssign(::Cinemachine::CinemachineTransposer::BindingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetWithWorldUp
      static constexpr const int LockToTargetWithWorldUp = 1;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetWithWorldUp
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_LockToTargetWithWorldUp();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetWithWorldUp
      static void _set_LockToTargetWithWorldUp(::Cinemachine::CinemachineTransposer::BindingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetNoRoll
      static constexpr const int LockToTargetNoRoll = 2;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetNoRoll
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_LockToTargetNoRoll();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTargetNoRoll
      static void _set_LockToTargetNoRoll(::Cinemachine::CinemachineTransposer::BindingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTarget
      static constexpr const int LockToTarget = 3;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTarget
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_LockToTarget();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode LockToTarget
      static void _set_LockToTarget(::Cinemachine::CinemachineTransposer::BindingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode WorldSpace
      static constexpr const int WorldSpace = 4;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode WorldSpace
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_WorldSpace();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode WorldSpace
      static void _set_WorldSpace(::Cinemachine::CinemachineTransposer::BindingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode SimpleFollowWithWorldUp
      static constexpr const int SimpleFollowWithWorldUp = 5;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode SimpleFollowWithWorldUp
      static ::Cinemachine::CinemachineTransposer::BindingMode _get_SimpleFollowWithWorldUp();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode SimpleFollowWithWorldUp
      static void _set_SimpleFollowWithWorldUp(::Cinemachine::CinemachineTransposer::BindingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineTransposer/Cinemachine.BindingMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTransposer::BindingMode), 0 + sizeof(int)> __Cinemachine_CinemachineTransposer_BindingModeSizeCheck;
    static_assert(sizeof(CinemachineTransposer::BindingMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct AngularDampingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AngularDampingMode
      constexpr AngularDampingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Euler
      static constexpr const int Euler = 0;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Euler
      static ::Cinemachine::CinemachineTransposer::AngularDampingMode _get_Euler();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Euler
      static void _set_Euler(::Cinemachine::CinemachineTransposer::AngularDampingMode value);
      // static field const value: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Quaternion
      static constexpr const int Quaternion = 1;
      // Get static field: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Quaternion
      static ::Cinemachine::CinemachineTransposer::AngularDampingMode _get_Quaternion();
      // Set static field: static public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode Quaternion
      static void _set_Quaternion(::Cinemachine::CinemachineTransposer::AngularDampingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTransposer::AngularDampingMode), 0 + sizeof(int)> __Cinemachine_CinemachineTransposer_AngularDampingModeSizeCheck;
    static_assert(sizeof(CinemachineTransposer::AngularDampingMode) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x98BD04
    // public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode m_BindingMode
    // Size: 0x4
    // Offset: 0x50
    ::Cinemachine::CinemachineTransposer::BindingMode m_BindingMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTransposer::BindingMode) == 0x4);
    // [TooltipAttribute] Offset: 0x98BD3C
    // public UnityEngine.Vector3 m_FollowOffset
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 m_FollowOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [RangeAttribute] Offset: 0x98BD74
    // [TooltipAttribute] Offset: 0x98BD74
    // public System.Single m_XDamping
    // Size: 0x4
    // Offset: 0x60
    float m_XDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98BDC8
    // [TooltipAttribute] Offset: 0x98BDC8
    // public System.Single m_YDamping
    // Size: 0x4
    // Offset: 0x64
    float m_YDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98BE1C
    // [TooltipAttribute] Offset: 0x98BE1C
    // public System.Single m_ZDamping
    // Size: 0x4
    // Offset: 0x68
    float m_ZDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode m_AngularDampingMode
    // Size: 0x4
    // Offset: 0x6C
    ::Cinemachine::CinemachineTransposer::AngularDampingMode m_AngularDampingMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTransposer::AngularDampingMode) == 0x4);
    // [RangeAttribute] Offset: 0x98BE70
    // [TooltipAttribute] Offset: 0x98BE70
    // public System.Single m_PitchDamping
    // Size: 0x4
    // Offset: 0x70
    float m_PitchDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98BEC4
    // [TooltipAttribute] Offset: 0x98BEC4
    // public System.Single m_YawDamping
    // Size: 0x4
    // Offset: 0x74
    float m_YawDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98BF18
    // [TooltipAttribute] Offset: 0x98BF18
    // public System.Single m_RollDamping
    // Size: 0x4
    // Offset: 0x78
    float m_RollDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98BF6C
    // [TooltipAttribute] Offset: 0x98BF6C
    // public System.Single m_AngularDamping
    // Size: 0x4
    // Offset: 0x7C
    float m_AngularDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <HideOffsetInInspector>k__BackingField
    // Size: 0x1
    // Offset: 0x80
    bool HideOffsetInInspector;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HideOffsetInInspector and: m_PreviousTargetPosition
    char __padding10[0x3] = {};
    // private UnityEngine.Vector3 m_PreviousTargetPosition
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::Vector3 m_PreviousTargetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_PreviousReferenceOrientation
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Quaternion m_PreviousReferenceOrientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion m_targetOrientationOnAssign
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Quaternion m_targetOrientationOnAssign;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 m_PreviousOffset
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 m_PreviousOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: m_PreviousOffset and: m_previousTarget
    char __padding14[0x4] = {};
    // private UnityEngine.Transform m_previousTarget
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* m_previousTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Get instance field reference: public Cinemachine.CinemachineTransposer/Cinemachine.BindingMode m_BindingMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::BindingMode& dyn_m_BindingMode();
    // Get instance field reference: public UnityEngine.Vector3 m_FollowOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_FollowOffset();
    // Get instance field reference: public System.Single m_XDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_XDamping();
    // Get instance field reference: public System.Single m_YDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_YDamping();
    // Get instance field reference: public System.Single m_ZDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_ZDamping();
    // Get instance field reference: public Cinemachine.CinemachineTransposer/Cinemachine.AngularDampingMode m_AngularDampingMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTransposer::AngularDampingMode& dyn_m_AngularDampingMode();
    // Get instance field reference: public System.Single m_PitchDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_PitchDamping();
    // Get instance field reference: public System.Single m_YawDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_YawDamping();
    // Get instance field reference: public System.Single m_RollDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_RollDamping();
    // Get instance field reference: public System.Single m_AngularDamping
    [[deprecated("Use field access instead!")]] float& dyn_m_AngularDamping();
    // Get instance field reference: private System.Boolean <HideOffsetInInspector>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HideOffsetInInspector$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 m_PreviousTargetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousTargetPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_PreviousReferenceOrientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_PreviousReferenceOrientation();
    // Get instance field reference: private UnityEngine.Quaternion m_targetOrientationOnAssign
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_targetOrientationOnAssign();
    // Get instance field reference: private UnityEngine.Vector3 m_PreviousOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousOffset();
    // Get instance field reference: private UnityEngine.Transform m_previousTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_previousTarget();
    // public System.Boolean get_HideOffsetInInspector()
    // Offset: 0x14443FC
    bool get_HideOffsetInInspector();
    // public System.Void set_HideOffsetInInspector(System.Boolean value)
    // Offset: 0x1444404
    void set_HideOffsetInInspector(bool value);
    // public UnityEngine.Vector3 get_EffectiveOffset()
    // Offset: 0x1444368
    ::UnityEngine::Vector3 get_EffectiveOffset();
    // protected UnityEngine.Vector3 get_Damping()
    // Offset: 0x14445A8
    ::UnityEngine::Vector3 get_Damping();
    // protected UnityEngine.Vector3 get_AngularDamping()
    // Offset: 0x1444608
    ::UnityEngine::Vector3 get_AngularDamping();
    // protected System.Void OnValidate()
    // Offset: 0x1444340
    void OnValidate();
    // protected System.Void InitPrevFrameStateInfo(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x144496C
    void InitPrevFrameStateInfo(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // protected System.Void TrackTarget(System.Single deltaTime, UnityEngine.Vector3 up, UnityEngine.Vector3 desiredCameraOffset, out UnityEngine.Vector3 outTargetPosition, out UnityEngine.Quaternion outTargetOrient)
    // Offset: 0x1444B04
    void TrackTarget(float deltaTime, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 desiredCameraOffset, ByRef<::UnityEngine::Vector3> outTargetPosition, ByRef<::UnityEngine::Quaternion> outTargetOrient);
    // protected UnityEngine.Vector3 GetOffsetForMinimumTargetDistance(UnityEngine.Vector3 dampedTargetPos, UnityEngine.Vector3 cameraOffset, UnityEngine.Vector3 cameraFwd, UnityEngine.Vector3 up, UnityEngine.Vector3 actualTargetPos)
    // Offset: 0x1445280
    ::UnityEngine::Vector3 GetOffsetForMinimumTargetDistance(::UnityEngine::Vector3 dampedTargetPos, ::UnityEngine::Vector3 cameraOffset, ::UnityEngine::Vector3 cameraFwd, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 actualTargetPos);
    // public UnityEngine.Vector3 GetTargetCameraPosition(UnityEngine.Vector3 worldUp)
    // Offset: 0x1445EF4
    ::UnityEngine::Vector3 GetTargetCameraPosition(::UnityEngine::Vector3 worldUp);
    // public UnityEngine.Quaternion GetReferenceOrientation(UnityEngine.Vector3 worldUp)
    // Offset: 0x1445974
    ::UnityEngine::Quaternion GetReferenceOrientation(::UnityEngine::Vector3 worldUp);
    // public override System.Boolean get_IsValid()
    // Offset: 0x1444410
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Boolean CinemachineComponentBase::get_IsValid()
    bool get_IsValid();
    // public override Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0x14444B0
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: Cinemachine.CinemachineCore/Cinemachine.Stage CinemachineComponentBase::get_Stage()
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public System.Void .ctor()
    // Offset: 0x1446094
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineTransposer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTransposer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineTransposer*, creationType>()));
    }
    // public override System.Single GetMaxDampTime()
    // Offset: 0x14444B8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Single CinemachineComponentBase::GetMaxDampTime()
    float GetMaxDampTime();
    // public override System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x14446F8
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x144569C
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x14457C0
    // Implemented from: Cinemachine.CinemachineComponentBase
    // Base method: System.Void CinemachineComponentBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
  }; // Cinemachine.CinemachineTransposer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineTransposer), 192 + sizeof(::UnityEngine::Transform*)> __Cinemachine_CinemachineTransposerSizeCheck;
  static_assert(sizeof(CinemachineTransposer) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTransposer::AngularDampingMode, "Cinemachine", "CinemachineTransposer/AngularDampingMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTransposer::BindingMode, "Cinemachine", "CinemachineTransposer/BindingMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_HideOffsetInInspector
// Il2CppName: get_HideOffsetInInspector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_HideOffsetInInspector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_HideOffsetInInspector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::set_HideOffsetInInspector
// Il2CppName: set_HideOffsetInInspector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(bool)>(&Cinemachine::CinemachineTransposer::set_HideOffsetInInspector)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "set_HideOffsetInInspector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_EffectiveOffset
// Il2CppName: get_EffectiveOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_EffectiveOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_EffectiveOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_Damping
// Il2CppName: get_Damping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_Damping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_Damping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_AngularDamping
// Il2CppName: get_AngularDamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_AngularDamping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_AngularDamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::InitPrevFrameStateInfo
// Il2CppName: InitPrevFrameStateInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineTransposer::InitPrevFrameStateInfo)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "InitPrevFrameStateInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::TrackTarget
// Il2CppName: TrackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&Cinemachine::CinemachineTransposer::TrackTarget)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* desiredCameraOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* outTargetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* outTargetOrient = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "TrackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime, up, desiredCameraOffset, outTargetPosition, outTargetOrient});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::GetOffsetForMinimumTargetDistance
// Il2CppName: GetOffsetForMinimumTargetDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineTransposer::GetOffsetForMinimumTargetDistance)> {
  static const MethodInfo* get() {
    static auto* dampedTargetPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* cameraOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* cameraFwd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* actualTargetPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "GetOffsetForMinimumTargetDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dampedTargetPos, cameraOffset, cameraFwd, up, actualTargetPos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::GetTargetCameraPosition
// Il2CppName: GetTargetCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineTransposer::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineTransposer::GetTargetCameraPosition)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "GetTargetCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::GetReferenceOrientation
// Il2CppName: GetReferenceOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachineTransposer::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineTransposer::GetReferenceOrientation)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "GetReferenceOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineTransposer::*)()>(&Cinemachine::CinemachineTransposer::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineTransposer::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineTransposer::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTransposer::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTransposer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineTransposer::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTransposer*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
