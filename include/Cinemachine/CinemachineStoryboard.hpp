// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineStoryboard
  class CinemachineStoryboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineStoryboard);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStoryboard*, "Cinemachine", "CinemachineStoryboard");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineStoryboard
  // [TokenAttribute] Offset: FFFFFFFF
  // [SaveDuringPlayAttribute] Offset: 986D90
  // [DocumentationSortingAttribute] Offset: 986D90
  // [AddComponentMenu] Offset: 986D90
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 986D90
  class CinemachineStoryboard : public ::Cinemachine::CinemachineExtension {
    public:
    // Nested type: ::Cinemachine::CinemachineStoryboard::FillStrategy
    struct FillStrategy;
    // Nested type: ::Cinemachine::CinemachineStoryboard::CanvasInfo
    class CanvasInfo;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy
    // [TokenAttribute] Offset: FFFFFFFF
    struct FillStrategy/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FillStrategy
      constexpr FillStrategy(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy BestFit
      static constexpr const int BestFit = 0;
      // Get static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy BestFit
      static ::Cinemachine::CinemachineStoryboard::FillStrategy _get_BestFit();
      // Set static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy BestFit
      static void _set_BestFit(::Cinemachine::CinemachineStoryboard::FillStrategy value);
      // static field const value: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy CropImageToFit
      static constexpr const int CropImageToFit = 1;
      // Get static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy CropImageToFit
      static ::Cinemachine::CinemachineStoryboard::FillStrategy _get_CropImageToFit();
      // Set static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy CropImageToFit
      static void _set_CropImageToFit(::Cinemachine::CinemachineStoryboard::FillStrategy value);
      // static field const value: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy StretchToFit
      static constexpr const int StretchToFit = 2;
      // Get static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy StretchToFit
      static ::Cinemachine::CinemachineStoryboard::FillStrategy _get_StretchToFit();
      // Set static field: static public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy StretchToFit
      static void _set_StretchToFit(::Cinemachine::CinemachineStoryboard::FillStrategy value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy
    #pragma pack(pop)
    static check_size<sizeof(CinemachineStoryboard::FillStrategy), 0 + sizeof(int)> __Cinemachine_CinemachineStoryboard_FillStrategySizeCheck;
    static_assert(sizeof(CinemachineStoryboard::FillStrategy) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x989B38
    // public System.Boolean m_ShowImage
    // Size: 0x1
    // Offset: 0x28
    bool m_ShowImage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShowImage and: m_Image
    char __padding0[0x7] = {};
    // [TooltipAttribute] Offset: 0x989B70
    // public UnityEngine.Texture m_Image
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture* m_Image;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // [TooltipAttribute] Offset: 0x989BA8
    // public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy m_Aspect
    // Size: 0x4
    // Offset: 0x38
    ::Cinemachine::CinemachineStoryboard::FillStrategy m_Aspect;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineStoryboard::FillStrategy) == 0x4);
    // [TooltipAttribute] Offset: 0x989BE0
    // [RangeAttribute] Offset: 0x989BE0
    // public System.Single m_Alpha
    // Size: 0x4
    // Offset: 0x3C
    float m_Alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x989C34
    // public UnityEngine.Vector2 m_Center
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 m_Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [TooltipAttribute] Offset: 0x989C6C
    // public UnityEngine.Vector3 m_Rotation
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 m_Rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x989CA4
    // public UnityEngine.Vector2 m_Scale
    // Size: 0x8
    // Offset: 0x54
    ::UnityEngine::Vector2 m_Scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [TooltipAttribute] Offset: 0x989CDC
    // public System.Boolean m_SyncScale
    // Size: 0x1
    // Offset: 0x5C
    bool m_SyncScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x989D14
    // public System.Boolean m_MuteCamera
    // Size: 0x1
    // Offset: 0x5D
    bool m_MuteCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MuteCamera and: m_SplitView
    char __padding8[0x2] = {};
    // [RangeAttribute] Offset: 0x989D4C
    // [TooltipAttribute] Offset: 0x989D4C
    // public System.Single m_SplitView
    // Size: 0x4
    // Offset: 0x60
    float m_SplitView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_SplitView and: mCanvasInfo
    char __padding9[0x4] = {};
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo> mCanvasInfo
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>* mCanvasInfo;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>*) == 0x8);
    public:
    // [TooltipAttribute] Offset: 0x989B00
    // Get static field: static public System.Boolean s_StoryboardGlobalMute
    static bool _get_s_StoryboardGlobalMute();
    // Set static field: static public System.Boolean s_StoryboardGlobalMute
    static void _set_s_StoryboardGlobalMute(bool value);
    // Get instance field reference: public System.Boolean m_ShowImage
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowImage();
    // Get instance field reference: public UnityEngine.Texture m_Image
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_Image();
    // Get instance field reference: public Cinemachine.CinemachineStoryboard/Cinemachine.FillStrategy m_Aspect
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineStoryboard::FillStrategy& dyn_m_Aspect();
    // Get instance field reference: public System.Single m_Alpha
    [[deprecated("Use field access instead!")]] float& dyn_m_Alpha();
    // Get instance field reference: public UnityEngine.Vector2 m_Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Center();
    // Get instance field reference: public UnityEngine.Vector3 m_Rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Rotation();
    // Get instance field reference: public UnityEngine.Vector2 m_Scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Scale();
    // Get instance field reference: public System.Boolean m_SyncScale
    [[deprecated("Use field access instead!")]] bool& dyn_m_SyncScale();
    // Get instance field reference: public System.Boolean m_MuteCamera
    [[deprecated("Use field access instead!")]] bool& dyn_m_MuteCamera();
    // Get instance field reference: public System.Single m_SplitView
    [[deprecated("Use field access instead!")]] float& dyn_m_SplitView();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo> mCanvasInfo
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>*& dyn_mCanvasInfo();
    // private System.String get_CanvasName()
    // Offset: 0x143FAAC
    ::StringW get_CanvasName();
    // private System.Void CameraUpdatedCallback(Cinemachine.CinemachineBrain brain)
    // Offset: 0x143FB40
    void CameraUpdatedCallback(::Cinemachine::CinemachineBrain* brain);
    // private Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo LocateMyCanvas(Cinemachine.CinemachineBrain parent, System.Boolean createIfNotFound)
    // Offset: 0x143FD28
    ::Cinemachine::CinemachineStoryboard::CanvasInfo* LocateMyCanvas(::Cinemachine::CinemachineBrain* parent, bool createIfNotFound);
    // private System.Void CreateCanvas(Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo ci)
    // Offset: 0x1440088
    void CreateCanvas(::Cinemachine::CinemachineStoryboard::CanvasInfo* ci);
    // private System.Void DestroyCanvas()
    // Offset: 0x143F8D4
    void DestroyCanvas();
    // private System.Void PlaceImage(Cinemachine.CinemachineStoryboard/Cinemachine.CanvasInfo ci, System.Single alpha)
    // Offset: 0x14404B4
    void PlaceImage(::Cinemachine::CinemachineStoryboard::CanvasInfo* ci, float alpha);
    // static private System.Void StaticBlendingHandler(Cinemachine.CinemachineBrain brain)
    // Offset: 0x1440B2C
    static void StaticBlendingHandler(::Cinemachine::CinemachineBrain* brain);
    // static private System.Void InitializeModule()
    // Offset: 0x1440D2C
    static void InitializeModule();
    // public System.Void .ctor()
    // Offset: 0x1440E38
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineStoryboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineStoryboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineStoryboard*, creationType>()));
    }
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x143F674
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
    // protected override System.Void ConnectToVcam(System.Boolean connect)
    // Offset: 0x143F770
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::ConnectToVcam(System.Boolean connect)
    void ConnectToVcam(bool connect);
  }; // Cinemachine.CinemachineStoryboard
  #pragma pack(pop)
  static check_size<sizeof(CinemachineStoryboard), 104 + sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineStoryboard::CanvasInfo*>*)> __Cinemachine_CinemachineStoryboardSizeCheck;
  static_assert(sizeof(CinemachineStoryboard) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineStoryboard::FillStrategy, "Cinemachine", "CinemachineStoryboard/FillStrategy");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::get_CanvasName
// Il2CppName: get_CanvasName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Cinemachine::CinemachineStoryboard::*)()>(&Cinemachine::CinemachineStoryboard::get_CanvasName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "get_CanvasName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::CameraUpdatedCallback
// Il2CppName: CameraUpdatedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::CinemachineStoryboard::CameraUpdatedCallback)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "CameraUpdatedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::LocateMyCanvas
// Il2CppName: LocateMyCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineStoryboard::CanvasInfo* (Cinemachine::CinemachineStoryboard::*)(::Cinemachine::CinemachineBrain*, bool)>(&Cinemachine::CinemachineStoryboard::LocateMyCanvas)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    static auto* createIfNotFound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "LocateMyCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, createIfNotFound});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::CreateCanvas
// Il2CppName: CreateCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)(::Cinemachine::CinemachineStoryboard::CanvasInfo*)>(&Cinemachine::CinemachineStoryboard::CreateCanvas)> {
  static const MethodInfo* get() {
    static auto* ci = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineStoryboard/CanvasInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "CreateCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ci});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::DestroyCanvas
// Il2CppName: DestroyCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)()>(&Cinemachine::CinemachineStoryboard::DestroyCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "DestroyCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::PlaceImage
// Il2CppName: PlaceImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)(::Cinemachine::CinemachineStoryboard::CanvasInfo*, float)>(&Cinemachine::CinemachineStoryboard::PlaceImage)> {
  static const MethodInfo* get() {
    static auto* ci = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineStoryboard/CanvasInfo")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "PlaceImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ci, alpha});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::StaticBlendingHandler
// Il2CppName: StaticBlendingHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::CinemachineBrain*)>(&Cinemachine::CinemachineStoryboard::StaticBlendingHandler)> {
  static const MethodInfo* get() {
    static auto* brain = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBrain")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "StaticBlendingHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{brain});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::InitializeModule
// Il2CppName: InitializeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineStoryboard::InitializeModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "InitializeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineStoryboard::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineStoryboard::ConnectToVcam
// Il2CppName: ConnectToVcam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineStoryboard::*)(bool)>(&Cinemachine::CinemachineStoryboard::ConnectToVcam)> {
  static const MethodInfo* get() {
    static auto* connect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineStoryboard*), "ConnectToVcam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connect});
  }
};
