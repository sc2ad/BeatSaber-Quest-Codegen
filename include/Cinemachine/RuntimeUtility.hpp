// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: RaycastHit
  struct RaycastHit;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: RuntimeUtility
  class RuntimeUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::RuntimeUtility);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::RuntimeUtility*, "Cinemachine", "RuntimeUtility");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.RuntimeUtility
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987510
  class RuntimeUtility : public ::Il2CppObject {
    public:
    // static public System.Void DestroyObject(UnityEngine.Object obj)
    // Offset: 0x1440414
    static void DestroyObject(::UnityEngine::Object* obj);
    // static public System.Boolean IsPrefab(UnityEngine.GameObject gameObject)
    // Offset: 0x1448E68
    static bool IsPrefab(::UnityEngine::GameObject* gameObject);
    // static public System.Boolean RaycastIgnoreTag(UnityEngine.Ray ray, out UnityEngine.RaycastHit hitInfo, System.Single rayLength, System.Int32 layerMask, in System.String ignoreTag)
    // Offset: 0x144F1F8
    static bool RaycastIgnoreTag(::UnityEngine::Ray ray, ByRef<::UnityEngine::RaycastHit> hitInfo, float rayLength, int layerMask, ByRef<::StringW> ignoreTag);
    // static public System.Boolean SphereCastIgnoreTag(UnityEngine.Vector3 rayStart, System.Single radius, UnityEngine.Vector3 dir, out UnityEngine.RaycastHit hitInfo, System.Single rayLength, System.Int32 layerMask, in System.String ignoreTag)
    // Offset: 0x144F488
    static bool SphereCastIgnoreTag(::UnityEngine::Vector3 rayStart, float radius, ::UnityEngine::Vector3 dir, ByRef<::UnityEngine::RaycastHit> hitInfo, float rayLength, int layerMask, ByRef<::StringW> ignoreTag);
  }; // Cinemachine.RuntimeUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::RuntimeUtility::DestroyObject
// Il2CppName: DestroyObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Object*)>(&Cinemachine::RuntimeUtility::DestroyObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::RuntimeUtility*), "DestroyObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Cinemachine::RuntimeUtility::IsPrefab
// Il2CppName: IsPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*)>(&Cinemachine::RuntimeUtility::IsPrefab)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::RuntimeUtility*), "IsPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Cinemachine::RuntimeUtility::RaycastIgnoreTag
// Il2CppName: RaycastIgnoreTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Ray, ByRef<::UnityEngine::RaycastHit>, float, int, ByRef<::StringW>)>(&Cinemachine::RuntimeUtility::RaycastIgnoreTag)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* rayLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ignoreTag = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::RuntimeUtility*), "RaycastIgnoreTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hitInfo, rayLength, layerMask, ignoreTag});
  }
};
// Writing MetadataGetter for method: Cinemachine::RuntimeUtility::SphereCastIgnoreTag
// Il2CppName: SphereCastIgnoreTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, float, ::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>, float, int, ByRef<::StringW>)>(&Cinemachine::RuntimeUtility::SphereCastIgnoreTag)> {
  static const MethodInfo* get() {
    static auto* rayStart = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* rayLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ignoreTag = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::RuntimeUtility*), "SphereCastIgnoreTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayStart, radius, dir, hitInfo, rayLength, layerMask, ignoreTag});
  }
};
