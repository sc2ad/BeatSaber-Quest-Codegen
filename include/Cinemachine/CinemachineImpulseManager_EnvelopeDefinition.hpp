// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineImpulseManager
#include "Cinemachine/CinemachineImpulseManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition, "Cinemachine", "CinemachineImpulseManager/EnvelopeDefinition");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x1E
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  struct CinemachineImpulseManager::EnvelopeDefinition/*, public ::System::ValueType*/ {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98E38C
    // public UnityEngine.AnimationCurve m_AttackShape
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::AnimationCurve* m_AttackShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0x98E3C4
    // public UnityEngine.AnimationCurve m_DecayShape
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::AnimationCurve* m_DecayShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0x98E3FC
    // public System.Single m_AttackTime
    // Size: 0x4
    // Offset: 0x10
    float m_AttackTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98E434
    // public System.Single m_SustainTime
    // Size: 0x4
    // Offset: 0x14
    float m_SustainTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98E46C
    // public System.Single m_DecayTime
    // Size: 0x4
    // Offset: 0x18
    float m_DecayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98E4A4
    // public System.Boolean m_ScaleWithImpact
    // Size: 0x1
    // Offset: 0x1C
    bool m_ScaleWithImpact;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x98E4DC
    // public System.Boolean m_HoldForever
    // Size: 0x1
    // Offset: 0x1D
    bool m_HoldForever;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: EnvelopeDefinition
    constexpr EnvelopeDefinition(::UnityEngine::AnimationCurve* m_AttackShape_ = {}, ::UnityEngine::AnimationCurve* m_DecayShape_ = {}, float m_AttackTime_ = {}, float m_SustainTime_ = {}, float m_DecayTime_ = {}, bool m_ScaleWithImpact_ = {}, bool m_HoldForever_ = {}) noexcept : m_AttackShape{m_AttackShape_}, m_DecayShape{m_DecayShape_}, m_AttackTime{m_AttackTime_}, m_SustainTime{m_SustainTime_}, m_DecayTime{m_DecayTime_}, m_ScaleWithImpact{m_ScaleWithImpact_}, m_HoldForever{m_HoldForever_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.AnimationCurve m_AttackShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_AttackShape();
    // Get instance field reference: public UnityEngine.AnimationCurve m_DecayShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_DecayShape();
    // Get instance field reference: public System.Single m_AttackTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AttackTime();
    // Get instance field reference: public System.Single m_SustainTime
    [[deprecated("Use field access instead!")]] float& dyn_m_SustainTime();
    // Get instance field reference: public System.Single m_DecayTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DecayTime();
    // Get instance field reference: public System.Boolean m_ScaleWithImpact
    [[deprecated("Use field access instead!")]] bool& dyn_m_ScaleWithImpact();
    // Get instance field reference: public System.Boolean m_HoldForever
    [[deprecated("Use field access instead!")]] bool& dyn_m_HoldForever();
    // public System.Single get_Duration()
    // Offset: 0xA51AC0
    float get_Duration();
    // static public Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition Default()
    // Offset: 0x105A3D8
    static ::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition Default();
    // public System.Single GetValueAt(System.Single offset)
    // Offset: 0xA51AE4
    float GetValueAt(float offset);
    // public System.Void ChangeStopTime(System.Single offset, System.Boolean forceNoDecay)
    // Offset: 0xA51AEC
    void ChangeStopTime(float offset, bool forceNoDecay);
    // public System.Void Clear()
    // Offset: 0xA51B1C
    void Clear();
    // public System.Void Validate()
    // Offset: 0xA51B2C
    void Validate();
  }; // Cinemachine.CinemachineImpulseManager/Cinemachine.EnvelopeDefinition
  #pragma pack(pop)
  static check_size<sizeof(CinemachineImpulseManager::EnvelopeDefinition), 29 + sizeof(bool)> __Cinemachine_CinemachineImpulseManager_EnvelopeDefinitionSizeCheck;
  static_assert(sizeof(CinemachineImpulseManager::EnvelopeDefinition) == 0x1E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::get_Duration
// Il2CppName: get_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::*)()>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::get_Duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "get_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Default
// Il2CppName: Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineImpulseManager::EnvelopeDefinition (*)()>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Default)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::GetValueAt
// Il2CppName: GetValueAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::*)(float)>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::GetValueAt)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "GetValueAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::ChangeStopTime
// Il2CppName: ChangeStopTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::*)(float, bool)>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::ChangeStopTime)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* forceNoDecay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "ChangeStopTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, forceNoDecay});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::*)()>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::*)()>(&Cinemachine::CinemachineImpulseManager::EnvelopeDefinition::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineImpulseManager::EnvelopeDefinition), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
