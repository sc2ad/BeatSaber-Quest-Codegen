// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: Level because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: DocumentationSortingAttribute
  class DocumentationSortingAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::DocumentationSortingAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::DocumentationSortingAttribute*, "Cinemachine", "DocumentationSortingAttribute");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.DocumentationSortingAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987488
  class DocumentationSortingAttribute : public ::System::Attribute {
    public:
    // Nested type: ::Cinemachine::DocumentationSortingAttribute::Level
    struct Level;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.DocumentationSortingAttribute/Cinemachine.Level
    // [TokenAttribute] Offset: FFFFFFFF
    struct Level/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Level
      constexpr Level(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level Undoc
      static constexpr const int Undoc = 0;
      // Get static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level Undoc
      static ::Cinemachine::DocumentationSortingAttribute::Level _get_Undoc();
      // Set static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level Undoc
      static void _set_Undoc(::Cinemachine::DocumentationSortingAttribute::Level value);
      // static field const value: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level API
      static constexpr const int API = 1;
      // Get static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level API
      static ::Cinemachine::DocumentationSortingAttribute::Level _get_API();
      // Set static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level API
      static void _set_API(::Cinemachine::DocumentationSortingAttribute::Level value);
      // static field const value: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level UserRef
      static constexpr const int UserRef = 2;
      // Get static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level UserRef
      static ::Cinemachine::DocumentationSortingAttribute::Level _get_UserRef();
      // Set static field: static public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level UserRef
      static void _set_UserRef(::Cinemachine::DocumentationSortingAttribute::Level value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.DocumentationSortingAttribute/Cinemachine.Level
    #pragma pack(pop)
    static check_size<sizeof(DocumentationSortingAttribute::Level), 0 + sizeof(int)> __Cinemachine_DocumentationSortingAttribute_LevelSizeCheck;
    static_assert(sizeof(DocumentationSortingAttribute::Level) == 0x4);
    public:
    // private Cinemachine.DocumentationSortingAttribute/Cinemachine.Level <Category>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::Cinemachine::DocumentationSortingAttribute::Level Category;
    // Field size check
    static_assert(sizeof(::Cinemachine::DocumentationSortingAttribute::Level) == 0x4);
    public:
    // Creating conversion operator: operator ::Cinemachine::DocumentationSortingAttribute::Level
    constexpr operator ::Cinemachine::DocumentationSortingAttribute::Level() const noexcept {
      return Category;
    }
    // Get instance field reference: private Cinemachine.DocumentationSortingAttribute/Cinemachine.Level <Category>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::DocumentationSortingAttribute::Level& dyn_$Category$k__BackingField();
    // public Cinemachine.DocumentationSortingAttribute/Cinemachine.Level get_Category()
    // Offset: 0x144E4A8
    ::Cinemachine::DocumentationSortingAttribute::Level get_Category();
    // private System.Void set_Category(Cinemachine.DocumentationSortingAttribute/Cinemachine.Level value)
    // Offset: 0x144E4B0
    void set_Category(::Cinemachine::DocumentationSortingAttribute::Level value);
    // public System.Void .ctor(Cinemachine.DocumentationSortingAttribute/Cinemachine.Level category)
    // Offset: 0x144E4B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DocumentationSortingAttribute* New_ctor(::Cinemachine::DocumentationSortingAttribute::Level category) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::DocumentationSortingAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DocumentationSortingAttribute*, creationType>(category)));
    }
  }; // Cinemachine.DocumentationSortingAttribute
  #pragma pack(pop)
  static check_size<sizeof(DocumentationSortingAttribute), 16 + sizeof(::Cinemachine::DocumentationSortingAttribute::Level)> __Cinemachine_DocumentationSortingAttributeSizeCheck;
  static_assert(sizeof(DocumentationSortingAttribute) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::DocumentationSortingAttribute::Level, "Cinemachine", "DocumentationSortingAttribute/Level");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::DocumentationSortingAttribute::get_Category
// Il2CppName: get_Category
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::DocumentationSortingAttribute::Level (Cinemachine::DocumentationSortingAttribute::*)()>(&Cinemachine::DocumentationSortingAttribute::get_Category)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::DocumentationSortingAttribute*), "get_Category", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::DocumentationSortingAttribute::set_Category
// Il2CppName: set_Category
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::DocumentationSortingAttribute::*)(::Cinemachine::DocumentationSortingAttribute::Level)>(&Cinemachine::DocumentationSortingAttribute::set_Category)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "DocumentationSortingAttribute/Level")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::DocumentationSortingAttribute*), "set_Category", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::DocumentationSortingAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
