// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineMixingCamera
  class CinemachineMixingCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineMixingCamera);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineMixingCamera*, "Cinemachine", "CinemachineMixingCamera");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x198
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineMixingCamera
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 986A9C
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 986A9C
  // [HelpURLAttribute] Offset: 986A9C
  class CinemachineMixingCamera : public ::Cinemachine::CinemachineVirtualCameraBase {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98953C
    // public System.Single m_Weight0
    // Size: 0x4
    // Offset: 0x64
    float m_Weight0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x989574
    // public System.Single m_Weight1
    // Size: 0x4
    // Offset: 0x68
    float m_Weight1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x9895AC
    // public System.Single m_Weight2
    // Size: 0x4
    // Offset: 0x6C
    float m_Weight2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x9895E4
    // public System.Single m_Weight3
    // Size: 0x4
    // Offset: 0x70
    float m_Weight3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98961C
    // public System.Single m_Weight4
    // Size: 0x4
    // Offset: 0x74
    float m_Weight4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x989654
    // public System.Single m_Weight5
    // Size: 0x4
    // Offset: 0x78
    float m_Weight5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98968C
    // public System.Single m_Weight6
    // Size: 0x4
    // Offset: 0x7C
    float m_Weight6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x9896C4
    // public System.Single m_Weight7
    // Size: 0x4
    // Offset: 0x80
    float m_Weight7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_Weight7 and: m_State
    char __padding7[0x4] = {};
    // private Cinemachine.CameraState m_State
    // Size: 0xE4
    // Offset: 0x88
    ::Cinemachine::CameraState m_State;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    // Padding between fields: m_State and: LiveChild
    char __padding8[0x4] = {};
    // private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::Cinemachine::ICinemachineCamera* LiveChild;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private UnityEngine.Transform <LookAt>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Transform* LookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform <Follow>k__BackingField
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::Transform* Follow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> m_ChildCameras;
    // Field size check
    static_assert(sizeof(::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,System.Int32> m_indexMap
    // Size: 0x8
    // Offset: 0x190
    ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>* m_indexMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>*) == 0x8);
    public:
    // static field const value: static public System.Int32 MaxCameras
    static constexpr const int MaxCameras = 8;
    // Get static field: static public System.Int32 MaxCameras
    static int _get_MaxCameras();
    // Set static field: static public System.Int32 MaxCameras
    static void _set_MaxCameras(int value);
    // Get instance field reference: public System.Single m_Weight0
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight0();
    // Get instance field reference: public System.Single m_Weight1
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight1();
    // Get instance field reference: public System.Single m_Weight2
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight2();
    // Get instance field reference: public System.Single m_Weight3
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight3();
    // Get instance field reference: public System.Single m_Weight4
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight4();
    // Get instance field reference: public System.Single m_Weight5
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight5();
    // Get instance field reference: public System.Single m_Weight6
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight6();
    // Get instance field reference: public System.Single m_Weight7
    [[deprecated("Use field access instead!")]] float& dyn_m_Weight7();
    // Get instance field reference: private Cinemachine.CameraState m_State
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_m_State();
    // Get instance field reference: private Cinemachine.ICinemachineCamera <LiveChild>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_$LiveChild$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <LookAt>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$LookAt$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <Follow>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$Follow$k__BackingField();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase[] m_ChildCameras
    [[deprecated("Use field access instead!")]] ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*>& dyn_m_ChildCameras();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Cinemachine.CinemachineVirtualCameraBase,System.Int32> m_indexMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>*& dyn_m_indexMap();
    // private Cinemachine.ICinemachineCamera get_LiveChild()
    // Offset: 0x105CE84
    ::Cinemachine::ICinemachineCamera* get_LiveChild();
    // private System.Void set_LiveChild(Cinemachine.ICinemachineCamera value)
    // Offset: 0x105CE7C
    void set_LiveChild(::Cinemachine::ICinemachineCamera* value);
    // public Cinemachine.CinemachineVirtualCameraBase[] get_ChildCameras()
    // Offset: 0x105D24C
    ::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> get_ChildCameras();
    // public System.Single GetWeight(System.Int32 index)
    // Offset: 0x105C7D8
    float GetWeight(int index);
    // public System.Void SetWeight(System.Int32 index, System.Single w)
    // Offset: 0x105C8F0
    void SetWeight(int index, float w);
    // public System.Single GetWeight(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x105CA18
    float GetWeight(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // public System.Void SetWeight(Cinemachine.CinemachineVirtualCameraBase vcam, System.Single w)
    // Offset: 0x105CD30
    void SetWeight(::Cinemachine::CinemachineVirtualCameraBase* vcam, float w);
    // public System.Void OnTransformChildrenChanged()
    // Offset: 0x105D0C0
    void OnTransformChildrenChanged();
    // protected System.Void InvalidateListOfChildren()
    // Offset: 0x105D0B4
    void InvalidateListOfChildren();
    // protected System.Void ValidateListOfChildren()
    // Offset: 0x105CB50
    void ValidateListOfChildren();
    // public override Cinemachine.CameraState get_State()
    // Offset: 0x105CE8C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: Cinemachine.CameraState CinemachineVirtualCameraBase::get_State()
    ::Cinemachine::CameraState get_State();
    // public override UnityEngine.Transform get_LookAt()
    // Offset: 0x105CE9C
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_LookAt()
    ::UnityEngine::Transform* get_LookAt();
    // public override System.Void set_LookAt(UnityEngine.Transform value)
    // Offset: 0x105CEA4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_LookAt(UnityEngine.Transform value)
    void set_LookAt(::UnityEngine::Transform* value);
    // public override UnityEngine.Transform get_Follow()
    // Offset: 0x105CEAC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: UnityEngine.Transform CinemachineVirtualCameraBase::get_Follow()
    ::UnityEngine::Transform* get_Follow();
    // public override System.Void set_Follow(UnityEngine.Transform value)
    // Offset: 0x105CEB4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::set_Follow(UnityEngine.Transform value)
    void set_Follow(::UnityEngine::Transform* value);
    // public System.Void .ctor()
    // Offset: 0x105D5F4
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineMixingCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineMixingCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineMixingCamera*, creationType>()));
    }
    // public override System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x105CEBC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public override System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x105CF88
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // protected override System.Void OnEnable()
    // Offset: 0x105D088
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnEnable()
    void OnEnable();
    // protected override System.Void OnValidate()
    // Offset: 0x105D0CC
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnValidate()
    void OnValidate();
    // public override System.Boolean IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x105D184
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Boolean CinemachineVirtualCameraBase::IsLiveChild(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    bool IsLiveChild(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // public override System.Void OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x105D270
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime);
    // public override System.Void InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    // Offset: 0x105D3C0
    // Implemented from: Cinemachine.CinemachineVirtualCameraBase
    // Base method: System.Void CinemachineVirtualCameraBase::InternalUpdateCameraState(UnityEngine.Vector3 worldUp, System.Single deltaTime)
    void InternalUpdateCameraState(::UnityEngine::Vector3 worldUp, float deltaTime);
  }; // Cinemachine.CinemachineMixingCamera
  #pragma pack(pop)
  static check_size<sizeof(CinemachineMixingCamera), 400 + sizeof(::System::Collections::Generic::Dictionary_2<::Cinemachine::CinemachineVirtualCameraBase*, int>*)> __Cinemachine_CinemachineMixingCameraSizeCheck;
  static_assert(sizeof(CinemachineMixingCamera) == 0x198);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::get_LiveChild
// Il2CppName: get_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::get_LiveChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "get_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::set_LiveChild
// Il2CppName: set_LiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineMixingCamera::set_LiveChild)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "set_LiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::get_ChildCameras
// Il2CppName: get_ChildCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Cinemachine::CinemachineVirtualCameraBase*> (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::get_ChildCameras)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "get_ChildCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::GetWeight
// Il2CppName: GetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineMixingCamera::*)(int)>(&Cinemachine::CinemachineMixingCamera::GetWeight)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "GetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::SetWeight
// Il2CppName: SetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(int, float)>(&Cinemachine::CinemachineMixingCamera::SetWeight)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "SetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, w});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::GetWeight
// Il2CppName: GetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineMixingCamera::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineMixingCamera::GetWeight)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "GetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::SetWeight
// Il2CppName: SetWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::Cinemachine::CinemachineVirtualCameraBase*, float)>(&Cinemachine::CinemachineMixingCamera::SetWeight)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "SetWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, w});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::InvalidateListOfChildren
// Il2CppName: InvalidateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::InvalidateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "InvalidateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::ValidateListOfChildren
// Il2CppName: ValidateListOfChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::ValidateListOfChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "ValidateListOfChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::get_LookAt
// Il2CppName: get_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::get_LookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "get_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::set_LookAt
// Il2CppName: set_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineMixingCamera::set_LookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "set_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::get_Follow
// Il2CppName: get_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::get_Follow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "get_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::set_Follow
// Il2CppName: set_Follow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::UnityEngine::Transform*)>(&Cinemachine::CinemachineMixingCamera::set_Follow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "set_Follow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineMixingCamera::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineMixingCamera::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)()>(&Cinemachine::CinemachineMixingCamera::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::IsLiveChild
// Il2CppName: IsLiveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineMixingCamera::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineMixingCamera::IsLiveChild)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "IsLiveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineMixingCamera::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineMixingCamera::InternalUpdateCameraState
// Il2CppName: InternalUpdateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineMixingCamera::*)(::UnityEngine::Vector3, float)>(&Cinemachine::CinemachineMixingCamera::InternalUpdateCameraState)> {
  static const MethodInfo* get() {
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineMixingCamera*), "InternalUpdateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldUp, deltaTime});
  }
};
