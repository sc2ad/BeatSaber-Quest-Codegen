// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Cinemachine.CinemachineBlendDefinition
#include "Cinemachine/CinemachineBlendDefinition.hpp"
// Including type: Cinemachine.CameraState
#include "Cinemachine/CameraState.hpp"
// Including type: Cinemachine.CinemachineCore
#include "Cinemachine/CinemachineCore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Camera because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: WaitForFixedUpdate
  class WaitForFixedUpdate;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBlenderSettings
  class CinemachineBlenderSettings;
  // Forward declaring type: BrainEvent
  class CinemachineBrain_BrainEvent;
  // Forward declaring type: CinemachineBlend
  class CinemachineBlend;
  // Forward declaring type: ICinemachineCamera
  class ICinemachineCamera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineBrain);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBrain*, "Cinemachine", "CinemachineBrain");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x17C
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineBrain
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 9864E4
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 9864E4
  // [SaveDuringPlayAttribute] Offset: 9864E4
  // [HelpURLAttribute] Offset: 9864E4
  class CinemachineBrain : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Cinemachine::CinemachineBrain::UpdateMethod
    struct UpdateMethod;
    // Nested type: ::Cinemachine::CinemachineBrain::BrainUpdateMethod
    struct BrainUpdateMethod;
    // Nested type: ::Cinemachine::CinemachineBrain::VcamActivatedEvent
    class VcamActivatedEvent;
    // Nested type: ::Cinemachine::CinemachineBrain::BrainFrame
    class BrainFrame;
    // Nested type: ::Cinemachine::CinemachineBrain::$AfterPhysics$d__32
    class $AfterPhysics$d__32;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987944
    struct UpdateMethod/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateMethod
      constexpr UpdateMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod FixedUpdate
      static constexpr const int FixedUpdate = 0;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod FixedUpdate
      static ::Cinemachine::CinemachineBrain::UpdateMethod _get_FixedUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod FixedUpdate
      static void _set_FixedUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod LateUpdate
      static constexpr const int LateUpdate = 1;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod LateUpdate
      static ::Cinemachine::CinemachineBrain::UpdateMethod _get_LateUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod LateUpdate
      static void _set_LateUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod SmartUpdate
      static constexpr const int SmartUpdate = 2;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod SmartUpdate
      static ::Cinemachine::CinemachineBrain::UpdateMethod _get_SmartUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod SmartUpdate
      static void _set_SmartUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod ManualUpdate
      static constexpr const int ManualUpdate = 3;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod ManualUpdate
      static ::Cinemachine::CinemachineBrain::UpdateMethod _get_ManualUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod ManualUpdate
      static void _set_ManualUpdate(::Cinemachine::CinemachineBrain::UpdateMethod value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod
    #pragma pack(pop)
    static check_size<sizeof(CinemachineBrain::UpdateMethod), 0 + sizeof(int)> __Cinemachine_CinemachineBrain_UpdateMethodSizeCheck;
    static_assert(sizeof(CinemachineBrain::UpdateMethod) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod
    // [TokenAttribute] Offset: FFFFFFFF
    // [DocumentationSortingAttribute] Offset: 987958
    struct BrainUpdateMethod/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BrainUpdateMethod
      constexpr BrainUpdateMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod FixedUpdate
      static constexpr const int FixedUpdate = 0;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod FixedUpdate
      static ::Cinemachine::CinemachineBrain::BrainUpdateMethod _get_FixedUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod FixedUpdate
      static void _set_FixedUpdate(::Cinemachine::CinemachineBrain::BrainUpdateMethod value);
      // static field const value: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod LateUpdate
      static constexpr const int LateUpdate = 1;
      // Get static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod LateUpdate
      static ::Cinemachine::CinemachineBrain::BrainUpdateMethod _get_LateUpdate();
      // Set static field: static public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod LateUpdate
      static void _set_LateUpdate(::Cinemachine::CinemachineBrain::BrainUpdateMethod value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod
    #pragma pack(pop)
    static check_size<sizeof(CinemachineBrain::BrainUpdateMethod), 0 + sizeof(int)> __Cinemachine_CinemachineBrain_BrainUpdateMethodSizeCheck;
    static_assert(sizeof(CinemachineBrain::BrainUpdateMethod) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x988174
    // public System.Boolean m_ShowDebugText
    // Size: 0x1
    // Offset: 0x18
    bool m_ShowDebugText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9881AC
    // public System.Boolean m_ShowCameraFrustum
    // Size: 0x1
    // Offset: 0x19
    bool m_ShowCameraFrustum;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9881E4
    // public System.Boolean m_IgnoreTimeScale
    // Size: 0x1
    // Offset: 0x1A
    bool m_IgnoreTimeScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IgnoreTimeScale and: m_WorldUpOverride
    char __padding2[0x5] = {};
    // [TooltipAttribute] Offset: 0x98821C
    // public UnityEngine.Transform m_WorldUpOverride
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* m_WorldUpOverride;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x988254
    // public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod m_UpdateMethod
    // Size: 0x4
    // Offset: 0x28
    ::Cinemachine::CinemachineBrain::UpdateMethod m_UpdateMethod;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain::UpdateMethod) == 0x4);
    // [TooltipAttribute] Offset: 0x98828C
    // public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod m_BlendUpdateMethod
    // Size: 0x4
    // Offset: 0x2C
    ::Cinemachine::CinemachineBrain::BrainUpdateMethod m_BlendUpdateMethod;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain::BrainUpdateMethod) == 0x4);
    // [CinemachineBlendDefinitionPropertyAttribute] Offset: 0x9882C4
    // [TooltipAttribute] Offset: 0x9882C4
    // public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    // Size: 0x10
    // Offset: 0x30
    ::Cinemachine::CinemachineBlendDefinition m_DefaultBlend;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlendDefinition) == 0x10);
    // [TooltipAttribute] Offset: 0x988310
    // public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    // Size: 0x8
    // Offset: 0x40
    ::Cinemachine::CinemachineBlenderSettings* m_CustomBlends;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlenderSettings*) == 0x8);
    // private UnityEngine.Camera m_OutputCamera
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Camera* m_OutputCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // [TooltipAttribute] Offset: 0x988348
    // public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent m_CameraCutEvent
    // Size: 0x8
    // Offset: 0x50
    ::Cinemachine::CinemachineBrain_BrainEvent* m_CameraCutEvent;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain_BrainEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0x988380
    // public Cinemachine.CinemachineBrain/Cinemachine.VcamActivatedEvent m_CameraActivatedEvent
    // Size: 0x8
    // Offset: 0x58
    ::Cinemachine::CinemachineBrain::VcamActivatedEvent* m_CameraActivatedEvent;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain::VcamActivatedEvent*) == 0x8);
    // private UnityEngine.Coroutine mPhysicsCoroutine
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Coroutine* mPhysicsCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.WaitForFixedUpdate mWaitForFixedUpdate
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::WaitForFixedUpdate* mWaitForFixedUpdate;
    // Field size check
    static_assert(sizeof(::UnityEngine::WaitForFixedUpdate*) == 0x8);
    // private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain/Cinemachine.BrainFrame> mFrameStack
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain::BrainFrame*>* mFrameStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain::BrainFrame*>*) == 0x8);
    // private System.Int32 mNextFrameId
    // Size: 0x4
    // Offset: 0x78
    int mNextFrameId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mNextFrameId and: mCurrentLiveCameras
    char __padding14[0x4] = {};
    // private Cinemachine.CinemachineBlend mCurrentLiveCameras
    // Size: 0x8
    // Offset: 0x80
    ::Cinemachine::CinemachineBlend* mCurrentLiveCameras;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBlend*) == 0x8);
    // private Cinemachine.ICinemachineCamera mActiveCameraPreviousFrame
    // Size: 0x8
    // Offset: 0x88
    ::Cinemachine::ICinemachineCamera* mActiveCameraPreviousFrame;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineCamera*) == 0x8);
    // private UnityEngine.GameObject mActiveCameraPreviousFrameGameObject
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* mActiveCameraPreviousFrameGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private Cinemachine.CameraState <CurrentCameraState>k__BackingField
    // Size: 0xE4
    // Offset: 0x98
    ::Cinemachine::CameraState CurrentCameraState;
    // Field size check
    static_assert(sizeof(::Cinemachine::CameraState) == 0xE4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Cinemachine.ICinemachineCamera mSoloCamera
    static ::Cinemachine::ICinemachineCamera* _get_mSoloCamera();
    // Set static field: static private Cinemachine.ICinemachineCamera mSoloCamera
    static void _set_mSoloCamera(::Cinemachine::ICinemachineCamera* value);
    // Get static field: static private readonly UnityEngine.AnimationCurve mDefaultLinearAnimationCurve
    static ::UnityEngine::AnimationCurve* _get_mDefaultLinearAnimationCurve();
    // Set static field: static private readonly UnityEngine.AnimationCurve mDefaultLinearAnimationCurve
    static void _set_mDefaultLinearAnimationCurve(::UnityEngine::AnimationCurve* value);
    // Get instance field reference: public System.Boolean m_ShowDebugText
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowDebugText();
    // Get instance field reference: public System.Boolean m_ShowCameraFrustum
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShowCameraFrustum();
    // Get instance field reference: public System.Boolean m_IgnoreTimeScale
    [[deprecated("Use field access instead!")]] bool& dyn_m_IgnoreTimeScale();
    // Get instance field reference: public UnityEngine.Transform m_WorldUpOverride
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_WorldUpOverride();
    // Get instance field reference: public Cinemachine.CinemachineBrain/Cinemachine.UpdateMethod m_UpdateMethod
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::UpdateMethod& dyn_m_UpdateMethod();
    // Get instance field reference: public Cinemachine.CinemachineBrain/Cinemachine.BrainUpdateMethod m_BlendUpdateMethod
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::BrainUpdateMethod& dyn_m_BlendUpdateMethod();
    // Get instance field reference: public Cinemachine.CinemachineBlendDefinition m_DefaultBlend
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlendDefinition& dyn_m_DefaultBlend();
    // Get instance field reference: public Cinemachine.CinemachineBlenderSettings m_CustomBlends
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlenderSettings*& dyn_m_CustomBlends();
    // Get instance field reference: private UnityEngine.Camera m_OutputCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_OutputCamera();
    // Get instance field reference: public Cinemachine.CinemachineBrain/Cinemachine.BrainEvent m_CameraCutEvent
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain_BrainEvent*& dyn_m_CameraCutEvent();
    // Get instance field reference: public Cinemachine.CinemachineBrain/Cinemachine.VcamActivatedEvent m_CameraActivatedEvent
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain::VcamActivatedEvent*& dyn_m_CameraActivatedEvent();
    // Get instance field reference: private UnityEngine.Coroutine mPhysicsCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_mPhysicsCoroutine();
    // Get instance field reference: private UnityEngine.WaitForFixedUpdate mWaitForFixedUpdate
    [[deprecated("Use field access instead!")]] ::UnityEngine::WaitForFixedUpdate*& dyn_mWaitForFixedUpdate();
    // Get instance field reference: private System.Collections.Generic.List`1<Cinemachine.CinemachineBrain/Cinemachine.BrainFrame> mFrameStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Cinemachine::CinemachineBrain::BrainFrame*>*& dyn_mFrameStack();
    // Get instance field reference: private System.Int32 mNextFrameId
    [[deprecated("Use field access instead!")]] int& dyn_mNextFrameId();
    // Get instance field reference: private Cinemachine.CinemachineBlend mCurrentLiveCameras
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBlend*& dyn_mCurrentLiveCameras();
    // Get instance field reference: private Cinemachine.ICinemachineCamera mActiveCameraPreviousFrame
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineCamera*& dyn_mActiveCameraPreviousFrame();
    // Get instance field reference: private UnityEngine.GameObject mActiveCameraPreviousFrameGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mActiveCameraPreviousFrameGameObject();
    // Get instance field reference: private Cinemachine.CameraState <CurrentCameraState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Cinemachine::CameraState& dyn_$CurrentCameraState$k__BackingField();
    // public UnityEngine.Camera get_OutputCamera()
    // Offset: 0x140067C
    ::UnityEngine::Camera* get_OutputCamera();
    // static public Cinemachine.ICinemachineCamera get_SoloCamera()
    // Offset: 0x1404378
    static ::Cinemachine::ICinemachineCamera* get_SoloCamera();
    // static public System.Void set_SoloCamera(Cinemachine.ICinemachineCamera value)
    // Offset: 0x14043E0
    static void set_SoloCamera(::Cinemachine::ICinemachineCamera* value);
    // public UnityEngine.Vector3 get_DefaultWorldUp()
    // Offset: 0x14045F4
    ::UnityEngine::Vector3 get_DefaultWorldUp();
    // public Cinemachine.ICinemachineCamera get_ActiveVirtualCamera()
    // Offset: 0x140566C
    ::Cinemachine::ICinemachineCamera* get_ActiveVirtualCamera();
    // public System.Boolean get_IsBlending()
    // Offset: 0x1405568
    bool get_IsBlending();
    // public Cinemachine.CinemachineBlend get_ActiveBlend()
    // Offset: 0x1405584
    ::Cinemachine::CinemachineBlend* get_ActiveBlend();
    // public Cinemachine.CameraState get_CurrentCameraState()
    // Offset: 0x1407358
    ::Cinemachine::CameraState get_CurrentCameraState();
    // private System.Void set_CurrentCameraState(Cinemachine.CameraState value)
    // Offset: 0x1407368
    void set_CurrentCameraState(::Cinemachine::CameraState value);
    // public System.Void .ctor()
    // Offset: 0x1407384
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineBrain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineBrain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineBrain*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1407540
    static void _cctor();
    // static public UnityEngine.Color GetSoloGUIColor()
    // Offset: 0x1404578
    static ::UnityEngine::Color GetSoloGUIColor();
    // private System.Void OnEnable()
    // Offset: 0x14046B8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x1404A28
    void OnDisable();
    // private System.Void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode)
    // Offset: 0x1404BCC
    void OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode);
    // private System.Void OnSceneUnloaded(UnityEngine.SceneManagement.Scene scene)
    // Offset: 0x1404E28
    void OnSceneUnloaded(::UnityEngine::SceneManagement::Scene scene);
    // private System.Void Start()
    // Offset: 0x1404E90
    void Start();
    // private System.Void OnGuiHandler()
    // Offset: 0x1405188
    void OnGuiHandler();
    // private System.Collections.IEnumerator AfterPhysics()
    // Offset: 0x14049B8
    ::System::Collections::IEnumerator* AfterPhysics();
    // private System.Void LateUpdate()
    // Offset: 0x14057D0
    void LateUpdate();
    // public System.Void ManualUpdate()
    // Offset: 0x1404C34
    void ManualUpdate();
    // private System.Single GetEffectiveDeltaTime(System.Boolean fixedDelta)
    // Offset: 0x14057E4
    float GetEffectiveDeltaTime(bool fixedDelta);
    // private System.Void UpdateVirtualCameras(Cinemachine.CinemachineCore/Cinemachine.UpdateFilter updateFilter, System.Single deltaTime)
    // Offset: 0x1404E9C
    void UpdateVirtualCameras(::Cinemachine::CinemachineCore::UpdateFilter updateFilter, float deltaTime);
    // static private Cinemachine.ICinemachineCamera DeepCamBFromBlend(Cinemachine.CinemachineBlend blend)
    // Offset: 0x14066CC
    static ::Cinemachine::ICinemachineCamera* DeepCamBFromBlend(::Cinemachine::CinemachineBlend* blend);
    // private System.Int32 GetBrainFrame(System.Int32 withId)
    // Offset: 0x14067E0
    int GetBrainFrame(int withId);
    // public System.Int32 SetCameraOverride(System.Int32 overrideId, Cinemachine.ICinemachineCamera camA, Cinemachine.ICinemachineCamera camB, System.Single weightB, System.Single deltaTime)
    // Offset: 0x14068DC
    int SetCameraOverride(int overrideId, ::Cinemachine::ICinemachineCamera* camA, ::Cinemachine::ICinemachineCamera* camB, float weightB, float deltaTime);
    // public System.Void ReleaseCameraOverride(System.Int32 overrideId)
    // Offset: 0x1406B04
    void ReleaseCameraOverride(int overrideId);
    // private System.Void ProcessActiveCamera(System.Single deltaTime)
    // Offset: 0x14061AC
    void ProcessActiveCamera(float deltaTime);
    // private System.Void UpdateFrame0(System.Single deltaTime)
    // Offset: 0x14059CC
    void UpdateFrame0(float deltaTime);
    // public System.Void ComputeCurrentBlend(ref Cinemachine.CinemachineBlend outputBlend, System.Int32 numTopLayersToExclude)
    // Offset: 0x1405D60
    void ComputeCurrentBlend(ByRef<::Cinemachine::CinemachineBlend*> outputBlend, int numTopLayersToExclude);
    // public System.Boolean IsLive(Cinemachine.ICinemachineCamera vcam, System.Boolean dominantChildOnly)
    // Offset: 0x14003A4
    bool IsLive(::Cinemachine::ICinemachineCamera* vcam, bool dominantChildOnly);
    // private Cinemachine.ICinemachineCamera TopCameraFromPriorityQueue()
    // Offset: 0x1406F44
    ::Cinemachine::ICinemachineCamera* TopCameraFromPriorityQueue();
    // private Cinemachine.CinemachineBlendDefinition LookupBlend(Cinemachine.ICinemachineCamera fromKey, Cinemachine.ICinemachineCamera toKey)
    // Offset: 0x140710C
    ::Cinemachine::CinemachineBlendDefinition LookupBlend(::Cinemachine::ICinemachineCamera* fromKey, ::Cinemachine::ICinemachineCamera* toKey);
    // private System.Void PushStateToUnityCamera(in Cinemachine.CameraState state)
    // Offset: 0x1406BCC
    void PushStateToUnityCamera(ByRef<::Cinemachine::CameraState> state);
  }; // Cinemachine.CinemachineBrain
  #pragma pack(pop)
  static check_size<sizeof(CinemachineBrain), 152 + sizeof(::Cinemachine::CameraState)> __Cinemachine_CinemachineBrainSizeCheck;
  static_assert(sizeof(CinemachineBrain) == 0x17C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBrain::BrainUpdateMethod, "Cinemachine", "CinemachineBrain/BrainUpdateMethod");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineBrain::UpdateMethod, "Cinemachine", "CinemachineBrain/UpdateMethod");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_OutputCamera
// Il2CppName: get_OutputCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_OutputCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_OutputCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_SoloCamera
// Il2CppName: get_SoloCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (*)()>(&Cinemachine::CinemachineBrain::get_SoloCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_SoloCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::set_SoloCamera
// Il2CppName: set_SoloCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineBrain::set_SoloCamera)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "set_SoloCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_DefaultWorldUp
// Il2CppName: get_DefaultWorldUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_DefaultWorldUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_DefaultWorldUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_ActiveVirtualCamera
// Il2CppName: get_ActiveVirtualCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_ActiveVirtualCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_ActiveVirtualCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_IsBlending
// Il2CppName: get_IsBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_IsBlending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_IsBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_ActiveBlend
// Il2CppName: get_ActiveBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlend* (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_ActiveBlend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_ActiveBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::get_CurrentCameraState
// Il2CppName: get_CurrentCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::get_CurrentCameraState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "get_CurrentCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::set_CurrentCameraState
// Il2CppName: set_CurrentCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(::Cinemachine::CameraState)>(&Cinemachine::CinemachineBrain::set_CurrentCameraState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "set_CurrentCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Cinemachine::CinemachineBrain::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::GetSoloGUIColor
// Il2CppName: GetSoloGUIColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)()>(&Cinemachine::CinemachineBrain::GetSoloGUIColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "GetSoloGUIColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::OnSceneLoaded
// Il2CppName: OnSceneLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&Cinemachine::CinemachineBrain::OnSceneLoaded)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "OnSceneLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, mode});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::OnSceneUnloaded
// Il2CppName: OnSceneUnloaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(::UnityEngine::SceneManagement::Scene)>(&Cinemachine::CinemachineBrain::OnSceneUnloaded)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "OnSceneUnloaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::OnGuiHandler
// Il2CppName: OnGuiHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::OnGuiHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "OnGuiHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::AfterPhysics
// Il2CppName: AfterPhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::AfterPhysics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "AfterPhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::GetEffectiveDeltaTime
// Il2CppName: GetEffectiveDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineBrain::*)(bool)>(&Cinemachine::CinemachineBrain::GetEffectiveDeltaTime)> {
  static const MethodInfo* get() {
    static auto* fixedDelta = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "GetEffectiveDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fixedDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::UpdateVirtualCameras
// Il2CppName: UpdateVirtualCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(::Cinemachine::CinemachineCore::UpdateFilter, float)>(&Cinemachine::CinemachineBrain::UpdateVirtualCameras)> {
  static const MethodInfo* get() {
    static auto* updateFilter = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/UpdateFilter")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "UpdateVirtualCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateFilter, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::DeepCamBFromBlend
// Il2CppName: DeepCamBFromBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (*)(::Cinemachine::CinemachineBlend*)>(&Cinemachine::CinemachineBrain::DeepCamBFromBlend)> {
  static const MethodInfo* get() {
    static auto* blend = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBlend")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "DeepCamBFromBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blend});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::GetBrainFrame
// Il2CppName: GetBrainFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineBrain::*)(int)>(&Cinemachine::CinemachineBrain::GetBrainFrame)> {
  static const MethodInfo* get() {
    static auto* withId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "GetBrainFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{withId});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::SetCameraOverride
// Il2CppName: SetCameraOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Cinemachine::CinemachineBrain::*)(int, ::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*, float, float)>(&Cinemachine::CinemachineBrain::SetCameraOverride)> {
  static const MethodInfo* get() {
    static auto* overrideId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* camA = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* camB = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* weightB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "SetCameraOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overrideId, camA, camB, weightB, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::ReleaseCameraOverride
// Il2CppName: ReleaseCameraOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(int)>(&Cinemachine::CinemachineBrain::ReleaseCameraOverride)> {
  static const MethodInfo* get() {
    static auto* overrideId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "ReleaseCameraOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overrideId});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::ProcessActiveCamera
// Il2CppName: ProcessActiveCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(float)>(&Cinemachine::CinemachineBrain::ProcessActiveCamera)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "ProcessActiveCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::UpdateFrame0
// Il2CppName: UpdateFrame0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(float)>(&Cinemachine::CinemachineBrain::UpdateFrame0)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "UpdateFrame0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::ComputeCurrentBlend
// Il2CppName: ComputeCurrentBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(ByRef<::Cinemachine::CinemachineBlend*>, int)>(&Cinemachine::CinemachineBrain::ComputeCurrentBlend)> {
  static const MethodInfo* get() {
    static auto* outputBlend = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineBlend")->this_arg;
    static auto* numTopLayersToExclude = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "ComputeCurrentBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBlend, numTopLayersToExclude});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::IsLive
// Il2CppName: IsLive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineBrain::*)(::Cinemachine::ICinemachineCamera*, bool)>(&Cinemachine::CinemachineBrain::IsLive)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* dominantChildOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "IsLive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, dominantChildOnly});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::TopCameraFromPriorityQueue
// Il2CppName: TopCameraFromPriorityQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineCamera* (Cinemachine::CinemachineBrain::*)()>(&Cinemachine::CinemachineBrain::TopCameraFromPriorityQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "TopCameraFromPriorityQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::LookupBlend
// Il2CppName: LookupBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineBlendDefinition (Cinemachine::CinemachineBrain::*)(::Cinemachine::ICinemachineCamera*, ::Cinemachine::ICinemachineCamera*)>(&Cinemachine::CinemachineBrain::LookupBlend)> {
  static const MethodInfo* get() {
    static auto* fromKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* toKey = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "LookupBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromKey, toKey});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineBrain::PushStateToUnityCamera
// Il2CppName: PushStateToUnityCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineBrain::*)(ByRef<::Cinemachine::CameraState>)>(&Cinemachine::CinemachineBrain::PushStateToUnityCamera)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineBrain*), "PushStateToUnityCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
