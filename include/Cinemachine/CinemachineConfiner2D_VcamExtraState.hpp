// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineConfiner2D
#include "Cinemachine/CinemachineConfiner2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: ConfinerOven
  class ConfinerOven;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineConfiner2D::VcamExtraState);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner2D::VcamExtraState*, "Cinemachine", "CinemachineConfiner2D/VcamExtraState");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineConfiner2D::VcamExtraState : public ::Il2CppObject {
    public:
    // Nested type: ::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache
    struct VcamShapeCache;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState/Cinemachine.VcamShapeCache
    // [TokenAttribute] Offset: FFFFFFFF
    struct VcamShapeCache/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_Path
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>* m_Path;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*) == 0x8);
      // public System.Boolean m_PathHasBone
      // Size: 0x1
      // Offset: 0x8
      bool m_PathHasBone;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: m_PathHasBone and: m_frustumHeight
      char __padding1[0x3] = {};
      // private System.Single m_frustumHeight
      // Size: 0x4
      // Offset: 0xC
      float m_frustumHeight;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: VcamShapeCache
      constexpr VcamShapeCache(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>* m_Path_ = {}, bool m_PathHasBone_ = {}, float m_frustumHeight_ = {}) noexcept : m_Path{m_Path_}, m_PathHasBone{m_PathHasBone_}, m_frustumHeight{m_frustumHeight_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_Path
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& dyn_m_Path();
      // Get instance field reference: public System.Boolean m_PathHasBone
      [[deprecated("Use field access instead!")]] bool& dyn_m_PathHasBone();
      // Get instance field reference: private System.Single m_frustumHeight
      [[deprecated("Use field access instead!")]] float& dyn_m_frustumHeight();
      // public System.Void ValidateCache(in Cinemachine.ConfinerOven confinerBaker, in System.Boolean confinerStateChanged, in System.Single aspectRatio, in System.Single frustumHeight)
      // Offset: 0xA51910
      void ValidateCache(ByRef<::Cinemachine::ConfinerOven*> confinerBaker, ByRef<bool> confinerStateChanged, ByRef<float> aspectRatio, ByRef<float> frustumHeight);
    }; // Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState/Cinemachine.VcamShapeCache
    #pragma pack(pop)
    static check_size<sizeof(CinemachineConfiner2D::VcamExtraState::VcamShapeCache), 12 + sizeof(float)> __Cinemachine_CinemachineConfiner2D_VcamExtraState_VcamShapeCacheSizeCheck;
    static_assert(sizeof(CinemachineConfiner2D::VcamExtraState::VcamShapeCache) == 0x10);
    public:
    // public UnityEngine.Vector3 m_PreviousDisplacement
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 m_PreviousDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 m_DampedDisplacement
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 m_DampedDisplacement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState/Cinemachine.VcamShapeCache m_VcamShapeCache
    // Size: 0x10
    // Offset: 0x28
    ::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache m_VcamShapeCache;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache) == 0x10);
    // Cinemachine.CinemachineVirtualCameraBase m_vcam
    // Size: 0x8
    // Offset: 0x38
    ::Cinemachine::CinemachineVirtualCameraBase* m_vcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3 m_PreviousDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_PreviousDisplacement();
    // Get instance field reference: public UnityEngine.Vector3 m_DampedDisplacement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DampedDisplacement();
    // Get instance field reference: public Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState/Cinemachine.VcamShapeCache m_VcamShapeCache
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache& dyn_m_VcamShapeCache();
    // Get instance field reference: Cinemachine.CinemachineVirtualCameraBase m_vcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_m_vcam();
    // public System.Void .ctor()
    // Offset: 0x104D7F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineConfiner2D::VcamExtraState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner2D::VcamExtraState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineConfiner2D::VcamExtraState*, creationType>()));
    }
  }; // Cinemachine.CinemachineConfiner2D/Cinemachine.VcamExtraState
  #pragma pack(pop)
  static check_size<sizeof(CinemachineConfiner2D::VcamExtraState), 56 + sizeof(::Cinemachine::CinemachineVirtualCameraBase*)> __Cinemachine_CinemachineConfiner2D_VcamExtraStateSizeCheck;
  static_assert(sizeof(CinemachineConfiner2D::VcamExtraState) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner2D::VcamExtraState::VcamShapeCache, "Cinemachine", "CinemachineConfiner2D/VcamExtraState/VcamShapeCache");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner2D::VcamExtraState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
