// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cinemachine.CinemachineExtension
#include "Cinemachine/CinemachineExtension.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collider2D
  class Collider2D;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
  // Forward declaring type: CameraState
  struct CameraState;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineConfiner
  class CinemachineConfiner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineConfiner);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner*, "Cinemachine", "CinemachineConfiner");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineConfiner
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 9866D0
  // [AddComponentMenu] Offset: 9866D0
  // [SaveDuringPlayAttribute] Offset: 9866D0
  // [ExecuteAlways] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 9866D0
  class CinemachineConfiner : public ::Cinemachine::CinemachineExtension {
    public:
    // Nested type: ::Cinemachine::CinemachineConfiner::Mode
    struct Mode;
    // Nested type: ::Cinemachine::CinemachineConfiner::VcamExtraState
    class VcamExtraState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Cinemachine.CinemachineConfiner/Cinemachine.Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine2D
      static constexpr const int Confine2D = 0;
      // Get static field: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine2D
      static ::Cinemachine::CinemachineConfiner::Mode _get_Confine2D();
      // Set static field: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine2D
      static void _set_Confine2D(::Cinemachine::CinemachineConfiner::Mode value);
      // static field const value: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine3D
      static constexpr const int Confine3D = 1;
      // Get static field: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine3D
      static ::Cinemachine::CinemachineConfiner::Mode _get_Confine3D();
      // Set static field: static public Cinemachine.CinemachineConfiner/Cinemachine.Mode Confine3D
      static void _set_Confine3D(::Cinemachine::CinemachineConfiner::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Cinemachine.CinemachineConfiner/Cinemachine.Mode
    #pragma pack(pop)
    static check_size<sizeof(CinemachineConfiner::Mode), 0 + sizeof(int)> __Cinemachine_CinemachineConfiner_ModeSizeCheck;
    static_assert(sizeof(CinemachineConfiner::Mode) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x988AA0
    // public Cinemachine.CinemachineConfiner/Cinemachine.Mode m_ConfineMode
    // Size: 0x4
    // Offset: 0x28
    ::Cinemachine::CinemachineConfiner::Mode m_ConfineMode;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineConfiner::Mode) == 0x4);
    // Padding between fields: m_ConfineMode and: m_BoundingVolume
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0x988AD8
    // public UnityEngine.Collider m_BoundingVolume
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Collider* m_BoundingVolume;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // [TooltipAttribute] Offset: 0x988B10
    // public UnityEngine.Collider2D m_BoundingShape2D
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Collider2D* m_BoundingShape2D;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider2D*) == 0x8);
    // private UnityEngine.Collider2D m_BoundingShape2DCache
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Collider2D* m_BoundingShape2DCache;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider2D*) == 0x8);
    // [TooltipAttribute] Offset: 0x988B48
    // public System.Boolean m_ConfineScreenEdges
    // Size: 0x1
    // Offset: 0x48
    bool m_ConfineScreenEdges;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ConfineScreenEdges and: m_Damping
    char __padding4[0x3] = {};
    // [TooltipAttribute] Offset: 0x988B80
    // [RangeAttribute] Offset: 0x988B80
    // public System.Single m_Damping
    // Size: 0x4
    // Offset: 0x4C
    float m_Damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_pathCache
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>* m_pathCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*) == 0x8);
    // private System.Int32 m_pathTotalPointCount
    // Size: 0x4
    // Offset: 0x58
    int m_pathTotalPointCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public Cinemachine.CinemachineConfiner/Cinemachine.Mode m_ConfineMode
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineConfiner::Mode& dyn_m_ConfineMode();
    // Get instance field reference: public UnityEngine.Collider m_BoundingVolume
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_m_BoundingVolume();
    // Get instance field reference: public UnityEngine.Collider2D m_BoundingShape2D
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& dyn_m_BoundingShape2D();
    // Get instance field reference: private UnityEngine.Collider2D m_BoundingShape2DCache
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider2D*& dyn_m_BoundingShape2DCache();
    // Get instance field reference: public System.Boolean m_ConfineScreenEdges
    [[deprecated("Use field access instead!")]] bool& dyn_m_ConfineScreenEdges();
    // Get instance field reference: public System.Single m_Damping
    [[deprecated("Use field access instead!")]] float& dyn_m_Damping();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> m_pathCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>*& dyn_m_pathCache();
    // Get instance field reference: private System.Int32 m_pathTotalPointCount
    [[deprecated("Use field access instead!")]] int& dyn_m_pathTotalPointCount();
    // public System.Boolean get_IsValid()
    // Offset: 0x1410468
    bool get_IsValid();
    // public System.Boolean CameraWasDisplaced(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x1410350
    bool CameraWasDisplaced(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // public System.Single GetCameraDisplacementDistance(Cinemachine.CinemachineVirtualCameraBase vcam)
    // Offset: 0x141036C
    float GetCameraDisplacementDistance(::Cinemachine::CinemachineVirtualCameraBase* vcam);
    // private System.Void OnValidate()
    // Offset: 0x14103DC
    void OnValidate();
    // public System.Void InvalidatePathCache()
    // Offset: 0x14111C4
    void InvalidatePathCache();
    // private System.Boolean ValidatePathCache()
    // Offset: 0x14111D0
    bool ValidatePathCache();
    // private UnityEngine.Vector3 ConfinePoint(UnityEngine.Vector3 camPos)
    // Offset: 0x1410CE4
    ::UnityEngine::Vector3 ConfinePoint(::UnityEngine::Vector3 camPos);
    // private UnityEngine.Vector3 ConfineScreenEdges(Cinemachine.CinemachineVirtualCameraBase vcam, ref Cinemachine.CameraState state)
    // Offset: 0x141081C
    ::UnityEngine::Vector3 ConfineScreenEdges(::Cinemachine::CinemachineVirtualCameraBase* vcam, ByRef<::Cinemachine::CameraState> state);
    // public System.Void .ctor()
    // Offset: 0x141172C
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineConfiner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineConfiner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineConfiner*, creationType>()));
    }
    // protected override System.Void ConnectToVcam(System.Boolean connect)
    // Offset: 0x141045C
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::ConnectToVcam(System.Boolean connect)
    void ConnectToVcam(bool connect);
    // public override System.Single GetMaxDampTime()
    // Offset: 0x14105A8
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Single CinemachineExtension::GetMaxDampTime()
    float GetMaxDampTime();
    // protected override System.Void PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    // Offset: 0x14105B0
    // Implemented from: Cinemachine.CinemachineExtension
    // Base method: System.Void CinemachineExtension::PostPipelineStageCallback(Cinemachine.CinemachineVirtualCameraBase vcam, Cinemachine.CinemachineCore/Cinemachine.Stage stage, ref Cinemachine.CameraState state, System.Single deltaTime)
    void PostPipelineStageCallback(::Cinemachine::CinemachineVirtualCameraBase* vcam, ::Cinemachine::CinemachineCore::Stage stage, ByRef<::Cinemachine::CameraState> state, float deltaTime);
  }; // Cinemachine.CinemachineConfiner
  #pragma pack(pop)
  static check_size<sizeof(CinemachineConfiner), 88 + sizeof(int)> __Cinemachine_CinemachineConfinerSizeCheck;
  static_assert(sizeof(CinemachineConfiner) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineConfiner::Mode, "Cinemachine", "CinemachineConfiner/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineConfiner::*)()>(&Cinemachine::CinemachineConfiner::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::CameraWasDisplaced
// Il2CppName: CameraWasDisplaced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineConfiner::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineConfiner::CameraWasDisplaced)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "CameraWasDisplaced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::GetCameraDisplacementDistance
// Il2CppName: GetCameraDisplacementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineConfiner::*)(::Cinemachine::CinemachineVirtualCameraBase*)>(&Cinemachine::CinemachineConfiner::GetCameraDisplacementDistance)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "GetCameraDisplacementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner::*)()>(&Cinemachine::CinemachineConfiner::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::InvalidatePathCache
// Il2CppName: InvalidatePathCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner::*)()>(&Cinemachine::CinemachineConfiner::InvalidatePathCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "InvalidatePathCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::ValidatePathCache
// Il2CppName: ValidatePathCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineConfiner::*)()>(&Cinemachine::CinemachineConfiner::ValidatePathCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "ValidatePathCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::ConfinePoint
// Il2CppName: ConfinePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineConfiner::*)(::UnityEngine::Vector3)>(&Cinemachine::CinemachineConfiner::ConfinePoint)> {
  static const MethodInfo* get() {
    static auto* camPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "ConfinePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camPos});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::ConfineScreenEdges
// Il2CppName: ConfineScreenEdges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineConfiner::*)(::Cinemachine::CinemachineVirtualCameraBase*, ByRef<::Cinemachine::CameraState>)>(&Cinemachine::CinemachineConfiner::ConfineScreenEdges)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "ConfineScreenEdges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, state});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::ConnectToVcam
// Il2CppName: ConnectToVcam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner::*)(bool)>(&Cinemachine::CinemachineConfiner::ConnectToVcam)> {
  static const MethodInfo* get() {
    static auto* connect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "ConnectToVcam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connect});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineConfiner::*)()>(&Cinemachine::CinemachineConfiner::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineConfiner::PostPipelineStageCallback
// Il2CppName: PostPipelineStageCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineConfiner::*)(::Cinemachine::CinemachineVirtualCameraBase*, ::Cinemachine::CinemachineCore::Stage, ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineConfiner::PostPipelineStageCallback)> {
  static const MethodInfo* get() {
    static auto* vcam = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineCore/Stage")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineConfiner*), "PostPipelineStageCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vcam, stage, state, deltaTime});
  }
};
