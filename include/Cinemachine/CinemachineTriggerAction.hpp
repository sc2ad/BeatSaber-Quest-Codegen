// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collision
  class Collision;
  // Forward declaring type: Collider2D
  class Collider2D;
  // Forward declaring type: Collision2D
  class Collision2D;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineTriggerAction
  class CinemachineTriggerAction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineTriggerAction);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTriggerAction*, "Cinemachine", "CinemachineTriggerAction");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineTriggerAction
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987584
  // [SaveDuringPlayAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 987584
  class CinemachineTriggerAction : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Cinemachine::CinemachineTriggerAction::ActionSettings
    struct ActionSettings;
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings
    // [TokenAttribute] Offset: FFFFFFFF
    struct ActionSettings/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode
      struct Mode;
      // Nested type: ::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent
      class TriggerEvent;
      // Nested type: ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode
      struct TimeMode;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode
      // [TokenAttribute] Offset: FFFFFFFF
      struct Mode/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: Mode
        constexpr Mode(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Custom
        static constexpr const int Custom = 0;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Custom
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Custom();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Custom
        static void _set_Custom(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode PriorityBoost
        static constexpr const int PriorityBoost = 1;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode PriorityBoost
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_PriorityBoost();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode PriorityBoost
        static void _set_PriorityBoost(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Activate
        static constexpr const int Activate = 2;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Activate
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Activate();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Activate
        static void _set_Activate(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Deactivate
        static constexpr const int Deactivate = 3;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Deactivate
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Deactivate();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Deactivate
        static void _set_Deactivate(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Enable
        static constexpr const int Enable = 4;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Enable
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Enable();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Enable
        static void _set_Enable(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Disable
        static constexpr const int Disable = 5;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Disable
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Disable();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Disable
        static void _set_Disable(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Play
        static constexpr const int Play = 6;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Play
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Play();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Play
        static void _set_Play(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Stop
        static constexpr const int Stop = 7;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Stop
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode _get_Stop();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode Stop
        static void _set_Stop(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode
      #pragma pack(pop)
      static check_size<sizeof(CinemachineTriggerAction::ActionSettings::Mode), 0 + sizeof(int)> __Cinemachine_CinemachineTriggerAction_ActionSettings_ModeSizeCheck;
      static_assert(sizeof(CinemachineTriggerAction::ActionSettings::Mode) == 0x4);
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode
      // [TokenAttribute] Offset: FFFFFFFF
      struct TimeMode/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: TimeMode
        constexpr TimeMode(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromStart
        static constexpr const int FromStart = 0;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromStart
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode _get_FromStart();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromStart
        static void _set_FromStart(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromEnd
        static constexpr const int FromEnd = 1;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromEnd
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode _get_FromEnd();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode FromEnd
        static void _set_FromEnd(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode BeforeNow
        static constexpr const int BeforeNow = 2;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode BeforeNow
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode _get_BeforeNow();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode BeforeNow
        static void _set_BeforeNow(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value);
        // static field const value: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode AfterNow
        static constexpr const int AfterNow = 3;
        // Get static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode AfterNow
        static ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode _get_AfterNow();
        // Set static field: static public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode AfterNow
        static void _set_AfterNow(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode
      #pragma pack(pop)
      static check_size<sizeof(CinemachineTriggerAction::ActionSettings::TimeMode), 0 + sizeof(int)> __Cinemachine_CinemachineTriggerAction_ActionSettings_TimeModeSizeCheck;
      static_assert(sizeof(CinemachineTriggerAction::ActionSettings::TimeMode) == 0x4);
      public:
      // [TooltipAttribute] Offset: 0x98E23C
      // public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode m_Action
      // Size: 0x4
      // Offset: 0x0
      ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode m_Action;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode) == 0x4);
      // Padding between fields: m_Action and: m_Target
      char __padding0[0x4] = {};
      // [TooltipAttribute] Offset: 0x98E274
      // public UnityEngine.Object m_Target
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Object* m_Target;
      // Field size check
      static_assert(sizeof(::UnityEngine::Object*) == 0x8);
      // [TooltipAttribute] Offset: 0x98E2AC
      // public System.Int32 m_BoostAmount
      // Size: 0x4
      // Offset: 0x10
      int m_BoostAmount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // [TooltipAttribute] Offset: 0x98E2E4
      // public System.Single m_StartTime
      // Size: 0x4
      // Offset: 0x14
      float m_StartTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // [TooltipAttribute] Offset: 0x98E31C
      // public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode m_Mode
      // Size: 0x4
      // Offset: 0x18
      ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode m_Mode;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode) == 0x4);
      // Padding between fields: m_Mode and: m_Event
      char __padding4[0x4] = {};
      // [TooltipAttribute] Offset: 0x98E354
      // public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TriggerEvent m_Event
      // Size: 0x8
      // Offset: 0x20
      ::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent* m_Event;
      // Field size check
      static_assert(sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent*) == 0x8);
      public:
      // Creating value type constructor for type: ActionSettings
      constexpr ActionSettings(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode m_Action_ = {}, ::UnityEngine::Object* m_Target_ = {}, int m_BoostAmount_ = {}, float m_StartTime_ = {}, ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode m_Mode_ = {}, ::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent* m_Event_ = {}) noexcept : m_Action{m_Action_}, m_Target{m_Target_}, m_BoostAmount{m_BoostAmount_}, m_StartTime{m_StartTime_}, m_Mode{m_Mode_}, m_Event{m_Event_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode m_Action
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode& dyn_m_Action();
      // Get instance field reference: public UnityEngine.Object m_Target
      [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_m_Target();
      // Get instance field reference: public System.Int32 m_BoostAmount
      [[deprecated("Use field access instead!")]] int& dyn_m_BoostAmount();
      // Get instance field reference: public System.Single m_StartTime
      [[deprecated("Use field access instead!")]] float& dyn_m_StartTime();
      // Get instance field reference: public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TimeMode m_Mode
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode& dyn_m_Mode();
      // Get instance field reference: public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.TriggerEvent m_Event
      [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent*& dyn_m_Event();
      // public System.Void .ctor(Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings/Cinemachine.Mode action)
      // Offset: 0xA5D620
      ActionSettings(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode action);
      // public System.Void Invoke()
      // Offset: 0xA5D628
      void Invoke();
    }; // Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings
    #pragma pack(pop)
    static check_size<sizeof(CinemachineTriggerAction::ActionSettings), 32 + sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings::TriggerEvent*)> __Cinemachine_CinemachineTriggerAction_ActionSettingsSizeCheck;
    static_assert(sizeof(CinemachineTriggerAction::ActionSettings) == 0x28);
    public:
    // [HeaderAttribute] Offset: 0x98CD18
    // [TooltipAttribute] Offset: 0x98CD18
    // public UnityEngine.LayerMask m_LayerMask
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::LayerMask m_LayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: m_LayerMask and: m_WithTag
    char __padding0[0x4] = {};
    // [TagFieldAttribute] Offset: 0x98CD78
    // [TooltipAttribute] Offset: 0x98CD78
    // public System.String m_WithTag
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_WithTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TagFieldAttribute] Offset: 0x98CDC4
    // [TooltipAttribute] Offset: 0x98CDC4
    // public System.String m_WithoutTag
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_WithoutTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [NoSaveDuringPlayAttribute] Offset: 0x98CE10
    // [TooltipAttribute] Offset: 0x98CE10
    // public System.Int32 m_SkipFirst
    // Size: 0x4
    // Offset: 0x30
    int m_SkipFirst;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x98CE5C
    // public System.Boolean m_Repeating
    // Size: 0x1
    // Offset: 0x34
    bool m_Repeating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Repeating and: m_OnObjectEnter
    char __padding4[0x3] = {};
    // public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings m_OnObjectEnter
    // Size: 0x28
    // Offset: 0x38
    ::Cinemachine::CinemachineTriggerAction::ActionSettings m_OnObjectEnter;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings) == 0x28);
    // public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings m_OnObjectExit
    // Size: 0x28
    // Offset: 0x60
    ::Cinemachine::CinemachineTriggerAction::ActionSettings m_OnObjectExit;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineTriggerAction::ActionSettings) == 0x28);
    // private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> m_ActiveTriggerObjects
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>* m_ActiveTriggerObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.LayerMask m_LayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_LayerMask();
    // Get instance field reference: public System.String m_WithTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_WithTag();
    // Get instance field reference: public System.String m_WithoutTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_WithoutTag();
    // Get instance field reference: public System.Int32 m_SkipFirst
    [[deprecated("Use field access instead!")]] int& dyn_m_SkipFirst();
    // Get instance field reference: public System.Boolean m_Repeating
    [[deprecated("Use field access instead!")]] bool& dyn_m_Repeating();
    // Get instance field reference: public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings m_OnObjectEnter
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings& dyn_m_OnObjectEnter();
    // Get instance field reference: public Cinemachine.CinemachineTriggerAction/Cinemachine.ActionSettings m_OnObjectExit
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineTriggerAction::ActionSettings& dyn_m_OnObjectExit();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> m_ActiveTriggerObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*& dyn_m_ActiveTriggerObjects();
    // public System.Void .ctor()
    // Offset: 0x1446A68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineTriggerAction* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineTriggerAction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineTriggerAction*, creationType>()));
    }
    // private System.Boolean Filter(UnityEngine.GameObject other)
    // Offset: 0x1446180
    bool Filter(::UnityEngine::GameObject* other);
    // private System.Void InternalDoTriggerEnter(UnityEngine.GameObject other)
    // Offset: 0x1446238
    void InternalDoTriggerEnter(::UnityEngine::GameObject* other);
    // private System.Void InternalDoTriggerExit(UnityEngine.GameObject other)
    // Offset: 0x14467F4
    void InternalDoTriggerExit(::UnityEngine::GameObject* other);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x14468A4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x14468DC
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void OnCollisionEnter(UnityEngine.Collision other)
    // Offset: 0x1446914
    void OnCollisionEnter(::UnityEngine::Collision* other);
    // private System.Void OnCollisionExit(UnityEngine.Collision other)
    // Offset: 0x144694C
    void OnCollisionExit(::UnityEngine::Collision* other);
    // private System.Void OnTriggerEnter2D(UnityEngine.Collider2D other)
    // Offset: 0x1446984
    void OnTriggerEnter2D(::UnityEngine::Collider2D* other);
    // private System.Void OnTriggerExit2D(UnityEngine.Collider2D other)
    // Offset: 0x14469BC
    void OnTriggerExit2D(::UnityEngine::Collider2D* other);
    // private System.Void OnCollisionEnter2D(UnityEngine.Collision2D other)
    // Offset: 0x14469F4
    void OnCollisionEnter2D(::UnityEngine::Collision2D* other);
    // private System.Void OnCollisionExit2D(UnityEngine.Collision2D other)
    // Offset: 0x1446A2C
    void OnCollisionExit2D(::UnityEngine::Collision2D* other);
    // private System.Void OnEnable()
    // Offset: 0x1446A64
    void OnEnable();
  }; // Cinemachine.CinemachineTriggerAction
  #pragma pack(pop)
  static check_size<sizeof(CinemachineTriggerAction), 136 + sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*)> __Cinemachine_CinemachineTriggerActionSizeCheck;
  static_assert(sizeof(CinemachineTriggerAction) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTriggerAction::ActionSettings, "Cinemachine", "CinemachineTriggerAction/ActionSettings");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTriggerAction::ActionSettings::TimeMode, "Cinemachine", "CinemachineTriggerAction/ActionSettings/TimeMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineTriggerAction::ActionSettings::Mode, "Cinemachine", "CinemachineTriggerAction/ActionSettings/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::Filter
// Il2CppName: Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::GameObject*)>(&Cinemachine::CinemachineTriggerAction::Filter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::InternalDoTriggerEnter
// Il2CppName: InternalDoTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::GameObject*)>(&Cinemachine::CinemachineTriggerAction::InternalDoTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "InternalDoTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::InternalDoTriggerExit
// Il2CppName: InternalDoTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::GameObject*)>(&Cinemachine::CinemachineTriggerAction::InternalDoTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "InternalDoTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collider*)>(&Cinemachine::CinemachineTriggerAction::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collider*)>(&Cinemachine::CinemachineTriggerAction::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collision*)>(&Cinemachine::CinemachineTriggerAction::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnCollisionExit
// Il2CppName: OnCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collision*)>(&Cinemachine::CinemachineTriggerAction::OnCollisionExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnTriggerEnter2D
// Il2CppName: OnTriggerEnter2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collider2D*)>(&Cinemachine::CinemachineTriggerAction::OnTriggerEnter2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnTriggerEnter2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnTriggerExit2D
// Il2CppName: OnTriggerExit2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collider2D*)>(&Cinemachine::CinemachineTriggerAction::OnTriggerExit2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnTriggerExit2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnCollisionEnter2D
// Il2CppName: OnCollisionEnter2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collision2D*)>(&Cinemachine::CinemachineTriggerAction::OnCollisionEnter2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnCollisionEnter2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnCollisionExit2D
// Il2CppName: OnCollisionExit2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)(::UnityEngine::Collision2D*)>(&Cinemachine::CinemachineTriggerAction::OnCollisionExit2D)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnCollisionExit2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineTriggerAction::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineTriggerAction::*)()>(&Cinemachine::CinemachineTriggerAction::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineTriggerAction*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
