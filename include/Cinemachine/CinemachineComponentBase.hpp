// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Cinemachine.CinemachineCore
#include "Cinemachine/CinemachineCore.hpp"
// Including type: Cinemachine.CinemachineVirtualCameraBase
#include "Cinemachine/CinemachineVirtualCameraBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: ICinemachineTargetGroup
  class ICinemachineTargetGroup;
  // Forward declaring type: CinemachineTargetGroup
  class CinemachineTargetGroup;
  // Forward declaring type: CameraState
  struct CameraState;
  // Skipping declaration: ICinemachineCamera because it is already included!
}
// Completed forward declares
// Type namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineComponentBase
  class CinemachineComponentBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Cinemachine::CinemachineComponentBase);
DEFINE_IL2CPP_ARG_TYPE(::Cinemachine::CinemachineComponentBase*, "Cinemachine", "CinemachineComponentBase");
// Type namespace: Cinemachine
namespace Cinemachine {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Cinemachine.CinemachineComponentBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [DocumentationSortingAttribute] Offset: 987460
  class CinemachineComponentBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Cinemachine.CinemachineVirtualCameraBase m_vcamOwner
    // Size: 0x8
    // Offset: 0x18
    ::Cinemachine::CinemachineVirtualCameraBase* m_vcamOwner;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    // private UnityEngine.Transform mCachedFollowTarget
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* mCachedFollowTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Cinemachine.CinemachineVirtualCameraBase mCachedFollowTargetVcam
    // Size: 0x8
    // Offset: 0x28
    ::Cinemachine::CinemachineVirtualCameraBase* mCachedFollowTargetVcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    // private Cinemachine.ICinemachineTargetGroup mCachedFollowTargetGroup
    // Size: 0x8
    // Offset: 0x30
    ::Cinemachine::ICinemachineTargetGroup* mCachedFollowTargetGroup;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineTargetGroup*) == 0x8);
    // private UnityEngine.Transform mCachedLookAtTarget
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* mCachedLookAtTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
    // Size: 0x8
    // Offset: 0x40
    ::Cinemachine::CinemachineVirtualCameraBase* mCachedLookAtTargetVcam;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    // private Cinemachine.ICinemachineTargetGroup mCachedLookAtTargetGroup
    // Size: 0x8
    // Offset: 0x48
    ::Cinemachine::ICinemachineTargetGroup* mCachedLookAtTargetGroup;
    // Field size check
    static_assert(sizeof(::Cinemachine::ICinemachineTargetGroup*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static protected System.Single Epsilon
    static constexpr const float Epsilon = 0.0001;
    // Get static field: static protected System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static protected System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase m_vcamOwner
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_m_vcamOwner();
    // Get instance field reference: private UnityEngine.Transform mCachedFollowTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mCachedFollowTarget();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase mCachedFollowTargetVcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_mCachedFollowTargetVcam();
    // Get instance field reference: private Cinemachine.ICinemachineTargetGroup mCachedFollowTargetGroup
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineTargetGroup*& dyn_mCachedFollowTargetGroup();
    // Get instance field reference: private UnityEngine.Transform mCachedLookAtTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mCachedLookAtTarget();
    // Get instance field reference: private Cinemachine.CinemachineVirtualCameraBase mCachedLookAtTargetVcam
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_mCachedLookAtTargetVcam();
    // Get instance field reference: private Cinemachine.ICinemachineTargetGroup mCachedLookAtTargetGroup
    [[deprecated("Use field access instead!")]] ::Cinemachine::ICinemachineTargetGroup*& dyn_mCachedLookAtTargetGroup();
    // public Cinemachine.CinemachineVirtualCameraBase get_VirtualCamera()
    // Offset: 0x1400F10
    ::Cinemachine::CinemachineVirtualCameraBase* get_VirtualCamera();
    // public UnityEngine.Transform get_FollowTarget()
    // Offset: 0x1400D44
    ::UnityEngine::Transform* get_FollowTarget();
    // public UnityEngine.Transform get_LookAtTarget()
    // Offset: 0x140DA60
    ::UnityEngine::Transform* get_LookAtTarget();
    // public Cinemachine.ICinemachineTargetGroup get_AbstractFollowTargetGroup()
    // Offset: 0x140DBD4
    ::Cinemachine::ICinemachineTargetGroup* get_AbstractFollowTargetGroup();
    // public Cinemachine.CinemachineTargetGroup get_FollowTargetGroup()
    // Offset: 0x140DC70
    ::Cinemachine::CinemachineTargetGroup* get_FollowTargetGroup();
    // public UnityEngine.Vector3 get_FollowTargetPosition()
    // Offset: 0x14015A0
    ::UnityEngine::Vector3 get_FollowTargetPosition();
    // public UnityEngine.Quaternion get_FollowTargetRotation()
    // Offset: 0x1401748
    ::UnityEngine::Quaternion get_FollowTargetRotation();
    // public Cinemachine.ICinemachineTargetGroup get_AbstractLookAtTargetGroup()
    // Offset: 0x140DDC0
    ::Cinemachine::ICinemachineTargetGroup* get_AbstractLookAtTargetGroup();
    // public Cinemachine.CinemachineTargetGroup get_LookAtTargetGroup()
    // Offset: 0x140DE5C
    ::Cinemachine::CinemachineTargetGroup* get_LookAtTargetGroup();
    // public UnityEngine.Vector3 get_LookAtTargetPosition()
    // Offset: 0x140DEE4
    ::UnityEngine::Vector3 get_LookAtTargetPosition();
    // public UnityEngine.Quaternion get_LookAtTargetRotation()
    // Offset: 0x140E08C
    ::UnityEngine::Quaternion get_LookAtTargetRotation();
    // public Cinemachine.CameraState get_VcamState()
    // Offset: 0x140E234
    ::Cinemachine::CameraState get_VcamState();
    // public System.Boolean get_IsValid()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsValid();
    // public Cinemachine.CinemachineCore/Cinemachine.Stage get_Stage()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Cinemachine::CinemachineCore::Stage get_Stage();
    // public System.Boolean get_BodyAppliesAfterAim()
    // Offset: 0x140E318
    bool get_BodyAppliesAfterAim();
    // protected System.Void .ctor()
    // Offset: 0x1401D7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineComponentBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Cinemachine::CinemachineComponentBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineComponentBase*, creationType>()));
    }
    // private System.Void UpdateFollowTargetCache()
    // Offset: 0x140DB0C
    void UpdateFollowTargetCache();
    // private System.Void UpdateLookAtTargetCache()
    // Offset: 0x140DCF8
    void UpdateLookAtTargetCache();
    // public System.Void PrePipelineMutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0x140E314
    void PrePipelineMutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public System.Void MutateCameraState(ref Cinemachine.CameraState curState, System.Single deltaTime)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MutateCameraState(ByRef<::Cinemachine::CameraState> curState, float deltaTime);
    // public System.Boolean OnTransitionFromCamera(Cinemachine.ICinemachineCamera fromCam, UnityEngine.Vector3 worldUp, System.Single deltaTime, ref Cinemachine.CinemachineVirtualCameraBase/Cinemachine.TransitionParams transitionParams)
    // Offset: 0x140E320
    bool OnTransitionFromCamera(::Cinemachine::ICinemachineCamera* fromCam, ::UnityEngine::Vector3 worldUp, float deltaTime, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams> transitionParams);
    // public System.Void OnTargetObjectWarped(UnityEngine.Transform target, UnityEngine.Vector3 positionDelta)
    // Offset: 0x140E328
    void OnTargetObjectWarped(::UnityEngine::Transform* target, ::UnityEngine::Vector3 positionDelta);
    // public System.Void ForceCameraPosition(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x140E32C
    void ForceCameraPosition(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public System.Single GetMaxDampTime()
    // Offset: 0x140E330
    float GetMaxDampTime();
  }; // Cinemachine.CinemachineComponentBase
  #pragma pack(pop)
  static check_size<sizeof(CinemachineComponentBase), 72 + sizeof(::Cinemachine::ICinemachineTargetGroup*)> __Cinemachine_CinemachineComponentBaseSizeCheck;
  static_assert(sizeof(CinemachineComponentBase) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_VirtualCamera
// Il2CppName: get_VirtualCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineVirtualCameraBase* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_VirtualCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_VirtualCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_FollowTarget
// Il2CppName: get_FollowTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_FollowTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_FollowTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_LookAtTarget
// Il2CppName: get_LookAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_LookAtTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_LookAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_AbstractFollowTargetGroup
// Il2CppName: get_AbstractFollowTargetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineTargetGroup* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_AbstractFollowTargetGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_AbstractFollowTargetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_FollowTargetGroup
// Il2CppName: get_FollowTargetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineTargetGroup* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_FollowTargetGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_FollowTargetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_FollowTargetPosition
// Il2CppName: get_FollowTargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_FollowTargetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_FollowTargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_FollowTargetRotation
// Il2CppName: get_FollowTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_FollowTargetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_FollowTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_AbstractLookAtTargetGroup
// Il2CppName: get_AbstractLookAtTargetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::ICinemachineTargetGroup* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_AbstractLookAtTargetGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_AbstractLookAtTargetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_LookAtTargetGroup
// Il2CppName: get_LookAtTargetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineTargetGroup* (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_LookAtTargetGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_LookAtTargetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_LookAtTargetPosition
// Il2CppName: get_LookAtTargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_LookAtTargetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_LookAtTargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_LookAtTargetRotation
// Il2CppName: get_LookAtTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_LookAtTargetRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_LookAtTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_VcamState
// Il2CppName: get_VcamState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CameraState (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_VcamState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_VcamState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_Stage
// Il2CppName: get_Stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Cinemachine::CinemachineCore::Stage (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_Stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_Stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::get_BodyAppliesAfterAim
// Il2CppName: get_BodyAppliesAfterAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::get_BodyAppliesAfterAim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "get_BodyAppliesAfterAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::UpdateFollowTargetCache
// Il2CppName: UpdateFollowTargetCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::UpdateFollowTargetCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "UpdateFollowTargetCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::UpdateLookAtTargetCache
// Il2CppName: UpdateLookAtTargetCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::UpdateLookAtTargetCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "UpdateLookAtTargetCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::PrePipelineMutateCameraState
// Il2CppName: PrePipelineMutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineComponentBase::PrePipelineMutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "PrePipelineMutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::MutateCameraState
// Il2CppName: MutateCameraState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)(ByRef<::Cinemachine::CameraState>, float)>(&Cinemachine::CinemachineComponentBase::MutateCameraState)> {
  static const MethodInfo* get() {
    static auto* curState = &::il2cpp_utils::GetClassFromName("Cinemachine", "CameraState")->this_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "MutateCameraState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curState, deltaTime});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::OnTransitionFromCamera
// Il2CppName: OnTransitionFromCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Cinemachine::CinemachineComponentBase::*)(::Cinemachine::ICinemachineCamera*, ::UnityEngine::Vector3, float, ByRef<::Cinemachine::CinemachineVirtualCameraBase::TransitionParams>)>(&Cinemachine::CinemachineComponentBase::OnTransitionFromCamera)> {
  static const MethodInfo* get() {
    static auto* fromCam = &::il2cpp_utils::GetClassFromName("Cinemachine", "ICinemachineCamera")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* transitionParams = &::il2cpp_utils::GetClassFromName("Cinemachine", "CinemachineVirtualCameraBase/TransitionParams")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "OnTransitionFromCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromCam, worldUp, deltaTime, transitionParams});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::OnTargetObjectWarped
// Il2CppName: OnTargetObjectWarped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&Cinemachine::CinemachineComponentBase::OnTargetObjectWarped)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* positionDelta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "OnTargetObjectWarped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, positionDelta});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::ForceCameraPosition
// Il2CppName: ForceCameraPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Cinemachine::CinemachineComponentBase::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Cinemachine::CinemachineComponentBase::ForceCameraPosition)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "ForceCameraPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
// Writing MetadataGetter for method: Cinemachine::CinemachineComponentBase::GetMaxDampTime
// Il2CppName: GetMaxDampTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Cinemachine::CinemachineComponentBase::*)()>(&Cinemachine::CinemachineComponentBase::GetMaxDampTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Cinemachine::CinemachineComponentBase*), "GetMaxDampTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
