// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Microsoft.Win32
namespace Microsoft::Win32 {
  // Forward declaring type: RegistryValueKind
  struct RegistryValueKind;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Microsoft::Win32::RegistryValueKind, "Microsoft.Win32", "RegistryValueKind");
// Type namespace: Microsoft.Win32
namespace Microsoft::Win32 {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Microsoft.Win32.RegistryValueKind
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1075698
  struct RegistryValueKind/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: RegistryValueKind
    constexpr RegistryValueKind(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Microsoft.Win32.RegistryValueKind Unknown
    static constexpr const int Unknown = 0;
    // Get static field: static public Microsoft.Win32.RegistryValueKind Unknown
    static ::Microsoft::Win32::RegistryValueKind _get_Unknown();
    // Set static field: static public Microsoft.Win32.RegistryValueKind Unknown
    static void _set_Unknown(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind String
    static constexpr const int String = 1;
    // Get static field: static public Microsoft.Win32.RegistryValueKind String
    static ::Microsoft::Win32::RegistryValueKind _get_String();
    // Set static field: static public Microsoft.Win32.RegistryValueKind String
    static void _set_String(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind ExpandString
    static constexpr const int ExpandString = 2;
    // Get static field: static public Microsoft.Win32.RegistryValueKind ExpandString
    static ::Microsoft::Win32::RegistryValueKind _get_ExpandString();
    // Set static field: static public Microsoft.Win32.RegistryValueKind ExpandString
    static void _set_ExpandString(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind Binary
    static constexpr const int Binary = 3;
    // Get static field: static public Microsoft.Win32.RegistryValueKind Binary
    static ::Microsoft::Win32::RegistryValueKind _get_Binary();
    // Set static field: static public Microsoft.Win32.RegistryValueKind Binary
    static void _set_Binary(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind DWord
    static constexpr const int DWord = 4;
    // Get static field: static public Microsoft.Win32.RegistryValueKind DWord
    static ::Microsoft::Win32::RegistryValueKind _get_DWord();
    // Set static field: static public Microsoft.Win32.RegistryValueKind DWord
    static void _set_DWord(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind MultiString
    static constexpr const int MultiString = 7;
    // Get static field: static public Microsoft.Win32.RegistryValueKind MultiString
    static ::Microsoft::Win32::RegistryValueKind _get_MultiString();
    // Set static field: static public Microsoft.Win32.RegistryValueKind MultiString
    static void _set_MultiString(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind QWord
    static constexpr const int QWord = 11;
    // Get static field: static public Microsoft.Win32.RegistryValueKind QWord
    static ::Microsoft::Win32::RegistryValueKind _get_QWord();
    // Set static field: static public Microsoft.Win32.RegistryValueKind QWord
    static void _set_QWord(::Microsoft::Win32::RegistryValueKind value);
    // static field const value: static public Microsoft.Win32.RegistryValueKind None
    static constexpr const int None = -1;
    // Get static field: static public Microsoft.Win32.RegistryValueKind None
    static ::Microsoft::Win32::RegistryValueKind _get_None();
    // Set static field: static public Microsoft.Win32.RegistryValueKind None
    static void _set_None(::Microsoft::Win32::RegistryValueKind value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Microsoft.Win32.RegistryValueKind
  #pragma pack(pop)
  static check_size<sizeof(RegistryValueKind), 0 + sizeof(int)> __Microsoft_Win32_RegistryValueKindSizeCheck;
  static_assert(sizeof(RegistryValueKind) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
