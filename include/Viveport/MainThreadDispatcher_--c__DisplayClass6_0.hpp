// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.MainThreadDispatcher
#include "Viveport/MainThreadDispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0*, "Viveport", "MainThreadDispatcher/<>c__DisplayClass6_0");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.MainThreadDispatcher/Viveport.<>c__DisplayClass6_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MainThreadDispatcher::$$c__DisplayClass6_0 : public ::Il2CppObject {
    public:
    public:
    // public Viveport.MainThreadDispatcher <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Viveport::MainThreadDispatcher* $$4__this;
    // Field size check
    static_assert(sizeof(::Viveport::MainThreadDispatcher*) == 0x8);
    // public System.Collections.IEnumerator action
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::IEnumerator* action;
    // Field size check
    static_assert(sizeof(::System::Collections::IEnumerator*) == 0x8);
    public:
    // Get instance field reference: public Viveport.MainThreadDispatcher <>4__this
    [[deprecated("Use field access instead!")]] ::Viveport::MainThreadDispatcher*& dyn_$$4__this();
    // Get instance field reference: public System.Collections.IEnumerator action
    [[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& dyn_action();
    // public System.Void .ctor()
    // Offset: 0x1BB346C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainThreadDispatcher::$$c__DisplayClass6_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainThreadDispatcher::$$c__DisplayClass6_0*, creationType>()));
    }
    // System.Void <Enqueue>b__0()
    // Offset: 0x1BB35C0
    void $Enqueue$b__0();
  }; // Viveport.MainThreadDispatcher/Viveport.<>c__DisplayClass6_0
  #pragma pack(pop)
  static check_size<sizeof(MainThreadDispatcher::$$c__DisplayClass6_0), 24 + sizeof(::System::Collections::IEnumerator*)> __Viveport_MainThreadDispatcher_$$c__DisplayClass6_0SizeCheck;
  static_assert(sizeof(MainThreadDispatcher::$$c__DisplayClass6_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::$Enqueue$b__0
// Il2CppName: <Enqueue>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::*)()>(&Viveport::MainThreadDispatcher::$$c__DisplayClass6_0::$Enqueue$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher::$$c__DisplayClass6_0*), "<Enqueue>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
