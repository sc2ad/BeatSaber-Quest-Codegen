// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Viveport.Core
namespace Viveport::Core {
  // Forward declaring type: Logger
  class Logger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Core::Logger);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Core::Logger*, "Viveport.Core", "Logger");
// Type namespace: Viveport.Core
namespace Viveport::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Core.Logger
  // [TokenAttribute] Offset: FFFFFFFF
  class Logger : public ::Il2CppObject {
    public:
    // static field const value: static private System.String LoggerTypeNameUnity
    static constexpr const char* LoggerTypeNameUnity = "UnityEngine.Debug";
    // Get static field: static private System.String LoggerTypeNameUnity
    static ::StringW _get_LoggerTypeNameUnity();
    // Set static field: static private System.String LoggerTypeNameUnity
    static void _set_LoggerTypeNameUnity(::StringW value);
    // Get static field: static private System.Boolean _hasDetected
    static bool _get__hasDetected();
    // Set static field: static private System.Boolean _hasDetected
    static void _set__hasDetected(bool value);
    // Get static field: static private System.Boolean _usingUnityLog
    static bool _get__usingUnityLog();
    // Set static field: static private System.Boolean _usingUnityLog
    static void _set__usingUnityLog(bool value);
    // Get static field: static private System.Type _unityLogType
    static ::System::Type* _get__unityLogType();
    // Set static field: static private System.Type _unityLogType
    static void _set__unityLogType(::System::Type* value);
    // public System.Void .ctor()
    // Offset: 0xD04B74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Logger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Core::Logger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Logger*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xD04B7C
    static void _cctor();
    // static public System.Void Log(System.String message)
    // Offset: 0xD0457C
    static void Log(::StringW message);
    // static private System.Void ConsoleLog(System.String message)
    // Offset: 0xD0497C
    static void ConsoleLog(::StringW message);
    // static private System.Void UnityLog(System.String message)
    // Offset: 0xD0464C
    static void UnityLog(::StringW message);
    // static private System.Type GetType(System.String typeName)
    // Offset: 0xD04A18
    static ::System::Type* GetType(::StringW typeName);
  }; // Viveport.Core.Logger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Core::Logger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Core::Logger::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Viveport::Core::Logger::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Core::Logger*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::Core::Logger::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Viveport::Core::Logger::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Core::Logger*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Viveport::Core::Logger::ConsoleLog
// Il2CppName: ConsoleLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Viveport::Core::Logger::ConsoleLog)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Core::Logger*), "ConsoleLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Viveport::Core::Logger::UnityLog
// Il2CppName: UnityLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Viveport::Core::Logger::UnityLog)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Core::Logger*), "UnityLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Viveport::Core::Logger::GetType
// Il2CppName: GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::StringW)>(&Viveport::Core::Logger::GetType)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Core::Logger*), "GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
