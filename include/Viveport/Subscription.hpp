// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Viveport::Internal
namespace Viveport::Internal {
  // Forward declaring type: StatusCallback2
  class StatusCallback2;
}
// Forward declaring namespace: Viveport
namespace Viveport {
  // Forward declaring type: StatusCallback2
  class StatusCallback2;
  // Forward declaring type: SubscriptionStatus
  class SubscriptionStatus;
}
// Completed forward declares
// Type namespace: Viveport
namespace Viveport {
  // Forward declaring type: Subscription
  class Subscription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Subscription);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Subscription*, "Viveport", "Subscription");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Subscription
  // [TokenAttribute] Offset: FFFFFFFF
  class Subscription : public ::Il2CppObject {
    public:
    // Get static field: static private Viveport.Internal.StatusCallback2 isReadyIl2cppCallback
    static ::Viveport::Internal::StatusCallback2* _get_isReadyIl2cppCallback();
    // Set static field: static private Viveport.Internal.StatusCallback2 isReadyIl2cppCallback
    static void _set_isReadyIl2cppCallback(::Viveport::Internal::StatusCallback2* value);
    // public System.Void .ctor()
    // Offset: 0x1BB4380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Subscription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Subscription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Subscription*, creationType>()));
    }
    // static private System.Void IsReadyIl2cppCallback(System.Int32 errorCode, System.String message)
    // Offset: 0x1BB4050
    static void IsReadyIl2cppCallback(int errorCode, ::StringW message);
    // static public System.Void IsReady(Viveport.StatusCallback2 callback)
    // Offset: 0x1BB40C0
    static void IsReady(::Viveport::StatusCallback2* callback);
    // static public Viveport.SubscriptionStatus GetUserStatus()
    // Offset: 0x1BB4208
    static ::Viveport::SubscriptionStatus* GetUserStatus();
  }; // Viveport.Subscription
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Subscription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Subscription::IsReadyIl2cppCallback
// Il2CppName: IsReadyIl2cppCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::StringW)>(&Viveport::Subscription::IsReadyIl2cppCallback)> {
  static const MethodInfo* get() {
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Subscription*), "IsReadyIl2cppCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorCode, message});
  }
};
// Writing MetadataGetter for method: Viveport::Subscription::IsReady
// Il2CppName: IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Viveport::StatusCallback2*)>(&Viveport::Subscription::IsReady)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("Viveport", "StatusCallback2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Subscription*), "IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Viveport::Subscription::GetUserStatus
// Il2CppName: GetUserStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Viveport::SubscriptionStatus* (*)()>(&Viveport::Subscription::GetUserStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Subscription*), "GetUserStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
