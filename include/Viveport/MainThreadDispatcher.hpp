// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Viveport
namespace Viveport {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Viveport
namespace Viveport {
  // Forward declaring type: MainThreadDispatcher
  class MainThreadDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::MainThreadDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::MainThreadDispatcher*, "Viveport", "MainThreadDispatcher");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.MainThreadDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class MainThreadDispatcher : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Viveport::MainThreadDispatcher::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    // Nested type: ::Viveport::MainThreadDispatcher::$ActionWrapper$d__12
    class $ActionWrapper$d__12;
    // Nested type: ::Viveport::MainThreadDispatcher::$ActionWrapper$d__13_1<T1>
    template<typename T1>
    class $ActionWrapper$d__13_1;
    // Nested type: ::Viveport::MainThreadDispatcher::$ActionWrapper$d__14_2<T1, T2>
    template<typename T1, typename T2>
    class $ActionWrapper$d__14_2;
    // Nested type: ::Viveport::MainThreadDispatcher::$ActionWrapper$d__15_3<T1, T2, T3>
    template<typename T1, typename T2, typename T3>
    class $ActionWrapper$d__15_3;
    // Nested type: ::Viveport::MainThreadDispatcher::$ActionWrapper$d__16_4<T1, T2, T3, T4>
    template<typename T1, typename T2, typename T3, typename T4>
    class $ActionWrapper$d__16_4;
    // Get static field: static private readonly System.Collections.Generic.Queue`1<System.Action> actions
    static ::System::Collections::Generic::Queue_1<::System::Action*>* _get_actions();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<System.Action> actions
    static void _set_actions(::System::Collections::Generic::Queue_1<::System::Action*>* value);
    // Get static field: static private Viveport.MainThreadDispatcher instance
    static ::Viveport::MainThreadDispatcher* _get_instance();
    // Set static field: static private Viveport.MainThreadDispatcher instance
    static void _set_instance(::Viveport::MainThreadDispatcher* value);
    // public System.Void .ctor()
    // Offset: 0x1BB3538
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainThreadDispatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainThreadDispatcher*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BB3540
    static void _cctor();
    // private System.Void Awake()
    // Offset: 0x1BB2EF0
    void Awake();
    // public System.Void Update()
    // Offset: 0x1BB3004
    void Update();
    // static public Viveport.MainThreadDispatcher Instance()
    // Offset: 0x1BB317C
    static ::Viveport::MainThreadDispatcher* Instance();
    // private System.Void OnDestroy()
    // Offset: 0x1BB327C
    void OnDestroy();
    // public System.Void Enqueue(System.Collections.IEnumerator action)
    // Offset: 0x1BB32E4
    void Enqueue(::System::Collections::IEnumerator* action);
    // public System.Void Enqueue(System.Action action)
    // Offset: 0x1BB3474
    void Enqueue(::System::Action* action);
    // public System.Void Enqueue(System.Action`1<T1> action, T1 param1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    void Enqueue(::System::Action_1<T1>* action, T1 param1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, action, param1);
    }
    // public System.Void Enqueue(System.Action`2<T1,T2> action, T1 param1, T2 param2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    void Enqueue(::System::Action_2<T1, T2>* action, T1 param1, T2 param2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, action, param1, param2);
    }
    // public System.Void Enqueue(System.Action`3<T1,T2,T3> action, T1 param1, T2 param2, T3 param3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    void Enqueue(::System::Action_3<T1, T2, T3>* action, T1 param1, T2 param2, T3 param3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2), ::il2cpp_utils::ExtractType(param3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, action, param1, param2, param3);
    }
    // public System.Void Enqueue(System.Action`4<T1,T2,T3,T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    void Enqueue(::System::Action_4<T1, T2, T3, T4>* action, T1 param1, T2 param2, T3 param3, T4 param4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2), ::il2cpp_utils::ExtractType(param3), ::il2cpp_utils::ExtractType(param4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, action, param1, param2, param3, param4);
    }
    // private System.Collections.IEnumerator ActionWrapper(System.Action action)
    // Offset: 0x1BB349C
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action* action);
    // private System.Collections.IEnumerator ActionWrapper(System.Action`1<T1> action, T1 param1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1>
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action_1<T1>* action, T1 param1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::ActionWrapper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionWrapper", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___generic__method, action, param1);
    }
    // private System.Collections.IEnumerator ActionWrapper(System.Action`2<T1,T2> action, T1 param1, T2 param2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action_2<T1, T2>* action, T1 param1, T2 param2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::ActionWrapper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionWrapper", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___generic__method, action, param1, param2);
    }
    // private System.Collections.IEnumerator ActionWrapper(System.Action`3<T1,T2,T3> action, T1 param1, T2 param2, T3 param3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action_3<T1, T2, T3>* action, T1 param1, T2 param2, T3 param3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::ActionWrapper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionWrapper", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2), ::il2cpp_utils::ExtractType(param3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___generic__method, action, param1, param2, param3);
    }
    // private System.Collections.IEnumerator ActionWrapper(System.Action`4<T1,T2,T3,T4> action, T1 param1, T2 param2, T3 param3, T4 param4)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3, class T4>
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action_4<T1, T2, T3, T4>* action, T1 param1, T2 param2, T3 param3, T4 param4) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::MainThreadDispatcher::ActionWrapper");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionWrapper", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(param1), ::il2cpp_utils::ExtractType(param2), ::il2cpp_utils::ExtractType(param3), ::il2cpp_utils::ExtractType(param4)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T4>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___generic__method, action, param1, param2, param3, param4);
    }
  }; // Viveport.MainThreadDispatcher
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Viveport::MainThreadDispatcher::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::*)()>(&Viveport::MainThreadDispatcher::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::*)()>(&Viveport::MainThreadDispatcher::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Instance
// Il2CppName: Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Viveport::MainThreadDispatcher* (*)()>(&Viveport::MainThreadDispatcher::Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::*)()>(&Viveport::MainThreadDispatcher::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::*)(::System::Collections::IEnumerator*)>(&Viveport::MainThreadDispatcher::Enqueue)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::MainThreadDispatcher::*)(::System::Action*)>(&Viveport::MainThreadDispatcher::Enqueue)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Viveport::MainThreadDispatcher::*)(::System::Action*)>(&Viveport::MainThreadDispatcher::ActionWrapper)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::MainThreadDispatcher*), "ActionWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Viveport::MainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
// Cannot write MetadataGetter for generic methods!
