// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.Api
#include "Viveport/Api.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Api::LicenseChecker);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Api::LicenseChecker*, "Viveport", "Api/LicenseChecker");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Api/Viveport.LicenseChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class Api::LicenseChecker : public ::Il2CppObject {
    public:
    // protected System.Void .ctor()
    // Offset: 0xD04564
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Api::LicenseChecker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Api::LicenseChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Api::LicenseChecker*, creationType>()));
    }
    // public System.Void OnSuccess(System.Int64 issueTime, System.Int64 expirationTime, System.Int32 latestVersion, System.Boolean updateRequired)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSuccess(int64_t issueTime, int64_t expirationTime, int latestVersion, bool updateRequired);
    // public System.Void OnFailure(System.Int32 errorCode, System.String errorMessage)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnFailure(int errorCode, ::StringW errorMessage);
  }; // Viveport.Api/Viveport.LicenseChecker
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Api::LicenseChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Api::LicenseChecker::OnSuccess
// Il2CppName: OnSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Api::LicenseChecker::*)(int64_t, int64_t, int, bool)>(&Viveport::Api::LicenseChecker::OnSuccess)> {
  static const MethodInfo* get() {
    static auto* issueTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* expirationTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* latestVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* updateRequired = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Api::LicenseChecker*), "OnSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issueTime, expirationTime, latestVersion, updateRequired});
  }
};
// Writing MetadataGetter for method: Viveport::Api::LicenseChecker::OnFailure
// Il2CppName: OnFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Api::LicenseChecker::*)(int, ::StringW)>(&Viveport::Api::LicenseChecker::OnFailure)> {
  static const MethodInfo* get() {
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Api::LicenseChecker*), "OnFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorCode, errorMessage});
  }
};
