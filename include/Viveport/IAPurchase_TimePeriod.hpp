// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.IAPurchase
#include "Viveport/IAPurchase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::IAPurchase::TimePeriod);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::IAPurchase::TimePeriod*, "Viveport", "IAPurchase/TimePeriod");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.IAPurchase/Viveport.TimePeriod
  // [TokenAttribute] Offset: FFFFFFFF
  class IAPurchase::TimePeriod : public ::Il2CppObject {
    public:
    public:
    // private System.String <time_type>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW time_type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <value>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.String <time_type>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$time_type$k__BackingField();
    // Get instance field reference: private System.Int32 <value>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$value$k__BackingField();
    // public System.String get_time_type()
    // Offset: 0x1BACA58
    ::StringW get_time_type();
    // public System.Void set_time_type(System.String value)
    // Offset: 0x1BACA60
    void set_time_type(::StringW value);
    // public System.Int32 get_value()
    // Offset: 0x1BACA68
    int get_value();
    // public System.Void set_value(System.Int32 value)
    // Offset: 0x1BACA70
    void set_value(int value);
    // public System.Void .ctor()
    // Offset: 0x1BACA78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IAPurchase::TimePeriod* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::IAPurchase::TimePeriod::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IAPurchase::TimePeriod*, creationType>()));
    }
  }; // Viveport.IAPurchase/Viveport.TimePeriod
  #pragma pack(pop)
  static check_size<sizeof(IAPurchase::TimePeriod), 24 + sizeof(int)> __Viveport_IAPurchase_TimePeriodSizeCheck;
  static_assert(sizeof(IAPurchase::TimePeriod) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::IAPurchase::TimePeriod::get_time_type
// Il2CppName: get_time_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Viveport::IAPurchase::TimePeriod::*)()>(&Viveport::IAPurchase::TimePeriod::get_time_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::IAPurchase::TimePeriod*), "get_time_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::IAPurchase::TimePeriod::set_time_type
// Il2CppName: set_time_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::IAPurchase::TimePeriod::*)(::StringW)>(&Viveport::IAPurchase::TimePeriod::set_time_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::IAPurchase::TimePeriod*), "set_time_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Viveport::IAPurchase::TimePeriod::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Viveport::IAPurchase::TimePeriod::*)()>(&Viveport::IAPurchase::TimePeriod::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::IAPurchase::TimePeriod*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::IAPurchase::TimePeriod::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::IAPurchase::TimePeriod::*)(int)>(&Viveport::IAPurchase::TimePeriod::set_value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::IAPurchase::TimePeriod*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Viveport::IAPurchase::TimePeriod::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
