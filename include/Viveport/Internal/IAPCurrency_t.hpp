// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Forward declaring type: IAPCurrency_t
  struct IAPCurrency_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::IAPCurrency_t, "Viveport.Internal", "IAPCurrency_t");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Viveport.Internal.IAPCurrency_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct IAPCurrency_t/*, public ::System::ValueType*/ {
    public:
    public:
    // System.String m_pName
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_pName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String m_pSymbol
    // Size: 0x8
    // Offset: 0x8
    ::StringW m_pSymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: IAPCurrency_t
    constexpr IAPCurrency_t(::StringW m_pName_ = {}, ::StringW m_pSymbol_ = {}) noexcept : m_pName{m_pName_}, m_pSymbol{m_pSymbol_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.String m_pName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_pName();
    // Get instance field reference: System.String m_pSymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_pSymbol();
  }; // Viveport.Internal.IAPCurrency_t
  #pragma pack(pop)
  static check_size<sizeof(IAPCurrency_t), 8 + sizeof(::StringW)> __Viveport_Internal_IAPCurrency_tSizeCheck;
  static_assert(sizeof(IAPCurrency_t) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
