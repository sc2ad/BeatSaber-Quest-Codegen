// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.Api
#include "Viveport/Api.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Viveport::Internal
namespace Viveport::Internal {
  // Forward declaring type: StatusCallback
  class StatusCallback;
}
// Completed forward declares
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Forward declaring type: Api
  class Api;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Internal::Api);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::Api*, "Viveport.Internal", "Api");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Internal.Api
  // [TokenAttribute] Offset: FFFFFFFF
  class Api : public ::Il2CppObject {
    public:
    // Nested type: ::Viveport::Internal::Api::AndroidLicenseChecker
    class AndroidLicenseChecker;
    // public System.Void .ctor()
    // Offset: 0x1BAE3C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Api* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Internal::Api::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Api*, creationType>()));
    }
    // static System.Int32 Init(Viveport.Internal.StatusCallback callback, System.String pchAppKey)
    // Offset: 0x1BADE84
    static int Init(::Viveport::Internal::StatusCallback* callback, ::StringW pchAppKey);
    // static System.Int32 Shutdown(Viveport.Internal.StatusCallback callback)
    // Offset: 0x1BADFD8
    static int Shutdown(::Viveport::Internal::StatusCallback* callback);
    // static System.String Version()
    // Offset: 0x1BAE0CC
    static ::StringW Version();
    // static System.Void GetLicense(Viveport.Api/Viveport.LicenseChecker checker, System.String appId, System.String appKey)
    // Offset: 0x1BAE1C8
    static void GetLicense(::Viveport::Api::LicenseChecker* checker, ::StringW appId, ::StringW appKey);
  }; // Viveport.Internal.Api
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Internal::Api::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Internal::Api::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Viveport::Internal::StatusCallback*, ::StringW)>(&Viveport::Internal::Api::Init)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("Viveport.Internal", "StatusCallback")->byval_arg;
    static auto* pchAppKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, pchAppKey});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Api::Shutdown
// Il2CppName: Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Viveport::Internal::StatusCallback*)>(&Viveport::Internal::Api::Shutdown)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("Viveport.Internal", "StatusCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Api::Version
// Il2CppName: Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Viveport::Internal::Api::Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api*), "Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Api::GetLicense
// Il2CppName: GetLicense
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Viveport::Api::LicenseChecker*, ::StringW, ::StringW)>(&Viveport::Internal::Api::GetLicense)> {
  static const MethodInfo* get() {
    static auto* checker = &::il2cpp_utils::GetClassFromName("Viveport", "Api/LicenseChecker")->byval_arg;
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api*), "GetLicense", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{checker, appId, appKey});
  }
};
