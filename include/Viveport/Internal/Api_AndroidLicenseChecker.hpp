// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.Internal.Api
#include "Viveport/Internal/Api.hpp"
// Including type: UnityEngine.AndroidJavaProxy
#include "UnityEngine/AndroidJavaProxy.hpp"
// Including type: Viveport.Api
#include "Viveport/Api.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Internal::Api::AndroidLicenseChecker);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::Api::AndroidLicenseChecker*, "Viveport.Internal", "Api/AndroidLicenseChecker");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Internal.Api/Viveport.Internal.AndroidLicenseChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class Api::AndroidLicenseChecker : public ::UnityEngine::AndroidJavaProxy {
    public:
    public:
    // private Viveport.Api/Viveport.LicenseChecker checker
    // Size: 0x8
    // Offset: 0x20
    ::Viveport::Api::LicenseChecker* checker;
    // Field size check
    static_assert(sizeof(::Viveport::Api::LicenseChecker*) == 0x8);
    public:
    // Creating conversion operator: operator ::Viveport::Api::LicenseChecker*
    constexpr operator ::Viveport::Api::LicenseChecker*() const noexcept {
      return checker;
    }
    // Get instance field reference: private Viveport.Api/Viveport.LicenseChecker checker
    [[deprecated("Use field access instead!")]] ::Viveport::Api::LicenseChecker*& dyn_checker();
    // System.Void .ctor(Viveport.Api/Viveport.LicenseChecker checker)
    // Offset: 0x1BAE340
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Api::AndroidLicenseChecker* New_ctor(::Viveport::Api::LicenseChecker* checker) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Internal::Api::AndroidLicenseChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Api::AndroidLicenseChecker*, creationType>(checker)));
    }
    // System.Void onSuccess(System.Int64 issueTime, System.Int64 expirationTime, System.Int32 latestVersion, System.Boolean updateRequired)
    // Offset: 0x1BAE3D0
    void onSuccess(int64_t issueTime, int64_t expirationTime, int latestVersion, bool updateRequired);
    // System.Void onFailure(System.Int32 errorCode, System.String errorMessage)
    // Offset: 0x1BAE5B8
    void onFailure(int errorCode, ::StringW errorMessage);
  }; // Viveport.Internal.Api/Viveport.Internal.AndroidLicenseChecker
  #pragma pack(pop)
  static check_size<sizeof(Api::AndroidLicenseChecker), 32 + sizeof(::Viveport::Api::LicenseChecker*)> __Viveport_Internal_Api_AndroidLicenseCheckerSizeCheck;
  static_assert(sizeof(Api::AndroidLicenseChecker) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Internal::Api::AndroidLicenseChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Internal::Api::AndroidLicenseChecker::onSuccess
// Il2CppName: onSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Internal::Api::AndroidLicenseChecker::*)(int64_t, int64_t, int, bool)>(&Viveport::Internal::Api::AndroidLicenseChecker::onSuccess)> {
  static const MethodInfo* get() {
    static auto* issueTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* expirationTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* latestVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* updateRequired = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api::AndroidLicenseChecker*), "onSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issueTime, expirationTime, latestVersion, updateRequired});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Api::AndroidLicenseChecker::onFailure
// Il2CppName: onFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Internal::Api::AndroidLicenseChecker::*)(int, ::StringW)>(&Viveport::Internal::Api::AndroidLicenseChecker::onFailure)> {
  static const MethodInfo* get() {
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Api::AndroidLicenseChecker*), "onFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorCode, errorMessage});
  }
};
