// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Forward declaring type: ESubscriptionTransactionType
  struct ESubscriptionTransactionType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::ESubscriptionTransactionType, "Viveport.Internal", "ESubscriptionTransactionType");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Internal.ESubscriptionTransactionType
  // [TokenAttribute] Offset: FFFFFFFF
  struct ESubscriptionTransactionType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ESubscriptionTransactionType
    constexpr ESubscriptionTransactionType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Viveport.Internal.ESubscriptionTransactionType UNKNOWN
    static constexpr const int UNKNOWN = 0;
    // Get static field: static public Viveport.Internal.ESubscriptionTransactionType UNKNOWN
    static ::Viveport::Internal::ESubscriptionTransactionType _get_UNKNOWN();
    // Set static field: static public Viveport.Internal.ESubscriptionTransactionType UNKNOWN
    static void _set_UNKNOWN(::Viveport::Internal::ESubscriptionTransactionType value);
    // static field const value: static public Viveport.Internal.ESubscriptionTransactionType PAID
    static constexpr const int PAID = 1;
    // Get static field: static public Viveport.Internal.ESubscriptionTransactionType PAID
    static ::Viveport::Internal::ESubscriptionTransactionType _get_PAID();
    // Set static field: static public Viveport.Internal.ESubscriptionTransactionType PAID
    static void _set_PAID(::Viveport::Internal::ESubscriptionTransactionType value);
    // static field const value: static public Viveport.Internal.ESubscriptionTransactionType REDEEM
    static constexpr const int REDEEM = 2;
    // Get static field: static public Viveport.Internal.ESubscriptionTransactionType REDEEM
    static ::Viveport::Internal::ESubscriptionTransactionType _get_REDEEM();
    // Set static field: static public Viveport.Internal.ESubscriptionTransactionType REDEEM
    static void _set_REDEEM(::Viveport::Internal::ESubscriptionTransactionType value);
    // static field const value: static public Viveport.Internal.ESubscriptionTransactionType FREEE_TRIAL
    static constexpr const int FREEE_TRIAL = 3;
    // Get static field: static public Viveport.Internal.ESubscriptionTransactionType FREEE_TRIAL
    static ::Viveport::Internal::ESubscriptionTransactionType _get_FREEE_TRIAL();
    // Set static field: static public Viveport.Internal.ESubscriptionTransactionType FREEE_TRIAL
    static void _set_FREEE_TRIAL(::Viveport::Internal::ESubscriptionTransactionType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Viveport.Internal.ESubscriptionTransactionType
  #pragma pack(pop)
  static check_size<sizeof(ESubscriptionTransactionType), 0 + sizeof(int)> __Viveport_Internal_ESubscriptionTransactionTypeSizeCheck;
  static_assert(sizeof(ESubscriptionTransactionType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
