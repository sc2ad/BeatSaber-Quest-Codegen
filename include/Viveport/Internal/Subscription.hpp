// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Viveport::Internal
namespace Viveport::Internal {
  // Forward declaring type: StatusCallback2
  class StatusCallback2;
  // Forward declaring type: ESubscriptionTransactionType
  struct ESubscriptionTransactionType;
}
// Completed forward declares
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Forward declaring type: Subscription
  class Subscription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Internal::Subscription);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::Subscription*, "Viveport.Internal", "Subscription");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Internal.Subscription
  // [TokenAttribute] Offset: FFFFFFFF
  class Subscription : public ::Il2CppObject {
    public:
    // public System.Void .ctor()
    // Offset: 0x1BB10A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Subscription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Internal::Subscription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Subscription*, creationType>()));
    }
    // static System.Int32 IsReady(Viveport.Internal.StatusCallback2 callback)
    // Offset: 0x1BB0BD4
    static int IsReady(::Viveport::Internal::StatusCallback2* callback);
    // static System.Boolean IsWindowsSubscriber()
    // Offset: 0x1BB0CF4
    static bool IsWindowsSubscriber();
    // static System.Boolean IsAndroidSubscriber()
    // Offset: 0x1BB0DF0
    static bool IsAndroidSubscriber();
    // static Viveport.Internal.ESubscriptionTransactionType GetTransactionType()
    // Offset: 0x1BB0EEC
    static ::Viveport::Internal::ESubscriptionTransactionType GetTransactionType();
  }; // Viveport.Internal.Subscription
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Internal::Subscription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Internal::Subscription::IsReady
// Il2CppName: IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Viveport::Internal::StatusCallback2*)>(&Viveport::Internal::Subscription::IsReady)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("Viveport.Internal", "StatusCallback2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Subscription*), "IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Subscription::IsWindowsSubscriber
// Il2CppName: IsWindowsSubscriber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Viveport::Internal::Subscription::IsWindowsSubscriber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Subscription*), "IsWindowsSubscriber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Subscription::IsAndroidSubscriber
// Il2CppName: IsAndroidSubscriber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Viveport::Internal::Subscription::IsAndroidSubscriber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Subscription*), "IsAndroidSubscriber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Subscription::GetTransactionType
// Il2CppName: GetTransactionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Viveport::Internal::ESubscriptionTransactionType (*)()>(&Viveport::Internal::Subscription::GetTransactionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Subscription*), "GetTransactionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
