// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Viveport.Internal.Deeplink
#include "Viveport/Internal/Deeplink.hpp"
// Including type: UnityEngine.AndroidJavaProxy
#include "UnityEngine/AndroidJavaProxy.hpp"
// Including type: Viveport.Deeplink
#include "Viveport/Deeplink.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::Internal::Deeplink::AndroidDeeplinkChecker);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::Internal::Deeplink::AndroidDeeplinkChecker*, "Viveport.Internal", "Deeplink/AndroidDeeplinkChecker");
// Type namespace: Viveport.Internal
namespace Viveport::Internal {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.Internal.Deeplink/Viveport.Internal.AndroidDeeplinkChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class Deeplink::AndroidDeeplinkChecker : public ::UnityEngine::AndroidJavaProxy {
    public:
    public:
    // private Viveport.Deeplink/Viveport.DeeplinkChecker checker
    // Size: 0x8
    // Offset: 0x20
    ::Viveport::Deeplink::DeeplinkChecker* checker;
    // Field size check
    static_assert(sizeof(::Viveport::Deeplink::DeeplinkChecker*) == 0x8);
    public:
    // Creating conversion operator: operator ::Viveport::Deeplink::DeeplinkChecker*
    constexpr operator ::Viveport::Deeplink::DeeplinkChecker*() const noexcept {
      return checker;
    }
    // Get instance field reference: private Viveport.Deeplink/Viveport.DeeplinkChecker checker
    [[deprecated("Use field access instead!")]] ::Viveport::Deeplink::DeeplinkChecker*& dyn_checker();
    // System.Void .ctor(Viveport.Deeplink/Viveport.DeeplinkChecker checker)
    // Offset: 0x1BAE9D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Deeplink::AndroidDeeplinkChecker* New_ctor(::Viveport::Deeplink::DeeplinkChecker* checker) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::Internal::Deeplink::AndroidDeeplinkChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Deeplink::AndroidDeeplinkChecker*, creationType>(checker)));
    }
    // System.Void onSuccess()
    // Offset: 0x1BAEE04
    void onSuccess();
    // System.Void onFailure(System.Int32 errorCode, System.String errorMessage)
    // Offset: 0x1BAEE94
    void onFailure(int errorCode, ::StringW errorMessage);
  }; // Viveport.Internal.Deeplink/Viveport.Internal.AndroidDeeplinkChecker
  #pragma pack(pop)
  static check_size<sizeof(Deeplink::AndroidDeeplinkChecker), 32 + sizeof(::Viveport::Deeplink::DeeplinkChecker*)> __Viveport_Internal_Deeplink_AndroidDeeplinkCheckerSizeCheck;
  static_assert(sizeof(Deeplink::AndroidDeeplinkChecker) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::Internal::Deeplink::AndroidDeeplinkChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Viveport::Internal::Deeplink::AndroidDeeplinkChecker::onSuccess
// Il2CppName: onSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Internal::Deeplink::AndroidDeeplinkChecker::*)()>(&Viveport::Internal::Deeplink::AndroidDeeplinkChecker::onSuccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Deeplink::AndroidDeeplinkChecker*), "onSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::Internal::Deeplink::AndroidDeeplinkChecker::onFailure
// Il2CppName: onFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::Internal::Deeplink::AndroidDeeplinkChecker::*)(int, ::StringW)>(&Viveport::Internal::Deeplink::AndroidDeeplinkChecker::onFailure)> {
  static const MethodInfo* get() {
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::Internal::Deeplink::AndroidDeeplinkChecker*), "onFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorCode, errorMessage});
  }
};
