// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Viveport
namespace Viveport {
  // Skipping declaration: TransactionType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Viveport
namespace Viveport {
  // Forward declaring type: SubscriptionStatus
  class SubscriptionStatus;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Viveport::SubscriptionStatus);
DEFINE_IL2CPP_ARG_TYPE(::Viveport::SubscriptionStatus*, "Viveport", "SubscriptionStatus");
// Type namespace: Viveport
namespace Viveport {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Viveport.SubscriptionStatus
  // [TokenAttribute] Offset: FFFFFFFF
  class SubscriptionStatus : public ::Il2CppObject {
    public:
    // Nested type: ::Viveport::SubscriptionStatus::Platform
    struct Platform;
    // Nested type: ::Viveport::SubscriptionStatus::TransactionType
    struct TransactionType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Viveport.SubscriptionStatus/Viveport.Platform
    // [TokenAttribute] Offset: FFFFFFFF
    struct Platform/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Platform
      constexpr Platform(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.Platform Windows
      static constexpr const int Windows = 0;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.Platform Windows
      static ::Viveport::SubscriptionStatus::Platform _get_Windows();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.Platform Windows
      static void _set_Windows(::Viveport::SubscriptionStatus::Platform value);
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.Platform Android
      static constexpr const int Android = 1;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.Platform Android
      static ::Viveport::SubscriptionStatus::Platform _get_Android();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.Platform Android
      static void _set_Android(::Viveport::SubscriptionStatus::Platform value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Viveport.SubscriptionStatus/Viveport.Platform
    #pragma pack(pop)
    static check_size<sizeof(SubscriptionStatus::Platform), 0 + sizeof(int)> __Viveport_SubscriptionStatus_PlatformSizeCheck;
    static_assert(sizeof(SubscriptionStatus::Platform) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Viveport.SubscriptionStatus/Viveport.TransactionType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TransactionType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TransactionType
      constexpr TransactionType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.TransactionType Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Unknown
      static ::Viveport::SubscriptionStatus::TransactionType _get_Unknown();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Unknown
      static void _set_Unknown(::Viveport::SubscriptionStatus::TransactionType value);
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.TransactionType Paid
      static constexpr const int Paid = 1;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Paid
      static ::Viveport::SubscriptionStatus::TransactionType _get_Paid();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Paid
      static void _set_Paid(::Viveport::SubscriptionStatus::TransactionType value);
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.TransactionType Redeem
      static constexpr const int Redeem = 2;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Redeem
      static ::Viveport::SubscriptionStatus::TransactionType _get_Redeem();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType Redeem
      static void _set_Redeem(::Viveport::SubscriptionStatus::TransactionType value);
      // static field const value: static public Viveport.SubscriptionStatus/Viveport.TransactionType FreeTrial
      static constexpr const int FreeTrial = 3;
      // Get static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType FreeTrial
      static ::Viveport::SubscriptionStatus::TransactionType _get_FreeTrial();
      // Set static field: static public Viveport.SubscriptionStatus/Viveport.TransactionType FreeTrial
      static void _set_FreeTrial(::Viveport::SubscriptionStatus::TransactionType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Viveport.SubscriptionStatus/Viveport.TransactionType
    #pragma pack(pop)
    static check_size<sizeof(SubscriptionStatus::TransactionType), 0 + sizeof(int)> __Viveport_SubscriptionStatus_TransactionTypeSizeCheck;
    static_assert(sizeof(SubscriptionStatus::TransactionType) == 0x4);
    public:
    // private System.Collections.Generic.List`1<Viveport.SubscriptionStatus/Viveport.Platform> <Platforms>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>* Platforms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>*) == 0x8);
    // private Viveport.SubscriptionStatus/Viveport.TransactionType <Type>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::Viveport::SubscriptionStatus::TransactionType Type;
    // Field size check
    static_assert(sizeof(::Viveport::SubscriptionStatus::TransactionType) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<Viveport.SubscriptionStatus/Viveport.Platform> <Platforms>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>*& dyn_$Platforms$k__BackingField();
    // Get instance field reference: private Viveport.SubscriptionStatus/Viveport.TransactionType <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::Viveport::SubscriptionStatus::TransactionType& dyn_$Type$k__BackingField();
    // public System.Collections.Generic.List`1<Viveport.SubscriptionStatus/Viveport.Platform> get_Platforms()
    // Offset: 0x1BB4388
    ::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>* get_Platforms();
    // public System.Void set_Platforms(System.Collections.Generic.List`1<Viveport.SubscriptionStatus/Viveport.Platform> value)
    // Offset: 0x1BB4390
    void set_Platforms(::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>* value);
    // public Viveport.SubscriptionStatus/Viveport.TransactionType get_Type()
    // Offset: 0x1BB4398
    ::Viveport::SubscriptionStatus::TransactionType get_Type();
    // public System.Void set_Type(Viveport.SubscriptionStatus/Viveport.TransactionType value)
    // Offset: 0x1BB43A0
    void set_Type(::Viveport::SubscriptionStatus::TransactionType value);
    // public System.Void .ctor()
    // Offset: 0x1BB4308
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubscriptionStatus* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Viveport::SubscriptionStatus::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubscriptionStatus*, creationType>()));
    }
  }; // Viveport.SubscriptionStatus
  #pragma pack(pop)
  static check_size<sizeof(SubscriptionStatus), 24 + sizeof(::Viveport::SubscriptionStatus::TransactionType)> __Viveport_SubscriptionStatusSizeCheck;
  static_assert(sizeof(SubscriptionStatus) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Viveport::SubscriptionStatus::TransactionType, "Viveport", "SubscriptionStatus/TransactionType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Viveport::SubscriptionStatus::Platform, "Viveport", "SubscriptionStatus/Platform");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Viveport::SubscriptionStatus::get_Platforms
// Il2CppName: get_Platforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>* (Viveport::SubscriptionStatus::*)()>(&Viveport::SubscriptionStatus::get_Platforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::SubscriptionStatus*), "get_Platforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::SubscriptionStatus::set_Platforms
// Il2CppName: set_Platforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::SubscriptionStatus::*)(::System::Collections::Generic::List_1<::Viveport::SubscriptionStatus::Platform>*)>(&Viveport::SubscriptionStatus::set_Platforms)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Viveport", "SubscriptionStatus/Platform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::SubscriptionStatus*), "set_Platforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Viveport::SubscriptionStatus::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Viveport::SubscriptionStatus::TransactionType (Viveport::SubscriptionStatus::*)()>(&Viveport::SubscriptionStatus::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Viveport::SubscriptionStatus*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Viveport::SubscriptionStatus::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Viveport::SubscriptionStatus::*)(::Viveport::SubscriptionStatus::TransactionType)>(&Viveport::SubscriptionStatus::set_Type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Viveport", "SubscriptionStatus/TransactionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Viveport::SubscriptionStatus*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Viveport::SubscriptionStatus::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
