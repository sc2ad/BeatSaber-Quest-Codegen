// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Org.BouncyCastle.Math.EC.Endo.GlvEndomorphism
#include "Org/BouncyCastle/Math/EC/Endo/GlvEndomorphism.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC::Endo
namespace Org::BouncyCastle::Math::EC::Endo {
  // Forward declaring type: GlvTypeBParameters
  class GlvTypeBParameters;
}
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECPointMap
  class ECPointMap;
  // Forward declaring type: ECCurve
  class ECCurve;
}
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC.Endo
namespace Org::BouncyCastle::Math::EC::Endo {
  // Forward declaring type: GlvTypeBEndomorphism
  class GlvTypeBEndomorphism;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism*, "Org.BouncyCastle.Math.EC.Endo", "GlvTypeBEndomorphism");
// Type namespace: Org.BouncyCastle.Math.EC.Endo
namespace Org::BouncyCastle::Math::EC::Endo {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism
  // [TokenAttribute] Offset: FFFFFFFF
  class GlvTypeBEndomorphism : public ::Il2CppObject/*, public ::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism*/ {
    public:
    public:
    // protected readonly Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters m_parameters
    // Size: 0x8
    // Offset: 0x10
    ::Org::BouncyCastle::Math::EC::Endo::GlvTypeBParameters* m_parameters;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Math::EC::Endo::GlvTypeBParameters*) == 0x8);
    // protected readonly Org.BouncyCastle.Math.EC.ECPointMap m_pointMap
    // Size: 0x8
    // Offset: 0x18
    ::Org::BouncyCastle::Math::EC::ECPointMap* m_pointMap;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Math::EC::ECPointMap*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism
    operator ::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism() noexcept {
      return *reinterpret_cast<::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism*>(this);
    }
    // Creating interface conversion operator: i_GlvEndomorphism
    inline ::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism* i_GlvEndomorphism() noexcept {
      return reinterpret_cast<::Org::BouncyCastle::Math::EC::Endo::GlvEndomorphism*>(this);
    }
    // Get instance field reference: protected readonly Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters m_parameters
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Math::EC::Endo::GlvTypeBParameters*& dyn_m_parameters();
    // Get instance field reference: protected readonly Org.BouncyCastle.Math.EC.ECPointMap m_pointMap
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Math::EC::ECPointMap*& dyn_m_pointMap();
    // public Org.BouncyCastle.Math.EC.ECPointMap get_PointMap()
    // Offset: 0x289929C
    ::Org::BouncyCastle::Math::EC::ECPointMap* get_PointMap();
    // public System.Boolean get_HasEfficientPointMap()
    // Offset: 0x28992A4
    bool get_HasEfficientPointMap();
    // public System.Void .ctor(Org.BouncyCastle.Math.EC.ECCurve curve, Org.BouncyCastle.Math.EC.Endo.GlvTypeBParameters parameters)
    // Offset: 0x289914C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlvTypeBEndomorphism* New_ctor(::Org::BouncyCastle::Math::EC::ECCurve* curve, ::Org::BouncyCastle::Math::EC::Endo::GlvTypeBParameters* parameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlvTypeBEndomorphism*, creationType>(curve, parameters)));
    }
    // public Org.BouncyCastle.Math.BigInteger[] DecomposeScalar(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x2899208
    ::ArrayW<::Org::BouncyCastle::Math::BigInteger*> DecomposeScalar(::Org::BouncyCastle::Math::BigInteger* k);
  }; // Org.BouncyCastle.Math.EC.Endo.GlvTypeBEndomorphism
  #pragma pack(pop)
  static check_size<sizeof(GlvTypeBEndomorphism), 24 + sizeof(::Org::BouncyCastle::Math::EC::ECPointMap*)> __Org_BouncyCastle_Math_EC_Endo_GlvTypeBEndomorphismSizeCheck;
  static_assert(sizeof(GlvTypeBEndomorphism) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::get_PointMap
// Il2CppName: get_PointMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Math::EC::ECPointMap* (Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::*)()>(&Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::get_PointMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism*), "get_PointMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::get_HasEfficientPointMap
// Il2CppName: get_HasEfficientPointMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::*)()>(&Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::get_HasEfficientPointMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism*), "get_HasEfficientPointMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::DecomposeScalar
// Il2CppName: DecomposeScalar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Org::BouncyCastle::Math::BigInteger*> (Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::*)(::Org::BouncyCastle::Math::BigInteger*)>(&Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism::DecomposeScalar)> {
  static const MethodInfo* get() {
    static auto* k = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Math", "BigInteger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::EC::Endo::GlvTypeBEndomorphism*), "DecomposeScalar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{k});
  }
};
