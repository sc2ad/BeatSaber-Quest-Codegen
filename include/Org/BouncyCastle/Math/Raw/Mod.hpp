// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Security
namespace Org::BouncyCastle::Security {
  // Forward declaring type: SecureRandom
  class SecureRandom;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.Raw
namespace Org::BouncyCastle::Math::Raw {
  // Forward declaring type: Mod
  class Mod;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Math::Raw::Mod);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Math::Raw::Mod*, "Org.BouncyCastle.Math.Raw", "Mod");
// Type namespace: Org.BouncyCastle.Math.Raw
namespace Org::BouncyCastle::Math::Raw {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.Raw.Mod
  // [TokenAttribute] Offset: FFFFFFFF
  class Mod : public ::Il2CppObject {
    public:
    // Get static field: static private readonly Org.BouncyCastle.Security.SecureRandom RandomSource
    static ::Org::BouncyCastle::Security::SecureRandom* _get_RandomSource();
    // Set static field: static private readonly Org.BouncyCastle.Security.SecureRandom RandomSource
    static void _set_RandomSource(::Org::BouncyCastle::Security::SecureRandom* value);
    // static private System.Void .cctor()
    // Offset: 0x22F2450
    static void _cctor();
    // static public System.Void Invert(System.UInt32[] p, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x22F1D3C
    static void Invert(::ArrayW<uint> p, ::ArrayW<uint> x, ::ArrayW<uint> z);
    // static public System.UInt32[] Random(System.UInt32[] p)
    // Offset: 0x22F22E4
    static ::ArrayW<uint> Random(::ArrayW<uint> p);
    // static private System.Void InversionResult(System.UInt32[] p, System.Int32 ac, System.UInt32[] a, System.UInt32[] z)
    // Offset: 0x22F229C
    static void InversionResult(::ArrayW<uint> p, int ac, ::ArrayW<uint> a, ::ArrayW<uint> z);
    // static private System.Void InversionStep(System.UInt32[] p, System.UInt32[] u, System.Int32 uLen, System.UInt32[] x, ref System.Int32 xc)
    // Offset: 0x22F2168
    static void InversionStep(::ArrayW<uint> p, ::ArrayW<uint> u, int uLen, ::ArrayW<uint> x, ByRef<int> xc);
  }; // Org.BouncyCastle.Math.Raw.Mod
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Mod::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Org::BouncyCastle::Math::Raw::Mod::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::Raw::Mod*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Mod::Invert
// Il2CppName: Invert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ::ArrayW<uint>, ::ArrayW<uint>)>(&Org::BouncyCastle::Math::Raw::Mod::Invert)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* z = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::Raw::Mod*), "Invert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, x, z});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Mod::Random
// Il2CppName: Random
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>)>(&Org::BouncyCastle::Math::Raw::Mod::Random)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::Raw::Mod*), "Random", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Mod::InversionResult
// Il2CppName: InversionResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint>, ::ArrayW<uint>)>(&Org::BouncyCastle::Math::Raw::Mod::InversionResult)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ac = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* a = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* z = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::Raw::Mod*), "InversionResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, ac, a, z});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Mod::InversionStep
// Il2CppName: InversionStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ::ArrayW<uint>, int, ::ArrayW<uint>, ByRef<int>)>(&Org::BouncyCastle::Math::Raw::Mod::InversionStep)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* u = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* uLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* xc = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Math::Raw::Mod*), "InversionStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, u, uLen, x, xc});
  }
};
