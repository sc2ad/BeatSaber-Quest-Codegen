// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IBasicAgreement
  class IBasicAgreement;
  // Forward declaring type: IDerivationFunction
  class IDerivationFunction;
  // Forward declaring type: IMac
  class IMac;
  // Forward declaring type: BufferedBlockCipher
  class BufferedBlockCipher;
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Forward declaring type: IesParameters
  class IesParameters;
  // Forward declaring type: KdfParameters
  class KdfParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Forward declaring type: IesEngine
  class IesEngine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Crypto::Engines::IesEngine);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Crypto::Engines::IesEngine*, "Org.BouncyCastle.Crypto.Engines", "IesEngine");
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.IesEngine
  // [TokenAttribute] Offset: FFFFFFFF
  class IesEngine : public ::Il2CppObject {
    public:
    public:
    // private readonly Org.BouncyCastle.Crypto.IBasicAgreement agree
    // Size: 0x8
    // Offset: 0x10
    ::Org::BouncyCastle::Crypto::IBasicAgreement* agree;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::IBasicAgreement*) == 0x8);
    // private readonly Org.BouncyCastle.Crypto.IDerivationFunction kdf
    // Size: 0x8
    // Offset: 0x18
    ::Org::BouncyCastle::Crypto::IDerivationFunction* kdf;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::IDerivationFunction*) == 0x8);
    // private readonly Org.BouncyCastle.Crypto.IMac mac
    // Size: 0x8
    // Offset: 0x20
    ::Org::BouncyCastle::Crypto::IMac* mac;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::IMac*) == 0x8);
    // private readonly Org.BouncyCastle.Crypto.BufferedBlockCipher cipher
    // Size: 0x8
    // Offset: 0x28
    ::Org::BouncyCastle::Crypto::BufferedBlockCipher* cipher;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::BufferedBlockCipher*) == 0x8);
    // private readonly System.Byte[] macBuf
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> macBuf;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x38
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forEncryption and: privParam
    char __padding5[0x7] = {};
    // private Org.BouncyCastle.Crypto.ICipherParameters privParam
    // Size: 0x8
    // Offset: 0x40
    ::Org::BouncyCastle::Crypto::ICipherParameters* privParam;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::ICipherParameters*) == 0x8);
    // private Org.BouncyCastle.Crypto.ICipherParameters pubParam
    // Size: 0x8
    // Offset: 0x48
    ::Org::BouncyCastle::Crypto::ICipherParameters* pubParam;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::ICipherParameters*) == 0x8);
    // private Org.BouncyCastle.Crypto.Parameters.IesParameters param
    // Size: 0x8
    // Offset: 0x50
    ::Org::BouncyCastle::Crypto::Parameters::IesParameters* param;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::Parameters::IesParameters*) == 0x8);
    public:
    // Get instance field reference: private readonly Org.BouncyCastle.Crypto.IBasicAgreement agree
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::IBasicAgreement*& dyn_agree();
    // Get instance field reference: private readonly Org.BouncyCastle.Crypto.IDerivationFunction kdf
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::IDerivationFunction*& dyn_kdf();
    // Get instance field reference: private readonly Org.BouncyCastle.Crypto.IMac mac
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::IMac*& dyn_mac();
    // Get instance field reference: private readonly Org.BouncyCastle.Crypto.BufferedBlockCipher cipher
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::BufferedBlockCipher*& dyn_cipher();
    // Get instance field reference: private readonly System.Byte[] macBuf
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_macBuf();
    // Get instance field reference: private System.Boolean forEncryption
    [[deprecated("Use field access instead!")]] bool& dyn_forEncryption();
    // Get instance field reference: private Org.BouncyCastle.Crypto.ICipherParameters privParam
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::ICipherParameters*& dyn_privParam();
    // Get instance field reference: private Org.BouncyCastle.Crypto.ICipherParameters pubParam
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::ICipherParameters*& dyn_pubParam();
    // Get instance field reference: private Org.BouncyCastle.Crypto.Parameters.IesParameters param
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::Parameters::IesParameters*& dyn_param();
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IBasicAgreement agree, Org.BouncyCastle.Crypto.IDerivationFunction kdf, Org.BouncyCastle.Crypto.IMac mac)
    // Offset: 0x23F9ABC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IesEngine* New_ctor(::Org::BouncyCastle::Crypto::IBasicAgreement* agree, ::Org::BouncyCastle::Crypto::IDerivationFunction* kdf, ::Org::BouncyCastle::Crypto::IMac* mac) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Crypto::Engines::IesEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IesEngine*, creationType>(agree, kdf, mac)));
    }
    // private System.Byte[] DecryptBlock(System.Byte[] in_enc, System.Int32 inOff, System.Int32 inLen, System.Byte[] z)
    // Offset: 0x23F9BBC
    ::ArrayW<uint8_t> DecryptBlock(::ArrayW<uint8_t> in_enc, int inOff, int inLen, ::ArrayW<uint8_t> z);
    // private System.Byte[] EncryptBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen, System.Byte[] z)
    // Offset: 0x23FA3D0
    ::ArrayW<uint8_t> EncryptBlock(::ArrayW<uint8_t> input, int inOff, int inLen, ::ArrayW<uint8_t> z);
    // private System.Byte[] GenerateKdfBytes(Org.BouncyCastle.Crypto.Parameters.KdfParameters kParam, System.Int32 length)
    // Offset: 0x23FA264
    ::ArrayW<uint8_t> GenerateKdfBytes(::Org::BouncyCastle::Crypto::Parameters::KdfParameters* kParam, int length);
    // public System.Byte[] ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen)
    // Offset: 0x23FA9D4
    ::ArrayW<uint8_t> ProcessBlock(::ArrayW<uint8_t> input, int inOff, int inLen);
  }; // Org.BouncyCastle.Crypto.Engines.IesEngine
  #pragma pack(pop)
  static check_size<sizeof(IesEngine), 80 + sizeof(::Org::BouncyCastle::Crypto::Parameters::IesParameters*)> __Org_BouncyCastle_Crypto_Engines_IesEngineSizeCheck;
  static_assert(sizeof(IesEngine) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::IesEngine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::IesEngine::DecryptBlock
// Il2CppName: DecryptBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Org::BouncyCastle::Crypto::Engines::IesEngine::*)(::ArrayW<uint8_t>, int, int, ::ArrayW<uint8_t>)>(&Org::BouncyCastle::Crypto::Engines::IesEngine::DecryptBlock)> {
  static const MethodInfo* get() {
    static auto* in_enc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::IesEngine*), "DecryptBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{in_enc, inOff, inLen, z});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::IesEngine::EncryptBlock
// Il2CppName: EncryptBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Org::BouncyCastle::Crypto::Engines::IesEngine::*)(::ArrayW<uint8_t>, int, int, ::ArrayW<uint8_t>)>(&Org::BouncyCastle::Crypto::Engines::IesEngine::EncryptBlock)> {
  static const MethodInfo* get() {
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::IesEngine*), "EncryptBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, inOff, inLen, z});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::IesEngine::GenerateKdfBytes
// Il2CppName: GenerateKdfBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Org::BouncyCastle::Crypto::Engines::IesEngine::*)(::Org::BouncyCastle::Crypto::Parameters::KdfParameters*, int)>(&Org::BouncyCastle::Crypto::Engines::IesEngine::GenerateKdfBytes)> {
  static const MethodInfo* get() {
    static auto* kParam = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Crypto.Parameters", "KdfParameters")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::IesEngine*), "GenerateKdfBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kParam, length});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::IesEngine::ProcessBlock
// Il2CppName: ProcessBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Org::BouncyCastle::Crypto::Engines::IesEngine::*)(::ArrayW<uint8_t>, int, int)>(&Org::BouncyCastle::Crypto::Engines::IesEngine::ProcessBlock)> {
  static const MethodInfo* get() {
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::IesEngine*), "ProcessBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, inOff, inLen});
  }
};
