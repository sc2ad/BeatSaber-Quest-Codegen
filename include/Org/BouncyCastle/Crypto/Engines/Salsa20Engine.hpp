// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Org.BouncyCastle.Crypto.IStreamCipher
#include "Org/BouncyCastle/Crypto/IStreamCipher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Forward declaring type: Salsa20Engine
  class Salsa20Engine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Crypto::Engines::Salsa20Engine);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Crypto::Engines::Salsa20Engine*, "Org.BouncyCastle.Crypto.Engines", "Salsa20Engine");
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
  // [TokenAttribute] Offset: FFFFFFFF
  class Salsa20Engine : public ::Il2CppObject/*, public ::Org::BouncyCastle::Crypto::IStreamCipher*/ {
    public:
    public:
    // protected System.Int32 rounds
    // Size: 0x4
    // Offset: 0x10
    int rounds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x14
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.UInt32[] engineState
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint> engineState;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // System.UInt32[] x
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint> x;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Byte[] keyStream
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> keyStream;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Boolean initialised
    // Size: 0x1
    // Offset: 0x30
    bool initialised;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialised and: cW0
    char __padding5[0x3] = {};
    // private System.UInt32 cW0
    // Size: 0x4
    // Offset: 0x34
    uint cW0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 cW1
    // Size: 0x4
    // Offset: 0x38
    uint cW1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 cW2
    // Size: 0x4
    // Offset: 0x3C
    uint cW2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Org::BouncyCastle::Crypto::IStreamCipher
    operator ::Org::BouncyCastle::Crypto::IStreamCipher() noexcept {
      return *reinterpret_cast<::Org::BouncyCastle::Crypto::IStreamCipher*>(this);
    }
    // Creating interface conversion operator: i_IStreamCipher
    inline ::Org::BouncyCastle::Crypto::IStreamCipher* i_IStreamCipher() noexcept {
      return reinterpret_cast<::Org::BouncyCastle::Crypto::IStreamCipher*>(this);
    }
    // Get static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static int _get_DEFAULT_ROUNDS();
    // Set static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static void _set_DEFAULT_ROUNDS(int value);
    // Get static field: static private readonly System.UInt32[] TAU_SIGMA
    static ::ArrayW<uint> _get_TAU_SIGMA();
    // Set static field: static private readonly System.UInt32[] TAU_SIGMA
    static void _set_TAU_SIGMA(::ArrayW<uint> value);
    // [ObsoleteAttribute] Offset: 0x10BD8C0
    // Get static field: static protected readonly System.Byte[] sigma
    static ::ArrayW<uint8_t> _get_sigma();
    // Set static field: static protected readonly System.Byte[] sigma
    static void _set_sigma(::ArrayW<uint8_t> value);
    // [ObsoleteAttribute] Offset: 0x10BD8D0
    // Get static field: static protected readonly System.Byte[] tau
    static ::ArrayW<uint8_t> _get_tau();
    // Set static field: static protected readonly System.Byte[] tau
    static void _set_tau(::ArrayW<uint8_t> value);
    // Get instance field reference: protected System.Int32 rounds
    [[deprecated("Use field access instead!")]] int& dyn_rounds();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: System.UInt32[] engineState
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_engineState();
    // Get instance field reference: System.UInt32[] x
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_x();
    // Get instance field reference: private System.Byte[] keyStream
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_keyStream();
    // Get instance field reference: private System.Boolean initialised
    [[deprecated("Use field access instead!")]] bool& dyn_initialised();
    // Get instance field reference: private System.UInt32 cW0
    [[deprecated("Use field access instead!")]] uint& dyn_cW0();
    // Get instance field reference: private System.UInt32 cW1
    [[deprecated("Use field access instead!")]] uint& dyn_cW1();
    // Get instance field reference: private System.UInt32 cW2
    [[deprecated("Use field access instead!")]] uint& dyn_cW2();
    // protected System.Int32 get_NonceSize()
    // Offset: 0x241B59C
    int get_NonceSize();
    // public System.String get_AlgorithmName()
    // Offset: 0x241B5A4
    ::StringW get_AlgorithmName();
    // public System.Void .ctor()
    // Offset: 0x241B0E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Salsa20Engine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Crypto::Engines::Salsa20Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Salsa20Engine*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 rounds)
    // Offset: 0x241B150
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Salsa20Engine* New_ctor(int rounds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Crypto::Engines::Salsa20Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Salsa20Engine*, creationType>(rounds)));
    }
    // static private System.Void .cctor()
    // Offset: 0x241C358
    static void _cctor();
    // System.Void PackTauOrSigma(System.Int32 keyLength, System.UInt32[] state, System.Int32 stateOffset)
    // Offset: 0x241AF4C
    void PackTauOrSigma(int keyLength, ::ArrayW<uint> state, int stateOffset);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x241B23C
    void Init(bool forEncryption, ::Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // protected System.Void AdvanceCounter()
    // Offset: 0x241B678
    void AdvanceCounter();
    // public System.Void ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x241B6DC
    void ProcessBytes(::ArrayW<uint8_t> inBytes, int inOff, int len, ::ArrayW<uint8_t> outBytes, int outOff);
    // public System.Void Reset()
    // Offset: 0x241B97C
    void Reset();
    // protected System.Void ResetCounter()
    // Offset: 0x241B9A4
    void ResetCounter();
    // protected System.Void SetKey(System.Byte[] keyBytes, System.Byte[] ivBytes)
    // Offset: 0x241B9DC
    void SetKey(::ArrayW<uint8_t> keyBytes, ::ArrayW<uint8_t> ivBytes);
    // protected System.Void GenerateKeyStream(System.Byte[] output)
    // Offset: 0x241BC44
    void GenerateKeyStream(::ArrayW<uint8_t> output);
    // static System.Void SalsaCore(System.Int32 rounds, System.UInt32[] input, System.UInt32[] x)
    // Offset: 0x241BCE0
    static void SalsaCore(int rounds, ::ArrayW<uint> input, ::ArrayW<uint> x);
    // private System.Void ResetLimitCounter()
    // Offset: 0x241B998
    void ResetLimitCounter();
    // private System.Boolean LimitExceeded(System.UInt32 len)
    // Offset: 0x241B940
    bool LimitExceeded(uint len);
  }; // Org.BouncyCastle.Crypto.Engines.Salsa20Engine
  #pragma pack(pop)
  static check_size<sizeof(Salsa20Engine), 60 + sizeof(uint)> __Org_BouncyCastle_Crypto_Engines_Salsa20EngineSizeCheck;
  static_assert(sizeof(Salsa20Engine) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::get_NonceSize
// Il2CppName: get_NonceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::get_NonceSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "get_NonceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::get_AlgorithmName
// Il2CppName: get_AlgorithmName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::get_AlgorithmName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "get_AlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::PackTauOrSigma
// Il2CppName: PackTauOrSigma
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(int, ::ArrayW<uint>, int)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::PackTauOrSigma)> {
  static const MethodInfo* get() {
    static auto* keyLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* state = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* stateOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "PackTauOrSigma", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyLength, state, stateOffset});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(bool, ::Org::BouncyCastle::Crypto::ICipherParameters*)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::Init)> {
  static const MethodInfo* get() {
    static auto* forEncryption = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Crypto", "ICipherParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forEncryption, parameters});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::AdvanceCounter
// Il2CppName: AdvanceCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::AdvanceCounter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "AdvanceCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ProcessBytes
// Il2CppName: ProcessBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(::ArrayW<uint8_t>, int, int, ::ArrayW<uint8_t>, int)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ProcessBytes)> {
  static const MethodInfo* get() {
    static auto* inBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* outOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "ProcessBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inBytes, inOff, len, outBytes, outOff});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ResetCounter
// Il2CppName: ResetCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ResetCounter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "ResetCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::SetKey
// Il2CppName: SetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::SetKey)> {
  static const MethodInfo* get() {
    static auto* keyBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ivBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "SetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyBytes, ivBytes});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::GenerateKeyStream
// Il2CppName: GenerateKeyStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(::ArrayW<uint8_t>)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::GenerateKeyStream)> {
  static const MethodInfo* get() {
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "GenerateKeyStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::SalsaCore
// Il2CppName: SalsaCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::ArrayW<uint>, ::ArrayW<uint>)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::SalsaCore)> {
  static const MethodInfo* get() {
    static auto* rounds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* x = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "SalsaCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rounds, input, x});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ResetLimitCounter
// Il2CppName: ResetLimitCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)()>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::ResetLimitCounter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "ResetLimitCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Salsa20Engine::LimitExceeded
// Il2CppName: LimitExceeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Org::BouncyCastle::Crypto::Engines::Salsa20Engine::*)(uint)>(&Org::BouncyCastle::Crypto::Engines::Salsa20Engine::LimitExceeded)> {
  static const MethodInfo* get() {
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*), "LimitExceeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{len});
  }
};
