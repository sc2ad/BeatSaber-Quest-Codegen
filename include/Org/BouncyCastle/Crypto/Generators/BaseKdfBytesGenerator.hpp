// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Org.BouncyCastle.Crypto.IDerivationFunction
#include "Org/BouncyCastle/Crypto/IDerivationFunction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IDigest
  class IDigest;
  // Forward declaring type: IDerivationParameters
  class IDerivationParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Generators
namespace Org::BouncyCastle::Crypto::Generators {
  // Forward declaring type: BaseKdfBytesGenerator
  class BaseKdfBytesGenerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator*, "Org.BouncyCastle.Crypto.Generators", "BaseKdfBytesGenerator");
// Type namespace: Org.BouncyCastle.Crypto.Generators
namespace Org::BouncyCastle::Crypto::Generators {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseKdfBytesGenerator : public ::Il2CppObject/*, public ::Org::BouncyCastle::Crypto::IDerivationFunction*/ {
    public:
    public:
    // private System.Int32 counterStart
    // Size: 0x4
    // Offset: 0x10
    int counterStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: counterStart and: digest
    char __padding0[0x4] = {};
    // private Org.BouncyCastle.Crypto.IDigest digest
    // Size: 0x8
    // Offset: 0x18
    ::Org::BouncyCastle::Crypto::IDigest* digest;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Crypto::IDigest*) == 0x8);
    // private System.Byte[] shared
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> shared;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Byte[] iv
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> iv;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Org::BouncyCastle::Crypto::IDerivationFunction
    operator ::Org::BouncyCastle::Crypto::IDerivationFunction() noexcept {
      return *reinterpret_cast<::Org::BouncyCastle::Crypto::IDerivationFunction*>(this);
    }
    // Creating interface conversion operator: i_IDerivationFunction
    inline ::Org::BouncyCastle::Crypto::IDerivationFunction* i_IDerivationFunction() noexcept {
      return reinterpret_cast<::Org::BouncyCastle::Crypto::IDerivationFunction*>(this);
    }
    // Get instance field reference: private System.Int32 counterStart
    [[deprecated("Use field access instead!")]] int& dyn_counterStart();
    // Get instance field reference: private Org.BouncyCastle.Crypto.IDigest digest
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Crypto::IDigest*& dyn_digest();
    // Get instance field reference: private System.Byte[] shared
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_shared();
    // Get instance field reference: private System.Byte[] iv
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_iv();
    // public System.Void .ctor(System.Int32 counterStart, Org.BouncyCastle.Crypto.IDigest digest)
    // Offset: 0x1E32468
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseKdfBytesGenerator* New_ctor(int counterStart, ::Org::BouncyCastle::Crypto::IDigest* digest) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseKdfBytesGenerator*, creationType>(counterStart, digest)));
    }
    // public System.Void Init(Org.BouncyCastle.Crypto.IDerivationParameters parameters)
    // Offset: 0x1E324A4
    void Init(::Org::BouncyCastle::Crypto::IDerivationParameters* parameters);
    // public System.Int32 GenerateBytes(System.Byte[] output, System.Int32 outOff, System.Int32 length)
    // Offset: 0x1E325AC
    int GenerateBytes(::ArrayW<uint8_t> output, int outOff, int length);
  }; // Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator
  #pragma pack(pop)
  static check_size<sizeof(BaseKdfBytesGenerator), 40 + sizeof(::ArrayW<uint8_t>)> __Org_BouncyCastle_Crypto_Generators_BaseKdfBytesGeneratorSizeCheck;
  static_assert(sizeof(BaseKdfBytesGenerator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::*)(::Org::BouncyCastle::Crypto::IDerivationParameters*)>(&Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::Init)> {
  static const MethodInfo* get() {
    static auto* parameters = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Crypto", "IDerivationParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameters});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::GenerateBytes
// Il2CppName: GenerateBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::*)(::ArrayW<uint8_t>, int, int)>(&Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::GenerateBytes)> {
  static const MethodInfo* get() {
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* outOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator*), "GenerateBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, outOff, length});
  }
};
