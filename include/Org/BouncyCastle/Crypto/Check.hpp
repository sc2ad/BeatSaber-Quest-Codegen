// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: Check
  class Check;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Crypto::Check);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Crypto::Check*, "Org.BouncyCastle.Crypto", "Check");
// Type namespace: Org.BouncyCastle.Crypto
namespace Org::BouncyCastle::Crypto {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Check
  // [TokenAttribute] Offset: FFFFFFFF
  class Check : public ::Il2CppObject {
    public:
    // static System.Void DataLength(System.Boolean condition, System.String msg)
    // Offset: 0x23228C0
    static void DataLength(bool condition, ::StringW msg);
    // static System.Void DataLength(System.Byte[] buf, System.Int32 off, System.Int32 len, System.String msg)
    // Offset: 0x2322940
    static void DataLength(::ArrayW<uint8_t> buf, int off, int len, ::StringW msg);
    // static System.Void OutputLength(System.Byte[] buf, System.Int32 off, System.Int32 len, System.String msg)
    // Offset: 0x23229E4
    static void OutputLength(::ArrayW<uint8_t> buf, int off, int len, ::StringW msg);
  }; // Org.BouncyCastle.Crypto.Check
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Check::DataLength
// Il2CppName: DataLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW)>(&Org::BouncyCastle::Crypto::Check::DataLength)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Check*), "DataLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, msg});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Check::DataLength
// Il2CppName: DataLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, int, ::StringW)>(&Org::BouncyCastle::Crypto::Check::DataLength)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* off = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Check*), "DataLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, off, len, msg});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Check::OutputLength
// Il2CppName: OutputLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, int, ::StringW)>(&Org::BouncyCastle::Crypto::Check::OutputLength)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* off = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Crypto::Check*), "OutputLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, off, len, msg});
  }
};
