// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Encodable
#include "Org/BouncyCastle/Asn1/Asn1Encodable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1::X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Forward declaring type: IssuerSerial
  class IssuerSerial;
  // Forward declaring type: GeneralNames
  class GeneralNames;
  // Forward declaring type: ObjectDigestInfo
  class ObjectDigestInfo;
}
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Forward declaring type: Asn1TaggedObject
  class Asn1TaggedObject;
  // Forward declaring type: Asn1Sequence
  class Asn1Sequence;
  // Forward declaring type: Asn1Object
  class Asn1Object;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Forward declaring type: Holder
  class Holder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Asn1::X509::Holder);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Asn1::X509::Holder*, "Org.BouncyCastle.Asn1.X509", "Holder");
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.X509.Holder
  // [TokenAttribute] Offset: FFFFFFFF
  class Holder : public ::Org::BouncyCastle::Asn1::Asn1Encodable {
    public:
    public:
    // readonly Org.BouncyCastle.Asn1.X509.IssuerSerial baseCertificateID
    // Size: 0x8
    // Offset: 0x10
    ::Org::BouncyCastle::Asn1::X509::IssuerSerial* baseCertificateID;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Asn1::X509::IssuerSerial*) == 0x8);
    // readonly Org.BouncyCastle.Asn1.X509.GeneralNames entityName
    // Size: 0x8
    // Offset: 0x18
    ::Org::BouncyCastle::Asn1::X509::GeneralNames* entityName;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Asn1::X509::GeneralNames*) == 0x8);
    // readonly Org.BouncyCastle.Asn1.X509.ObjectDigestInfo objectDigestInfo
    // Size: 0x8
    // Offset: 0x20
    ::Org::BouncyCastle::Asn1::X509::ObjectDigestInfo* objectDigestInfo;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Asn1::X509::ObjectDigestInfo*) == 0x8);
    // private readonly System.Int32 version
    // Size: 0x4
    // Offset: 0x28
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: readonly Org.BouncyCastle.Asn1.X509.IssuerSerial baseCertificateID
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Asn1::X509::IssuerSerial*& dyn_baseCertificateID();
    // Get instance field reference: readonly Org.BouncyCastle.Asn1.X509.GeneralNames entityName
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Asn1::X509::GeneralNames*& dyn_entityName();
    // Get instance field reference: readonly Org.BouncyCastle.Asn1.X509.ObjectDigestInfo objectDigestInfo
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Asn1::X509::ObjectDigestInfo*& dyn_objectDigestInfo();
    // Get instance field reference: private readonly System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // public System.Void .ctor(Org.BouncyCastle.Asn1.Asn1TaggedObject tagObj)
    // Offset: 0x1FB977C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Holder* New_ctor(::Org::BouncyCastle::Asn1::Asn1TaggedObject* tagObj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Asn1::X509::Holder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Holder*, creationType>(tagObj)));
    }
    // private System.Void .ctor(Org.BouncyCastle.Asn1.Asn1Sequence seq)
    // Offset: 0x1FB9584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Holder* New_ctor(::Org::BouncyCastle::Asn1::Asn1Sequence* seq) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Asn1::X509::Holder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Holder*, creationType>(seq)));
    }
    // static public Org.BouncyCastle.Asn1.X509.Holder GetInstance(System.Object obj)
    // Offset: 0x1FB5AB8
    static ::Org::BouncyCastle::Asn1::X509::Holder* GetInstance(::Il2CppObject* obj);
    // public override Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object()
    // Offset: 0x1FB98B8
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Encodable
    // Base method: Org.BouncyCastle.Asn1.Asn1Object Asn1Encodable::ToAsn1Object()
    ::Org::BouncyCastle::Asn1::Asn1Object* ToAsn1Object();
  }; // Org.BouncyCastle.Asn1.X509.Holder
  #pragma pack(pop)
  static check_size<sizeof(Holder), 40 + sizeof(int)> __Org_BouncyCastle_Asn1_X509_HolderSizeCheck;
  static_assert(sizeof(Holder) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::Holder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::Holder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::Holder::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::X509::Holder* (*)(::Il2CppObject*)>(&Org::BouncyCastle::Asn1::X509::Holder::GetInstance)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::Holder*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::Holder::ToAsn1Object
// Il2CppName: ToAsn1Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::Asn1Object* (Org::BouncyCastle::Asn1::X509::Holder::*)()>(&Org::BouncyCastle::Asn1::X509::Holder::ToAsn1Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::Holder*), "ToAsn1Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
