// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Org.BouncyCastle.Asn1.Asn1Encodable
#include "Org/BouncyCastle/Asn1/Asn1Encodable.hpp"
// Including type: Org.BouncyCastle.Asn1.IAsn1Choice
#include "Org/BouncyCastle/Asn1/IAsn1Choice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Forward declaring type: Asn1Object
  class Asn1Object;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Forward declaring type: GeneralName
  class GeneralName;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Asn1::X509::GeneralName);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Asn1::X509::GeneralName*, "Org.BouncyCastle.Asn1.X509", "GeneralName");
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.X509.GeneralName
  // [TokenAttribute] Offset: FFFFFFFF
  class GeneralName : public ::Org::BouncyCastle::Asn1::Asn1Encodable/*, public ::Org::BouncyCastle::Asn1::IAsn1Choice*/ {
    public:
    public:
    // readonly Org.BouncyCastle.Asn1.Asn1Encodable obj
    // Size: 0x8
    // Offset: 0x10
    ::Org::BouncyCastle::Asn1::Asn1Encodable* obj;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Asn1::Asn1Encodable*) == 0x8);
    // readonly System.Int32 tag
    // Size: 0x4
    // Offset: 0x18
    int tag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Org::BouncyCastle::Asn1::IAsn1Choice
    operator ::Org::BouncyCastle::Asn1::IAsn1Choice() noexcept {
      return *reinterpret_cast<::Org::BouncyCastle::Asn1::IAsn1Choice*>(this);
    }
    // Creating interface conversion operator: i_IAsn1Choice
    inline ::Org::BouncyCastle::Asn1::IAsn1Choice* i_IAsn1Choice() noexcept {
      return reinterpret_cast<::Org::BouncyCastle::Asn1::IAsn1Choice*>(this);
    }
    // Get instance field reference: readonly Org.BouncyCastle.Asn1.Asn1Encodable obj
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Asn1::Asn1Encodable*& dyn_obj();
    // Get instance field reference: readonly System.Int32 tag
    [[deprecated("Use field access instead!")]] int& dyn_tag();
    // public System.Int32 get_TagNo()
    // Offset: 0x1F18A70
    int get_TagNo();
    // public Org.BouncyCastle.Asn1.Asn1Encodable get_Name()
    // Offset: 0x1F18A78
    ::Org::BouncyCastle::Asn1::Asn1Encodable* get_Name();
    // public System.Void .ctor(System.Int32 tag, Org.BouncyCastle.Asn1.Asn1Encodable name)
    // Offset: 0x1F185C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GeneralName* New_ctor(int tag, ::Org::BouncyCastle::Asn1::Asn1Encodable* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Asn1::X509::GeneralName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GeneralName*, creationType>(tag, name)));
    }
    // static public Org.BouncyCastle.Asn1.X509.GeneralName GetInstance(System.Object obj)
    // Offset: 0x1F18600
    static ::Org::BouncyCastle::Asn1::X509::GeneralName* GetInstance(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0x1F18A80
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object()
    // Offset: 0x1F18C48
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Encodable
    // Base method: Org.BouncyCastle.Asn1.Asn1Object Asn1Encodable::ToAsn1Object()
    ::Org::BouncyCastle::Asn1::Asn1Object* ToAsn1Object();
  }; // Org.BouncyCastle.Asn1.X509.GeneralName
  #pragma pack(pop)
  static check_size<sizeof(GeneralName), 24 + sizeof(int)> __Org_BouncyCastle_Asn1_X509_GeneralNameSizeCheck;
  static_assert(sizeof(GeneralName) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::get_TagNo
// Il2CppName: get_TagNo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Asn1::X509::GeneralName::*)()>(&Org::BouncyCastle::Asn1::X509::GeneralName::get_TagNo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::GeneralName*), "get_TagNo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::Asn1Encodable* (Org::BouncyCastle::Asn1::X509::GeneralName::*)()>(&Org::BouncyCastle::Asn1::X509::GeneralName::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::GeneralName*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::X509::GeneralName* (*)(::Il2CppObject*)>(&Org::BouncyCastle::Asn1::X509::GeneralName::GetInstance)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::GeneralName*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Org::BouncyCastle::Asn1::X509::GeneralName::*)()>(&Org::BouncyCastle::Asn1::X509::GeneralName::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::GeneralName*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X509::GeneralName::ToAsn1Object
// Il2CppName: ToAsn1Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::Asn1Object* (Org::BouncyCastle::Asn1::X509::GeneralName::*)()>(&Org::BouncyCastle::Asn1::X509::GeneralName::ToAsn1Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X509::GeneralName*), "ToAsn1Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
