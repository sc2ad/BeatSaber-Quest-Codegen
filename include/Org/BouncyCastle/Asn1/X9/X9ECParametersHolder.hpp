// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1::X9
namespace Org::BouncyCastle::Asn1::X9 {
  // Forward declaring type: X9ECParameters
  class X9ECParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1.X9
namespace Org::BouncyCastle::Asn1::X9 {
  // Forward declaring type: X9ECParametersHolder
  class X9ECParametersHolder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Org::BouncyCastle::Asn1::X9::X9ECParametersHolder);
DEFINE_IL2CPP_ARG_TYPE(::Org::BouncyCastle::Asn1::X9::X9ECParametersHolder*, "Org.BouncyCastle.Asn1.X9", "X9ECParametersHolder");
// Type namespace: Org.BouncyCastle.Asn1.X9
namespace Org::BouncyCastle::Asn1::X9 {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
  // [TokenAttribute] Offset: FFFFFFFF
  class X9ECParametersHolder : public ::Il2CppObject {
    public:
    public:
    // private Org.BouncyCastle.Asn1.X9.X9ECParameters parameters
    // Size: 0x8
    // Offset: 0x10
    ::Org::BouncyCastle::Asn1::X9::X9ECParameters* parameters;
    // Field size check
    static_assert(sizeof(::Org::BouncyCastle::Asn1::X9::X9ECParameters*) == 0x8);
    public:
    // Creating conversion operator: operator ::Org::BouncyCastle::Asn1::X9::X9ECParameters*
    constexpr operator ::Org::BouncyCastle::Asn1::X9::X9ECParameters*() const noexcept {
      return parameters;
    }
    // Get instance field reference: private Org.BouncyCastle.Asn1.X9.X9ECParameters parameters
    [[deprecated("Use field access instead!")]] ::Org::BouncyCastle::Asn1::X9::X9ECParameters*& dyn_parameters();
    // public Org.BouncyCastle.Asn1.X9.X9ECParameters get_Parameters()
    // Offset: 0x1F22E88
    ::Org::BouncyCastle::Asn1::X9::X9ECParameters* get_Parameters();
    // protected System.Void .ctor()
    // Offset: 0x1F22F24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X9ECParametersHolder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X9ECParametersHolder*, creationType>()));
    }
    // protected Org.BouncyCastle.Asn1.X9.X9ECParameters CreateParameters()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Org::BouncyCastle::Asn1::X9::X9ECParameters* CreateParameters();
  }; // Org.BouncyCastle.Asn1.X9.X9ECParametersHolder
  #pragma pack(pop)
  static check_size<sizeof(X9ECParametersHolder), 16 + sizeof(::Org::BouncyCastle::Asn1::X9::X9ECParameters*)> __Org_BouncyCastle_Asn1_X9_X9ECParametersHolderSizeCheck;
  static_assert(sizeof(X9ECParametersHolder) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::get_Parameters
// Il2CppName: get_Parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::X9::X9ECParameters* (Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::*)()>(&Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::get_Parameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X9::X9ECParametersHolder*), "get_Parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::CreateParameters
// Il2CppName: CreateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Org::BouncyCastle::Asn1::X9::X9ECParameters* (Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::*)()>(&Org::BouncyCastle::Asn1::X9::X9ECParametersHolder::CreateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Asn1::X9::X9ECParametersHolder*), "CreateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
