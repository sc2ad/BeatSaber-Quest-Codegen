// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ServiceEnvironment
#include "GlobalNamespace/ServiceEnvironment.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: AuthenticationToken/Platform
#include "GlobalNamespace/AuthenticationToken.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: BGNet.Core.GameLift
namespace BGNet::Core::GameLift {
  // Forward declaring type: GetMultiplayerInstanceRequest
  struct GetMultiplayerInstanceRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::GameLift::GetMultiplayerInstanceRequest, "BGNet.Core.GameLift", "GetMultiplayerInstanceRequest");
// Type namespace: BGNet.Core.GameLift
namespace BGNet::Core::GameLift {
  // Size: 0x88
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BGNet.Core.GameLift.GetMultiplayerInstanceRequest
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  struct GetMultiplayerInstanceRequest/*, public ::System::ValueType*/ {
    public:
    public:
    // [JsonPropertyAttribute] Offset: 0x11019C4
    // public readonly System.String version
    // Size: 0x8
    // Offset: 0x0
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x11019FC
    // public readonly ServiceEnvironment serviceEnvironment
    // Size: 0x4
    // Offset: 0x8
    ::GlobalNamespace::ServiceEnvironment serviceEnvironment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ServiceEnvironment) == 0x4);
    // Padding between fields: serviceEnvironment and: singleUseAuthToken
    char __padding1[0x4] = {};
    // [JsonPropertyAttribute] Offset: 0x1101A34
    // public readonly System.String singleUseAuthToken
    // Size: 0x8
    // Offset: 0x10
    ::StringW singleUseAuthToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101A6C
    // public readonly BeatmapLevelSelectionMask beatmapLevelSelectionMask
    // Size: 0x18
    // Offset: 0x18
    ::GlobalNamespace::BeatmapLevelSelectionMask beatmapLevelSelectionMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // [JsonPropertyAttribute] Offset: 0x1101AA4
    // public readonly GameplayServerConfiguration gameplayServerConfiguration
    // Size: 0x18
    // Offset: 0x30
    ::GlobalNamespace::GameplayServerConfiguration gameplayServerConfiguration;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // [JsonPropertyAttribute] Offset: 0x1101ADC
    // public readonly System.String userId
    // Size: 0x8
    // Offset: 0x48
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101B14
    // public readonly System.String privateGameSecret
    // Size: 0x8
    // Offset: 0x50
    ::StringW privateGameSecret;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101B4C
    // public readonly System.String privateGameCode
    // Size: 0x8
    // Offset: 0x58
    ::StringW privateGameCode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101B84
    // public readonly AuthenticationToken/Platform platform
    // Size: 0x1
    // Offset: 0x60
    ::GlobalNamespace::AuthenticationToken::Platform platform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AuthenticationToken::Platform) == 0x1);
    // Padding between fields: platform and: authUserId
    char __padding8[0x7] = {};
    // [JsonPropertyAttribute] Offset: 0x1101BBC
    // public readonly System.String authUserId
    // Size: 0x8
    // Offset: 0x68
    ::StringW authUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101BF4
    // public readonly System.Collections.Generic.Dictionary`2<System.String,System.Int64> gameliftRegionLatencies
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::StringW, int64_t>* gameliftRegionLatencies;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int64_t>*) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101C2C
    // public readonly System.String ticketId
    // Size: 0x8
    // Offset: 0x78
    ::StringW ticketId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [JsonPropertyAttribute] Offset: 0x1101C64
    // public readonly System.String placementId
    // Size: 0x8
    // Offset: 0x80
    ::StringW placementId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: GetMultiplayerInstanceRequest
    constexpr GetMultiplayerInstanceRequest(::StringW version_ = {}, ::GlobalNamespace::ServiceEnvironment serviceEnvironment_ = {}, ::StringW singleUseAuthToken_ = {}, ::GlobalNamespace::BeatmapLevelSelectionMask beatmapLevelSelectionMask_ = {}, ::GlobalNamespace::GameplayServerConfiguration gameplayServerConfiguration_ = {}, ::StringW userId_ = {}, ::StringW privateGameSecret_ = {}, ::StringW privateGameCode_ = {}, ::GlobalNamespace::AuthenticationToken::Platform platform_ = {}, ::StringW authUserId_ = {}, ::System::Collections::Generic::Dictionary_2<::StringW, int64_t>* gameliftRegionLatencies_ = {}, ::StringW ticketId_ = {}, ::StringW placementId_ = {}) noexcept : version{version_}, serviceEnvironment{serviceEnvironment_}, singleUseAuthToken{singleUseAuthToken_}, beatmapLevelSelectionMask{beatmapLevelSelectionMask_}, gameplayServerConfiguration{gameplayServerConfiguration_}, userId{userId_}, privateGameSecret{privateGameSecret_}, privateGameCode{privateGameCode_}, platform{platform_}, authUserId{authUserId_}, gameliftRegionLatencies{gameliftRegionLatencies_}, ticketId{ticketId_}, placementId{placementId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.String version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_version();
    // Get instance field reference: public readonly ServiceEnvironment serviceEnvironment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ServiceEnvironment& dyn_serviceEnvironment();
    // Get instance field reference: public readonly System.String singleUseAuthToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_singleUseAuthToken();
    // Get instance field reference: public readonly BeatmapLevelSelectionMask beatmapLevelSelectionMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn_beatmapLevelSelectionMask();
    // Get instance field reference: public readonly GameplayServerConfiguration gameplayServerConfiguration
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn_gameplayServerConfiguration();
    // Get instance field reference: public readonly System.String userId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userId();
    // Get instance field reference: public readonly System.String privateGameSecret
    [[deprecated("Use field access instead!")]] ::StringW& dyn_privateGameSecret();
    // Get instance field reference: public readonly System.String privateGameCode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_privateGameCode();
    // Get instance field reference: public readonly AuthenticationToken/Platform platform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AuthenticationToken::Platform& dyn_platform();
    // Get instance field reference: public readonly System.String authUserId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_authUserId();
    // Get instance field reference: public readonly System.Collections.Generic.Dictionary`2<System.String,System.Int64> gameliftRegionLatencies
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int64_t>*& dyn_gameliftRegionLatencies();
    // Get instance field reference: public readonly System.String ticketId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ticketId();
    // Get instance field reference: public readonly System.String placementId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_placementId();
    // public System.Void .ctor(System.String version, ServiceEnvironment serviceEnvironment, System.String userId, BeatmapLevelSelectionMask beatmapLevelSelectionMask, GameplayServerConfiguration gameplayServerConfiguration, AuthenticationToken/Platform platform, System.String authUserId, System.String singleUseAuthToken, System.String privateGameSecret, System.String privateGameCode, System.Collections.Generic.Dictionary`2<System.String,System.Int64> gameliftRegionLatencies, System.String ticketId, System.String placementId)
    // Offset: 0x16021D4
    GetMultiplayerInstanceRequest(::StringW version, ::GlobalNamespace::ServiceEnvironment serviceEnvironment, ::StringW userId, ::GlobalNamespace::BeatmapLevelSelectionMask beatmapLevelSelectionMask, ::GlobalNamespace::GameplayServerConfiguration gameplayServerConfiguration, ::GlobalNamespace::AuthenticationToken::Platform platform, ::StringW authUserId, ::StringW singleUseAuthToken, ::StringW privateGameSecret, ::StringW privateGameCode, ::System::Collections::Generic::Dictionary_2<::StringW, int64_t>* gameliftRegionLatencies, ::StringW ticketId, ::StringW placementId);
  }; // BGNet.Core.GameLift.GetMultiplayerInstanceRequest
  #pragma pack(pop)
  static check_size<sizeof(GetMultiplayerInstanceRequest), 128 + sizeof(::StringW)> __BGNet_Core_GameLift_GetMultiplayerInstanceRequestSizeCheck;
  static_assert(sizeof(GetMultiplayerInstanceRequest) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Core::GameLift::GetMultiplayerInstanceRequest::GetMultiplayerInstanceRequest
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
