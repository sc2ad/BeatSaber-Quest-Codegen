// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: IUnconnectedMessageReceiver
#include "GlobalNamespace/IUnconnectedMessageReceiver.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BGNet::Core::Messages
namespace BGNet::Core::Messages {
  // Forward declaring type: BaseMultipartMessage
  class BaseMultipartMessage;
  // Forward declaring type: BaseAcknowledgeMessage
  class BaseAcknowledgeMessage;
  // Forward declaring type: IUnconnectedMessage
  class IUnconnectedMessage;
  // Skipping declaration: MessageOrigin because it is already included!
  // Forward declaring type: IUnconnectedAcknowledgeMessage
  class IUnconnectedAcknowledgeMessage;
  // Forward declaring type: IUnconnectedReliableResponse
  class IUnconnectedReliableResponse;
  // Forward declaring type: IUnconnectedMultipartMessage
  class IUnconnectedMultipartMessage;
  // Forward declaring type: IUnconnectedReliableRequest
  class IUnconnectedReliableRequest;
  // Forward declaring type: IUnconnectedUnreliableMessage
  class IUnconnectedUnreliableMessage;
  // Forward declaring type: IUnconnectedResponse
  class IUnconnectedResponse;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Func`5<T1, T2, T3, T4, TResult>
  template<typename T1, typename T2, typename T3, typename T4, typename TResult>
  class Func_5;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: INetworkPacketSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSerializer_1;
  // Forward declaring type: IUnconnectedMessageSender
  class IUnconnectedMessageSender;
  // Forward declaring type: ExpiringDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ExpiringDictionary_2;
  // Forward declaring type: SmallBufferPool
  class SmallBufferPool;
  // Forward declaring type: PacketEncryptionLayer
  class PacketEncryptionLayer;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: IAnalyticsManager
  class IAnalyticsManager;
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
  // Forward declaring type: ITaskUtility
  class ITaskUtility;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: BGNet.Core.Messages
namespace BGNet::Core::Messages {
  // Forward declaring type: UnconnectedMessageHandler
  class UnconnectedMessageHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BGNet::Core::Messages::UnconnectedMessageHandler);
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::Messages::UnconnectedMessageHandler*, "BGNet.Core.Messages", "UnconnectedMessageHandler");
// Type namespace: BGNet.Core.Messages
namespace BGNet::Core::Messages {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Core.Messages.UnconnectedMessageHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class UnconnectedMessageHandler : public ::Il2CppObject/*, public ::System::IDisposable, public ::GlobalNamespace::IUnconnectedMessageReceiver*/ {
    public:
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState
    class ConnectionState;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId
    struct RequestWaiterId;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiter
    class RequestWaiter;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::SentRequestWaiter
    class SentRequestWaiter;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestResponseWaiter
    class RequestResponseWaiter;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::MultipartMessageWaiter
    class MultipartMessageWaiter;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin
    struct MessageOrigin;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$$c__DisplayClass46_0_1<T>
    template<typename T>
    class $$c__DisplayClass46_0_1;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$$c__DisplayClass52_0_1<T>
    template<typename T>
    class $$c__DisplayClass52_0_1;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$$c__DisplayClass53_0_1<T>
    template<typename T>
    class $$c__DisplayClass53_0_1;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$GetAndSendResponse$d__57_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponse$d__57_2;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$GetAndSendResponseAsync$d__58_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponseAsync$d__58_2;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$GetAndSendUnreilableResponse$d__59_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendUnreilableResponse$d__59_2;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$SendMessageWithRetry$d__72
    struct $SendMessageWithRetry$d__72;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$$c__DisplayClass74_0
    class $$c__DisplayClass74_0;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$SendMultipartMessageWithRetryAsync$d__74
    struct $SendMultipartMessageWithRetryAsync$d__74;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$SendMessageWithRetryAsyncInternal$d__75
    struct $SendMessageWithRetryAsyncInternal$d__75;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$SendMessageWithRetryAwaitResponseAsync$d__76_1<T>
    template<typename T>
    struct $SendMessageWithRetryAwaitResponseAsync$d__76_1;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$$c__DisplayClass77_0_1<T>
    template<typename T>
    class $$c__DisplayClass77_0_1;
    // Nested type: ::BGNet::Core::Messages::UnconnectedMessageHandler::$AwaitResponseAsync$d__78_1<T>
    template<typename T>
    struct $AwaitResponseAsync$d__78_1;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId
    // [TokenAttribute] Offset: FFFFFFFF
    struct RequestWaiterId/*, public ::System::ValueType, public ::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>*/ {
      public:
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::IPEndPoint* endPoint;
      // Field size check
      static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
      // public readonly System.UInt32 requestId
      // Size: 0x4
      // Offset: 0x8
      uint requestId;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: RequestWaiterId
      constexpr RequestWaiterId(::System::Net::IPEndPoint* endPoint_ = {}, uint requestId_ = {}) noexcept : endPoint{endPoint_}, requestId{requestId_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>
      operator ::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>*>(this);
      }
      // Creating interface conversion operator: i_RequestWaiterId
      inline ::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>* i_RequestWaiterId() noexcept {
        return reinterpret_cast<::System::IEquatable_1<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId>*>(this);
      }
      // Get instance field reference: public readonly System.Net.IPEndPoint endPoint
      [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn_endPoint();
      // Get instance field reference: public readonly System.UInt32 requestId
      [[deprecated("Use field access instead!")]] uint& dyn_requestId();
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
      // Offset: 0x160DB18
      // ABORTED: conflicts with another method.  RequestWaiterId(::System::Net::IPEndPoint* endPoint, uint requestId);
      // public System.Boolean Equals(BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId other)
      // Offset: 0x1611310
      bool Equals(::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId other);
      // public override System.Boolean Equals(System.Object other)
      // Offset: 0x1611354
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object other)
      bool Equals(::Il2CppObject* other);
      // public override System.Int32 GetHashCode()
      // Offset: 0x16113EC
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
    }; // BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId
    #pragma pack(pop)
    static check_size<sizeof(UnconnectedMessageHandler::RequestWaiterId), 8 + sizeof(uint)> __BGNet_Core_Messages_UnconnectedMessageHandler_RequestWaiterIdSizeCheck;
    static_assert(sizeof(UnconnectedMessageHandler::RequestWaiterId) == 0xC);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct MessageOrigin/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::IPEndPoint* endPoint;
      // Field size check
      static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
      // public readonly System.UInt32 protocolVersion
      // Size: 0x4
      // Offset: 0x8
      uint protocolVersion;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: MessageOrigin
      constexpr MessageOrigin(::System::Net::IPEndPoint* endPoint_ = {}, uint protocolVersion_ = {}) noexcept : endPoint{endPoint_}, protocolVersion{protocolVersion_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.Net.IPEndPoint endPoint
      [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn_endPoint();
      // Get instance field reference: public readonly System.UInt32 protocolVersion
      [[deprecated("Use field access instead!")]] uint& dyn_protocolVersion();
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 protocolVersion)
      // Offset: 0x160ED44
      // ABORTED: conflicts with another method.  MessageOrigin(::System::Net::IPEndPoint* endPoint, uint protocolVersion);
    }; // BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin
    #pragma pack(pop)
    static check_size<sizeof(UnconnectedMessageHandler::MessageOrigin), 8 + sizeof(uint)> __BGNet_Core_Messages_UnconnectedMessageHandler_MessageOriginSizeCheck;
    static_assert(sizeof(UnconnectedMessageHandler::MessageOrigin) == 0xC);
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,INetworkPacketSerializer`1<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin>> _serializers
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<uint, ::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>*>* serializers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Func`1<BGNet.Core.Messages.BaseMultipartMessage>> _multipartMessageRegistry
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseMultipartMessage*>*>* multipartMessageRegistry;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseMultipartMessage*>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Func`1<BGNet.Core.Messages.BaseAcknowledgeMessage>> _acknowledgeMessageRegistery
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseAcknowledgeMessage*>*>* acknowledgeMessageRegistery;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseAcknowledgeMessage*>*>*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _dataWriter
    // Size: 0x8
    // Offset: 0x28
    ::LiteNetLib::Utils::NetDataWriter* dataWriter;
    // Field size check
    static_assert(sizeof(::LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataReader _multipartReader
    // Size: 0x8
    // Offset: 0x30
    ::LiteNetLib::Utils::NetDataReader* multipartReader;
    // Field size check
    static_assert(sizeof(::LiteNetLib::Utils::NetDataReader*) == 0x8);
    // private readonly IUnconnectedMessageSender _sender
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::IUnconnectedMessageSender* sender;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IUnconnectedMessageSender*) == 0x8);
    // protected readonly BGNet.Core.IAnalyticsManager analytics
    // Size: 0x8
    // Offset: 0x40
    ::BGNet::Core::IAnalyticsManager* analytics;
    // Field size check
    static_assert(sizeof(::BGNet::Core::IAnalyticsManager*) == 0x8);
    // private readonly BGNet.Core.ITimeProvider _timeProvider
    // Size: 0x8
    // Offset: 0x48
    ::BGNet::Core::ITimeProvider* timeProvider;
    // Field size check
    static_assert(sizeof(::BGNet::Core::ITimeProvider*) == 0x8);
    // protected readonly BGNet.Core.ITaskUtility _taskUtility
    // Size: 0x8
    // Offset: 0x50
    ::BGNet::Core::ITaskUtility* taskUtility;
    // Field size check
    static_assert(sizeof(::BGNet::Core::ITaskUtility*) == 0x8);
    // private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.SentRequestWaiter> _sentRequestWaiters
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::SentRequestWaiter*>* sentRequestWaiters;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::SentRequestWaiter*>*) == 0x8);
    // private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestResponseWaiter> _requestResponseWaiters
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestResponseWaiter*>* requestResponseWaiters;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestResponseWaiter*>*) == 0x8);
    // private readonly ExpiringDictionary`2<System.Net.IPEndPoint,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.ConnectionState> _connectionStates
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::ExpiringDictionary_2<::System::Net::IPEndPoint*, ::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState*>* connectionStates;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ExpiringDictionary_2<::System::Net::IPEndPoint*, ::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState*>*) == 0x8);
    // private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MultipartMessageWaiter> _multipartMessageBuffer
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::MultipartMessageWaiter*>* multipartMessageBuffer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::MultipartMessageWaiter*>*) == 0x8);
    // private readonly SmallBufferPool _bufferPool
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::SmallBufferPool* bufferPool;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SmallBufferPool*) == 0x8);
    // private readonly System.Threading.CancellationTokenSource _disposedTokenSource
    // Size: 0x8
    // Offset: 0x80
    ::System::Threading::CancellationTokenSource* disposedTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IUnconnectedMessageReceiver
    operator ::GlobalNamespace::IUnconnectedMessageReceiver() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IUnconnectedMessageReceiver*>(this);
    }
    // Creating interface conversion operator: i_IUnconnectedMessageReceiver
    inline ::GlobalNamespace::IUnconnectedMessageReceiver* i_IUnconnectedMessageReceiver() noexcept {
      return reinterpret_cast<::GlobalNamespace::IUnconnectedMessageReceiver*>(this);
    }
    // static field const value: static protected System.UInt32 kProtocolVersion
    static constexpr const uint kProtocolVersion = 8u;
    // Get static field: static protected System.UInt32 kProtocolVersion
    static uint _get_kProtocolVersion();
    // Set static field: static protected System.UInt32 kProtocolVersion
    static void _set_kProtocolVersion(uint value);
    // static field const value: static public System.Int32 kMinSignatureLength
    static constexpr const int kMinSignatureLength = 128;
    // Get static field: static public System.Int32 kMinSignatureLength
    static int _get_kMinSignatureLength();
    // Set static field: static public System.Int32 kMinSignatureLength
    static void _set_kMinSignatureLength(int value);
    // static field const value: static public System.Int32 kMaxSignatureLength
    static constexpr const int kMaxSignatureLength = 512;
    // Get static field: static public System.Int32 kMaxSignatureLength
    static int _get_kMaxSignatureLength();
    // Set static field: static public System.Int32 kMaxSignatureLength
    static void _set_kMaxSignatureLength(int value);
    // static field const value: static private System.Int32 kMaxPacketSize
    static constexpr const int kMaxPacketSize = 412;
    // Get static field: static private System.Int32 kMaxPacketSize
    static int _get_kMaxPacketSize();
    // Set static field: static private System.Int32 kMaxPacketSize
    static void _set_kMaxPacketSize(int value);
    // static field const value: static private System.Int32 kRetryCount
    static constexpr const int kRetryCount = 5;
    // Get static field: static private System.Int32 kRetryCount
    static int _get_kRetryCount();
    // Set static field: static private System.Int32 kRetryCount
    static void _set_kRetryCount(int value);
    // static field const value: static private System.Int32 kRetryDelay0Ms
    static constexpr const int kRetryDelay0Ms = 200;
    // Get static field: static private System.Int32 kRetryDelay0Ms
    static int _get_kRetryDelay0Ms();
    // Set static field: static private System.Int32 kRetryDelay0Ms
    static void _set_kRetryDelay0Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay1Ms
    static constexpr const int kRetryDelay1Ms = 300;
    // Get static field: static private System.Int32 kRetryDelay1Ms
    static int _get_kRetryDelay1Ms();
    // Set static field: static private System.Int32 kRetryDelay1Ms
    static void _set_kRetryDelay1Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay2Ms
    static constexpr const int kRetryDelay2Ms = 450;
    // Get static field: static private System.Int32 kRetryDelay2Ms
    static int _get_kRetryDelay2Ms();
    // Set static field: static private System.Int32 kRetryDelay2Ms
    static void _set_kRetryDelay2Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay3Ms
    static constexpr const int kRetryDelay3Ms = 600;
    // Get static field: static private System.Int32 kRetryDelay3Ms
    static int _get_kRetryDelay3Ms();
    // Set static field: static private System.Int32 kRetryDelay3Ms
    static void _set_kRetryDelay3Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay4Ms
    static constexpr const int kRetryDelay4Ms = 1000;
    // Get static field: static private System.Int32 kRetryDelay4Ms
    static int _get_kRetryDelay4Ms();
    // Set static field: static private System.Int32 kRetryDelay4Ms
    static void _set_kRetryDelay4Ms(int value);
    // static field const value: static private System.Int64 kConnectionStateTimeoutMs
    static constexpr const int64_t kConnectionStateTimeoutMs = 300000;
    // Get static field: static private System.Int64 kConnectionStateTimeoutMs
    static int64_t _get_kConnectionStateTimeoutMs();
    // Set static field: static private System.Int64 kConnectionStateTimeoutMs
    static void _set_kConnectionStateTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kSentRequestTimeoutMs
    static constexpr const int64_t kSentRequestTimeoutMs = 5000;
    // Get static field: static private System.Int64 kSentRequestTimeoutMs
    static int64_t _get_kSentRequestTimeoutMs();
    // Set static field: static private System.Int64 kSentRequestTimeoutMs
    static void _set_kSentRequestTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static constexpr const int64_t kSentRequestWithResponseTimeoutMs = 15000;
    // Get static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static int64_t _get_kSentRequestWithResponseTimeoutMs();
    // Set static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static void _set_kSentRequestWithResponseTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kMultipartMessageTimeoutMs
    static constexpr const int64_t kMultipartMessageTimeoutMs = 15000;
    // Get static field: static private System.Int64 kMultipartMessageTimeoutMs
    static int64_t _get_kMultipartMessageTimeoutMs();
    // Set static field: static private System.Int64 kMultipartMessageTimeoutMs
    static void _set_kMultipartMessageTimeoutMs(int64_t value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,INetworkPacketSerializer`1<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin>> _serializers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>*>*& dyn__serializers();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Func`1<BGNet.Core.Messages.BaseMultipartMessage>> _multipartMessageRegistry
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseMultipartMessage*>*>*& dyn__multipartMessageRegistry();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.UInt32,System.Func`1<BGNet.Core.Messages.BaseAcknowledgeMessage>> _acknowledgeMessageRegistery
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint, ::System::Func_1<::BGNet::Core::Messages::BaseAcknowledgeMessage*>*>*& dyn__acknowledgeMessageRegistery();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _dataWriter
    [[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetDataWriter*& dyn__dataWriter();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataReader _multipartReader
    [[deprecated("Use field access instead!")]] ::LiteNetLib::Utils::NetDataReader*& dyn__multipartReader();
    // Get instance field reference: private readonly IUnconnectedMessageSender _sender
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IUnconnectedMessageSender*& dyn__sender();
    // Get instance field reference: protected readonly BGNet.Core.IAnalyticsManager analytics
    [[deprecated("Use field access instead!")]] ::BGNet::Core::IAnalyticsManager*& dyn_analytics();
    // Get instance field reference: private readonly BGNet.Core.ITimeProvider _timeProvider
    [[deprecated("Use field access instead!")]] ::BGNet::Core::ITimeProvider*& dyn__timeProvider();
    // Get instance field reference: protected readonly BGNet.Core.ITaskUtility _taskUtility
    [[deprecated("Use field access instead!")]] ::BGNet::Core::ITaskUtility*& dyn__taskUtility();
    // Get instance field reference: private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.SentRequestWaiter> _sentRequestWaiters
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::SentRequestWaiter*>*& dyn__sentRequestWaiters();
    // Get instance field reference: private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestResponseWaiter> _requestResponseWaiters
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::RequestResponseWaiter*>*& dyn__requestResponseWaiters();
    // Get instance field reference: private readonly ExpiringDictionary`2<System.Net.IPEndPoint,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.ConnectionState> _connectionStates
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ExpiringDictionary_2<::System::Net::IPEndPoint*, ::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState*>*& dyn__connectionStates();
    // Get instance field reference: private readonly ExpiringDictionary`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestWaiterId,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MultipartMessageWaiter> _multipartMessageBuffer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ExpiringDictionary_2<::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, ::BGNet::Core::Messages::UnconnectedMessageHandler::MultipartMessageWaiter*>*& dyn__multipartMessageBuffer();
    // Get instance field reference: private readonly SmallBufferPool _bufferPool
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SmallBufferPool*& dyn__bufferPool();
    // Get instance field reference: private readonly System.Threading.CancellationTokenSource _disposedTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__disposedTokenSource();
    // protected PacketEncryptionLayer get_encryptionLayer()
    // Offset: 0x16036E8
    ::GlobalNamespace::PacketEncryptionLayer* get_encryptionLayer();
    // protected BGNet.Core.ITimeProvider get_timeProvider()
    // Offset: 0x160D2E0
    ::BGNet::Core::ITimeProvider* get_timeProvider();
    // protected System.Void .ctor(IUnconnectedMessageSender sender, BGNet.Core.ITimeProvider timeProvider, BGNet.Core.ITaskUtility taskUtility, BGNet.Core.IAnalyticsManager analytics)
    // Offset: 0x1602D20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnconnectedMessageHandler* New_ctor(::GlobalNamespace::IUnconnectedMessageSender* sender, ::BGNet::Core::ITimeProvider* timeProvider, ::BGNet::Core::ITaskUtility* taskUtility, ::BGNet::Core::IAnalyticsManager* analytics) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnconnectedMessageHandler*, creationType>(sender, timeProvider, taskUtility, analytics)));
    }
    // protected System.Void RegisterSerializer(System.UInt32 messageType, INetworkPacketSerializer`1<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> serializer, System.Func`1<TMultipartMessage> obtainMultipartMessage, System.Func`1<TAcknowledgeMessage> obtainAcknowledgeMessage)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TMultipartMessage, class TAcknowledgeMessage>
    void RegisterSerializer(uint messageType, ::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* serializer, ::System::Func_1<TMultipartMessage>* obtainMultipartMessage, ::System::Func_1<TAcknowledgeMessage>* obtainAcknowledgeMessage) {
      static_assert(std::is_convertible_v<TMultipartMessage, ::BGNet::Core::Messages::BaseMultipartMessage*>);
      static_assert(std::is_convertible_v<TAcknowledgeMessage, ::BGNet::Core::Messages::BaseAcknowledgeMessage*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::RegisterSerializer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMultipartMessage>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAcknowledgeMessage>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageType), ::il2cpp_utils::ExtractType(serializer), ::il2cpp_utils::ExtractType(obtainMultipartMessage), ::il2cpp_utils::ExtractType(obtainAcknowledgeMessage)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMultipartMessage>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAcknowledgeMessage>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, messageType, serializer, obtainMultipartMessage, obtainAcknowledgeMessage);
    }
    // protected System.Boolean ShouldHandleMessage(BGNet.Core.Messages.IUnconnectedMessage packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0x1603B04
    bool ShouldHandleMessage(::BGNet::Core::Messages::IUnconnectedMessage* packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin);
    // protected System.UInt32 GetMessageType(BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x1603A0C
    uint GetMessageType(::BGNet::Core::Messages::IUnconnectedMessage* message);
    // private BGNet.Core.Messages.BaseMultipartMessage GetMultipartMessage(BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x160D2E8
    ::BGNet::Core::Messages::BaseMultipartMessage* GetMultipartMessage(::BGNet::Core::Messages::IUnconnectedMessage* message);
    // private BGNet.Core.Messages.BaseAcknowledgeMessage GetAcknowledgeMessage(BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x160D37C
    ::BGNet::Core::Messages::BaseAcknowledgeMessage* GetAcknowledgeMessage(::BGNet::Core::Messages::IUnconnectedMessage* message);
    // protected System.Func`2<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin,T> ObtainVersioned(System.Func`2<System.UInt32,T> obtain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Func_2<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, T>* ObtainVersioned(::System::Func_2<uint, T>* obtain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::ObtainVersioned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ObtainVersioned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obtain)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, T>*, false>(this, ___generic__method, obtain);
    }
    // protected System.Func`1<T> ObtainVersioned(System.Func`1<T> obtain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Func_1<T>* ObtainVersioned(::System::Func_1<T>* obtain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::ObtainVersioned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ObtainVersioned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obtain)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_1<T>*, false>(this, ___generic__method, obtain);
    }
    // protected System.Void DefaultAcknowledgeHandler(T packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DefaultAcknowledgeHandler(T packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedMessage> && std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedAcknowledgeMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::DefaultAcknowledgeHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAcknowledgeHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, packet, origin);
    }
    // protected System.Void DefaultRequestHandler(T packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DefaultRequestHandler(T packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::DefaultRequestHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultRequestHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, packet, origin);
    }
    // protected System.Void DefaultResponseHandler(T packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DefaultResponseHandler(T packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::DefaultResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, packet, origin);
    }
    // protected System.Void DefaultMultipartMessageHandler(T packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DefaultMultipartMessageHandler(T packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedMultipartMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::DefaultMultipartMessageHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultMultipartMessageHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, packet, origin);
    }
    // protected System.Action`2<T,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> CustomResponseHandler(System.Action`2<T,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* CustomResponseHandler(::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableRequest>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::CustomResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CustomResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customHandler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>*, false>(this, ___generic__method, customHandler);
    }
    // protected System.Action`2<T,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> CustomUnreliableResponseHandler(System.Action`2<T,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* CustomUnreliableResponseHandler(::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedUnreliableMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::CustomUnreliableResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CustomUnreliableResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customHandler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_2<T, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>*, false>(this, ___generic__method, customHandler);
    }
    // private System.Boolean IsUnhandledMessage(BGNet.Core.Messages.IUnconnectedReliableRequest packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0x160D410
    bool IsUnhandledMessage(::BGNet::Core::Messages::IUnconnectedReliableRequest* packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin);
    // private System.Void CompleteSend(BGNet.Core.Messages.IUnconnectedResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x160D98C
    void CompleteSend(::BGNet::Core::Messages::IUnconnectedResponse* packet, ::System::Net::IPEndPoint* remoteEndPoint);
    // protected System.Boolean CompleteRequest(BGNet.Core.Messages.IUnconnectedReliableResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1603EAC
    bool CompleteRequest(::BGNet::Core::Messages::IUnconnectedReliableResponse* packet, ::System::Net::IPEndPoint* remoteEndPoint);
    // protected System.Void GetAndSendResponse(TRequest request, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin, System.Func`3<TRequest,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendResponse(TRequest request, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin, ::System::Func_3<TRequest, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, ::System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, ::System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TRequest>, ::BGNet::Core::Messages::IUnconnectedReliableRequest>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TResponse>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Threading.Tasks.Task GetAndSendResponseAsync(TRequest request, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin, System.Func`3<TRequest,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TRequest, class TResponse>
    ::System::Threading::Tasks::Task* GetAndSendResponseAsync(TRequest request, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin, ::System::Func_3<TRequest, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, ::System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, ::System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TRequest>, ::BGNet::Core::Messages::IUnconnectedReliableRequest>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TResponse>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task*, false>(this, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Void GetAndSendUnreilableResponse(TRequest request, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin, System.Func`3<TRequest,BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendUnreilableResponse(TRequest request, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin, ::System::Func_3<TRequest, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, ::System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, ::System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TRequest>, ::BGNet::Core::Messages::IUnconnectedUnreliableMessage>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TResponse>, ::BGNet::Core::Messages::IUnconnectedUnreliableMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendUnreilableResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendUnreilableResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Void SendUnreliableMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedUnreliableMessage message)
    // Offset: 0x160DCCC
    void SendUnreliableMessage(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedUnreliableMessage* message);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, BGNet.Core.Messages.IUnconnectedResponse response)
    // Offset: 0x16092D8
    void SendUnreliableResponse(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::BGNet::Core::Messages::IUnconnectedResponse* response);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, BGNet.Core.Messages.IUnconnectedResponse response)
    // Offset: 0x160D748
    void SendUnreliableResponse(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, uint responseId, ::BGNet::Core::Messages::IUnconnectedResponse* response);
    // protected System.Void SendReliableRequest(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160DEE4
    void SendReliableRequest(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableRequestAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1607074
    ::System::Threading::Tasks::Task* SendReliableRequestAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* onSendFailed, ::System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, BGNet.Core.Messages.IUnconnectedReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E190
    void SendReliableResponse(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::BGNet::Core::Messages::IUnconnectedReliableResponse* response, ::System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, BGNet.Core.Messages.IUnconnectedReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160B784
    void SendReliableResponse(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, uint responseId, ::BGNet::Core::Messages::IUnconnectedReliableResponse* response, ::System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, BGNet.Core.Messages.IUnconnectedReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E2F0
    ::System::Threading::Tasks::Task* SendReliableResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::BGNet::Core::Messages::IUnconnectedReliableResponse* response, ::System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task`1<T> SendReliableRequestAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* SendReliableRequestAndAwaitResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, ::System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequestAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableRequestAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(onSendFailedAwaitResponse), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, protocolVersion, remoteEndPoint, request, onSendFailedAwaitResponse, cancellationToken);
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest request, BGNet.Core.Messages.IUnconnectedReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* request, ::BGNet::Core::Messages::IUnconnectedReliableResponse* response, ::System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponseAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, protocolVersion, remoteEndPoint, request, response, cancellationToken);
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, BGNet.Core.Messages.IUnconnectedReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, uint responseId, ::BGNet::Core::Messages::IUnconnectedReliableResponse* response, ::System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponseAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(responseId), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, protocolVersion, remoteEndPoint, responseId, response, cancellationToken);
    }
    // private System.Void SendMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x160DD70
    void SendMessage(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedMessage* message);
    // private System.Void SendMessageWithRetry(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest message, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E018
    void SendMessageWithRetry(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* message, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E0FC
    ::System::Threading::Tasks::Task* SendMessageWithRetryAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* message, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* onSendFailed, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMultipartMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest message, LiteNetLib.Utils.NetDataWriter data, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E650
    ::System::Threading::Tasks::Task* SendMultipartMessageWithRetryAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* message, ::LiteNetLib::Utils::NetDataWriter* data, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* onSendFailed, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsyncInternal(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E794
    ::System::Threading::Tasks::Task* SendMessageWithRetryAsyncInternal(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* message, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* onSendFailed, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<T> SendMessageWithRetryAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, BGNet.Core.Messages.IUnconnectedReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* SendMessageWithRetryAwaitResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, ::BGNet::Core::Messages::IUnconnectedReliableRequest* message, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, ::System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageWithRetryAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onSendFailedAwaitResponse), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, protocolVersion, remoteEndPoint, message, onSendFailedAwaitResponse, cancellationToken);
    }
    // private System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> WrapOnSendFailedAwaitResponse(BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.RequestResponseWaiter waiter, System.Func`5<System.UInt32,System.Net.IPEndPoint,BGNet.Core.Messages.IUnconnectedReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>* WrapOnSendFailedAwaitResponse(::BGNet::Core::Messages::UnconnectedMessageHandler::RequestResponseWaiter* waiter, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task_1<T>*>* onSendFailed) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedMessage>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::WrapOnSendFailedAwaitResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrapOnSendFailedAwaitResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waiter), ::il2cpp_utils::ExtractType(onSendFailed)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*, false>(this, ___generic__method, waiter, onSendFailed);
    }
    // protected System.Threading.Tasks.Task`1<T> AwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 requestId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* AwaitResponseAsync(uint protocolVersion, ::System::Net::IPEndPoint* remoteEndPoint, uint requestId, ::System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::BGNet::Core::Messages::IUnconnectedReliableResponse>);
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::Messages::UnconnectedMessageHandler::AwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(requestId), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, protocolVersion, remoteEndPoint, requestId, cancellationToken);
    }
    // private System.Threading.Tasks.Task WaitForRetry(System.Int32 retryAttempt, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x160E8D4
    ::System::Threading::Tasks::Task* WaitForRetry(int retryAttempt, ::System::Threading::CancellationToken cancellationToken);
    // private LiteNetLib.Utils.NetDataWriter Write(System.UInt32 protocolVersion, BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x160E50C
    ::LiteNetLib::Utils::NetDataWriter* Write(uint protocolVersion, ::BGNet::Core::Messages::IUnconnectedMessage* message);
    // public System.Void PollUpdate()
    // Offset: 0x1608BB0
    void PollUpdate();
    // public System.Void ReceiveUnconnectedMessage(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x160EB60
    void ReceiveUnconnectedMessage(::System::Net::IPEndPoint* remoteEndPoint, ::LiteNetLib::Utils::NetDataReader* reader);
    // protected System.Boolean ShouldHandleMessageFromEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x160ED50
    bool ShouldHandleMessageFromEndPoint(::System::Net::IPEndPoint* endPoint);
    // protected System.Void ReceivedMessageException(System.Net.IPEndPoint endPoint, System.Exception exception)
    // Offset: 0x160ED58
    void ReceivedMessageException(::System::Net::IPEndPoint* endPoint, ::System::Exception* exception);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint)
    // Offset: 0x1604B7C
    void BeginSession(::System::Net::IPEndPoint* endPoint);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x16090C8
    void BeginSession(::System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.UInt32 GetNextRequestId(System.Net.IPEndPoint endPoint)
    // Offset: 0x160678C
    uint GetNextRequestId(::System::Net::IPEndPoint* endPoint);
    // protected BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.ConnectionState GetConnectionState(System.Net.IPEndPoint endPoint)
    // Offset: 0x16068BC
    ::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState* GetConnectionState(::System::Net::IPEndPoint* endPoint);
    // protected System.Boolean IsValidSessionStartRequestId(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x16091E4
    bool IsValidSessionStartRequestId(::System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.Boolean IsConnectionStateEncrypted(System.Net.IPEndPoint endPoint)
    // Offset: 0x1602AD0
    bool IsConnectionStateEncrypted(::System::Net::IPEndPoint* endPoint);
    // private INetworkPacketSerializer`1<BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin> GetSerializer(System.UInt32 protocolVersion, System.UInt32 messageType, System.Boolean throwOnInvalidVersion)
    // Offset: 0x160EA20
    ::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* GetSerializer(uint protocolVersion, uint messageType, bool throwOnInvalidVersion);
    // public System.Void Dispose()
    // Offset: 0x160387C
    void Dispose();
    // static protected System.Byte[] CreateHandshakeHeader(System.Byte[] packetHeader)
    // Offset: 0x160379C
    static ::ArrayW<uint8_t> CreateHandshakeHeader(::ArrayW<uint8_t> packetHeader);
  }; // BGNet.Core.Messages.UnconnectedMessageHandler
  #pragma pack(pop)
  static check_size<sizeof(UnconnectedMessageHandler), 128 + sizeof(::System::Threading::CancellationTokenSource*)> __BGNet_Core_Messages_UnconnectedMessageHandlerSizeCheck;
  static_assert(sizeof(UnconnectedMessageHandler) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin, "BGNet.Core.Messages", "UnconnectedMessageHandler/MessageOrigin");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::Messages::UnconnectedMessageHandler::RequestWaiterId, "BGNet.Core.Messages", "UnconnectedMessageHandler/RequestWaiterId");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PacketEncryptionLayer* (BGNet::Core::Messages::UnconnectedMessageHandler::*)()>(&BGNet::Core::Messages::UnconnectedMessageHandler::get_encryptionLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::get_timeProvider
// Il2CppName: get_timeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BGNet::Core::ITimeProvider* (BGNet::Core::Messages::UnconnectedMessageHandler::*)()>(&BGNet::Core::Messages::UnconnectedMessageHandler::get_timeProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "get_timeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::RegisterSerializer
// Il2CppName: RegisterSerializer
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ShouldHandleMessage
// Il2CppName: ShouldHandleMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin)>(&BGNet::Core::Messages::UnconnectedMessageHandler::ShouldHandleMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "UnconnectedMessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "ShouldHandleMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetMessageType
// Il2CppName: GetMessageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetMessageType)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetMessageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetMultipartMessage
// Il2CppName: GetMultipartMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BGNet::Core::Messages::BaseMultipartMessage* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetMultipartMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetMultipartMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetAcknowledgeMessage
// Il2CppName: GetAcknowledgeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BGNet::Core::Messages::BaseAcknowledgeMessage* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetAcknowledgeMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetAcknowledgeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ObtainVersioned
// Il2CppName: ObtainVersioned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ObtainVersioned
// Il2CppName: ObtainVersioned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::DefaultAcknowledgeHandler
// Il2CppName: DefaultAcknowledgeHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::DefaultRequestHandler
// Il2CppName: DefaultRequestHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::DefaultResponseHandler
// Il2CppName: DefaultResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::DefaultMultipartMessageHandler
// Il2CppName: DefaultMultipartMessageHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::CustomResponseHandler
// Il2CppName: CustomResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::CustomUnreliableResponseHandler
// Il2CppName: CustomUnreliableResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::IsUnhandledMessage
// Il2CppName: IsUnhandledMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin)>(&BGNet::Core::Messages::UnconnectedMessageHandler::IsUnhandledMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "UnconnectedMessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "IsUnhandledMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::CompleteSend
// Il2CppName: CompleteSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedResponse*, ::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::CompleteSend)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedResponse")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "CompleteSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::CompleteRequest
// Il2CppName: CompleteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedReliableResponse*, ::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::CompleteRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableResponse")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "CompleteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendResponse
// Il2CppName: GetAndSendResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendResponseAsync
// Il2CppName: GetAndSendResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetAndSendUnreilableResponse
// Il2CppName: GetAndSendUnreilableResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableMessage
// Il2CppName: SendUnreliableMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedUnreliableMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableMessage)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedUnreliableMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendUnreliableMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::BGNet::Core::Messages::IUnconnectedResponse*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, uint, ::BGNet::Core::Messages::IUnconnectedResponse*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendUnreliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* responseId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, responseId, response});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequest
// Il2CppName: SendReliableRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequest)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendReliableRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequestAsync
// Il2CppName: SendReliableRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequestAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendReliableRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::BGNet::Core::Messages::IUnconnectedReliableResponse*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, uint, ::BGNet::Core::Messages::IUnconnectedReliableResponse*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* responseId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, responseId, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAsync
// Il2CppName: SendReliableResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::BGNet::Core::Messages::IUnconnectedReliableResponse*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendReliableResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableRequestAndAwaitResponseAsync
// Il2CppName: SendReliableRequestAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendMessage)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetry
// Il2CppName: SendMessageWithRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetry)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendMessageWithRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAsync
// Il2CppName: SendMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMultipartMessageWithRetryAsync
// Il2CppName: SendMultipartMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::LiteNetLib::Utils::NetDataWriter*, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendMultipartMessageWithRetryAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendMultipartMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, data, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAsyncInternal
// Il2CppName: SendMessageWithRetryAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Func_5<uint, ::System::Net::IPEndPoint*, ::BGNet::Core::Messages::IUnconnectedReliableRequest*, ::System::Threading::CancellationToken, ::System::Threading::Tasks::Task*>*, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAsyncInternal)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "SendMessageWithRetryAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::SendMessageWithRetryAwaitResponseAsync
// Il2CppName: SendMessageWithRetryAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::WrapOnSendFailedAwaitResponse
// Il2CppName: WrapOnSendFailedAwaitResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::AwaitResponseAsync
// Il2CppName: AwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::WaitForRetry
// Il2CppName: WaitForRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(int, ::System::Threading::CancellationToken)>(&BGNet::Core::Messages::UnconnectedMessageHandler::WaitForRetry)> {
  static const MethodInfo* get() {
    static auto* retryAttempt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "WaitForRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{retryAttempt, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LiteNetLib::Utils::NetDataWriter* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, ::BGNet::Core::Messages::IUnconnectedMessage*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::Write)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, message});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)()>(&BGNet::Core::Messages::UnconnectedMessageHandler::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ReceiveUnconnectedMessage
// Il2CppName: ReceiveUnconnectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::ReceiveUnconnectedMessage)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "ReceiveUnconnectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, reader});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ShouldHandleMessageFromEndPoint
// Il2CppName: ShouldHandleMessageFromEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::ShouldHandleMessageFromEndPoint)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::ReceivedMessageException
// Il2CppName: ReceivedMessageException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*, ::System::Exception*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::ReceivedMessageException)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "ReceivedMessageException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, exception});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::BeginSession)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*, uint)>(&BGNet::Core::Messages::UnconnectedMessageHandler::BeginSession)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, requestId});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetNextRequestId
// Il2CppName: GetNextRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetNextRequestId)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetNextRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetConnectionState
// Il2CppName: GetConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BGNet::Core::Messages::UnconnectedMessageHandler::ConnectionState* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetConnectionState)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::IsValidSessionStartRequestId
// Il2CppName: IsValidSessionStartRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*, uint)>(&BGNet::Core::Messages::UnconnectedMessageHandler::IsValidSessionStartRequestId)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "IsValidSessionStartRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, requestId});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::IsConnectionStateEncrypted
// Il2CppName: IsConnectionStateEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BGNet::Core::Messages::UnconnectedMessageHandler::*)(::System::Net::IPEndPoint*)>(&BGNet::Core::Messages::UnconnectedMessageHandler::IsConnectionStateEncrypted)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "IsConnectionStateEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::GetSerializer
// Il2CppName: GetSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::INetworkPacketSerializer_1<::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin>* (BGNet::Core::Messages::UnconnectedMessageHandler::*)(uint, uint, bool)>(&BGNet::Core::Messages::UnconnectedMessageHandler::GetSerializer)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* throwOnInvalidVersion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "GetSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, messageType, throwOnInvalidVersion});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::Messages::UnconnectedMessageHandler::*)()>(&BGNet::Core::Messages::UnconnectedMessageHandler::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::Messages::UnconnectedMessageHandler::CreateHandshakeHeader
// Il2CppName: CreateHandshakeHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>)>(&BGNet::Core::Messages::UnconnectedMessageHandler::CreateHandshakeHeader)> {
  static const MethodInfo* get() {
    static auto* packetHeader = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::Messages::UnconnectedMessageHandler*), "CreateHandshakeHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetHeader});
  }
};
