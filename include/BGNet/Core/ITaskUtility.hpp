// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Forward declaring type: ITaskUtility
  class ITaskUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BGNet::Core::ITaskUtility);
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::ITaskUtility*, "BGNet.Core", "ITaskUtility");
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Core.ITaskUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class ITaskUtility {
    public:
    // public System.Threading.Tasks.Task Delay(System.TimeSpan timeSpan, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* Delay(::System::TimeSpan timeSpan, ::System::Threading::CancellationToken cancellationToken);
    // public System.Void Wait(System.Threading.Tasks.Task task)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Wait(::System::Threading::Tasks::Task* task);
    // public T Wait(System.Threading.Tasks.Task`1<T> task)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Wait(::System::Threading::Tasks::Task_1<T>* task) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::ITaskUtility::Wait");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wait", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, task);
    }
    // public System.Threading.Tasks.Task`1<T2> ContinueWith(System.Threading.Tasks.Task`1<T1> task, System.Func`2<System.Threading.Tasks.Task`1<T1>,System.Threading.Tasks.Task`1<T2>> continuation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    ::System::Threading::Tasks::Task_1<T2>* ContinueWith(::System::Threading::Tasks::Task_1<T1>* task, ::System::Func_2<::System::Threading::Tasks::Task_1<T1>*, ::System::Threading::Tasks::Task_1<T2>*>* continuation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::ITaskUtility::ContinueWith");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueWith", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(continuation)})));
      auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T2>*, false>(this, ___generic__method, task, continuation);
    }
    // public System.Threading.Tasks.Task Run(System.Action action, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* Run(::System::Action* action, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> func, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* Run(::System::Func_1<::System::Threading::Tasks::Task*>* func, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<T> Run(System.Func`1<T> func, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Threading::Tasks::Task_1<T>* Run(::System::Func_1<T>* func, ::System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BGNet::Core::ITaskUtility::Run");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func), ::il2cpp_utils::ExtractType(cancellationToken)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<T>*, false>(this, ___generic__method, func, cancellationToken);
    }
    // public System.Threading.CancellationToken CancellationTokenWithDelay(System.TimeSpan timeSpan)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::CancellationToken CancellationTokenWithDelay(::System::TimeSpan timeSpan);
  }; // BGNet.Core.ITaskUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Delay
// Il2CppName: Delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::ITaskUtility::*)(::System::TimeSpan, ::System::Threading::CancellationToken)>(&BGNet::Core::ITaskUtility::Delay)> {
  static const MethodInfo* get() {
    static auto* timeSpan = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITaskUtility*), "Delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSpan, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::ITaskUtility::*)(::System::Threading::Tasks::Task*)>(&BGNet::Core::ITaskUtility::Wait)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITaskUtility*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Wait
// Il2CppName: Wait
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::ContinueWith
// Il2CppName: ContinueWith
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::ITaskUtility::*)(::System::Action*, ::System::Threading::CancellationToken)>(&BGNet::Core::ITaskUtility::Run)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITaskUtility*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (BGNet::Core::ITaskUtility::*)(::System::Func_1<::System::Threading::Tasks::Task*>*, ::System::Threading::CancellationToken)>(&BGNet::Core::ITaskUtility::Run)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITaskUtility*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, cancellationToken});
  }
};
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::Run
// Il2CppName: Run
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BGNet::Core::ITaskUtility::CancellationTokenWithDelay
// Il2CppName: CancellationTokenWithDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::CancellationToken (BGNet::Core::ITaskUtility::*)(::System::TimeSpan)>(&BGNet::Core::ITaskUtility::CancellationTokenWithDelay)> {
  static const MethodInfo* get() {
    static auto* timeSpan = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITaskUtility*), "CancellationTokenWithDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSpan});
  }
};
