// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MidiParser
namespace MidiParser {
  // Forward declaring type: MidiTrack
  class MidiTrack;
}
// Completed forward declares
// Type namespace: MidiParser
namespace MidiParser {
  // Forward declaring type: MidiFile
  class MidiFile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MidiParser::MidiFile);
DEFINE_IL2CPP_ARG_TYPE(::MidiParser::MidiFile*, "MidiParser", "MidiFile");
// Type namespace: MidiParser
namespace MidiParser {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: MidiParser.MidiFile
  // [TokenAttribute] Offset: FFFFFFFF
  class MidiFile : public ::Il2CppObject {
    public:
    // Nested type: ::MidiParser::MidiFile::Reader
    class Reader;
    public:
    // public readonly System.Int32 format
    // Size: 0x4
    // Offset: 0x10
    int format;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 ticksPerQuarterNote
    // Size: 0x4
    // Offset: 0x14
    int ticksPerQuarterNote;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly MidiParser.MidiTrack[] tracks
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::MidiParser::MidiTrack*> tracks;
    // Field size check
    static_assert(sizeof(::ArrayW<::MidiParser::MidiTrack*>) == 0x8);
    // public readonly System.Int32 tracksCount
    // Size: 0x4
    // Offset: 0x20
    int tracksCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.Int32 format
    [[deprecated("Use field access instead!")]] int& dyn_format();
    // Get instance field reference: public readonly System.Int32 ticksPerQuarterNote
    [[deprecated("Use field access instead!")]] int& dyn_ticksPerQuarterNote();
    // Get instance field reference: public readonly MidiParser.MidiTrack[] tracks
    [[deprecated("Use field access instead!")]] ::ArrayW<::MidiParser::MidiTrack*>& dyn_tracks();
    // Get instance field reference: public readonly System.Int32 tracksCount
    [[deprecated("Use field access instead!")]] int& dyn_tracksCount();
    // public System.Void .ctor(System.String path)
    // Offset: 0x2BAE794
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MidiFile* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MidiParser::MidiFile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MidiFile*, creationType>(path)));
    }
    // private System.Void .ctor(System.Byte[] data)
    // Offset: 0x2BAE7C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MidiFile* New_ctor(::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MidiParser::MidiFile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MidiFile*, creationType>(data)));
    }
    // static private System.Boolean ParseMetaEvent(System.Byte[] data, ref System.Int32 position, System.Byte metaEventType, out System.Int32 data1, out System.Int32 data2)
    // Offset: 0x2BAEE8C
    static bool ParseMetaEvent(::ArrayW<uint8_t> data, ByRef<int> position, uint8_t metaEventType, ByRef<int> data1, ByRef<int> data2);
    // static private MidiParser.MidiTrack ParseTrack(System.Int32 index, System.Byte[] data, ref System.Int32 position)
    // Offset: 0x2BAEBE4
    static ::MidiParser::MidiTrack* ParseTrack(int index, ::ArrayW<uint8_t> data, ByRef<int> position);
  }; // MidiParser.MidiFile
  #pragma pack(pop)
  static check_size<sizeof(MidiFile), 32 + sizeof(int)> __MidiParser_MidiFileSizeCheck;
  static_assert(sizeof(MidiFile) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MidiParser::MidiFile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MidiParser::MidiFile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MidiParser::MidiFile::ParseMetaEvent
// Il2CppName: ParseMetaEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>, ByRef<int>, uint8_t, ByRef<int>, ByRef<int>)>(&MidiParser::MidiFile::ParseMetaEvent)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* metaEventType = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* data1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* data2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiFile*), "ParseMetaEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, position, metaEventType, data1, data2});
  }
};
// Writing MetadataGetter for method: MidiParser::MidiFile::ParseTrack
// Il2CppName: ParseTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MidiParser::MidiTrack* (*)(int, ::ArrayW<uint8_t>, ByRef<int>)>(&MidiParser::MidiFile::ParseTrack)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiFile*), "ParseTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, data, position});
  }
};
