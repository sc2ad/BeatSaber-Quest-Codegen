// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MidiParser
namespace MidiParser {
  // Forward declaring type: MetaEventType
  struct MetaEventType;
}
// Completed forward declares
// Type namespace: MidiParser
namespace MidiParser {
  // Forward declaring type: MidiEvent
  struct MidiEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MidiParser::MidiEvent, "MidiParser", "MidiEvent");
// Type namespace: MidiParser
namespace MidiParser {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: MidiParser.MidiEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct MidiEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 AbsoluteTicksTime
    // Size: 0x4
    // Offset: 0x0
    int AbsoluteTicksTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Byte Type
    // Size: 0x1
    // Offset: 0x4
    uint8_t Type;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Type and: Arg1
    char __padding1[0x3] = {};
    // public System.Int32 Arg1
    // Size: 0x4
    // Offset: 0x8
    int Arg1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Arg2
    // Size: 0x4
    // Offset: 0xC
    int Arg2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Arg3
    // Size: 0x4
    // Offset: 0x10
    int Arg3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MidiEvent
    constexpr MidiEvent(int AbsoluteTicksTime_ = {}, uint8_t Type_ = {}, int Arg1_ = {}, int Arg2_ = {}, int Arg3_ = {}) noexcept : AbsoluteTicksTime{AbsoluteTicksTime_}, Type{Type_}, Arg1{Arg1_}, Arg2{Arg2_}, Arg3{Arg3_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 AbsoluteTicksTime
    [[deprecated("Use field access instead!")]] int& dyn_AbsoluteTicksTime();
    // Get instance field reference: public System.Byte Type
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Type();
    // Get instance field reference: public System.Int32 Arg1
    [[deprecated("Use field access instead!")]] int& dyn_Arg1();
    // Get instance field reference: public System.Int32 Arg2
    [[deprecated("Use field access instead!")]] int& dyn_Arg2();
    // Get instance field reference: public System.Int32 Arg3
    [[deprecated("Use field access instead!")]] int& dyn_Arg3();
    // public MidiParser.MetaEventType get_MetaEventType()
    // Offset: 0x2BAE76C
    ::MidiParser::MetaEventType get_MetaEventType();
    // public System.Int32 get_Channel()
    // Offset: 0x2BAE774
    int get_Channel();
    // public System.Int32 get_Note()
    // Offset: 0x2BAE77C
    int get_Note();
    // public System.Int32 get_Velocity()
    // Offset: 0x2BAE784
    int get_Velocity();
    // public System.Int32 get_Value()
    // Offset: 0x2BAE78C
    int get_Value();
  }; // MidiParser.MidiEvent
  #pragma pack(pop)
  static check_size<sizeof(MidiEvent), 16 + sizeof(int)> __MidiParser_MidiEventSizeCheck;
  static_assert(sizeof(MidiEvent) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MidiParser::MidiEvent::get_MetaEventType
// Il2CppName: get_MetaEventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MidiParser::MetaEventType (MidiParser::MidiEvent::*)()>(&MidiParser::MidiEvent::get_MetaEventType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiEvent), "get_MetaEventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MidiParser::MidiEvent::get_Channel
// Il2CppName: get_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MidiParser::MidiEvent::*)()>(&MidiParser::MidiEvent::get_Channel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiEvent), "get_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MidiParser::MidiEvent::get_Note
// Il2CppName: get_Note
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MidiParser::MidiEvent::*)()>(&MidiParser::MidiEvent::get_Note)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiEvent), "get_Note", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MidiParser::MidiEvent::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MidiParser::MidiEvent::*)()>(&MidiParser::MidiEvent::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiEvent), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MidiParser::MidiEvent::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MidiParser::MidiEvent::*)()>(&MidiParser::MidiEvent::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MidiParser::MidiEvent), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
