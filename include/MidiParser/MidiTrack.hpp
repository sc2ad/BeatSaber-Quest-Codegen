// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MidiParser.MidiEvent
#include "MidiParser/MidiEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: MidiParser
namespace MidiParser {
  // Forward declaring type: MidiTrack
  class MidiTrack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MidiParser::MidiTrack);
DEFINE_IL2CPP_ARG_TYPE(::MidiParser::MidiTrack*, "MidiParser", "MidiTrack");
// Type namespace: MidiParser
namespace MidiParser {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MidiParser.MidiTrack
  // [TokenAttribute] Offset: FFFFFFFF
  class MidiTrack : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Index
    // Size: 0x4
    // Offset: 0x10
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Index and: MidiEvents
    char __padding0[0x4] = {};
    // public readonly System.Collections.Generic.List`1<MidiParser.MidiEvent> MidiEvents
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::MidiParser::MidiEvent>* MidiEvents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MidiParser::MidiEvent>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // Get instance field reference: public readonly System.Collections.Generic.List`1<MidiParser.MidiEvent> MidiEvents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MidiParser::MidiEvent>*& dyn_MidiEvents();
    // public System.Void .ctor()
    // Offset: 0x2BAF018
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MidiTrack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MidiParser::MidiTrack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MidiTrack*, creationType>()));
    }
  }; // MidiParser.MidiTrack
  #pragma pack(pop)
  static check_size<sizeof(MidiTrack), 24 + sizeof(::System::Collections::Generic::List_1<::MidiParser::MidiEvent>*)> __MidiParser_MidiTrackSizeCheck;
  static_assert(sizeof(MidiTrack) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MidiParser::MidiTrack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
