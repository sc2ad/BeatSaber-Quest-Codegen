// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LitJson.JsonMapper
#include "LitJson/JsonMapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: ExporterFunc`1<T>
  template<typename T>
  class ExporterFunc_1;
  // Forward declaring type: JsonWriter
  class JsonWriter;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::LitJson::JsonMapper::$$c__DisplayClass37_0_1, "LitJson", "JsonMapper/<>c__DisplayClass37_0`1");
// Type namespace: LitJson
namespace LitJson {
  // WARNING Size may be invalid!
  // Autogenerated type: LitJson.JsonMapper/LitJson.<>c__DisplayClass37_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T>
  class JsonMapper::$$c__DisplayClass37_0_1 : public ::Il2CppObject {
    public:
    public:
    // public LitJson.ExporterFunc`1<T> exporter
    // Size: 0x8
    // Offset: 0x0
    ::LitJson::ExporterFunc_1<T>* exporter;
    // Field size check
    static_assert(sizeof(::LitJson::ExporterFunc_1<T>*) == 0x8);
    public:
    // Creating conversion operator: operator ::LitJson::ExporterFunc_1<T>*
    constexpr operator ::LitJson::ExporterFunc_1<T>*() const noexcept {
      return exporter;
    }
    // Autogenerated instance field getter
    // Get instance field: public LitJson.ExporterFunc`1<T> exporter
    [[deprecated("Use field access instead!")]] ::LitJson::ExporterFunc_1<T>*& dyn_exporter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c__DisplayClass37_0_1::dyn_exporter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "exporter"))->offset;
      return *reinterpret_cast<::LitJson::ExporterFunc_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonMapper::$$c__DisplayClass37_0_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c__DisplayClass37_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonMapper::$$c__DisplayClass37_0_1<T>*, creationType>()));
    }
    // System.Void <RegisterExporter>b__0(System.Object obj, LitJson.JsonWriter writer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $RegisterExporter$b__0(::Il2CppObject* obj, ::LitJson::JsonWriter* writer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMapper::$$c__DisplayClass37_0_1::<RegisterExporter>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterExporter>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(writer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, writer);
    }
  }; // LitJson.JsonMapper/LitJson.<>c__DisplayClass37_0`1
  // Could not write size check! Type: LitJson.JsonMapper/LitJson.<>c__DisplayClass37_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
