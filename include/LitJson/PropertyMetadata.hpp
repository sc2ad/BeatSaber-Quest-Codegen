// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: PropertyMetadata
  struct PropertyMetadata;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LitJson::PropertyMetadata, "LitJson", "PropertyMetadata");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LitJson.PropertyMetadata
  // [TokenAttribute] Offset: FFFFFFFF
  struct PropertyMetadata/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Reflection.MemberInfo Info
    // Size: 0x8
    // Offset: 0x0
    ::System::Reflection::MemberInfo* Info;
    // Field size check
    static_assert(sizeof(::System::Reflection::MemberInfo*) == 0x8);
    // public System.Boolean IsField
    // Size: 0x1
    // Offset: 0x8
    bool IsField;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsField and: Type
    char __padding1[0x7] = {};
    // public System.Type Type
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating value type constructor for type: PropertyMetadata
    constexpr PropertyMetadata(::System::Reflection::MemberInfo* Info_ = {}, bool IsField_ = {}, ::System::Type* Type_ = {}) noexcept : Info{Info_}, IsField{IsField_}, Type{Type_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Reflection.MemberInfo Info
    [[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& dyn_Info();
    // Get instance field reference: public System.Boolean IsField
    [[deprecated("Use field access instead!")]] bool& dyn_IsField();
    // Get instance field reference: public System.Type Type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_Type();
  }; // LitJson.PropertyMetadata
  #pragma pack(pop)
  static check_size<sizeof(PropertyMetadata), 16 + sizeof(::System::Type*)> __LitJson_PropertyMetadataSizeCheck;
  static_assert(sizeof(PropertyMetadata) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
