// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: Lexer
  class Lexer;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: FsmContext
  class FsmContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::FsmContext);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::FsmContext*, "LitJson", "FsmContext");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.FsmContext
  // [TokenAttribute] Offset: FFFFFFFF
  class FsmContext : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean Return
    // Size: 0x1
    // Offset: 0x10
    bool Return;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Return and: NextState
    char __padding0[0x3] = {};
    // public System.Int32 NextState
    // Size: 0x4
    // Offset: 0x14
    int NextState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public LitJson.Lexer L
    // Size: 0x8
    // Offset: 0x18
    ::LitJson::Lexer* L;
    // Field size check
    static_assert(sizeof(::LitJson::Lexer*) == 0x8);
    // public System.Int32 StateStack
    // Size: 0x4
    // Offset: 0x20
    int StateStack;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Boolean Return
    [[deprecated("Use field access instead!")]] bool& dyn_Return();
    // Get instance field reference: public System.Int32 NextState
    [[deprecated("Use field access instead!")]] int& dyn_NextState();
    // Get instance field reference: public LitJson.Lexer L
    [[deprecated("Use field access instead!")]] ::LitJson::Lexer*& dyn_L();
    // Get instance field reference: public System.Int32 StateStack
    [[deprecated("Use field access instead!")]] int& dyn_StateStack();
    // public System.Void .ctor()
    // Offset: 0xE8C4C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FsmContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::FsmContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FsmContext*, creationType>()));
    }
  }; // LitJson.FsmContext
  #pragma pack(pop)
  static check_size<sizeof(FsmContext), 32 + sizeof(int)> __LitJson_FsmContextSizeCheck;
  static_assert(sizeof(FsmContext) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::FsmContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
