// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LitJson.JsonToken
#include "LitJson/JsonToken.hpp"
// Including type: LitJson.ParserToken
#include "LitJson/ParserToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: Lexer
  class Lexer;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextReader
  class TextReader;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonReader
  class JsonReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonReader);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonReader*, "LitJson", "JsonReader");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonReader
  // [TokenAttribute] Offset: FFFFFFFF
  class JsonReader : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Stack`1<System.Int32> automaton_stack
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Stack_1<int>* automaton_stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    // private System.Int32 current_input
    // Size: 0x4
    // Offset: 0x18
    int current_input;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 current_symbol
    // Size: 0x4
    // Offset: 0x1C
    int current_symbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean end_of_json
    // Size: 0x1
    // Offset: 0x20
    bool end_of_json;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean end_of_input
    // Size: 0x1
    // Offset: 0x21
    bool end_of_input;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: end_of_input and: lexer
    char __padding4[0x6] = {};
    // private LitJson.Lexer lexer
    // Size: 0x8
    // Offset: 0x28
    ::LitJson::Lexer* lexer;
    // Field size check
    static_assert(sizeof(::LitJson::Lexer*) == 0x8);
    // private System.Boolean parser_in_string
    // Size: 0x1
    // Offset: 0x30
    bool parser_in_string;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean parser_return
    // Size: 0x1
    // Offset: 0x31
    bool parser_return;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean read_started
    // Size: 0x1
    // Offset: 0x32
    bool read_started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: read_started and: reader
    char __padding8[0x5] = {};
    // private System.IO.TextReader reader
    // Size: 0x8
    // Offset: 0x38
    ::System::IO::TextReader* reader;
    // Field size check
    static_assert(sizeof(::System::IO::TextReader*) == 0x8);
    // private System.Boolean reader_is_owned
    // Size: 0x1
    // Offset: 0x40
    bool reader_is_owned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reader_is_owned and: token_value
    char __padding10[0x7] = {};
    // private System.Object token_value
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* token_value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private LitJson.JsonToken token
    // Size: 0x4
    // Offset: 0x50
    ::LitJson::JsonToken token;
    // Field size check
    static_assert(sizeof(::LitJson::JsonToken) == 0x4);
    public:
    // Get static field: static private System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parse_table
    static ::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* _get_parse_table();
    // Set static field: static private System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parse_table
    static void _set_parse_table(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* value);
    // Get instance field reference: private System.Collections.Generic.Stack`1<System.Int32> automaton_stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_automaton_stack();
    // Get instance field reference: private System.Int32 current_input
    [[deprecated("Use field access instead!")]] int& dyn_current_input();
    // Get instance field reference: private System.Int32 current_symbol
    [[deprecated("Use field access instead!")]] int& dyn_current_symbol();
    // Get instance field reference: private System.Boolean end_of_json
    [[deprecated("Use field access instead!")]] bool& dyn_end_of_json();
    // Get instance field reference: private System.Boolean end_of_input
    [[deprecated("Use field access instead!")]] bool& dyn_end_of_input();
    // Get instance field reference: private LitJson.Lexer lexer
    [[deprecated("Use field access instead!")]] ::LitJson::Lexer*& dyn_lexer();
    // Get instance field reference: private System.Boolean parser_in_string
    [[deprecated("Use field access instead!")]] bool& dyn_parser_in_string();
    // Get instance field reference: private System.Boolean parser_return
    [[deprecated("Use field access instead!")]] bool& dyn_parser_return();
    // Get instance field reference: private System.Boolean read_started
    [[deprecated("Use field access instead!")]] bool& dyn_read_started();
    // Get instance field reference: private System.IO.TextReader reader
    [[deprecated("Use field access instead!")]] ::System::IO::TextReader*& dyn_reader();
    // Get instance field reference: private System.Boolean reader_is_owned
    [[deprecated("Use field access instead!")]] bool& dyn_reader_is_owned();
    // Get instance field reference: private System.Object token_value
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_token_value();
    // Get instance field reference: private LitJson.JsonToken token
    [[deprecated("Use field access instead!")]] ::LitJson::JsonToken& dyn_token();
    // public System.Boolean get_AllowComments()
    // Offset: 0xE9AB38
    bool get_AllowComments();
    // public System.Void set_AllowComments(System.Boolean value)
    // Offset: 0xE9AB54
    void set_AllowComments(bool value);
    // public System.Boolean get_AllowSingleQuotedStrings()
    // Offset: 0xE9AB74
    bool get_AllowSingleQuotedStrings();
    // public System.Void set_AllowSingleQuotedStrings(System.Boolean value)
    // Offset: 0xE9AB90
    void set_AllowSingleQuotedStrings(bool value);
    // public System.Boolean get_EndOfInput()
    // Offset: 0xE9ABB0
    bool get_EndOfInput();
    // public System.Boolean get_EndOfJson()
    // Offset: 0xE9ABB8
    bool get_EndOfJson();
    // public LitJson.JsonToken get_Token()
    // Offset: 0xE9ABC0
    ::LitJson::JsonToken get_Token();
    // public System.Object get_Value()
    // Offset: 0xE9ABC8
    ::Il2CppObject* get_Value();
    // static private System.Void .cctor()
    // Offset: 0xE9ABD0
    static void _cctor();
    // public System.Void .ctor(System.String json_text)
    // Offset: 0xE995AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::StringW json_text) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(json_text)));
    }
    // public System.Void .ctor(System.IO.TextReader reader)
    // Offset: 0xE993DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::System::IO::TextReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(reader)));
    }
    // private System.Void .ctor(System.IO.TextReader reader, System.Boolean owned)
    // Offset: 0xE9B248
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::System::IO::TextReader* reader, bool owned) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(reader, owned)));
    }
    // static private System.Void PopulateParseTable()
    // Offset: 0xE9ABD4
    static void PopulateParseTable();
    // static private System.Void TableAddCol(LitJson.ParserToken row, System.Int32 col, params System.Int32[] symbols)
    // Offset: 0xE9B560
    static void TableAddCol(::LitJson::ParserToken row, int col, ::ArrayW<int> symbols);
    // static private System.Void TableAddRow(LitJson.ParserToken rule)
    // Offset: 0xE9B450
    static void TableAddRow(::LitJson::ParserToken rule);
    // private System.Void ProcessNumber(System.String number)
    // Offset: 0xE9B6C8
    void ProcessNumber(::StringW number);
    // private System.Void ProcessSymbol()
    // Offset: 0xE9B848
    void ProcessSymbol();
    // private System.Boolean ReadToken()
    // Offset: 0xE9B9E8
    bool ReadToken();
    // public System.Void Close()
    // Offset: 0xE9BC1C
    void Close();
    // public System.Boolean Read()
    // Offset: 0xE96840
    bool Read();
  }; // LitJson.JsonReader
  #pragma pack(pop)
  static check_size<sizeof(JsonReader), 80 + sizeof(::LitJson::JsonToken)> __LitJson_JsonReaderSizeCheck;
  static_assert(sizeof(JsonReader) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonReader::get_AllowComments
// Il2CppName: get_AllowComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_AllowComments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_AllowComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_AllowComments
// Il2CppName: set_AllowComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_AllowComments)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_AllowComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_AllowSingleQuotedStrings
// Il2CppName: get_AllowSingleQuotedStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_AllowSingleQuotedStrings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_AllowSingleQuotedStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_AllowSingleQuotedStrings
// Il2CppName: set_AllowSingleQuotedStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_AllowSingleQuotedStrings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_AllowSingleQuotedStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_EndOfInput
// Il2CppName: get_EndOfInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_EndOfInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_EndOfInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_EndOfJson
// Il2CppName: get_EndOfJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_EndOfJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_EndOfJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_Token
// Il2CppName: get_Token
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LitJson::JsonToken (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_Token)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_Token", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LitJson::JsonReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::PopulateParseTable
// Il2CppName: PopulateParseTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LitJson::JsonReader::PopulateParseTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "PopulateParseTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::TableAddCol
// Il2CppName: TableAddCol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LitJson::ParserToken, int, ::ArrayW<int>)>(&LitJson::JsonReader::TableAddCol)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("LitJson", "ParserToken")->byval_arg;
    static auto* col = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* symbols = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "TableAddCol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, col, symbols});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::TableAddRow
// Il2CppName: TableAddRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LitJson::ParserToken)>(&LitJson::JsonReader::TableAddRow)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("LitJson", "ParserToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "TableAddRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ProcessNumber
// Il2CppName: ProcessNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::StringW)>(&LitJson::JsonReader::ProcessNumber)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ProcessNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ProcessSymbol
// Il2CppName: ProcessSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)()>(&LitJson::JsonReader::ProcessSymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ProcessSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ReadToken
// Il2CppName: ReadToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::ReadToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ReadToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)()>(&LitJson::JsonReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
