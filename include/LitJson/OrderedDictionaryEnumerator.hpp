// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonData
  class JsonData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: DictionaryEntry
  struct DictionaryEntry;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: OrderedDictionaryEnumerator
  class OrderedDictionaryEnumerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::OrderedDictionaryEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::OrderedDictionaryEnumerator*, "LitJson", "OrderedDictionaryEnumerator");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.OrderedDictionaryEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class OrderedDictionaryEnumerator : public ::Il2CppObject/*, public ::System::Collections::IDictionaryEnumerator*/ {
    public:
    public:
    // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,LitJson.JsonData>> list_enumerator
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>* list_enumerator;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IDictionaryEnumerator
    operator ::System::Collections::IDictionaryEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IDictionaryEnumerator*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*
    constexpr operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*() const noexcept {
      return list_enumerator;
    }
    // Get instance field reference: private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,LitJson.JsonData>> list_enumerator
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*& dyn_list_enumerator();
    // public System.Object get_Current()
    // Offset: 0xE9E7CC
    ::Il2CppObject* get_Current();
    // public System.Collections.DictionaryEntry get_Entry()
    // Offset: 0xE9E838
    ::System::Collections::DictionaryEntry get_Entry();
    // public System.Object get_Key()
    // Offset: 0xE9E918
    ::Il2CppObject* get_Key();
    // public System.Object get_Value()
    // Offset: 0xE9E9C8
    ::Il2CppObject* get_Value();
    // public System.Void .ctor(System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,LitJson.JsonData>> enumerator)
    // Offset: 0xE90230
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrderedDictionaryEnumerator* New_ctor(::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>* enumerator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::OrderedDictionaryEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrderedDictionaryEnumerator*, creationType>(enumerator)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0xE9EA80
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xE9EB30
    void Reset();
  }; // LitJson.OrderedDictionaryEnumerator
  #pragma pack(pop)
  static check_size<sizeof(OrderedDictionaryEnumerator), 16 + sizeof(::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::LitJson::JsonData*>>*)> __LitJson_OrderedDictionaryEnumeratorSizeCheck;
  static_assert(sizeof(OrderedDictionaryEnumerator) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::get_Entry
// Il2CppName: get_Entry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::DictionaryEntry (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::get_Entry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "get_Entry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::OrderedDictionaryEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::OrderedDictionaryEnumerator::*)()>(&LitJson::OrderedDictionaryEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::OrderedDictionaryEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
