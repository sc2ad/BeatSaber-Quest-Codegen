// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: Zenject.SignalSubscription
#include "Zenject/SignalSubscription.hpp"
// Including type: Zenject.SignalSubscriptionId
#include "Zenject/SignalSubscriptionId.hpp"
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: SignalBus
  class SignalBus;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::SignalBus);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::SignalBus*, "Zenject", "SignalBus");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.SignalBus
  // [TokenAttribute] Offset: FFFFFFFF
  class SignalBus : public ::Il2CppObject/*, public ::Zenject::ILateDisposable*/ {
    public:
    // Nested type: ::Zenject::SignalBus::$$c
    class $$c;
    // Nested type: ::Zenject::SignalBus::$$c__DisplayClass25_0_1<TSignal>
    template<typename TSignal>
    class $$c__DisplayClass25_0_1;
    // Nested type: ::Zenject::SignalBus::$$c__DisplayClass27_0_1<TSignal>
    template<typename TSignal>
    class $$c__DisplayClass27_0_1;
    public:
    // private readonly Zenject.SignalSubscription/Zenject.Pool _subscriptionPool
    // Size: 0x8
    // Offset: 0x10
    ::Zenject::SignalSubscription::Pool* subscriptionPool;
    // Field size check
    static_assert(sizeof(::Zenject::SignalSubscription::Pool*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<Zenject.BindingId,Zenject.SignalDeclaration> _localDeclarationMap
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::Zenject::BindingId, ::Zenject::SignalDeclaration*>* localDeclarationMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Zenject::BindingId, ::Zenject::SignalDeclaration*>*) == 0x8);
    // private readonly Zenject.SignalBus _parentBus
    // Size: 0x8
    // Offset: 0x20
    ::Zenject::SignalBus* parentBus;
    // Field size check
    static_assert(sizeof(::Zenject::SignalBus*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<Zenject.SignalSubscriptionId,Zenject.SignalSubscription> _subscriptionMap
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::Zenject::SignalSubscriptionId, ::Zenject::SignalSubscription*>* subscriptionMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Zenject::SignalSubscriptionId, ::Zenject::SignalSubscription*>*) == 0x8);
    // private readonly Zenject.ZenjectSettings/Zenject.SignalSettings _settings
    // Size: 0x8
    // Offset: 0x30
    ::Zenject::ZenjectSettings::SignalSettings* settings;
    // Field size check
    static_assert(sizeof(::Zenject::ZenjectSettings::SignalSettings*) == 0x8);
    // private readonly Zenject.SignalDeclaration/Zenject.Factory _signalDeclarationFactory
    // Size: 0x8
    // Offset: 0x38
    ::Zenject::SignalDeclaration::Factory* signalDeclarationFactory;
    // Field size check
    static_assert(sizeof(::Zenject::SignalDeclaration::Factory*) == 0x8);
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x40
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Zenject::ILateDisposable
    operator ::Zenject::ILateDisposable() noexcept {
      return *reinterpret_cast<::Zenject::ILateDisposable*>(this);
    }
    // Creating interface conversion operator: i_ILateDisposable
    inline ::Zenject::ILateDisposable* i_ILateDisposable() noexcept {
      return reinterpret_cast<::Zenject::ILateDisposable*>(this);
    }
    // Get instance field reference: private readonly Zenject.SignalSubscription/Zenject.Pool _subscriptionPool
    [[deprecated("Use field access instead!")]] ::Zenject::SignalSubscription::Pool*& dyn__subscriptionPool();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Zenject.BindingId,Zenject.SignalDeclaration> _localDeclarationMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Zenject::BindingId, ::Zenject::SignalDeclaration*>*& dyn__localDeclarationMap();
    // Get instance field reference: private readonly Zenject.SignalBus _parentBus
    [[deprecated("Use field access instead!")]] ::Zenject::SignalBus*& dyn__parentBus();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Zenject.SignalSubscriptionId,Zenject.SignalSubscription> _subscriptionMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Zenject::SignalSubscriptionId, ::Zenject::SignalSubscription*>*& dyn__subscriptionMap();
    // Get instance field reference: private readonly Zenject.ZenjectSettings/Zenject.SignalSettings _settings
    [[deprecated("Use field access instead!")]] ::Zenject::ZenjectSettings::SignalSettings*& dyn__settings();
    // Get instance field reference: private readonly Zenject.SignalDeclaration/Zenject.Factory _signalDeclarationFactory
    [[deprecated("Use field access instead!")]] ::Zenject::SignalDeclaration::Factory*& dyn__signalDeclarationFactory();
    // Get instance field reference: private readonly Zenject.DiContainer _container
    [[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& dyn__container();
    // public Zenject.SignalBus get_ParentBus()
    // Offset: 0x1DD0CC8
    ::Zenject::SignalBus* get_ParentBus();
    // public System.Int32 get_NumSubscribers()
    // Offset: 0x1DD0CD0
    int get_NumSubscribers();
    // public System.Void .ctor(System.Collections.Generic.List`1<Zenject.SignalDeclaration> signalDeclarations, Zenject.SignalBus parentBus, Zenject.ZenjectSettings zenjectSettings, Zenject.SignalSubscription/Zenject.Pool subscriptionPool, Zenject.SignalDeclaration/Zenject.Factory signalDeclarationFactory, Zenject.DiContainer container)
    // Offset: 0x1DD0A78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignalBus* New_ctor(::System::Collections::Generic::List_1<::Zenject::SignalDeclaration*>* signalDeclarations, ::Zenject::SignalBus* parentBus, ::Zenject::ZenjectSettings* zenjectSettings, ::Zenject::SignalSubscription::Pool* subscriptionPool, ::Zenject::SignalDeclaration::Factory* signalDeclarationFactory, ::Zenject::DiContainer* container) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignalBus*, creationType>(signalDeclarations, parentBus, zenjectSettings, subscriptionPool, signalDeclarationFactory, container)));
    }
    // public System.Void LateDispose()
    // Offset: 0x1DD0D28
    void LateDispose();
    // public System.Void FireId(System.Object identifier, TSignal signal)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void FireId(::Il2CppObject* identifier, TSignal signal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::FireId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(signal)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, signal);
    }
    // public System.Void Fire(TSignal signal)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Fire(TSignal signal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Fire");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, signal);
    }
    // public System.Void FireId(System.Object identifier)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void FireId(::Il2CppObject* identifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::FireId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier);
    }
    // public System.Void Fire()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Fire() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Fire");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // public System.Void FireId(System.Object identifier, System.Object signal)
    // Offset: 0x1DD1234
    void FireId(::Il2CppObject* identifier, ::Il2CppObject* signal);
    // public System.Void Fire(System.Object signal)
    // Offset: 0x1DD14D4
    void Fire(::Il2CppObject* signal);
    // public System.Void TryFireId(System.Object identifier, TSignal signal)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryFireId(::Il2CppObject* identifier, TSignal signal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFireId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFireId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(signal)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, signal);
    }
    // public System.Void TryFire(TSignal signal)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryFire(TSignal signal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFire");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFire", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, signal);
    }
    // public System.Void TryFireId(System.Object identifier)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryFireId(::Il2CppObject* identifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFireId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFireId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier);
    }
    // public System.Void TryFire()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryFire() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFire");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFire", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // public System.Void TryFireId(System.Object identifier, System.Object signal)
    // Offset: 0x1DD14E0
    void TryFireId(::Il2CppObject* identifier, ::Il2CppObject* signal);
    // public System.Void TryFire(System.Object signal)
    // Offset: 0x1DD154C
    void TryFire(::Il2CppObject* signal);
    // public System.Void SubscribeId(System.Object identifier, System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void SubscribeId(::Il2CppObject* identifier, ::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void Subscribe(System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Subscribe(::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Subscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // public System.Void SubscribeId(System.Object identifier, System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void SubscribeId(::Il2CppObject* identifier, ::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void Subscribe(System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Subscribe(::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Subscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // public System.Void SubscribeId(System.Type signalType, System.Object identifier, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1558
    void SubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void Subscribe(System.Type signalType, System.Action`1<System.Object> callback)
    // Offset: 0x1DD15C0
    void Subscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void UnsubscribeId(System.Object identifier, System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void UnsubscribeId(::Il2CppObject* identifier, ::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void Unsubscribe(System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Unsubscribe(::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Unsubscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // public System.Void UnsubscribeId(System.Type signalType, System.Object identifier, System.Action callback)
    // Offset: 0x1DD15D0
    void UnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action* callback);
    // public System.Void Unsubscribe(System.Type signalType, System.Action callback)
    // Offset: 0x1DD1638
    void Unsubscribe(::System::Type* signalType, ::System::Action* callback);
    // public System.Void UnsubscribeId(System.Type signalType, System.Object identifier, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1648
    void UnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void Unsubscribe(System.Type signalType, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1650
    void Unsubscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void UnsubscribeId(System.Object identifier, System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void UnsubscribeId(::Il2CppObject* identifier, ::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void Unsubscribe(System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void Unsubscribe(::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Unsubscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // public System.Void TryUnsubscribeId(System.Object identifier, System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryUnsubscribeId(::Il2CppObject* identifier, ::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void TryUnsubscribe(System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryUnsubscribe(::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // public System.Void TryUnsubscribeId(System.Type signalType, System.Object identifier, System.Action callback)
    // Offset: 0x1DD1660
    void TryUnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action* callback);
    // public System.Void TryUnsubscribe(System.Type signalType, System.Action callback)
    // Offset: 0x1DD1668
    void TryUnsubscribe(::System::Type* signalType, ::System::Action* callback);
    // public System.Void TryUnsubscribeId(System.Type signalType, System.Object identifier, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1678
    void TryUnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void TryUnsubscribe(System.Type signalType, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1680
    void TryUnsubscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void TryUnsubscribeId(System.Object identifier, System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryUnsubscribeId(::Il2CppObject* identifier, ::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribeId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribeId", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, callback);
    }
    // public System.Void TryUnsubscribe(System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSignal>
    void TryUnsubscribe(::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSignal>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, callback);
    }
    // private System.Void UnsubscribeInternal(System.Type signalType, System.Object identifier, System.Object token, System.Boolean throwIfMissing)
    // Offset: 0x1DD15D8
    void UnsubscribeInternal(::System::Type* signalType, ::Il2CppObject* identifier, ::Il2CppObject* token, bool throwIfMissing);
    // private System.Void UnsubscribeInternal(Zenject.BindingId signalId, System.Object token, System.Boolean throwIfMissing)
    // Offset: 0x1DD1690
    void UnsubscribeInternal(::Zenject::BindingId signalId, ::Il2CppObject* token, bool throwIfMissing);
    // private System.Void UnsubscribeInternal(Zenject.SignalSubscriptionId id, System.Boolean throwIfMissing)
    // Offset: 0x1DD16C8
    void UnsubscribeInternal(::Zenject::SignalSubscriptionId id, bool throwIfMissing);
    // private System.Void SubscribeInternal(System.Type signalType, System.Object identifier, System.Object token, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1560
    void SubscribeInternal(::System::Type* signalType, ::Il2CppObject* identifier, ::Il2CppObject* token, ::System::Action_1<::Il2CppObject*>* callback);
    // private System.Void SubscribeInternal(Zenject.BindingId signalId, System.Object token, System.Action`1<System.Object> callback)
    // Offset: 0x1DD17D4
    void SubscribeInternal(::Zenject::BindingId signalId, ::Il2CppObject* token, ::System::Action_1<::Il2CppObject*>* callback);
    // private System.Void SubscribeInternal(Zenject.SignalSubscriptionId id, System.Action`1<System.Object> callback)
    // Offset: 0x1DD1800
    void SubscribeInternal(::Zenject::SignalSubscriptionId id, ::System::Action_1<::Il2CppObject*>* callback);
    // public System.Void DeclareSignal(System.Object identifier, System.Nullable`1<Zenject.SignalMissingHandlerResponses> missingHandlerResponse, System.Nullable`1<System.Boolean> forceAsync, System.Nullable`1<System.Int32> asyncTickPriority)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void DeclareSignal(::Il2CppObject* identifier, ::System::Nullable_1<::Zenject::SignalMissingHandlerResponses> missingHandlerResponse, ::System::Nullable_1<bool> forceAsync, ::System::Nullable_1<int> asyncTickPriority) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::DeclareSignal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeclareSignal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(missingHandlerResponse), ::il2cpp_utils::ExtractType(forceAsync), ::il2cpp_utils::ExtractType(asyncTickPriority)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, identifier, missingHandlerResponse, forceAsync, asyncTickPriority);
    }
    // public System.Void DeclareSignal(System.Type signalType, System.Object identifier, System.Nullable`1<Zenject.SignalMissingHandlerResponses> missingHandlerResponse, System.Nullable`1<System.Boolean> forceAsync, System.Nullable`1<System.Int32> asyncTickPriority)
    // Offset: 0x1DD1A68
    void DeclareSignal(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Nullable_1<::Zenject::SignalMissingHandlerResponses> missingHandlerResponse, ::System::Nullable_1<bool> forceAsync, ::System::Nullable_1<int> asyncTickPriority);
    // private Zenject.SignalDeclaration GetDeclaration(System.Type signalType, System.Object identifier, System.Boolean requireDeclaration)
    // Offset: 0x1DD1290
    ::Zenject::SignalDeclaration* GetDeclaration(::System::Type* signalType, ::Il2CppObject* identifier, bool requireDeclaration);
    // private Zenject.SignalDeclaration GetDeclaration(Zenject.BindingId signalId, System.Boolean requireDeclaration)
    // Offset: 0x1DD1928
    ::Zenject::SignalDeclaration* GetDeclaration(::Zenject::BindingId signalId, bool requireDeclaration);
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0x1DD1C8C
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1DD1EE4
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.SignalBus
  #pragma pack(pop)
  static check_size<sizeof(SignalBus), 64 + sizeof(::Zenject::DiContainer*)> __Zenject_SignalBusSizeCheck;
  static_assert(sizeof(SignalBus) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::SignalBus::get_ParentBus
// Il2CppName: get_ParentBus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::SignalBus* (Zenject::SignalBus::*)()>(&Zenject::SignalBus::get_ParentBus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "get_ParentBus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::get_NumSubscribers
// Il2CppName: get_NumSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Zenject::SignalBus::*)()>(&Zenject::SignalBus::get_NumSubscribers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "get_NumSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::SignalBus::LateDispose
// Il2CppName: LateDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)()>(&Zenject::SignalBus::LateDispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "LateDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::FireId
// Il2CppName: FireId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Fire
// Il2CppName: Fire
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::FireId
// Il2CppName: FireId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Fire
// Il2CppName: Fire
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::FireId
// Il2CppName: FireId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Il2CppObject*, ::Il2CppObject*)>(&Zenject::SignalBus::FireId)> {
  static const MethodInfo* get() {
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* signal = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "FireId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{identifier, signal});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::Fire
// Il2CppName: Fire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Il2CppObject*)>(&Zenject::SignalBus::Fire)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "Fire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryFireId
// Il2CppName: TryFireId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryFire
// Il2CppName: TryFire
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryFireId
// Il2CppName: TryFireId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryFire
// Il2CppName: TryFire
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryFireId
// Il2CppName: TryFireId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Il2CppObject*, ::Il2CppObject*)>(&Zenject::SignalBus::TryFireId)> {
  static const MethodInfo* get() {
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* signal = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryFireId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{identifier, signal});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryFire
// Il2CppName: TryFire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Il2CppObject*)>(&Zenject::SignalBus::TryFire)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryFire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeId
// Il2CppName: SubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Subscribe
// Il2CppName: Subscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeId
// Il2CppName: SubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Subscribe
// Il2CppName: Subscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeId
// Il2CppName: SubscribeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::SubscribeId)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "SubscribeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::Subscribe)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeId
// Il2CppName: UnsubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Unsubscribe
// Il2CppName: Unsubscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeId
// Il2CppName: UnsubscribeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Action*)>(&Zenject::SignalBus::UnsubscribeId)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "UnsubscribeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::Unsubscribe
// Il2CppName: Unsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::System::Action*)>(&Zenject::SignalBus::Unsubscribe)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "Unsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeId
// Il2CppName: UnsubscribeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::UnsubscribeId)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "UnsubscribeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::Unsubscribe
// Il2CppName: Unsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::Unsubscribe)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "Unsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeId
// Il2CppName: UnsubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::Unsubscribe
// Il2CppName: Unsubscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribeId
// Il2CppName: TryUnsubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribe
// Il2CppName: TryUnsubscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribeId
// Il2CppName: TryUnsubscribeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Action*)>(&Zenject::SignalBus::TryUnsubscribeId)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryUnsubscribeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribe
// Il2CppName: TryUnsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::System::Action*)>(&Zenject::SignalBus::TryUnsubscribe)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryUnsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribeId
// Il2CppName: TryUnsubscribeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::TryUnsubscribeId)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryUnsubscribeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribe
// Il2CppName: TryUnsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::TryUnsubscribe)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "TryUnsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribeId
// Il2CppName: TryUnsubscribeId
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::TryUnsubscribe
// Il2CppName: TryUnsubscribe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeInternal
// Il2CppName: UnsubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::Il2CppObject*, bool)>(&Zenject::SignalBus::UnsubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* throwIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "UnsubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, token, throwIfMissing});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeInternal
// Il2CppName: UnsubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Zenject::BindingId, ::Il2CppObject*, bool)>(&Zenject::SignalBus::UnsubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* signalId = &::il2cpp_utils::GetClassFromName("Zenject", "BindingId")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* throwIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "UnsubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalId, token, throwIfMissing});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::UnsubscribeInternal
// Il2CppName: UnsubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Zenject::SignalSubscriptionId, bool)>(&Zenject::SignalBus::UnsubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Zenject", "SignalSubscriptionId")->byval_arg;
    static auto* throwIfMissing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "UnsubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, throwIfMissing});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeInternal
// Il2CppName: SubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::SubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "SubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, token, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeInternal
// Il2CppName: SubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Zenject::BindingId, ::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::SubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* signalId = &::il2cpp_utils::GetClassFromName("Zenject", "BindingId")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "SubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalId, token, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::SubscribeInternal
// Il2CppName: SubscribeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::Zenject::SignalSubscriptionId, ::System::Action_1<::Il2CppObject*>*)>(&Zenject::SignalBus::SubscribeInternal)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Zenject", "SignalSubscriptionId")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "SubscribeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, callback});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::DeclareSignal
// Il2CppName: DeclareSignal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Zenject::SignalBus::DeclareSignal
// Il2CppName: DeclareSignal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, ::System::Nullable_1<::Zenject::SignalMissingHandlerResponses>, ::System::Nullable_1<bool>, ::System::Nullable_1<int>)>(&Zenject::SignalBus::DeclareSignal)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* missingHandlerResponse = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "SignalMissingHandlerResponses")})->byval_arg;
    static auto* forceAsync = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* asyncTickPriority = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "DeclareSignal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, missingHandlerResponse, forceAsync, asyncTickPriority});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::GetDeclaration
// Il2CppName: GetDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::SignalDeclaration* (Zenject::SignalBus::*)(::System::Type*, ::Il2CppObject*, bool)>(&Zenject::SignalBus::GetDeclaration)> {
  static const MethodInfo* get() {
    static auto* signalType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* identifier = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* requireDeclaration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "GetDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalType, identifier, requireDeclaration});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::GetDeclaration
// Il2CppName: GetDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::SignalDeclaration* (Zenject::SignalBus::*)(::Zenject::BindingId, bool)>(&Zenject::SignalBus::GetDeclaration)> {
  static const MethodInfo* get() {
    static auto* signalId = &::il2cpp_utils::GetClassFromName("Zenject", "BindingId")->byval_arg;
    static auto* requireDeclaration = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "GetDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signalId, requireDeclaration});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::__zenCreate
// Il2CppName: __zenCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<::Il2CppObject*>)>(&Zenject::SignalBus::__zenCreate)> {
  static const MethodInfo* get() {
    static auto* P_0 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "__zenCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBus::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::SignalBus::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBus*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
