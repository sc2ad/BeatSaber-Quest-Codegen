// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.MonoKernel
#include "Zenject/MonoKernel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectSettings
  class ZenjectSettings;
  // Forward declaring type: SceneContextRegistry
  class SceneContextRegistry;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: ProjectKernel
  class ProjectKernel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::ProjectKernel);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::ProjectKernel*, "Zenject", "ProjectKernel");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ProjectKernel
  // [TokenAttribute] Offset: FFFFFFFF
  class ProjectKernel : public ::Zenject::MonoKernel {
    public:
    // Writing base type padding for base size: 0x32 to desired offset: 0x38
    char ___base_padding[0x6] = {};
    // Nested type: ::Zenject::ProjectKernel::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    public:
    // [InjectAttribute] Offset: 0x10EF508
    // private Zenject.ZenjectSettings _settings
    // Size: 0x8
    // Offset: 0x38
    ::Zenject::ZenjectSettings* settings;
    // Field size check
    static_assert(sizeof(::Zenject::ZenjectSettings*) == 0x8);
    // [InjectAttribute] Offset: 0x10EF518
    // private Zenject.SceneContextRegistry _contextRegistry
    // Size: 0x8
    // Offset: 0x40
    ::Zenject::SceneContextRegistry* contextRegistry;
    // Field size check
    static_assert(sizeof(::Zenject::SceneContextRegistry*) == 0x8);
    public:
    // Get instance field reference: private Zenject.ZenjectSettings _settings
    [[deprecated("Use field access instead!")]] ::Zenject::ZenjectSettings*& dyn__settings();
    // Get instance field reference: private Zenject.SceneContextRegistry _contextRegistry
    [[deprecated("Use field access instead!")]] ::Zenject::SceneContextRegistry*& dyn__contextRegistry();
    // public System.Void OnApplicationQuit()
    // Offset: 0x1CAC7D0
    void OnApplicationQuit();
    // public System.Void DestroyEverythingInOrder()
    // Offset: 0x1CAC7F4
    void DestroyEverythingInOrder();
    // public System.Void ForceUnloadAllScenes(System.Boolean immediate)
    // Offset: 0x1CAC89C
    void ForceUnloadAllScenes(bool immediate);
    // public System.Void .ctor()
    // Offset: 0x1CACBD8
    // Implemented from: Zenject.MonoKernel
    // Base method: System.Void MonoKernel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProjectKernel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProjectKernel*, creationType>()));
    }
    // static private System.Void __zenFieldSetter0(System.Object P_0, System.Object P_1)
    // Offset: 0x1CACBE0
    // Implemented from: Zenject.MonoKernel
    // Base method: System.Void MonoKernel::__zenFieldSetter0(System.Object P_0, System.Object P_1)
    static void __zenFieldSetter0(::Il2CppObject* P_0, ::Il2CppObject* P_1);
    // static private System.Void __zenFieldSetter1(System.Object P_0, System.Object P_1)
    // Offset: 0x1CACCB4
    // Implemented from: Zenject.MonoKernel
    // Base method: System.Void MonoKernel::__zenFieldSetter1(System.Object P_0, System.Object P_1)
    static void __zenFieldSetter1(::Il2CppObject* P_0, ::Il2CppObject* P_1);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1CACD88
    // Implemented from: Zenject.MonoKernel
    // Base method: Zenject.InjectTypeInfo MonoKernel::__zenCreateInjectTypeInfo()
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.ProjectKernel
  #pragma pack(pop)
  static check_size<sizeof(ProjectKernel), 64 + sizeof(::Zenject::SceneContextRegistry*)> __Zenject_ProjectKernelSizeCheck;
  static_assert(sizeof(ProjectKernel) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::ProjectKernel::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::DestroyEverythingInOrder
// Il2CppName: DestroyEverythingInOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::DestroyEverythingInOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "DestroyEverythingInOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::ForceUnloadAllScenes
// Il2CppName: ForceUnloadAllScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)(bool)>(&Zenject::ProjectKernel::ForceUnloadAllScenes)> {
  static const MethodInfo* get() {
    static auto* immediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "ForceUnloadAllScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{immediate});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::ProjectKernel::__zenFieldSetter0
// Il2CppName: __zenFieldSetter0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&Zenject::ProjectKernel::__zenFieldSetter0)> {
  static const MethodInfo* get() {
    static auto* P_0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* P_1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "__zenFieldSetter0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0, P_1});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::__zenFieldSetter1
// Il2CppName: __zenFieldSetter1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&Zenject::ProjectKernel::__zenFieldSetter1)> {
  static const MethodInfo* get() {
    static auto* P_0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* P_1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "__zenFieldSetter1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0, P_1});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::ProjectKernel::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
