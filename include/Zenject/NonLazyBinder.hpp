// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.IfNotBoundBinder
#include "Zenject/IfNotBoundBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: BindInfo
  class BindInfo;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: NonLazyBinder
  class NonLazyBinder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::NonLazyBinder);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::NonLazyBinder*, "Zenject", "NonLazyBinder");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.NonLazyBinder
  // [TokenAttribute] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: FFFFFFFF
  class NonLazyBinder : public ::Zenject::IfNotBoundBinder {
    public:
    // public Zenject.IfNotBoundBinder NonLazy()
    // Offset: 0x1C17DD8
    ::Zenject::IfNotBoundBinder* NonLazy();
    // public Zenject.IfNotBoundBinder Lazy()
    // Offset: 0x1C17DF8
    ::Zenject::IfNotBoundBinder* Lazy();
    // public System.Void .ctor(Zenject.BindInfo bindInfo)
    // Offset: 0x1C17DD0
    // Implemented from: Zenject.IfNotBoundBinder
    // Base method: System.Void IfNotBoundBinder::.ctor(Zenject.BindInfo bindInfo)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NonLazyBinder* New_ctor(::Zenject::BindInfo* bindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::NonLazyBinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NonLazyBinder*, creationType>(bindInfo)));
    }
  }; // Zenject.NonLazyBinder
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::NonLazyBinder::NonLazy
// Il2CppName: NonLazy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::IfNotBoundBinder* (Zenject::NonLazyBinder::*)()>(&Zenject::NonLazyBinder::NonLazy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::NonLazyBinder*), "NonLazy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::NonLazyBinder::Lazy
// Il2CppName: Lazy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::IfNotBoundBinder* (Zenject::NonLazyBinder::*)()>(&Zenject::NonLazyBinder::Lazy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::NonLazyBinder*), "Lazy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::NonLazyBinder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
