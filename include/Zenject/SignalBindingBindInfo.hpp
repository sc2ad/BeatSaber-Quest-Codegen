// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: SignalBindingBindInfo
  class SignalBindingBindInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::SignalBindingBindInfo);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::SignalBindingBindInfo*, "Zenject", "SignalBindingBindInfo");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.SignalBindingBindInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: FFFFFFFF
  class SignalBindingBindInfo : public ::Il2CppObject {
    public:
    public:
    // private System.Object <Identifier>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* Identifier;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Type <SignalType>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* SignalType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private System.Object <Identifier>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Identifier$k__BackingField();
    // Get instance field reference: private System.Type <SignalType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$SignalType$k__BackingField();
    // public System.Object get_Identifier()
    // Offset: 0x1DD0A58
    ::Il2CppObject* get_Identifier();
    // public System.Void set_Identifier(System.Object value)
    // Offset: 0x1DD0A60
    void set_Identifier(::Il2CppObject* value);
    // public System.Type get_SignalType()
    // Offset: 0x1DD0A68
    ::System::Type* get_SignalType();
    // private System.Void set_SignalType(System.Type value)
    // Offset: 0x1DD0A70
    void set_SignalType(::System::Type* value);
    // public System.Void .ctor(System.Type signalType)
    // Offset: 0x1DD0A2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignalBindingBindInfo* New_ctor(::System::Type* signalType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignalBindingBindInfo*, creationType>(signalType)));
    }
  }; // Zenject.SignalBindingBindInfo
  #pragma pack(pop)
  static check_size<sizeof(SignalBindingBindInfo), 24 + sizeof(::System::Type*)> __Zenject_SignalBindingBindInfoSizeCheck;
  static_assert(sizeof(SignalBindingBindInfo) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::SignalBindingBindInfo::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Zenject::SignalBindingBindInfo::*)()>(&Zenject::SignalBindingBindInfo::get_Identifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBindingBindInfo*), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBindingBindInfo::set_Identifier
// Il2CppName: set_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBindingBindInfo::*)(::Il2CppObject*)>(&Zenject::SignalBindingBindInfo::set_Identifier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBindingBindInfo*), "set_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBindingBindInfo::get_SignalType
// Il2CppName: get_SignalType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Zenject::SignalBindingBindInfo::*)()>(&Zenject::SignalBindingBindInfo::get_SignalType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBindingBindInfo*), "get_SignalType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBindingBindInfo::set_SignalType
// Il2CppName: set_SignalType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalBindingBindInfo::*)(::System::Type*)>(&Zenject::SignalBindingBindInfo::set_SignalType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalBindingBindInfo*), "set_SignalType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Zenject::SignalBindingBindInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
