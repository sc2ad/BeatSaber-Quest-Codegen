// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: SignalBus
  class SignalBus;
  // Forward declaring type: SignalBindingBindInfo
  class SignalBindingBindInfo;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: SignalCallbackWrapper
  class SignalCallbackWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::SignalCallbackWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::SignalCallbackWrapper*, "Zenject", "SignalCallbackWrapper");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.SignalCallbackWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class SignalCallbackWrapper : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly Zenject.SignalBus _signalBus
    // Size: 0x8
    // Offset: 0x10
    ::Zenject::SignalBus* signalBus;
    // Field size check
    static_assert(sizeof(::Zenject::SignalBus*) == 0x8);
    // private readonly System.Action`1<System.Object> _action
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::Il2CppObject*>* action;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Il2CppObject*>*) == 0x8);
    // private readonly System.Type _signalType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* signalType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private readonly System.Object _identifier
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* identifier;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private readonly Zenject.SignalBus _signalBus
    [[deprecated("Use field access instead!")]] ::Zenject::SignalBus*& dyn__signalBus();
    // Get instance field reference: private readonly System.Action`1<System.Object> _action
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& dyn__action();
    // Get instance field reference: private readonly System.Type _signalType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__signalType();
    // Get instance field reference: private readonly System.Object _identifier
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__identifier();
    // public System.Void .ctor(Zenject.SignalBindingBindInfo bindInfo, System.Action`1<System.Object> action, Zenject.SignalBus signalBus)
    // Offset: 0x1DD32FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SignalCallbackWrapper* New_ctor(::Zenject::SignalBindingBindInfo* bindInfo, ::System::Action_1<::Il2CppObject*>* action, ::Zenject::SignalBus* signalBus) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SignalCallbackWrapper*, creationType>(bindInfo, action, signalBus)));
    }
    // private System.Void OnSignalFired(System.Object signal)
    // Offset: 0x1DD33D0
    void OnSignalFired(::Il2CppObject* signal);
    // public System.Void Dispose()
    // Offset: 0x1DD3438
    void Dispose();
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0x1DD34E0
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1DD362C
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.SignalCallbackWrapper
  #pragma pack(pop)
  static check_size<sizeof(SignalCallbackWrapper), 40 + sizeof(::Il2CppObject*)> __Zenject_SignalCallbackWrapperSizeCheck;
  static_assert(sizeof(SignalCallbackWrapper) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::SignalCallbackWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::SignalCallbackWrapper::OnSignalFired
// Il2CppName: OnSignalFired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalCallbackWrapper::*)(::Il2CppObject*)>(&Zenject::SignalCallbackWrapper::OnSignalFired)> {
  static const MethodInfo* get() {
    static auto* signal = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalCallbackWrapper*), "OnSignalFired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signal});
  }
};
// Writing MetadataGetter for method: Zenject::SignalCallbackWrapper::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::SignalCallbackWrapper::*)()>(&Zenject::SignalCallbackWrapper::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalCallbackWrapper*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::SignalCallbackWrapper::__zenCreate
// Il2CppName: __zenCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<::Il2CppObject*>)>(&Zenject::SignalCallbackWrapper::__zenCreate)> {
  static const MethodInfo* get() {
    static auto* P_0 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalCallbackWrapper*), "__zenCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0});
  }
};
// Writing MetadataGetter for method: Zenject::SignalCallbackWrapper::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::SignalCallbackWrapper::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::SignalCallbackWrapper*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
