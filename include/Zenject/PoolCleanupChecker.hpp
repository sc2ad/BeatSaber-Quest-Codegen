// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IMemoryPool
  class IMemoryPool;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: PoolCleanupChecker
  class PoolCleanupChecker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::PoolCleanupChecker);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::PoolCleanupChecker*, "Zenject", "PoolCleanupChecker");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.PoolCleanupChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class PoolCleanupChecker : public ::Il2CppObject/*, public ::Zenject::ILateDisposable*/ {
    public:
    // Nested type: ::Zenject::PoolCleanupChecker::$$c
    class $$c;
    public:
    // private readonly System.Collections.Generic.List`1<Zenject.IMemoryPool> _poolFactories
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Zenject::IMemoryPool*>* poolFactories;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Zenject::IMemoryPool*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Type> _ignoredPools
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::System::Type*>* ignoredPools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Type*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Zenject::ILateDisposable
    operator ::Zenject::ILateDisposable() noexcept {
      return *reinterpret_cast<::Zenject::ILateDisposable*>(this);
    }
    // Creating interface conversion operator: i_ILateDisposable
    inline ::Zenject::ILateDisposable* i_ILateDisposable() noexcept {
      return reinterpret_cast<::Zenject::ILateDisposable*>(this);
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Zenject.IMemoryPool> _poolFactories
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::IMemoryPool*>*& dyn__poolFactories();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Type> _ignoredPools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Type*>*& dyn__ignoredPools();
    // public System.Void .ctor(System.Collections.Generic.List`1<Zenject.IMemoryPool> poolFactories, System.Collections.Generic.List`1<System.Type> ignoredPools)
    // Offset: 0x1C17E28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PoolCleanupChecker* New_ctor(::System::Collections::Generic::List_1<::Zenject::IMemoryPool*>* poolFactories, ::System::Collections::Generic::List_1<::System::Type*>* ignoredPools) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolCleanupChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PoolCleanupChecker*, creationType>(poolFactories, ignoredPools)));
    }
    // public System.Void LateDispose()
    // Offset: 0x1C17F38
    void LateDispose();
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0x1C182A0
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1C183B8
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.PoolCleanupChecker
  #pragma pack(pop)
  static check_size<sizeof(PoolCleanupChecker), 24 + sizeof(::System::Collections::Generic::List_1<::System::Type*>*)> __Zenject_PoolCleanupCheckerSizeCheck;
  static_assert(sizeof(PoolCleanupChecker) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::PoolCleanupChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::PoolCleanupChecker::LateDispose
// Il2CppName: LateDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::PoolCleanupChecker::*)()>(&Zenject::PoolCleanupChecker::LateDispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::PoolCleanupChecker*), "LateDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::PoolCleanupChecker::__zenCreate
// Il2CppName: __zenCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<::Il2CppObject*>)>(&Zenject::PoolCleanupChecker::__zenCreate)> {
  static const MethodInfo* get() {
    static auto* P_0 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::PoolCleanupChecker*), "__zenCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0});
  }
};
// Writing MetadataGetter for method: Zenject::PoolCleanupChecker::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::PoolCleanupChecker::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::PoolCleanupChecker*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
