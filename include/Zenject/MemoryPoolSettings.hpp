// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.PoolExpandMethods
#include "Zenject/PoolExpandMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: MemoryPoolSettings
  class MemoryPoolSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::MemoryPoolSettings);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::MemoryPoolSettings*, "Zenject", "MemoryPoolSettings");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x1D
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.MemoryPoolSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class MemoryPoolSettings : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 InitialSize
    // Size: 0x4
    // Offset: 0x10
    int InitialSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxSize
    // Size: 0x4
    // Offset: 0x14
    int MaxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Zenject.PoolExpandMethods ExpandMethod
    // Size: 0x4
    // Offset: 0x18
    ::Zenject::PoolExpandMethods ExpandMethod;
    // Field size check
    static_assert(sizeof(::Zenject::PoolExpandMethods) == 0x4);
    // public System.Boolean ShowExpandWarning
    // Size: 0x1
    // Offset: 0x1C
    bool ShowExpandWarning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public readonly Zenject.MemoryPoolSettings Default
    static ::Zenject::MemoryPoolSettings* _get_Default();
    // Set static field: static public readonly Zenject.MemoryPoolSettings Default
    static void _set_Default(::Zenject::MemoryPoolSettings* value);
    // Get instance field reference: public System.Int32 InitialSize
    [[deprecated("Use field access instead!")]] int& dyn_InitialSize();
    // Get instance field reference: public System.Int32 MaxSize
    [[deprecated("Use field access instead!")]] int& dyn_MaxSize();
    // Get instance field reference: public Zenject.PoolExpandMethods ExpandMethod
    [[deprecated("Use field access instead!")]] ::Zenject::PoolExpandMethods& dyn_ExpandMethod();
    // Get instance field reference: public System.Boolean ShowExpandWarning
    [[deprecated("Use field access instead!")]] bool& dyn_ShowExpandWarning();
    // public System.Void .ctor()
    // Offset: 0x1CA4228
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MemoryPoolSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MemoryPoolSettings*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 initialSize, System.Int32 maxSize, Zenject.PoolExpandMethods expandMethod, System.Boolean showExpandWarning)
    // Offset: 0x1CA4264
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MemoryPoolSettings* New_ctor(int initialSize, int maxSize, ::Zenject::PoolExpandMethods expandMethod, bool showExpandWarning) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MemoryPoolSettings*, creationType>(initialSize, maxSize, expandMethod, showExpandWarning)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1CA42B8
    static void _cctor();
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0x1CA4334
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1CA43A8
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.MemoryPoolSettings
  #pragma pack(pop)
  static check_size<sizeof(MemoryPoolSettings), 28 + sizeof(bool)> __Zenject_MemoryPoolSettingsSizeCheck;
  static_assert(sizeof(MemoryPoolSettings) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::MemoryPoolSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::MemoryPoolSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::MemoryPoolSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Zenject::MemoryPoolSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::MemoryPoolSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::MemoryPoolSettings::__zenCreate
// Il2CppName: __zenCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<::Il2CppObject*>)>(&Zenject::MemoryPoolSettings::__zenCreate)> {
  static const MethodInfo* get() {
    static auto* P_0 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::MemoryPoolSettings*), "__zenCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0});
  }
};
// Writing MetadataGetter for method: Zenject::MemoryPoolSettings::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::MemoryPoolSettings::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::MemoryPoolSettings*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
