// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.TransientProvider
#include "Zenject/TransientProvider.hpp"
// Including type: Zenject.TypeValuePair
#include "Zenject/TypeValuePair.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: InjectContext
  class InjectContext;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Zenject::TransientProvider::$$c__DisplayClass11_0);
DEFINE_IL2CPP_ARG_TYPE(::Zenject::TransientProvider::$$c__DisplayClass11_0*, "Zenject", "TransientProvider/<>c__DisplayClass11_0");
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TransientProvider::$$c__DisplayClass11_0 : public ::Il2CppObject {
    public:
    public:
    // public Zenject.TransientProvider <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Zenject::TransientProvider* $$4__this;
    // Field size check
    static_assert(sizeof(::Zenject::TransientProvider*) == 0x8);
    // public System.Object instance
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* instance;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Type instanceType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* instanceType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* extraArgs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*) == 0x8);
    // public Zenject.InjectContext context
    // Size: 0x8
    // Offset: 0x30
    ::Zenject::InjectContext* context;
    // Field size check
    static_assert(sizeof(::Zenject::InjectContext*) == 0x8);
    public:
    // Get instance field reference: public Zenject.TransientProvider <>4__this
    [[deprecated("Use field access instead!")]] ::Zenject::TransientProvider*& dyn_$$4__this();
    // Get instance field reference: public System.Object instance
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_instance();
    // Get instance field reference: public System.Type instanceType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_instanceType();
    // Get instance field reference: public System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& dyn_extraArgs();
    // Get instance field reference: public Zenject.InjectContext context
    [[deprecated("Use field access instead!")]] ::Zenject::InjectContext*& dyn_context();
    // public System.Void .ctor()
    // Offset: 0x1DDFD44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransientProvider::$$c__DisplayClass11_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransientProvider::$$c__DisplayClass11_0*, creationType>()));
    }
    // System.Void <GetAllInstancesWithInjectSplit>b__0()
    // Offset: 0x1DDFD4C
    void $GetAllInstancesWithInjectSplit$b__0();
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0x1DDFE38
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0);
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0x1DDFE94
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo();
  }; // Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
  #pragma pack(pop)
  static check_size<sizeof(TransientProvider::$$c__DisplayClass11_0), 48 + sizeof(::Zenject::InjectContext*)> __Zenject_TransientProvider_$$c__DisplayClass11_0SizeCheck;
  static_assert(sizeof(TransientProvider::$$c__DisplayClass11_0) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Zenject::TransientProvider::$$c__DisplayClass11_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::TransientProvider::$$c__DisplayClass11_0::$GetAllInstancesWithInjectSplit$b__0
// Il2CppName: <GetAllInstancesWithInjectSplit>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::TransientProvider::$$c__DisplayClass11_0::*)()>(&Zenject::TransientProvider::$$c__DisplayClass11_0::$GetAllInstancesWithInjectSplit$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::TransientProvider::$$c__DisplayClass11_0*), "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreate
// Il2CppName: __zenCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<::Il2CppObject*>)>(&Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreate)> {
  static const MethodInfo* get() {
    static auto* P_0 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Zenject::TransientProvider::$$c__DisplayClass11_0*), "__zenCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{P_0});
  }
};
// Writing MetadataGetter for method: Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreateInjectTypeInfo
// Il2CppName: __zenCreateInjectTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::InjectTypeInfo* (*)()>(&Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreateInjectTypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::TransientProvider::$$c__DisplayClass11_0*), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
