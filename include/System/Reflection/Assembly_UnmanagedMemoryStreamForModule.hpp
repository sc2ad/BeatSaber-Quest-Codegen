// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.IO.UnmanagedMemoryStream
#include "System/IO/UnmanagedMemoryStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Module
  class Module;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::Assembly::UnmanagedMemoryStreamForModule);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::Assembly::UnmanagedMemoryStreamForModule*, "System.Reflection", "Assembly/UnmanagedMemoryStreamForModule");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.Assembly/System.Reflection.UnmanagedMemoryStreamForModule
  // [TokenAttribute] Offset: FFFFFFFF
  class Assembly::UnmanagedMemoryStreamForModule : public ::System::IO::UnmanagedMemoryStream {
    public:
    public:
    // private System.Reflection.Module module
    // Size: 0x8
    // Offset: 0x68
    ::System::Reflection::Module* module;
    // Field size check
    static_assert(sizeof(::System::Reflection::Module*) == 0x8);
    public:
    // Get instance field reference: private System.Reflection.Module module
    [[deprecated("Use field access instead!")]] ::System::Reflection::Module*& dyn_module();
    // public System.Void .ctor(System.Byte* pointer, System.Int64 length, System.Reflection.Module module)
    // Offset: 0x1281BC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Assembly::UnmanagedMemoryStreamForModule* New_ctor(uint8_t* pointer, int64_t length, ::System::Reflection::Module* module) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Reflection::Assembly::UnmanagedMemoryStreamForModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Assembly::UnmanagedMemoryStreamForModule*, creationType>(pointer, length, module)));
    }
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1282960
    // Implemented from: System.IO.UnmanagedMemoryStream
    // Base method: System.Void UnmanagedMemoryStream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // System.Reflection.Assembly/System.Reflection.UnmanagedMemoryStreamForModule
  #pragma pack(pop)
  static check_size<sizeof(Assembly::UnmanagedMemoryStreamForModule), 104 + sizeof(::System::Reflection::Module*)> __System_Reflection_Assembly_UnmanagedMemoryStreamForModuleSizeCheck;
  static_assert(sizeof(Assembly::UnmanagedMemoryStreamForModule) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::Assembly::UnmanagedMemoryStreamForModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::Assembly::UnmanagedMemoryStreamForModule::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Reflection::Assembly::UnmanagedMemoryStreamForModule::*)(bool)>(&System::Reflection::Assembly::UnmanagedMemoryStreamForModule::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Assembly::UnmanagedMemoryStreamForModule*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
