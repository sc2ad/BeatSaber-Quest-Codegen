// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Reflection.EventAttributes
#include "System/Reflection/EventAttributes.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: MonoEvent
  class MonoEvent;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Forward declaring type: MonoEventInfo
  struct MonoEventInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::MonoEventInfo, "System.Reflection", "MonoEventInfo");
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.MonoEventInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct MonoEventInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Type declaring_type
    // Size: 0x8
    // Offset: 0x0
    ::System::Type* declaring_type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.Type reflected_type
    // Size: 0x8
    // Offset: 0x8
    ::System::Type* reflected_type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Reflection.MethodInfo add_method
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::MethodInfo* add_method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Reflection.MethodInfo remove_method
    // Size: 0x8
    // Offset: 0x20
    ::System::Reflection::MethodInfo* remove_method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Reflection.MethodInfo raise_method
    // Size: 0x8
    // Offset: 0x28
    ::System::Reflection::MethodInfo* raise_method;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // public System.Reflection.EventAttributes attrs
    // Size: 0x4
    // Offset: 0x30
    ::System::Reflection::EventAttributes attrs;
    // Field size check
    static_assert(sizeof(::System::Reflection::EventAttributes) == 0x4);
    // Padding between fields: attrs and: other_methods
    char __padding6[0x4] = {};
    // public System.Reflection.MethodInfo[] other_methods
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::System::Reflection::MethodInfo*> other_methods;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Reflection::MethodInfo*>) == 0x8);
    public:
    // Creating value type constructor for type: MonoEventInfo
    constexpr MonoEventInfo(::System::Type* declaring_type_ = {}, ::System::Type* reflected_type_ = {}, ::StringW name_ = {}, ::System::Reflection::MethodInfo* add_method_ = {}, ::System::Reflection::MethodInfo* remove_method_ = {}, ::System::Reflection::MethodInfo* raise_method_ = {}, ::System::Reflection::EventAttributes attrs_ = {}, ::ArrayW<::System::Reflection::MethodInfo*> other_methods_ = ::ArrayW<::System::Reflection::MethodInfo*>(static_cast<void*>(nullptr))) noexcept : declaring_type{declaring_type_}, reflected_type{reflected_type_}, name{name_}, add_method{add_method_}, remove_method{remove_method_}, raise_method{raise_method_}, attrs{attrs_}, other_methods{other_methods_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Type declaring_type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_declaring_type();
    // Get instance field reference: public System.Type reflected_type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_reflected_type();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Reflection.MethodInfo add_method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_add_method();
    // Get instance field reference: public System.Reflection.MethodInfo remove_method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_remove_method();
    // Get instance field reference: public System.Reflection.MethodInfo raise_method
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_raise_method();
    // Get instance field reference: public System.Reflection.EventAttributes attrs
    [[deprecated("Use field access instead!")]] ::System::Reflection::EventAttributes& dyn_attrs();
    // Get instance field reference: public System.Reflection.MethodInfo[] other_methods
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Reflection::MethodInfo*>& dyn_other_methods();
    // static private System.Void get_event_info(System.Reflection.MonoEvent ev, out System.Reflection.MonoEventInfo info)
    // Offset: 0x1D78BEC
    static void get_event_info(::System::Reflection::MonoEvent* ev, ByRef<::System::Reflection::MonoEventInfo> info);
    // static System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.MonoEvent ev)
    // Offset: 0x1D787FC
    static ::System::Reflection::MonoEventInfo GetEventInfo(::System::Reflection::MonoEvent* ev);
  }; // System.Reflection.MonoEventInfo
  #pragma pack(pop)
  static check_size<sizeof(MonoEventInfo), 56 + sizeof(::ArrayW<::System::Reflection::MethodInfo*>)> __System_Reflection_MonoEventInfoSizeCheck;
  static_assert(sizeof(MonoEventInfo) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::MonoEventInfo::get_event_info
// Il2CppName: get_event_info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::MonoEvent*, ByRef<::System::Reflection::MonoEventInfo>)>(&System::Reflection::MonoEventInfo::get_event_info)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("System.Reflection", "MonoEvent")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Reflection", "MonoEventInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::MonoEventInfo), "get_event_info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev, info});
  }
};
// Writing MetadataGetter for method: System::Reflection::MonoEventInfo::GetEventInfo
// Il2CppName: GetEventInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MonoEventInfo (*)(::System::Reflection::MonoEvent*)>(&System::Reflection::MonoEventInfo::GetEventInfo)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("System.Reflection", "MonoEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::MonoEventInfo), "GetEventInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
