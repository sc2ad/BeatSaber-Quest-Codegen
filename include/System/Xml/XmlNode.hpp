// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlNodeList
  class XmlNodeList;
  // Forward declaring type: XmlAttributeCollection
  class XmlAttributeCollection;
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlLinkedNode
  class XmlLinkedNode;
  // Forward declaring type: XmlNodeChangedEventArgs
  class XmlNodeChangedEventArgs;
  // Forward declaring type: XmlNodeChangedAction
  struct XmlNodeChangedAction;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNode*, "System.Xml", "XmlNode");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlNode
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 1046090
  // [DefaultMemberAttribute] Offset: 1046090
  class XmlNode : public ::Il2CppObject/*, public ::System::Collections::IEnumerable, public ::System::ICloneable*/ {
    public:
    public:
    // System.Xml.XmlNode parentNode
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNode* parentNode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Creating interface conversion operator: i_IEnumerable
    inline ::System::Collections::IEnumerable* i_IEnumerable() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating conversion operator: operator ::System::Xml::XmlNode*
    constexpr operator ::System::Xml::XmlNode*() const noexcept {
      return parentNode;
    }
    // Get instance field reference: System.Xml.XmlNode parentNode
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNode*& dyn_parentNode();
    // public System.String get_Name()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Name();
    // public System.String get_Value()
    // Offset: 0x15E3B24
    ::StringW get_Value();
    // public System.Void set_Value(System.String value)
    // Offset: 0x15E3B2C
    void set_Value(::StringW value);
    // public System.Xml.XmlNodeType get_NodeType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNodeType get_NodeType();
    // public System.Xml.XmlNode get_ParentNode()
    // Offset: 0x15E3C5C
    ::System::Xml::XmlNode* get_ParentNode();
    // public System.Xml.XmlNodeList get_ChildNodes()
    // Offset: 0x15E3D50
    ::System::Xml::XmlNodeList* get_ChildNodes();
    // public System.Xml.XmlNode get_PreviousSibling()
    // Offset: 0x15E3DB4
    ::System::Xml::XmlNode* get_PreviousSibling();
    // public System.Xml.XmlNode get_NextSibling()
    // Offset: 0x15E3DBC
    ::System::Xml::XmlNode* get_NextSibling();
    // public System.Xml.XmlAttributeCollection get_Attributes()
    // Offset: 0x15E3DC4
    ::System::Xml::XmlAttributeCollection* get_Attributes();
    // public System.Xml.XmlDocument get_OwnerDocument()
    // Offset: 0x15E3DCC
    ::System::Xml::XmlDocument* get_OwnerDocument();
    // public System.Xml.XmlNode get_FirstChild()
    // Offset: 0x15E3E94
    ::System::Xml::XmlNode* get_FirstChild();
    // public System.Xml.XmlNode get_LastChild()
    // Offset: 0x15E3EBC
    ::System::Xml::XmlNode* get_LastChild();
    // System.Boolean get_IsContainer()
    // Offset: 0x15E3ECC
    bool get_IsContainer();
    // System.Xml.XmlLinkedNode get_LastNode()
    // Offset: 0x15E3ED4
    ::System::Xml::XmlLinkedNode* get_LastNode();
    // System.Void set_LastNode(System.Xml.XmlLinkedNode value)
    // Offset: 0x15E3EDC
    void set_LastNode(::System::Xml::XmlLinkedNode* value);
    // public System.Boolean get_HasChildNodes()
    // Offset: 0x15E4970
    bool get_HasChildNodes();
    // public System.String get_NamespaceURI()
    // Offset: 0x15E4A3C
    ::StringW get_NamespaceURI();
    // public System.String get_Prefix()
    // Offset: 0x15E4A8C
    ::StringW get_Prefix();
    // public System.String get_LocalName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_LocalName();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x15E4ADC
    bool get_IsReadOnly();
    // public System.String get_InnerText()
    // Offset: 0x15D9AEC
    ::StringW get_InnerText();
    // public System.Void set_InnerText(System.String value)
    // Offset: 0x15E4D60
    void set_InnerText(::StringW value);
    // public System.Void set_InnerXml(System.String value)
    // Offset: 0x15E4E3C
    void set_InnerXml(::StringW value);
    // public System.String get_BaseURI()
    // Offset: 0x15E4EBC
    ::StringW get_BaseURI();
    // System.Xml.XmlDocument get_Document()
    // Offset: 0x15E504C
    ::System::Xml::XmlDocument* get_Document();
    // System.Boolean get_IsText()
    // Offset: 0x15E581C
    bool get_IsText();
    // System.Void .ctor()
    // Offset: 0x15E3B1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNode*, creationType>()));
    }
    // System.Void .ctor(System.Xml.XmlDocument doc)
    // Offset: 0x15D99A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNode* New_ctor(::System::Xml::XmlDocument* doc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNode*, creationType>(doc)));
    }
    // System.Boolean AncestorNode(System.Xml.XmlNode node)
    // Offset: 0x15E3EE0
    bool AncestorNode(::System::Xml::XmlNode* node);
    // public System.Xml.XmlNode RemoveChild(System.Xml.XmlNode oldChild)
    // Offset: 0x15E3F40
    ::System::Xml::XmlNode* RemoveChild(::System::Xml::XmlNode* oldChild);
    // public System.Xml.XmlNode AppendChild(System.Xml.XmlNode newChild)
    // Offset: 0x15E4304
    ::System::Xml::XmlNode* AppendChild(::System::Xml::XmlNode* newChild);
    // System.Xml.XmlNode AppendChildForLoad(System.Xml.XmlNode newChild, System.Xml.XmlDocument doc)
    // Offset: 0x15E47B4
    ::System::Xml::XmlNode* AppendChildForLoad(::System::Xml::XmlNode* newChild, ::System::Xml::XmlDocument* doc);
    // System.Boolean IsValidChildType(System.Xml.XmlNodeType type)
    // Offset: 0x15E4960
    bool IsValidChildType(::System::Xml::XmlNodeType type);
    // System.Boolean CanInsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
    // Offset: 0x15E4968
    bool CanInsertAfter(::System::Xml::XmlNode* newChild, ::System::Xml::XmlNode* refChild);
    // public System.Xml.XmlNode CloneNode(System.Boolean deep)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::XmlNode* CloneNode(bool deep);
    // System.Void CopyChildren(System.Xml.XmlDocument doc, System.Xml.XmlNode container, System.Boolean deep)
    // Offset: 0x15E4998
    void CopyChildren(::System::Xml::XmlDocument* doc, ::System::Xml::XmlNode* container, bool deep);
    // static System.Boolean HasReadOnlyParent(System.Xml.XmlNode n)
    // Offset: 0x15E4B0C
    static bool HasReadOnlyParent(::System::Xml::XmlNode* n);
    // private System.Object System.ICloneable.Clone()
    // Offset: 0x15E4BE0
    ::Il2CppObject* System_ICloneable_Clone();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x15E4BF4
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Void AppendChildText(System.Text.StringBuilder builder)
    // Offset: 0x15E4C58
    void AppendChildText(::System::Text::StringBuilder* builder);
    // public System.Void RemoveAll()
    // Offset: 0x15E4FD8
    void RemoveAll();
    // public System.String GetPrefixOfNamespace(System.String namespaceURI)
    // Offset: 0x15E5100
    ::StringW GetPrefixOfNamespace(::StringW namespaceURI);
    // System.String GetPrefixOfNamespaceStrict(System.String namespaceURI)
    // Offset: 0x15E5170
    ::StringW GetPrefixOfNamespaceStrict(::StringW namespaceURI);
    // System.Void SetParent(System.Xml.XmlNode node)
    // Offset: 0x15DA15C
    void SetParent(::System::Xml::XmlNode* node);
    // System.Void SetParentForLoad(System.Xml.XmlNode node)
    // Offset: 0x15E54D4
    void SetParentForLoad(::System::Xml::XmlNode* node);
    // static System.Void SplitName(System.String name, out System.String prefix, out System.String localName)
    // Offset: 0x15E54DC
    static void SplitName(::StringW name, ByRef<::StringW> prefix, ByRef<::StringW> localName);
    // System.Xml.XmlNode FindChild(System.Xml.XmlNodeType type)
    // Offset: 0x15E55B0
    ::System::Xml::XmlNode* FindChild(::System::Xml::XmlNodeType type);
    // System.Xml.XmlNodeChangedEventArgs GetEventArgs(System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, System.String oldValue, System.String newValue, System.Xml.XmlNodeChangedAction action)
    // Offset: 0x15E5618
    ::System::Xml::XmlNodeChangedEventArgs* GetEventArgs(::System::Xml::XmlNode* node, ::System::Xml::XmlNode* oldParent, ::System::Xml::XmlNode* newParent, ::StringW oldValue, ::StringW newValue, ::System::Xml::XmlNodeChangedAction action);
    // System.Void BeforeEvent(System.Xml.XmlNodeChangedEventArgs args)
    // Offset: 0x15E5774
    void BeforeEvent(::System::Xml::XmlNodeChangedEventArgs* args);
    // System.Void AfterEvent(System.Xml.XmlNodeChangedEventArgs args)
    // Offset: 0x15E57C8
    void AfterEvent(::System::Xml::XmlNodeChangedEventArgs* args);
    // static System.Void NestTextNodes(System.Xml.XmlNode prevNode, System.Xml.XmlNode nextNode)
    // Offset: 0x15E42EC
    static void NestTextNodes(::System::Xml::XmlNode* prevNode, ::System::Xml::XmlNode* nextNode);
    // static System.Void UnnestTextNodes(System.Xml.XmlNode prevNode, System.Xml.XmlNode nextNode)
    // Offset: 0x15E42B4
    static void UnnestTextNodes(::System::Xml::XmlNode* prevNode, ::System::Xml::XmlNode* nextNode);
  }; // System.Xml.XmlNode
  #pragma pack(pop)
  static check_size<sizeof(XmlNode), 16 + sizeof(::System::Xml::XmlNode*)> __System_Xml_XmlNodeSizeCheck;
  static_assert(sizeof(XmlNode) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlNode::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::StringW)>(&System::Xml::XmlNode::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_ParentNode
// Il2CppName: get_ParentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_ParentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_ParentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_ChildNodes
// Il2CppName: get_ChildNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeList* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_ChildNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_ChildNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_PreviousSibling
// Il2CppName: get_PreviousSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_PreviousSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_PreviousSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_NextSibling
// Il2CppName: get_NextSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_NextSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_NextSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttributeCollection* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_OwnerDocument
// Il2CppName: get_OwnerDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_OwnerDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_OwnerDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_FirstChild
// Il2CppName: get_FirstChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_FirstChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_FirstChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_LastChild
// Il2CppName: get_LastChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_LastChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_LastChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_IsContainer
// Il2CppName: get_IsContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_IsContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_IsContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_LastNode
// Il2CppName: get_LastNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlLinkedNode* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_LastNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_LastNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::set_LastNode
// Il2CppName: set_LastNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlLinkedNode*)>(&System::Xml::XmlNode::set_LastNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlLinkedNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "set_LastNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_HasChildNodes
// Il2CppName: get_HasChildNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_HasChildNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_HasChildNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_InnerText
// Il2CppName: get_InnerText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_InnerText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_InnerText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::set_InnerText
// Il2CppName: set_InnerText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::StringW)>(&System::Xml::XmlNode::set_InnerText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "set_InnerText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::set_InnerXml
// Il2CppName: set_InnerXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::StringW)>(&System::Xml::XmlNode::set_InnerXml)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "set_InnerXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_Document
// Il2CppName: get_Document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_Document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_Document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::get_IsText
// Il2CppName: get_IsText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::get_IsText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "get_IsText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlNode::AncestorNode
// Il2CppName: AncestorNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::AncestorNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "AncestorNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::RemoveChild
// Il2CppName: RemoveChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::RemoveChild)> {
  static const MethodInfo* get() {
    static auto* oldChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "RemoveChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldChild});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::AppendChild
// Il2CppName: AppendChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::AppendChild)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "AppendChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::AppendChildForLoad
// Il2CppName: AppendChildForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)(::System::Xml::XmlNode*, ::System::Xml::XmlDocument*)>(&System::Xml::XmlNode::AppendChildForLoad)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* doc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "AppendChildForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild, doc});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::IsValidChildType
// Il2CppName: IsValidChildType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlNode::IsValidChildType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "IsValidChildType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::CanInsertAfter
// Il2CppName: CanInsertAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNode::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlNode::CanInsertAfter)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* refChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "CanInsertAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild, refChild});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::CloneNode
// Il2CppName: CloneNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)(bool)>(&System::Xml::XmlNode::CloneNode)> {
  static const MethodInfo* get() {
    static auto* deep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "CloneNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deep});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::CopyChildren
// Il2CppName: CopyChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlDocument*, ::System::Xml::XmlNode*, bool)>(&System::Xml::XmlNode::CopyChildren)> {
  static const MethodInfo* get() {
    static auto* doc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* deep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "CopyChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doc, container, deep});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::HasReadOnlyParent
// Il2CppName: HasReadOnlyParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::HasReadOnlyParent)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "HasReadOnlyParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::System_ICloneable_Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::AppendChildText
// Il2CppName: AppendChildText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlNode::AppendChildText)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "AppendChildText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::RemoveAll
// Il2CppName: RemoveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)()>(&System::Xml::XmlNode::RemoveAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "RemoveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::GetPrefixOfNamespace
// Il2CppName: GetPrefixOfNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)(::StringW)>(&System::Xml::XmlNode::GetPrefixOfNamespace)> {
  static const MethodInfo* get() {
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "GetPrefixOfNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::GetPrefixOfNamespaceStrict
// Il2CppName: GetPrefixOfNamespaceStrict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNode::*)(::StringW)>(&System::Xml::XmlNode::GetPrefixOfNamespaceStrict)> {
  static const MethodInfo* get() {
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "GetPrefixOfNamespaceStrict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::SetParent)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::SetParentForLoad
// Il2CppName: SetParentForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNode::SetParentForLoad)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "SetParentForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::SplitName
// Il2CppName: SplitName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>)>(&System::Xml::XmlNode::SplitName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "SplitName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, prefix, localName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::FindChild
// Il2CppName: FindChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNode::*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlNode::FindChild)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "FindChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::GetEventArgs
// Il2CppName: GetEventArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeChangedEventArgs* (System::Xml::XmlNode::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*, ::System::Xml::XmlNode*, ::StringW, ::StringW, ::System::Xml::XmlNodeChangedAction)>(&System::Xml::XmlNode::GetEventArgs)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* oldParent = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* newParent = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "GetEventArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, oldParent, newParent, oldValue, newValue, action});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::BeforeEvent
// Il2CppName: BeforeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlNodeChangedEventArgs*)>(&System::Xml::XmlNode::BeforeEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "BeforeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::AfterEvent
// Il2CppName: AfterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNode::*)(::System::Xml::XmlNodeChangedEventArgs*)>(&System::Xml::XmlNode::AfterEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "AfterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::NestTextNodes
// Il2CppName: NestTextNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlNode::NestTextNodes)> {
  static const MethodInfo* get() {
    static auto* prevNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* nextNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "NestTextNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prevNode, nextNode});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNode::UnnestTextNodes
// Il2CppName: UnnestTextNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlNode::UnnestTextNodes)> {
  static const MethodInfo* get() {
    static auto* prevNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* nextNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNode*), "UnnestTextNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prevNode, nextNode});
  }
};
