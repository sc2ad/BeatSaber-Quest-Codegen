// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlNode
#include "System/Xml/XmlNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlImplementation
  class XmlImplementation;
  // Forward declaring type: DomNameTable
  class DomNameTable;
  // Forward declaring type: XmlLinkedNode
  class XmlLinkedNode;
  // Forward declaring type: XmlNamedNodeMap
  class XmlNamedNodeMap;
  // Forward declaring type: XmlNodeChangedEventHandler
  class XmlNodeChangedEventHandler;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: EmptyEnumerator
  class EmptyEnumerator;
  // Forward declaring type: XmlDocumentType
  class XmlDocumentType;
  // Forward declaring type: XmlDeclaration
  class XmlDeclaration;
  // Forward declaring type: XmlElement
  class XmlElement;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlName
  class XmlName;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlAttribute
  class XmlAttribute;
  // Forward declaring type: XmlCDataSection
  class XmlCDataSection;
  // Forward declaring type: XmlComment
  class XmlComment;
  // Forward declaring type: XmlDocumentFragment
  class XmlDocumentFragment;
  // Forward declaring type: XmlEntityReference
  class XmlEntityReference;
  // Forward declaring type: XmlProcessingInstruction
  class XmlProcessingInstruction;
  // Forward declaring type: XmlText
  class XmlText;
  // Forward declaring type: XmlSignificantWhitespace
  class XmlSignificantWhitespace;
  // Forward declaring type: XmlWhitespace
  class XmlWhitespace;
  // Forward declaring type: XmlTextReader
  class XmlTextReader;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlNodeChangedEventArgs
  class XmlNodeChangedEventArgs;
  // Forward declaring type: XmlEntity
  class XmlEntity;
  // Forward declaring type: XmlNodeChangedAction
  struct XmlNodeChangedAction;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: IXmlSchemaInfo
  class IXmlSchemaInfo;
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: WeakReference
  class WeakReference;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlDocument);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlDocument*, "System.Xml", "XmlDocument");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x138
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlDocument
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlDocument : public ::System::Xml::XmlNode {
    public:
    public:
    // private System.Xml.XmlImplementation implementation
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlImplementation* implementation;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlImplementation*) == 0x8);
    // private System.Xml.DomNameTable domNameTable
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::DomNameTable* domNameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::DomNameTable*) == 0x8);
    // private System.Xml.XmlLinkedNode lastChild
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::XmlLinkedNode* lastChild;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlLinkedNode*) == 0x8);
    // private System.Xml.XmlNamedNodeMap entities
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::XmlNamedNodeMap* entities;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamedNodeMap*) == 0x8);
    // private System.Collections.Hashtable htElementIdMap
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* htElementIdMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable htElementIDAttrDecl
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Hashtable* htElementIDAttrDecl;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Xml.Schema.SchemaInfo schemaInfo
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::Schema::SchemaInfo* schemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // private System.Xml.Schema.XmlSchemaSet schemas
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::XmlSchemaSet* schemas;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSet*) == 0x8);
    // private System.Boolean reportValidity
    // Size: 0x1
    // Offset: 0x58
    bool reportValidity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean actualLoadingStatus
    // Size: 0x1
    // Offset: 0x59
    bool actualLoadingStatus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: actualLoadingStatus and: onNodeInsertingDelegate
    char __padding9[0x6] = {};
    // private System.Xml.XmlNodeChangedEventHandler onNodeInsertingDelegate
    // Size: 0x8
    // Offset: 0x60
    ::System::Xml::XmlNodeChangedEventHandler* onNodeInsertingDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // private System.Xml.XmlNodeChangedEventHandler onNodeInsertedDelegate
    // Size: 0x8
    // Offset: 0x68
    ::System::Xml::XmlNodeChangedEventHandler* onNodeInsertedDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // private System.Xml.XmlNodeChangedEventHandler onNodeRemovingDelegate
    // Size: 0x8
    // Offset: 0x70
    ::System::Xml::XmlNodeChangedEventHandler* onNodeRemovingDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // private System.Xml.XmlNodeChangedEventHandler onNodeRemovedDelegate
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::XmlNodeChangedEventHandler* onNodeRemovedDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // private System.Xml.XmlNodeChangedEventHandler onNodeChangingDelegate
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::XmlNodeChangedEventHandler* onNodeChangingDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // private System.Xml.XmlNodeChangedEventHandler onNodeChangedDelegate
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::XmlNodeChangedEventHandler* onNodeChangedDelegate;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeChangedEventHandler*) == 0x8);
    // System.Boolean fEntRefNodesPresent
    // Size: 0x1
    // Offset: 0x90
    bool fEntRefNodesPresent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean fCDataNodesPresent
    // Size: 0x1
    // Offset: 0x91
    bool fCDataNodesPresent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean preserveWhitespace
    // Size: 0x1
    // Offset: 0x92
    bool preserveWhitespace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isLoading
    // Size: 0x1
    // Offset: 0x93
    bool isLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLoading and: strDocumentName
    char __padding19[0x4] = {};
    // System.String strDocumentName
    // Size: 0x8
    // Offset: 0x98
    ::StringW strDocumentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strDocumentFragmentName
    // Size: 0x8
    // Offset: 0xA0
    ::StringW strDocumentFragmentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strCommentName
    // Size: 0x8
    // Offset: 0xA8
    ::StringW strCommentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strTextName
    // Size: 0x8
    // Offset: 0xB0
    ::StringW strTextName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strCDataSectionName
    // Size: 0x8
    // Offset: 0xB8
    ::StringW strCDataSectionName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strEntityName
    // Size: 0x8
    // Offset: 0xC0
    ::StringW strEntityName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strID
    // Size: 0x8
    // Offset: 0xC8
    ::StringW strID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strXmlns
    // Size: 0x8
    // Offset: 0xD0
    ::StringW strXmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strXml
    // Size: 0x8
    // Offset: 0xD8
    ::StringW strXml;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strSpace
    // Size: 0x8
    // Offset: 0xE0
    ::StringW strSpace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strLang
    // Size: 0x8
    // Offset: 0xE8
    ::StringW strLang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strEmpty
    // Size: 0x8
    // Offset: 0xF0
    ::StringW strEmpty;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strNonSignificantWhitespaceName
    // Size: 0x8
    // Offset: 0xF8
    ::StringW strNonSignificantWhitespaceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strSignificantWhitespaceName
    // Size: 0x8
    // Offset: 0x100
    ::StringW strSignificantWhitespaceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strReservedXmlns
    // Size: 0x8
    // Offset: 0x108
    ::StringW strReservedXmlns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String strReservedXml
    // Size: 0x8
    // Offset: 0x110
    ::StringW strReservedXml;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String baseURI
    // Size: 0x8
    // Offset: 0x118
    ::StringW baseURI;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlResolver resolver
    // Size: 0x8
    // Offset: 0x120
    ::System::Xml::XmlResolver* resolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    // System.Boolean bSetResolver
    // Size: 0x1
    // Offset: 0x128
    bool bSetResolver;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bSetResolver and: objLock
    char __padding38[0x7] = {};
    // System.Object objLock
    // Size: 0x8
    // Offset: 0x130
    ::Il2CppObject* objLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Xml::XmlNode*
    constexpr operator ::System::Xml::XmlNode*() const noexcept = delete;
    // Get static field: static System.Xml.EmptyEnumerator EmptyEnumerator
    static ::System::Xml::EmptyEnumerator* _get_EmptyEnumerator();
    // Set static field: static System.Xml.EmptyEnumerator EmptyEnumerator
    static void _set_EmptyEnumerator(::System::Xml::EmptyEnumerator* value);
    // Get static field: static System.Xml.Schema.IXmlSchemaInfo NotKnownSchemaInfo
    static ::System::Xml::Schema::IXmlSchemaInfo* _get_NotKnownSchemaInfo();
    // Set static field: static System.Xml.Schema.IXmlSchemaInfo NotKnownSchemaInfo
    static void _set_NotKnownSchemaInfo(::System::Xml::Schema::IXmlSchemaInfo* value);
    // Get static field: static System.Xml.Schema.IXmlSchemaInfo ValidSchemaInfo
    static ::System::Xml::Schema::IXmlSchemaInfo* _get_ValidSchemaInfo();
    // Set static field: static System.Xml.Schema.IXmlSchemaInfo ValidSchemaInfo
    static void _set_ValidSchemaInfo(::System::Xml::Schema::IXmlSchemaInfo* value);
    // Get static field: static System.Xml.Schema.IXmlSchemaInfo InvalidSchemaInfo
    static ::System::Xml::Schema::IXmlSchemaInfo* _get_InvalidSchemaInfo();
    // Set static field: static System.Xml.Schema.IXmlSchemaInfo InvalidSchemaInfo
    static void _set_InvalidSchemaInfo(::System::Xml::Schema::IXmlSchemaInfo* value);
    // Get instance field reference: private System.Xml.XmlImplementation implementation
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlImplementation*& dyn_implementation();
    // Get instance field reference: private System.Xml.DomNameTable domNameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::DomNameTable*& dyn_domNameTable();
    // Get instance field reference: private System.Xml.XmlLinkedNode lastChild
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlLinkedNode*& dyn_lastChild();
    // Get instance field reference: private System.Xml.XmlNamedNodeMap entities
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamedNodeMap*& dyn_entities();
    // Get instance field reference: private System.Collections.Hashtable htElementIdMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_htElementIdMap();
    // Get instance field reference: private System.Collections.Hashtable htElementIDAttrDecl
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_htElementIDAttrDecl();
    // Get instance field reference: private System.Xml.Schema.SchemaInfo schemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaInfo*& dyn_schemaInfo();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSet schemas
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSet*& dyn_schemas();
    // Get instance field reference: private System.Boolean reportValidity
    [[deprecated("Use field access instead!")]] bool& dyn_reportValidity();
    // Get instance field reference: private System.Boolean actualLoadingStatus
    [[deprecated("Use field access instead!")]] bool& dyn_actualLoadingStatus();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeInsertingDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeInsertingDelegate();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeInsertedDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeInsertedDelegate();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeRemovingDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeRemovingDelegate();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeRemovedDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeRemovedDelegate();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeChangingDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeChangingDelegate();
    // Get instance field reference: private System.Xml.XmlNodeChangedEventHandler onNodeChangedDelegate
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeChangedEventHandler*& dyn_onNodeChangedDelegate();
    // Get instance field reference: System.Boolean fEntRefNodesPresent
    [[deprecated("Use field access instead!")]] bool& dyn_fEntRefNodesPresent();
    // Get instance field reference: System.Boolean fCDataNodesPresent
    [[deprecated("Use field access instead!")]] bool& dyn_fCDataNodesPresent();
    // Get instance field reference: private System.Boolean preserveWhitespace
    [[deprecated("Use field access instead!")]] bool& dyn_preserveWhitespace();
    // Get instance field reference: private System.Boolean isLoading
    [[deprecated("Use field access instead!")]] bool& dyn_isLoading();
    // Get instance field reference: System.String strDocumentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strDocumentName();
    // Get instance field reference: System.String strDocumentFragmentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strDocumentFragmentName();
    // Get instance field reference: System.String strCommentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strCommentName();
    // Get instance field reference: System.String strTextName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strTextName();
    // Get instance field reference: System.String strCDataSectionName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strCDataSectionName();
    // Get instance field reference: System.String strEntityName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strEntityName();
    // Get instance field reference: System.String strID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strID();
    // Get instance field reference: System.String strXmlns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strXmlns();
    // Get instance field reference: System.String strXml
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strXml();
    // Get instance field reference: System.String strSpace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strSpace();
    // Get instance field reference: System.String strLang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strLang();
    // Get instance field reference: System.String strEmpty
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strEmpty();
    // Get instance field reference: System.String strNonSignificantWhitespaceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strNonSignificantWhitespaceName();
    // Get instance field reference: System.String strSignificantWhitespaceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strSignificantWhitespaceName();
    // Get instance field reference: System.String strReservedXmlns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strReservedXmlns();
    // Get instance field reference: System.String strReservedXml
    [[deprecated("Use field access instead!")]] ::StringW& dyn_strReservedXml();
    // Get instance field reference: System.String baseURI
    [[deprecated("Use field access instead!")]] ::StringW& dyn_baseURI();
    // Get instance field reference: private System.Xml.XmlResolver resolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_resolver();
    // Get instance field reference: System.Boolean bSetResolver
    [[deprecated("Use field access instead!")]] bool& dyn_bSetResolver();
    // Get instance field reference: System.Object objLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_objLock();
    // System.Xml.Schema.SchemaInfo get_DtdSchemaInfo()
    // Offset: 0x1C3E0A0
    ::System::Xml::Schema::SchemaInfo* get_DtdSchemaInfo();
    // System.Void set_DtdSchemaInfo(System.Xml.Schema.SchemaInfo value)
    // Offset: 0x1C3E0A8
    void set_DtdSchemaInfo(::System::Xml::Schema::SchemaInfo* value);
    // public System.Xml.XmlDocumentType get_DocumentType()
    // Offset: 0x1C3E94C
    ::System::Xml::XmlDocumentType* get_DocumentType();
    // System.Xml.XmlDeclaration get_Declaration()
    // Offset: 0x1C3E9E0
    ::System::Xml::XmlDeclaration* get_Declaration();
    // public System.Xml.XmlImplementation get_Implementation()
    // Offset: 0x1C3EA8C
    ::System::Xml::XmlImplementation* get_Implementation();
    // public System.Xml.XmlElement get_DocumentElement()
    // Offset: 0x1C3EAA4
    ::System::Xml::XmlElement* get_DocumentElement();
    // public System.Void set_Schemas(System.Xml.Schema.XmlSchemaSet value)
    // Offset: 0x1C3EB58
    void set_Schemas(::System::Xml::Schema::XmlSchemaSet* value);
    // System.Boolean get_CanReportValidity()
    // Offset: 0x1C3EB60
    bool get_CanReportValidity();
    // System.Boolean get_HasSetResolver()
    // Offset: 0x1C3EB68
    bool get_HasSetResolver();
    // public System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0x1C3EB78
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x1C3E084
    ::System::Xml::XmlNameTable* get_NameTable();
    // System.Xml.XmlNamedNodeMap get_Entities()
    // Offset: 0x1C40710
    ::System::Xml::XmlNamedNodeMap* get_Entities();
    // System.Void set_Entities(System.Xml.XmlNamedNodeMap value)
    // Offset: 0x1C40780
    void set_Entities(::System::Xml::XmlNamedNodeMap* value);
    // System.Boolean get_IsLoading()
    // Offset: 0x1C40788
    bool get_IsLoading();
    // System.Void set_IsLoading(System.Boolean value)
    // Offset: 0x1C40790
    void set_IsLoading(bool value);
    // System.Boolean get_ActualLoadingStatus()
    // Offset: 0x1C4079C
    bool get_ActualLoadingStatus();
    // protected internal System.Void .ctor(System.Xml.XmlImplementation imp)
    // Offset: 0x1C3DD9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDocument* New_ctor(::System::Xml::XmlImplementation* imp) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlDocument::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDocument*, creationType>(imp)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1C40F6C
    static void _cctor();
    // static System.Void CheckName(System.String name)
    // Offset: 0x1C33D34
    static void CheckName(::StringW name);
    // System.Xml.XmlName AddXmlName(System.String prefix, System.String localName, System.String namespaceURI, System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    // Offset: 0x1C3E0B0
    ::System::Xml::XmlName* AddXmlName(::StringW prefix, ::StringW localName, ::StringW namespaceURI, ::System::Xml::Schema::IXmlSchemaInfo* schemaInfo);
    // System.Xml.XmlName GetXmlName(System.String prefix, System.String localName, System.String namespaceURI, System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    // Offset: 0x1C3E0CC
    ::System::Xml::XmlName* GetXmlName(::StringW prefix, ::StringW localName, ::StringW namespaceURI, ::System::Xml::Schema::IXmlSchemaInfo* schemaInfo);
    // System.Xml.XmlName AddAttrXmlName(System.String prefix, System.String localName, System.String namespaceURI, System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    // Offset: 0x1C33E4C
    ::System::Xml::XmlName* AddAttrXmlName(::StringW prefix, ::StringW localName, ::StringW namespaceURI, ::System::Xml::Schema::IXmlSchemaInfo* schemaInfo);
    // System.Boolean AddIdInfo(System.Xml.XmlName eleName, System.Xml.XmlName attrName)
    // Offset: 0x1C3E0E8
    bool AddIdInfo(::System::Xml::XmlName* eleName, ::System::Xml::XmlName* attrName);
    // private System.Xml.XmlName GetIDInfoByElement_(System.Xml.XmlName eleName)
    // Offset: 0x1C3E1B0
    ::System::Xml::XmlName* GetIDInfoByElement_(::System::Xml::XmlName* eleName);
    // System.Xml.XmlName GetIDInfoByElement(System.Xml.XmlName eleName)
    // Offset: 0x1C35B24
    ::System::Xml::XmlName* GetIDInfoByElement(::System::Xml::XmlName* eleName);
    // private System.WeakReference GetElement(System.Collections.ArrayList elementList, System.Xml.XmlElement elem)
    // Offset: 0x1C3E28C
    ::System::WeakReference* GetElement(::System::Collections::ArrayList* elementList, ::System::Xml::XmlElement* elem);
    // System.Void AddElementWithId(System.String id, System.Xml.XmlElement elem)
    // Offset: 0x1C35B38
    void AddElementWithId(::StringW id, ::System::Xml::XmlElement* elem);
    // System.Void RemoveElementWithId(System.String id, System.Xml.XmlElement elem)
    // Offset: 0x1C35D20
    void RemoveElementWithId(::StringW id, ::System::Xml::XmlElement* elem);
    // System.Xml.XmlResolver GetResolver()
    // Offset: 0x1C3EB70
    ::System::Xml::XmlResolver* GetResolver();
    // private System.Boolean HasNodeTypeInPrevSiblings(System.Xml.XmlNodeType nt, System.Xml.XmlNode refNode)
    // Offset: 0x1C3EE04
    bool HasNodeTypeInPrevSiblings(::System::Xml::XmlNodeType nt, ::System::Xml::XmlNode* refNode);
    // private System.Boolean HasNodeTypeInNextSiblings(System.Xml.XmlNodeType nt, System.Xml.XmlNode refNode)
    // Offset: 0x1C3EEC0
    bool HasNodeTypeInNextSiblings(::System::Xml::XmlNodeType nt, ::System::Xml::XmlNode* refNode);
    // public System.Xml.XmlAttribute CreateAttribute(System.String name)
    // Offset: 0x1C3F024
    ::System::Xml::XmlAttribute* CreateAttribute(::StringW name);
    // System.Void SetDefaultNamespace(System.String prefix, System.String localName, ref System.String namespaceURI)
    // Offset: 0x1C3F0EC
    void SetDefaultNamespace(::StringW prefix, ::StringW localName, ByRef<::StringW> namespaceURI);
    // public System.Xml.XmlCDataSection CreateCDataSection(System.String data)
    // Offset: 0x1C3F180
    ::System::Xml::XmlCDataSection* CreateCDataSection(::StringW data);
    // public System.Xml.XmlComment CreateComment(System.String data)
    // Offset: 0x1C3F1FC
    ::System::Xml::XmlComment* CreateComment(::StringW data);
    // public System.Xml.XmlDocumentType CreateDocumentType(System.String name, System.String publicId, System.String systemId, System.String internalSubset)
    // Offset: 0x1C3F270
    ::System::Xml::XmlDocumentType* CreateDocumentType(::StringW name, ::StringW publicId, ::StringW systemId, ::StringW internalSubset);
    // public System.Xml.XmlDocumentFragment CreateDocumentFragment()
    // Offset: 0x1C3F3D8
    ::System::Xml::XmlDocumentFragment* CreateDocumentFragment();
    // public System.Xml.XmlElement CreateElement(System.String name)
    // Offset: 0x1C3F4E8
    ::System::Xml::XmlElement* CreateElement(::StringW name);
    // System.Void AddDefaultAttributes(System.Xml.XmlElement elem)
    // Offset: 0x1C3F5A0
    void AddDefaultAttributes(::System::Xml::XmlElement* elem);
    // private System.Xml.Schema.SchemaElementDecl GetSchemaElementDecl(System.Xml.XmlElement elem)
    // Offset: 0x1C3F804
    ::System::Xml::Schema::SchemaElementDecl* GetSchemaElementDecl(::System::Xml::XmlElement* elem);
    // private System.Xml.XmlAttribute PrepareDefaultAttribute(System.Xml.Schema.SchemaAttDef attdef, System.String attrPrefix, System.String attrLocalname, System.String attrNamespaceURI)
    // Offset: 0x1C3F90C
    ::System::Xml::XmlAttribute* PrepareDefaultAttribute(::System::Xml::Schema::SchemaAttDef* attdef, ::StringW attrPrefix, ::StringW attrLocalname, ::StringW attrNamespaceURI);
    // public System.Xml.XmlEntityReference CreateEntityReference(System.String name)
    // Offset: 0x1C3FA10
    ::System::Xml::XmlEntityReference* CreateEntityReference(::StringW name);
    // public System.Xml.XmlProcessingInstruction CreateProcessingInstruction(System.String target, System.String data)
    // Offset: 0x1C3FA84
    ::System::Xml::XmlProcessingInstruction* CreateProcessingInstruction(::StringW target, ::StringW data);
    // public System.Xml.XmlDeclaration CreateXmlDeclaration(System.String version, System.String encoding, System.String standalone)
    // Offset: 0x1C3FB00
    ::System::Xml::XmlDeclaration* CreateXmlDeclaration(::StringW version, ::StringW encoding, ::StringW standalone);
    // public System.Xml.XmlText CreateTextNode(System.String text)
    // Offset: 0x1C3FB88
    ::System::Xml::XmlText* CreateTextNode(::StringW text);
    // public System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(System.String text)
    // Offset: 0x1C3FBFC
    ::System::Xml::XmlSignificantWhitespace* CreateSignificantWhitespace(::StringW text);
    // public System.Xml.XmlWhitespace CreateWhitespace(System.String text)
    // Offset: 0x1C3FC70
    ::System::Xml::XmlWhitespace* CreateWhitespace(::StringW text);
    // public System.Xml.XmlAttribute CreateAttribute(System.String qualifiedName, System.String namespaceURI)
    // Offset: 0x1C3FCE4
    ::System::Xml::XmlAttribute* CreateAttribute(::StringW qualifiedName, ::StringW namespaceURI);
    // public System.Xml.XmlElement CreateElement(System.String qualifiedName, System.String namespaceURI)
    // Offset: 0x1C3FD90
    ::System::Xml::XmlElement* CreateElement(::StringW qualifiedName, ::StringW namespaceURI);
    // private System.Xml.XmlNode ImportNodeInternal(System.Xml.XmlNode node, System.Boolean deep)
    // Offset: 0x1C3FE3C
    ::System::Xml::XmlNode* ImportNodeInternal(::System::Xml::XmlNode* node, bool deep);
    // private System.Void ImportAttributes(System.Xml.XmlNode fromElem, System.Xml.XmlNode toElem)
    // Offset: 0x1C402D4
    void ImportAttributes(::System::Xml::XmlNode* fromElem, ::System::Xml::XmlNode* toElem);
    // private System.Void ImportChildren(System.Xml.XmlNode fromNode, System.Xml.XmlNode toNode, System.Boolean deep)
    // Offset: 0x1C3E89C
    void ImportChildren(::System::Xml::XmlNode* fromNode, ::System::Xml::XmlNode* toNode, bool deep);
    // public System.Xml.XmlAttribute CreateAttribute(System.String prefix, System.String localName, System.String namespaceURI)
    // Offset: 0x1C403EC
    ::System::Xml::XmlAttribute* CreateAttribute(::StringW prefix, ::StringW localName, ::StringW namespaceURI);
    // protected internal System.Xml.XmlAttribute CreateDefaultAttribute(System.String prefix, System.String localName, System.String namespaceURI)
    // Offset: 0x1C4048C
    ::System::Xml::XmlAttribute* CreateDefaultAttribute(::StringW prefix, ::StringW localName, ::StringW namespaceURI);
    // public System.Xml.XmlElement CreateElement(System.String prefix, System.String localName, System.String namespaceURI)
    // Offset: 0x1C40518
    ::System::Xml::XmlElement* CreateElement(::StringW prefix, ::StringW localName, ::StringW namespaceURI);
    // private System.Xml.XmlTextReader SetupReader(System.Xml.XmlTextReader tr)
    // Offset: 0x1C407A4
    ::System::Xml::XmlTextReader* SetupReader(::System::Xml::XmlTextReader* tr);
    // public System.Void Load(System.Xml.XmlReader reader)
    // Offset: 0x1C40808
    void Load(::System::Xml::XmlReader* reader);
    // public System.Void LoadXml(System.String xml)
    // Offset: 0x1C40900
    void LoadXml(::StringW xml);
    // System.Xml.XmlNodeChangedEventArgs GetInsertEventArgsForLoad(System.Xml.XmlNode node, System.Xml.XmlNode newParent)
    // Offset: 0x1C34654
    ::System::Xml::XmlNodeChangedEventArgs* GetInsertEventArgsForLoad(::System::Xml::XmlNode* node, ::System::Xml::XmlNode* newParent);
    // System.Xml.XmlAttribute GetDefaultAttribute(System.Xml.XmlElement elem, System.String attrPrefix, System.String attrLocalname, System.String attrNamespaceURI)
    // Offset: 0x1C358A8
    ::System::Xml::XmlAttribute* GetDefaultAttribute(::System::Xml::XmlElement* elem, ::StringW attrPrefix, ::StringW attrLocalname, ::StringW attrNamespaceURI);
    // System.Xml.XmlEntity GetEntityNode(System.String name)
    // Offset: 0x1C40C38
    ::System::Xml::XmlEntity* GetEntityNode(::StringW name);
    // System.Void SetBaseURI(System.String inBaseURI)
    // Offset: 0x1C40D84
    void SetBaseURI(::StringW inBaseURI);
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x1C3E93C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNodeType XmlNode::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.Xml.XmlNode get_ParentNode()
    // Offset: 0x1C3E944
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNode XmlNode::get_ParentNode()
    ::System::Xml::XmlNode* get_ParentNode();
    // public override System.String get_Name()
    // Offset: 0x1C3EA94
    // Implemented from: System.Xml.XmlNode
    // Base method: System.String XmlNode::get_Name()
    ::StringW get_Name();
    // public override System.String get_LocalName()
    // Offset: 0x1C3EA9C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.String XmlNode::get_LocalName()
    ::StringW get_LocalName();
    // override System.Boolean get_IsContainer()
    // Offset: 0x1C3EB38
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Boolean XmlNode::get_IsContainer()
    bool get_IsContainer();
    // override System.Xml.XmlLinkedNode get_LastNode()
    // Offset: 0x1C3EB40
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlLinkedNode XmlNode::get_LastNode()
    ::System::Xml::XmlLinkedNode* get_LastNode();
    // override System.Void set_LastNode(System.Xml.XmlLinkedNode value)
    // Offset: 0x1C3EB48
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::set_LastNode(System.Xml.XmlLinkedNode value)
    void set_LastNode(::System::Xml::XmlLinkedNode* value);
    // public override System.Xml.XmlDocument get_OwnerDocument()
    // Offset: 0x1C3EB50
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlDocument XmlNode::get_OwnerDocument()
    ::System::Xml::XmlDocument* get_OwnerDocument();
    // public override System.Boolean get_IsReadOnly()
    // Offset: 0x1C40708
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Boolean XmlNode::get_IsReadOnly()
    bool get_IsReadOnly();
    // public override System.Void set_InnerText(System.String value)
    // Offset: 0x1C40A10
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::set_InnerText(System.String value)
    void set_InnerText(::StringW value);
    // public override System.Void set_InnerXml(System.String value)
    // Offset: 0x1C40A90
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::set_InnerXml(System.String value)
    void set_InnerXml(::StringW value);
    // public override System.String get_BaseURI()
    // Offset: 0x1C40D7C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.String XmlNode::get_BaseURI()
    ::StringW get_BaseURI();
    // public System.Void .ctor()
    // Offset: 0x1C3DD38
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDocument* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlDocument::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDocument*, creationType>()));
    }
    // public override System.Xml.XmlNode CloneNode(System.Boolean deep)
    // Offset: 0x1C3E830
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNode XmlNode::CloneNode(System.Boolean deep)
    ::System::Xml::XmlNode* CloneNode(bool deep);
    // override System.Boolean IsValidChildType(System.Xml.XmlNodeType type)
    // Offset: 0x1C3ECEC
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Boolean XmlNode::IsValidChildType(System.Xml.XmlNodeType type)
    bool IsValidChildType(::System::Xml::XmlNodeType type);
    // override System.Boolean CanInsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
    // Offset: 0x1C3EF28
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Boolean XmlNode::CanInsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
    bool CanInsertAfter(::System::Xml::XmlNode* newChild, ::System::Xml::XmlNode* refChild);
    // override System.Xml.XmlNodeChangedEventArgs GetEventArgs(System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, System.String oldValue, System.String newValue, System.Xml.XmlNodeChangedAction action)
    // Offset: 0x1C40AA0
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNodeChangedEventArgs XmlNode::GetEventArgs(System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, System.String oldValue, System.String newValue, System.Xml.XmlNodeChangedAction action)
    ::System::Xml::XmlNodeChangedEventArgs* GetEventArgs(::System::Xml::XmlNode* node, ::System::Xml::XmlNode* oldParent, ::System::Xml::XmlNode* newParent, ::StringW oldValue, ::StringW newValue, ::System::Xml::XmlNodeChangedAction action);
    // override System.Void BeforeEvent(System.Xml.XmlNodeChangedEventArgs args)
    // Offset: 0x1C40BA0
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::BeforeEvent(System.Xml.XmlNodeChangedEventArgs args)
    void BeforeEvent(::System::Xml::XmlNodeChangedEventArgs* args);
    // override System.Void AfterEvent(System.Xml.XmlNodeChangedEventArgs args)
    // Offset: 0x1C40BEC
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::AfterEvent(System.Xml.XmlNodeChangedEventArgs args)
    void AfterEvent(::System::Xml::XmlNodeChangedEventArgs* args);
    // override System.Xml.XmlNode AppendChildForLoad(System.Xml.XmlNode newChild, System.Xml.XmlDocument doc)
    // Offset: 0x1C40D8C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNode XmlNode::AppendChildForLoad(System.Xml.XmlNode newChild, System.Xml.XmlDocument doc)
    ::System::Xml::XmlNode* AppendChildForLoad(::System::Xml::XmlNode* newChild, ::System::Xml::XmlDocument* doc);
  }; // System.Xml.XmlDocument
  #pragma pack(pop)
  static check_size<sizeof(XmlDocument), 304 + sizeof(::Il2CppObject*)> __System_Xml_XmlDocumentSizeCheck;
  static_assert(sizeof(XmlDocument) == 0x138);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_DtdSchemaInfo
// Il2CppName: get_DtdSchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaInfo* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_DtdSchemaInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_DtdSchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_DtdSchemaInfo
// Il2CppName: set_DtdSchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::Schema::SchemaInfo*)>(&System::Xml::XmlDocument::set_DtdSchemaInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_DtdSchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_DocumentType
// Il2CppName: get_DocumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocumentType* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_DocumentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_DocumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_Declaration
// Il2CppName: get_Declaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDeclaration* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_Declaration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_Declaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_Implementation
// Il2CppName: get_Implementation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlImplementation* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_Implementation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_Implementation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_DocumentElement
// Il2CppName: get_DocumentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_DocumentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_DocumentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_Schemas
// Il2CppName: set_Schemas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Xml::XmlDocument::set_Schemas)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_Schemas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_CanReportValidity
// Il2CppName: get_CanReportValidity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_CanReportValidity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_CanReportValidity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_HasSetResolver
// Il2CppName: get_HasSetResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_HasSetResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_HasSetResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlResolver*)>(&System::Xml::XmlDocument::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_Entities
// Il2CppName: get_Entities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNamedNodeMap* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_Entities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_Entities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_Entities
// Il2CppName: set_Entities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlNamedNodeMap*)>(&System::Xml::XmlDocument::set_Entities)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamedNodeMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_Entities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_IsLoading
// Il2CppName: get_IsLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_IsLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_IsLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_IsLoading
// Il2CppName: set_IsLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(bool)>(&System::Xml::XmlDocument::set_IsLoading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_IsLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_ActualLoadingStatus
// Il2CppName: get_ActualLoadingStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_ActualLoadingStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_ActualLoadingStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlDocument::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::XmlDocument::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CheckName
// Il2CppName: CheckName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Xml::XmlDocument::CheckName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CheckName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AddXmlName
// Il2CppName: AddXmlName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlName* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW, ::System::Xml::Schema::IXmlSchemaInfo*)>(&System::Xml::XmlDocument::AddXmlName)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "IXmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AddXmlName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI, schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetXmlName
// Il2CppName: GetXmlName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlName* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW, ::System::Xml::Schema::IXmlSchemaInfo*)>(&System::Xml::XmlDocument::GetXmlName)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "IXmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetXmlName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI, schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AddAttrXmlName
// Il2CppName: AddAttrXmlName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlName* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW, ::System::Xml::Schema::IXmlSchemaInfo*)>(&System::Xml::XmlDocument::AddAttrXmlName)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "IXmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AddAttrXmlName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI, schemaInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AddIdInfo
// Il2CppName: AddIdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)(::System::Xml::XmlName*, ::System::Xml::XmlName*)>(&System::Xml::XmlDocument::AddIdInfo)> {
  static const MethodInfo* get() {
    static auto* eleName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlName")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AddIdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eleName, attrName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetIDInfoByElement_
// Il2CppName: GetIDInfoByElement_
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlName* (System::Xml::XmlDocument::*)(::System::Xml::XmlName*)>(&System::Xml::XmlDocument::GetIDInfoByElement_)> {
  static const MethodInfo* get() {
    static auto* eleName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetIDInfoByElement_", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eleName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetIDInfoByElement
// Il2CppName: GetIDInfoByElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlName* (System::Xml::XmlDocument::*)(::System::Xml::XmlName*)>(&System::Xml::XmlDocument::GetIDInfoByElement)> {
  static const MethodInfo* get() {
    static auto* eleName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetIDInfoByElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eleName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetElement
// Il2CppName: GetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::WeakReference* (System::Xml::XmlDocument::*)(::System::Collections::ArrayList*, ::System::Xml::XmlElement*)>(&System::Xml::XmlDocument::GetElement)> {
  static const MethodInfo* get() {
    static auto* elementList = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementList, elem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AddElementWithId
// Il2CppName: AddElementWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW, ::System::Xml::XmlElement*)>(&System::Xml::XmlDocument::AddElementWithId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AddElementWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, elem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::RemoveElementWithId
// Il2CppName: RemoveElementWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW, ::System::Xml::XmlElement*)>(&System::Xml::XmlDocument::RemoveElementWithId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "RemoveElementWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, elem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetResolver
// Il2CppName: GetResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::GetResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::HasNodeTypeInPrevSiblings
// Il2CppName: HasNodeTypeInPrevSiblings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)(::System::Xml::XmlNodeType, ::System::Xml::XmlNode*)>(&System::Xml::XmlDocument::HasNodeTypeInPrevSiblings)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    static auto* refNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "HasNodeTypeInPrevSiblings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt, refNode});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::HasNodeTypeInNextSiblings
// Il2CppName: HasNodeTypeInNextSiblings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)(::System::Xml::XmlNodeType, ::System::Xml::XmlNode*)>(&System::Xml::XmlDocument::HasNodeTypeInNextSiblings)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    static auto* refNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "HasNodeTypeInNextSiblings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt, refNode});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::SetDefaultNamespace
// Il2CppName: SetDefaultNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW, ::StringW, ByRef<::StringW>)>(&System::Xml::XmlDocument::SetDefaultNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "SetDefaultNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateCDataSection
// Il2CppName: CreateCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlCDataSection* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateCDataSection)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateComment
// Il2CppName: CreateComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlComment* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateComment)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateDocumentType
// Il2CppName: CreateDocumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocumentType* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateDocumentType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalSubset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateDocumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, publicId, systemId, internalSubset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateDocumentFragment
// Il2CppName: CreateDocumentFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocumentFragment* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::CreateDocumentFragment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateDocumentFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateElement)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AddDefaultAttributes
// Il2CppName: AddDefaultAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlElement*)>(&System::Xml::XmlDocument::AddDefaultAttributes)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AddDefaultAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetSchemaElementDecl
// Il2CppName: GetSchemaElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaElementDecl* (System::Xml::XmlDocument::*)(::System::Xml::XmlElement*)>(&System::Xml::XmlDocument::GetSchemaElementDecl)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetSchemaElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::PrepareDefaultAttribute
// Il2CppName: PrepareDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::System::Xml::Schema::SchemaAttDef*, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::PrepareDefaultAttribute)> {
  static const MethodInfo* get() {
    static auto* attdef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    static auto* attrPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrLocalname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrNamespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "PrepareDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attdef, attrPrefix, attrLocalname, attrNamespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateEntityReference
// Il2CppName: CreateEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlEntityReference* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateEntityReference)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateProcessingInstruction
// Il2CppName: CreateProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlProcessingInstruction* (System::Xml::XmlDocument::*)(::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateXmlDeclaration
// Il2CppName: CreateXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDeclaration* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, encoding, standalone});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateTextNode
// Il2CppName: CreateTextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlText* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateTextNode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateTextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateSignificantWhitespace
// Il2CppName: CreateSignificantWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSignificantWhitespace* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateSignificantWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateSignificantWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateWhitespace
// Il2CppName: CreateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlWhitespace* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::CreateWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Xml::XmlDocument::*)(::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateElement)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::ImportNodeInternal
// Il2CppName: ImportNodeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, bool)>(&System::Xml::XmlDocument::ImportNodeInternal)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* deep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "ImportNodeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, deep});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::ImportAttributes
// Il2CppName: ImportAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlDocument::ImportAttributes)> {
  static const MethodInfo* get() {
    static auto* fromElem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* toElem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "ImportAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromElem, toElem});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::ImportChildren
// Il2CppName: ImportChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*, bool)>(&System::Xml::XmlDocument::ImportChildren)> {
  static const MethodInfo* get() {
    static auto* fromNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* toNode = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* deep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "ImportChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromNode, toNode, deep});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateDefaultAttribute
// Il2CppName: CreateDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateDefaultAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Xml::XmlDocument::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::CreateElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::SetupReader
// Il2CppName: SetupReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReader* (System::Xml::XmlDocument::*)(::System::Xml::XmlTextReader*)>(&System::Xml::XmlDocument::SetupReader)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "SetupReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlReader*)>(&System::Xml::XmlDocument::Load)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::LoadXml
// Il2CppName: LoadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::LoadXml)> {
  static const MethodInfo* get() {
    static auto* xml = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "LoadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xml});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetInsertEventArgsForLoad
// Il2CppName: GetInsertEventArgsForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeChangedEventArgs* (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlDocument::GetInsertEventArgsForLoad)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* newParent = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetInsertEventArgsForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, newParent});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetDefaultAttribute
// Il2CppName: GetDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlAttribute* (System::Xml::XmlDocument::*)(::System::Xml::XmlElement*, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlDocument::GetDefaultAttribute)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* attrPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrLocalname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrNamespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, attrPrefix, attrLocalname, attrNamespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetEntityNode
// Il2CppName: GetEntityNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlEntity* (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::GetEntityNode)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetEntityNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::SetBaseURI
// Il2CppName: SetBaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::SetBaseURI)> {
  static const MethodInfo* get() {
    static auto* inBaseURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "SetBaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inBaseURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_ParentNode
// Il2CppName: get_ParentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_ParentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_ParentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_IsContainer
// Il2CppName: get_IsContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_IsContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_IsContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_LastNode
// Il2CppName: get_LastNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlLinkedNode* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_LastNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_LastNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_LastNode
// Il2CppName: set_LastNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlLinkedNode*)>(&System::Xml::XmlDocument::set_LastNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlLinkedNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_LastNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_OwnerDocument
// Il2CppName: get_OwnerDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_OwnerDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_OwnerDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_InnerText
// Il2CppName: set_InnerText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::set_InnerText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_InnerText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::set_InnerXml
// Il2CppName: set_InnerXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::StringW)>(&System::Xml::XmlDocument::set_InnerXml)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "set_InnerXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlDocument::*)()>(&System::Xml::XmlDocument::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlDocument::CloneNode
// Il2CppName: CloneNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlDocument::*)(bool)>(&System::Xml::XmlDocument::CloneNode)> {
  static const MethodInfo* get() {
    static auto* deep = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CloneNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deep});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::IsValidChildType
// Il2CppName: IsValidChildType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlDocument::IsValidChildType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "IsValidChildType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::CanInsertAfter
// Il2CppName: CanInsertAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*)>(&System::Xml::XmlDocument::CanInsertAfter)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* refChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "CanInsertAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild, refChild});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::GetEventArgs
// Il2CppName: GetEventArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeChangedEventArgs* (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlNode*, ::System::Xml::XmlNode*, ::StringW, ::StringW, ::System::Xml::XmlNodeChangedAction)>(&System::Xml::XmlDocument::GetEventArgs)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* oldParent = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* newParent = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "GetEventArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, oldParent, newParent, oldValue, newValue, action});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::BeforeEvent
// Il2CppName: BeforeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlNodeChangedEventArgs*)>(&System::Xml::XmlDocument::BeforeEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "BeforeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AfterEvent
// Il2CppName: AfterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDocument::*)(::System::Xml::XmlNodeChangedEventArgs*)>(&System::Xml::XmlDocument::AfterEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AfterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDocument::AppendChildForLoad
// Il2CppName: AppendChildForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlDocument::*)(::System::Xml::XmlNode*, ::System::Xml::XmlDocument*)>(&System::Xml::XmlDocument::AppendChildForLoad)> {
  static const MethodInfo* get() {
    static auto* newChild = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* doc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDocument*), "AppendChildForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChild, doc});
  }
};
