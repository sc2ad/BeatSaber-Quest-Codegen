// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: Bits
  class Bits;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Bits);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Bits*, "System.Xml", "Bits");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Bits
  // [TokenAttribute] Offset: FFFFFFFF
  class Bits : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.UInt32 MASK_0101010101010101
    static uint _get_MASK_0101010101010101();
    // Set static field: static private readonly System.UInt32 MASK_0101010101010101
    static void _set_MASK_0101010101010101(uint value);
    // Get static field: static private readonly System.UInt32 MASK_0011001100110011
    static uint _get_MASK_0011001100110011();
    // Set static field: static private readonly System.UInt32 MASK_0011001100110011
    static void _set_MASK_0011001100110011(uint value);
    // Get static field: static private readonly System.UInt32 MASK_0000111100001111
    static uint _get_MASK_0000111100001111();
    // Set static field: static private readonly System.UInt32 MASK_0000111100001111
    static void _set_MASK_0000111100001111(uint value);
    // Get static field: static private readonly System.UInt32 MASK_0000000011111111
    static uint _get_MASK_0000000011111111();
    // Set static field: static private readonly System.UInt32 MASK_0000000011111111
    static void _set_MASK_0000000011111111(uint value);
    // Get static field: static private readonly System.UInt32 MASK_1111111111111111
    static uint _get_MASK_1111111111111111();
    // Set static field: static private readonly System.UInt32 MASK_1111111111111111
    static void _set_MASK_1111111111111111(uint value);
    // static private System.Void .cctor()
    // Offset: 0x1ABFEB0
    static void _cctor();
    // static public System.Int32 Count(System.UInt32 num)
    // Offset: 0x1ABFD84
    static int Count(uint num);
    // static public System.Int32 LeastPosition(System.UInt32 num)
    // Offset: 0x1ABFE34
    static int LeastPosition(uint num);
  }; // System.Xml.Bits
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Bits::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Bits::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Bits*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Bits::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Xml::Bits::Count)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Bits*), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num});
  }
};
// Writing MetadataGetter for method: System::Xml::Bits::LeastPosition
// Il2CppName: LeastPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Xml::Bits::LeastPosition)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Bits*), "LeastPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num});
  }
};
