// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlValueConverter
#include "System/Xml/Schema/XmlValueConverter.hpp"
// Including type: System.Xml.Schema.XmlTypeCode
#include "System/Xml/Schema/XmlTypeCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Decimal
  struct Decimal;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlBaseConverter
  class XmlBaseConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlBaseConverter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlBaseConverter*, "System.Xml.Schema", "XmlBaseConverter");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlBaseConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlBaseConverter : public ::System::Xml::Schema::XmlValueConverter {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaType schemaType
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaType* schemaType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaType*) == 0x8);
    // private System.Xml.Schema.XmlTypeCode typeCode
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::XmlTypeCode typeCode;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlTypeCode) == 0x4);
    // Padding between fields: typeCode and: clrTypeDefault
    char __padding1[0x4] = {};
    // private System.Type clrTypeDefault
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* clrTypeDefault;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get static field: static protected readonly System.Type ICollectionType
    static ::System::Type* _get_ICollectionType();
    // Set static field: static protected readonly System.Type ICollectionType
    static void _set_ICollectionType(::System::Type* value);
    // Get static field: static protected readonly System.Type IEnumerableType
    static ::System::Type* _get_IEnumerableType();
    // Set static field: static protected readonly System.Type IEnumerableType
    static void _set_IEnumerableType(::System::Type* value);
    // Get static field: static protected readonly System.Type IListType
    static ::System::Type* _get_IListType();
    // Set static field: static protected readonly System.Type IListType
    static void _set_IListType(::System::Type* value);
    // Get static field: static protected readonly System.Type ObjectArrayType
    static ::System::Type* _get_ObjectArrayType();
    // Set static field: static protected readonly System.Type ObjectArrayType
    static void _set_ObjectArrayType(::System::Type* value);
    // Get static field: static protected readonly System.Type StringArrayType
    static ::System::Type* _get_StringArrayType();
    // Set static field: static protected readonly System.Type StringArrayType
    static void _set_StringArrayType(::System::Type* value);
    // Get static field: static protected readonly System.Type XmlAtomicValueArrayType
    static ::System::Type* _get_XmlAtomicValueArrayType();
    // Set static field: static protected readonly System.Type XmlAtomicValueArrayType
    static void _set_XmlAtomicValueArrayType(::System::Type* value);
    // Get static field: static protected readonly System.Type DecimalType
    static ::System::Type* _get_DecimalType();
    // Set static field: static protected readonly System.Type DecimalType
    static void _set_DecimalType(::System::Type* value);
    // Get static field: static protected readonly System.Type Int32Type
    static ::System::Type* _get_Int32Type();
    // Set static field: static protected readonly System.Type Int32Type
    static void _set_Int32Type(::System::Type* value);
    // Get static field: static protected readonly System.Type Int64Type
    static ::System::Type* _get_Int64Type();
    // Set static field: static protected readonly System.Type Int64Type
    static void _set_Int64Type(::System::Type* value);
    // Get static field: static protected readonly System.Type StringType
    static ::System::Type* _get_StringType();
    // Set static field: static protected readonly System.Type StringType
    static void _set_StringType(::System::Type* value);
    // Get static field: static protected readonly System.Type XmlAtomicValueType
    static ::System::Type* _get_XmlAtomicValueType();
    // Set static field: static protected readonly System.Type XmlAtomicValueType
    static void _set_XmlAtomicValueType(::System::Type* value);
    // Get static field: static protected readonly System.Type ObjectType
    static ::System::Type* _get_ObjectType();
    // Set static field: static protected readonly System.Type ObjectType
    static void _set_ObjectType(::System::Type* value);
    // Get static field: static protected readonly System.Type ByteType
    static ::System::Type* _get_ByteType();
    // Set static field: static protected readonly System.Type ByteType
    static void _set_ByteType(::System::Type* value);
    // Get static field: static protected readonly System.Type Int16Type
    static ::System::Type* _get_Int16Type();
    // Set static field: static protected readonly System.Type Int16Type
    static void _set_Int16Type(::System::Type* value);
    // Get static field: static protected readonly System.Type SByteType
    static ::System::Type* _get_SByteType();
    // Set static field: static protected readonly System.Type SByteType
    static void _set_SByteType(::System::Type* value);
    // Get static field: static protected readonly System.Type UInt16Type
    static ::System::Type* _get_UInt16Type();
    // Set static field: static protected readonly System.Type UInt16Type
    static void _set_UInt16Type(::System::Type* value);
    // Get static field: static protected readonly System.Type UInt32Type
    static ::System::Type* _get_UInt32Type();
    // Set static field: static protected readonly System.Type UInt32Type
    static void _set_UInt32Type(::System::Type* value);
    // Get static field: static protected readonly System.Type UInt64Type
    static ::System::Type* _get_UInt64Type();
    // Set static field: static protected readonly System.Type UInt64Type
    static void _set_UInt64Type(::System::Type* value);
    // Get static field: static protected readonly System.Type XPathItemType
    static ::System::Type* _get_XPathItemType();
    // Set static field: static protected readonly System.Type XPathItemType
    static void _set_XPathItemType(::System::Type* value);
    // Get static field: static protected readonly System.Type DoubleType
    static ::System::Type* _get_DoubleType();
    // Set static field: static protected readonly System.Type DoubleType
    static void _set_DoubleType(::System::Type* value);
    // Get static field: static protected readonly System.Type SingleType
    static ::System::Type* _get_SingleType();
    // Set static field: static protected readonly System.Type SingleType
    static void _set_SingleType(::System::Type* value);
    // Get static field: static protected readonly System.Type DateTimeType
    static ::System::Type* _get_DateTimeType();
    // Set static field: static protected readonly System.Type DateTimeType
    static void _set_DateTimeType(::System::Type* value);
    // Get static field: static protected readonly System.Type DateTimeOffsetType
    static ::System::Type* _get_DateTimeOffsetType();
    // Set static field: static protected readonly System.Type DateTimeOffsetType
    static void _set_DateTimeOffsetType(::System::Type* value);
    // Get static field: static protected readonly System.Type BooleanType
    static ::System::Type* _get_BooleanType();
    // Set static field: static protected readonly System.Type BooleanType
    static void _set_BooleanType(::System::Type* value);
    // Get static field: static protected readonly System.Type ByteArrayType
    static ::System::Type* _get_ByteArrayType();
    // Set static field: static protected readonly System.Type ByteArrayType
    static void _set_ByteArrayType(::System::Type* value);
    // Get static field: static protected readonly System.Type XmlQualifiedNameType
    static ::System::Type* _get_XmlQualifiedNameType();
    // Set static field: static protected readonly System.Type XmlQualifiedNameType
    static void _set_XmlQualifiedNameType(::System::Type* value);
    // Get static field: static protected readonly System.Type UriType
    static ::System::Type* _get_UriType();
    // Set static field: static protected readonly System.Type UriType
    static void _set_UriType(::System::Type* value);
    // Get static field: static protected readonly System.Type TimeSpanType
    static ::System::Type* _get_TimeSpanType();
    // Set static field: static protected readonly System.Type TimeSpanType
    static void _set_TimeSpanType(::System::Type* value);
    // Get static field: static protected readonly System.Type XPathNavigatorType
    static ::System::Type* _get_XPathNavigatorType();
    // Set static field: static protected readonly System.Type XPathNavigatorType
    static void _set_XPathNavigatorType(::System::Type* value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaType schemaType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaType*& dyn_schemaType();
    // Get instance field reference: private System.Xml.Schema.XmlTypeCode typeCode
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlTypeCode& dyn_typeCode();
    // Get instance field reference: private System.Type clrTypeDefault
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_clrTypeDefault();
    // protected System.Xml.Schema.XmlSchemaType get_SchemaType()
    // Offset: 0x1C6FC2C
    ::System::Xml::Schema::XmlSchemaType* get_SchemaType();
    // protected System.Xml.Schema.XmlTypeCode get_TypeCode()
    // Offset: 0x1C6FC34
    ::System::Xml::Schema::XmlTypeCode get_TypeCode();
    // protected System.String get_XmlTypeName()
    // Offset: 0x1C6FC3C
    ::StringW get_XmlTypeName();
    // protected System.Type get_DefaultClrType()
    // Offset: 0x1C6FE14
    ::System::Type* get_DefaultClrType();
    // protected System.Void .ctor(System.Xml.Schema.XmlSchemaType schemaType)
    // Offset: 0x1C6CD84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlBaseConverter* New_ctor(::System::Xml::Schema::XmlSchemaType* schemaType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlBaseConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlBaseConverter*, creationType>(schemaType)));
    }
    // protected System.Void .ctor(System.Xml.Schema.XmlTypeCode typeCode)
    // Offset: 0x1C67D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlBaseConverter* New_ctor(::System::Xml::Schema::XmlTypeCode typeCode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlBaseConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlBaseConverter*, creationType>(typeCode)));
    }
    // protected System.Void .ctor(System.Xml.Schema.XmlBaseConverter converterAtomic)
    // Offset: 0x1C6CE78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlBaseConverter* New_ctor(::System::Xml::Schema::XmlBaseConverter* converterAtomic) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlBaseConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlBaseConverter*, creationType>(converterAtomic)));
    }
    // protected System.Void .ctor(System.Xml.Schema.XmlBaseConverter converterAtomic, System.Type clrTypeDefault)
    // Offset: 0x1C6CED8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlBaseConverter* New_ctor(::System::Xml::Schema::XmlBaseConverter* converterAtomic, ::System::Type* clrTypeDefault) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlBaseConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlBaseConverter*, creationType>(converterAtomic, clrTypeDefault)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1C7245C
    static void _cctor();
    // static protected System.Boolean IsDerivedFrom(System.Type derivedType, System.Type baseType)
    // Offset: 0x1C6B840
    static bool IsDerivedFrom(::System::Type* derivedType, ::System::Type* baseType);
    // protected System.Exception CreateInvalidClrMappingException(System.Type sourceType, System.Type destinationType)
    // Offset: 0x1C6B9C0
    ::System::Exception* CreateInvalidClrMappingException(::System::Type* sourceType, ::System::Type* destinationType);
    // static protected System.String QNameToString(System.Xml.XmlQualifiedName name)
    // Offset: 0x1C6FD28
    static ::StringW QNameToString(::System::Xml::XmlQualifiedName* name);
    // protected System.Object ChangeListType(System.Object value, System.Type destinationType, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1C6FE1C
    ::Il2CppObject* ChangeListType(::Il2CppObject* value, ::System::Type* destinationType, ::System::Xml::IXmlNamespaceResolver* nsResolver);
    // static protected System.Byte[] StringToBase64Binary(System.String value)
    // Offset: 0x1C6FE90
    static ::ArrayW<uint8_t> StringToBase64Binary(::StringW value);
    // static protected System.DateTime StringToDate(System.String value)
    // Offset: 0x1C6FF2C
    static ::System::DateTime StringToDate(::StringW value);
    // static protected System.DateTime StringToDateTime(System.String value)
    // Offset: 0x1C6FFB8
    static ::System::DateTime StringToDateTime(::StringW value);
    // static protected System.TimeSpan StringToDayTimeDuration(System.String value)
    // Offset: 0x1C70044
    static ::System::TimeSpan StringToDayTimeDuration(::StringW value);
    // static protected System.TimeSpan StringToDuration(System.String value)
    // Offset: 0x1C700A8
    static ::System::TimeSpan StringToDuration(::StringW value);
    // static protected System.DateTime StringToGDay(System.String value)
    // Offset: 0x1C7010C
    static ::System::DateTime StringToGDay(::StringW value);
    // static protected System.DateTime StringToGMonth(System.String value)
    // Offset: 0x1C70198
    static ::System::DateTime StringToGMonth(::StringW value);
    // static protected System.DateTime StringToGMonthDay(System.String value)
    // Offset: 0x1C70224
    static ::System::DateTime StringToGMonthDay(::StringW value);
    // static protected System.DateTime StringToGYear(System.String value)
    // Offset: 0x1C702B0
    static ::System::DateTime StringToGYear(::StringW value);
    // static protected System.DateTime StringToGYearMonth(System.String value)
    // Offset: 0x1C7033C
    static ::System::DateTime StringToGYearMonth(::StringW value);
    // static protected System.DateTimeOffset StringToDateOffset(System.String value)
    // Offset: 0x1C703C8
    static ::System::DateTimeOffset StringToDateOffset(::StringW value);
    // static protected System.DateTimeOffset StringToDateTimeOffset(System.String value)
    // Offset: 0x1C70454
    static ::System::DateTimeOffset StringToDateTimeOffset(::StringW value);
    // static protected System.DateTimeOffset StringToGDayOffset(System.String value)
    // Offset: 0x1C704E0
    static ::System::DateTimeOffset StringToGDayOffset(::StringW value);
    // static protected System.DateTimeOffset StringToGMonthOffset(System.String value)
    // Offset: 0x1C7056C
    static ::System::DateTimeOffset StringToGMonthOffset(::StringW value);
    // static protected System.DateTimeOffset StringToGMonthDayOffset(System.String value)
    // Offset: 0x1C705F8
    static ::System::DateTimeOffset StringToGMonthDayOffset(::StringW value);
    // static protected System.DateTimeOffset StringToGYearOffset(System.String value)
    // Offset: 0x1C70684
    static ::System::DateTimeOffset StringToGYearOffset(::StringW value);
    // static protected System.DateTimeOffset StringToGYearMonthOffset(System.String value)
    // Offset: 0x1C70710
    static ::System::DateTimeOffset StringToGYearMonthOffset(::StringW value);
    // static protected System.Byte[] StringToHexBinary(System.String value)
    // Offset: 0x1C7079C
    static ::ArrayW<uint8_t> StringToHexBinary(::StringW value);
    // static protected System.Xml.XmlQualifiedName StringToQName(System.String value, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1C708DC
    static ::System::Xml::XmlQualifiedName* StringToQName(::StringW value, ::System::Xml::IXmlNamespaceResolver* nsResolver);
    // static protected System.DateTime StringToTime(System.String value)
    // Offset: 0x1C70B94
    static ::System::DateTime StringToTime(::StringW value);
    // static protected System.DateTimeOffset StringToTimeOffset(System.String value)
    // Offset: 0x1C70C20
    static ::System::DateTimeOffset StringToTimeOffset(::StringW value);
    // static protected System.TimeSpan StringToYearMonthDuration(System.String value)
    // Offset: 0x1C70CAC
    static ::System::TimeSpan StringToYearMonthDuration(::StringW value);
    // static protected System.String AnyUriToString(System.Uri value)
    // Offset: 0x1C70D10
    static ::StringW AnyUriToString(::System::Uri* value);
    // static protected System.String Base64BinaryToString(System.Byte[] value)
    // Offset: 0x1C70D28
    static ::StringW Base64BinaryToString(::ArrayW<uint8_t> value);
    // static protected System.String DateToString(System.DateTime value)
    // Offset: 0x1C70D90
    static ::StringW DateToString(::System::DateTime value);
    // static protected System.String DateTimeToString(System.DateTime value)
    // Offset: 0x1C70DD8
    static ::StringW DateTimeToString(::System::DateTime value);
    // static protected System.String DayTimeDurationToString(System.TimeSpan value)
    // Offset: 0x1C70E20
    static ::StringW DayTimeDurationToString(::System::TimeSpan value);
    // static protected System.String DurationToString(System.TimeSpan value)
    // Offset: 0x1C70E84
    static ::StringW DurationToString(::System::TimeSpan value);
    // static protected System.String GDayToString(System.DateTime value)
    // Offset: 0x1C70EE8
    static ::StringW GDayToString(::System::DateTime value);
    // static protected System.String GMonthToString(System.DateTime value)
    // Offset: 0x1C70F30
    static ::StringW GMonthToString(::System::DateTime value);
    // static protected System.String GMonthDayToString(System.DateTime value)
    // Offset: 0x1C70F78
    static ::StringW GMonthDayToString(::System::DateTime value);
    // static protected System.String GYearToString(System.DateTime value)
    // Offset: 0x1C70FC0
    static ::StringW GYearToString(::System::DateTime value);
    // static protected System.String GYearMonthToString(System.DateTime value)
    // Offset: 0x1C71008
    static ::StringW GYearMonthToString(::System::DateTime value);
    // static protected System.String DateOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C71050
    static ::StringW DateOffsetToString(::System::DateTimeOffset value);
    // static protected System.String DateTimeOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C7109C
    static ::StringW DateTimeOffsetToString(::System::DateTimeOffset value);
    // static protected System.String GDayOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C710E8
    static ::StringW GDayOffsetToString(::System::DateTimeOffset value);
    // static protected System.String GMonthOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C71134
    static ::StringW GMonthOffsetToString(::System::DateTimeOffset value);
    // static protected System.String GMonthDayOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C71180
    static ::StringW GMonthDayOffsetToString(::System::DateTimeOffset value);
    // static protected System.String GYearOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C711CC
    static ::StringW GYearOffsetToString(::System::DateTimeOffset value);
    // static protected System.String GYearMonthOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C71218
    static ::StringW GYearMonthOffsetToString(::System::DateTimeOffset value);
    // static protected System.String QNameToString(System.Xml.XmlQualifiedName qname, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1C71264
    static ::StringW QNameToString(::System::Xml::XmlQualifiedName* qname, ::System::Xml::IXmlNamespaceResolver* nsResolver);
    // static protected System.String TimeToString(System.DateTime value)
    // Offset: 0x1C71474
    static ::StringW TimeToString(::System::DateTime value);
    // static protected System.String TimeOffsetToString(System.DateTimeOffset value)
    // Offset: 0x1C714BC
    static ::StringW TimeOffsetToString(::System::DateTimeOffset value);
    // static protected System.String YearMonthDurationToString(System.TimeSpan value)
    // Offset: 0x1C71508
    static ::StringW YearMonthDurationToString(::System::TimeSpan value);
    // static System.DateTime DateTimeOffsetToDateTime(System.DateTimeOffset value)
    // Offset: 0x1C7156C
    static ::System::DateTime DateTimeOffsetToDateTime(::System::DateTimeOffset value);
    // static System.Int32 DecimalToInt32(System.Decimal value)
    // Offset: 0x1C71594
    static int DecimalToInt32(::System::Decimal value);
    // static protected System.Int64 DecimalToInt64(System.Decimal value)
    // Offset: 0x1C71794
    static int64_t DecimalToInt64(::System::Decimal value);
    // static protected System.UInt64 DecimalToUInt64(System.Decimal value)
    // Offset: 0x1C71994
    static uint64_t DecimalToUInt64(::System::Decimal value);
    // static protected System.Byte Int32ToByte(System.Int32 value)
    // Offset: 0x1C71B88
    static uint8_t Int32ToByte(int value);
    // static protected System.Int16 Int32ToInt16(System.Int32 value)
    // Offset: 0x1C71CD0
    static int16_t Int32ToInt16(int value);
    // static protected System.SByte Int32ToSByte(System.Int32 value)
    // Offset: 0x1C71E1C
    static int8_t Int32ToSByte(int value);
    // static protected System.UInt16 Int32ToUInt16(System.Int32 value)
    // Offset: 0x1C71F68
    static uint16_t Int32ToUInt16(int value);
    // static protected System.Int32 Int64ToInt32(System.Int64 value)
    // Offset: 0x1C720B0
    static int Int64ToInt32(int64_t value);
    // static protected System.UInt32 Int64ToUInt32(System.Int64 value)
    // Offset: 0x1C721FC
    static uint Int64ToUInt32(int64_t value);
    // static protected System.DateTime UntypedAtomicToDateTime(System.String value)
    // Offset: 0x1C72344
    static ::System::DateTime UntypedAtomicToDateTime(::StringW value);
    // static protected System.DateTimeOffset UntypedAtomicToDateTimeOffset(System.String value)
    // Offset: 0x1C723D0
    static ::System::DateTimeOffset UntypedAtomicToDateTimeOffset(::StringW value);
    // public override System.Boolean ToBoolean(System.DateTime value)
    // Offset: 0x1C6CF28
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.DateTime value)
    bool ToBoolean(::System::DateTime value);
    // public override System.Boolean ToBoolean(System.Double value)
    // Offset: 0x1C6D010
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.Double value)
    bool ToBoolean(double value);
    // public override System.Boolean ToBoolean(System.Int32 value)
    // Offset: 0x1C6D108
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.Int32 value)
    bool ToBoolean(int value);
    // public override System.Boolean ToBoolean(System.Int64 value)
    // Offset: 0x1C6D1F0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.Int64 value)
    bool ToBoolean(int64_t value);
    // public override System.Boolean ToBoolean(System.String value)
    // Offset: 0x1C6D2D8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.String value)
    bool ToBoolean(::StringW value);
    // public override System.Boolean ToBoolean(System.Object value)
    // Offset: 0x1C6D3A0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Boolean XmlValueConverter::ToBoolean(System.Object value)
    bool ToBoolean(::Il2CppObject* value);
    // public override System.DateTime ToDateTime(System.Boolean value)
    // Offset: 0x1C6D468
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.Boolean value)
    ::System::DateTime ToDateTime(bool value);
    // public override System.DateTime ToDateTime(System.DateTimeOffset value)
    // Offset: 0x1C6D550
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.DateTimeOffset value)
    ::System::DateTime ToDateTime(::System::DateTimeOffset value);
    // public override System.DateTime ToDateTime(System.Double value)
    // Offset: 0x1C6D644
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.Double value)
    ::System::DateTime ToDateTime(double value);
    // public override System.DateTime ToDateTime(System.Int32 value)
    // Offset: 0x1C6D73C
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.Int32 value)
    ::System::DateTime ToDateTime(int value);
    // public override System.DateTime ToDateTime(System.Int64 value)
    // Offset: 0x1C6D824
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.Int64 value)
    ::System::DateTime ToDateTime(int64_t value);
    // public override System.DateTime ToDateTime(System.String value)
    // Offset: 0x1C6D90C
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.String value)
    ::System::DateTime ToDateTime(::StringW value);
    // public override System.DateTime ToDateTime(System.Object value)
    // Offset: 0x1C6D9D4
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTime XmlValueConverter::ToDateTime(System.Object value)
    ::System::DateTime ToDateTime(::Il2CppObject* value);
    // public override System.DateTimeOffset ToDateTimeOffset(System.DateTime value)
    // Offset: 0x1C6DA9C
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTimeOffset XmlValueConverter::ToDateTimeOffset(System.DateTime value)
    ::System::DateTimeOffset ToDateTimeOffset(::System::DateTime value);
    // public override System.DateTimeOffset ToDateTimeOffset(System.String value)
    // Offset: 0x1C6DB88
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTimeOffset XmlValueConverter::ToDateTimeOffset(System.String value)
    ::System::DateTimeOffset ToDateTimeOffset(::StringW value);
    // public override System.DateTimeOffset ToDateTimeOffset(System.Object value)
    // Offset: 0x1C6DC54
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.DateTimeOffset XmlValueConverter::ToDateTimeOffset(System.Object value)
    ::System::DateTimeOffset ToDateTimeOffset(::Il2CppObject* value);
    // public override System.Decimal ToDecimal(System.String value)
    // Offset: 0x1C6DD20
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Decimal XmlValueConverter::ToDecimal(System.String value)
    ::System::Decimal ToDecimal(::StringW value);
    // public override System.Decimal ToDecimal(System.Object value)
    // Offset: 0x1C6DDEC
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Decimal XmlValueConverter::ToDecimal(System.Object value)
    ::System::Decimal ToDecimal(::Il2CppObject* value);
    // public override System.Double ToDouble(System.Boolean value)
    // Offset: 0x1C6DEB8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.Boolean value)
    double ToDouble(bool value);
    // public override System.Double ToDouble(System.DateTime value)
    // Offset: 0x1C6DFA0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.DateTime value)
    double ToDouble(::System::DateTime value);
    // public override System.Double ToDouble(System.Int32 value)
    // Offset: 0x1C6E088
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.Int32 value)
    double ToDouble(int value);
    // public override System.Double ToDouble(System.Int64 value)
    // Offset: 0x1C6E170
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.Int64 value)
    double ToDouble(int64_t value);
    // public override System.Double ToDouble(System.String value)
    // Offset: 0x1C6E258
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.String value)
    double ToDouble(::StringW value);
    // public override System.Double ToDouble(System.Object value)
    // Offset: 0x1C6E320
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Double XmlValueConverter::ToDouble(System.Object value)
    double ToDouble(::Il2CppObject* value);
    // public override System.Int32 ToInt32(System.Boolean value)
    // Offset: 0x1C6E3E8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.Boolean value)
    int ToInt32(bool value);
    // public override System.Int32 ToInt32(System.DateTime value)
    // Offset: 0x1C6E4D0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.DateTime value)
    int ToInt32(::System::DateTime value);
    // public override System.Int32 ToInt32(System.Double value)
    // Offset: 0x1C6E5B8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.Double value)
    int ToInt32(double value);
    // public override System.Int32 ToInt32(System.Int64 value)
    // Offset: 0x1C6E6B0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.Int64 value)
    int ToInt32(int64_t value);
    // public override System.Int32 ToInt32(System.String value)
    // Offset: 0x1C6E798
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.String value)
    int ToInt32(::StringW value);
    // public override System.Int32 ToInt32(System.Object value)
    // Offset: 0x1C6E860
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int32 XmlValueConverter::ToInt32(System.Object value)
    int ToInt32(::Il2CppObject* value);
    // public override System.Int64 ToInt64(System.Boolean value)
    // Offset: 0x1C6E928
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.Boolean value)
    int64_t ToInt64(bool value);
    // public override System.Int64 ToInt64(System.DateTime value)
    // Offset: 0x1C6EA10
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.DateTime value)
    int64_t ToInt64(::System::DateTime value);
    // public override System.Int64 ToInt64(System.Double value)
    // Offset: 0x1C6EAF8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.Double value)
    int64_t ToInt64(double value);
    // public override System.Int64 ToInt64(System.Int32 value)
    // Offset: 0x1C6EBF0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.Int32 value)
    int64_t ToInt64(int value);
    // public override System.Int64 ToInt64(System.String value)
    // Offset: 0x1C6ECD8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.String value)
    int64_t ToInt64(::StringW value);
    // public override System.Int64 ToInt64(System.Object value)
    // Offset: 0x1C6EDA0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Int64 XmlValueConverter::ToInt64(System.Object value)
    int64_t ToInt64(::Il2CppObject* value);
    // public override System.Single ToSingle(System.Double value)
    // Offset: 0x1C6EE68
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Single XmlValueConverter::ToSingle(System.Double value)
    float ToSingle(double value);
    // public override System.Single ToSingle(System.String value)
    // Offset: 0x1C6EF60
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Single XmlValueConverter::ToSingle(System.String value)
    float ToSingle(::StringW value);
    // public override System.Single ToSingle(System.Object value)
    // Offset: 0x1C6F028
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Single XmlValueConverter::ToSingle(System.Object value)
    float ToSingle(::Il2CppObject* value);
    // public override System.String ToString(System.Boolean value)
    // Offset: 0x1C6F0F0
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Boolean value)
    ::StringW ToString(bool value);
    // public override System.String ToString(System.DateTime value)
    // Offset: 0x1C6F1C4
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.DateTime value)
    ::StringW ToString(::System::DateTime value);
    // public override System.String ToString(System.DateTimeOffset value)
    // Offset: 0x1C6F298
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.DateTimeOffset value)
    ::StringW ToString(::System::DateTimeOffset value);
    // public override System.String ToString(System.Decimal value)
    // Offset: 0x1C6F378
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Decimal value)
    ::StringW ToString(::System::Decimal value);
    // public override System.String ToString(System.Double value)
    // Offset: 0x1C6F458
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Double value)
    ::StringW ToString(double value);
    // public override System.String ToString(System.Int32 value)
    // Offset: 0x1C6F53C
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Int32 value)
    ::StringW ToString(int value);
    // public override System.String ToString(System.Int64 value)
    // Offset: 0x1C6F610
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Int64 value)
    ::StringW ToString(int64_t value);
    // public override System.String ToString(System.Single value)
    // Offset: 0x1C6F6E4
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Single value)
    ::StringW ToString(float value);
    // public override System.String ToString(System.Object value, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1C6F7C8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Object value, System.Xml.IXmlNamespaceResolver nsResolver)
    ::StringW ToString(::Il2CppObject* value, ::System::Xml::IXmlNamespaceResolver* nsResolver);
    // public override System.String ToString(System.Object value)
    // Offset: 0x1C6F880
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.String XmlValueConverter::ToString(System.Object value)
    ::StringW ToString(::Il2CppObject* value);
    // public override System.Object ChangeType(System.Boolean value, System.Type destinationType)
    // Offset: 0x1C6F894
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Boolean value, System.Type destinationType)
    ::Il2CppObject* ChangeType(bool value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.DateTime value, System.Type destinationType)
    // Offset: 0x1C6F924
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.DateTime value, System.Type destinationType)
    ::Il2CppObject* ChangeType(::System::DateTime value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.Decimal value, System.Type destinationType)
    // Offset: 0x1C6F9B4
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Decimal value, System.Type destinationType)
    ::Il2CppObject* ChangeType(::System::Decimal value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.Double value, System.Type destinationType)
    // Offset: 0x1C6FA50
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Double value, System.Type destinationType)
    ::Il2CppObject* ChangeType(double value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.Int32 value, System.Type destinationType)
    // Offset: 0x1C6FAE8
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Int32 value, System.Type destinationType)
    ::Il2CppObject* ChangeType(int value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.Int64 value, System.Type destinationType)
    // Offset: 0x1C6FB78
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Int64 value, System.Type destinationType)
    ::Il2CppObject* ChangeType(int64_t value, ::System::Type* destinationType);
    // public override System.Object ChangeType(System.String value, System.Type destinationType, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1C6FC08
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.String value, System.Type destinationType, System.Xml.IXmlNamespaceResolver nsResolver)
    ::Il2CppObject* ChangeType(::StringW value, ::System::Type* destinationType, ::System::Xml::IXmlNamespaceResolver* nsResolver);
    // public override System.Object ChangeType(System.Object value, System.Type destinationType)
    // Offset: 0x1C6FC18
    // Implemented from: System.Xml.Schema.XmlValueConverter
    // Base method: System.Object XmlValueConverter::ChangeType(System.Object value, System.Type destinationType)
    ::Il2CppObject* ChangeType(::Il2CppObject* value, ::System::Type* destinationType);
  }; // System.Xml.Schema.XmlBaseConverter
  #pragma pack(pop)
  static check_size<sizeof(XmlBaseConverter), 32 + sizeof(::System::Type*)> __System_Xml_Schema_XmlBaseConverterSizeCheck;
  static_assert(sizeof(XmlBaseConverter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::Schema::XmlBaseConverter::*)()>(&System::Xml::Schema::XmlBaseConverter::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::get_TypeCode
// Il2CppName: get_TypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlTypeCode (System::Xml::Schema::XmlBaseConverter::*)()>(&System::Xml::Schema::XmlBaseConverter::get_TypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "get_TypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::get_XmlTypeName
// Il2CppName: get_XmlTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)()>(&System::Xml::Schema::XmlBaseConverter::get_XmlTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "get_XmlTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::get_DefaultClrType
// Il2CppName: get_DefaultClrType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Xml::Schema::XmlBaseConverter::*)()>(&System::Xml::Schema::XmlBaseConverter::get_DefaultClrType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "get_DefaultClrType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlBaseConverter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::IsDerivedFrom
// Il2CppName: IsDerivedFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::IsDerivedFrom)> {
  static const MethodInfo* get() {
    static auto* derivedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "IsDerivedFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{derivedType, baseType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::CreateInvalidClrMappingException
// Il2CppName: CreateInvalidClrMappingException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Xml::Schema::XmlBaseConverter::*)(::System::Type*, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::CreateInvalidClrMappingException)> {
  static const MethodInfo* get() {
    static auto* sourceType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "CreateInvalidClrMappingException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceType, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::QNameToString
// Il2CppName: QNameToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlBaseConverter::QNameToString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "QNameToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeListType
// Il2CppName: ChangeListType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*, ::System::Type*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlBaseConverter::ChangeListType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeListType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType, nsResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToBase64Binary
// Il2CppName: StringToBase64Binary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToBase64Binary)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToBase64Binary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDate
// Il2CppName: StringToDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDateTime
// Il2CppName: StringToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDayTimeDuration
// Il2CppName: StringToDayTimeDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDayTimeDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDayTimeDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDuration
// Il2CppName: StringToDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGDay
// Il2CppName: StringToGDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGDay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGMonth
// Il2CppName: StringToGMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGMonth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGMonthDay
// Il2CppName: StringToGMonthDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGMonthDay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGMonthDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGYear
// Il2CppName: StringToGYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGYear)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGYearMonth
// Il2CppName: StringToGYearMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGYearMonth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGYearMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDateOffset
// Il2CppName: StringToDateOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDateOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDateOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToDateTimeOffset
// Il2CppName: StringToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGDayOffset
// Il2CppName: StringToGDayOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGDayOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGDayOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGMonthOffset
// Il2CppName: StringToGMonthOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGMonthOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGMonthOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGMonthDayOffset
// Il2CppName: StringToGMonthDayOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGMonthDayOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGMonthDayOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGYearOffset
// Il2CppName: StringToGYearOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGYearOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGYearOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToGYearMonthOffset
// Il2CppName: StringToGYearMonthOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToGYearMonthOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToGYearMonthOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToHexBinary
// Il2CppName: StringToHexBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToHexBinary)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToHexBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToQName
// Il2CppName: StringToQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (*)(::StringW, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlBaseConverter::StringToQName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, nsResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToTime
// Il2CppName: StringToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToTimeOffset
// Il2CppName: StringToTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::StringToYearMonthDuration
// Il2CppName: StringToYearMonthDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::StringToYearMonthDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "StringToYearMonthDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::AnyUriToString
// Il2CppName: AnyUriToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Uri*)>(&System::Xml::Schema::XmlBaseConverter::AnyUriToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "AnyUriToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Base64BinaryToString
// Il2CppName: Base64BinaryToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&System::Xml::Schema::XmlBaseConverter::Base64BinaryToString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Base64BinaryToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DateToString
// Il2CppName: DateToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::DateToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DateToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DateTimeToString
// Il2CppName: DateTimeToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::DateTimeToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DateTimeToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DayTimeDurationToString
// Il2CppName: DayTimeDurationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::TimeSpan)>(&System::Xml::Schema::XmlBaseConverter::DayTimeDurationToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DayTimeDurationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DurationToString
// Il2CppName: DurationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::TimeSpan)>(&System::Xml::Schema::XmlBaseConverter::DurationToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DurationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GDayToString
// Il2CppName: GDayToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::GDayToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GDayToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GMonthToString
// Il2CppName: GMonthToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::GMonthToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GMonthToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GMonthDayToString
// Il2CppName: GMonthDayToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::GMonthDayToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GMonthDayToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GYearToString
// Il2CppName: GYearToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::GYearToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GYearToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GYearMonthToString
// Il2CppName: GYearMonthToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::GYearMonthToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GYearMonthToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DateOffsetToString
// Il2CppName: DateOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::DateOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DateOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DateTimeOffsetToString
// Il2CppName: DateTimeOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::DateTimeOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DateTimeOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GDayOffsetToString
// Il2CppName: GDayOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::GDayOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GDayOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GMonthOffsetToString
// Il2CppName: GMonthOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::GMonthOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GMonthOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GMonthDayOffsetToString
// Il2CppName: GMonthDayOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::GMonthDayOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GMonthDayOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GYearOffsetToString
// Il2CppName: GYearOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::GYearOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GYearOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::GYearMonthOffsetToString
// Il2CppName: GYearMonthOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::GYearMonthOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "GYearMonthOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::QNameToString
// Il2CppName: QNameToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Xml::XmlQualifiedName*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlBaseConverter::QNameToString)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "QNameToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname, nsResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::TimeToString
// Il2CppName: TimeToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::TimeToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "TimeToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::TimeOffsetToString
// Il2CppName: TimeOffsetToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::TimeOffsetToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "TimeOffsetToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::YearMonthDurationToString
// Il2CppName: YearMonthDurationToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::TimeSpan)>(&System::Xml::Schema::XmlBaseConverter::YearMonthDurationToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "YearMonthDurationToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DateTimeOffsetToDateTime
// Il2CppName: DateTimeOffsetToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::DateTimeOffsetToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DateTimeOffsetToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DecimalToInt32
// Il2CppName: DecimalToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Decimal)>(&System::Xml::Schema::XmlBaseConverter::DecimalToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DecimalToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DecimalToInt64
// Il2CppName: DecimalToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::Decimal)>(&System::Xml::Schema::XmlBaseConverter::DecimalToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DecimalToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::DecimalToUInt64
// Il2CppName: DecimalToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::Decimal)>(&System::Xml::Schema::XmlBaseConverter::DecimalToUInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "DecimalToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int32ToByte
// Il2CppName: Int32ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(int)>(&System::Xml::Schema::XmlBaseConverter::Int32ToByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int32ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int32ToInt16
// Il2CppName: Int32ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(int)>(&System::Xml::Schema::XmlBaseConverter::Int32ToInt16)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int32ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int32ToSByte
// Il2CppName: Int32ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (*)(int)>(&System::Xml::Schema::XmlBaseConverter::Int32ToSByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int32ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int32ToUInt16
// Il2CppName: Int32ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(int)>(&System::Xml::Schema::XmlBaseConverter::Int32ToUInt16)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int32ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int64ToInt32
// Il2CppName: Int64ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::Int64ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int64ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::Int64ToUInt32
// Il2CppName: Int64ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::Int64ToUInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "Int64ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::UntypedAtomicToDateTime
// Il2CppName: UntypedAtomicToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::UntypedAtomicToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "UntypedAtomicToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::UntypedAtomicToDateTimeOffset
// Il2CppName: UntypedAtomicToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::UntypedAtomicToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "UntypedAtomicToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(int)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(bool)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(int)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset
// Il2CppName: ToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset
// Il2CppName: ToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset
// Il2CppName: ToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToDecimal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(bool)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(int)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(bool)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToInt32)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(bool)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(int)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToSingle
// Il2CppName: ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToSingle
// Il2CppName: ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Xml::Schema::XmlBaseConverter::*)(::StringW)>(&System::Xml::Schema::XmlBaseConverter::ToSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToSingle
// Il2CppName: ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToSingle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(bool)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTimeOffset)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(::System::Decimal)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(double)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(int)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(int64_t)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(float)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, nsResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*)>(&System::Xml::Schema::XmlBaseConverter::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(bool, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(::System::DateTime, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(::System::Decimal, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(double, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(int, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(int64_t, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(::StringW, ::System::Type*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType, nsResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlBaseConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlBaseConverter::*)(::Il2CppObject*, ::System::Type*)>(&System::Xml::Schema::XmlBaseConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlBaseConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType});
  }
};
