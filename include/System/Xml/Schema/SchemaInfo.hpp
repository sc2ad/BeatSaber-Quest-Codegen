// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.IDtdInfo
#include "System/Xml/IDtdInfo.hpp"
// Including type: System.Xml.Schema.SchemaType
#include "System/Xml/Schema/SchemaType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: IDtdAttributeListInfo
  class IDtdAttributeListInfo;
  // Forward declaring type: IDtdEntityInfo
  class IDtdEntityInfo;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: SchemaEntity
  class SchemaEntity;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: SchemaNotation
  class SchemaNotation;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::SchemaInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::SchemaInfo*, "System.Xml.Schema", "SchemaInfo");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.SchemaInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class SchemaInfo : public ::Il2CppObject/*, public ::System::Xml::IDtdInfo*/ {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> elementDecls
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* elementDecls;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> undeclaredElementDecls
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* undeclaredElementDecls;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> generalEntities
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* generalEntities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> parameterEntities
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* parameterEntities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>*) == 0x8);
    // private System.Xml.XmlQualifiedName docTypeName
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::XmlQualifiedName* docTypeName;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.String internalDtdSubset
    // Size: 0x8
    // Offset: 0x38
    ::StringW internalDtdSubset;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean hasNonCDataAttributes
    // Size: 0x1
    // Offset: 0x40
    bool hasNonCDataAttributes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasDefaultAttributes
    // Size: 0x1
    // Offset: 0x41
    bool hasDefaultAttributes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasDefaultAttributes and: targetNamespaces
    char __padding7[0x6] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.Boolean> targetNamespaces
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, bool>* targetNamespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, bool>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaAttDef> attributeDecls
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaAttDef*>* attributeDecls;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaAttDef*>*) == 0x8);
    // private System.Xml.Schema.SchemaType schemaType
    // Size: 0x4
    // Offset: 0x58
    ::System::Xml::Schema::SchemaType schemaType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaType) == 0x4);
    // Padding between fields: schemaType and: elementDeclsByType
    char __padding10[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> elementDeclsByType
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* elementDeclsByType;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Xml.Schema.SchemaNotation> notations
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>* notations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IDtdInfo
    operator ::System::Xml::IDtdInfo() noexcept {
      return *reinterpret_cast<::System::Xml::IDtdInfo*>(this);
    }
    // Creating interface conversion operator: i_IDtdInfo
    inline ::System::Xml::IDtdInfo* i_IDtdInfo() noexcept {
      return reinterpret_cast<::System::Xml::IDtdInfo*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> elementDecls
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*& dyn_elementDecls();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> undeclaredElementDecls
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*& dyn_undeclaredElementDecls();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> generalEntities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>*& dyn_generalEntities();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> parameterEntities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>*& dyn_parameterEntities();
    // Get instance field reference: private System.Xml.XmlQualifiedName docTypeName
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlQualifiedName*& dyn_docTypeName();
    // Get instance field reference: private System.String internalDtdSubset
    [[deprecated("Use field access instead!")]] ::StringW& dyn_internalDtdSubset();
    // Get instance field reference: private System.Boolean hasNonCDataAttributes
    [[deprecated("Use field access instead!")]] bool& dyn_hasNonCDataAttributes();
    // Get instance field reference: private System.Boolean hasDefaultAttributes
    [[deprecated("Use field access instead!")]] bool& dyn_hasDefaultAttributes();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Boolean> targetNamespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, bool>*& dyn_targetNamespaces();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaAttDef> attributeDecls
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaAttDef*>*& dyn_attributeDecls();
    // Get instance field reference: private System.Xml.Schema.SchemaType schemaType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaType& dyn_schemaType();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> elementDeclsByType
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>*& dyn_elementDeclsByType();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Xml.Schema.SchemaNotation> notations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>*& dyn_notations();
    // public System.Void set_DocTypeName(System.Xml.XmlQualifiedName value)
    // Offset: 0x1D1FC44
    void set_DocTypeName(::System::Xml::XmlQualifiedName* value);
    // System.Void set_InternalDtdSubset(System.String value)
    // Offset: 0x1D1FC4C
    void set_InternalDtdSubset(::StringW value);
    // System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> get_ElementDecls()
    // Offset: 0x1D1FC54
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* get_ElementDecls();
    // System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaElementDecl> get_UndeclaredElementDecls()
    // Offset: 0x1D1FC5C
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* get_UndeclaredElementDecls();
    // System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> get_GeneralEntities()
    // Offset: 0x1D1FC64
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* get_GeneralEntities();
    // System.Collections.Generic.Dictionary`2<System.Xml.XmlQualifiedName,System.Xml.Schema.SchemaEntity> get_ParameterEntities()
    // Offset: 0x1D1FCD8
    ::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* get_ParameterEntities();
    // System.Xml.Schema.SchemaType get_SchemaType()
    // Offset: 0x1D1FD4C
    ::System::Xml::Schema::SchemaType get_SchemaType();
    // System.Void set_SchemaType(System.Xml.Schema.SchemaType value)
    // Offset: 0x1D1FD54
    void set_SchemaType(::System::Xml::Schema::SchemaType value);
    // System.Collections.Generic.Dictionary`2<System.String,System.Xml.Schema.SchemaNotation> get_Notations()
    // Offset: 0x1D1FD5C
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>* get_Notations();
    // private System.Boolean System.Xml.IDtdInfo.get_HasDefaultAttributes()
    // Offset: 0x1D1FF58
    bool System_Xml_IDtdInfo_get_HasDefaultAttributes();
    // private System.Boolean System.Xml.IDtdInfo.get_HasNonCDataAttributes()
    // Offset: 0x1D1FF60
    bool System_Xml_IDtdInfo_get_HasNonCDataAttributes();
    // private System.Xml.XmlQualifiedName System.Xml.IDtdInfo.get_Name()
    // Offset: 0x1D200DC
    ::System::Xml::XmlQualifiedName* System_Xml_IDtdInfo_get_Name();
    // private System.String System.Xml.IDtdInfo.get_InternalDtdSubset()
    // Offset: 0x1D200E4
    ::StringW System_Xml_IDtdInfo_get_InternalDtdSubset();
    // System.Void .ctor()
    // Offset: 0x1D1FAFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SchemaInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::SchemaInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SchemaInfo*, creationType>()));
    }
    // System.Void Finish()
    // Offset: 0x1D1FDD0
    void Finish();
    // private System.Xml.IDtdAttributeListInfo System.Xml.IDtdInfo.LookupAttributeList(System.String prefix, System.String localName)
    // Offset: 0x1D1FF68
    ::System::Xml::IDtdAttributeListInfo* System_Xml_IDtdInfo_LookupAttributeList(::StringW prefix, ::StringW localName);
    // private System.Xml.IDtdEntityInfo System.Xml.IDtdInfo.LookupEntity(System.String name)
    // Offset: 0x1D2002C
    ::System::Xml::IDtdEntityInfo* System_Xml_IDtdInfo_LookupEntity(::StringW name);
  }; // System.Xml.Schema.SchemaInfo
  #pragma pack(pop)
  static check_size<sizeof(SchemaInfo), 104 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>*)> __System_Xml_Schema_SchemaInfoSizeCheck;
  static_assert(sizeof(SchemaInfo) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::set_DocTypeName
// Il2CppName: set_DocTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaInfo::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::SchemaInfo::set_DocTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "set_DocTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::set_InternalDtdSubset
// Il2CppName: set_InternalDtdSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaInfo::*)(::StringW)>(&System::Xml::Schema::SchemaInfo::set_InternalDtdSubset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "set_InternalDtdSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_ElementDecls
// Il2CppName: get_ElementDecls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_ElementDecls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_ElementDecls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_UndeclaredElementDecls
// Il2CppName: get_UndeclaredElementDecls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaElementDecl*>* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_UndeclaredElementDecls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_UndeclaredElementDecls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_GeneralEntities
// Il2CppName: get_GeneralEntities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_GeneralEntities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_GeneralEntities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_ParameterEntities
// Il2CppName: get_ParameterEntities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::System::Xml::XmlQualifiedName*, ::System::Xml::Schema::SchemaEntity*>* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_ParameterEntities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_ParameterEntities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaType (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::set_SchemaType
// Il2CppName: set_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaInfo::*)(::System::Xml::Schema::SchemaType)>(&System::Xml::Schema::SchemaInfo::set_SchemaType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "set_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::get_Notations
// Il2CppName: get_Notations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::Schema::SchemaNotation*>* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::get_Notations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "get_Notations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_HasDefaultAttributes
// Il2CppName: System.Xml.IDtdInfo.get_HasDefaultAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_HasDefaultAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.get_HasDefaultAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_HasNonCDataAttributes
// Il2CppName: System.Xml.IDtdInfo.get_HasNonCDataAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_HasNonCDataAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.get_HasNonCDataAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_Name
// Il2CppName: System.Xml.IDtdInfo.get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_InternalDtdSubset
// Il2CppName: System.Xml.IDtdInfo.get_InternalDtdSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_get_InternalDtdSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.get_InternalDtdSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::SchemaInfo::*)()>(&System::Xml::Schema::SchemaInfo::Finish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_LookupAttributeList
// Il2CppName: System.Xml.IDtdInfo.LookupAttributeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdAttributeListInfo* (System::Xml::Schema::SchemaInfo::*)(::StringW, ::StringW)>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_LookupAttributeList)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.LookupAttributeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_LookupEntity
// Il2CppName: System.Xml.IDtdInfo.LookupEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdEntityInfo* (System::Xml::Schema::SchemaInfo::*)(::StringW)>(&System::Xml::Schema::SchemaInfo::System_Xml_IDtdInfo_LookupEntity)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::SchemaInfo*), "System.Xml.IDtdInfo.LookupEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
