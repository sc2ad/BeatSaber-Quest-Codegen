// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.Xml.Schema.XmlSeverityType
#include "System/Xml/Schema/XmlSeverityType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: ValidationEventArgs
  class ValidationEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::ValidationEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::ValidationEventArgs*, "System.Xml.Schema", "ValidationEventArgs");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.ValidationEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ValidationEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Xml.Schema.XmlSchemaException ex
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaException* ex;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaException*) == 0x8);
    // private System.Xml.Schema.XmlSeverityType severity
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::XmlSeverityType severity;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSeverityType) == 0x4);
    public:
    // Get instance field reference: private System.Xml.Schema.XmlSchemaException ex
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaException*& dyn_ex();
    // Get instance field reference: private System.Xml.Schema.XmlSeverityType severity
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSeverityType& dyn_severity();
    // public System.Xml.Schema.XmlSeverityType get_Severity()
    // Offset: 0x1D20F88
    ::System::Xml::Schema::XmlSeverityType get_Severity();
    // public System.Xml.Schema.XmlSchemaException get_Exception()
    // Offset: 0x1D20F90
    ::System::Xml::Schema::XmlSchemaException* get_Exception();
  }; // System.Xml.Schema.ValidationEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ValidationEventArgs), 24 + sizeof(::System::Xml::Schema::XmlSeverityType)> __System_Xml_Schema_ValidationEventArgsSizeCheck;
  static_assert(sizeof(ValidationEventArgs) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::ValidationEventArgs::get_Severity
// Il2CppName: get_Severity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSeverityType (System::Xml::Schema::ValidationEventArgs::*)()>(&System::Xml::Schema::ValidationEventArgs::get_Severity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ValidationEventArgs*), "get_Severity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::ValidationEventArgs::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaException* (System::Xml::Schema::ValidationEventArgs::*)()>(&System::Xml::Schema::ValidationEventArgs::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::ValidationEventArgs*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
