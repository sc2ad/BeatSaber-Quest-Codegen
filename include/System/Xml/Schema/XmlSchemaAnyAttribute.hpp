// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaAnnotated
#include "System/Xml/Schema/XmlSchemaAnnotated.hpp"
// Including type: System.Xml.Schema.XmlSchemaContentProcessing
#include "System/Xml/Schema/XmlSchemaContentProcessing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: NamespaceList
  class NamespaceList;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaAnyAttribute
  class XmlSchemaAnyAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaAnyAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaAnyAttribute*, "System.Xml.Schema", "XmlSchemaAnyAttribute");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaAnyAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaAnyAttribute : public ::System::Xml::Schema::XmlSchemaAnnotated {
    public:
    public:
    // private System.String ns
    // Size: 0x8
    // Offset: 0x10
    ::StringW ns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaContentProcessing processContents
    // Size: 0x4
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaContentProcessing processContents;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentProcessing) == 0x4);
    // Padding between fields: processContents and: namespaceList
    char __padding1[0x4] = {};
    // private System.Xml.Schema.NamespaceList namespaceList
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Schema::NamespaceList* namespaceList;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::NamespaceList*) == 0x8);
    public:
    // Get instance field reference: private System.String ns
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ns();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentProcessing processContents
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaContentProcessing& dyn_processContents();
    // Get instance field reference: private System.Xml.Schema.NamespaceList namespaceList
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::NamespaceList*& dyn_namespaceList();
    // public System.Void set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing value)
    // Offset: 0x2108C48
    void set_ProcessContents(::System::Xml::Schema::XmlSchemaContentProcessing value);
    // System.Void BuildNamespaceList(System.String targetNamespace)
    // Offset: 0x2108C50
    void BuildNamespaceList(::StringW targetNamespace);
    // public System.Void .ctor()
    // Offset: 0x2108CD8
    // Implemented from: System.Xml.Schema.XmlSchemaAnnotated
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaAnyAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaAnyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaAnyAttribute*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaAnyAttribute
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaAnyAttribute), 32 + sizeof(::System::Xml::Schema::NamespaceList*)> __System_Xml_Schema_XmlSchemaAnyAttributeSizeCheck;
  static_assert(sizeof(XmlSchemaAnyAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAnyAttribute::set_ProcessContents
// Il2CppName: set_ProcessContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAnyAttribute::*)(::System::Xml::Schema::XmlSchemaContentProcessing)>(&System::Xml::Schema::XmlSchemaAnyAttribute::set_ProcessContents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaContentProcessing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAnyAttribute*), "set_ProcessContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAnyAttribute::BuildNamespaceList
// Il2CppName: BuildNamespaceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAnyAttribute::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAnyAttribute::BuildNamespaceList)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAnyAttribute*), "BuildNamespaceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAnyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
