// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XsdDateTime
#include "System/Xml/Schema/XsdDateTime.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Xml.Schema.XsdDateTime/System.Xml.Schema.DateTimeTypeCode
#include "System/Xml/Schema/XsdDateTime_DateTimeTypeCode.hpp"
// Including type: System.Xml.Schema.XsdDateTime/System.Xml.Schema.XsdDateTimeKind
#include "System/Xml/Schema/XsdDateTime_XsdDateTimeKind.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XsdDateTimeFlags
  struct XsdDateTimeFlags;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XsdDateTime::Parser, "System.Xml.Schema", "XsdDateTime/Parser");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.Schema.XsdDateTime/System.Xml.Schema.Parser
  // [TokenAttribute] Offset: FFFFFFFF
  struct XsdDateTime::Parser/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Xml.Schema.XsdDateTime/System.Xml.Schema.DateTimeTypeCode typeCode
    // Size: 0x4
    // Offset: 0x0
    ::System::Xml::Schema::XsdDateTime::DateTimeTypeCode typeCode;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XsdDateTime::DateTimeTypeCode) == 0x4);
    // public System.Int32 year
    // Size: 0x4
    // Offset: 0x4
    int year;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 month
    // Size: 0x4
    // Offset: 0x8
    int month;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 day
    // Size: 0x4
    // Offset: 0xC
    int day;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 hour
    // Size: 0x4
    // Offset: 0x10
    int hour;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minute
    // Size: 0x4
    // Offset: 0x14
    int minute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 second
    // Size: 0x4
    // Offset: 0x18
    int second;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 fraction
    // Size: 0x4
    // Offset: 0x1C
    int fraction;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Xml.Schema.XsdDateTime/System.Xml.Schema.XsdDateTimeKind kind
    // Size: 0x4
    // Offset: 0x20
    ::System::Xml::Schema::XsdDateTime::XsdDateTimeKind kind;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XsdDateTime::XsdDateTimeKind) == 0x4);
    // public System.Int32 zoneHour
    // Size: 0x4
    // Offset: 0x24
    int zoneHour;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 zoneMinute
    // Size: 0x4
    // Offset: 0x28
    int zoneMinute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: zoneMinute and: text
    char __padding10[0x4] = {};
    // private System.String text
    // Size: 0x8
    // Offset: 0x30
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 length
    // Size: 0x4
    // Offset: 0x38
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Parser
    constexpr Parser(::System::Xml::Schema::XsdDateTime::DateTimeTypeCode typeCode_ = {}, int year_ = {}, int month_ = {}, int day_ = {}, int hour_ = {}, int minute_ = {}, int second_ = {}, int fraction_ = {}, ::System::Xml::Schema::XsdDateTime::XsdDateTimeKind kind_ = {}, int zoneHour_ = {}, int zoneMinute_ = {}, ::StringW text_ = {}, int length_ = {}) noexcept : typeCode{typeCode_}, year{year_}, month{month_}, day{day_}, hour{hour_}, minute{minute_}, second{second_}, fraction{fraction_}, kind{kind_}, zoneHour{zoneHour_}, zoneMinute{zoneMinute_}, text{text_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private System.Int32[] Power10
    static ::ArrayW<int> _get_Power10();
    // Set static field: static private System.Int32[] Power10
    static void _set_Power10(::ArrayW<int> value);
    // Get instance field reference: public System.Xml.Schema.XsdDateTime/System.Xml.Schema.DateTimeTypeCode typeCode
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XsdDateTime::DateTimeTypeCode& dyn_typeCode();
    // Get instance field reference: public System.Int32 year
    [[deprecated("Use field access instead!")]] int& dyn_year();
    // Get instance field reference: public System.Int32 month
    [[deprecated("Use field access instead!")]] int& dyn_month();
    // Get instance field reference: public System.Int32 day
    [[deprecated("Use field access instead!")]] int& dyn_day();
    // Get instance field reference: public System.Int32 hour
    [[deprecated("Use field access instead!")]] int& dyn_hour();
    // Get instance field reference: public System.Int32 minute
    [[deprecated("Use field access instead!")]] int& dyn_minute();
    // Get instance field reference: public System.Int32 second
    [[deprecated("Use field access instead!")]] int& dyn_second();
    // Get instance field reference: public System.Int32 fraction
    [[deprecated("Use field access instead!")]] int& dyn_fraction();
    // Get instance field reference: public System.Xml.Schema.XsdDateTime/System.Xml.Schema.XsdDateTimeKind kind
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XsdDateTime::XsdDateTimeKind& dyn_kind();
    // Get instance field reference: public System.Int32 zoneHour
    [[deprecated("Use field access instead!")]] int& dyn_zoneHour();
    // Get instance field reference: public System.Int32 zoneMinute
    [[deprecated("Use field access instead!")]] int& dyn_zoneMinute();
    // Get instance field reference: private System.String text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_text();
    // Get instance field reference: private System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
    // static private System.Void .cctor()
    // Offset: 0x2114DA8
    static void _cctor();
    // public System.Boolean Parse(System.String text, System.Xml.Schema.XsdDateTimeFlags kinds)
    // Offset: 0x2111FD8
    bool Parse(::StringW text, ::System::Xml::Schema::XsdDateTimeFlags kinds);
    // private System.Boolean ParseDate(System.Int32 start)
    // Offset: 0x211439C
    bool ParseDate(int start);
    // private System.Boolean ParseTimeAndZoneAndWhitespace(System.Int32 start)
    // Offset: 0x21145B8
    bool ParseTimeAndZoneAndWhitespace(int start);
    // private System.Boolean ParseTimeAndWhitespace(System.Int32 start)
    // Offset: 0x2114840
    bool ParseTimeAndWhitespace(int start);
    // private System.Boolean ParseTime(ref System.Int32 start)
    // Offset: 0x2114A7C
    bool ParseTime(ByRef<int> start);
    // private System.Boolean ParseZoneAndWhitespace(System.Int32 start)
    // Offset: 0x2114600
    bool ParseZoneAndWhitespace(int start);
    // private System.Boolean Parse4Dig(System.Int32 start, ref System.Int32 num)
    // Offset: 0x211489C
    bool Parse4Dig(int start, ByRef<int> num);
    // private System.Boolean Parse2Dig(System.Int32 start, ref System.Int32 num)
    // Offset: 0x21149C8
    bool Parse2Dig(int start, ByRef<int> num);
    // private System.Boolean ParseChar(System.Int32 start, System.Char ch)
    // Offset: 0x2114568
    bool ParseChar(int start, ::Il2CppChar ch);
    // static private System.Boolean Test(System.Xml.Schema.XsdDateTimeFlags left, System.Xml.Schema.XsdDateTimeFlags right)
    // Offset: 0x2114390
    static bool Test(::System::Xml::Schema::XsdDateTimeFlags left, ::System::Xml::Schema::XsdDateTimeFlags right);
  }; // System.Xml.Schema.XsdDateTime/System.Xml.Schema.Parser
  #pragma pack(pop)
  static check_size<sizeof(XsdDateTime::Parser), 56 + sizeof(int)> __System_Xml_Schema_XsdDateTime_ParserSizeCheck;
  static_assert(sizeof(XsdDateTime::Parser) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XsdDateTime::Parser::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(::StringW, ::System::Xml::Schema::XsdDateTimeFlags)>(&System::Xml::Schema::XsdDateTime::Parser::Parse)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* kinds = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdDateTimeFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, kinds});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseDate
// Il2CppName: ParseDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int)>(&System::Xml::Schema::XsdDateTime::Parser::ParseDate)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseTimeAndZoneAndWhitespace
// Il2CppName: ParseTimeAndZoneAndWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int)>(&System::Xml::Schema::XsdDateTime::Parser::ParseTimeAndZoneAndWhitespace)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseTimeAndZoneAndWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseTimeAndWhitespace
// Il2CppName: ParseTimeAndWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int)>(&System::Xml::Schema::XsdDateTime::Parser::ParseTimeAndWhitespace)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseTimeAndWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseTime
// Il2CppName: ParseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(ByRef<int>)>(&System::Xml::Schema::XsdDateTime::Parser::ParseTime)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseZoneAndWhitespace
// Il2CppName: ParseZoneAndWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int)>(&System::Xml::Schema::XsdDateTime::Parser::ParseZoneAndWhitespace)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseZoneAndWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::Parse4Dig
// Il2CppName: Parse4Dig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int, ByRef<int>)>(&System::Xml::Schema::XsdDateTime::Parser::Parse4Dig)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "Parse4Dig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, num});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::Parse2Dig
// Il2CppName: Parse2Dig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int, ByRef<int>)>(&System::Xml::Schema::XsdDateTime::Parser::Parse2Dig)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "Parse2Dig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, num});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::ParseChar
// Il2CppName: ParseChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XsdDateTime::Parser::*)(int, ::Il2CppChar)>(&System::Xml::Schema::XsdDateTime::Parser::ParseChar)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "ParseChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, ch});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XsdDateTime::Parser::Test
// Il2CppName: Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Xml::Schema::XsdDateTimeFlags, ::System::Xml::Schema::XsdDateTimeFlags)>(&System::Xml::Schema::XsdDateTime::Parser::Test)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdDateTimeFlags")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XsdDateTimeFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XsdDateTime::Parser), "Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
