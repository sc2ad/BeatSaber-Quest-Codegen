// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlListConverter
#include "System/Xml/Schema/XmlListConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Skipping declaration: XmlValueConverter because it is already included!
  // Skipping declaration: XmlBaseConverter because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IXmlNamespaceResolver
  class IXmlNamespaceResolver;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlAnyListConverter
  class XmlAnyListConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlAnyListConverter);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlAnyListConverter*, "System.Xml.Schema", "XmlAnyListConverter");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlAnyListConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlAnyListConverter : public ::System::Xml::Schema::XmlListConverter {
    public:
    // Get static field: static public readonly System.Xml.Schema.XmlValueConverter ItemList
    static ::System::Xml::Schema::XmlValueConverter* _get_ItemList();
    // Set static field: static public readonly System.Xml.Schema.XmlValueConverter ItemList
    static void _set_ItemList(::System::Xml::Schema::XmlValueConverter* value);
    // Get static field: static public readonly System.Xml.Schema.XmlValueConverter AnyAtomicList
    static ::System::Xml::Schema::XmlValueConverter* _get_AnyAtomicList();
    // Set static field: static public readonly System.Xml.Schema.XmlValueConverter AnyAtomicList
    static void _set_AnyAtomicList(::System::Xml::Schema::XmlValueConverter* value);
    // protected System.Void .ctor(System.Xml.Schema.XmlBaseConverter atomicConverter)
    // Offset: 0x1D253A8
    // Implemented from: System.Xml.Schema.XmlListConverter
    // Base method: System.Void XmlListConverter::.ctor(System.Xml.Schema.XmlBaseConverter atomicConverter)
    // Base method: System.Void XmlBaseConverter::.ctor(System.Xml.Schema.XmlBaseConverter atomicConverter)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlAnyListConverter* New_ctor(::System::Xml::Schema::XmlBaseConverter* atomicConverter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlAnyListConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlAnyListConverter*, creationType>(atomicConverter)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1D25604
    // Implemented from: System.Xml.Schema.XmlBaseConverter
    // Base method: System.Void XmlBaseConverter::.cctor()
    static void _cctor();
    // public override System.Object ChangeType(System.Object value, System.Type destinationType, System.Xml.IXmlNamespaceResolver nsResolver)
    // Offset: 0x1D253B0
    // Implemented from: System.Xml.Schema.XmlListConverter
    // Base method: System.Object XmlListConverter::ChangeType(System.Object value, System.Type destinationType, System.Xml.IXmlNamespaceResolver nsResolver)
    ::Il2CppObject* ChangeType(::Il2CppObject* value, ::System::Type* destinationType, ::System::Xml::IXmlNamespaceResolver* nsResolver);
  }; // System.Xml.Schema.XmlAnyListConverter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlAnyListConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Schema::XmlAnyListConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Xml::Schema::XmlAnyListConverter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlAnyListConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlAnyListConverter::ChangeType
// Il2CppName: ChangeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::Schema::XmlAnyListConverter::*)(::Il2CppObject*, ::System::Type*, ::System::Xml::IXmlNamespaceResolver*)>(&System::Xml::Schema::XmlAnyListConverter::ChangeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* destinationType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* nsResolver = &::il2cpp_utils::GetClassFromName("System.Xml", "IXmlNamespaceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlAnyListConverter*), "ChangeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, destinationType, nsResolver});
  }
};
