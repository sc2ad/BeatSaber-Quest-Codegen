// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.IncrementalReadDecoder
#include "System/Xml/IncrementalReadDecoder.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: BinHexDecoder
  class BinHexDecoder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::BinHexDecoder);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::BinHexDecoder*, "System.Xml", "BinHexDecoder");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.BinHexDecoder
  // [TokenAttribute] Offset: FFFFFFFF
  class BinHexDecoder : public ::System::Xml::IncrementalReadDecoder {
    public:
    public:
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 curIndex
    // Size: 0x4
    // Offset: 0x18
    int curIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 endIndex
    // Size: 0x4
    // Offset: 0x1C
    int endIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasHalfByteCached
    // Size: 0x1
    // Offset: 0x20
    bool hasHalfByteCached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte cachedHalfByte
    // Size: 0x1
    // Offset: 0x21
    uint8_t cachedHalfByte;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: private System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // Get instance field reference: private System.Int32 curIndex
    [[deprecated("Use field access instead!")]] int& dyn_curIndex();
    // Get instance field reference: private System.Int32 endIndex
    [[deprecated("Use field access instead!")]] int& dyn_endIndex();
    // Get instance field reference: private System.Boolean hasHalfByteCached
    [[deprecated("Use field access instead!")]] bool& dyn_hasHalfByteCached();
    // Get instance field reference: private System.Byte cachedHalfByte
    [[deprecated("Use field access instead!")]] uint8_t& dyn_cachedHalfByte();
    // static public System.Byte[] Decode(System.Char[] chars, System.Boolean allowOddChars)
    // Offset: 0x1ABF2EC
    static ::ArrayW<uint8_t> Decode(::ArrayW<::Il2CppChar> chars, bool allowOddChars);
    // static private System.Void Decode(System.Char* pChars, System.Char* pCharsEndPos, System.Byte* pBytes, System.Byte* pBytesEndPos, ref System.Boolean hasHalfByteCached, ref System.Byte cachedHalfByte, out System.Int32 charsDecoded, out System.Int32 bytesDecoded)
    // Offset: 0x1ABF0F4
    static void Decode(::Il2CppChar* pChars, ::Il2CppChar* pCharsEndPos, uint8_t* pBytes, uint8_t* pBytesEndPos, ByRef<bool> hasHalfByteCached, ByRef<uint8_t> cachedHalfByte, ByRef<int> charsDecoded, ByRef<int> bytesDecoded);
    // override System.Boolean get_IsFull()
    // Offset: 0x1ABEF5C
    // Implemented from: System.Xml.IncrementalReadDecoder
    // Base method: System.Boolean IncrementalReadDecoder::get_IsFull()
    bool get_IsFull();
    // override System.Int32 Decode(System.Char[] chars, System.Int32 startPos, System.Int32 len)
    // Offset: 0x1ABEF6C
    // Implemented from: System.Xml.IncrementalReadDecoder
    // Base method: System.Int32 IncrementalReadDecoder::Decode(System.Char[] chars, System.Int32 startPos, System.Int32 len)
    int Decode(::ArrayW<::Il2CppChar> chars, int startPos, int len);
  }; // System.Xml.BinHexDecoder
  #pragma pack(pop)
  static check_size<sizeof(BinHexDecoder), 33 + sizeof(uint8_t)> __System_Xml_BinHexDecoderSizeCheck;
  static_assert(sizeof(BinHexDecoder) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::BinHexDecoder::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<::Il2CppChar>, bool)>(&System::Xml::BinHexDecoder::Decode)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* allowOddChars = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinHexDecoder*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, allowOddChars});
  }
};
// Writing MetadataGetter for method: System::Xml::BinHexDecoder::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Il2CppChar*, uint8_t*, uint8_t*, ByRef<bool>, ByRef<uint8_t>, ByRef<int>, ByRef<int>)>(&System::Xml::BinHexDecoder::Decode)> {
  static const MethodInfo* get() {
    static auto* pChars = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* pCharsEndPos = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* pBytes = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* pBytesEndPos = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* hasHalfByteCached = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* cachedHalfByte = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* charsDecoded = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bytesDecoded = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinHexDecoder*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pChars, pCharsEndPos, pBytes, pBytesEndPos, hasHalfByteCached, cachedHalfByte, charsDecoded, bytesDecoded});
  }
};
// Writing MetadataGetter for method: System::Xml::BinHexDecoder::get_IsFull
// Il2CppName: get_IsFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::BinHexDecoder::*)()>(&System::Xml::BinHexDecoder::get_IsFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinHexDecoder*), "get_IsFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::BinHexDecoder::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::BinHexDecoder::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::BinHexDecoder::Decode)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BinHexDecoder*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startPos, len});
  }
};
