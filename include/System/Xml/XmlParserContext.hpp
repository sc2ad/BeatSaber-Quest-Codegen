// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlParserContext
  class XmlParserContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlParserContext);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlParserContext*, "System.Xml", "XmlParserContext");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlParserContext
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlParserContext : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.XmlNameTable _nt
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNameTable* nt;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.XmlNamespaceManager _nsMgr
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNamespaceManager* nsMgr;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamespaceManager*) == 0x8);
    // private System.String _docTypeName
    // Size: 0x8
    // Offset: 0x20
    ::StringW docTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _pubId
    // Size: 0x8
    // Offset: 0x28
    ::StringW pubId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _sysId
    // Size: 0x8
    // Offset: 0x30
    ::StringW sysId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _internalSubset
    // Size: 0x8
    // Offset: 0x38
    ::StringW internalSubset;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _xmlLang
    // Size: 0x8
    // Offset: 0x40
    ::StringW xmlLang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlSpace _xmlSpace
    // Size: 0x4
    // Offset: 0x48
    ::System::Xml::XmlSpace xmlSpace;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlSpace) == 0x4);
    // Padding between fields: xmlSpace and: baseURI
    char __padding7[0x4] = {};
    // private System.String _baseURI
    // Size: 0x8
    // Offset: 0x50
    ::StringW baseURI;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Text.Encoding _encoding
    // Size: 0x8
    // Offset: 0x58
    ::System::Text::Encoding* encoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    public:
    // Get instance field reference: private System.Xml.XmlNameTable _nt
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn__nt();
    // Get instance field reference: private System.Xml.XmlNamespaceManager _nsMgr
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamespaceManager*& dyn__nsMgr();
    // Get instance field reference: private System.String _docTypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__docTypeName();
    // Get instance field reference: private System.String _pubId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__pubId();
    // Get instance field reference: private System.String _sysId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sysId();
    // Get instance field reference: private System.String _internalSubset
    [[deprecated("Use field access instead!")]] ::StringW& dyn__internalSubset();
    // Get instance field reference: private System.String _xmlLang
    [[deprecated("Use field access instead!")]] ::StringW& dyn__xmlLang();
    // Get instance field reference: private System.Xml.XmlSpace _xmlSpace
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlSpace& dyn__xmlSpace();
    // Get instance field reference: private System.String _baseURI
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseURI();
    // Get instance field reference: private System.Text.Encoding _encoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn__encoding();
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x15E601C
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Xml.XmlNamespaceManager get_NamespaceManager()
    // Offset: 0x15E6024
    ::System::Xml::XmlNamespaceManager* get_NamespaceManager();
    // public System.String get_DocTypeName()
    // Offset: 0x15E602C
    ::StringW get_DocTypeName();
    // public System.String get_PublicId()
    // Offset: 0x15E6034
    ::StringW get_PublicId();
    // public System.String get_SystemId()
    // Offset: 0x15E603C
    ::StringW get_SystemId();
    // public System.String get_BaseURI()
    // Offset: 0x15E6044
    ::StringW get_BaseURI();
    // public System.String get_InternalSubset()
    // Offset: 0x15E604C
    ::StringW get_InternalSubset();
    // public System.String get_XmlLang()
    // Offset: 0x15E6054
    ::StringW get_XmlLang();
    // public System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0x15E605C
    ::System::Xml::XmlSpace get_XmlSpace();
    // public System.Text.Encoding get_Encoding()
    // Offset: 0x15E6064
    ::System::Text::Encoding* get_Encoding();
    // System.Boolean get_HasDtdInfo()
    // Offset: 0x15E606C
    bool get_HasDtdInfo();
    // public System.Void .ctor(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace)
    // Offset: 0x15DFB68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlParserContext* New_ctor(::System::Xml::XmlNameTable* nt, ::System::Xml::XmlNamespaceManager* nsMgr, ::StringW docTypeName, ::StringW pubId, ::StringW sysId, ::StringW internalSubset, ::StringW baseURI, ::StringW xmlLang, ::System::Xml::XmlSpace xmlSpace) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlParserContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlParserContext*, creationType>(nt, nsMgr, docTypeName, pubId, sysId, internalSubset, baseURI, xmlLang, xmlSpace)));
    }
    // public System.Void .ctor(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc)
    // Offset: 0x15E5E44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlParserContext* New_ctor(::System::Xml::XmlNameTable* nt, ::System::Xml::XmlNamespaceManager* nsMgr, ::StringW docTypeName, ::StringW pubId, ::StringW sysId, ::StringW internalSubset, ::StringW baseURI, ::StringW xmlLang, ::System::Xml::XmlSpace xmlSpace, ::System::Text::Encoding* enc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlParserContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlParserContext*, creationType>(nt, nsMgr, docTypeName, pubId, sysId, internalSubset, baseURI, xmlLang, xmlSpace, enc)));
    }
  }; // System.Xml.XmlParserContext
  #pragma pack(pop)
  static check_size<sizeof(XmlParserContext), 88 + sizeof(::System::Text::Encoding*)> __System_Xml_XmlParserContextSizeCheck;
  static_assert(sizeof(XmlParserContext) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_NamespaceManager
// Il2CppName: get_NamespaceManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNamespaceManager* (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_NamespaceManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_NamespaceManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_DocTypeName
// Il2CppName: get_DocTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_DocTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_DocTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_PublicId
// Il2CppName: get_PublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_PublicId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_PublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_SystemId
// Il2CppName: get_SystemId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_SystemId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_SystemId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_InternalSubset
// Il2CppName: get_InternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_InternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_InternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_Encoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::get_HasDtdInfo
// Il2CppName: get_HasDtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlParserContext::*)()>(&System::Xml::XmlParserContext::get_HasDtdInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlParserContext*), "get_HasDtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlParserContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlParserContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
