// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: BitStack
  class BitStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::BitStack);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::BitStack*, "System.Xml", "BitStack");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.BitStack
  // [TokenAttribute] Offset: FFFFFFFF
  class BitStack : public ::Il2CppObject {
    public:
    public:
    // private System.UInt32[] bitStack
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint> bitStack;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Int32 stackPos
    // Size: 0x4
    // Offset: 0x18
    int stackPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 curr
    // Size: 0x4
    // Offset: 0x1C
    uint curr;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: private System.UInt32[] bitStack
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_bitStack();
    // Get instance field reference: private System.Int32 stackPos
    [[deprecated("Use field access instead!")]] int& dyn_stackPos();
    // Get instance field reference: private System.UInt32 curr
    [[deprecated("Use field access instead!")]] uint& dyn_curr();
    // public System.Void .ctor()
    // Offset: 0x1ABFB98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::BitStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitStack*, creationType>()));
    }
    // public System.Void PushBit(System.Boolean bit)
    // Offset: 0x1ABFBC4
    void PushBit(bool bit);
    // public System.Boolean PopBit()
    // Offset: 0x1ABFCF4
    bool PopBit();
    // public System.Boolean PeekBit()
    // Offset: 0x1ABFD78
    bool PeekBit();
    // private System.Void PushCurr()
    // Offset: 0x1ABFC00
    void PushCurr();
    // private System.Void PopCurr()
    // Offset: 0x1ABFD28
    void PopCurr();
  }; // System.Xml.BitStack
  #pragma pack(pop)
  static check_size<sizeof(BitStack), 28 + sizeof(uint)> __System_Xml_BitStackSizeCheck;
  static_assert(sizeof(BitStack) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::BitStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::BitStack::PushBit
// Il2CppName: PushBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::BitStack::*)(bool)>(&System::Xml::BitStack::PushBit)> {
  static const MethodInfo* get() {
    static auto* bit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BitStack*), "PushBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bit});
  }
};
// Writing MetadataGetter for method: System::Xml::BitStack::PopBit
// Il2CppName: PopBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::BitStack::*)()>(&System::Xml::BitStack::PopBit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BitStack*), "PopBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::BitStack::PeekBit
// Il2CppName: PeekBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::BitStack::*)()>(&System::Xml::BitStack::PeekBit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BitStack*), "PeekBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::BitStack::PushCurr
// Il2CppName: PushCurr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::BitStack::*)()>(&System::Xml::BitStack::PushCurr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BitStack*), "PushCurr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::BitStack::PopCurr
// Il2CppName: PopCurr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::BitStack::*)()>(&System::Xml::BitStack::PopCurr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::BitStack*), "PopCurr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
