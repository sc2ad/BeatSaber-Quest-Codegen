// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.IDtdParser
#include "System/Xml/IDtdParser.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
// Including type: System.Xml.LineInfo
#include "System/Xml/LineInfo.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IDtdParserAdapter
  class IDtdParserAdapter;
  // Forward declaring type: IDtdParserAdapterWithValidation
  class IDtdParserAdapterWithValidation;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: SchemaInfo
  class SchemaInfo;
  // Forward declaring type: SchemaAttDef
  class SchemaAttDef;
  // Forward declaring type: SchemaElementDecl
  class SchemaElementDecl;
  // Forward declaring type: ParticleContentValidator
  class ParticleContentValidator;
  // Forward declaring type: SchemaEntity
  class SchemaEntity;
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: DtdParser
  class DtdParser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::DtdParser);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::DtdParser*, "System.Xml", "DtdParser");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.DtdParser
  // [TokenAttribute] Offset: FFFFFFFF
  class DtdParser : public ::Il2CppObject/*, public ::System::Xml::IDtdParser*/ {
    public:
    // Nested type: ::System::Xml::DtdParser::Token
    struct Token;
    // Nested type: ::System::Xml::DtdParser::ScanningFunction
    struct ScanningFunction;
    // Nested type: ::System::Xml::DtdParser::LiteralType
    struct LiteralType;
    // Nested type: ::System::Xml::DtdParser::UndeclaredNotation
    class UndeclaredNotation;
    // Nested type: ::System::Xml::DtdParser::ParseElementOnlyContent_LocalFrame
    class ParseElementOnlyContent_LocalFrame;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.DtdParser/System.Xml.ScanningFunction
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScanningFunction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScanningFunction
      constexpr ScanningFunction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction SubsetContent
      static constexpr const int SubsetContent = 0;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction SubsetContent
      static ::System::Xml::DtdParser::ScanningFunction _get_SubsetContent();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction SubsetContent
      static void _set_SubsetContent(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Name
      static constexpr const int Name = 1;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Name
      static ::System::Xml::DtdParser::ScanningFunction _get_Name();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Name
      static void _set_Name(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction QName
      static constexpr const int QName = 2;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction QName
      static ::System::Xml::DtdParser::ScanningFunction _get_QName();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction QName
      static void _set_QName(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Nmtoken
      static constexpr const int Nmtoken = 3;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Nmtoken
      static ::System::Xml::DtdParser::ScanningFunction _get_Nmtoken();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Nmtoken
      static void _set_Nmtoken(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype1
      static constexpr const int Doctype1 = 4;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype1
      static ::System::Xml::DtdParser::ScanningFunction _get_Doctype1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype1
      static void _set_Doctype1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype2
      static constexpr const int Doctype2 = 5;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype2
      static ::System::Xml::DtdParser::ScanningFunction _get_Doctype2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Doctype2
      static void _set_Doctype2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element1
      static constexpr const int Element1 = 6;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element1
      static ::System::Xml::DtdParser::ScanningFunction _get_Element1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element1
      static void _set_Element1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element2
      static constexpr const int Element2 = 7;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element2
      static ::System::Xml::DtdParser::ScanningFunction _get_Element2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element2
      static void _set_Element2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element3
      static constexpr const int Element3 = 8;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element3
      static ::System::Xml::DtdParser::ScanningFunction _get_Element3();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element3
      static void _set_Element3(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element4
      static constexpr const int Element4 = 9;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element4
      static ::System::Xml::DtdParser::ScanningFunction _get_Element4();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element4
      static void _set_Element4(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element5
      static constexpr const int Element5 = 10;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element5
      static ::System::Xml::DtdParser::ScanningFunction _get_Element5();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element5
      static void _set_Element5(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element6
      static constexpr const int Element6 = 11;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element6
      static ::System::Xml::DtdParser::ScanningFunction _get_Element6();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element6
      static void _set_Element6(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element7
      static constexpr const int Element7 = 12;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element7
      static ::System::Xml::DtdParser::ScanningFunction _get_Element7();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Element7
      static void _set_Element7(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist1
      static constexpr const int Attlist1 = 13;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist1
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist1
      static void _set_Attlist1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist2
      static constexpr const int Attlist2 = 14;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist2
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist2
      static void _set_Attlist2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist3
      static constexpr const int Attlist3 = 15;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist3
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist3();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist3
      static void _set_Attlist3(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist4
      static constexpr const int Attlist4 = 16;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist4
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist4();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist4
      static void _set_Attlist4(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist5
      static constexpr const int Attlist5 = 17;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist5
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist5();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist5
      static void _set_Attlist5(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist6
      static constexpr const int Attlist6 = 18;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist6
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist6();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist6
      static void _set_Attlist6(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist7
      static constexpr const int Attlist7 = 19;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist7
      static ::System::Xml::DtdParser::ScanningFunction _get_Attlist7();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Attlist7
      static void _set_Attlist7(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity1
      static constexpr const int Entity1 = 20;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity1
      static ::System::Xml::DtdParser::ScanningFunction _get_Entity1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity1
      static void _set_Entity1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity2
      static constexpr const int Entity2 = 21;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity2
      static ::System::Xml::DtdParser::ScanningFunction _get_Entity2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity2
      static void _set_Entity2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity3
      static constexpr const int Entity3 = 22;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity3
      static ::System::Xml::DtdParser::ScanningFunction _get_Entity3();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Entity3
      static void _set_Entity3(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Notation1
      static constexpr const int Notation1 = 23;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Notation1
      static ::System::Xml::DtdParser::ScanningFunction _get_Notation1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Notation1
      static void _set_Notation1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection1
      static constexpr const int CondSection1 = 24;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection1
      static ::System::Xml::DtdParser::ScanningFunction _get_CondSection1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection1
      static void _set_CondSection1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection2
      static constexpr const int CondSection2 = 25;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection2
      static ::System::Xml::DtdParser::ScanningFunction _get_CondSection2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection2
      static void _set_CondSection2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection3
      static constexpr const int CondSection3 = 26;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection3
      static ::System::Xml::DtdParser::ScanningFunction _get_CondSection3();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction CondSection3
      static void _set_CondSection3(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction Literal
      static constexpr const int Literal = 27;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Literal
      static ::System::Xml::DtdParser::ScanningFunction _get_Literal();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction Literal
      static void _set_Literal(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction SystemId
      static constexpr const int SystemId = 28;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction SystemId
      static ::System::Xml::DtdParser::ScanningFunction _get_SystemId();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction SystemId
      static void _set_SystemId(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId1
      static constexpr const int PublicId1 = 29;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId1
      static ::System::Xml::DtdParser::ScanningFunction _get_PublicId1();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId1
      static void _set_PublicId1(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId2
      static constexpr const int PublicId2 = 30;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId2
      static ::System::Xml::DtdParser::ScanningFunction _get_PublicId2();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction PublicId2
      static void _set_PublicId2(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction ClosingTag
      static constexpr const int ClosingTag = 31;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction ClosingTag
      static ::System::Xml::DtdParser::ScanningFunction _get_ClosingTag();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction ClosingTag
      static void _set_ClosingTag(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction ParamEntitySpace
      static constexpr const int ParamEntitySpace = 32;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction ParamEntitySpace
      static ::System::Xml::DtdParser::ScanningFunction _get_ParamEntitySpace();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction ParamEntitySpace
      static void _set_ParamEntitySpace(::System::Xml::DtdParser::ScanningFunction value);
      // static field const value: static public System.Xml.DtdParser/System.Xml.ScanningFunction None
      static constexpr const int None = 33;
      // Get static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction None
      static ::System::Xml::DtdParser::ScanningFunction _get_None();
      // Set static field: static public System.Xml.DtdParser/System.Xml.ScanningFunction None
      static void _set_None(::System::Xml::DtdParser::ScanningFunction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.DtdParser/System.Xml.ScanningFunction
    #pragma pack(pop)
    static check_size<sizeof(DtdParser::ScanningFunction), 0 + sizeof(int)> __System_Xml_DtdParser_ScanningFunctionSizeCheck;
    static_assert(sizeof(DtdParser::ScanningFunction) == 0x4);
    public:
    // private System.Xml.IDtdParserAdapter readerAdapter
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::IDtdParserAdapter* readerAdapter;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdParserAdapter*) == 0x8);
    // private System.Xml.IDtdParserAdapterWithValidation readerAdapterWithValidation
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::IDtdParserAdapterWithValidation* readerAdapterWithValidation;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdParserAdapterWithValidation*) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.Schema.SchemaInfo schemaInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::Schema::SchemaInfo* schemaInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::SchemaInfo*) == 0x8);
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlCharType) == 0x8);
    // private System.String systemId
    // Size: 0x8
    // Offset: 0x38
    ::StringW systemId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String publicId
    // Size: 0x8
    // Offset: 0x40
    ::StringW publicId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean normalize
    // Size: 0x1
    // Offset: 0x48
    bool normalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean validate
    // Size: 0x1
    // Offset: 0x49
    bool validate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean supportNamespaces
    // Size: 0x1
    // Offset: 0x4A
    bool supportNamespaces;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean v1Compat
    // Size: 0x1
    // Offset: 0x4B
    bool v1Compat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: v1Compat and: chars
    char __padding10[0x4] = {};
    // private System.Char[] chars
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::Il2CppChar> chars;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 charsUsed
    // Size: 0x4
    // Offset: 0x58
    int charsUsed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 curPos
    // Size: 0x4
    // Offset: 0x5C
    int curPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.DtdParser/System.Xml.ScanningFunction scanningFunction
    // Size: 0x4
    // Offset: 0x60
    ::System::Xml::DtdParser::ScanningFunction scanningFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdParser::ScanningFunction) == 0x4);
    // private System.Xml.DtdParser/System.Xml.ScanningFunction nextScaningFunction
    // Size: 0x4
    // Offset: 0x64
    ::System::Xml::DtdParser::ScanningFunction nextScaningFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdParser::ScanningFunction) == 0x4);
    // private System.Xml.DtdParser/System.Xml.ScanningFunction savedScanningFunction
    // Size: 0x4
    // Offset: 0x68
    ::System::Xml::DtdParser::ScanningFunction savedScanningFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdParser::ScanningFunction) == 0x4);
    // private System.Boolean whitespaceSeen
    // Size: 0x1
    // Offset: 0x6C
    bool whitespaceSeen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: whitespaceSeen and: tokenStartPos
    char __padding17[0x3] = {};
    // private System.Int32 tokenStartPos
    // Size: 0x4
    // Offset: 0x70
    int tokenStartPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 colonPos
    // Size: 0x4
    // Offset: 0x74
    int colonPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Text.StringBuilder internalSubsetValueSb
    // Size: 0x8
    // Offset: 0x78
    ::System::Text::StringBuilder* internalSubsetValueSb;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Int32 externalEntitiesDepth
    // Size: 0x4
    // Offset: 0x80
    int externalEntitiesDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentEntityId
    // Size: 0x4
    // Offset: 0x84
    int currentEntityId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean freeFloatingDtd
    // Size: 0x1
    // Offset: 0x88
    bool freeFloatingDtd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasFreeFloatingInternalSubset
    // Size: 0x1
    // Offset: 0x89
    bool hasFreeFloatingInternalSubset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasFreeFloatingInternalSubset and: stringBuilder
    char __padding24[0x6] = {};
    // private System.Text.StringBuilder stringBuilder
    // Size: 0x8
    // Offset: 0x90
    ::System::Text::StringBuilder* stringBuilder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Int32 condSectionDepth
    // Size: 0x4
    // Offset: 0x98
    int condSectionDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.LineInfo literalLineInfo
    // Size: 0x8
    // Offset: 0x9C
    ::System::Xml::LineInfo literalLineInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::LineInfo) == 0x8);
    // private System.Char literalQuoteChar
    // Size: 0x2
    // Offset: 0xA4
    ::Il2CppChar literalQuoteChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: literalQuoteChar and: documentBaseUri
    char __padding28[0x2] = {};
    // private System.String documentBaseUri
    // Size: 0x8
    // Offset: 0xA8
    ::StringW documentBaseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String externalDtdBaseUri
    // Size: 0x8
    // Offset: 0xB0
    ::StringW externalDtdBaseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Xml.DtdParser/System.Xml.UndeclaredNotation> undeclaredNotations
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::DtdParser::UndeclaredNotation*>* undeclaredNotations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::DtdParser::UndeclaredNotation*>*) == 0x8);
    // private System.Int32[] condSectionEntityIds
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int> condSectionEntityIds;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IDtdParser
    operator ::System::Xml::IDtdParser() noexcept {
      return *reinterpret_cast<::System::Xml::IDtdParser*>(this);
    }
    // Creating interface conversion operator: i_IDtdParser
    inline ::System::Xml::IDtdParser* i_IDtdParser() noexcept {
      return reinterpret_cast<::System::Xml::IDtdParser*>(this);
    }
    // Get instance field reference: private System.Xml.IDtdParserAdapter readerAdapter
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdParserAdapter*& dyn_readerAdapter();
    // Get instance field reference: private System.Xml.IDtdParserAdapterWithValidation readerAdapterWithValidation
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdParserAdapterWithValidation*& dyn_readerAdapterWithValidation();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.Schema.SchemaInfo schemaInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::SchemaInfo*& dyn_schemaInfo();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlCharType& dyn_xmlCharType();
    // Get instance field reference: private System.String systemId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_systemId();
    // Get instance field reference: private System.String publicId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_publicId();
    // Get instance field reference: private System.Boolean normalize
    [[deprecated("Use field access instead!")]] bool& dyn_normalize();
    // Get instance field reference: private System.Boolean validate
    [[deprecated("Use field access instead!")]] bool& dyn_validate();
    // Get instance field reference: private System.Boolean supportNamespaces
    [[deprecated("Use field access instead!")]] bool& dyn_supportNamespaces();
    // Get instance field reference: private System.Boolean v1Compat
    [[deprecated("Use field access instead!")]] bool& dyn_v1Compat();
    // Get instance field reference: private System.Char[] chars
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_chars();
    // Get instance field reference: private System.Int32 charsUsed
    [[deprecated("Use field access instead!")]] int& dyn_charsUsed();
    // Get instance field reference: private System.Int32 curPos
    [[deprecated("Use field access instead!")]] int& dyn_curPos();
    // Get instance field reference: private System.Xml.DtdParser/System.Xml.ScanningFunction scanningFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::DtdParser::ScanningFunction& dyn_scanningFunction();
    // Get instance field reference: private System.Xml.DtdParser/System.Xml.ScanningFunction nextScaningFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::DtdParser::ScanningFunction& dyn_nextScaningFunction();
    // Get instance field reference: private System.Xml.DtdParser/System.Xml.ScanningFunction savedScanningFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::DtdParser::ScanningFunction& dyn_savedScanningFunction();
    // Get instance field reference: private System.Boolean whitespaceSeen
    [[deprecated("Use field access instead!")]] bool& dyn_whitespaceSeen();
    // Get instance field reference: private System.Int32 tokenStartPos
    [[deprecated("Use field access instead!")]] int& dyn_tokenStartPos();
    // Get instance field reference: private System.Int32 colonPos
    [[deprecated("Use field access instead!")]] int& dyn_colonPos();
    // Get instance field reference: private System.Text.StringBuilder internalSubsetValueSb
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_internalSubsetValueSb();
    // Get instance field reference: private System.Int32 externalEntitiesDepth
    [[deprecated("Use field access instead!")]] int& dyn_externalEntitiesDepth();
    // Get instance field reference: private System.Int32 currentEntityId
    [[deprecated("Use field access instead!")]] int& dyn_currentEntityId();
    // Get instance field reference: private System.Boolean freeFloatingDtd
    [[deprecated("Use field access instead!")]] bool& dyn_freeFloatingDtd();
    // Get instance field reference: private System.Boolean hasFreeFloatingInternalSubset
    [[deprecated("Use field access instead!")]] bool& dyn_hasFreeFloatingInternalSubset();
    // Get instance field reference: private System.Text.StringBuilder stringBuilder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_stringBuilder();
    // Get instance field reference: private System.Int32 condSectionDepth
    [[deprecated("Use field access instead!")]] int& dyn_condSectionDepth();
    // Get instance field reference: private System.Xml.LineInfo literalLineInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::LineInfo& dyn_literalLineInfo();
    // Get instance field reference: private System.Char literalQuoteChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_literalQuoteChar();
    // Get instance field reference: private System.String documentBaseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_documentBaseUri();
    // Get instance field reference: private System.String externalDtdBaseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_externalDtdBaseUri();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Xml.DtdParser/System.Xml.UndeclaredNotation> undeclaredNotations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Xml::DtdParser::UndeclaredNotation*>*& dyn_undeclaredNotations();
    // Get instance field reference: private System.Int32[] condSectionEntityIds
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_condSectionEntityIds();
    // private System.Boolean get_ParsingInternalSubset()
    // Offset: 0x1AE5994
    bool get_ParsingInternalSubset();
    // private System.Boolean get_IgnoreEntityReferences()
    // Offset: 0x1AE59A4
    bool get_IgnoreEntityReferences();
    // private System.Boolean get_SaveInternalSubsetValue()
    // Offset: 0x1AE59B4
    bool get_SaveInternalSubsetValue();
    // private System.Boolean get_ParsingTopLevelMarkup()
    // Offset: 0x1AE5A84
    bool get_ParsingTopLevelMarkup();
    // private System.Boolean get_SupportNamespaces()
    // Offset: 0x1AE5AB4
    bool get_SupportNamespaces();
    // private System.Boolean get_Normalize()
    // Offset: 0x1AE5ABC
    bool get_Normalize();
    // private System.Int32 get_LineNo()
    // Offset: 0x1AE8B88
    int get_LineNo();
    // private System.Int32 get_LinePos()
    // Offset: 0x1AE8C3C
    int get_LinePos();
    // private System.String get_BaseUriStr()
    // Offset: 0x1AE5C88
    ::StringW get_BaseUriStr();
    // private System.Void .ctor()
    // Offset: 0x1AE4E40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DtdParser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::DtdParser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DtdParser*, creationType>()));
    }
    // static System.Xml.IDtdParser Create()
    // Offset: 0x1AE4EF0
    static ::System::Xml::IDtdParser* Create();
    // private System.Void Initialize(System.Xml.IDtdParserAdapter readerAdapter)
    // Offset: 0x1AE4F48
    void Initialize(::System::Xml::IDtdParserAdapter* readerAdapter);
    // private System.Void InitializeFreeFloatingDtd(System.String baseUri, System.String docTypeName, System.String publicId, System.String systemId, System.String internalSubset, System.Xml.IDtdParserAdapter adapter)
    // Offset: 0x1AE530C
    void InitializeFreeFloatingDtd(::StringW baseUri, ::StringW docTypeName, ::StringW publicId, ::StringW systemId, ::StringW internalSubset, ::System::Xml::IDtdParserAdapter* adapter);
    // private System.Xml.IDtdInfo System.Xml.IDtdParser.ParseInternalDtd(System.Xml.IDtdParserAdapter adapter, System.Boolean saveInternalSubset)
    // Offset: 0x1AE576C
    ::System::Xml::IDtdInfo* System_Xml_IDtdParser_ParseInternalDtd(::System::Xml::IDtdParserAdapter* adapter, bool saveInternalSubset);
    // private System.Xml.IDtdInfo System.Xml.IDtdParser.ParseFreeFloatingDtd(System.String baseUri, System.String docTypeName, System.String publicId, System.String systemId, System.String internalSubset, System.Xml.IDtdParserAdapter adapter)
    // Offset: 0x1AE5964
    ::System::Xml::IDtdInfo* System_Xml_IDtdParser_ParseFreeFloatingDtd(::StringW baseUri, ::StringW docTypeName, ::StringW publicId, ::StringW systemId, ::StringW internalSubset, ::System::Xml::IDtdParserAdapter* adapter);
    // private System.Void Parse(System.Boolean saveInternalSubset)
    // Offset: 0x1AE57A0
    void Parse(bool saveInternalSubset);
    // private System.Void ParseInDocumentDtd(System.Boolean saveInternalSubset)
    // Offset: 0x1AE5B28
    void ParseInDocumentDtd(bool saveInternalSubset);
    // private System.Void ParseFreeFloatingDtd()
    // Offset: 0x1AE5AC4
    void ParseFreeFloatingDtd();
    // private System.Void ParseInternalSubset()
    // Offset: 0x1AE7024
    void ParseInternalSubset();
    // private System.Void ParseExternalSubset()
    // Offset: 0x1AE7028
    void ParseExternalSubset();
    // private System.Void ParseSubset()
    // Offset: 0x1AE71EC
    void ParseSubset();
    // private System.Void ParseAttlistDecl()
    // Offset: 0x1AE74F4
    void ParseAttlistDecl();
    // private System.Void ParseAttlistType(System.Xml.Schema.SchemaAttDef attrDef, System.Xml.Schema.SchemaElementDecl elementDecl, System.Boolean ignoreErrors)
    // Offset: 0x1AE8ED0
    void ParseAttlistType(::System::Xml::Schema::SchemaAttDef* attrDef, ::System::Xml::Schema::SchemaElementDecl* elementDecl, bool ignoreErrors);
    // private System.Void ParseAttlistDefault(System.Xml.Schema.SchemaAttDef attrDef, System.Boolean ignoreErrors)
    // Offset: 0x1AE93F0
    void ParseAttlistDefault(::System::Xml::Schema::SchemaAttDef* attrDef, bool ignoreErrors);
    // private System.Void ParseElementDecl()
    // Offset: 0x1AE7A4C
    void ParseElementDecl();
    // private System.Void ParseElementOnlyContent(System.Xml.Schema.ParticleContentValidator pcv, System.Int32 startParenEntityId)
    // Offset: 0x1AE9B44
    void ParseElementOnlyContent(::System::Xml::Schema::ParticleContentValidator* pcv, int startParenEntityId);
    // private System.Void ParseHowMany(System.Xml.Schema.ParticleContentValidator pcv)
    // Offset: 0x1AE9E68
    void ParseHowMany(::System::Xml::Schema::ParticleContentValidator* pcv);
    // private System.Void ParseElementMixedContent(System.Xml.Schema.ParticleContentValidator pcv, System.Int32 startParenEntityId)
    // Offset: 0x1AE98C0
    void ParseElementMixedContent(::System::Xml::Schema::ParticleContentValidator* pcv, int startParenEntityId);
    // private System.Void ParseEntityDecl()
    // Offset: 0x1AE7DB8
    void ParseEntityDecl();
    // private System.Void ParseNotationDecl()
    // Offset: 0x1AE80CC
    void ParseNotationDecl();
    // private System.Void AddUndeclaredNotation(System.String notationName)
    // Offset: 0x1AE968C
    void AddUndeclaredNotation(::StringW notationName);
    // private System.Void ParseComment()
    // Offset: 0x1AE82A4
    void ParseComment();
    // private System.Void ParsePI()
    // Offset: 0x1AE84FC
    void ParsePI();
    // private System.Void ParseCondSection()
    // Offset: 0x1AE86E4
    void ParseCondSection();
    // private System.Void ParseExternalId(System.Xml.DtdParser/System.Xml.Token idTokenType, System.Xml.DtdParser/System.Xml.Token declType, out System.String publicId, out System.String systemId)
    // Offset: 0x1AE6B3C
    void ParseExternalId(::System::Xml::DtdParser::Token idTokenType, ::System::Xml::DtdParser::Token declType, ByRef<::StringW> publicId, ByRef<::StringW> systemId);
    // private System.Xml.DtdParser/System.Xml.Token GetToken(System.Boolean needWhiteSpace)
    // Offset: 0x1AE609C
    ::System::Xml::DtdParser::Token GetToken(bool needWhiteSpace);
    // private System.Xml.DtdParser/System.Xml.Token ScanSubsetContent()
    // Offset: 0x1AEA6FC
    ::System::Xml::DtdParser::Token ScanSubsetContent();
    // private System.Xml.DtdParser/System.Xml.Token ScanNameExpected()
    // Offset: 0x1AEA670
    ::System::Xml::DtdParser::Token ScanNameExpected();
    // private System.Xml.DtdParser/System.Xml.Token ScanQNameExpected()
    // Offset: 0x1AEA6A0
    ::System::Xml::DtdParser::Token ScanQNameExpected();
    // private System.Xml.DtdParser/System.Xml.Token ScanNmtokenExpected()
    // Offset: 0x1AEA6D0
    ::System::Xml::DtdParser::Token ScanNmtokenExpected();
    // private System.Xml.DtdParser/System.Xml.Token ScanDoctype1()
    // Offset: 0x1AEAE10
    ::System::Xml::DtdParser::Token ScanDoctype1();
    // private System.Xml.DtdParser/System.Xml.Token ScanDoctype2()
    // Offset: 0x1AEAF4C
    ::System::Xml::DtdParser::Token ScanDoctype2();
    // private System.Xml.DtdParser/System.Xml.Token ScanClosingTag()
    // Offset: 0x1AED2B4
    ::System::Xml::DtdParser::Token ScanClosingTag();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement1()
    // Offset: 0x1AEB004
    ::System::Xml::DtdParser::Token ScanElement1();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement2()
    // Offset: 0x1AEB1E0
    ::System::Xml::DtdParser::Token ScanElement2();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement3()
    // Offset: 0x1AEB388
    ::System::Xml::DtdParser::Token ScanElement3();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement4()
    // Offset: 0x1AEB41C
    ::System::Xml::DtdParser::Token ScanElement4();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement5()
    // Offset: 0x1AEB4F8
    ::System::Xml::DtdParser::Token ScanElement5();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement6()
    // Offset: 0x1AEB5F4
    ::System::Xml::DtdParser::Token ScanElement6();
    // private System.Xml.DtdParser/System.Xml.Token ScanElement7()
    // Offset: 0x1AEB6C8
    ::System::Xml::DtdParser::Token ScanElement7();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist1()
    // Offset: 0x1AEB734
    ::System::Xml::DtdParser::Token ScanAttlist1();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist2()
    // Offset: 0x1AEB808
    ::System::Xml::DtdParser::Token ScanAttlist2();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist3()
    // Offset: 0x1AEBE84
    ::System::Xml::DtdParser::Token ScanAttlist3();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist4()
    // Offset: 0x1AEBF34
    ::System::Xml::DtdParser::Token ScanAttlist4();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist5()
    // Offset: 0x1AEC008
    ::System::Xml::DtdParser::Token ScanAttlist5();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist6()
    // Offset: 0x1AEC0DC
    ::System::Xml::DtdParser::Token ScanAttlist6();
    // private System.Xml.DtdParser/System.Xml.Token ScanAttlist7()
    // Offset: 0x1AEC45C
    ::System::Xml::DtdParser::Token ScanAttlist7();
    // private System.Xml.DtdParser/System.Xml.Token ScanLiteral(System.Xml.DtdParser/System.Xml.LiteralType literalType)
    // Offset: 0x1AED94C
    ::System::Xml::DtdParser::Token ScanLiteral(::System::Xml::DtdParser::LiteralType literalType);
    // private System.Xml.XmlQualifiedName ScanEntityName()
    // Offset: 0x1AEE3F8
    ::System::Xml::XmlQualifiedName* ScanEntityName();
    // private System.Xml.DtdParser/System.Xml.Token ScanNotation1()
    // Offset: 0x1AEC51C
    ::System::Xml::DtdParser::Token ScanNotation1();
    // private System.Xml.DtdParser/System.Xml.Token ScanSystemId()
    // Offset: 0x1AEC620
    ::System::Xml::DtdParser::Token ScanSystemId();
    // private System.Xml.DtdParser/System.Xml.Token ScanEntity1()
    // Offset: 0x1AEC80C
    ::System::Xml::DtdParser::Token ScanEntity1();
    // private System.Xml.DtdParser/System.Xml.Token ScanEntity2()
    // Offset: 0x1AEC894
    ::System::Xml::DtdParser::Token ScanEntity2();
    // private System.Xml.DtdParser/System.Xml.Token ScanEntity3()
    // Offset: 0x1AEC9CC
    ::System::Xml::DtdParser::Token ScanEntity3();
    // private System.Xml.DtdParser/System.Xml.Token ScanPublicId1()
    // Offset: 0x1AEC6D8
    ::System::Xml::DtdParser::Token ScanPublicId1();
    // private System.Xml.DtdParser/System.Xml.Token ScanPublicId2()
    // Offset: 0x1AEC790
    ::System::Xml::DtdParser::Token ScanPublicId2();
    // private System.Xml.DtdParser/System.Xml.Token ScanCondSection1()
    // Offset: 0x1AECAF4
    ::System::Xml::DtdParser::Token ScanCondSection1();
    // private System.Xml.DtdParser/System.Xml.Token ScanCondSection2()
    // Offset: 0x1AECD9C
    ::System::Xml::DtdParser::Token ScanCondSection2();
    // private System.Xml.DtdParser/System.Xml.Token ScanCondSection3()
    // Offset: 0x1AECE44
    ::System::Xml::DtdParser::Token ScanCondSection3();
    // private System.Void ScanName()
    // Offset: 0x1AED5E8
    void ScanName();
    // private System.Void ScanQName()
    // Offset: 0x1AED5F0
    void ScanQName();
    // private System.Void ScanQName(System.Boolean isQName)
    // Offset: 0x1AEE744
    void ScanQName(bool isQName);
    // private System.Boolean ReadDataInName()
    // Offset: 0x1AEE9B8
    bool ReadDataInName();
    // private System.Void ScanNmtoken()
    // Offset: 0x1AED5F8
    void ScanNmtoken();
    // private System.Boolean EatPublicKeyword()
    // Offset: 0x1AED75C
    bool EatPublicKeyword();
    // private System.Boolean EatSystemKeyword()
    // Offset: 0x1AED854
    bool EatSystemKeyword();
    // private System.Xml.XmlQualifiedName GetNameQualified(System.Boolean canHavePrefix)
    // Offset: 0x1AE69C8
    ::System::Xml::XmlQualifiedName* GetNameQualified(bool canHavePrefix);
    // private System.String GetNameString()
    // Offset: 0x1AE9670
    ::StringW GetNameString();
    // private System.String GetNmtokenString()
    // Offset: 0x1AE97CC
    ::StringW GetNmtokenString();
    // private System.String GetValue()
    // Offset: 0x1AE9854
    ::StringW GetValue();
    // private System.String GetValueWithStrippedSpaces()
    // Offset: 0x1AE97E8
    ::StringW GetValueWithStrippedSpaces();
    // private System.Int32 ReadData()
    // Offset: 0x1AED358
    int ReadData();
    // private System.Void LoadParsingBuffer()
    // Offset: 0x1AE5EF8
    void LoadParsingBuffer();
    // private System.Void SaveParsingBuffer()
    // Offset: 0x1AE701C
    void SaveParsingBuffer();
    // private System.Void SaveParsingBuffer(System.Int32 internalSubsetValueEndPos)
    // Offset: 0x1AE8A14
    void SaveParsingBuffer(int internalSubsetValueEndPos);
    // private System.Boolean HandleEntityReference(System.Boolean paramEntity, System.Boolean inLiteral, System.Boolean inAttribute)
    // Offset: 0x1AEA554
    bool HandleEntityReference(bool paramEntity, bool inLiteral, bool inAttribute);
    // private System.Boolean HandleEntityReference(System.Xml.XmlQualifiedName entityName, System.Boolean paramEntity, System.Boolean inLiteral, System.Boolean inAttribute)
    // Offset: 0x1AEEC10
    bool HandleEntityReference(::System::Xml::XmlQualifiedName* entityName, bool paramEntity, bool inLiteral, bool inAttribute);
    // private System.Boolean HandleEntityEnd(System.Boolean inLiteral)
    // Offset: 0x1AED42C
    bool HandleEntityEnd(bool inLiteral);
    // private System.Xml.Schema.SchemaEntity VerifyEntityReference(System.Xml.XmlQualifiedName entityName, System.Boolean paramEntity, System.Boolean mustBeDeclared, System.Boolean inAttribute)
    // Offset: 0x1AEE554
    ::System::Xml::Schema::SchemaEntity* VerifyEntityReference(::System::Xml::XmlQualifiedName* entityName, bool paramEntity, bool mustBeDeclared, bool inAttribute);
    // private System.Void SendValidationEvent(System.Int32 pos, System.Xml.Schema.XmlSeverityType severity, System.String code, System.String arg)
    // Offset: 0x1AE8938
    void SendValidationEvent(int pos, ::System::Xml::Schema::XmlSeverityType severity, ::StringW code, ::StringW arg);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSeverityType severity, System.String code, System.String arg)
    // Offset: 0x1AE95A8
    void SendValidationEvent(::System::Xml::Schema::XmlSeverityType severity, ::StringW code, ::StringW arg);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSeverityType severity, System.Xml.Schema.XmlSchemaException e)
    // Offset: 0x1AE5DAC
    void SendValidationEvent(::System::Xml::Schema::XmlSeverityType severity, ::System::Xml::Schema::XmlSchemaException* e);
    // private System.Boolean IsAttributeValueType(System.Xml.DtdParser/System.Xml.Token token)
    // Offset: 0x1AE959C
    bool IsAttributeValueType(::System::Xml::DtdParser::Token token);
    // private System.Void OnUnexpectedError()
    // Offset: 0x1AE6974
    void OnUnexpectedError();
    // private System.Void Throw(System.Int32 curPos, System.String res)
    // Offset: 0x1AE8674
    void Throw(int curPos, ::StringW res);
    // private System.Void Throw(System.Int32 curPos, System.String res, System.String arg)
    // Offset: 0x1AE9EF0
    void Throw(int curPos, ::StringW res, ::StringW arg);
    // private System.Void Throw(System.Int32 curPos, System.String res, System.String[] args)
    // Offset: 0x1AEA2D8
    void Throw(int curPos, ::StringW res, ::ArrayW<::StringW> args);
    // private System.Void Throw(System.String res, System.String arg, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0x1AE8CFC
    void Throw(::StringW res, ::StringW arg, int lineNo, int linePos);
    // private System.Void ThrowInvalidChar(System.Int32 pos, System.String data, System.Int32 invCharPos)
    // Offset: 0x1AE56E8
    void ThrowInvalidChar(int pos, ::StringW data, int invCharPos);
    // private System.Void ThrowInvalidChar(System.Char[] data, System.Int32 length, System.Int32 invCharPos)
    // Offset: 0x1AEA4CC
    void ThrowInvalidChar(::ArrayW<::Il2CppChar> data, int length, int invCharPos);
    // private System.Void ThrowUnexpectedToken(System.Int32 pos, System.String expectedToken)
    // Offset: 0x1AE8B80
    void ThrowUnexpectedToken(int pos, ::StringW expectedToken);
    // private System.Void ThrowUnexpectedToken(System.Int32 pos, System.String expectedToken1, System.String expectedToken2)
    // Offset: 0x1AEA128
    void ThrowUnexpectedToken(int pos, ::StringW expectedToken1, ::StringW expectedToken2);
    // private System.String ParseUnexpectedToken(System.Int32 startPos)
    // Offset: 0x1AEA5A8
    ::StringW ParseUnexpectedToken(int startPos);
    // static System.String StripSpaces(System.String value)
    // Offset: 0x1AEEA00
    static ::StringW StripSpaces(::StringW value);
  }; // System.Xml.DtdParser
  #pragma pack(pop)
  static check_size<sizeof(DtdParser), 192 + sizeof(::ArrayW<int>)> __System_Xml_DtdParserSizeCheck;
  static_assert(sizeof(DtdParser) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::DtdParser::ScanningFunction, "System.Xml", "DtdParser/ScanningFunction");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::DtdParser::get_ParsingInternalSubset
// Il2CppName: get_ParsingInternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_ParsingInternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_ParsingInternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_IgnoreEntityReferences
// Il2CppName: get_IgnoreEntityReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_IgnoreEntityReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_IgnoreEntityReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_SaveInternalSubsetValue
// Il2CppName: get_SaveInternalSubsetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_SaveInternalSubsetValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_SaveInternalSubsetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_ParsingTopLevelMarkup
// Il2CppName: get_ParsingTopLevelMarkup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_ParsingTopLevelMarkup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_ParsingTopLevelMarkup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_SupportNamespaces
// Il2CppName: get_SupportNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_SupportNamespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_SupportNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_Normalize
// Il2CppName: get_Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_Normalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_LineNo
// Il2CppName: get_LineNo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_LineNo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_LineNo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_LinePos
// Il2CppName: get_LinePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_LinePos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_LinePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::get_BaseUriStr
// Il2CppName: get_BaseUriStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::get_BaseUriStr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "get_BaseUriStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::DtdParser::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdParser* (*)()>(&System::Xml::DtdParser::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::IDtdParserAdapter*)>(&System::Xml::DtdParser::Initialize)> {
  static const MethodInfo* get() {
    static auto* readerAdapter = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdParserAdapter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readerAdapter});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::InitializeFreeFloatingDtd
// Il2CppName: InitializeFreeFloatingDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::StringW, ::StringW, ::StringW, ::StringW, ::StringW, ::System::Xml::IDtdParserAdapter*)>(&System::Xml::DtdParser::InitializeFreeFloatingDtd)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* docTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalSubset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* adapter = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdParserAdapter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "InitializeFreeFloatingDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, docTypeName, publicId, systemId, internalSubset, adapter});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::System_Xml_IDtdParser_ParseInternalDtd
// Il2CppName: System.Xml.IDtdParser.ParseInternalDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdInfo* (System::Xml::DtdParser::*)(::System::Xml::IDtdParserAdapter*, bool)>(&System::Xml::DtdParser::System_Xml_IDtdParser_ParseInternalDtd)> {
  static const MethodInfo* get() {
    static auto* adapter = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdParserAdapter")->byval_arg;
    static auto* saveInternalSubset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "System.Xml.IDtdParser.ParseInternalDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{adapter, saveInternalSubset});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::System_Xml_IDtdParser_ParseFreeFloatingDtd
// Il2CppName: System.Xml.IDtdParser.ParseFreeFloatingDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdInfo* (System::Xml::DtdParser::*)(::StringW, ::StringW, ::StringW, ::StringW, ::StringW, ::System::Xml::IDtdParserAdapter*)>(&System::Xml::DtdParser::System_Xml_IDtdParser_ParseFreeFloatingDtd)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* docTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalSubset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* adapter = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdParserAdapter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "System.Xml.IDtdParser.ParseFreeFloatingDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, docTypeName, publicId, systemId, internalSubset, adapter});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::Parse)> {
  static const MethodInfo* get() {
    static auto* saveInternalSubset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saveInternalSubset});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseInDocumentDtd
// Il2CppName: ParseInDocumentDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::ParseInDocumentDtd)> {
  static const MethodInfo* get() {
    static auto* saveInternalSubset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseInDocumentDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saveInternalSubset});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseFreeFloatingDtd
// Il2CppName: ParseFreeFloatingDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseFreeFloatingDtd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseFreeFloatingDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseInternalSubset
// Il2CppName: ParseInternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseInternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseInternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseExternalSubset
// Il2CppName: ParseExternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseExternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseExternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseSubset
// Il2CppName: ParseSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseAttlistDecl
// Il2CppName: ParseAttlistDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseAttlistDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseAttlistDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseAttlistType
// Il2CppName: ParseAttlistType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::SchemaAttDef*, ::System::Xml::Schema::SchemaElementDecl*, bool)>(&System::Xml::DtdParser::ParseAttlistType)> {
  static const MethodInfo* get() {
    static auto* attrDef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    static auto* elementDecl = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaElementDecl")->byval_arg;
    static auto* ignoreErrors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseAttlistType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrDef, elementDecl, ignoreErrors});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseAttlistDefault
// Il2CppName: ParseAttlistDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::SchemaAttDef*, bool)>(&System::Xml::DtdParser::ParseAttlistDefault)> {
  static const MethodInfo* get() {
    static auto* attrDef = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "SchemaAttDef")->byval_arg;
    static auto* ignoreErrors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseAttlistDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrDef, ignoreErrors});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseElementDecl
// Il2CppName: ParseElementDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseElementDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseElementDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseElementOnlyContent
// Il2CppName: ParseElementOnlyContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::ParticleContentValidator*, int)>(&System::Xml::DtdParser::ParseElementOnlyContent)> {
  static const MethodInfo* get() {
    static auto* pcv = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ParticleContentValidator")->byval_arg;
    static auto* startParenEntityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseElementOnlyContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcv, startParenEntityId});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseHowMany
// Il2CppName: ParseHowMany
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::ParticleContentValidator*)>(&System::Xml::DtdParser::ParseHowMany)> {
  static const MethodInfo* get() {
    static auto* pcv = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ParticleContentValidator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseHowMany", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcv});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseElementMixedContent
// Il2CppName: ParseElementMixedContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::ParticleContentValidator*, int)>(&System::Xml::DtdParser::ParseElementMixedContent)> {
  static const MethodInfo* get() {
    static auto* pcv = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "ParticleContentValidator")->byval_arg;
    static auto* startParenEntityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseElementMixedContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcv, startParenEntityId});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseEntityDecl
// Il2CppName: ParseEntityDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseEntityDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseEntityDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseNotationDecl
// Il2CppName: ParseNotationDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseNotationDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseNotationDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::AddUndeclaredNotation
// Il2CppName: AddUndeclaredNotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::StringW)>(&System::Xml::DtdParser::AddUndeclaredNotation)> {
  static const MethodInfo* get() {
    static auto* notationName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "AddUndeclaredNotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notationName});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseComment
// Il2CppName: ParseComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseComment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParsePI
// Il2CppName: ParsePI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParsePI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParsePI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseCondSection
// Il2CppName: ParseCondSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ParseCondSection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseCondSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseExternalId
// Il2CppName: ParseExternalId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::DtdParser::Token, ::System::Xml::DtdParser::Token, ByRef<::StringW>, ByRef<::StringW>)>(&System::Xml::DtdParser::ParseExternalId)> {
  static const MethodInfo* get() {
    static auto* idTokenType = &::il2cpp_utils::GetClassFromName("System.Xml", "DtdParser/Token")->byval_arg;
    static auto* declType = &::il2cpp_utils::GetClassFromName("System.Xml", "DtdParser/Token")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseExternalId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idTokenType, declType, publicId, systemId});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetToken
// Il2CppName: GetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::GetToken)> {
  static const MethodInfo* get() {
    static auto* needWhiteSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needWhiteSpace});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanSubsetContent
// Il2CppName: ScanSubsetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanSubsetContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanSubsetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanNameExpected
// Il2CppName: ScanNameExpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanNameExpected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanNameExpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanQNameExpected
// Il2CppName: ScanQNameExpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanQNameExpected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanQNameExpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanNmtokenExpected
// Il2CppName: ScanNmtokenExpected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanNmtokenExpected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanNmtokenExpected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanDoctype1
// Il2CppName: ScanDoctype1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanDoctype1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanDoctype1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanDoctype2
// Il2CppName: ScanDoctype2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanDoctype2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanDoctype2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanClosingTag
// Il2CppName: ScanClosingTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanClosingTag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanClosingTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement1
// Il2CppName: ScanElement1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement2
// Il2CppName: ScanElement2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement3
// Il2CppName: ScanElement3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement4
// Il2CppName: ScanElement4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement5
// Il2CppName: ScanElement5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement5)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement6
// Il2CppName: ScanElement6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanElement7
// Il2CppName: ScanElement7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanElement7)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanElement7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist1
// Il2CppName: ScanAttlist1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist2
// Il2CppName: ScanAttlist2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist3
// Il2CppName: ScanAttlist3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist4
// Il2CppName: ScanAttlist4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist5
// Il2CppName: ScanAttlist5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist5)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist6
// Il2CppName: ScanAttlist6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanAttlist7
// Il2CppName: ScanAttlist7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanAttlist7)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanAttlist7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanLiteral
// Il2CppName: ScanLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)(::System::Xml::DtdParser::LiteralType)>(&System::Xml::DtdParser::ScanLiteral)> {
  static const MethodInfo* get() {
    static auto* literalType = &::il2cpp_utils::GetClassFromName("System.Xml", "DtdParser/LiteralType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{literalType});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanEntityName
// Il2CppName: ScanEntityName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanEntityName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanEntityName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanNotation1
// Il2CppName: ScanNotation1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanNotation1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanNotation1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanSystemId
// Il2CppName: ScanSystemId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanSystemId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanSystemId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanEntity1
// Il2CppName: ScanEntity1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanEntity1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanEntity1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanEntity2
// Il2CppName: ScanEntity2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanEntity2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanEntity2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanEntity3
// Il2CppName: ScanEntity3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanEntity3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanEntity3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanPublicId1
// Il2CppName: ScanPublicId1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanPublicId1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanPublicId1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanPublicId2
// Il2CppName: ScanPublicId2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanPublicId2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanPublicId2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanCondSection1
// Il2CppName: ScanCondSection1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanCondSection1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanCondSection1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanCondSection2
// Il2CppName: ScanCondSection2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanCondSection2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanCondSection2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanCondSection3
// Il2CppName: ScanCondSection3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::DtdParser::Token (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanCondSection3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanCondSection3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanName
// Il2CppName: ScanName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanQName
// Il2CppName: ScanQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanQName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanQName
// Il2CppName: ScanQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::ScanQName)> {
  static const MethodInfo* get() {
    static auto* isQName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isQName});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ReadDataInName
// Il2CppName: ReadDataInName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ReadDataInName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ReadDataInName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ScanNmtoken
// Il2CppName: ScanNmtoken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ScanNmtoken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ScanNmtoken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::EatPublicKeyword
// Il2CppName: EatPublicKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::EatPublicKeyword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "EatPublicKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::EatSystemKeyword
// Il2CppName: EatSystemKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::EatSystemKeyword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "EatSystemKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetNameQualified
// Il2CppName: GetNameQualified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::GetNameQualified)> {
  static const MethodInfo* get() {
    static auto* canHavePrefix = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetNameQualified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canHavePrefix});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetNameString
// Il2CppName: GetNameString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::GetNameString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetNameString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetNmtokenString
// Il2CppName: GetNmtokenString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::GetNmtokenString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetNmtokenString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::GetValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::GetValueWithStrippedSpaces
// Il2CppName: GetValueWithStrippedSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::GetValueWithStrippedSpaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "GetValueWithStrippedSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ReadData
// Il2CppName: ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::ReadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::LoadParsingBuffer
// Il2CppName: LoadParsingBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::LoadParsingBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "LoadParsingBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::SaveParsingBuffer
// Il2CppName: SaveParsingBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::SaveParsingBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "SaveParsingBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::SaveParsingBuffer
// Il2CppName: SaveParsingBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int)>(&System::Xml::DtdParser::SaveParsingBuffer)> {
  static const MethodInfo* get() {
    static auto* internalSubsetValueEndPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "SaveParsingBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalSubsetValueEndPos});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::HandleEntityReference
// Il2CppName: HandleEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)(bool, bool, bool)>(&System::Xml::DtdParser::HandleEntityReference)> {
  static const MethodInfo* get() {
    static auto* paramEntity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* inLiteral = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* inAttribute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "HandleEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramEntity, inLiteral, inAttribute});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::HandleEntityReference
// Il2CppName: HandleEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)(::System::Xml::XmlQualifiedName*, bool, bool, bool)>(&System::Xml::DtdParser::HandleEntityReference)> {
  static const MethodInfo* get() {
    static auto* entityName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* paramEntity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* inLiteral = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* inAttribute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "HandleEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityName, paramEntity, inLiteral, inAttribute});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::HandleEntityEnd
// Il2CppName: HandleEntityEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)(bool)>(&System::Xml::DtdParser::HandleEntityEnd)> {
  static const MethodInfo* get() {
    static auto* inLiteral = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "HandleEntityEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inLiteral});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::VerifyEntityReference
// Il2CppName: VerifyEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::SchemaEntity* (System::Xml::DtdParser::*)(::System::Xml::XmlQualifiedName*, bool, bool, bool)>(&System::Xml::DtdParser::VerifyEntityReference)> {
  static const MethodInfo* get() {
    static auto* entityName = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    static auto* paramEntity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* mustBeDeclared = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* inAttribute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "VerifyEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityName, paramEntity, mustBeDeclared, inAttribute});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::System::Xml::Schema::XmlSeverityType, ::StringW, ::StringW)>(&System::Xml::DtdParser::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, severity, code, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::XmlSeverityType, ::StringW, ::StringW)>(&System::Xml::DtdParser::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{severity, code, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::System::Xml::Schema::XmlSeverityType, ::System::Xml::Schema::XmlSchemaException*)>(&System::Xml::DtdParser::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{severity, e});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::IsAttributeValueType
// Il2CppName: IsAttributeValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::DtdParser::*)(::System::Xml::DtdParser::Token)>(&System::Xml::DtdParser::IsAttributeValueType)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Xml", "DtdParser/Token")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "IsAttributeValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::OnUnexpectedError
// Il2CppName: OnUnexpectedError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)()>(&System::Xml::DtdParser::OnUnexpectedError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "OnUnexpectedError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW)>(&System::Xml::DtdParser::Throw)> {
  static const MethodInfo* get() {
    static auto* curPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curPos, res});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW, ::StringW)>(&System::Xml::DtdParser::Throw)> {
  static const MethodInfo* get() {
    static auto* curPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curPos, res, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW, ::ArrayW<::StringW>)>(&System::Xml::DtdParser::Throw)> {
  static const MethodInfo* get() {
    static auto* curPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curPos, res, args});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::StringW, ::StringW, int, int)>(&System::Xml::DtdParser::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ThrowInvalidChar
// Il2CppName: ThrowInvalidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW, int)>(&System::Xml::DtdParser::ThrowInvalidChar)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* invCharPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ThrowInvalidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, data, invCharPos});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ThrowInvalidChar
// Il2CppName: ThrowInvalidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::DtdParser::ThrowInvalidChar)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* invCharPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ThrowInvalidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length, invCharPos});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW)>(&System::Xml::DtdParser::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expectedToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, expectedToken});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::DtdParser::*)(int, ::StringW, ::StringW)>(&System::Xml::DtdParser::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expectedToken1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expectedToken2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, expectedToken1, expectedToken2});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::ParseUnexpectedToken
// Il2CppName: ParseUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::DtdParser::*)(int)>(&System::Xml::DtdParser::ParseUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "ParseUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos});
  }
};
// Writing MetadataGetter for method: System::Xml::DtdParser::StripSpaces
// Il2CppName: StripSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Xml::DtdParser::StripSpaces)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::DtdParser*), "StripSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
