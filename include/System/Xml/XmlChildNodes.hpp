// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlNodeList
#include "System/Xml/XmlNodeList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlChildNodes
  class XmlChildNodes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlChildNodes);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlChildNodes*, "System.Xml", "XmlChildNodes");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlChildNodes
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlChildNodes : public ::System::Xml::XmlNodeList {
    public:
    public:
    // private System.Xml.XmlNode container
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNode* container;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Xml::XmlNode*
    constexpr operator ::System::Xml::XmlNode*() const noexcept {
      return container;
    }
    // Get instance field reference: private System.Xml.XmlNode container
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNode*& dyn_container();
    // public System.Void .ctor(System.Xml.XmlNode container)
    // Offset: 0x1C37970
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlChildNodes* New_ctor(::System::Xml::XmlNode* container) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlChildNodes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlChildNodes*, creationType>(container)));
    }
    // public override System.Int32 get_Count()
    // Offset: 0x1C3799C
    // Implemented from: System.Xml.XmlNodeList
    // Base method: System.Int32 XmlNodeList::get_Count()
    int get_Count();
    // public override System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1C379F4
    // Implemented from: System.Xml.XmlNodeList
    // Base method: System.Collections.IEnumerator XmlNodeList::GetEnumerator()
    ::System::Collections::IEnumerator* GetEnumerator();
  }; // System.Xml.XmlChildNodes
  #pragma pack(pop)
  static check_size<sizeof(XmlChildNodes), 16 + sizeof(::System::Xml::XmlNode*)> __System_Xml_XmlChildNodesSizeCheck;
  static_assert(sizeof(XmlChildNodes) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlChildNodes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlChildNodes::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlChildNodes::*)()>(&System::Xml::XmlChildNodes::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildNodes*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlChildNodes::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Xml::XmlChildNodes::*)()>(&System::Xml::XmlChildNodes::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildNodes*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
