// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
// Including type: System.Xml.WhitespaceHandling
#include "System/Xml/WhitespaceHandling.hpp"
// Including type: System.Xml.DtdProcessing
#include "System/Xml/DtdProcessing.hpp"
// Including type: System.Xml.EntityHandling
#include "System/Xml/EntityHandling.hpp"
// Including type: System.Xml.XmlNodeType
#include "System/Xml/XmlNodeType.hpp"
// Including type: System.Xml.LineInfo
#include "System/Xml/LineInfo.hpp"
// Including type: System.Xml.ReadState
#include "System/Xml/ReadState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: IDtdEntityInfo
  class IDtdEntityInfo;
  // Forward declaring type: IValidationEventHandling
  class IValidationEventHandling;
  // Forward declaring type: XmlResolver
  class XmlResolver;
  // Forward declaring type: XmlNamespaceManager
  class XmlNamespaceManager;
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: XmlParserContext
  class XmlParserContext;
  // Forward declaring type: IncrementalReadDecoder
  class IncrementalReadDecoder;
  // Forward declaring type: IDtdDefaultAttributeInfo
  class IDtdDefaultAttributeInfo;
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: StringBuilder
  class StringBuilder;
  // Forward declaring type: Decoder
  class Decoder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Tuple_4;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextReader
  class TextReader;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSeverityType
  struct XmlSeverityType;
  // Forward declaring type: XmlSchemaException
  class XmlSchemaException;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlTextReaderImpl
  class XmlTextReaderImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlTextReaderImpl);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReaderImpl*, "System.Xml", "XmlTextReaderImpl");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x240
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlTextReaderImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlTextReaderImpl : public ::System::Xml::XmlReader/*, public ::System::Xml::IXmlNamespaceResolver*/ {
    public:
    // Nested type: ::System::Xml::XmlTextReaderImpl::ParsingFunction
    struct ParsingFunction;
    // Nested type: ::System::Xml::XmlTextReaderImpl::ParsingMode
    struct ParsingMode;
    // Nested type: ::System::Xml::XmlTextReaderImpl::EntityType
    struct EntityType;
    // Nested type: ::System::Xml::XmlTextReaderImpl::EntityExpandType
    struct EntityExpandType;
    // Nested type: ::System::Xml::XmlTextReaderImpl::IncrementalReadState
    struct IncrementalReadState;
    // Nested type: ::System::Xml::XmlTextReaderImpl::LaterInitParam
    class LaterInitParam;
    // Nested type: ::System::Xml::XmlTextReaderImpl::InitInputType
    struct InitInputType;
    // Nested type: ::System::Xml::XmlTextReaderImpl::ParsingState
    struct ParsingState;
    // Nested type: ::System::Xml::XmlTextReaderImpl::XmlContext
    class XmlContext;
    // Nested type: ::System::Xml::XmlTextReaderImpl::NoNamespaceManager
    class NoNamespaceManager;
    // Nested type: ::System::Xml::XmlTextReaderImpl::DtdParserProxy
    class DtdParserProxy;
    // Nested type: ::System::Xml::XmlTextReaderImpl::NodeData
    class NodeData;
    // Nested type: ::System::Xml::XmlTextReaderImpl::DtdDefaultAttributeInfoToNodeDataComparer
    class DtdDefaultAttributeInfoToNodeDataComparer;
    // Nested type: ::System::Xml::XmlTextReaderImpl::OnDefaultAttributeUseDelegate
    class OnDefaultAttributeUseDelegate;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction
    // [TokenAttribute] Offset: FFFFFFFF
    struct ParsingFunction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ParsingFunction
      constexpr ParsingFunction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ElementContent
      static constexpr const int ElementContent = 0;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ElementContent
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_ElementContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ElementContent
      static void _set_ElementContent(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction NoData
      static constexpr const int NoData = 1;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction NoData
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_NoData();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction NoData
      static void _set_NoData(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction OpenUrl
      static constexpr const int OpenUrl = 2;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction OpenUrl
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_OpenUrl();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction OpenUrl
      static void _set_OpenUrl(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractive
      static constexpr const int SwitchToInteractive = 3;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractive
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_SwitchToInteractive();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractive
      static void _set_SwitchToInteractive(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractiveXmlDecl
      static constexpr const int SwitchToInteractiveXmlDecl = 4;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractiveXmlDecl
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_SwitchToInteractiveXmlDecl();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction SwitchToInteractiveXmlDecl
      static void _set_SwitchToInteractiveXmlDecl(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction DocumentContent
      static constexpr const int DocumentContent = 5;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction DocumentContent
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_DocumentContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction DocumentContent
      static void _set_DocumentContent(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction MoveToElementContent
      static constexpr const int MoveToElementContent = 6;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction MoveToElementContent
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_MoveToElementContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction MoveToElementContent
      static void _set_MoveToElementContent(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopElementContext
      static constexpr const int PopElementContext = 7;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopElementContext
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_PopElementContext();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopElementContext
      static void _set_PopElementContext(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopEmptyElementContext
      static constexpr const int PopEmptyElementContext = 8;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopEmptyElementContext
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_PopEmptyElementContext();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PopEmptyElementContext
      static void _set_PopEmptyElementContext(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ResetAttributesRootLevel
      static constexpr const int ResetAttributesRootLevel = 9;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ResetAttributesRootLevel
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_ResetAttributesRootLevel();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ResetAttributesRootLevel
      static void _set_ResetAttributesRootLevel(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Error
      static constexpr const int Error = 10;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Error
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_Error();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Error
      static void _set_Error(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Eof
      static constexpr const int Eof = 11;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Eof
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_Eof();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction Eof
      static void _set_Eof(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReaderClosed
      static constexpr const int ReaderClosed = 12;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReaderClosed
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_ReaderClosed();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReaderClosed
      static void _set_ReaderClosed(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction EntityReference
      static constexpr const int EntityReference = 13;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction EntityReference
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_EntityReference();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction EntityReference
      static void _set_EntityReference(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InIncrementalRead
      static constexpr const int InIncrementalRead = 14;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InIncrementalRead
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_InIncrementalRead();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InIncrementalRead
      static void _set_InIncrementalRead(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction FragmentAttribute
      static constexpr const int FragmentAttribute = 15;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction FragmentAttribute
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_FragmentAttribute();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction FragmentAttribute
      static void _set_FragmentAttribute(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReportEndEntity
      static constexpr const int ReportEndEntity = 16;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReportEndEntity
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_ReportEndEntity();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction ReportEndEntity
      static void _set_ReportEndEntity(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEntityInContent
      static constexpr const int AfterResolveEntityInContent = 17;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEntityInContent
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_AfterResolveEntityInContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEntityInContent
      static void _set_AfterResolveEntityInContent(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEmptyEntityInContent
      static constexpr const int AfterResolveEmptyEntityInContent = 18;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEmptyEntityInContent
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_AfterResolveEmptyEntityInContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction AfterResolveEmptyEntityInContent
      static void _set_AfterResolveEmptyEntityInContent(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction XmlDeclarationFragment
      static constexpr const int XmlDeclarationFragment = 19;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction XmlDeclarationFragment
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_XmlDeclarationFragment();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction XmlDeclarationFragment
      static void _set_XmlDeclarationFragment(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction GoToEof
      static constexpr const int GoToEof = 20;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction GoToEof
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_GoToEof();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction GoToEof
      static void _set_GoToEof(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PartialTextValue
      static constexpr const int PartialTextValue = 21;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PartialTextValue
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_PartialTextValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction PartialTextValue
      static void _set_PartialTextValue(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadAttributeValue
      static constexpr const int InReadAttributeValue = 22;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadAttributeValue
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_InReadAttributeValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadAttributeValue
      static void _set_InReadAttributeValue(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadValueChunk
      static constexpr const int InReadValueChunk = 23;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadValueChunk
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_InReadValueChunk();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadValueChunk
      static void _set_InReadValueChunk(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadContentAsBinary
      static constexpr const int InReadContentAsBinary = 24;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadContentAsBinary
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_InReadContentAsBinary();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadContentAsBinary
      static void _set_InReadContentAsBinary(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadElementContentAsBinary
      static constexpr const int InReadElementContentAsBinary = 25;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadElementContentAsBinary
      static ::System::Xml::XmlTextReaderImpl::ParsingFunction _get_InReadElementContentAsBinary();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction InReadElementContentAsBinary
      static void _set_InReadElementContentAsBinary(::System::Xml::XmlTextReaderImpl::ParsingFunction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction
    #pragma pack(pop)
    static check_size<sizeof(XmlTextReaderImpl::ParsingFunction), 0 + sizeof(int)> __System_Xml_XmlTextReaderImpl_ParsingFunctionSizeCheck;
    static_assert(sizeof(XmlTextReaderImpl::ParsingFunction) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ParsingMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ParsingMode
      constexpr ParsingMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode Full
      static constexpr const int Full = 0;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode Full
      static ::System::Xml::XmlTextReaderImpl::ParsingMode _get_Full();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode Full
      static void _set_Full(::System::Xml::XmlTextReaderImpl::ParsingMode value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipNode
      static constexpr const int SkipNode = 1;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipNode
      static ::System::Xml::XmlTextReaderImpl::ParsingMode _get_SkipNode();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipNode
      static void _set_SkipNode(::System::Xml::XmlTextReaderImpl::ParsingMode value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipContent
      static constexpr const int SkipContent = 2;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipContent
      static ::System::Xml::XmlTextReaderImpl::ParsingMode _get_SkipContent();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode SkipContent
      static void _set_SkipContent(::System::Xml::XmlTextReaderImpl::ParsingMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode
    #pragma pack(pop)
    static check_size<sizeof(XmlTextReaderImpl::ParsingMode), 0 + sizeof(int)> __System_Xml_XmlTextReaderImpl_ParsingModeSizeCheck;
    static_assert(sizeof(XmlTextReaderImpl::ParsingMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState
    // [TokenAttribute] Offset: FFFFFFFF
    struct IncrementalReadState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: IncrementalReadState
      constexpr IncrementalReadState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Text
      static constexpr const int Text = 0;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Text
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_Text();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Text
      static void _set_Text(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState StartTag
      static constexpr const int StartTag = 1;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState StartTag
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_StartTag();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState StartTag
      static void _set_StartTag(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState PI
      static constexpr const int PI = 2;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState PI
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_PI();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState PI
      static void _set_PI(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState CDATA
      static constexpr const int CDATA = 3;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState CDATA
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_CDATA();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState CDATA
      static void _set_CDATA(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Comment
      static constexpr const int Comment = 4;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Comment
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_Comment();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Comment
      static void _set_Comment(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Attributes
      static constexpr const int Attributes = 5;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Attributes
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_Attributes();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState Attributes
      static void _set_Attributes(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState AttributeValue
      static constexpr const int AttributeValue = 6;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState AttributeValue
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_AttributeValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState AttributeValue
      static void _set_AttributeValue(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadData
      static constexpr const int ReadData = 7;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadData
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadData();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadData
      static void _set_ReadData(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState EndElement
      static constexpr const int EndElement = 8;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState EndElement
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_EndElement();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState EndElement
      static void _set_EndElement(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState End
      static constexpr const int End = 9;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState End
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_End();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState End
      static void _set_End(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnCachedValue
      static constexpr const int ReadValueChunk_OnCachedValue = 10;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnCachedValue
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadValueChunk_OnCachedValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnCachedValue
      static void _set_ReadValueChunk_OnCachedValue(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnPartialValue
      static constexpr const int ReadValueChunk_OnPartialValue = 11;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnPartialValue
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadValueChunk_OnPartialValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadValueChunk_OnPartialValue
      static void _set_ReadValueChunk_OnPartialValue(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnCachedValue
      static constexpr const int ReadContentAsBinary_OnCachedValue = 12;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnCachedValue
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadContentAsBinary_OnCachedValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnCachedValue
      static void _set_ReadContentAsBinary_OnCachedValue(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnPartialValue
      static constexpr const int ReadContentAsBinary_OnPartialValue = 13;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnPartialValue
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadContentAsBinary_OnPartialValue();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_OnPartialValue
      static void _set_ReadContentAsBinary_OnPartialValue(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // static field const value: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_End
      static constexpr const int ReadContentAsBinary_End = 14;
      // Get static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_End
      static ::System::Xml::XmlTextReaderImpl::IncrementalReadState _get_ReadContentAsBinary_End();
      // Set static field: static public System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState ReadContentAsBinary_End
      static void _set_ReadContentAsBinary_End(::System::Xml::XmlTextReaderImpl::IncrementalReadState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState
    #pragma pack(pop)
    static check_size<sizeof(XmlTextReaderImpl::IncrementalReadState), 0 + sizeof(int)> __System_Xml_XmlTextReaderImpl_IncrementalReadStateSizeCheck;
    static_assert(sizeof(XmlTextReaderImpl::IncrementalReadState) == 0x4);
    // Size: 0x76
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlTextReaderImpl/System.Xml.ParsingState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ParsingState/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Char[] chars
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::Il2CppChar> chars;
      // Field size check
      static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
      // System.Int32 charPos
      // Size: 0x4
      // Offset: 0x8
      int charPos;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 charsUsed
      // Size: 0x4
      // Offset: 0xC
      int charsUsed;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Text.Encoding encoding
      // Size: 0x8
      // Offset: 0x10
      ::System::Text::Encoding* encoding;
      // Field size check
      static_assert(sizeof(::System::Text::Encoding*) == 0x8);
      // System.Boolean appendMode
      // Size: 0x1
      // Offset: 0x18
      bool appendMode;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: appendMode and: stream
      char __padding4[0x7] = {};
      // System.IO.Stream stream
      // Size: 0x8
      // Offset: 0x20
      ::System::IO::Stream* stream;
      // Field size check
      static_assert(sizeof(::System::IO::Stream*) == 0x8);
      // System.Text.Decoder decoder
      // Size: 0x8
      // Offset: 0x28
      ::System::Text::Decoder* decoder;
      // Field size check
      static_assert(sizeof(::System::Text::Decoder*) == 0x8);
      // System.Byte[] bytes
      // Size: 0x8
      // Offset: 0x30
      ::ArrayW<uint8_t> bytes;
      // Field size check
      static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
      // System.Int32 bytePos
      // Size: 0x4
      // Offset: 0x38
      int bytePos;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 bytesUsed
      // Size: 0x4
      // Offset: 0x3C
      int bytesUsed;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.IO.TextReader textReader
      // Size: 0x8
      // Offset: 0x40
      ::System::IO::TextReader* textReader;
      // Field size check
      static_assert(sizeof(::System::IO::TextReader*) == 0x8);
      // System.Int32 lineNo
      // Size: 0x4
      // Offset: 0x48
      int lineNo;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 lineStartPos
      // Size: 0x4
      // Offset: 0x4C
      int lineStartPos;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.String baseUriStr
      // Size: 0x8
      // Offset: 0x50
      ::StringW baseUriStr;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.Uri baseUri
      // Size: 0x8
      // Offset: 0x58
      ::System::Uri* baseUri;
      // Field size check
      static_assert(sizeof(::System::Uri*) == 0x8);
      // System.Boolean isEof
      // Size: 0x1
      // Offset: 0x60
      bool isEof;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // System.Boolean isStreamEof
      // Size: 0x1
      // Offset: 0x61
      bool isStreamEof;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isStreamEof and: entity
      char __padding16[0x6] = {};
      // System.Xml.IDtdEntityInfo entity
      // Size: 0x8
      // Offset: 0x68
      ::System::Xml::IDtdEntityInfo* entity;
      // Field size check
      static_assert(sizeof(::System::Xml::IDtdEntityInfo*) == 0x8);
      // System.Int32 entityId
      // Size: 0x4
      // Offset: 0x70
      int entityId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Boolean eolNormalized
      // Size: 0x1
      // Offset: 0x74
      bool eolNormalized;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // System.Boolean entityResolvedManually
      // Size: 0x1
      // Offset: 0x75
      bool entityResolvedManually;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: ParsingState
      constexpr ParsingState(::ArrayW<::Il2CppChar> chars_ = ::ArrayW<::Il2CppChar>(static_cast<void*>(nullptr)), int charPos_ = {}, int charsUsed_ = {}, ::System::Text::Encoding* encoding_ = {}, bool appendMode_ = {}, ::System::IO::Stream* stream_ = {}, ::System::Text::Decoder* decoder_ = {}, ::ArrayW<uint8_t> bytes_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int bytePos_ = {}, int bytesUsed_ = {}, ::System::IO::TextReader* textReader_ = {}, int lineNo_ = {}, int lineStartPos_ = {}, ::StringW baseUriStr_ = {}, ::System::Uri* baseUri_ = {}, bool isEof_ = {}, bool isStreamEof_ = {}, ::System::Xml::IDtdEntityInfo* entity_ = {}, int entityId_ = {}, bool eolNormalized_ = {}, bool entityResolvedManually_ = {}) noexcept : chars{chars_}, charPos{charPos_}, charsUsed{charsUsed_}, encoding{encoding_}, appendMode{appendMode_}, stream{stream_}, decoder{decoder_}, bytes{bytes_}, bytePos{bytePos_}, bytesUsed{bytesUsed_}, textReader{textReader_}, lineNo{lineNo_}, lineStartPos{lineStartPos_}, baseUriStr{baseUriStr_}, baseUri{baseUri_}, isEof{isEof_}, isStreamEof{isStreamEof_}, entity{entity_}, entityId{entityId_}, eolNormalized{eolNormalized_}, entityResolvedManually{entityResolvedManually_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Char[] chars
      [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_chars();
      // Get instance field reference: System.Int32 charPos
      [[deprecated("Use field access instead!")]] int& dyn_charPos();
      // Get instance field reference: System.Int32 charsUsed
      [[deprecated("Use field access instead!")]] int& dyn_charsUsed();
      // Get instance field reference: System.Text.Encoding encoding
      [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_encoding();
      // Get instance field reference: System.Boolean appendMode
      [[deprecated("Use field access instead!")]] bool& dyn_appendMode();
      // Get instance field reference: System.IO.Stream stream
      [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_stream();
      // Get instance field reference: System.Text.Decoder decoder
      [[deprecated("Use field access instead!")]] ::System::Text::Decoder*& dyn_decoder();
      // Get instance field reference: System.Byte[] bytes
      [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_bytes();
      // Get instance field reference: System.Int32 bytePos
      [[deprecated("Use field access instead!")]] int& dyn_bytePos();
      // Get instance field reference: System.Int32 bytesUsed
      [[deprecated("Use field access instead!")]] int& dyn_bytesUsed();
      // Get instance field reference: System.IO.TextReader textReader
      [[deprecated("Use field access instead!")]] ::System::IO::TextReader*& dyn_textReader();
      // Get instance field reference: System.Int32 lineNo
      [[deprecated("Use field access instead!")]] int& dyn_lineNo();
      // Get instance field reference: System.Int32 lineStartPos
      [[deprecated("Use field access instead!")]] int& dyn_lineStartPos();
      // Get instance field reference: System.String baseUriStr
      [[deprecated("Use field access instead!")]] ::StringW& dyn_baseUriStr();
      // Get instance field reference: System.Uri baseUri
      [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_baseUri();
      // Get instance field reference: System.Boolean isEof
      [[deprecated("Use field access instead!")]] bool& dyn_isEof();
      // Get instance field reference: System.Boolean isStreamEof
      [[deprecated("Use field access instead!")]] bool& dyn_isStreamEof();
      // Get instance field reference: System.Xml.IDtdEntityInfo entity
      [[deprecated("Use field access instead!")]] ::System::Xml::IDtdEntityInfo*& dyn_entity();
      // Get instance field reference: System.Int32 entityId
      [[deprecated("Use field access instead!")]] int& dyn_entityId();
      // Get instance field reference: System.Boolean eolNormalized
      [[deprecated("Use field access instead!")]] bool& dyn_eolNormalized();
      // Get instance field reference: System.Boolean entityResolvedManually
      [[deprecated("Use field access instead!")]] bool& dyn_entityResolvedManually();
      // System.Int32 get_LineNo()
      // Offset: 0x27169C4
      int get_LineNo();
      // System.Int32 get_LinePos()
      // Offset: 0x27169CC
      int get_LinePos();
      // System.Void Clear()
      // Offset: 0x2716908
      void Clear();
      // System.Void Close(System.Boolean closeInput)
      // Offset: 0x271698C
      void Close(bool closeInput);
    }; // System.Xml.XmlTextReaderImpl/System.Xml.ParsingState
    #pragma pack(pop)
    static check_size<sizeof(XmlTextReaderImpl::ParsingState), 117 + sizeof(bool)> __System_Xml_XmlTextReaderImpl_ParsingStateSizeCheck;
    static_assert(sizeof(XmlTextReaderImpl::ParsingState) == 0x76);
    public:
    // private System.Xml.XmlTextReaderImpl/System.Xml.LaterInitParam laterInitParam
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlTextReaderImpl::LaterInitParam* laterInitParam;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::LaterInitParam*) == 0x8);
    // private System.Xml.XmlCharType xmlCharType
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlCharType xmlCharType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlCharType) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingState ps
    // Size: 0x76
    // Offset: 0x20
    ::System::Xml::XmlTextReaderImpl::ParsingState ps;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::ParsingState) == 0x76);
    // Padding between fields: ps and: parsingFunction
    char __padding2[0x2] = {};
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction parsingFunction
    // Size: 0x4
    // Offset: 0x98
    ::System::Xml::XmlTextReaderImpl::ParsingFunction parsingFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::ParsingFunction) == 0x4);
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction nextParsingFunction
    // Size: 0x4
    // Offset: 0x9C
    ::System::Xml::XmlTextReaderImpl::ParsingFunction nextParsingFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::ParsingFunction) == 0x4);
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction nextNextParsingFunction
    // Size: 0x4
    // Offset: 0xA0
    ::System::Xml::XmlTextReaderImpl::ParsingFunction nextNextParsingFunction;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::ParsingFunction) == 0x4);
    // Padding between fields: nextNextParsingFunction and: nodes
    char __padding5[0x4] = {};
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData[] nodes
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*>) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData curNode
    // Size: 0x8
    // Offset: 0xB0
    ::System::Xml::XmlTextReaderImpl::NodeData* curNode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::NodeData*) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0xB8
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 curAttrIndex
    // Size: 0x4
    // Offset: 0xBC
    int curAttrIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 attrCount
    // Size: 0x4
    // Offset: 0xC0
    int attrCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 attrHashtable
    // Size: 0x4
    // Offset: 0xC4
    int attrHashtable;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 attrDuplWalkCount
    // Size: 0x4
    // Offset: 0xC8
    int attrDuplWalkCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean attrNeedNamespaceLookup
    // Size: 0x1
    // Offset: 0xCC
    bool attrNeedNamespaceLookup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean fullAttrCleanup
    // Size: 0x1
    // Offset: 0xCD
    bool fullAttrCleanup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fullAttrCleanup and: attrDuplSortingArray
    char __padding14[0x2] = {};
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData[] attrDuplSortingArray
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*> attrDuplSortingArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*>) == 0x8);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0xD8
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Boolean nameTableFromSettings
    // Size: 0x1
    // Offset: 0xE0
    bool nameTableFromSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: nameTableFromSettings and: xmlResolver
    char __padding17[0x7] = {};
    // private System.Xml.XmlResolver xmlResolver
    // Size: 0x8
    // Offset: 0xE8
    ::System::Xml::XmlResolver* xmlResolver;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlResolver*) == 0x8);
    // private System.String url
    // Size: 0x8
    // Offset: 0xF0
    ::StringW url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean normalize
    // Size: 0x1
    // Offset: 0xF8
    bool normalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean supportNamespaces
    // Size: 0x1
    // Offset: 0xF9
    bool supportNamespaces;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportNamespaces and: whitespaceHandling
    char __padding21[0x2] = {};
    // private System.Xml.WhitespaceHandling whitespaceHandling
    // Size: 0x4
    // Offset: 0xFC
    ::System::Xml::WhitespaceHandling whitespaceHandling;
    // Field size check
    static_assert(sizeof(::System::Xml::WhitespaceHandling) == 0x4);
    // private System.Xml.DtdProcessing dtdProcessing
    // Size: 0x4
    // Offset: 0x100
    ::System::Xml::DtdProcessing dtdProcessing;
    // Field size check
    static_assert(sizeof(::System::Xml::DtdProcessing) == 0x4);
    // private System.Xml.EntityHandling entityHandling
    // Size: 0x4
    // Offset: 0x104
    ::System::Xml::EntityHandling entityHandling;
    // Field size check
    static_assert(sizeof(::System::Xml::EntityHandling) == 0x4);
    // private System.Boolean ignorePIs
    // Size: 0x1
    // Offset: 0x108
    bool ignorePIs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ignoreComments
    // Size: 0x1
    // Offset: 0x109
    bool ignoreComments;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean checkCharacters
    // Size: 0x1
    // Offset: 0x10A
    bool checkCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkCharacters and: lineNumberOffset
    char __padding27[0x1] = {};
    // private System.Int32 lineNumberOffset
    // Size: 0x4
    // Offset: 0x10C
    int lineNumberOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 linePositionOffset
    // Size: 0x4
    // Offset: 0x110
    int linePositionOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean closeInput
    // Size: 0x1
    // Offset: 0x114
    bool closeInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closeInput and: maxCharactersInDocument
    char __padding30[0x3] = {};
    // private System.Int64 maxCharactersInDocument
    // Size: 0x8
    // Offset: 0x118
    int64_t maxCharactersInDocument;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 maxCharactersFromEntities
    // Size: 0x8
    // Offset: 0x120
    int64_t maxCharactersFromEntities;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean v1Compat
    // Size: 0x1
    // Offset: 0x128
    bool v1Compat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: v1Compat and: namespaceManager
    char __padding33[0x7] = {};
    // private System.Xml.XmlNamespaceManager namespaceManager
    // Size: 0x8
    // Offset: 0x130
    ::System::Xml::XmlNamespaceManager* namespaceManager;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamespaceManager*) == 0x8);
    // private System.String lastPrefix
    // Size: 0x8
    // Offset: 0x138
    ::StringW lastPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.XmlContext xmlContext
    // Size: 0x8
    // Offset: 0x140
    ::System::Xml::XmlTextReaderImpl::XmlContext* xmlContext;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::XmlContext*) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingState[] parsingStatesStack
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::System::Xml::XmlTextReaderImpl::ParsingState> parsingStatesStack;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlTextReaderImpl::ParsingState>) == 0x8);
    // private System.Int32 parsingStatesStackTop
    // Size: 0x4
    // Offset: 0x150
    int parsingStatesStackTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: parsingStatesStackTop and: reportedBaseUri
    char __padding38[0x4] = {};
    // private System.String reportedBaseUri
    // Size: 0x8
    // Offset: 0x158
    ::StringW reportedBaseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Text.Encoding reportedEncoding
    // Size: 0x8
    // Offset: 0x160
    ::System::Text::Encoding* reportedEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private System.Xml.IDtdInfo dtdInfo
    // Size: 0x8
    // Offset: 0x168
    ::System::Xml::IDtdInfo* dtdInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdInfo*) == 0x8);
    // private System.Xml.XmlNodeType fragmentType
    // Size: 0x4
    // Offset: 0x170
    ::System::Xml::XmlNodeType fragmentType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNodeType) == 0x4);
    // Padding between fields: fragmentType and: fragmentParserContext
    char __padding42[0x4] = {};
    // private System.Xml.XmlParserContext fragmentParserContext
    // Size: 0x8
    // Offset: 0x178
    ::System::Xml::XmlParserContext* fragmentParserContext;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlParserContext*) == 0x8);
    // private System.Boolean fragment
    // Size: 0x1
    // Offset: 0x180
    bool fragment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fragment and: incReadDecoder
    char __padding44[0x7] = {};
    // private System.Xml.IncrementalReadDecoder incReadDecoder
    // Size: 0x8
    // Offset: 0x188
    ::System::Xml::IncrementalReadDecoder* incReadDecoder;
    // Field size check
    static_assert(sizeof(::System::Xml::IncrementalReadDecoder*) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState incReadState
    // Size: 0x4
    // Offset: 0x190
    ::System::Xml::XmlTextReaderImpl::IncrementalReadState incReadState;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::IncrementalReadState) == 0x4);
    // private System.Xml.LineInfo incReadLineInfo
    // Size: 0x8
    // Offset: 0x194
    ::System::Xml::LineInfo incReadLineInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::LineInfo) == 0x8);
    // private System.Int32 incReadDepth
    // Size: 0x4
    // Offset: 0x19C
    int incReadDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 incReadLeftStartPos
    // Size: 0x4
    // Offset: 0x1A0
    int incReadLeftStartPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 incReadLeftEndPos
    // Size: 0x4
    // Offset: 0x1A4
    int incReadLeftEndPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 attributeValueBaseEntityId
    // Size: 0x4
    // Offset: 0x1A8
    int attributeValueBaseEntityId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean emptyEntityInAttributeResolved
    // Size: 0x1
    // Offset: 0x1AC
    bool emptyEntityInAttributeResolved;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: emptyEntityInAttributeResolved and: validationEventHandling
    char __padding52[0x3] = {};
    // private System.Xml.IValidationEventHandling validationEventHandling
    // Size: 0x8
    // Offset: 0x1B0
    ::System::Xml::IValidationEventHandling* validationEventHandling;
    // Field size check
    static_assert(sizeof(::System::Xml::IValidationEventHandling*) == 0x8);
    // private System.Xml.XmlTextReaderImpl/System.Xml.OnDefaultAttributeUseDelegate onDefaultAttributeUse
    // Size: 0x8
    // Offset: 0x1B8
    ::System::Xml::XmlTextReaderImpl::OnDefaultAttributeUseDelegate* onDefaultAttributeUse;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::OnDefaultAttributeUseDelegate*) == 0x8);
    // private System.Boolean validatingReaderCompatFlag
    // Size: 0x1
    // Offset: 0x1C0
    bool validatingReaderCompatFlag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean addDefaultAttributesAndNormalize
    // Size: 0x1
    // Offset: 0x1C1
    bool addDefaultAttributesAndNormalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: addDefaultAttributesAndNormalize and: stringBuilder
    char __padding56[0x6] = {};
    // private System.Text.StringBuilder stringBuilder
    // Size: 0x8
    // Offset: 0x1C8
    ::System::Text::StringBuilder* stringBuilder;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Boolean rootElementParsed
    // Size: 0x1
    // Offset: 0x1D0
    bool rootElementParsed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean standalone
    // Size: 0x1
    // Offset: 0x1D1
    bool standalone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: standalone and: nextEntityId
    char __padding59[0x2] = {};
    // private System.Int32 nextEntityId
    // Size: 0x4
    // Offset: 0x1D4
    int nextEntityId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode parsingMode
    // Size: 0x4
    // Offset: 0x1D8
    ::System::Xml::XmlTextReaderImpl::ParsingMode parsingMode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlTextReaderImpl::ParsingMode) == 0x4);
    // private System.Xml.ReadState readState
    // Size: 0x4
    // Offset: 0x1DC
    ::System::Xml::ReadState readState;
    // Field size check
    static_assert(sizeof(::System::Xml::ReadState) == 0x4);
    // private System.Xml.IDtdEntityInfo lastEntity
    // Size: 0x8
    // Offset: 0x1E0
    ::System::Xml::IDtdEntityInfo* lastEntity;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdEntityInfo*) == 0x8);
    // private System.Boolean afterResetState
    // Size: 0x1
    // Offset: 0x1E8
    bool afterResetState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: afterResetState and: documentStartBytePos
    char __padding64[0x3] = {};
    // private System.Int32 documentStartBytePos
    // Size: 0x4
    // Offset: 0x1EC
    int documentStartBytePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 readValueOffset
    // Size: 0x4
    // Offset: 0x1F0
    int readValueOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: readValueOffset and: charactersInDocument
    char __padding66[0x4] = {};
    // private System.Int64 charactersInDocument
    // Size: 0x8
    // Offset: 0x1F8
    int64_t charactersInDocument;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 charactersFromEntities
    // Size: 0x8
    // Offset: 0x200
    int64_t charactersFromEntities;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Xml.IDtdEntityInfo,System.Xml.IDtdEntityInfo> currentEntities
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Generic::Dictionary_2<::System::Xml::IDtdEntityInfo*, ::System::Xml::IDtdEntityInfo*>* currentEntities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Xml::IDtdEntityInfo*, ::System::Xml::IDtdEntityInfo*>*) == 0x8);
    // private System.Boolean disableUndeclaredEntityCheck
    // Size: 0x1
    // Offset: 0x210
    bool disableUndeclaredEntityCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableUndeclaredEntityCheck and: outerReader
    char __padding70[0x7] = {};
    // private System.Xml.XmlReader outerReader
    // Size: 0x8
    // Offset: 0x218
    ::System::Xml::XmlReader* outerReader;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlReader*) == 0x8);
    // private System.Boolean xmlResolverIsSet
    // Size: 0x1
    // Offset: 0x220
    bool xmlResolverIsSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: xmlResolverIsSet and: Xml
    char __padding72[0x7] = {};
    // private System.String Xml
    // Size: 0x8
    // Offset: 0x228
    ::StringW Xml;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String XmlNs
    // Size: 0x8
    // Offset: 0x230
    ::StringW XmlNs;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Threading.Tasks.Task`1<System.Tuple`4<System.Int32,System.Int32,System.Int32,System.Boolean>> parseText_dummyTask
    // Size: 0x8
    // Offset: 0x238
    ::System::Threading::Tasks::Task_1<::System::Tuple_4<int, int, int, bool>*>* parseText_dummyTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task_1<::System::Tuple_4<int, int, int, bool>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Xml::IXmlNamespaceResolver
    operator ::System::Xml::IXmlNamespaceResolver() noexcept {
      return *reinterpret_cast<::System::Xml::IXmlNamespaceResolver*>(this);
    }
    // Creating interface conversion operator: i_IXmlNamespaceResolver
    inline ::System::Xml::IXmlNamespaceResolver* i_IXmlNamespaceResolver() noexcept {
      return reinterpret_cast<::System::Xml::IXmlNamespaceResolver*>(this);
    }
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.LaterInitParam laterInitParam
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::LaterInitParam*& dyn_laterInitParam();
    // Get instance field reference: private System.Xml.XmlCharType xmlCharType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlCharType& dyn_xmlCharType();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingState ps
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::ParsingState& dyn_ps();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction parsingFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::ParsingFunction& dyn_parsingFunction();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction nextParsingFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::ParsingFunction& dyn_nextParsingFunction();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingFunction nextNextParsingFunction
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::ParsingFunction& dyn_nextNextParsingFunction();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.NodeData[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*>& dyn_nodes();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.NodeData curNode
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::NodeData*& dyn_curNode();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: private System.Int32 curAttrIndex
    [[deprecated("Use field access instead!")]] int& dyn_curAttrIndex();
    // Get instance field reference: private System.Int32 attrCount
    [[deprecated("Use field access instead!")]] int& dyn_attrCount();
    // Get instance field reference: private System.Int32 attrHashtable
    [[deprecated("Use field access instead!")]] int& dyn_attrHashtable();
    // Get instance field reference: private System.Int32 attrDuplWalkCount
    [[deprecated("Use field access instead!")]] int& dyn_attrDuplWalkCount();
    // Get instance field reference: private System.Boolean attrNeedNamespaceLookup
    [[deprecated("Use field access instead!")]] bool& dyn_attrNeedNamespaceLookup();
    // Get instance field reference: private System.Boolean fullAttrCleanup
    [[deprecated("Use field access instead!")]] bool& dyn_fullAttrCleanup();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.NodeData[] attrDuplSortingArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*>& dyn_attrDuplSortingArray();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Boolean nameTableFromSettings
    [[deprecated("Use field access instead!")]] bool& dyn_nameTableFromSettings();
    // Get instance field reference: private System.Xml.XmlResolver xmlResolver
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlResolver*& dyn_xmlResolver();
    // Get instance field reference: private System.String url
    [[deprecated("Use field access instead!")]] ::StringW& dyn_url();
    // Get instance field reference: private System.Boolean normalize
    [[deprecated("Use field access instead!")]] bool& dyn_normalize();
    // Get instance field reference: private System.Boolean supportNamespaces
    [[deprecated("Use field access instead!")]] bool& dyn_supportNamespaces();
    // Get instance field reference: private System.Xml.WhitespaceHandling whitespaceHandling
    [[deprecated("Use field access instead!")]] ::System::Xml::WhitespaceHandling& dyn_whitespaceHandling();
    // Get instance field reference: private System.Xml.DtdProcessing dtdProcessing
    [[deprecated("Use field access instead!")]] ::System::Xml::DtdProcessing& dyn_dtdProcessing();
    // Get instance field reference: private System.Xml.EntityHandling entityHandling
    [[deprecated("Use field access instead!")]] ::System::Xml::EntityHandling& dyn_entityHandling();
    // Get instance field reference: private System.Boolean ignorePIs
    [[deprecated("Use field access instead!")]] bool& dyn_ignorePIs();
    // Get instance field reference: private System.Boolean ignoreComments
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreComments();
    // Get instance field reference: private System.Boolean checkCharacters
    [[deprecated("Use field access instead!")]] bool& dyn_checkCharacters();
    // Get instance field reference: private System.Int32 lineNumberOffset
    [[deprecated("Use field access instead!")]] int& dyn_lineNumberOffset();
    // Get instance field reference: private System.Int32 linePositionOffset
    [[deprecated("Use field access instead!")]] int& dyn_linePositionOffset();
    // Get instance field reference: private System.Boolean closeInput
    [[deprecated("Use field access instead!")]] bool& dyn_closeInput();
    // Get instance field reference: private System.Int64 maxCharactersInDocument
    [[deprecated("Use field access instead!")]] int64_t& dyn_maxCharactersInDocument();
    // Get instance field reference: private System.Int64 maxCharactersFromEntities
    [[deprecated("Use field access instead!")]] int64_t& dyn_maxCharactersFromEntities();
    // Get instance field reference: private System.Boolean v1Compat
    [[deprecated("Use field access instead!")]] bool& dyn_v1Compat();
    // Get instance field reference: private System.Xml.XmlNamespaceManager namespaceManager
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamespaceManager*& dyn_namespaceManager();
    // Get instance field reference: private System.String lastPrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lastPrefix();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.XmlContext xmlContext
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::XmlContext*& dyn_xmlContext();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingState[] parsingStatesStack
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlTextReaderImpl::ParsingState>& dyn_parsingStatesStack();
    // Get instance field reference: private System.Int32 parsingStatesStackTop
    [[deprecated("Use field access instead!")]] int& dyn_parsingStatesStackTop();
    // Get instance field reference: private System.String reportedBaseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_reportedBaseUri();
    // Get instance field reference: private System.Text.Encoding reportedEncoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_reportedEncoding();
    // Get instance field reference: private System.Xml.IDtdInfo dtdInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdInfo*& dyn_dtdInfo();
    // Get instance field reference: private System.Xml.XmlNodeType fragmentType
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNodeType& dyn_fragmentType();
    // Get instance field reference: private System.Xml.XmlParserContext fragmentParserContext
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlParserContext*& dyn_fragmentParserContext();
    // Get instance field reference: private System.Boolean fragment
    [[deprecated("Use field access instead!")]] bool& dyn_fragment();
    // Get instance field reference: private System.Xml.IncrementalReadDecoder incReadDecoder
    [[deprecated("Use field access instead!")]] ::System::Xml::IncrementalReadDecoder*& dyn_incReadDecoder();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.IncrementalReadState incReadState
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::IncrementalReadState& dyn_incReadState();
    // Get instance field reference: private System.Xml.LineInfo incReadLineInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::LineInfo& dyn_incReadLineInfo();
    // Get instance field reference: private System.Int32 incReadDepth
    [[deprecated("Use field access instead!")]] int& dyn_incReadDepth();
    // Get instance field reference: private System.Int32 incReadLeftStartPos
    [[deprecated("Use field access instead!")]] int& dyn_incReadLeftStartPos();
    // Get instance field reference: private System.Int32 incReadLeftEndPos
    [[deprecated("Use field access instead!")]] int& dyn_incReadLeftEndPos();
    // Get instance field reference: private System.Int32 attributeValueBaseEntityId
    [[deprecated("Use field access instead!")]] int& dyn_attributeValueBaseEntityId();
    // Get instance field reference: private System.Boolean emptyEntityInAttributeResolved
    [[deprecated("Use field access instead!")]] bool& dyn_emptyEntityInAttributeResolved();
    // Get instance field reference: private System.Xml.IValidationEventHandling validationEventHandling
    [[deprecated("Use field access instead!")]] ::System::Xml::IValidationEventHandling*& dyn_validationEventHandling();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.OnDefaultAttributeUseDelegate onDefaultAttributeUse
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::OnDefaultAttributeUseDelegate*& dyn_onDefaultAttributeUse();
    // Get instance field reference: private System.Boolean validatingReaderCompatFlag
    [[deprecated("Use field access instead!")]] bool& dyn_validatingReaderCompatFlag();
    // Get instance field reference: private System.Boolean addDefaultAttributesAndNormalize
    [[deprecated("Use field access instead!")]] bool& dyn_addDefaultAttributesAndNormalize();
    // Get instance field reference: private System.Text.StringBuilder stringBuilder
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_stringBuilder();
    // Get instance field reference: private System.Boolean rootElementParsed
    [[deprecated("Use field access instead!")]] bool& dyn_rootElementParsed();
    // Get instance field reference: private System.Boolean standalone
    [[deprecated("Use field access instead!")]] bool& dyn_standalone();
    // Get instance field reference: private System.Int32 nextEntityId
    [[deprecated("Use field access instead!")]] int& dyn_nextEntityId();
    // Get instance field reference: private System.Xml.XmlTextReaderImpl/System.Xml.ParsingMode parsingMode
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlTextReaderImpl::ParsingMode& dyn_parsingMode();
    // Get instance field reference: private System.Xml.ReadState readState
    [[deprecated("Use field access instead!")]] ::System::Xml::ReadState& dyn_readState();
    // Get instance field reference: private System.Xml.IDtdEntityInfo lastEntity
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdEntityInfo*& dyn_lastEntity();
    // Get instance field reference: private System.Boolean afterResetState
    [[deprecated("Use field access instead!")]] bool& dyn_afterResetState();
    // Get instance field reference: private System.Int32 documentStartBytePos
    [[deprecated("Use field access instead!")]] int& dyn_documentStartBytePos();
    // Get instance field reference: private System.Int32 readValueOffset
    [[deprecated("Use field access instead!")]] int& dyn_readValueOffset();
    // Get instance field reference: private System.Int64 charactersInDocument
    [[deprecated("Use field access instead!")]] int64_t& dyn_charactersInDocument();
    // Get instance field reference: private System.Int64 charactersFromEntities
    [[deprecated("Use field access instead!")]] int64_t& dyn_charactersFromEntities();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Xml.IDtdEntityInfo,System.Xml.IDtdEntityInfo> currentEntities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Xml::IDtdEntityInfo*, ::System::Xml::IDtdEntityInfo*>*& dyn_currentEntities();
    // Get instance field reference: private System.Boolean disableUndeclaredEntityCheck
    [[deprecated("Use field access instead!")]] bool& dyn_disableUndeclaredEntityCheck();
    // Get instance field reference: private System.Xml.XmlReader outerReader
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlReader*& dyn_outerReader();
    // Get instance field reference: private System.Boolean xmlResolverIsSet
    [[deprecated("Use field access instead!")]] bool& dyn_xmlResolverIsSet();
    // Get instance field reference: private System.String Xml
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Xml();
    // Get instance field reference: private System.String XmlNs
    [[deprecated("Use field access instead!")]] ::StringW& dyn_XmlNs();
    // Get instance field reference: private System.Threading.Tasks.Task`1<System.Tuple`4<System.Int32,System.Int32,System.Int32,System.Boolean>> parseText_dummyTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task_1<::System::Tuple_4<int, int, int, bool>*>*& dyn_parseText_dummyTask();
    // System.Void set_OuterReader(System.Xml.XmlReader value)
    // Offset: 0x15EDB60
    void set_OuterReader(::System::Xml::XmlReader* value);
    // System.Void set_Namespaces(System.Boolean value)
    // Offset: 0x15DFCAC
    void set_Namespaces(bool value);
    // System.Void set_EntityHandling(System.Xml.EntityHandling value)
    // Offset: 0x15E93F4
    void set_EntityHandling(::System::Xml::EntityHandling value);
    // System.Void set_XmlResolver(System.Xml.XmlResolver value)
    // Offset: 0x15DFE60
    void set_XmlResolver(::System::Xml::XmlResolver* value);
    // System.Xml.XmlNameTable get_DtdParserProxy_NameTable()
    // Offset: 0x15EDB9C
    ::System::Xml::XmlNameTable* get_DtdParserProxy_NameTable();
    // System.Xml.IXmlNamespaceResolver get_DtdParserProxy_NamespaceResolver()
    // Offset: 0x15EDBA4
    ::System::Xml::IXmlNamespaceResolver* get_DtdParserProxy_NamespaceResolver();
    // System.Boolean get_DtdParserProxy_DtdValidation()
    // Offset: 0x15EDBAC
    bool get_DtdParserProxy_DtdValidation();
    // System.Boolean get_DtdParserProxy_Normalization()
    // Offset: 0x15EDBCC
    bool get_DtdParserProxy_Normalization();
    // System.Boolean get_DtdParserProxy_Namespaces()
    // Offset: 0x15EDBD4
    bool get_DtdParserProxy_Namespaces();
    // System.Boolean get_DtdParserProxy_V1CompatibilityMode()
    // Offset: 0x15EDBDC
    bool get_DtdParserProxy_V1CompatibilityMode();
    // System.Uri get_DtdParserProxy_BaseUri()
    // Offset: 0x15EDBE4
    ::System::Uri* get_DtdParserProxy_BaseUri();
    // System.Boolean get_DtdParserProxy_IsEof()
    // Offset: 0x15EDC98
    bool get_DtdParserProxy_IsEof();
    // System.Char[] get_DtdParserProxy_ParsingBuffer()
    // Offset: 0x15EDCA0
    ::ArrayW<::Il2CppChar> get_DtdParserProxy_ParsingBuffer();
    // System.Int32 get_DtdParserProxy_ParsingBufferLength()
    // Offset: 0x15EDCA8
    int get_DtdParserProxy_ParsingBufferLength();
    // System.Int32 get_DtdParserProxy_CurrentPosition()
    // Offset: 0x15EDCB0
    int get_DtdParserProxy_CurrentPosition();
    // System.Void set_DtdParserProxy_CurrentPosition(System.Int32 value)
    // Offset: 0x15EDCB8
    void set_DtdParserProxy_CurrentPosition(int value);
    // System.Int32 get_DtdParserProxy_EntityStackLength()
    // Offset: 0x15EDCC0
    int get_DtdParserProxy_EntityStackLength();
    // System.Boolean get_DtdParserProxy_IsEntityEolNormalized()
    // Offset: 0x15EDCCC
    bool get_DtdParserProxy_IsEntityEolNormalized();
    // System.Xml.IValidationEventHandling get_DtdParserProxy_ValidationEventHandling()
    // Offset: 0x15EDCD4
    ::System::Xml::IValidationEventHandling* get_DtdParserProxy_ValidationEventHandling();
    // System.Int32 get_DtdParserProxy_LineNo()
    // Offset: 0x15EDD04
    int get_DtdParserProxy_LineNo();
    // System.Int32 get_DtdParserProxy_LineStartPosition()
    // Offset: 0x15EDD0C
    int get_DtdParserProxy_LineStartPosition();
    // private System.Boolean get_IsResolverNull()
    // Offset: 0x15EEA2C
    bool get_IsResolverNull();
    // private System.Boolean get_InAttributeValueIterator()
    // Offset: 0x15EA968
    bool get_InAttributeValueIterator();
    // private System.Boolean get_DtdValidation()
    // Offset: 0x15EDBBC
    bool get_DtdValidation();
    // private System.Boolean get_InEntity()
    // Offset: 0x15F14DC
    bool get_InEntity();
    // System.Void set_XmlValidatingReaderCompatibilityMode(System.Boolean value)
    // Offset: 0x15E0F58
    void set_XmlValidatingReaderCompatibilityMode(bool value);
    // System.Void set_DisableUndeclaredEntityCheck(System.Boolean value)
    // Offset: 0x15F9CF4
    void set_DisableUndeclaredEntityCheck(bool value);
    // System.Void .ctor(System.Xml.XmlNameTable nt)
    // Offset: 0x15E9500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReaderImpl* New_ctor(::System::Xml::XmlNameTable* nt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReaderImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReaderImpl*, creationType>(nt)));
    }
    // System.Void .ctor(System.IO.TextReader input, System.Xml.XmlNameTable nt)
    // Offset: 0x15E9020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReaderImpl* New_ctor(::System::IO::TextReader* input, ::System::Xml::XmlNameTable* nt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReaderImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReaderImpl*, creationType>(input, nt)));
    }
    // System.Void .ctor(System.String url, System.IO.TextReader input, System.Xml.XmlNameTable nt)
    // Offset: 0x15E97F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReaderImpl* New_ctor(::StringW url, ::System::IO::TextReader* input, ::System::Xml::XmlNameTable* nt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReaderImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReaderImpl*, creationType>(url, input, nt)));
    }
    // System.Void .ctor(System.String xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
    // Offset: 0x15DFB98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReaderImpl* New_ctor(::StringW xmlFragment, ::System::Xml::XmlNodeType fragType, ::System::Xml::XmlParserContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReaderImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReaderImpl*, creationType>(xmlFragment, fragType, context)));
    }
    // System.Void .ctor(System.String xmlFragment, System.Xml.XmlParserContext context)
    // Offset: 0x15E1174
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTextReaderImpl* New_ctor(::StringW xmlFragment, ::System::Xml::XmlParserContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlTextReaderImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTextReaderImpl*, creationType>(xmlFragment, context)));
    }
    // private System.Void FinishInitUriString()
    // Offset: 0x15E9BA4
    void FinishInitUriString();
    // private System.Void FinishInitStream()
    // Offset: 0x15EA174
    void FinishInitStream();
    // private System.Void FinishInitTextReader()
    // Offset: 0x15EA1FC
    void FinishInitTextReader();
    // private System.Void FinishInit()
    // Offset: 0x15EABFC
    void FinishInit();
    // private System.String System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String prefix)
    // Offset: 0x15EDB68
    ::StringW System_Xml_IXmlNamespaceResolver_LookupNamespace(::StringW prefix);
    // private System.String System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String namespaceName)
    // Offset: 0x15EDB78
    ::StringW System_Xml_IXmlNamespaceResolver_LookupPrefix(::StringW namespaceName);
    // System.String LookupPrefix(System.String namespaceName)
    // Offset: 0x15E93B8
    ::StringW LookupPrefix(::StringW namespaceName);
    // System.Void DtdParserProxy_OnNewLine(System.Int32 pos)
    // Offset: 0x15EDCDC
    void DtdParserProxy_OnNewLine(int pos);
    // System.Int32 DtdParserProxy_ReadData()
    // Offset: 0x15EDD14
    int DtdParserProxy_ReadData();
    // System.Int32 DtdParserProxy_ParseNumericCharRef(System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0x15EE160
    int DtdParserProxy_ParseNumericCharRef(::System::Text::StringBuilder* internalSubsetBuilder);
    // System.Int32 DtdParserProxy_ParseNamedCharRef(System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0x15EE240
    int DtdParserProxy_ParseNamedCharRef(bool expand, ::System::Text::StringBuilder* internalSubsetBuilder);
    // System.Void DtdParserProxy_ParsePI(System.Text.StringBuilder sb)
    // Offset: 0x15EE2B8
    void DtdParserProxy_ParsePI(::System::Text::StringBuilder* sb);
    // System.Void DtdParserProxy_ParseComment(System.Text.StringBuilder sb)
    // Offset: 0x15EE674
    void DtdParserProxy_ParseComment(::System::Text::StringBuilder* sb);
    // private System.Xml.XmlResolver GetTempResolver()
    // Offset: 0x15EEA78
    ::System::Xml::XmlResolver* GetTempResolver();
    // System.Boolean DtdParserProxy_PushEntity(System.Xml.IDtdEntityInfo entity, out System.Int32 entityId)
    // Offset: 0x15EEAE0
    bool DtdParserProxy_PushEntity(::System::Xml::IDtdEntityInfo* entity, ByRef<int> entityId);
    // System.Boolean DtdParserProxy_PopEntity(out System.Xml.IDtdEntityInfo oldEntity, out System.Int32 newEntityId)
    // Offset: 0x15EF31C
    bool DtdParserProxy_PopEntity(ByRef<::System::Xml::IDtdEntityInfo*> oldEntity, ByRef<int> newEntityId);
    // System.Boolean DtdParserProxy_PushExternalSubset(System.String systemId, System.String publicId)
    // Offset: 0x15EF3C4
    bool DtdParserProxy_PushExternalSubset(::StringW systemId, ::StringW publicId);
    // System.Void DtdParserProxy_PushInternalDtd(System.String baseUri, System.String internalDtd)
    // Offset: 0x15EFAF8
    void DtdParserProxy_PushInternalDtd(::StringW baseUri, ::StringW internalDtd);
    // System.Void DtdParserProxy_Throw(System.Exception e)
    // Offset: 0x15EFD88
    void DtdParserProxy_Throw(::System::Exception* e);
    // System.Void DtdParserProxy_OnSystemId(System.String systemId, System.Xml.LineInfo keywordLineInfo, System.Xml.LineInfo systemLiteralLineInfo)
    // Offset: 0x15EFE4C
    void DtdParserProxy_OnSystemId(::StringW systemId, ::System::Xml::LineInfo keywordLineInfo, ::System::Xml::LineInfo systemLiteralLineInfo);
    // System.Void DtdParserProxy_OnPublicId(System.String publicId, System.Xml.LineInfo keywordLineInfo, System.Xml.LineInfo publicLiteralLineInfo)
    // Offset: 0x15EFF68
    void DtdParserProxy_OnPublicId(::StringW publicId, ::System::Xml::LineInfo keywordLineInfo, ::System::Xml::LineInfo publicLiteralLineInfo);
    // private System.Void Throw(System.Int32 pos, System.String res, System.String arg)
    // Offset: 0x15EFFFC
    void Throw(int pos, ::StringW res, ::StringW arg);
    // private System.Void Throw(System.Int32 pos, System.String res, System.String[] args)
    // Offset: 0x15F00B0
    void Throw(int pos, ::StringW res, ::ArrayW<::StringW> args);
    // private System.Void Throw(System.Int32 pos, System.String res)
    // Offset: 0x15F0164
    void Throw(int pos, ::StringW res);
    // private System.Void Throw(System.String res)
    // Offset: 0x15F01C8
    void Throw(::StringW res);
    // private System.Void Throw(System.String res, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0x15F0224
    void Throw(::StringW res, int lineNo, int linePos);
    // private System.Void Throw(System.String res, System.String arg)
    // Offset: 0x15F0014
    void Throw(::StringW res, ::StringW arg);
    // private System.Void Throw(System.String res, System.String arg, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0x15F02C0
    void Throw(::StringW res, ::StringW arg, int lineNo, int linePos);
    // private System.Void Throw(System.String res, System.String[] args)
    // Offset: 0x15F00C8
    void Throw(::StringW res, ::ArrayW<::StringW> args);
    // private System.Void Throw(System.String res, System.String arg, System.Exception innerException)
    // Offset: 0x15F034C
    void Throw(::StringW res, ::StringW arg, ::System::Exception* innerException);
    // private System.Void Throw(System.String res, System.String[] args, System.Exception innerException)
    // Offset: 0x15F03E0
    void Throw(::StringW res, ::ArrayW<::StringW> args, ::System::Exception* innerException);
    // private System.Void Throw(System.Exception e)
    // Offset: 0x15EFD94
    void Throw(::System::Exception* e);
    // private System.Void ReThrow(System.Exception e, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0x15F0498
    void ReThrow(::System::Exception* e, int lineNo, int linePos);
    // private System.Void ThrowWithoutLineInfo(System.String res)
    // Offset: 0x15ECA74
    void ThrowWithoutLineInfo(::StringW res);
    // private System.Void ThrowWithoutLineInfo(System.String res, System.String arg)
    // Offset: 0x15F053C
    void ThrowWithoutLineInfo(::StringW res, ::StringW arg);
    // private System.Void ThrowWithoutLineInfo(System.String res, System.String[] args, System.Exception innerException)
    // Offset: 0x15F05B4
    void ThrowWithoutLineInfo(::StringW res, ::ArrayW<::StringW> args, ::System::Exception* innerException);
    // private System.Void ThrowInvalidChar(System.Char[] data, System.Int32 length, System.Int32 invCharPos)
    // Offset: 0x15F063C
    void ThrowInvalidChar(::ArrayW<::Il2CppChar> data, int length, int invCharPos);
    // private System.Void SetErrorState()
    // Offset: 0x15F0484
    void SetErrorState();
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSeverityType severity, System.String code, System.String arg, System.Int32 lineNo, System.Int32 linePos)
    // Offset: 0x15EE980
    void SendValidationEvent(::System::Xml::Schema::XmlSeverityType severity, ::StringW code, ::StringW arg, int lineNo, int linePos);
    // private System.Void SendValidationEvent(System.Xml.Schema.XmlSeverityType severity, System.Xml.Schema.XmlSchemaException exception)
    // Offset: 0x15F06B0
    void SendValidationEvent(::System::Xml::Schema::XmlSeverityType severity, ::System::Xml::Schema::XmlSchemaException* exception);
    // private System.Void FinishAttributeValueIterator()
    // Offset: 0x15EA98C
    void FinishAttributeValueIterator();
    // private System.Void InitStreamInput(System.Uri baseUri, System.IO.Stream stream, System.Text.Encoding encoding)
    // Offset: 0x15F08BC
    void InitStreamInput(::System::Uri* baseUri, ::System::IO::Stream* stream, ::System::Text::Encoding* encoding);
    // private System.Void InitStreamInput(System.Uri baseUri, System.String baseUriStr, System.IO.Stream stream, System.Text.Encoding encoding)
    // Offset: 0x15F0920
    void InitStreamInput(::System::Uri* baseUri, ::StringW baseUriStr, ::System::IO::Stream* stream, ::System::Text::Encoding* encoding);
    // private System.Void InitStreamInput(System.Uri baseUri, System.String baseUriStr, System.IO.Stream stream, System.Byte[] bytes, System.Int32 byteCount, System.Text.Encoding encoding)
    // Offset: 0x15E9E88
    void InitStreamInput(::System::Uri* baseUri, ::StringW baseUriStr, ::System::IO::Stream* stream, ::ArrayW<uint8_t> bytes, int byteCount, ::System::Text::Encoding* encoding);
    // private System.Void InitTextReaderInput(System.String baseUriStr, System.IO.TextReader input)
    // Offset: 0x15E98B0
    void InitTextReaderInput(::StringW baseUriStr, ::System::IO::TextReader* input);
    // private System.Void InitTextReaderInput(System.String baseUriStr, System.Uri baseUri, System.IO.TextReader input)
    // Offset: 0x15F0C74
    void InitTextReaderInput(::StringW baseUriStr, ::System::Uri* baseUri, ::System::IO::TextReader* input);
    // private System.Void InitStringInput(System.String baseUriStr, System.Text.Encoding originalEncoding, System.String str)
    // Offset: 0x15E98BC
    void InitStringInput(::StringW baseUriStr, ::System::Text::Encoding* originalEncoding, ::StringW str);
    // private System.Void InitFragmentReader(System.Xml.XmlNodeType fragmentType, System.Xml.XmlParserContext parserContext, System.Boolean allowXmlDeclFragment)
    // Offset: 0x15E99A0
    void InitFragmentReader(::System::Xml::XmlNodeType fragmentType, ::System::Xml::XmlParserContext* parserContext, bool allowXmlDeclFragment);
    // private System.Void ProcessDtdFromParserContext(System.Xml.XmlParserContext context)
    // Offset: 0x15EA100
    void ProcessDtdFromParserContext(::System::Xml::XmlParserContext* context);
    // private System.Void OpenUrl()
    // Offset: 0x15EB788
    void OpenUrl();
    // private System.Void OpenUrlDelegate(System.Object xmlResolver)
    // Offset: 0x15F0F60
    void OpenUrlDelegate(::Il2CppObject* xmlResolver);
    // private System.Text.Encoding DetectEncoding()
    // Offset: 0x15F0930
    ::System::Text::Encoding* DetectEncoding();
    // private System.Void SetupEncoding(System.Text.Encoding encoding)
    // Offset: 0x15F0B50
    void SetupEncoding(::System::Text::Encoding* encoding);
    // private System.Void SwitchEncoding(System.Text.Encoding newEncoding)
    // Offset: 0x15F1058
    void SwitchEncoding(::System::Text::Encoding* newEncoding);
    // private System.Text.Encoding CheckEncoding(System.String newEncodingName)
    // Offset: 0x15F1208
    ::System::Text::Encoding* CheckEncoding(::StringW newEncodingName);
    // private System.Void UnDecodeChars()
    // Offset: 0x15F115C
    void UnDecodeChars();
    // private System.Void SwitchEncodingToUTF8()
    // Offset: 0x15F14EC
    void SwitchEncodingToUTF8();
    // private System.Int32 ReadData()
    // Offset: 0x15EDD18
    int ReadData();
    // private System.Int32 GetChars(System.Int32 maxCharsCount)
    // Offset: 0x15F1574
    int GetChars(int maxCharsCount);
    // private System.Void InvalidCharRecovery(ref System.Int32 bytesCount, out System.Int32 charsCount)
    // Offset: 0x15F16C0
    void InvalidCharRecovery(ByRef<int> bytesCount, ByRef<int> charsCount);
    // System.Void Close(System.Boolean closeInput)
    // Offset: 0x15ECCAC
    void Close(bool closeInput);
    // private System.Void ShiftBuffer(System.Int32 sourcePos, System.Int32 destPos, System.Int32 count)
    // Offset: 0x15F18C8
    void ShiftBuffer(int sourcePos, int destPos, int count);
    // private System.Boolean ParseXmlDeclaration(System.Boolean isTextDecl)
    // Offset: 0x15EB928
    bool ParseXmlDeclaration(bool isTextDecl);
    // private System.Boolean ParseDocumentContent()
    // Offset: 0x15EB2EC
    bool ParseDocumentContent();
    // private System.Boolean ParseElementContent()
    // Offset: 0x15EAFE4
    bool ParseElementContent();
    // private System.Void ThrowUnclosedElements()
    // Offset: 0x15F2E0C
    void ThrowUnclosedElements();
    // private System.Void ParseElement()
    // Offset: 0x15F1D60
    void ParseElement();
    // private System.Void AddDefaultAttributesAndNormalize()
    // Offset: 0x15F359C
    void AddDefaultAttributesAndNormalize();
    // private System.Void ParseEndElement()
    // Offset: 0x15F2A14
    void ParseEndElement();
    // private System.Void ThrowTagMismatch(System.Xml.XmlTextReaderImpl/System.Xml.NodeData startTag)
    // Offset: 0x15F46F4
    void ThrowTagMismatch(::System::Xml::XmlTextReaderImpl::NodeData* startTag);
    // private System.Void ParseAttributes()
    // Offset: 0x15F2F9C
    void ParseAttributes();
    // private System.Void ElementNamespaceLookup()
    // Offset: 0x15F3F24
    void ElementNamespaceLookup();
    // private System.Void AttributeNamespaceLookup()
    // Offset: 0x15F463C
    void AttributeNamespaceLookup();
    // private System.Void AttributeDuplCheck()
    // Offset: 0x15F57C4
    void AttributeDuplCheck();
    // private System.Void OnDefaultNamespaceDecl(System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr)
    // Offset: 0x15F541C
    void OnDefaultNamespaceDecl(::System::Xml::XmlTextReaderImpl::NodeData* attr);
    // private System.Void OnNamespaceDecl(System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr)
    // Offset: 0x15F5520
    void OnNamespaceDecl(::System::Xml::XmlTextReaderImpl::NodeData* attr);
    // private System.Void OnXmlReservedAttribute(System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr)
    // Offset: 0x15F5604
    void OnXmlReservedAttribute(::System::Xml::XmlTextReaderImpl::NodeData* attr);
    // private System.Void ParseAttributeValueSlow(System.Int32 curPos, System.Char quoteChar, System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr)
    // Offset: 0x15F4B20
    void ParseAttributeValueSlow(int curPos, ::Il2CppChar quoteChar, ::System::Xml::XmlTextReaderImpl::NodeData* attr);
    // private System.Void AddAttributeChunkToList(System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr, System.Xml.XmlTextReaderImpl/System.Xml.NodeData chunk, ref System.Xml.XmlTextReaderImpl/System.Xml.NodeData lastChunk)
    // Offset: 0x15F5EBC
    void AddAttributeChunkToList(::System::Xml::XmlTextReaderImpl::NodeData* attr, ::System::Xml::XmlTextReaderImpl::NodeData* chunk, ByRef<::System::Xml::XmlTextReaderImpl::NodeData*> lastChunk);
    // private System.Boolean ParseText()
    // Offset: 0x15F248C
    bool ParseText();
    // private System.Boolean ParseText(out System.Int32 startPos, out System.Int32 endPos, ref System.Int32 outOrChars)
    // Offset: 0x15F6028
    bool ParseText(ByRef<int> startPos, ByRef<int> endPos, ByRef<int> outOrChars);
    // private System.Void FinishPartialValue()
    // Offset: 0x15EA4A8
    void FinishPartialValue();
    // private System.Void FinishOtherValueIterator()
    // Offset: 0x15EA570
    void FinishOtherValueIterator();
    // private System.Void SkipPartialTextValue()
    // Offset: 0x15ECAFC
    void SkipPartialTextValue();
    // private System.Void FinishReadValueChunk()
    // Offset: 0x15ECB48
    void FinishReadValueChunk();
    // private System.Void FinishReadContentAsBinary()
    // Offset: 0x15ECB68
    void FinishReadContentAsBinary();
    // private System.Void FinishReadElementContentAsBinary()
    // Offset: 0x15ECBC4
    void FinishReadElementContentAsBinary();
    // private System.Boolean ParseRootLevelWhitespace()
    // Offset: 0x15F2808
    bool ParseRootLevelWhitespace();
    // private System.Void ParseEntityReference()
    // Offset: 0x15EC618
    void ParseEntityReference();
    // private System.Xml.XmlTextReaderImpl/System.Xml.EntityType HandleEntityReference(System.Boolean isInAttributeValue, System.Xml.XmlTextReaderImpl/System.Xml.EntityExpandType expandType, out System.Int32 charRefEndPos)
    // Offset: 0x15F21DC
    ::System::Xml::XmlTextReaderImpl::EntityType HandleEntityReference(bool isInAttributeValue, ::System::Xml::XmlTextReaderImpl::EntityExpandType expandType, ByRef<int> charRefEndPos);
    // private System.Xml.XmlTextReaderImpl/System.Xml.EntityType HandleGeneralEntityReference(System.String name, System.Boolean isInAttributeValue, System.Boolean pushFakeEntityIfNullResolver, System.Int32 entityStartLinePos)
    // Offset: 0x15ED6EC
    ::System::Xml::XmlTextReaderImpl::EntityType HandleGeneralEntityReference(::StringW name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos);
    // private System.Boolean HandleEntityEnd(System.Boolean checkEntityNesting)
    // Offset: 0x15F0784
    bool HandleEntityEnd(bool checkEntityNesting);
    // private System.Void SetupEndEntityNodeInContent()
    // Offset: 0x15EC698
    void SetupEndEntityNodeInContent();
    // private System.Void SetupEndEntityNodeInAttribute()
    // Offset: 0x15F6974
    void SetupEndEntityNodeInAttribute();
    // private System.Boolean ParsePI()
    // Offset: 0x15F1A88
    bool ParsePI();
    // private System.Boolean ParsePI(System.Text.StringBuilder piInDtdStringBuilder)
    // Offset: 0x15EE300
    bool ParsePI(::System::Text::StringBuilder* piInDtdStringBuilder);
    // private System.Boolean ParsePIValue(out System.Int32 outStartPos, out System.Int32 outEndPos)
    // Offset: 0x15F69F0
    bool ParsePIValue(ByRef<int> outStartPos, ByRef<int> outEndPos);
    // private System.Boolean ParseComment()
    // Offset: 0x15F1A90
    bool ParseComment();
    // private System.Void ParseCData()
    // Offset: 0x15F1AF8
    void ParseCData();
    // private System.Void ParseCDataOrComment(System.Xml.XmlNodeType type)
    // Offset: 0x15EE824
    void ParseCDataOrComment(::System::Xml::XmlNodeType type);
    // private System.Boolean ParseCDataOrComment(System.Xml.XmlNodeType type, out System.Int32 outStartPos, out System.Int32 outEndPos)
    // Offset: 0x15F6D84
    bool ParseCDataOrComment(::System::Xml::XmlNodeType type, ByRef<int> outStartPos, ByRef<int> outEndPos);
    // private System.Boolean ParseDoctypeDecl()
    // Offset: 0x15F1B00
    bool ParseDoctypeDecl();
    // private System.Void ParseDtd()
    // Offset: 0x15F71A8
    void ParseDtd();
    // private System.Void SkipDtd()
    // Offset: 0x15F74D4
    void SkipDtd();
    // private System.Void SkipPublicOrSystemIdLiteral()
    // Offset: 0x15F7800
    void SkipPublicOrSystemIdLiteral();
    // private System.Void SkipUntil(System.Char stopChar, System.Boolean recognizeLiterals)
    // Offset: 0x15F78BC
    void SkipUntil(::Il2CppChar stopChar, bool recognizeLiterals);
    // private System.Int32 EatWhitespaces(System.Text.StringBuilder sb)
    // Offset: 0x15EF8A0
    int EatWhitespaces(::System::Text::StringBuilder* sb);
    // private System.Int32 ParseCharRefInline(System.Int32 startPos, out System.Int32 charCount, out System.Xml.XmlTextReaderImpl/System.Xml.EntityType entityType)
    // Offset: 0x15F677C
    int ParseCharRefInline(int startPos, ByRef<int> charCount, ByRef<::System::Xml::XmlTextReaderImpl::EntityType> entityType);
    // private System.Int32 ParseNumericCharRef(System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder, out System.Xml.XmlTextReaderImpl/System.Xml.EntityType entityType)
    // Offset: 0x15EE18C
    int ParseNumericCharRef(bool expand, ::System::Text::StringBuilder* internalSubsetBuilder, ByRef<::System::Xml::XmlTextReaderImpl::EntityType> entityType);
    // private System.Int32 ParseNumericCharRefInline(System.Int32 startPos, System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder, out System.Int32 charCount, out System.Xml.XmlTextReaderImpl/System.Xml.EntityType entityType)
    // Offset: 0x15F7D2C
    int ParseNumericCharRefInline(int startPos, bool expand, ::System::Text::StringBuilder* internalSubsetBuilder, ByRef<int> charCount, ByRef<::System::Xml::XmlTextReaderImpl::EntityType> entityType);
    // private System.Int32 ParseNamedCharRef(System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0x15EE248
    int ParseNamedCharRef(bool expand, ::System::Text::StringBuilder* internalSubsetBuilder);
    // private System.Int32 ParseNamedCharRefInline(System.Int32 startPos, System.Boolean expand, System.Text.StringBuilder internalSubsetBuilder)
    // Offset: 0x15F836C
    int ParseNamedCharRefInline(int startPos, bool expand, ::System::Text::StringBuilder* internalSubsetBuilder);
    // private System.Int32 ParseName()
    // Offset: 0x15F18F0
    int ParseName();
    // private System.Int32 ParseQName(out System.Int32 colonPos)
    // Offset: 0x15F2F8C
    int ParseQName(ByRef<int> colonPos);
    // private System.Int32 ParseQName(System.Boolean isQName, System.Int32 startOffset, out System.Int32 colonPos)
    // Offset: 0x15F865C
    int ParseQName(bool isQName, int startOffset, ByRef<int> colonPos);
    // private System.Boolean ReadDataInName(ref System.Int32 pos)
    // Offset: 0x15F88B4
    bool ReadDataInName(ByRef<int> pos);
    // private System.String ParseEntityName()
    // Offset: 0x15F5EEC
    ::StringW ParseEntityName();
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AddNode(System.Int32 nodeIndex, System.Int32 nodeDepth)
    // Offset: 0x15EC574
    ::System::Xml::XmlTextReaderImpl::NodeData* AddNode(int nodeIndex, int nodeDepth);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AllocNode(System.Int32 nodeIndex, System.Int32 nodeDepth)
    // Offset: 0x15F8900
    ::System::Xml::XmlTextReaderImpl::NodeData* AllocNode(int nodeIndex, int nodeDepth);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AddAttributeNoChecks(System.String name, System.Int32 attrDepth)
    // Offset: 0x15EFEE0
    ::System::Xml::XmlTextReaderImpl::NodeData* AddAttributeNoChecks(::StringW name, int attrDepth);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AddAttribute(System.Int32 endNamePos, System.Int32 colonPos)
    // Offset: 0x15F4970
    ::System::Xml::XmlTextReaderImpl::NodeData* AddAttribute(int endNamePos, int colonPos);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AddAttribute(System.String localName, System.String prefix, System.String nameWPrefix)
    // Offset: 0x15F8A48
    ::System::Xml::XmlTextReaderImpl::NodeData* AddAttribute(::StringW localName, ::StringW prefix, ::StringW nameWPrefix);
    // private System.Void PopElementContext()
    // Offset: 0x15EC5C4
    void PopElementContext();
    // private System.Void OnNewLine(System.Int32 pos)
    // Offset: 0x15EDCF0
    void OnNewLine(int pos);
    // private System.Void OnEof()
    // Offset: 0x15EC9D8
    void OnEof();
    // private System.String LookupNamespace(System.Xml.XmlTextReaderImpl/System.Xml.NodeData node)
    // Offset: 0x15F5B34
    ::StringW LookupNamespace(::System::Xml::XmlTextReaderImpl::NodeData* node);
    // private System.Void AddNamespace(System.String prefix, System.String uri, System.Xml.XmlTextReaderImpl/System.Xml.NodeData attr)
    // Offset: 0x15F5C84
    void AddNamespace(::StringW prefix, ::StringW uri, ::System::Xml::XmlTextReaderImpl::NodeData* attr);
    // private System.Void ResetAttributes()
    // Offset: 0x15EC53C
    void ResetAttributes();
    // private System.Void FullAttributeCleanup()
    // Offset: 0x15F8BC0
    void FullAttributeCleanup();
    // private System.Void PushXmlContext()
    // Offset: 0x15F5C00
    void PushXmlContext();
    // private System.Void PopXmlContext()
    // Offset: 0x15F8B90
    void PopXmlContext();
    // private System.Xml.XmlNodeType GetWhitespaceType()
    // Offset: 0x15F692C
    ::System::Xml::XmlNodeType GetWhitespaceType();
    // private System.Xml.XmlNodeType GetTextNodeType(System.Int32 orChars)
    // Offset: 0x15F6724
    ::System::Xml::XmlNodeType GetTextNodeType(int orChars);
    // private System.Void PushExternalEntityOrSubset(System.String publicId, System.String systemId, System.Uri baseUri, System.String entityName)
    // Offset: 0x15EF4FC
    void PushExternalEntityOrSubset(::StringW publicId, ::StringW systemId, ::System::Uri* baseUri, ::StringW entityName);
    // private System.Boolean OpenAndPush(System.Uri uri)
    // Offset: 0x15F8C3C
    bool OpenAndPush(::System::Uri* uri);
    // private System.Boolean PushExternalEntity(System.Xml.IDtdEntityInfo entity)
    // Offset: 0x15EEBFC
    bool PushExternalEntity(::System::Xml::IDtdEntityInfo* entity);
    // private System.Void PushInternalEntity(System.Xml.IDtdEntityInfo entity)
    // Offset: 0x15EEFC8
    void PushInternalEntity(::System::Xml::IDtdEntityInfo* entity);
    // private System.Void PopEntity()
    // Offset: 0x15EF36C
    void PopEntity();
    // private System.Void RegisterEntity(System.Xml.IDtdEntityInfo entity)
    // Offset: 0x15F8E60
    void RegisterEntity(::System::Xml::IDtdEntityInfo* entity);
    // private System.Void UnregisterEntity()
    // Offset: 0x15F9010
    void UnregisterEntity();
    // private System.Void PushParsingState()
    // Offset: 0x15EFB68
    void PushParsingState();
    // private System.Void PopParsingState()
    // Offset: 0x15F1850
    void PopParsingState();
    // private System.Int32 IncrementalRead()
    // Offset: 0x15F907C
    int IncrementalRead();
    // private System.Void FinishIncrementalRead()
    // Offset: 0x15EC7F0
    void FinishIncrementalRead();
    // private System.Boolean ParseFragmentAttribute()
    // Offset: 0x15EC85C
    bool ParseFragmentAttribute();
    // private System.Boolean ParseAttributeValueChunk()
    // Offset: 0x15ED008
    bool ParseAttributeValueChunk();
    // private System.Void ParseXmlDeclarationFragment()
    // Offset: 0x15EC8EC
    void ParseXmlDeclarationFragment();
    // private System.Void ThrowUnexpectedToken(System.Int32 pos, System.String expectedToken)
    // Offset: 0x15F1AE8
    void ThrowUnexpectedToken(int pos, ::StringW expectedToken);
    // private System.Void ThrowUnexpectedToken(System.String expectedToken1)
    // Offset: 0x15F18E8
    void ThrowUnexpectedToken(::StringW expectedToken1);
    // private System.Void ThrowUnexpectedToken(System.Int32 pos, System.String expectedToken1, System.String expectedToken2)
    // Offset: 0x15F1D50
    void ThrowUnexpectedToken(int pos, ::StringW expectedToken1, ::StringW expectedToken2);
    // private System.Void ThrowUnexpectedToken(System.String expectedToken1, System.String expectedToken2)
    // Offset: 0x15F191C
    void ThrowUnexpectedToken(::StringW expectedToken1, ::StringW expectedToken2);
    // private System.String ParseUnexpectedToken(System.Int32 pos)
    // Offset: 0x15F1D48
    ::StringW ParseUnexpectedToken(int pos);
    // private System.String ParseUnexpectedToken()
    // Offset: 0x15F99B4
    ::StringW ParseUnexpectedToken();
    // private System.Void ThrowExpectingWhitespace(System.Int32 pos)
    // Offset: 0x15F48F0
    void ThrowExpectingWhitespace(int pos);
    // private System.Int32 GetIndexOfAttributeWithoutPrefix(System.String name)
    // Offset: 0x15EA7AC
    int GetIndexOfAttributeWithoutPrefix(::StringW name);
    // private System.Int32 GetIndexOfAttributeWithPrefix(System.String name)
    // Offset: 0x15EA8A0
    int GetIndexOfAttributeWithPrefix(::StringW name);
    // private System.Boolean ZeroEndingStream(System.Int32 pos)
    // Offset: 0x15F67F4
    bool ZeroEndingStream(int pos);
    // private System.Void ParseDtdFromParserContext()
    // Offset: 0x15F0D34
    void ParseDtdFromParserContext();
    // private System.Boolean MoveToNextContentNode(System.Boolean moveIfOnContentNode)
    // Offset: 0x15F6884
    bool MoveToNextContentNode(bool moveIfOnContentNode);
    // System.Void SetDtdInfo(System.Xml.IDtdInfo newDtdInfo)
    // Offset: 0x15E1020
    void SetDtdInfo(::System::Xml::IDtdInfo* newDtdInfo);
    // private System.Boolean AddDefaultAttributeDtd(System.Xml.IDtdDefaultAttributeInfo defAttrInfo, System.Boolean definedInDtd, System.Xml.XmlTextReaderImpl/System.Xml.NodeData[] nameSortedNodeData)
    // Offset: 0x15F3F78
    bool AddDefaultAttributeDtd(::System::Xml::IDtdDefaultAttributeInfo* defAttrInfo, bool definedInDtd, ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*> nameSortedNodeData);
    // private System.Xml.XmlTextReaderImpl/System.Xml.NodeData AddDefaultAttributeInternal(System.String localName, System.String ns, System.String prefix, System.String value, System.Int32 lineNo, System.Int32 linePos, System.Int32 valueLineNo, System.Int32 valueLinePos, System.Boolean isXmlAttribute)
    // Offset: 0x15F9A9C
    ::System::Xml::XmlTextReaderImpl::NodeData* AddDefaultAttributeInternal(::StringW localName, ::StringW ns, ::StringW prefix, ::StringW value, int lineNo, int linePos, int valueLineNo, int valueLinePos, bool isXmlAttribute);
    // private System.Void RegisterConsumedCharacters(System.Int64 characters, System.Boolean inEntityReference)
    // Offset: 0x15EFCB0
    void RegisterConsumedCharacters(int64_t characters, bool inEntityReference);
    // static System.String StripSpaces(System.String value)
    // Offset: 0x15F9D00
    static ::StringW StripSpaces(::StringW value);
    // static System.Void StripSpaces(System.Char[] value, System.Int32 index, ref System.Int32 len)
    // Offset: 0x15F9F10
    static void StripSpaces(::ArrayW<::Il2CppChar> value, int index, ByRef<int> len);
    // static System.Void BlockCopyChars(System.Char[] src, System.Int32 srcOffset, System.Char[] dst, System.Int32 dstOffset, System.Int32 count)
    // Offset: 0x15F1558
    static void BlockCopyChars(::ArrayW<::Il2CppChar> src, int srcOffset, ::ArrayW<::Il2CppChar> dst, int dstOffset, int count);
    // static System.Void BlockCopy(System.Byte[] src, System.Int32 srcOffset, System.Byte[] dst, System.Int32 dstOffset, System.Int32 count)
    // Offset: 0x15F156C
    static void BlockCopy(::ArrayW<uint8_t> src, int srcOffset, ::ArrayW<uint8_t> dst, int dstOffset, int count);
    // public override System.Xml.XmlReaderSettings get_Settings()
    // Offset: 0x15EA268
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlReaderSettings XmlReader::get_Settings()
    ::System::Xml::XmlReaderSettings* get_Settings();
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x15EA3C0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNodeType XmlReader::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.String get_Name()
    // Offset: 0x15EA3DC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Name()
    ::StringW get_Name();
    // public override System.String get_LocalName()
    // Offset: 0x15EA400
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_LocalName()
    ::StringW get_LocalName();
    // public override System.String get_NamespaceURI()
    // Offset: 0x15EA41C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_NamespaceURI()
    ::StringW get_NamespaceURI();
    // public override System.String get_Prefix()
    // Offset: 0x15EA438
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Prefix()
    ::StringW get_Prefix();
    // public override System.String get_Value()
    // Offset: 0x15EA454
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_Value()
    ::StringW get_Value();
    // public override System.String get_BaseURI()
    // Offset: 0x15EA688
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::get_BaseURI()
    ::StringW get_BaseURI();
    // public override System.Boolean get_IsEmptyElement()
    // Offset: 0x15EA690
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsEmptyElement()
    bool get_IsEmptyElement();
    // public override System.Boolean get_IsDefault()
    // Offset: 0x15EA6AC
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_IsDefault()
    bool get_IsDefault();
    // public override System.Xml.ReadState get_ReadState()
    // Offset: 0x15EA6C8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.ReadState XmlReader::get_ReadState()
    ::System::Xml::ReadState get_ReadState();
    // public override System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x15EA6D0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.XmlNameTable XmlReader::get_NameTable()
    ::System::Xml::XmlNameTable* get_NameTable();
    // public override System.Boolean get_CanResolveEntity()
    // Offset: 0x15EA6D8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::get_CanResolveEntity()
    bool get_CanResolveEntity();
    // override System.Xml.IDtdInfo get_DtdInfo()
    // Offset: 0x15F9A94
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Xml.IDtdInfo XmlReader::get_DtdInfo()
    ::System::Xml::IDtdInfo* get_DtdInfo();
    // public override System.Boolean MoveToAttribute(System.String name)
    // Offset: 0x15EA6E0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToAttribute(System.String name)
    bool MoveToAttribute(::StringW name);
    // public override System.Boolean MoveToFirstAttribute()
    // Offset: 0x15EAA3C
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToFirstAttribute()
    bool MoveToFirstAttribute();
    // public override System.Boolean MoveToNextAttribute()
    // Offset: 0x15EAAC4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToNextAttribute()
    bool MoveToNextAttribute();
    // public override System.Boolean MoveToElement()
    // Offset: 0x15EAB60
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::MoveToElement()
    bool MoveToElement();
    // public override System.Boolean Read()
    // Offset: 0x15EAC38
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::Read()
    bool Read();
    // public override System.Void Close()
    // Offset: 0x15ECCA4
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::Close()
    void Close();
    // public override System.String LookupNamespace(System.String prefix)
    // Offset: 0x15ECD74
    // Implemented from: System.Xml.XmlReader
    // Base method: System.String XmlReader::LookupNamespace(System.String prefix)
    ::StringW LookupNamespace(::StringW prefix);
    // public override System.Boolean ReadAttributeValue()
    // Offset: 0x15ECDA8
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Boolean XmlReader::ReadAttributeValue()
    bool ReadAttributeValue();
    // public override System.Void ResolveEntity()
    // Offset: 0x15ED4A0
    // Implemented from: System.Xml.XmlReader
    // Base method: System.Void XmlReader::ResolveEntity()
    void ResolveEntity();
  }; // System.Xml.XmlTextReaderImpl
  #pragma pack(pop)
  static check_size<sizeof(XmlTextReaderImpl), 568 + sizeof(::System::Threading::Tasks::Task_1<::System::Tuple_4<int, int, int, bool>*>*)> __System_Xml_XmlTextReaderImplSizeCheck;
  static_assert(sizeof(XmlTextReaderImpl) == 0x240);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReaderImpl::ParsingState, "System.Xml", "XmlTextReaderImpl/ParsingState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReaderImpl::IncrementalReadState, "System.Xml", "XmlTextReaderImpl/IncrementalReadState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReaderImpl::ParsingMode, "System.Xml", "XmlTextReaderImpl/ParsingMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlTextReaderImpl::ParsingFunction, "System.Xml", "XmlTextReaderImpl/ParsingFunction");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_OuterReader
// Il2CppName: set_OuterReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlReader*)>(&System::Xml::XmlTextReaderImpl::set_OuterReader)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_OuterReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_Namespaces
// Il2CppName: set_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::set_Namespaces)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_EntityHandling
// Il2CppName: set_EntityHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::EntityHandling)>(&System::Xml::XmlTextReaderImpl::set_EntityHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "EntityHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_EntityHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_XmlResolver
// Il2CppName: set_XmlResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlResolver*)>(&System::Xml::XmlTextReaderImpl::set_XmlResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_XmlResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_NameTable
// Il2CppName: get_DtdParserProxy_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_NamespaceResolver
// Il2CppName: get_DtdParserProxy_NamespaceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IXmlNamespaceResolver* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_NamespaceResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_NamespaceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_DtdValidation
// Il2CppName: get_DtdParserProxy_DtdValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_DtdValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_DtdValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_Normalization
// Il2CppName: get_DtdParserProxy_Normalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_Normalization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_Normalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_Namespaces
// Il2CppName: get_DtdParserProxy_Namespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_Namespaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_Namespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_V1CompatibilityMode
// Il2CppName: get_DtdParserProxy_V1CompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_V1CompatibilityMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_V1CompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_BaseUri
// Il2CppName: get_DtdParserProxy_BaseUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_BaseUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_BaseUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_IsEof
// Il2CppName: get_DtdParserProxy_IsEof
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_IsEof)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_IsEof", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ParsingBuffer
// Il2CppName: get_DtdParserProxy_ParsingBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ParsingBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_ParsingBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ParsingBufferLength
// Il2CppName: get_DtdParserProxy_ParsingBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ParsingBufferLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_ParsingBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_CurrentPosition
// Il2CppName: get_DtdParserProxy_CurrentPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_CurrentPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_CurrentPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_DtdParserProxy_CurrentPosition
// Il2CppName: set_DtdParserProxy_CurrentPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::set_DtdParserProxy_CurrentPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_DtdParserProxy_CurrentPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_EntityStackLength
// Il2CppName: get_DtdParserProxy_EntityStackLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_EntityStackLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_EntityStackLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_IsEntityEolNormalized
// Il2CppName: get_DtdParserProxy_IsEntityEolNormalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_IsEntityEolNormalized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_IsEntityEolNormalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ValidationEventHandling
// Il2CppName: get_DtdParserProxy_ValidationEventHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IValidationEventHandling* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_ValidationEventHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_ValidationEventHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_LineNo
// Il2CppName: get_DtdParserProxy_LineNo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_LineNo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_LineNo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdParserProxy_LineStartPosition
// Il2CppName: get_DtdParserProxy_LineStartPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdParserProxy_LineStartPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdParserProxy_LineStartPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_IsResolverNull
// Il2CppName: get_IsResolverNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_IsResolverNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_IsResolverNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_InAttributeValueIterator
// Il2CppName: get_InAttributeValueIterator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_InAttributeValueIterator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_InAttributeValueIterator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdValidation
// Il2CppName: get_DtdValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_InEntity
// Il2CppName: get_InEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_InEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_InEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_XmlValidatingReaderCompatibilityMode
// Il2CppName: set_XmlValidatingReaderCompatibilityMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::set_XmlValidatingReaderCompatibilityMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_XmlValidatingReaderCompatibilityMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::set_DisableUndeclaredEntityCheck
// Il2CppName: set_DisableUndeclaredEntityCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::set_DisableUndeclaredEntityCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "set_DisableUndeclaredEntityCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishInitUriString
// Il2CppName: FinishInitUriString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishInitUriString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishInitUriString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishInitStream
// Il2CppName: FinishInitStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishInitStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishInitStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishInitTextReader
// Il2CppName: FinishInitTextReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishInitTextReader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishInitTextReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishInit
// Il2CppName: FinishInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::System_Xml_IXmlNamespaceResolver_LookupNamespace
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::System_Xml_IXmlNamespaceResolver_LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "System.Xml.IXmlNamespaceResolver.LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::System_Xml_IXmlNamespaceResolver_LookupPrefix
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::System_Xml_IXmlNamespaceResolver_LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "System.Xml.IXmlNamespaceResolver.LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_OnNewLine
// Il2CppName: DtdParserProxy_OnNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_OnNewLine)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_OnNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_ReadData
// Il2CppName: DtdParserProxy_ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_ReadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseNumericCharRef
// Il2CppName: DtdParserProxy_ParseNumericCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseNumericCharRef)> {
  static const MethodInfo* get() {
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_ParseNumericCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseNamedCharRef
// Il2CppName: DtdParserProxy_ParseNamedCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(bool, ::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseNamedCharRef)> {
  static const MethodInfo* get() {
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_ParseNamedCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expand, internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_ParsePI
// Il2CppName: DtdParserProxy_ParsePI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_ParsePI)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_ParsePI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseComment
// Il2CppName: DtdParserProxy_ParseComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_ParseComment)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_ParseComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetTempResolver
// Il2CppName: GetTempResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlResolver* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::GetTempResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetTempResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_PushEntity
// Il2CppName: DtdParserProxy_PushEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdEntityInfo*, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_PushEntity)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->byval_arg;
    static auto* entityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_PushEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity, entityId});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_PopEntity
// Il2CppName: DtdParserProxy_PopEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(ByRef<::System::Xml::IDtdEntityInfo*>, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_PopEntity)> {
  static const MethodInfo* get() {
    static auto* oldEntity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->this_arg;
    static auto* newEntityId = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_PopEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldEntity, newEntityId});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_PushExternalSubset
// Il2CppName: DtdParserProxy_PushExternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_PushExternalSubset)> {
  static const MethodInfo* get() {
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_PushExternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemId, publicId});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_PushInternalDtd
// Il2CppName: DtdParserProxy_PushInternalDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_PushInternalDtd)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalDtd = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_PushInternalDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, internalDtd});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_Throw
// Il2CppName: DtdParserProxy_Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Exception*)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_Throw)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_OnSystemId
// Il2CppName: DtdParserProxy_OnSystemId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::System::Xml::LineInfo, ::System::Xml::LineInfo)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_OnSystemId)> {
  static const MethodInfo* get() {
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keywordLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    static auto* systemLiteralLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_OnSystemId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemId, keywordLineInfo, systemLiteralLineInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DtdParserProxy_OnPublicId
// Il2CppName: DtdParserProxy_OnPublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::System::Xml::LineInfo, ::System::Xml::LineInfo)>(&System::Xml::XmlTextReaderImpl::DtdParserProxy_OnPublicId)> {
  static const MethodInfo* get() {
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keywordLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    static auto* publicLiteralLineInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "LineInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DtdParserProxy_OnPublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicId, keywordLineInfo, publicLiteralLineInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, res, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::StringW, ::ArrayW<::StringW>)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, res, args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::StringW)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, res});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, int, int)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, int, int)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::ArrayW<::StringW>)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, args});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, ::System::Exception*)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg, innerException});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::ArrayW<::StringW>, ::System::Exception*)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, args, innerException});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Throw
// Il2CppName: Throw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Exception*)>(&System::Xml::XmlTextReaderImpl::Throw)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Throw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ReThrow
// Il2CppName: ReThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Exception*, int, int)>(&System::Xml::XmlTextReaderImpl::ReThrow)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ReThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo
// Il2CppName: ThrowWithoutLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowWithoutLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo
// Il2CppName: ThrowWithoutLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowWithoutLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, arg});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo
// Il2CppName: ThrowWithoutLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::ArrayW<::StringW>, ::System::Exception*)>(&System::Xml::XmlTextReaderImpl::ThrowWithoutLineInfo)> {
  static const MethodInfo* get() {
    static auto* res = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowWithoutLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{res, args, innerException});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowInvalidChar
// Il2CppName: ThrowInvalidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlTextReaderImpl::ThrowInvalidChar)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* invCharPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowInvalidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length, invCharPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SetErrorState
// Il2CppName: SetErrorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SetErrorState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SetErrorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::Schema::XmlSeverityType, ::StringW, ::StringW, int, int)>(&System::Xml::XmlTextReaderImpl::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{severity, code, arg, lineNo, linePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SendValidationEvent
// Il2CppName: SendValidationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::Schema::XmlSeverityType, ::System::Xml::Schema::XmlSchemaException*)>(&System::Xml::XmlTextReaderImpl::SendValidationEvent)> {
  static const MethodInfo* get() {
    static auto* severity = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSeverityType")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SendValidationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{severity, exception});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishAttributeValueIterator
// Il2CppName: FinishAttributeValueIterator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishAttributeValueIterator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishAttributeValueIterator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitStreamInput
// Il2CppName: InitStreamInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Uri*, ::System::IO::Stream*, ::System::Text::Encoding*)>(&System::Xml::XmlTextReaderImpl::InitStreamInput)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitStreamInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, stream, encoding});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitStreamInput
// Il2CppName: InitStreamInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Uri*, ::StringW, ::System::IO::Stream*, ::System::Text::Encoding*)>(&System::Xml::XmlTextReaderImpl::InitStreamInput)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitStreamInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, baseUriStr, stream, encoding});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitStreamInput
// Il2CppName: InitStreamInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Uri*, ::StringW, ::System::IO::Stream*, ::ArrayW<uint8_t>, int, ::System::Text::Encoding*)>(&System::Xml::XmlTextReaderImpl::InitStreamInput)> {
  static const MethodInfo* get() {
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* byteCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitStreamInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUri, baseUriStr, stream, bytes, byteCount, encoding});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitTextReaderInput
// Il2CppName: InitTextReaderInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::System::IO::TextReader*)>(&System::Xml::XmlTextReaderImpl::InitTextReaderInput)> {
  static const MethodInfo* get() {
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "TextReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitTextReaderInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUriStr, input});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitTextReaderInput
// Il2CppName: InitTextReaderInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::System::Uri*, ::System::IO::TextReader*)>(&System::Xml::XmlTextReaderImpl::InitTextReaderInput)> {
  static const MethodInfo* get() {
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "TextReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitTextReaderInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUriStr, baseUri, input});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitStringInput
// Il2CppName: InitStringInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::System::Text::Encoding*, ::StringW)>(&System::Xml::XmlTextReaderImpl::InitStringInput)> {
  static const MethodInfo* get() {
    static auto* baseUriStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* originalEncoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitStringInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseUriStr, originalEncoding, str});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InitFragmentReader
// Il2CppName: InitFragmentReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlNodeType, ::System::Xml::XmlParserContext*, bool)>(&System::Xml::XmlTextReaderImpl::InitFragmentReader)> {
  static const MethodInfo* get() {
    static auto* fragmentType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    static auto* parserContext = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlParserContext")->byval_arg;
    static auto* allowXmlDeclFragment = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InitFragmentReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fragmentType, parserContext, allowXmlDeclFragment});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ProcessDtdFromParserContext
// Il2CppName: ProcessDtdFromParserContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlParserContext*)>(&System::Xml::XmlTextReaderImpl::ProcessDtdFromParserContext)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlParserContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ProcessDtdFromParserContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OpenUrl
// Il2CppName: OpenUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::OpenUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OpenUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OpenUrlDelegate
// Il2CppName: OpenUrlDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::Il2CppObject*)>(&System::Xml::XmlTextReaderImpl::OpenUrlDelegate)> {
  static const MethodInfo* get() {
    static auto* xmlResolver = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OpenUrlDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmlResolver});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::DetectEncoding
// Il2CppName: DetectEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::DetectEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "DetectEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SetupEncoding
// Il2CppName: SetupEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Text::Encoding*)>(&System::Xml::XmlTextReaderImpl::SetupEncoding)> {
  static const MethodInfo* get() {
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SetupEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encoding});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SwitchEncoding
// Il2CppName: SwitchEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Text::Encoding*)>(&System::Xml::XmlTextReaderImpl::SwitchEncoding)> {
  static const MethodInfo* get() {
    static auto* newEncoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SwitchEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEncoding});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::CheckEncoding
// Il2CppName: CheckEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::CheckEncoding)> {
  static const MethodInfo* get() {
    static auto* newEncodingName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "CheckEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newEncodingName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::UnDecodeChars
// Il2CppName: UnDecodeChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::UnDecodeChars)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "UnDecodeChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SwitchEncodingToUTF8
// Il2CppName: SwitchEncodingToUTF8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SwitchEncodingToUTF8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SwitchEncodingToUTF8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ReadData
// Il2CppName: ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ReadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetChars
// Il2CppName: GetChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::GetChars)> {
  static const MethodInfo* get() {
    static auto* maxCharsCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxCharsCount});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::InvalidCharRecovery
// Il2CppName: InvalidCharRecovery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(ByRef<int>, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::InvalidCharRecovery)> {
  static const MethodInfo* get() {
    static auto* bytesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* charsCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "InvalidCharRecovery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesCount, charsCount});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::Close)> {
  static const MethodInfo* get() {
    static auto* closeInput = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeInput});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ShiftBuffer
// Il2CppName: ShiftBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, int, int)>(&System::Xml::XmlTextReaderImpl::ShiftBuffer)> {
  static const MethodInfo* get() {
    static auto* sourcePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ShiftBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourcePos, destPos, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseXmlDeclaration
// Il2CppName: ParseXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::ParseXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* isTextDecl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isTextDecl});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseDocumentContent
// Il2CppName: ParseDocumentContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseDocumentContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseDocumentContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseElementContent
// Il2CppName: ParseElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseElementContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowUnclosedElements
// Il2CppName: ThrowUnclosedElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ThrowUnclosedElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowUnclosedElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseElement
// Il2CppName: ParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddDefaultAttributesAndNormalize
// Il2CppName: AddDefaultAttributesAndNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::AddDefaultAttributesAndNormalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddDefaultAttributesAndNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseEndElement
// Il2CppName: ParseEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowTagMismatch
// Il2CppName: ThrowTagMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::ThrowTagMismatch)> {
  static const MethodInfo* get() {
    static auto* startTag = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowTagMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTag});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseAttributes
// Il2CppName: ParseAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ElementNamespaceLookup
// Il2CppName: ElementNamespaceLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ElementNamespaceLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ElementNamespaceLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AttributeNamespaceLookup
// Il2CppName: AttributeNamespaceLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::AttributeNamespaceLookup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AttributeNamespaceLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AttributeDuplCheck
// Il2CppName: AttributeDuplCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::AttributeDuplCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AttributeDuplCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OnDefaultNamespaceDecl
// Il2CppName: OnDefaultNamespaceDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::OnDefaultNamespaceDecl)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OnDefaultNamespaceDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OnNamespaceDecl
// Il2CppName: OnNamespaceDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::OnNamespaceDecl)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OnNamespaceDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OnXmlReservedAttribute
// Il2CppName: OnXmlReservedAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::OnXmlReservedAttribute)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OnXmlReservedAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseAttributeValueSlow
// Il2CppName: ParseAttributeValueSlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::Il2CppChar, ::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::ParseAttributeValueSlow)> {
  static const MethodInfo* get() {
    static auto* curPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* quoteChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseAttributeValueSlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curPos, quoteChar, attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddAttributeChunkToList
// Il2CppName: AddAttributeChunkToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*, ::System::Xml::XmlTextReaderImpl::NodeData*, ByRef<::System::Xml::XmlTextReaderImpl::NodeData*>)>(&System::Xml::XmlTextReaderImpl::AddAttributeChunkToList)> {
  static const MethodInfo* get() {
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    static auto* chunk = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    static auto* lastChunk = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddAttributeChunkToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attr, chunk, lastChunk});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseText
// Il2CppName: ParseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseText
// Il2CppName: ParseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ParseText)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* endPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outOrChars = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, endPos, outOrChars});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishPartialValue
// Il2CppName: FinishPartialValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishPartialValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishPartialValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishOtherValueIterator
// Il2CppName: FinishOtherValueIterator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishOtherValueIterator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishOtherValueIterator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SkipPartialTextValue
// Il2CppName: SkipPartialTextValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SkipPartialTextValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SkipPartialTextValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishReadValueChunk
// Il2CppName: FinishReadValueChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishReadValueChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishReadValueChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishReadContentAsBinary
// Il2CppName: FinishReadContentAsBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishReadContentAsBinary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishReadContentAsBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishReadElementContentAsBinary
// Il2CppName: FinishReadElementContentAsBinary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishReadElementContentAsBinary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishReadElementContentAsBinary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseRootLevelWhitespace
// Il2CppName: ParseRootLevelWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseRootLevelWhitespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseRootLevelWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseEntityReference
// Il2CppName: ParseEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseEntityReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::HandleEntityReference
// Il2CppName: HandleEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::EntityType (System::Xml::XmlTextReaderImpl::*)(bool, ::System::Xml::XmlTextReaderImpl::EntityExpandType, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::HandleEntityReference)> {
  static const MethodInfo* get() {
    static auto* isInAttributeValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* expandType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/EntityExpandType")->byval_arg;
    static auto* charRefEndPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "HandleEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isInAttributeValue, expandType, charRefEndPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::HandleGeneralEntityReference
// Il2CppName: HandleGeneralEntityReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::EntityType (System::Xml::XmlTextReaderImpl::*)(::StringW, bool, bool, int)>(&System::Xml::XmlTextReaderImpl::HandleGeneralEntityReference)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isInAttributeValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pushFakeEntityIfNullResolver = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* entityStartLinePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "HandleGeneralEntityReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, isInAttributeValue, pushFakeEntityIfNullResolver, entityStartLinePos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::HandleEntityEnd
// Il2CppName: HandleEntityEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::HandleEntityEnd)> {
  static const MethodInfo* get() {
    static auto* checkEntityNesting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "HandleEntityEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{checkEntityNesting});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SetupEndEntityNodeInContent
// Il2CppName: SetupEndEntityNodeInContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SetupEndEntityNodeInContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SetupEndEntityNodeInContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SetupEndEntityNodeInAttribute
// Il2CppName: SetupEndEntityNodeInAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SetupEndEntityNodeInAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SetupEndEntityNodeInAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParsePI
// Il2CppName: ParsePI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParsePI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParsePI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParsePI
// Il2CppName: ParsePI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::ParsePI)> {
  static const MethodInfo* get() {
    static auto* piInDtdStringBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParsePI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piInDtdStringBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParsePIValue
// Il2CppName: ParsePIValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(ByRef<int>, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ParsePIValue)> {
  static const MethodInfo* get() {
    static auto* outStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outEndPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParsePIValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outStartPos, outEndPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseComment
// Il2CppName: ParseComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseComment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseCData
// Il2CppName: ParseCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseCData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseCDataOrComment
// Il2CppName: ParseCDataOrComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlTextReaderImpl::ParseCDataOrComment)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseCDataOrComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseCDataOrComment
// Il2CppName: ParseCDataOrComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlNodeType, ByRef<int>, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ParseCDataOrComment)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    static auto* outStartPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outEndPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseCDataOrComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, outStartPos, outEndPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseDoctypeDecl
// Il2CppName: ParseDoctypeDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseDoctypeDecl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseDoctypeDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseDtd
// Il2CppName: ParseDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseDtd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SkipDtd
// Il2CppName: SkipDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SkipDtd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SkipDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SkipPublicOrSystemIdLiteral
// Il2CppName: SkipPublicOrSystemIdLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::SkipPublicOrSystemIdLiteral)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SkipPublicOrSystemIdLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SkipUntil
// Il2CppName: SkipUntil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::Il2CppChar, bool)>(&System::Xml::XmlTextReaderImpl::SkipUntil)> {
  static const MethodInfo* get() {
    static auto* stopChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* recognizeLiterals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SkipUntil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stopChar, recognizeLiterals});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::EatWhitespaces
// Il2CppName: EatWhitespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::EatWhitespaces)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "EatWhitespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseCharRefInline
// Il2CppName: ParseCharRefInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(int, ByRef<int>, ByRef<::System::Xml::XmlTextReaderImpl::EntityType>)>(&System::Xml::XmlTextReaderImpl::ParseCharRefInline)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/EntityType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseCharRefInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, charCount, entityType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseNumericCharRef
// Il2CppName: ParseNumericCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(bool, ::System::Text::StringBuilder*, ByRef<::System::Xml::XmlTextReaderImpl::EntityType>)>(&System::Xml::XmlTextReaderImpl::ParseNumericCharRef)> {
  static const MethodInfo* get() {
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/EntityType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseNumericCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expand, internalSubsetBuilder, entityType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseNumericCharRefInline
// Il2CppName: ParseNumericCharRefInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(int, bool, ::System::Text::StringBuilder*, ByRef<int>, ByRef<::System::Xml::XmlTextReaderImpl::EntityType>)>(&System::Xml::XmlTextReaderImpl::ParseNumericCharRefInline)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* charCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/EntityType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseNumericCharRefInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, expand, internalSubsetBuilder, charCount, entityType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseNamedCharRef
// Il2CppName: ParseNamedCharRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(bool, ::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::ParseNamedCharRef)> {
  static const MethodInfo* get() {
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseNamedCharRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expand, internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseNamedCharRefInline
// Il2CppName: ParseNamedCharRefInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(int, bool, ::System::Text::StringBuilder*)>(&System::Xml::XmlTextReaderImpl::ParseNamedCharRefInline)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalSubsetBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseNamedCharRefInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, expand, internalSubsetBuilder});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseName
// Il2CppName: ParseName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseQName
// Il2CppName: ParseQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ParseQName)> {
  static const MethodInfo* get() {
    static auto* colonPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colonPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseQName
// Il2CppName: ParseQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(bool, int, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ParseQName)> {
  static const MethodInfo* get() {
    static auto* isQName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* startOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colonPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isQName, startOffset, colonPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ReadDataInName
// Il2CppName: ReadDataInName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(ByRef<int>)>(&System::Xml::XmlTextReaderImpl::ReadDataInName)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ReadDataInName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseEntityName
// Il2CppName: ParseEntityName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseEntityName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseEntityName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddNode
// Il2CppName: AddNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(int, int)>(&System::Xml::XmlTextReaderImpl::AddNode)> {
  static const MethodInfo* get() {
    static auto* nodeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeIndex, nodeDepth});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AllocNode
// Il2CppName: AllocNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(int, int)>(&System::Xml::XmlTextReaderImpl::AllocNode)> {
  static const MethodInfo* get() {
    static auto* nodeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AllocNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeIndex, nodeDepth});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddAttributeNoChecks
// Il2CppName: AddAttributeNoChecks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(::StringW, int)>(&System::Xml::XmlTextReaderImpl::AddAttributeNoChecks)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddAttributeNoChecks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, attrDepth});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(int, int)>(&System::Xml::XmlTextReaderImpl::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* endNamePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colonPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endNamePos, colonPos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nameWPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, prefix, nameWPrefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PopElementContext
// Il2CppName: PopElementContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PopElementContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PopElementContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OnNewLine
// Il2CppName: OnNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::OnNewLine)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OnNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OnEof
// Il2CppName: OnEof
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::OnEof)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OnEof", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddNamespace
// Il2CppName: AddNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, ::System::Xml::XmlTextReaderImpl::NodeData*)>(&System::Xml::XmlTextReaderImpl::AddNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attr = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, uri, attr});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ResetAttributes
// Il2CppName: ResetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ResetAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ResetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FullAttributeCleanup
// Il2CppName: FullAttributeCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FullAttributeCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FullAttributeCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PushXmlContext
// Il2CppName: PushXmlContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PushXmlContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PushXmlContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PopXmlContext
// Il2CppName: PopXmlContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PopXmlContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PopXmlContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetWhitespaceType
// Il2CppName: GetWhitespaceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::GetWhitespaceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetWhitespaceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetTextNodeType
// Il2CppName: GetTextNodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::GetTextNodeType)> {
  static const MethodInfo* get() {
    static auto* orChars = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetTextNodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orChars});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PushExternalEntityOrSubset
// Il2CppName: PushExternalEntityOrSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, ::System::Uri*, ::StringW)>(&System::Xml::XmlTextReaderImpl::PushExternalEntityOrSubset)> {
  static const MethodInfo* get() {
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* entityName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PushExternalEntityOrSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicId, systemId, baseUri, entityName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::OpenAndPush
// Il2CppName: OpenAndPush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Uri*)>(&System::Xml::XmlTextReaderImpl::OpenAndPush)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "OpenAndPush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PushExternalEntity
// Il2CppName: PushExternalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdEntityInfo*)>(&System::Xml::XmlTextReaderImpl::PushExternalEntity)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PushExternalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PushInternalEntity
// Il2CppName: PushInternalEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdEntityInfo*)>(&System::Xml::XmlTextReaderImpl::PushInternalEntity)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PushInternalEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PopEntity
// Il2CppName: PopEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PopEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PopEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::RegisterEntity
// Il2CppName: RegisterEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdEntityInfo*)>(&System::Xml::XmlTextReaderImpl::RegisterEntity)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdEntityInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "RegisterEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::UnregisterEntity
// Il2CppName: UnregisterEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::UnregisterEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "UnregisterEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PushParsingState
// Il2CppName: PushParsingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PushParsingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PushParsingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::PopParsingState
// Il2CppName: PopParsingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::PopParsingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "PopParsingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::IncrementalRead
// Il2CppName: IncrementalRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::IncrementalRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "IncrementalRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::FinishIncrementalRead
// Il2CppName: FinishIncrementalRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::FinishIncrementalRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "FinishIncrementalRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseFragmentAttribute
// Il2CppName: ParseFragmentAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseFragmentAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseFragmentAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseAttributeValueChunk
// Il2CppName: ParseAttributeValueChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseAttributeValueChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseAttributeValueChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseXmlDeclarationFragment
// Il2CppName: ParseXmlDeclarationFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseXmlDeclarationFragment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseXmlDeclarationFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expectedToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, expectedToken});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* expectedToken1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expectedToken1});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int, ::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* expectedToken1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expectedToken2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, expectedToken1, expectedToken2});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken
// Il2CppName: ThrowUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW)>(&System::Xml::XmlTextReaderImpl::ThrowUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* expectedToken1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expectedToken2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expectedToken1, expectedToken2});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseUnexpectedToken
// Il2CppName: ParseUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::ParseUnexpectedToken)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseUnexpectedToken
// Il2CppName: ParseUnexpectedToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseUnexpectedToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseUnexpectedToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ThrowExpectingWhitespace
// Il2CppName: ThrowExpectingWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::ThrowExpectingWhitespace)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ThrowExpectingWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetIndexOfAttributeWithoutPrefix
// Il2CppName: GetIndexOfAttributeWithoutPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::GetIndexOfAttributeWithoutPrefix)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetIndexOfAttributeWithoutPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::GetIndexOfAttributeWithPrefix
// Il2CppName: GetIndexOfAttributeWithPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::GetIndexOfAttributeWithPrefix)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "GetIndexOfAttributeWithPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ZeroEndingStream
// Il2CppName: ZeroEndingStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(int)>(&System::Xml::XmlTextReaderImpl::ZeroEndingStream)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ZeroEndingStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ParseDtdFromParserContext
// Il2CppName: ParseDtdFromParserContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ParseDtdFromParserContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ParseDtdFromParserContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::MoveToNextContentNode
// Il2CppName: MoveToNextContentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(bool)>(&System::Xml::XmlTextReaderImpl::MoveToNextContentNode)> {
  static const MethodInfo* get() {
    static auto* moveIfOnContentNode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "MoveToNextContentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveIfOnContentNode});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::SetDtdInfo
// Il2CppName: SetDtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdInfo*)>(&System::Xml::XmlTextReaderImpl::SetDtdInfo)> {
  static const MethodInfo* get() {
    static auto* newDtdInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "SetDtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newDtdInfo});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddDefaultAttributeDtd
// Il2CppName: AddDefaultAttributeDtd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::System::Xml::IDtdDefaultAttributeInfo*, bool, ::ArrayW<::System::Xml::XmlTextReaderImpl::NodeData*>)>(&System::Xml::XmlTextReaderImpl::AddDefaultAttributeDtd)> {
  static const MethodInfo* get() {
    static auto* defAttrInfo = &::il2cpp_utils::GetClassFromName("System.Xml", "IDtdDefaultAttributeInfo")->byval_arg;
    static auto* definedInDtd = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* nameSortedNodeData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlTextReaderImpl/NodeData"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddDefaultAttributeDtd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defAttrInfo, definedInDtd, nameSortedNodeData});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::AddDefaultAttributeInternal
// Il2CppName: AddDefaultAttributeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlTextReaderImpl::NodeData* (System::Xml::XmlTextReaderImpl::*)(::StringW, ::StringW, ::StringW, ::StringW, int, int, int, int, bool)>(&System::Xml::XmlTextReaderImpl::AddDefaultAttributeInternal)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* linePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueLineNo = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valueLinePos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isXmlAttribute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "AddDefaultAttributeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, ns, prefix, value, lineNo, linePos, valueLineNo, valueLinePos, isXmlAttribute});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::RegisterConsumedCharacters
// Il2CppName: RegisterConsumedCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)(int64_t, bool)>(&System::Xml::XmlTextReaderImpl::RegisterConsumedCharacters)> {
  static const MethodInfo* get() {
    static auto* characters = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* inEntityReference = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "RegisterConsumedCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characters, inEntityReference});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::StripSpaces
// Il2CppName: StripSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Xml::XmlTextReaderImpl::StripSpaces)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "StripSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::StripSpaces
// Il2CppName: StripSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppChar>, int, ByRef<int>)>(&System::Xml::XmlTextReaderImpl::StripSpaces)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "StripSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index, len});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::BlockCopyChars
// Il2CppName: BlockCopyChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppChar>, int, ::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlTextReaderImpl::BlockCopyChars)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* dstOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "BlockCopyChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcOffset, dst, dstOffset, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::BlockCopy
// Il2CppName: BlockCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, ::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlTextReaderImpl::BlockCopy)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dstOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "BlockCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcOffset, dst, dstOffset, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_Settings
// Il2CppName: get_Settings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReaderSettings* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_Settings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_Settings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::ReadState (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_CanResolveEntity
// Il2CppName: get_CanResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_CanResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_CanResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::get_DtdInfo
// Il2CppName: get_DtdInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::IDtdInfo* (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::get_DtdInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "get_DtdInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::MoveToFirstAttribute
// Il2CppName: MoveToFirstAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::MoveToFirstAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "MoveToFirstAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlTextReaderImpl::*)(::StringW)>(&System::Xml::XmlTextReaderImpl::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ReadAttributeValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlTextReaderImpl::ResolveEntity
// Il2CppName: ResolveEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlTextReaderImpl::*)()>(&System::Xml::XmlTextReaderImpl::ResolveEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlTextReaderImpl*), "ResolveEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
