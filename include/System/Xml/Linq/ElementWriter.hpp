// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Xml.Linq.NamespaceResolver
#include "System/Xml/Linq/NamespaceResolver.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XElement
  class XElement;
  // Forward declaring type: XNamespace
  class XNamespace;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: ElementWriter
  struct ElementWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::ElementWriter, "System.Xml.Linq", "ElementWriter");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.Linq.ElementWriter
  // [TokenAttribute] Offset: FFFFFFFF
  struct ElementWriter/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Xml.XmlWriter writer
    // Size: 0x8
    // Offset: 0x0
    ::System::Xml::XmlWriter* writer;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlWriter*) == 0x8);
    // private System.Xml.Linq.NamespaceResolver resolver
    // Size: 0x18
    // Offset: 0x8
    ::System::Xml::Linq::NamespaceResolver resolver;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::NamespaceResolver) == 0x18);
    public:
    // Creating value type constructor for type: ElementWriter
    constexpr ElementWriter(::System::Xml::XmlWriter* writer_ = {}, ::System::Xml::Linq::NamespaceResolver resolver_ = {}) noexcept : writer{writer_}, resolver{resolver_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Xml.XmlWriter writer
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlWriter*& dyn_writer();
    // Get instance field reference: private System.Xml.Linq.NamespaceResolver resolver
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::NamespaceResolver& dyn_resolver();
    // public System.Void .ctor(System.Xml.XmlWriter writer)
    // Offset: 0x2B5D620
    ElementWriter(::System::Xml::XmlWriter* writer);
    // public System.Void WriteElement(System.Xml.Linq.XElement e)
    // Offset: 0x2B5D62C
    void WriteElement(::System::Xml::Linq::XElement* e);
    // private System.String GetPrefixOfNamespace(System.Xml.Linq.XNamespace ns, System.Boolean allowDefaultNamespace)
    // Offset: 0x2B5DAC4
    ::StringW GetPrefixOfNamespace(::System::Xml::Linq::XNamespace* ns, bool allowDefaultNamespace);
    // private System.Void PushAncestors(System.Xml.Linq.XElement e)
    // Offset: 0x2B5D7CC
    void PushAncestors(::System::Xml::Linq::XElement* e);
    // private System.Void PushElement(System.Xml.Linq.XElement e)
    // Offset: 0x2B5DE6C
    void PushElement(::System::Xml::Linq::XElement* e);
    // private System.Void WriteEndElement()
    // Offset: 0x2B5DA54
    void WriteEndElement();
    // private System.Void WriteFullEndElement()
    // Offset: 0x2B5DA8C
    void WriteFullEndElement();
    // private System.Void WriteStartElement(System.Xml.Linq.XElement e)
    // Offset: 0x2B5D8F0
    void WriteStartElement(::System::Xml::Linq::XElement* e);
  }; // System.Xml.Linq.ElementWriter
  #pragma pack(pop)
  static check_size<sizeof(ElementWriter), 8 + sizeof(::System::Xml::Linq::NamespaceResolver)> __System_Xml_Linq_ElementWriterSizeCheck;
  static_assert(sizeof(ElementWriter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::ElementWriter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::WriteElement
// Il2CppName: WriteElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)(::System::Xml::Linq::XElement*)>(&System::Xml::Linq::ElementWriter::WriteElement)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "WriteElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::GetPrefixOfNamespace
// Il2CppName: GetPrefixOfNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::ElementWriter::*)(::System::Xml::Linq::XNamespace*, bool)>(&System::Xml::Linq::ElementWriter::GetPrefixOfNamespace)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNamespace")->byval_arg;
    static auto* allowDefaultNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "GetPrefixOfNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, allowDefaultNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::PushAncestors
// Il2CppName: PushAncestors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)(::System::Xml::Linq::XElement*)>(&System::Xml::Linq::ElementWriter::PushAncestors)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "PushAncestors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::PushElement
// Il2CppName: PushElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)(::System::Xml::Linq::XElement*)>(&System::Xml::Linq::ElementWriter::PushElement)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "PushElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)()>(&System::Xml::Linq::ElementWriter::WriteEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)()>(&System::Xml::Linq::ElementWriter::WriteFullEndElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::ElementWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::ElementWriter::*)(::System::Xml::Linq::XElement*)>(&System::Xml::Linq::ElementWriter::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::ElementWriter), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
