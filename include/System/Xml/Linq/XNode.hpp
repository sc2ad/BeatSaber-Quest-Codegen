// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Linq.XObject
#include "System/Xml/Linq/XObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: SaveOptions
  struct SaveOptions;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: XNode
  class XNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Linq::XNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::XNode*, "System.Xml.Linq", "XNode");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Linq.XNode
  // [TokenAttribute] Offset: FFFFFFFF
  class XNode : public ::System::Xml::Linq::XObject {
    public:
    public:
    // System.Xml.Linq.XNode next
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::Linq::XNode* next;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XNode*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Xml::Linq::XNode*
    constexpr operator ::System::Xml::Linq::XNode*() const noexcept {
      return next;
    }
    // Get instance field reference: System.Xml.Linq.XNode next
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XNode*& dyn_next();
    // public System.Void Remove()
    // Offset: 0x2B63E24
    void Remove();
    // public System.Void WriteTo(System.Xml.XmlWriter writer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void WriteTo(::System::Xml::XmlWriter* writer);
    // System.Void AppendText(System.Text.StringBuilder sb)
    // Offset: 0x2B64350
    void AppendText(::System::Text::StringBuilder* sb);
    // System.Xml.Linq.XNode CloneNode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Xml::Linq::XNode* CloneNode();
    // private System.String GetXmlString(System.Xml.Linq.SaveOptions o)
    // Offset: 0x2B63FBC
    ::StringW GetXmlString(::System::Xml::Linq::SaveOptions o);
    // System.Void .ctor()
    // Offset: 0x2B5FC5C
    // Implemented from: System.Xml.Linq.XObject
    // Base method: System.Void XObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XNode*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x2B63EBC
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Xml.Linq.XNode
  #pragma pack(pop)
  static check_size<sizeof(XNode), 32 + sizeof(::System::Xml::Linq::XNode*)> __System_Xml_Linq_XNodeSizeCheck;
  static_assert(sizeof(XNode) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::XNode::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XNode::*)()>(&System::Xml::Linq::XNode::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XNode::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XNode::*)(::System::Xml::XmlWriter*)>(&System::Xml::Linq::XNode::WriteTo)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XNode::AppendText
// Il2CppName: AppendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XNode::*)(::System::Text::StringBuilder*)>(&System::Xml::Linq::XNode::AppendText)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "AppendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XNode::CloneNode
// Il2CppName: CloneNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XNode* (System::Xml::Linq::XNode::*)()>(&System::Xml::Linq::XNode::CloneNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "CloneNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XNode::GetXmlString
// Il2CppName: GetXmlString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XNode::*)(::System::Xml::Linq::SaveOptions)>(&System::Xml::Linq::XNode::GetXmlString)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "SaveOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "GetXmlString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XNode::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XNode::*)()>(&System::Xml::Linq::XNode::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XNode*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
