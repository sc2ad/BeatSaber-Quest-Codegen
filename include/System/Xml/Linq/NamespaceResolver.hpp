// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XNamespace
  class XNamespace;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: NamespaceResolver
  struct NamespaceResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::NamespaceResolver, "System.Xml.Linq", "NamespaceResolver");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.Linq.NamespaceResolver
  // [TokenAttribute] Offset: FFFFFFFF
  struct NamespaceResolver/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration
    class NamespaceDeclaration;
    public:
    // private System.Int32 scope
    // Size: 0x4
    // Offset: 0x0
    int scope;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: scope and: declaration
    char __padding0[0x4] = {};
    // private System.Xml.Linq.NamespaceResolver/System.Xml.Linq.NamespaceDeclaration declaration
    // Size: 0x8
    // Offset: 0x8
    ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration* declaration;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration*) == 0x8);
    // private System.Xml.Linq.NamespaceResolver/System.Xml.Linq.NamespaceDeclaration rover
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration* rover;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration*) == 0x8);
    public:
    // Creating value type constructor for type: NamespaceResolver
    constexpr NamespaceResolver(int scope_ = {}, ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration* declaration_ = {}, ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration* rover_ = {}) noexcept : scope{scope_}, declaration{declaration_}, rover{rover_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 scope
    [[deprecated("Use field access instead!")]] int& dyn_scope();
    // Get instance field reference: private System.Xml.Linq.NamespaceResolver/System.Xml.Linq.NamespaceDeclaration declaration
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration*& dyn_declaration();
    // Get instance field reference: private System.Xml.Linq.NamespaceResolver/System.Xml.Linq.NamespaceDeclaration rover
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration*& dyn_rover();
    // public System.Void PushScope()
    // Offset: 0x2B5DF50
    void PushScope();
    // public System.Void PopScope()
    // Offset: 0x2B5E00C
    void PopScope();
    // public System.Void Add(System.String prefix, System.Xml.Linq.XNamespace ns)
    // Offset: 0x2B5DF60
    void Add(::StringW prefix, ::System::Xml::Linq::XNamespace* ns);
    // public System.Void AddFirst(System.String prefix, System.Xml.Linq.XNamespace ns)
    // Offset: 0x2B5DDC0
    void AddFirst(::StringW prefix, ::System::Xml::Linq::XNamespace* ns);
    // public System.String GetPrefixOfNamespace(System.Xml.Linq.XNamespace ns, System.Boolean allowDefaultNamespace)
    // Offset: 0x2B5DB98
    ::StringW GetPrefixOfNamespace(::System::Xml::Linq::XNamespace* ns, bool allowDefaultNamespace);
  }; // System.Xml.Linq.NamespaceResolver
  #pragma pack(pop)
  static check_size<sizeof(NamespaceResolver), 16 + sizeof(::System::Xml::Linq::NamespaceResolver::NamespaceDeclaration*)> __System_Xml_Linq_NamespaceResolverSizeCheck;
  static_assert(sizeof(NamespaceResolver) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceResolver::PushScope
// Il2CppName: PushScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::NamespaceResolver::*)()>(&System::Xml::Linq::NamespaceResolver::PushScope)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceResolver), "PushScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceResolver::PopScope
// Il2CppName: PopScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::NamespaceResolver::*)()>(&System::Xml::Linq::NamespaceResolver::PopScope)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceResolver), "PopScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceResolver::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::NamespaceResolver::*)(::StringW, ::System::Xml::Linq::XNamespace*)>(&System::Xml::Linq::NamespaceResolver::Add)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNamespace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceResolver), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceResolver::AddFirst
// Il2CppName: AddFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::NamespaceResolver::*)(::StringW, ::System::Xml::Linq::XNamespace*)>(&System::Xml::Linq::NamespaceResolver::AddFirst)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNamespace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceResolver), "AddFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::NamespaceResolver::GetPrefixOfNamespace
// Il2CppName: GetPrefixOfNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::NamespaceResolver::*)(::System::Xml::Linq::XNamespace*, bool)>(&System::Xml::Linq::NamespaceResolver::GetPrefixOfNamespace)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System.Xml.Linq", "XNamespace")->byval_arg;
    static auto* allowDefaultNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::NamespaceResolver), "GetPrefixOfNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, allowDefaultNamespace});
  }
};
