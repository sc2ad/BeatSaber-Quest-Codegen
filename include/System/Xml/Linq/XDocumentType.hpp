// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Linq.XNode
#include "System/Xml/Linq/XNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: IDtdInfo
  class IDtdInfo;
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Completed forward declares
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Forward declaring type: XDocumentType
  class XDocumentType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Linq::XDocumentType);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Linq::XDocumentType*, "System.Xml.Linq", "XDocumentType");
// Type namespace: System.Xml.Linq
namespace System::Xml::Linq {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Linq.XDocumentType
  // [TokenAttribute] Offset: FFFFFFFF
  class XDocumentType : public ::System::Xml::Linq::XNode {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x28
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String publicId
    // Size: 0x8
    // Offset: 0x30
    ::StringW publicId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String systemId
    // Size: 0x8
    // Offset: 0x38
    ::StringW systemId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String internalSubset
    // Size: 0x8
    // Offset: 0x40
    ::StringW internalSubset;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.IDtdInfo dtdInfo
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::IDtdInfo* dtdInfo;
    // Field size check
    static_assert(sizeof(::System::Xml::IDtdInfo*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Xml::Linq::XNode*
    constexpr operator ::System::Xml::Linq::XNode*() const noexcept = delete;
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.String publicId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_publicId();
    // Get instance field reference: private System.String systemId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_systemId();
    // Get instance field reference: private System.String internalSubset
    [[deprecated("Use field access instead!")]] ::StringW& dyn_internalSubset();
    // Get instance field reference: private System.Xml.IDtdInfo dtdInfo
    [[deprecated("Use field access instead!")]] ::System::Xml::IDtdInfo*& dyn_dtdInfo();
    // public System.String get_InternalSubset()
    // Offset: 0x2B62624
    ::StringW get_InternalSubset();
    // public System.String get_Name()
    // Offset: 0x2B6262C
    ::StringW get_Name();
    // public System.String get_PublicId()
    // Offset: 0x2B6263C
    ::StringW get_PublicId();
    // public System.String get_SystemId()
    // Offset: 0x2B62644
    ::StringW get_SystemId();
    // public System.Void .ctor(System.String name, System.String publicId, System.String systemId, System.String internalSubset)
    // Offset: 0x2B624C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XDocumentType* New_ctor(::StringW name, ::StringW publicId, ::StringW systemId, ::StringW internalSubset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XDocumentType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XDocumentType*, creationType>(name, publicId, systemId, internalSubset)));
    }
    // public System.Void .ctor(System.Xml.Linq.XDocumentType other)
    // Offset: 0x2B62564
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XDocumentType* New_ctor(::System::Xml::Linq::XDocumentType* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Linq::XDocumentType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XDocumentType*, creationType>(other)));
    }
    // public override System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x2B62634
    // Implemented from: System.Xml.Linq.XObject
    // Base method: System.Xml.XmlNodeType XObject::get_NodeType()
    ::System::Xml::XmlNodeType get_NodeType();
    // public override System.Void WriteTo(System.Xml.XmlWriter writer)
    // Offset: 0x2B6264C
    // Implemented from: System.Xml.Linq.XNode
    // Base method: System.Void XNode::WriteTo(System.Xml.XmlWriter writer)
    void WriteTo(::System::Xml::XmlWriter* writer);
    // override System.Xml.Linq.XNode CloneNode()
    // Offset: 0x2B626EC
    // Implemented from: System.Xml.Linq.XNode
    // Base method: System.Xml.Linq.XNode XNode::CloneNode()
    ::System::Xml::Linq::XNode* CloneNode();
  }; // System.Xml.Linq.XDocumentType
  #pragma pack(pop)
  static check_size<sizeof(XDocumentType), 72 + sizeof(::System::Xml::IDtdInfo*)> __System_Xml_Linq_XDocumentTypeSizeCheck;
  static_assert(sizeof(XDocumentType) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::get_InternalSubset
// Il2CppName: get_InternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::get_InternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "get_InternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::get_PublicId
// Il2CppName: get_PublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::get_PublicId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "get_PublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::get_SystemId
// Il2CppName: get_SystemId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::get_SystemId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "get_SystemId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Linq::XDocumentType::*)(::System::Xml::XmlWriter*)>(&System::Xml::Linq::XDocumentType::WriteTo)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Xml::Linq::XDocumentType::CloneNode
// Il2CppName: CloneNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XNode* (System::Xml::Linq::XDocumentType::*)()>(&System::Xml::Linq::XDocumentType::CloneNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Linq::XDocumentType*), "CloneNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
