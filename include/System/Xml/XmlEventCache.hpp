// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
// Including type: System.Xml.Xsl.Runtime.StringConcat
#include "System/Xml/Xsl/Runtime/StringConcat.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Skipping declaration: XmlEventType because it is already included!
  // Skipping declaration: XmlWriter because it is already included!
  // Forward declaring type: XmlStandalone
  struct XmlStandalone;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlEventCache
  class XmlEventCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlEventCache);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlEventCache*, "System.Xml", "XmlEventCache");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlEventCache
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlEventCache : public ::System::Xml::XmlRawWriter {
    public:
    // Nested type: ::System::Xml::XmlEventCache::XmlEventType
    struct XmlEventType;
    // Nested type: ::System::Xml::XmlEventCache::XmlEvent
    struct XmlEvent;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlEventCache/System.Xml.XmlEventType
    // [TokenAttribute] Offset: FFFFFFFF
    struct XmlEventType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: XmlEventType
      constexpr XmlEventType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Unknown
      static ::System::Xml::XmlEventCache::XmlEventType _get_Unknown();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Unknown
      static void _set_Unknown(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType DocType
      static constexpr const int DocType = 1;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType DocType
      static ::System::Xml::XmlEventCache::XmlEventType _get_DocType();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType DocType
      static void _set_DocType(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartElem
      static constexpr const int StartElem = 2;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartElem
      static ::System::Xml::XmlEventCache::XmlEventType _get_StartElem();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartElem
      static void _set_StartElem(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartAttr
      static constexpr const int StartAttr = 3;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartAttr
      static ::System::Xml::XmlEventCache::XmlEventType _get_StartAttr();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartAttr
      static void _set_StartAttr(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndAttr
      static constexpr const int EndAttr = 4;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndAttr
      static ::System::Xml::XmlEventCache::XmlEventType _get_EndAttr();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndAttr
      static void _set_EndAttr(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CData
      static constexpr const int CData = 5;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CData
      static ::System::Xml::XmlEventCache::XmlEventType _get_CData();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CData
      static void _set_CData(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Comment
      static constexpr const int Comment = 6;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Comment
      static ::System::Xml::XmlEventCache::XmlEventType _get_Comment();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Comment
      static void _set_Comment(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType PI
      static constexpr const int PI = 7;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType PI
      static ::System::Xml::XmlEventCache::XmlEventType _get_PI();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType PI
      static void _set_PI(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Whitespace
      static constexpr const int Whitespace = 8;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Whitespace
      static ::System::Xml::XmlEventCache::XmlEventType _get_Whitespace();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Whitespace
      static void _set_Whitespace(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType String
      static constexpr const int String = 9;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType String
      static ::System::Xml::XmlEventCache::XmlEventType _get_String();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType String
      static void _set_String(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Raw
      static constexpr const int Raw = 10;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Raw
      static ::System::Xml::XmlEventCache::XmlEventType _get_Raw();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Raw
      static void _set_Raw(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EntRef
      static constexpr const int EntRef = 11;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EntRef
      static ::System::Xml::XmlEventCache::XmlEventType _get_EntRef();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EntRef
      static void _set_EntRef(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CharEnt
      static constexpr const int CharEnt = 12;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CharEnt
      static ::System::Xml::XmlEventCache::XmlEventType _get_CharEnt();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType CharEnt
      static void _set_CharEnt(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType SurrCharEnt
      static constexpr const int SurrCharEnt = 13;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType SurrCharEnt
      static ::System::Xml::XmlEventCache::XmlEventType _get_SurrCharEnt();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType SurrCharEnt
      static void _set_SurrCharEnt(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Base64
      static constexpr const int Base64 = 14;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Base64
      static ::System::Xml::XmlEventCache::XmlEventType _get_Base64();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Base64
      static void _set_Base64(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType BinHex
      static constexpr const int BinHex = 15;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType BinHex
      static ::System::Xml::XmlEventCache::XmlEventType _get_BinHex();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType BinHex
      static void _set_BinHex(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl1
      static constexpr const int XmlDecl1 = 16;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl1
      static ::System::Xml::XmlEventCache::XmlEventType _get_XmlDecl1();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl1
      static void _set_XmlDecl1(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl2
      static constexpr const int XmlDecl2 = 17;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl2
      static ::System::Xml::XmlEventCache::XmlEventType _get_XmlDecl2();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType XmlDecl2
      static void _set_XmlDecl2(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartContent
      static constexpr const int StartContent = 18;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartContent
      static ::System::Xml::XmlEventCache::XmlEventType _get_StartContent();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType StartContent
      static void _set_StartContent(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndElem
      static constexpr const int EndElem = 19;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndElem
      static ::System::Xml::XmlEventCache::XmlEventType _get_EndElem();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndElem
      static void _set_EndElem(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType FullEndElem
      static constexpr const int FullEndElem = 20;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType FullEndElem
      static ::System::Xml::XmlEventCache::XmlEventType _get_FullEndElem();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType FullEndElem
      static void _set_FullEndElem(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Nmsp
      static constexpr const int Nmsp = 21;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Nmsp
      static ::System::Xml::XmlEventCache::XmlEventType _get_Nmsp();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Nmsp
      static void _set_Nmsp(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndBase64
      static constexpr const int EndBase64 = 22;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndBase64
      static ::System::Xml::XmlEventCache::XmlEventType _get_EndBase64();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType EndBase64
      static void _set_EndBase64(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Close
      static constexpr const int Close = 23;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Close
      static ::System::Xml::XmlEventCache::XmlEventType _get_Close();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Close
      static void _set_Close(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Flush
      static constexpr const int Flush = 24;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Flush
      static ::System::Xml::XmlEventCache::XmlEventType _get_Flush();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Flush
      static void _set_Flush(::System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Dispose
      static constexpr const int Dispose = 25;
      // Get static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Dispose
      static ::System::Xml::XmlEventCache::XmlEventType _get_Dispose();
      // Set static field: static public System.Xml.XmlEventCache/System.Xml.XmlEventType Dispose
      static void _set_Dispose(::System::Xml::XmlEventCache::XmlEventType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Xml.XmlEventCache/System.Xml.XmlEventType
    #pragma pack(pop)
    static check_size<sizeof(XmlEventCache::XmlEventType), 0 + sizeof(int)> __System_Xml_XmlEventCache_XmlEventTypeSizeCheck;
    static_assert(sizeof(XmlEventCache::XmlEventType) == 0x4);
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlEventCache/System.Xml.XmlEvent
    // [TokenAttribute] Offset: FFFFFFFF
    struct XmlEvent/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Xml.XmlEventCache/System.Xml.XmlEventType eventType
      // Size: 0x4
      // Offset: 0x0
      ::System::Xml::XmlEventCache::XmlEventType eventType;
      // Field size check
      static_assert(sizeof(::System::Xml::XmlEventCache::XmlEventType) == 0x4);
      // Padding between fields: eventType and: s1
      char __padding0[0x4] = {};
      // private System.String s1
      // Size: 0x8
      // Offset: 0x8
      ::StringW s1;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // private System.String s2
      // Size: 0x8
      // Offset: 0x10
      ::StringW s2;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // private System.String s3
      // Size: 0x8
      // Offset: 0x18
      ::StringW s3;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // private System.Object o
      // Size: 0x8
      // Offset: 0x20
      ::Il2CppObject* o;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      public:
      // Creating value type constructor for type: XmlEvent
      constexpr XmlEvent(::System::Xml::XmlEventCache::XmlEventType eventType_ = {}, ::StringW s1_ = {}, ::StringW s2_ = {}, ::StringW s3_ = {}, ::Il2CppObject* o_ = {}) noexcept : eventType{eventType_}, s1{s1_}, s2{s2_}, s3{s3_}, o{o_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Xml.XmlEventCache/System.Xml.XmlEventType eventType
      [[deprecated("Use field access instead!")]] ::System::Xml::XmlEventCache::XmlEventType& dyn_eventType();
      // Get instance field reference: private System.String s1
      [[deprecated("Use field access instead!")]] ::StringW& dyn_s1();
      // Get instance field reference: private System.String s2
      [[deprecated("Use field access instead!")]] ::StringW& dyn_s2();
      // Get instance field reference: private System.String s3
      [[deprecated("Use field access instead!")]] ::StringW& dyn_s3();
      // Get instance field reference: private System.Object o
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_o();
      // public System.Xml.XmlEventCache/System.Xml.XmlEventType get_EventType()
      // Offset: 0x16661C8
      ::System::Xml::XmlEventCache::XmlEventType get_EventType();
      // public System.String get_String1()
      // Offset: 0x16661D0
      ::StringW get_String1();
      // public System.String get_String2()
      // Offset: 0x16661D8
      ::StringW get_String2();
      // public System.String get_String3()
      // Offset: 0x16661E0
      ::StringW get_String3();
      // public System.Object get_Object()
      // Offset: 0x16661E8
      ::Il2CppObject* get_Object();
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType)
      // Offset: 0x16661C0
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType);
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1)
      // Offset: 0x166617C
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1);
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2)
      // Offset: 0x1666188
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2);
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2, System.String s3)
      // Offset: 0x1666194
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2, ::StringW s3);
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2, System.String s3, System.Object o)
      // Offset: 0x16661A4
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2, ::StringW s3, ::Il2CppObject* o);
      // public System.Void InitEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.Object o)
      // Offset: 0x16661B4
      void InitEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o);
    }; // System.Xml.XmlEventCache/System.Xml.XmlEvent
    #pragma pack(pop)
    static check_size<sizeof(XmlEventCache::XmlEvent), 32 + sizeof(::Il2CppObject*)> __System_Xml_XmlEventCache_XmlEventSizeCheck;
    static_assert(sizeof(XmlEventCache::XmlEvent) == 0x28);
    public:
    // private System.Collections.Generic.List`1<System.Xml.XmlEventCache/System.Xml.XmlEvent[]> pages
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::ArrayW<::System::Xml::XmlEventCache::XmlEvent>>* pages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ArrayW<::System::Xml::XmlEventCache::XmlEvent>>*) == 0x8);
    // private System.Xml.XmlEventCache/System.Xml.XmlEvent[] pageCurr
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Xml::XmlEventCache::XmlEvent> pageCurr;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlEventCache::XmlEvent>) == 0x8);
    // private System.Int32 pageSize
    // Size: 0x4
    // Offset: 0x30
    int pageSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasRootNode
    // Size: 0x1
    // Offset: 0x34
    bool hasRootNode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasRootNode and: singleText
    char __padding3[0x3] = {};
    // private System.Xml.Xsl.Runtime.StringConcat singleText
    // Size: 0x34
    // Offset: 0x38
    ::System::Xml::Xsl::Runtime::StringConcat singleText;
    // Field size check
    static_assert(sizeof(::System::Xml::Xsl::Runtime::StringConcat) == 0x34);
    // Padding between fields: singleText and: baseUri
    char __padding4[0x4] = {};
    // private System.String baseUri
    // Size: 0x8
    // Offset: 0x70
    ::StringW baseUri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.Xml.XmlEventCache/System.Xml.XmlEvent[]> pages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ArrayW<::System::Xml::XmlEventCache::XmlEvent>>*& dyn_pages();
    // Get instance field reference: private System.Xml.XmlEventCache/System.Xml.XmlEvent[] pageCurr
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Xml::XmlEventCache::XmlEvent>& dyn_pageCurr();
    // Get instance field reference: private System.Int32 pageSize
    [[deprecated("Use field access instead!")]] int& dyn_pageSize();
    // Get instance field reference: private System.Boolean hasRootNode
    [[deprecated("Use field access instead!")]] bool& dyn_hasRootNode();
    // Get instance field reference: private System.Xml.Xsl.Runtime.StringConcat singleText
    [[deprecated("Use field access instead!")]] ::System::Xml::Xsl::Runtime::StringConcat& dyn_singleText();
    // Get instance field reference: private System.String baseUri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_baseUri();
    // public System.Void .ctor(System.String baseUri, System.Boolean hasRootNode)
    // Offset: 0x16651C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlEventCache* New_ctor(::StringW baseUri, bool hasRootNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlEventCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlEventCache*, creationType>(baseUri, hasRootNode)));
    }
    // public System.Void EndEvents()
    // Offset: 0x1665208
    void EndEvents();
    // public System.Void EventsToWriter(System.Xml.XmlWriter writer)
    // Offset: 0x1665270
    void EventsToWriter(::System::Xml::XmlWriter* writer);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType)
    // Offset: 0x166521C
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1)
    // Offset: 0x1665A4C
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2)
    // Offset: 0x1665ACC
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2, System.String s3)
    // Offset: 0x16659AC
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2, ::StringW s3);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.String s1, System.String s2, System.String s3, System.Object o)
    // Offset: 0x166591C
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::StringW s1, ::StringW s2, ::StringW s3, ::Il2CppObject* o);
    // private System.Void AddEvent(System.Xml.XmlEventCache/System.Xml.XmlEventType eventType, System.Object o)
    // Offset: 0x1665C68
    void AddEvent(::System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o);
    // private System.Int32 NewEvent()
    // Offset: 0x1665FFC
    int NewEvent();
    // static private System.Byte[] ToBytes(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1665DA0
    static ::ArrayW<uint8_t> ToBytes(::ArrayW<uint8_t> buffer, int index, int count);
    // public override System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    // Offset: 0x1665904
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    void WriteDocType(::StringW name, ::StringW pubid, ::StringW sysid, ::StringW subset);
    // public override System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1665998
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartElement(System.String prefix, System.String localName, System.String ns)
    void WriteStartElement(::StringW prefix, ::StringW localName, ::StringW ns);
    // public override System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1665A24
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    void WriteStartAttribute(::StringW prefix, ::StringW localName, ::StringW ns);
    // public override System.Void WriteEndAttribute()
    // Offset: 0x1665A38
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndAttribute()
    void WriteEndAttribute();
    // public override System.Void WriteCData(System.String text)
    // Offset: 0x1665A40
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteCData(System.String text)
    void WriteCData(::StringW text);
    // public override System.Void WriteComment(System.String text)
    // Offset: 0x1665AB0
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteComment(System.String text)
    void WriteComment(::StringW text);
    // public override System.Void WriteProcessingInstruction(System.String name, System.String text)
    // Offset: 0x1665ABC
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteProcessingInstruction(System.String name, System.String text)
    void WriteProcessingInstruction(::StringW name, ::StringW text);
    // public override System.Void WriteWhitespace(System.String ws)
    // Offset: 0x1665B34
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteWhitespace(System.String ws)
    void WriteWhitespace(::StringW ws);
    // public override System.Void WriteString(System.String text)
    // Offset: 0x1665B40
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteString(System.String text)
    void WriteString(::StringW text);
    // public override System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1665B64
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteChars(::ArrayW<::Il2CppChar> buffer, int index, int count);
    // public override System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1665BA0
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteRaw(::ArrayW<::Il2CppChar> buffer, int index, int count);
    // public override System.Void WriteRaw(System.String data)
    // Offset: 0x1665BDC
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteRaw(System.String data)
    void WriteRaw(::StringW data);
    // public override System.Void WriteEntityRef(System.String name)
    // Offset: 0x1665BE8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEntityRef(System.String name)
    void WriteEntityRef(::StringW name);
    // public override System.Void WriteCharEntity(System.Char ch)
    // Offset: 0x1665BF4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteCharEntity(System.Char ch)
    void WriteCharEntity(::Il2CppChar ch);
    // public override System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    // Offset: 0x1665CCC
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    void WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar);
    // public override System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1665D68
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBase64(::ArrayW<uint8_t> buffer, int index, int count);
    // public override System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1665E5C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBinHex(::ArrayW<uint8_t> buffer, int index, int count);
    // public override System.Void Close()
    // Offset: 0x1665E94
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Close()
    void Close();
    // public override System.Void Flush()
    // Offset: 0x1665E9C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Flush()
    void Flush();
    // public override System.Void WriteValue(System.String value)
    // Offset: 0x1665EA4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteValue(System.String value)
    void WriteValue(::StringW value);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1665EB4
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // override System.Void WriteXmlDeclaration(System.Xml.XmlStandalone standalone)
    // Offset: 0x1665F34
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteXmlDeclaration(System.Xml.XmlStandalone standalone)
    void WriteXmlDeclaration(::System::Xml::XmlStandalone standalone);
    // override System.Void WriteXmlDeclaration(System.String xmldecl)
    // Offset: 0x1665FA8
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteXmlDeclaration(System.String xmldecl)
    void WriteXmlDeclaration(::StringW xmldecl);
    // override System.Void StartElementContent()
    // Offset: 0x1665FB4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::StartElementContent()
    void StartElementContent();
    // override System.Void WriteEndElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1665FBC
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteEndElement(System.String prefix, System.String localName, System.String ns)
    void WriteEndElement(::StringW prefix, ::StringW localName, ::StringW ns);
    // override System.Void WriteFullEndElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1665FD0
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteFullEndElement(System.String prefix, System.String localName, System.String ns)
    void WriteFullEndElement(::StringW prefix, ::StringW localName, ::StringW ns);
    // override System.Void WriteNamespaceDeclaration(System.String prefix, System.String ns)
    // Offset: 0x1665FE4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteNamespaceDeclaration(System.String prefix, System.String ns)
    void WriteNamespaceDeclaration(::StringW prefix, ::StringW ns);
    // override System.Void WriteEndBase64()
    // Offset: 0x1665FF4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteEndBase64()
    void WriteEndBase64();
  }; // System.Xml.XmlEventCache
  #pragma pack(pop)
  static check_size<sizeof(XmlEventCache), 112 + sizeof(::StringW)> __System_Xml_XmlEventCacheSizeCheck;
  static_assert(sizeof(XmlEventCache) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlEventCache::XmlEvent, "System.Xml", "XmlEventCache/XmlEvent");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlEventCache::XmlEventType, "System.Xml", "XmlEventCache/XmlEventType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlEventCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlEventCache::EndEvents
// Il2CppName: EndEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::EndEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "EndEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::EventsToWriter
// Il2CppName: EventsToWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlWriter*)>(&System::Xml::XmlEventCache::EventsToWriter)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "EventsToWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType, ::StringW)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, s1});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, s1, s2});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, s1, s2, s3});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType, ::StringW, ::StringW, ::StringW, ::Il2CppObject*)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, s1, s2, s3, o});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlEventCache::XmlEventType, ::Il2CppObject*)>(&System::Xml::XmlEventCache::AddEvent)> {
  static const MethodInfo* get() {
    static auto* eventType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlEventCache/XmlEventType")->byval_arg;
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventType, o});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::NewEvent
// Il2CppName: NewEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::NewEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "NewEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::ToBytes
// Il2CppName: ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlEventCache::ToBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteDocType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pubid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sysid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, pubid, sysid, subset});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteStartElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteStartAttribute)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::WriteEndAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteCData)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteWhitespace)> {
  static const MethodInfo* get() {
    static auto* ws = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ws});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteString)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlEventCache::WriteChars)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::Xml::XmlEventCache::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteEntityRef)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::Il2CppChar)>(&System::Xml::XmlEventCache::WriteCharEntity)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::Il2CppChar, ::Il2CppChar)>(&System::Xml::XmlEventCache::WriteSurrogateCharEntity)> {
  static const MethodInfo* get() {
    static auto* lowChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* highChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowChar, highChar});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlEventCache::WriteBase64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::ArrayW<uint8_t>, int, int)>(&System::Xml::XmlEventCache::WriteBinHex)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(bool)>(&System::Xml::XmlEventCache::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::System::Xml::XmlStandalone)>(&System::Xml::XmlEventCache::WriteXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlStandalone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{standalone});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW)>(&System::Xml::XmlEventCache::WriteXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* xmldecl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmldecl});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::StartElementContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteEndElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteFullEndElement)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, localName, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)(::StringW, ::StringW)>(&System::Xml::XmlEventCache::WriteNamespaceDeclaration)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlEventCache::WriteEndBase64
// Il2CppName: WriteEndBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlEventCache::*)()>(&System::Xml::XmlEventCache::WriteEndBase64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlEventCache*), "WriteEndBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
