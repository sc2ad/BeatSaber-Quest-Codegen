// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: IWebProxy
  class IWebProxy;
}
// Forward declaring namespace: System::Net::Cache
namespace System::Net::Cache {
  // Forward declaring type: RequestCachePolicy
  class RequestCachePolicy;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlDownloadManager
  class XmlDownloadManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlDownloadManager);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlDownloadManager*, "System.Xml", "XmlDownloadManager");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlDownloadManager
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlDownloadManager : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::XmlDownloadManager::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    // Nested type: ::System::Xml::XmlDownloadManager::$GetNonFileStreamAsync$d__5
    struct $GetNonFileStreamAsync$d__5;
    public:
    // private System.Collections.Hashtable connections
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* connections;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Hashtable*
    constexpr operator ::System::Collections::Hashtable*() const noexcept {
      return connections;
    }
    // Get instance field reference: private System.Collections.Hashtable connections
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_connections();
    // public System.Void .ctor()
    // Offset: 0x1C41D3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDownloadManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlDownloadManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDownloadManager*, creationType>()));
    }
    // System.IO.Stream GetStream(System.Uri uri, System.Net.ICredentials credentials, System.Net.IWebProxy proxy, System.Net.Cache.RequestCachePolicy cachePolicy)
    // Offset: 0x1C41460
    ::System::IO::Stream* GetStream(::System::Uri* uri, ::System::Net::ICredentials* credentials, ::System::Net::IWebProxy* proxy, ::System::Net::Cache::RequestCachePolicy* cachePolicy);
    // private System.IO.Stream GetNonFileStream(System.Uri uri, System.Net.ICredentials credentials, System.Net.IWebProxy proxy, System.Net.Cache.RequestCachePolicy cachePolicy)
    // Offset: 0x1C4155C
    ::System::IO::Stream* GetNonFileStream(::System::Uri* uri, ::System::Net::ICredentials* credentials, ::System::Net::IWebProxy* proxy, ::System::Net::Cache::RequestCachePolicy* cachePolicy);
    // System.Void Remove(System.String host)
    // Offset: 0x1C41984
    void Remove(::StringW host);
    // System.Threading.Tasks.Task`1<System.IO.Stream> GetStreamAsync(System.Uri uri, System.Net.ICredentials credentials, System.Net.IWebProxy proxy, System.Net.Cache.RequestCachePolicy cachePolicy)
    // Offset: 0x1C41AC0
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* GetStreamAsync(::System::Uri* uri, ::System::Net::ICredentials* credentials, ::System::Net::IWebProxy* proxy, ::System::Net::Cache::RequestCachePolicy* cachePolicy);
    // private System.Threading.Tasks.Task`1<System.IO.Stream> GetNonFileStreamAsync(System.Uri uri, System.Net.ICredentials credentials, System.Net.IWebProxy proxy, System.Net.Cache.RequestCachePolicy cachePolicy)
    // Offset: 0x1C41C04
    ::System::Threading::Tasks::Task_1<::System::IO::Stream*>* GetNonFileStreamAsync(::System::Uri* uri, ::System::Net::ICredentials* credentials, ::System::Net::IWebProxy* proxy, ::System::Net::Cache::RequestCachePolicy* cachePolicy);
  }; // System.Xml.XmlDownloadManager
  #pragma pack(pop)
  static check_size<sizeof(XmlDownloadManager), 16 + sizeof(::System::Collections::Hashtable*)> __System_Xml_XmlDownloadManagerSizeCheck;
  static_assert(sizeof(XmlDownloadManager) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::GetStream
// Il2CppName: GetStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Xml::XmlDownloadManager::*)(::System::Uri*, ::System::Net::ICredentials*, ::System::Net::IWebProxy*, ::System::Net::Cache::RequestCachePolicy*)>(&System::Xml::XmlDownloadManager::GetStream)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* credentials = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    static auto* cachePolicy = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDownloadManager*), "GetStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, credentials, proxy, cachePolicy});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::GetNonFileStream
// Il2CppName: GetNonFileStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Xml::XmlDownloadManager::*)(::System::Uri*, ::System::Net::ICredentials*, ::System::Net::IWebProxy*, ::System::Net::Cache::RequestCachePolicy*)>(&System::Xml::XmlDownloadManager::GetNonFileStream)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* credentials = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    static auto* cachePolicy = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDownloadManager*), "GetNonFileStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, credentials, proxy, cachePolicy});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlDownloadManager::*)(::StringW)>(&System::Xml::XmlDownloadManager::Remove)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDownloadManager*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::GetStreamAsync
// Il2CppName: GetStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Xml::XmlDownloadManager::*)(::System::Uri*, ::System::Net::ICredentials*, ::System::Net::IWebProxy*, ::System::Net::Cache::RequestCachePolicy*)>(&System::Xml::XmlDownloadManager::GetStreamAsync)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* credentials = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    static auto* cachePolicy = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDownloadManager*), "GetStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, credentials, proxy, cachePolicy});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlDownloadManager::GetNonFileStreamAsync
// Il2CppName: GetNonFileStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::IO::Stream*>* (System::Xml::XmlDownloadManager::*)(::System::Uri*, ::System::Net::ICredentials*, ::System::Net::IWebProxy*, ::System::Net::Cache::RequestCachePolicy*)>(&System::Xml::XmlDownloadManager::GetNonFileStreamAsync)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* credentials = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    static auto* cachePolicy = &::il2cpp_utils::GetClassFromName("System.Net.Cache", "RequestCachePolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlDownloadManager*), "GetNonFileStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, credentials, proxy, cachePolicy});
  }
};
