// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlChildEnumerator
  class XmlChildEnumerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlChildEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlChildEnumerator*, "System.Xml", "XmlChildEnumerator");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlChildEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlChildEnumerator : public ::Il2CppObject/*, public ::System::Collections::IEnumerator*/ {
    public:
    public:
    // System.Xml.XmlNode container
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNode* container;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // System.Xml.XmlNode child
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNode* child;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // System.Boolean isFirst
    // Size: 0x1
    // Offset: 0x20
    bool isFirst;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerator
    operator ::System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Creating interface conversion operator: i_IEnumerator
    inline ::System::Collections::IEnumerator* i_IEnumerator() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Get instance field reference: System.Xml.XmlNode container
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNode*& dyn_container();
    // Get instance field reference: System.Xml.XmlNode child
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNode*& dyn_child();
    // Get instance field reference: System.Boolean isFirst
    [[deprecated("Use field access instead!")]] bool& dyn_isFirst();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x1C378CC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // System.Xml.XmlNode get_Current()
    // Offset: 0x1C378D0
    ::System::Xml::XmlNode* get_Current();
    // System.Void .ctor(System.Xml.XmlNode container)
    // Offset: 0x1C377C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlChildEnumerator* New_ctor(::System::Xml::XmlNode* container) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlChildEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlChildEnumerator*, creationType>(container)));
    }
    // private System.Boolean System.Collections.IEnumerator.MoveNext()
    // Offset: 0x1C37814
    bool System_Collections_IEnumerator_MoveNext();
    // System.Boolean MoveNext()
    // Offset: 0x1C37818
    bool MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x1C37888
    void System_Collections_IEnumerator_Reset();
  }; // System.Xml.XmlChildEnumerator
  #pragma pack(pop)
  static check_size<sizeof(XmlChildEnumerator), 32 + sizeof(bool)> __System_Xml_XmlChildEnumeratorSizeCheck;
  static_assert(sizeof(XmlChildEnumerator) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Xml::XmlChildEnumerator::*)()>(&System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlChildEnumerator::*)()>(&System::Xml::XmlChildEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_MoveNext
// Il2CppName: System.Collections.IEnumerator.MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlChildEnumerator::*)()>(&System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildEnumerator*), "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlChildEnumerator::*)()>(&System::Xml::XmlChildEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlChildEnumerator::*)()>(&System::Xml::XmlChildEnumerator::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlChildEnumerator*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
