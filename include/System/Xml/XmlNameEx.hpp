// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlName
#include "System/Xml/XmlName.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaType
  class XmlSchemaType;
  // Skipping declaration: IXmlSchemaInfo because it is already included!
  // Forward declaring type: XmlSchemaValidity
  struct XmlSchemaValidity;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlNameEx
  class XmlNameEx;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlNameEx);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNameEx*, "System.Xml", "XmlNameEx");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlNameEx
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlNameEx : public ::System::Xml::XmlName {
    public:
    public:
    // private System.Byte flags
    // Size: 0x1
    // Offset: 0x48
    uint8_t flags;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: flags and: memberType
    char __padding0[0x7] = {};
    // private System.Xml.Schema.XmlSchemaSimpleType memberType
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::XmlSchemaSimpleType* memberType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSimpleType*) == 0x8);
    // private System.Xml.Schema.XmlSchemaType schemaType
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaType* schemaType;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaType*) == 0x8);
    // private System.Object decl
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppObject* decl;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Byte flags
    [[deprecated("Use field access instead!")]] uint8_t& dyn_flags();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSimpleType memberType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSimpleType*& dyn_memberType();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaType schemaType
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaType*& dyn_schemaType();
    // Get instance field reference: private System.Object decl
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_decl();
    // System.Void .ctor(System.String prefix, System.String localName, System.String ns, System.Int32 hashCode, System.Xml.XmlDocument ownerDoc, System.Xml.XmlName next, System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    // Offset: 0x166BC84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNameEx* New_ctor(::StringW prefix, ::StringW localName, ::StringW ns, int hashCode, ::System::Xml::XmlDocument* ownerDoc, ::System::Xml::XmlName* next, ::System::Xml::Schema::IXmlSchemaInfo* schemaInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlNameEx::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNameEx*, creationType>(prefix, localName, ns, hashCode, ownerDoc, next, schemaInfo)));
    }
    // public System.Void SetValidity(System.Xml.Schema.XmlSchemaValidity value)
    // Offset: 0x166C308
    void SetValidity(::System::Xml::Schema::XmlSchemaValidity value);
    // public System.Void SetIsDefault(System.Boolean value)
    // Offset: 0x166C31C
    void SetIsDefault(bool value);
    // public System.Void SetIsNil(System.Boolean value)
    // Offset: 0x166C338
    void SetIsNil(bool value);
    // public override System.Xml.Schema.XmlSchemaValidity get_Validity()
    // Offset: 0x166C354
    // Implemented from: System.Xml.XmlName
    // Base method: System.Xml.Schema.XmlSchemaValidity XmlName::get_Validity()
    ::System::Xml::Schema::XmlSchemaValidity get_Validity();
    // public override System.Boolean get_IsDefault()
    // Offset: 0x166C384
    // Implemented from: System.Xml.XmlName
    // Base method: System.Boolean XmlName::get_IsDefault()
    bool get_IsDefault();
    // public override System.Boolean get_IsNil()
    // Offset: 0x166C390
    // Implemented from: System.Xml.XmlName
    // Base method: System.Boolean XmlName::get_IsNil()
    bool get_IsNil();
    // public override System.Xml.Schema.XmlSchemaSimpleType get_MemberType()
    // Offset: 0x166C39C
    // Implemented from: System.Xml.XmlName
    // Base method: System.Xml.Schema.XmlSchemaSimpleType XmlName::get_MemberType()
    ::System::Xml::Schema::XmlSchemaSimpleType* get_MemberType();
    // public override System.Xml.Schema.XmlSchemaType get_SchemaType()
    // Offset: 0x166C3A4
    // Implemented from: System.Xml.XmlName
    // Base method: System.Xml.Schema.XmlSchemaType XmlName::get_SchemaType()
    ::System::Xml::Schema::XmlSchemaType* get_SchemaType();
    // public override System.Xml.Schema.XmlSchemaElement get_SchemaElement()
    // Offset: 0x166C3AC
    // Implemented from: System.Xml.XmlName
    // Base method: System.Xml.Schema.XmlSchemaElement XmlName::get_SchemaElement()
    ::System::Xml::Schema::XmlSchemaElement* get_SchemaElement();
    // public override System.Xml.Schema.XmlSchemaAttribute get_SchemaAttribute()
    // Offset: 0x166C430
    // Implemented from: System.Xml.XmlName
    // Base method: System.Xml.Schema.XmlSchemaAttribute XmlName::get_SchemaAttribute()
    ::System::Xml::Schema::XmlSchemaAttribute* get_SchemaAttribute();
    // public override System.Boolean Equals(System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    // Offset: 0x166C4B4
    // Implemented from: System.Xml.XmlName
    // Base method: System.Boolean XmlName::Equals(System.Xml.Schema.IXmlSchemaInfo schemaInfo)
    bool Equals(::System::Xml::Schema::IXmlSchemaInfo* schemaInfo);
  }; // System.Xml.XmlNameEx
  #pragma pack(pop)
  static check_size<sizeof(XmlNameEx), 96 + sizeof(::Il2CppObject*)> __System_Xml_XmlNameExSizeCheck;
  static_assert(sizeof(XmlNameEx) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlNameEx::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlNameEx::SetValidity
// Il2CppName: SetValidity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNameEx::*)(::System::Xml::Schema::XmlSchemaValidity)>(&System::Xml::XmlNameEx::SetValidity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaValidity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "SetValidity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::SetIsDefault
// Il2CppName: SetIsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNameEx::*)(bool)>(&System::Xml::XmlNameEx::SetIsDefault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "SetIsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::SetIsNil
// Il2CppName: SetIsNil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNameEx::*)(bool)>(&System::Xml::XmlNameEx::SetIsNil)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "SetIsNil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_Validity
// Il2CppName: get_Validity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaValidity (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_Validity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_Validity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_IsNil
// Il2CppName: get_IsNil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_IsNil)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_IsNil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_MemberType
// Il2CppName: get_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaSimpleType* (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_MemberType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_SchemaType
// Il2CppName: get_SchemaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaType* (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_SchemaType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_SchemaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_SchemaElement
// Il2CppName: get_SchemaElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_SchemaElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_SchemaElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::get_SchemaAttribute
// Il2CppName: get_SchemaAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAttribute* (System::Xml::XmlNameEx::*)()>(&System::Xml::XmlNameEx::get_SchemaAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "get_SchemaAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNameEx::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNameEx::*)(::System::Xml::Schema::IXmlSchemaInfo*)>(&System::Xml::XmlNameEx::Equals)> {
  static const MethodInfo* get() {
    static auto* schemaInfo = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "IXmlSchemaInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNameEx*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaInfo});
  }
};
