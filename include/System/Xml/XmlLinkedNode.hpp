// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.XmlNode
#include "System/Xml/XmlNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlLinkedNode
  class XmlLinkedNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlLinkedNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlLinkedNode*, "System.Xml", "XmlLinkedNode");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlLinkedNode
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlLinkedNode : public ::System::Xml::XmlNode {
    public:
    public:
    // System.Xml.XmlLinkedNode next
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlLinkedNode* next;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlLinkedNode*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Xml::XmlNode*
    constexpr operator ::System::Xml::XmlNode*() const noexcept = delete;
    // Get instance field reference: System.Xml.XmlLinkedNode next
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlLinkedNode*& dyn_next();
    // public override System.Xml.XmlNode get_PreviousSibling()
    // Offset: 0x1667610
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNode XmlNode::get_PreviousSibling()
    ::System::Xml::XmlNode* get_PreviousSibling();
    // public override System.Xml.XmlNode get_NextSibling()
    // Offset: 0x166767C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Xml.XmlNode XmlNode::get_NextSibling()
    ::System::Xml::XmlNode* get_NextSibling();
    // System.Void .ctor(System.Xml.XmlDocument doc)
    // Offset: 0x166481C
    // Implemented from: System.Xml.XmlNode
    // Base method: System.Void XmlNode::.ctor(System.Xml.XmlDocument doc)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlLinkedNode* New_ctor(::System::Xml::XmlDocument* doc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlLinkedNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlLinkedNode*, creationType>(doc)));
    }
  }; // System.Xml.XmlLinkedNode
  #pragma pack(pop)
  static check_size<sizeof(XmlLinkedNode), 24 + sizeof(::System::Xml::XmlLinkedNode*)> __System_Xml_XmlLinkedNodeSizeCheck;
  static_assert(sizeof(XmlLinkedNode) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlLinkedNode::get_PreviousSibling
// Il2CppName: get_PreviousSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlLinkedNode::*)()>(&System::Xml::XmlLinkedNode::get_PreviousSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlLinkedNode*), "get_PreviousSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlLinkedNode::get_NextSibling
// Il2CppName: get_NextSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlLinkedNode::*)()>(&System::Xml::XmlLinkedNode::get_NextSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlLinkedNode*), "get_NextSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlLinkedNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
