// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlNamedNodeMap
  class XmlNamedNodeMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlNamedNodeMap);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNamedNodeMap*, "System.Xml", "XmlNamedNodeMap");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlNamedNodeMap
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlNamedNodeMap : public ::Il2CppObject/*, public ::System::Collections::IEnumerable*/ {
    public:
    // Nested type: ::System::Xml::XmlNamedNodeMap::SmallXmlNodeList
    struct SmallXmlNodeList;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlNamedNodeMap/System.Xml.SmallXmlNodeList
    // [TokenAttribute] Offset: FFFFFFFF
    // [DefaultMemberAttribute] Offset: 1046058
    struct SmallXmlNodeList/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::System::Xml::XmlNamedNodeMap::SmallXmlNodeList::SingleObjectEnumerator
      class SingleObjectEnumerator;
      public:
      // private System.Object field
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* field;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      public:
      // Creating value type constructor for type: SmallXmlNodeList
      constexpr SmallXmlNodeList(::Il2CppObject* field_ = {}) noexcept : field{field_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::Il2CppObject*
      constexpr operator ::Il2CppObject*() const noexcept {
        return field;
      }
      // Get instance field reference: private System.Object field
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_field();
      // public System.Int32 get_Count()
      // Offset: 0x15E2504
      int get_Count();
      // public System.Object get_Item(System.Int32 index)
      // Offset: 0x15E21CC
      ::Il2CppObject* get_Item(int index);
      // public System.Void Add(System.Object value)
      // Offset: 0x15E2828
      void Add(::Il2CppObject* value);
      // public System.Void RemoveAt(System.Int32 index)
      // Offset: 0x15E2B84
      void RemoveAt(int index);
      // public System.Void Insert(System.Int32 index, System.Object value)
      // Offset: 0x15E2DFC
      void Insert(int index, ::Il2CppObject* value);
      // public System.Collections.IEnumerator GetEnumerator()
      // Offset: 0x15E25B8
      ::System::Collections::IEnumerator* GetEnumerator();
    }; // System.Xml.XmlNamedNodeMap/System.Xml.SmallXmlNodeList
    #pragma pack(pop)
    static check_size<sizeof(XmlNamedNodeMap::SmallXmlNodeList), 0 + sizeof(::Il2CppObject*)> __System_Xml_XmlNamedNodeMap_SmallXmlNodeListSizeCheck;
    static_assert(sizeof(XmlNamedNodeMap::SmallXmlNodeList) == 0x8);
    public:
    // System.Xml.XmlNode parent
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNode* parent;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // System.Xml.XmlNamedNodeMap/System.Xml.SmallXmlNodeList nodes
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNamedNodeMap::SmallXmlNodeList nodes;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNamedNodeMap::SmallXmlNodeList) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Creating interface conversion operator: i_IEnumerable
    inline ::System::Collections::IEnumerable* i_IEnumerable() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Get instance field reference: System.Xml.XmlNode parent
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNode*& dyn_parent();
    // Get instance field reference: System.Xml.XmlNamedNodeMap/System.Xml.SmallXmlNodeList nodes
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlNamedNodeMap::SmallXmlNodeList& dyn_nodes();
    // public System.Int32 get_Count()
    // Offset: 0x15E24FC
    int get_Count();
    // System.Void .ctor(System.Xml.XmlNode parent)
    // Offset: 0x15E2004
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNamedNodeMap* New_ctor(::System::Xml::XmlNode* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlNamedNodeMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNamedNodeMap*, creationType>(parent)));
    }
    // public System.Xml.XmlNode GetNamedItem(System.String name)
    // Offset: 0x15E2030
    ::System::Xml::XmlNode* GetNamedItem(::StringW name);
    // public System.Xml.XmlNode SetNamedItem(System.Xml.XmlNode node)
    // Offset: 0x15E22B0
    ::System::Xml::XmlNode* SetNamedItem(::System::Xml::XmlNode* node);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x15E25B0
    ::System::Collections::IEnumerator* GetEnumerator();
    // System.Int32 FindNodeOffset(System.String name)
    // Offset: 0x15E20D8
    int FindNodeOffset(::StringW name);
    // System.Int32 FindNodeOffset(System.String localName, System.String namespaceURI)
    // Offset: 0x15E2370
    int FindNodeOffset(::StringW localName, ::StringW namespaceURI);
    // System.Xml.XmlNode AddNode(System.Xml.XmlNode node)
    // Offset: 0x15E26A8
    ::System::Xml::XmlNode* AddNode(::System::Xml::XmlNode* node);
    // System.Xml.XmlNode AddNodeForLoad(System.Xml.XmlNode node, System.Xml.XmlDocument doc)
    // Offset: 0x15E2960
    ::System::Xml::XmlNode* AddNodeForLoad(::System::Xml::XmlNode* node, ::System::Xml::XmlDocument* doc);
    // System.Xml.XmlNode RemoveNodeAt(System.Int32 i)
    // Offset: 0x15E2A0C
    ::System::Xml::XmlNode* RemoveNodeAt(int i);
    // System.Xml.XmlNode ReplaceNodeAt(System.Int32 i, System.Xml.XmlNode node)
    // Offset: 0x15E24A4
    ::System::Xml::XmlNode* ReplaceNodeAt(int i, ::System::Xml::XmlNode* node);
    // System.Xml.XmlNode InsertNodeAt(System.Int32 i, System.Xml.XmlNode node)
    // Offset: 0x15E2C6C
    ::System::Xml::XmlNode* InsertNodeAt(int i, ::System::Xml::XmlNode* node);
  }; // System.Xml.XmlNamedNodeMap
  #pragma pack(pop)
  static check_size<sizeof(XmlNamedNodeMap), 24 + sizeof(::System::Xml::XmlNamedNodeMap::SmallXmlNodeList)> __System_Xml_XmlNamedNodeMapSizeCheck;
  static_assert(sizeof(XmlNamedNodeMap) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNamedNodeMap::SmallXmlNodeList, "System.Xml", "XmlNamedNodeMap/SmallXmlNodeList");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNamedNodeMap::*)()>(&System::Xml::XmlNamedNodeMap::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::GetNamedItem
// Il2CppName: GetNamedItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(::StringW)>(&System::Xml::XmlNamedNodeMap::GetNamedItem)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "GetNamedItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::SetNamedItem
// Il2CppName: SetNamedItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNamedNodeMap::SetNamedItem)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "SetNamedItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Xml::XmlNamedNodeMap::*)()>(&System::Xml::XmlNamedNodeMap::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::FindNodeOffset
// Il2CppName: FindNodeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNamedNodeMap::*)(::StringW)>(&System::Xml::XmlNamedNodeMap::FindNodeOffset)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "FindNodeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::FindNodeOffset
// Il2CppName: FindNodeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNamedNodeMap::*)(::StringW, ::StringW)>(&System::Xml::XmlNamedNodeMap::FindNodeOffset)> {
  static const MethodInfo* get() {
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "FindNodeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localName, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::AddNode
// Il2CppName: AddNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNamedNodeMap::AddNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "AddNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::AddNodeForLoad
// Il2CppName: AddNodeForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(::System::Xml::XmlNode*, ::System::Xml::XmlDocument*)>(&System::Xml::XmlNamedNodeMap::AddNodeForLoad)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* doc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "AddNodeForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, doc});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::RemoveNodeAt
// Il2CppName: RemoveNodeAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(int)>(&System::Xml::XmlNamedNodeMap::RemoveNodeAt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "RemoveNodeAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::ReplaceNodeAt
// Il2CppName: ReplaceNodeAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(int, ::System::Xml::XmlNode*)>(&System::Xml::XmlNamedNodeMap::ReplaceNodeAt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "ReplaceNodeAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNamedNodeMap::InsertNodeAt
// Il2CppName: InsertNodeAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Xml::XmlNamedNodeMap::*)(int, ::System::Xml::XmlNode*)>(&System::Xml::XmlNamedNodeMap::InsertNodeAt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNamedNodeMap*), "InsertNodeAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, node});
  }
};
