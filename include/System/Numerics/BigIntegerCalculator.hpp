// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Numerics
namespace System::Numerics {
}
// Completed forward declares
// Type namespace: System.Numerics
namespace System::Numerics {
  // Forward declaring type: BigIntegerCalculator
  class BigIntegerCalculator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Numerics::BigIntegerCalculator);
DEFINE_IL2CPP_ARG_TYPE(::System::Numerics::BigIntegerCalculator*, "System.Numerics", "BigIntegerCalculator");
// Type namespace: System.Numerics
namespace System::Numerics {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Numerics.BigIntegerCalculator
  // [TokenAttribute] Offset: FFFFFFFF
  class BigIntegerCalculator : public ::Il2CppObject {
    public:
    // Nested type: ::System::Numerics::BigIntegerCalculator::BitsBuffer
    struct BitsBuffer;
    // Nested type: ::System::Numerics::BigIntegerCalculator::FastReducer
    struct FastReducer;
    // Get static field: static private System.Int32 ReducerThreshold
    static int _get_ReducerThreshold();
    // Set static field: static private System.Int32 ReducerThreshold
    static void _set_ReducerThreshold(int value);
    // Get static field: static private System.Int32 SquareThreshold
    static int _get_SquareThreshold();
    // Set static field: static private System.Int32 SquareThreshold
    static void _set_SquareThreshold(int value);
    // Get static field: static private System.Int32 AllocationThreshold
    static int _get_AllocationThreshold();
    // Set static field: static private System.Int32 AllocationThreshold
    static void _set_AllocationThreshold(int value);
    // Get static field: static private System.Int32 MultiplyThreshold
    static int _get_MultiplyThreshold();
    // Set static field: static private System.Int32 MultiplyThreshold
    static void _set_MultiplyThreshold(int value);
    // static private System.Void .cctor()
    // Offset: 0x1BBDFAC
    static void _cctor();
    // static public System.UInt32[] Add(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x1BBB698
    static ::ArrayW<uint> Add(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Add(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1BBB798
    static ::ArrayW<uint> Add(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Add(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1BBBFA4
    static void Add(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.Void AddSelf(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)
    // Offset: 0x1BBC028
    static void AddSelf(uint* left, int leftLength, uint* right, int rightLength);
    // static public System.UInt32[] Subtract(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x1BBBB2C
    static ::ArrayW<uint> Subtract(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Subtract(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1BBBC98
    static ::ArrayW<uint> Subtract(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Subtract(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1BBC094
    static void Subtract(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.Void SubtractSelf(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)
    // Offset: 0x1BBC10C
    static void SubtractSelf(uint* left, int leftLength, uint* right, int rightLength);
    // static public System.Int32 Compare(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1BBBC0C
    static int Compare(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Int32 Compare(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)
    // Offset: 0x1BBC178
    static int Compare(uint* left, int leftLength, uint* right, int rightLength);
    // static public System.UInt32 Remainder(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x1BBC1C0
    static uint Remainder(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Divide(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1BBC230
    static ::ArrayW<uint> Divide(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static public System.UInt32[] Remainder(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1BBC6E0
    static ::ArrayW<uint> Remainder(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Divide(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1BBC39C
    static void Divide(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.UInt32 AddDivisor(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)
    // Offset: 0x1BBC8A8
    static uint AddDivisor(uint* left, int leftLength, uint* right, int rightLength);
    // static private System.UInt32 SubtractDivisor(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt64 q)
    // Offset: 0x1BBC860
    static uint SubtractDivisor(uint* left, int leftLength, uint* right, int rightLength, uint64_t q);
    // static private System.Boolean DivideGuessTooBig(System.UInt64 q, System.UInt64 valHi, System.UInt32 valLo, System.UInt32 divHi, System.UInt32 divLo)
    // Offset: 0x1BBC814
    static bool DivideGuessTooBig(uint64_t q, uint64_t valHi, uint valLo, uint divHi, uint divLo);
    // static private System.UInt32[] CreateCopy(System.UInt32[] value)
    // Offset: 0x1BBC318
    static ::ArrayW<uint> CreateCopy(::ArrayW<uint> value);
    // static private System.Int32 LeadingZeros(System.UInt32 value)
    // Offset: 0x1BBC798
    static int LeadingZeros(uint value);
    // static public System.UInt32 Pow(System.UInt32 value, System.UInt32 power, System.UInt32 modulus)
    // Offset: 0x1BB9F84
    static uint Pow(uint value, uint power, uint modulus);
    // static public System.UInt32 Pow(System.UInt32[] value, System.UInt32 power, System.UInt32 modulus)
    // Offset: 0x1BB9E3C
    static uint Pow(::ArrayW<uint> value, uint power, uint modulus);
    // static public System.UInt32 Pow(System.UInt32 value, System.UInt32[] power, System.UInt32 modulus)
    // Offset: 0x1BB9F04
    static uint Pow(uint value, ::ArrayW<uint> power, uint modulus);
    // static public System.UInt32 Pow(System.UInt32[] value, System.UInt32[] power, System.UInt32 modulus)
    // Offset: 0x1BB9DB0
    static uint Pow(::ArrayW<uint> value, ::ArrayW<uint> power, uint modulus);
    // static private System.UInt32 PowCore(System.UInt32[] power, System.UInt32 modulus, System.UInt64 value, System.UInt64 result)
    // Offset: 0x1BBC928
    static uint PowCore(::ArrayW<uint> power, uint modulus, uint64_t value, uint64_t result);
    // static private System.UInt32 PowCore(System.UInt32 power, System.UInt32 modulus, System.UInt64 value, System.UInt64 result)
    // Offset: 0x1BBC8E8
    static uint PowCore(uint power, uint modulus, uint64_t value, uint64_t result);
    // static public System.UInt32[] Pow(System.UInt32 value, System.UInt32 power, System.UInt32[] modulus)
    // Offset: 0x1BBA2EC
    static ::ArrayW<uint> Pow(uint value, uint power, ::ArrayW<uint> modulus);
    // static public System.UInt32[] Pow(System.UInt32[] value, System.UInt32 power, System.UInt32[] modulus)
    // Offset: 0x1BBA158
    static ::ArrayW<uint> Pow(::ArrayW<uint> value, uint power, ::ArrayW<uint> modulus);
    // static public System.UInt32[] Pow(System.UInt32 value, System.UInt32[] power, System.UInt32[] modulus)
    // Offset: 0x1BBA244
    static ::ArrayW<uint> Pow(uint value, ::ArrayW<uint> power, ::ArrayW<uint> modulus);
    // static public System.UInt32[] Pow(System.UInt32[] value, System.UInt32[] power, System.UInt32[] modulus)
    // Offset: 0x1BBA06C
    static ::ArrayW<uint> Pow(::ArrayW<uint> value, ::ArrayW<uint> power, ::ArrayW<uint> modulus);
    // static private System.UInt32[] PowCore(System.UInt32[] power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value)
    // Offset: 0x1BBCCF4
    static ::ArrayW<uint> PowCore(::ArrayW<uint> power, ::ArrayW<uint> modulus, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value);
    // static private System.UInt32[] PowCore(System.UInt32 power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value)
    // Offset: 0x1BBCAFC
    static ::ArrayW<uint> PowCore(uint power, ::ArrayW<uint> modulus, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value);
    // static private System.Void PowCore(System.UInt32[] power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer result, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0x1BBCE5C
    static void PowCore(::ArrayW<uint> power, ::ArrayW<uint> modulus, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> result, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // static private System.Void PowCore(System.UInt32 power, System.UInt32[] modulus, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer result, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0x1BBD21C
    static void PowCore(uint power, ::ArrayW<uint> modulus, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> result, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // static private System.Void PowCore(System.UInt32[] power, ref System.Numerics.BigIntegerCalculator/System.Numerics.FastReducer reducer, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer result, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0x1BBD0C0
    static void PowCore(::ArrayW<uint> power, ByRef<::System::Numerics::BigIntegerCalculator::FastReducer> reducer, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> result, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // static private System.Void PowCore(System.UInt32 power, ref System.Numerics.BigIntegerCalculator/System.Numerics.FastReducer reducer, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer result, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0x1BBD2A4
    static void PowCore(uint power, ByRef<::System::Numerics::BigIntegerCalculator::FastReducer> reducer, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> result, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // static private System.Int32 ActualLength(System.UInt32[] value)
    // Offset: 0x1BBD678
    static int ActualLength(::ArrayW<uint> value);
    // static private System.Int32 ActualLength(System.UInt32[] value, System.Int32 length)
    // Offset: 0x1BBD6E8
    static int ActualLength(::ArrayW<uint> value, int length);
    // static private System.Void Square(System.UInt32* value, System.Int32 valueLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1BBD734
    static void Square(uint* value, int valueLength, uint* bits, int bitsLength);
    // static private System.Void Multiply(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1BBDB6C
    static void Multiply(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.Void SubtractCore(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* core, System.Int32 coreLength)
    // Offset: 0x1BBDAAC
    static void SubtractCore(uint* left, int leftLength, uint* right, int rightLength, uint* core, int coreLength);
  }; // System.Numerics.BigIntegerCalculator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Numerics::BigIntegerCalculator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::AddSelf
// Il2CppName: AddSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::AddSelf)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "AddSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::SubtractSelf
// Il2CppName: SubtractSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::SubtractSelf)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "SubtractSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Compare)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Compare)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Remainder
// Il2CppName: Remainder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Remainder)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Remainder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Divide
// Il2CppName: Divide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Divide)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Divide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Remainder
// Il2CppName: Remainder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Remainder)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Remainder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Divide
// Il2CppName: Divide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Divide)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Divide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::AddDivisor
// Il2CppName: AddDivisor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::AddDivisor)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "AddDivisor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::SubtractDivisor
// Il2CppName: SubtractDivisor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint*, int, uint*, int, uint64_t)>(&System::Numerics::BigIntegerCalculator::SubtractDivisor)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* q = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "SubtractDivisor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, q});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::DivideGuessTooBig
// Il2CppName: DivideGuessTooBig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint64_t, uint, uint, uint)>(&System::Numerics::BigIntegerCalculator::DivideGuessTooBig)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* valHi = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* valLo = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* divHi = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* divLo = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "DivideGuessTooBig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q, valHi, valLo, divHi, divLo});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::CreateCopy)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::LeadingZeros
// Il2CppName: LeadingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Numerics::BigIntegerCalculator::LeadingZeros)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "LeadingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, uint)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<uint>, uint, uint)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, ::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<uint>, ::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::ArrayW<uint>, uint, uint64_t, uint64_t)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value, result});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, uint, uint64_t, uint64_t)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value, result});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(uint, uint, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(uint, ::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Pow)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, power, modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(uint, ::ArrayW<uint>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ::ArrayW<uint>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value, result, temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ::ArrayW<uint>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, modulus, value, result, temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ByRef<::System::Numerics::BigIntegerCalculator::FastReducer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* reducer = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/FastReducer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, reducer, value, result, temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::PowCore
// Il2CppName: PowCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint, ByRef<::System::Numerics::BigIntegerCalculator::FastReducer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::PowCore)> {
  static const MethodInfo* get() {
    static auto* power = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* reducer = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/FastReducer")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "PowCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{power, reducer, value, result, temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::ActualLength
// Il2CppName: ActualLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::ActualLength)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "ActualLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::ActualLength
// Il2CppName: ActualLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint>, int)>(&System::Numerics::BigIntegerCalculator::ActualLength)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "ActualLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, length});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Square
// Il2CppName: Square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Square)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* valueLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, valueLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Multiply)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::SubtractCore
// Il2CppName: SubtractCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::SubtractCore)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* core = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* coreLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "SubtractCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, core, coreLength});
  }
};
