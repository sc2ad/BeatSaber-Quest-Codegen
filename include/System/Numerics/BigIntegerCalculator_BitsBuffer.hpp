// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Numerics.BigIntegerCalculator
#include "System/Numerics/BigIntegerCalculator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Numerics::BigIntegerCalculator::BitsBuffer, "System.Numerics", "BigIntegerCalculator/BitsBuffer");
// Type namespace: System.Numerics
namespace System::Numerics {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct BigIntegerCalculator::BitsBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32[] _bits
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint> bits;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x8
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BitsBuffer
    constexpr BitsBuffer(::ArrayW<uint> bits_ = ::ArrayW<uint>(static_cast<void*>(nullptr)), int length_ = {}) noexcept : bits{bits_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32[] _bits
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn__bits();
    // Get instance field reference: private System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length();
    // public System.Void .ctor(System.Int32 size, System.UInt32 value)
    // Offset: 0xA7AEBC
    BitsBuffer(int size, uint value);
    // public System.Void .ctor(System.Int32 size, System.UInt32[] value)
    // Offset: 0xA7AEC4
    BitsBuffer(int size, ::ArrayW<uint> value);
    // public System.Void MultiplySelf(ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer value, ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0xA7AECC
    void MultiplySelf(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> value, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // public System.Void SquareSelf(ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp)
    // Offset: 0xA7AED4
    void SquareSelf(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp);
    // public System.Void Reduce(ref System.Numerics.BigIntegerCalculator/System.Numerics.FastReducer reducer)
    // Offset: 0xA7AEDC
    void Reduce(ByRef<::System::Numerics::BigIntegerCalculator::FastReducer> reducer);
    // public System.Void Reduce(System.UInt32[] modulus)
    // Offset: 0xA7AF10
    void Reduce(::ArrayW<uint> modulus);
    // public System.UInt32[] GetBits()
    // Offset: 0xA7AF18
    ::ArrayW<uint> GetBits();
    // public System.Int32 GetSize()
    // Offset: 0xA7AF20
    int GetSize();
    // private System.Void Apply(ref System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer temp, System.Int32 maxLength)
    // Offset: 0xA7AF3C
    void Apply(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer> temp, int maxLength);
  }; // System.Numerics.BigIntegerCalculator/System.Numerics.BitsBuffer
  #pragma pack(pop)
  static check_size<sizeof(BigIntegerCalculator::BitsBuffer), 8 + sizeof(int)> __System_Numerics_BigIntegerCalculator_BitsBufferSizeCheck;
  static_assert(sizeof(BigIntegerCalculator::BitsBuffer) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::BitsBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::BitsBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::MultiplySelf
// Il2CppName: MultiplySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Numerics::BigIntegerCalculator::BitsBuffer::*)(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::BitsBuffer::MultiplySelf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "MultiplySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::SquareSelf
// Il2CppName: SquareSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Numerics::BigIntegerCalculator::BitsBuffer::*)(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>)>(&System::Numerics::BigIntegerCalculator::BitsBuffer::SquareSelf)> {
  static const MethodInfo* get() {
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "SquareSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{temp});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::Reduce
// Il2CppName: Reduce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Numerics::BigIntegerCalculator::BitsBuffer::*)(ByRef<::System::Numerics::BigIntegerCalculator::FastReducer>)>(&System::Numerics::BigIntegerCalculator::BitsBuffer::Reduce)> {
  static const MethodInfo* get() {
    static auto* reducer = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/FastReducer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "Reduce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reducer});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::Reduce
// Il2CppName: Reduce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Numerics::BigIntegerCalculator::BitsBuffer::*)(::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::BitsBuffer::Reduce)> {
  static const MethodInfo* get() {
    static auto* modulus = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "Reduce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modulus});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::GetBits
// Il2CppName: GetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (System::Numerics::BigIntegerCalculator::BitsBuffer::*)()>(&System::Numerics::BigIntegerCalculator::BitsBuffer::GetBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "GetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Numerics::BigIntegerCalculator::BitsBuffer::*)()>(&System::Numerics::BigIntegerCalculator::BitsBuffer::GetSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::BitsBuffer::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Numerics::BigIntegerCalculator::BitsBuffer::*)(ByRef<::System::Numerics::BigIntegerCalculator::BitsBuffer>, int)>(&System::Numerics::BigIntegerCalculator::BitsBuffer::Apply)> {
  static const MethodInfo* get() {
    static auto* temp = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigIntegerCalculator/BitsBuffer")->this_arg;
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator::BitsBuffer), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{temp, maxLength});
  }
};
