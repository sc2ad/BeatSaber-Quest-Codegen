// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Pinnable`1<T>
  template<typename T>
  class Pinnable_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: ReadOnlySpan`1<T>
  template<typename T>
  struct ReadOnlySpan_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::ReadOnlySpan_1, "System", "ReadOnlySpan`1");
// Type namespace: System
namespace System {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.ReadOnlySpan`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: 8EE7EC
  // [ObsoleteAttribute] Offset: 8EE7EC
  // [IsByRefLikeAttribute] Offset: 8EE7EC
  // [DebuggerTypeProxyAttribute] Offset: 8EE7EC
  // [DebuggerDisplayAttribute] Offset: 8EE7EC
  // [DefaultMemberAttribute] Offset: 8EE7EC
  template<typename T>
  struct ReadOnlySpan_1/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Pinnable`1<T> _pinnable
    // Size: 0x8
    // Offset: 0x0
    ::System::Pinnable_1<T>* pinnable;
    // Field size check
    static_assert(sizeof(::System::Pinnable_1<T>*) == 0x8);
    // private readonly System.IntPtr _byteOffset
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr byteOffset;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private readonly System.Int32 _length
    // Size: 0x4
    // Offset: 0x0
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ReadOnlySpan_1
    constexpr ReadOnlySpan_1(::System::Pinnable_1<T>* pinnable_ = {}, ::System::IntPtr byteOffset_ = {}, int length_ = {}) noexcept : pinnable{pinnable_}, byteOffset{byteOffset_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Pinnable`1<T> _pinnable
    [[deprecated("Use field access instead!")]] ::System::Pinnable_1<T>*& dyn__pinnable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::dyn__pinnable");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pinnable"))->offset;
      return *reinterpret_cast<::System::Pinnable_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.IntPtr _byteOffset
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn__byteOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::dyn__byteOffset");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_byteOffset"))->offset;
      return *reinterpret_cast<::System::IntPtr*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::dyn__length");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_length"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_Length");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void .ctor(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ReadOnlySpan_1(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ReadOnlySpan_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
  }; // System.ReadOnlySpan`1
  // Could not write size check! Type: System.ReadOnlySpan`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
