// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.IO
namespace System::IO {
  // Forward declaring type: FileShare
  struct FileShare;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::FileShare, "System.IO", "FileShare");
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.FileShare
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 103A5AC
  // [FlagsAttribute] Offset: FFFFFFFF
  struct FileShare/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FileShare
    constexpr FileShare(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.IO.FileShare None
    static constexpr const int None = 0;
    // Get static field: static public System.IO.FileShare None
    static ::System::IO::FileShare _get_None();
    // Set static field: static public System.IO.FileShare None
    static void _set_None(::System::IO::FileShare value);
    // static field const value: static public System.IO.FileShare Read
    static constexpr const int Read = 1;
    // Get static field: static public System.IO.FileShare Read
    static ::System::IO::FileShare _get_Read();
    // Set static field: static public System.IO.FileShare Read
    static void _set_Read(::System::IO::FileShare value);
    // static field const value: static public System.IO.FileShare Write
    static constexpr const int Write = 2;
    // Get static field: static public System.IO.FileShare Write
    static ::System::IO::FileShare _get_Write();
    // Set static field: static public System.IO.FileShare Write
    static void _set_Write(::System::IO::FileShare value);
    // static field const value: static public System.IO.FileShare ReadWrite
    static constexpr const int ReadWrite = 3;
    // Get static field: static public System.IO.FileShare ReadWrite
    static ::System::IO::FileShare _get_ReadWrite();
    // Set static field: static public System.IO.FileShare ReadWrite
    static void _set_ReadWrite(::System::IO::FileShare value);
    // static field const value: static public System.IO.FileShare Delete
    static constexpr const int Delete = 4;
    // Get static field: static public System.IO.FileShare Delete
    static ::System::IO::FileShare _get_Delete();
    // Set static field: static public System.IO.FileShare Delete
    static void _set_Delete(::System::IO::FileShare value);
    // static field const value: static public System.IO.FileShare Inheritable
    static constexpr const int Inheritable = 16;
    // Get static field: static public System.IO.FileShare Inheritable
    static ::System::IO::FileShare _get_Inheritable();
    // Set static field: static public System.IO.FileShare Inheritable
    static void _set_Inheritable(::System::IO::FileShare value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.IO.FileShare
  #pragma pack(pop)
  static check_size<sizeof(FileShare), 0 + sizeof(int)> __System_IO_FileShareSizeCheck;
  static_assert(sizeof(FileShare) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
