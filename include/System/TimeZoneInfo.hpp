// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeType
  class TimeType;
  // Forward declaring type: DateTimeKind
  struct DateTimeKind;
  // Forward declaring type: TimeZoneInfoOptions
  struct TimeZoneInfoOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Microsoft::Win32
namespace Microsoft::Win32 {
  // Forward declaring type: RegistryKey
  class RegistryKey;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: TimeZoneInfo
  class TimeZoneInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::TimeZoneInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::TimeZoneInfo*, "System", "TimeZoneInfo");
// Type namespace: System
namespace System {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.TimeZoneInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [TypeForwardedFromAttribute] Offset: 1038954
  class TimeZoneInfo : public ::Il2CppObject/*, public ::System::IEquatable_1<::System::TimeZoneInfo*>, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::TimeZoneInfo::AdjustmentRule
    class AdjustmentRule;
    // Nested type: ::System::TimeZoneInfo::TransitionTime
    struct TransitionTime;
    // Nested type: ::System::TimeZoneInfo::SYSTEMTIME
    struct SYSTEMTIME;
    // Nested type: ::System::TimeZoneInfo::TIME_ZONE_INFORMATION
    struct TIME_ZONE_INFORMATION;
    // Nested type: ::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION
    struct DYNAMIC_TIME_ZONE_INFORMATION;
    // Nested type: ::System::TimeZoneInfo::$$c
    class $$c;
    public:
    // private System.TimeSpan baseUtcOffset
    // Size: 0x8
    // Offset: 0x10
    ::System::TimeSpan baseUtcOffset;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private System.String daylightDisplayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW daylightDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String displayName
    // Size: 0x8
    // Offset: 0x20
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String id
    // Size: 0x8
    // Offset: 0x28
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.DateTime,System.TimeType>> transitions
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::System::DateTime, ::System::TimeType*>>* transitions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::System::DateTime, ::System::TimeType*>>*) == 0x8);
    // private System.String standardDisplayName
    // Size: 0x8
    // Offset: 0x38
    ::StringW standardDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean supportsDaylightSavingTime
    // Size: 0x1
    // Offset: 0x40
    bool supportsDaylightSavingTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportsDaylightSavingTime and: adjustmentRules
    char __padding6[0x7] = {};
    // private System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::TimeZoneInfo*>
    operator ::System::IEquatable_1<::System::TimeZoneInfo*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::TimeZoneInfo*>*>(this);
    }
    // Creating interface conversion operator: i_TimeZoneInfo
    inline ::System::IEquatable_1<::System::TimeZoneInfo*>* i_TimeZoneInfo() noexcept {
      return reinterpret_cast<::System::IEquatable_1<::System::TimeZoneInfo*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Get static field: static private System.TimeZoneInfo local
    static ::System::TimeZoneInfo* _get_local();
    // Set static field: static private System.TimeZoneInfo local
    static void _set_local(::System::TimeZoneInfo* value);
    // Get static field: static private System.Boolean readlinkNotFound
    static bool _get_readlinkNotFound();
    // Set static field: static private System.Boolean readlinkNotFound
    static void _set_readlinkNotFound(bool value);
    // Get static field: static private System.TimeZoneInfo utc
    static ::System::TimeZoneInfo* _get_utc();
    // Set static field: static private System.TimeZoneInfo utc
    static void _set_utc(::System::TimeZoneInfo* value);
    // Get static field: static private System.String timeZoneDirectory
    static ::StringW _get_timeZoneDirectory();
    // Set static field: static private System.String timeZoneDirectory
    static void _set_timeZoneDirectory(::StringW value);
    // Get static field: static private Microsoft.Win32.RegistryKey timeZoneKey
    static ::Microsoft::Win32::RegistryKey* _get_timeZoneKey();
    // Set static field: static private Microsoft.Win32.RegistryKey timeZoneKey
    static void _set_timeZoneKey(::Microsoft::Win32::RegistryKey* value);
    // Get static field: static private Microsoft.Win32.RegistryKey localZoneKey
    static ::Microsoft::Win32::RegistryKey* _get_localZoneKey();
    // Set static field: static private Microsoft.Win32.RegistryKey localZoneKey
    static void _set_localZoneKey(::Microsoft::Win32::RegistryKey* value);
    // Get static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<System.TimeZoneInfo> systemTimeZones
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::TimeZoneInfo*>* _get_systemTimeZones();
    // Set static field: static private System.Collections.ObjectModel.ReadOnlyCollection`1<System.TimeZoneInfo> systemTimeZones
    static void _set_systemTimeZones(::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::TimeZoneInfo*>* value);
    // Get instance field reference: private System.TimeSpan baseUtcOffset
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_baseUtcOffset();
    // Get instance field reference: private System.String daylightDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_daylightDisplayName();
    // Get instance field reference: private System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: private System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.DateTime,System.TimeType>> transitions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::System::DateTime, ::System::TimeType*>>*& dyn_transitions();
    // Get instance field reference: private System.String standardDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_standardDisplayName();
    // Get instance field reference: private System.Boolean supportsDaylightSavingTime
    [[deprecated("Use field access instead!")]] bool& dyn_supportsDaylightSavingTime();
    // Get instance field reference: private System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>& dyn_adjustmentRules();
    // public System.TimeSpan get_BaseUtcOffset()
    // Offset: 0x1D3F150
    ::System::TimeSpan get_BaseUtcOffset();
    // public System.String get_DisplayName()
    // Offset: 0x1D3F158
    ::StringW get_DisplayName();
    // public System.String get_Id()
    // Offset: 0x1D3F160
    ::StringW get_Id();
    // static public System.TimeZoneInfo get_Local()
    // Offset: 0x1D3F168
    static ::System::TimeZoneInfo* get_Local();
    // public System.Boolean get_SupportsDaylightSavingTime()
    // Offset: 0x1D40C50
    bool get_SupportsDaylightSavingTime();
    // static public System.TimeZoneInfo get_Utc()
    // Offset: 0x1D3EA94
    static ::System::TimeZoneInfo* get_Utc();
    // static private System.String get_TimeZoneDirectory()
    // Offset: 0x1D3FB74
    static ::StringW get_TimeZoneDirectory();
    // static private System.Boolean get_IsWindows()
    // Offset: 0x1D3FBE0
    static bool get_IsWindows();
    // static private Microsoft.Win32.RegistryKey get_TimeZoneKey()
    // Offset: 0x1D40B20
    static ::Microsoft::Win32::RegistryKey* get_TimeZoneKey();
    // static private Microsoft.Win32.RegistryKey get_LocalZoneKey()
    // Offset: 0x1D3FC2C
    static ::Microsoft::Win32::RegistryKey* get_LocalZoneKey();
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1D43D80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>(info, context)));
    }
    // private System.Void .ctor(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName, System.String daylightDisplayName, System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules, System.Boolean disableDaylightSavingTime)
    // Offset: 0x1D3E4D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName, ::StringW daylightDisplayName, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules, bool disableDaylightSavingTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>(id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)));
    }
    // static System.Boolean UtcOffsetOutOfRange(System.TimeSpan offset)
    // Offset: 0x1D3C77C
    static bool UtcOffsetOutOfRange(::System::TimeSpan offset);
    // static private System.Collections.Generic.List`1<System.TimeZoneInfo/System.AdjustmentRule> CreateAdjustmentRule(System.Int32 year, out System.Int64[] data, out System.String[] names, System.String standardNameCurrentYear, System.String daylightNameCurrentYear)
    // Offset: 0x1D3C7AC
    static ::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* CreateAdjustmentRule(int year, ByRef<::ArrayW<int64_t>> data, ByRef<::ArrayW<::StringW>> names, ::StringW standardNameCurrentYear, ::StringW daylightNameCurrentYear);
    // static private System.TimeZoneInfo CreateLocalUnity()
    // Offset: 0x1D3D060
    static ::System::TimeZoneInfo* CreateLocalUnity();
    // static System.UInt32 EnumDynamicTimeZoneInformation(System.UInt32 dwIndex, out System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation)
    // Offset: 0x1D3D4F4
    static uint EnumDynamicTimeZoneInformation(uint dwIndex, ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation);
    // static System.UInt32 GetDynamicTimeZoneInformation(out System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation)
    // Offset: 0x1D3D5D0
    static uint GetDynamicTimeZoneInformation(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> pTimeZoneInformation);
    // static System.UInt32 GetDynamicTimeZoneInformationWin32(out System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation)
    // Offset: 0x1D3D69C
    static uint GetDynamicTimeZoneInformationWin32(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> pTimeZoneInformation);
    // static System.UInt32 GetDynamicTimeZoneInformationEffectiveYears(ref System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out System.UInt32 FirstYear, out System.UInt32 LastYear)
    // Offset: 0x1D3D768
    static uint GetDynamicTimeZoneInformationEffectiveYears(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> lpTimeZoneInformation, ByRef<uint> FirstYear, ByRef<uint> LastYear);
    // static System.Boolean GetTimeZoneInformationForYear(System.UInt16 wYear, ref System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out System.TimeZoneInfo/System.TIME_ZONE_INFORMATION ptzi)
    // Offset: 0x1D3D884
    static bool GetTimeZoneInformationForYear(uint16_t wYear, ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> pdtzi, ByRef<::System::TimeZoneInfo::TIME_ZONE_INFORMATION> ptzi);
    // static System.TimeZoneInfo/System.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, System.DateTime startDate, System.DateTime endDate, System.Int32 defaultBaseUtcOffset)
    // Offset: 0x1D3DA14
    static ::System::TimeZoneInfo::AdjustmentRule* CreateAdjustmentRuleFromTimeZoneInformation(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION> timeZoneInformation, ::System::DateTime startDate, ::System::DateTime endDate, int defaultBaseUtcOffset);
    // static private System.Boolean TransitionTimeFromTimeZoneInformation(System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out System.TimeZoneInfo/System.TransitionTime transitionTime, System.Boolean readStartDate)
    // Offset: 0x1D3DD08
    static bool TransitionTimeFromTimeZoneInformation(::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, ByRef<::System::TimeZoneInfo::TransitionTime> transitionTime, bool readStartDate);
    // static System.TimeZoneInfo TryCreateTimeZone(System.TimeZoneInfo/System.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation)
    // Offset: 0x1D3E040
    static ::System::TimeZoneInfo* TryCreateTimeZone(::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation);
    // static System.TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback()
    // Offset: 0x1D3E988
    static ::System::TimeZoneInfo* GetLocalTimeZoneInfoWinRTFallback();
    // static System.String GetLocalTimeZoneKeyNameWin32Fallback()
    // Offset: 0x1D3EB24
    static ::StringW GetLocalTimeZoneKeyNameWin32Fallback();
    // static System.TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(System.String id)
    // Offset: 0x1D3EC34
    static ::System::TimeZoneInfo* FindSystemTimeZoneByIdWinRTFallback(::StringW id);
    // static System.Collections.Generic.List`1<System.TimeZoneInfo> GetSystemTimeZonesWinRTFallback()
    // Offset: 0x1D3EFA4
    static ::System::Collections::Generic::List_1<::System::TimeZoneInfo*>* GetSystemTimeZonesWinRTFallback();
    // static private System.Int32 readlink(System.String path, System.Byte[] buffer, System.Int32 buflen)
    // Offset: 0x1D3F6D4
    static int readlink(::StringW path, ::ArrayW<uint8_t> buffer, int buflen);
    // static private System.String readlink(System.String path)
    // Offset: 0x1D3F78C
    static ::StringW readlink(::StringW path);
    // static private System.Boolean TryGetNameFromPath(System.String path, out System.String name)
    // Offset: 0x1D3F93C
    static bool TryGetNameFromPath(::StringW path, ByRef<::StringW> name);
    // static private System.TimeZoneInfo CreateLocal()
    // Offset: 0x1D3F220
    static ::System::TimeZoneInfo* CreateLocal();
    // static private System.TimeZoneInfo FindSystemTimeZoneByIdCore(System.String id)
    // Offset: 0x1D4019C
    static ::System::TimeZoneInfo* FindSystemTimeZoneByIdCore(::StringW id);
    // static private System.Void GetSystemTimeZonesCore(System.Collections.Generic.List`1<System.TimeZoneInfo> systemTimeZones)
    // Offset: 0x1D40220
    static void GetSystemTimeZonesCore(::System::Collections::Generic::List_1<::System::TimeZoneInfo*>* systemTimeZones);
    // static private System.String TrimSpecial(System.String str)
    // Offset: 0x1D3FD5C
    static ::StringW TrimSpecial(::StringW str);
    // static private System.Boolean TryAddTicks(System.DateTime date, System.Int64 ticks, out System.DateTime result, System.DateTimeKind kind)
    // Offset: 0x1D40C68
    static bool TryAddTicks(::System::DateTime date, int64_t ticks, ByRef<::System::DateTime> result, ::System::DateTimeKind kind);
    // static public System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone)
    // Offset: 0x1D40DE4
    static ::System::DateTime ConvertTime(::System::DateTime dateTime, ::System::TimeZoneInfo* sourceTimeZone, ::System::TimeZoneInfo* destinationTimeZone);
    // private System.DateTime ConvertTimeFromUtc(System.DateTime dateTime)
    // Offset: 0x1D411E4
    ::System::DateTime ConvertTimeFromUtc(::System::DateTime dateTime);
    // static public System.DateTime ConvertTimeFromUtc(System.DateTime dateTime, System.TimeZoneInfo destinationTimeZone)
    // Offset: 0x1D41150
    static ::System::DateTime ConvertTimeFromUtc(::System::DateTime dateTime, ::System::TimeZoneInfo* destinationTimeZone);
    // static System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x1D41370
    static ::System::DateTime ConvertTimeToUtc(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // static public System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone)
    // Offset: 0x1D41148
    static ::System::DateTime ConvertTimeToUtc(::System::DateTime dateTime, ::System::TimeZoneInfo* sourceTimeZone);
    // static private System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfoOptions flags)
    // Offset: 0x1D413A0
    static ::System::DateTime ConvertTimeToUtc(::System::DateTime dateTime, ::System::TimeZoneInfo* sourceTimeZone, ::System::TimeZoneInfoOptions flags);
    // static System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, out System.Boolean isAmbiguousLocalDst)
    // Offset: 0x1D41624
    static ::System::TimeSpan GetDateTimeNowUtcOffsetFromUtc(::System::DateTime time, ByRef<bool> isAmbiguousLocalDst);
    // static public System.TimeZoneInfo CreateCustomTimeZone(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName)
    // Offset: 0x1D40C58
    static ::System::TimeZoneInfo* CreateCustomTimeZone(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName);
    // static public System.TimeZoneInfo CreateCustomTimeZone(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName, System.String daylightDisplayName, System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules)
    // Offset: 0x1D416D0
    static ::System::TimeZoneInfo* CreateCustomTimeZone(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName, ::StringW daylightDisplayName, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules);
    // static public System.TimeZoneInfo CreateCustomTimeZone(System.String id, System.TimeSpan baseUtcOffset, System.String displayName, System.String standardDisplayName, System.String daylightDisplayName, System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules, System.Boolean disableDaylightSavingTime)
    // Offset: 0x1D3D444
    static ::System::TimeZoneInfo* CreateCustomTimeZone(::StringW id, ::System::TimeSpan baseUtcOffset, ::StringW displayName, ::StringW standardDisplayName, ::StringW daylightDisplayName, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules, bool disableDaylightSavingTime);
    // public System.Boolean Equals(System.TimeZoneInfo other)
    // Offset: 0x1D4174C
    bool Equals(::System::TimeZoneInfo* other);
    // static public System.TimeZoneInfo FindSystemTimeZoneById(System.String id)
    // Offset: 0x1D3FED0
    static ::System::TimeZoneInfo* FindSystemTimeZoneById(::StringW id);
    // static private System.TimeZoneInfo FindSystemTimeZoneByFileName(System.String id, System.String filepath)
    // Offset: 0x1D4001C
    static ::System::TimeZoneInfo* FindSystemTimeZoneByFileName(::StringW id, ::StringW filepath);
    // static private System.TimeZoneInfo FromRegistryKey(System.String id, Microsoft.Win32.RegistryKey key)
    // Offset: 0x1D41920
    static ::System::TimeZoneInfo* FromRegistryKey(::StringW id, ::Microsoft::Win32::RegistryKey* key);
    // static private System.Void ParseRegTzi(System.Collections.Generic.List`1<System.TimeZoneInfo/System.AdjustmentRule> adjustmentRules, System.Int32 start_year, System.Int32 end_year, System.Byte[] buffer)
    // Offset: 0x1D41E48
    static void ParseRegTzi(::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* adjustmentRules, int start_year, int end_year, ::ArrayW<uint8_t> buffer);
    // public System.TimeZoneInfo/System.AdjustmentRule[] GetAdjustmentRules()
    // Offset: 0x1D42414
    ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> GetAdjustmentRules();
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1D42550
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<System.TimeZoneInfo> GetSystemTimeZones()
    // Offset: 0x1D3EED0
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::TimeZoneInfo*>* GetSystemTimeZones();
    // public System.TimeSpan GetUtcOffset(System.DateTime dateTime)
    // Offset: 0x1D41348
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime);
    // private System.TimeSpan GetUtcOffset(System.DateTime dateTime, out System.Boolean isDST, System.Boolean forOffset)
    // Offset: 0x1D41544
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime, ByRef<bool> isDST, bool forOffset);
    // static private System.TimeSpan GetUtcOffsetHelper(System.DateTime dateTime, System.TimeZoneInfo tz, out System.Boolean isDST, System.Boolean forOffset)
    // Offset: 0x1D426BC
    static ::System::TimeSpan GetUtcOffsetHelper(::System::DateTime dateTime, ::System::TimeZoneInfo* tz, ByRef<bool> isDST, bool forOffset);
    // public System.Boolean HasSameRules(System.TimeZoneInfo other)
    // Offset: 0x1D4179C
    bool HasSameRules(::System::TimeZoneInfo* other);
    // public System.Boolean IsAmbiguousTime(System.DateTime dateTime)
    // Offset: 0x1D43120
    bool IsAmbiguousTime(::System::DateTime dateTime);
    // private System.Boolean IsAmbiguousLocalDstFromUtc(System.DateTime dateTime)
    // Offset: 0x1D434DC
    bool IsAmbiguousLocalDstFromUtc(::System::DateTime dateTime);
    // private System.Boolean IsInDST(System.TimeZoneInfo/System.AdjustmentRule rule, System.DateTime dateTime)
    // Offset: 0x1D42EDC
    bool IsInDST(::System::TimeZoneInfo::AdjustmentRule* rule, ::System::DateTime dateTime);
    // private System.Boolean IsInDSTForYear(System.TimeZoneInfo/System.AdjustmentRule rule, System.DateTime dateTime, System.Int32 year)
    // Offset: 0x1D43638
    bool IsInDSTForYear(::System::TimeZoneInfo::AdjustmentRule* rule, ::System::DateTime dateTime, int year);
    // public System.Boolean IsInvalidTime(System.DateTime dateTime)
    // Offset: 0x1D40FF4
    bool IsInvalidTime(::System::DateTime dateTime);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x1D4384C
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // static private System.Void Validate(System.String id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo/System.AdjustmentRule[] adjustmentRules)
    // Offset: 0x1D43948
    static void Validate(::StringW id, ::System::TimeSpan baseUtcOffset, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> adjustmentRules);
    // private System.TimeZoneInfo/System.AdjustmentRule GetApplicableRule(System.DateTime dateTime)
    // Offset: 0x1D42D20
    ::System::TimeZoneInfo::AdjustmentRule* GetApplicableRule(::System::DateTime dateTime);
    // private System.Boolean TryGetTransitionOffset(System.DateTime dateTime, out System.TimeSpan offset, out System.Boolean isDst, System.Boolean forOffset)
    // Offset: 0x1D42940
    bool TryGetTransitionOffset(::System::DateTime dateTime, ByRef<::System::TimeSpan> offset, ByRef<bool> isDst, bool forOffset);
    // static private System.DateTime TransitionPoint(System.TimeZoneInfo/System.TransitionTime transition, System.Int32 year)
    // Offset: 0x1D4330C
    static ::System::DateTime TransitionPoint(::System::TimeZoneInfo::TransitionTime transition, int year);
    // static private System.TimeZoneInfo/System.AdjustmentRule[] ValidateRules(System.Collections.Generic.List`1<System.TimeZoneInfo/System.AdjustmentRule> adjustmentRules)
    // Offset: 0x1D422D0
    static ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> ValidateRules(::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* adjustmentRules);
    // static private System.TimeZoneInfo BuildFromStream(System.String id, System.IO.Stream stream)
    // Offset: 0x1D41C94
    static ::System::TimeZoneInfo* BuildFromStream(::StringW id, ::System::IO::Stream* stream);
    // static private System.Boolean ValidTZFile(System.Byte[] buffer, System.Int32 length)
    // Offset: 0x1D44074
    static bool ValidTZFile(::ArrayW<uint8_t> buffer, int length);
    // static private System.Int32 SwapInt32(System.Int32 i)
    // Offset: 0x1D44B28
    static int SwapInt32(int i);
    // static private System.Int32 ReadBigEndianInt32(System.Byte[] buffer, System.Int32 start)
    // Offset: 0x1D44B30
    static int ReadBigEndianInt32(::ArrayW<uint8_t> buffer, int start);
    // static private System.TimeZoneInfo ParseTZBuffer(System.String id, System.Byte[] buffer, System.Int32 length)
    // Offset: 0x1D44164
    static ::System::TimeZoneInfo* ParseTZBuffer(::StringW id, ::ArrayW<uint8_t> buffer, int length);
    // static private System.Collections.Generic.Dictionary`2<System.Int32,System.String> ParseAbbreviations(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1D44BC4
    static ::System::Collections::Generic::Dictionary_2<int, ::StringW>* ParseAbbreviations(::ArrayW<uint8_t> buffer, int index, int count);
    // static private System.Collections.Generic.Dictionary`2<System.Int32,System.TimeType> ParseTimesTypes(System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Collections.Generic.Dictionary`2<System.Int32,System.String> abbreviations)
    // Offset: 0x1D44D94
    static ::System::Collections::Generic::Dictionary_2<int, ::System::TimeType*>* ParseTimesTypes(::ArrayW<uint8_t> buffer, int index, int count, ::System::Collections::Generic::Dictionary_2<int, ::StringW>* abbreviations);
    // static private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.DateTime,System.TimeType>> ParseTransitions(System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Collections.Generic.Dictionary`2<System.Int32,System.TimeType> time_types)
    // Offset: 0x1D44F2C
    static ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::System::DateTime, ::System::TimeType*>>* ParseTransitions(::ArrayW<uint8_t> buffer, int index, int count, ::System::Collections::Generic::Dictionary_2<int, ::System::TimeType*>* time_types);
    // static private System.DateTime DateTimeFromUnixTime(System.Int64 unix_time)
    // Offset: 0x1D450C0
    static ::System::DateTime DateTimeFromUnixTime(int64_t unix_time);
    // static System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x1D45108
    static ::System::TimeSpan GetLocalUtcOffset(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags)
    // Offset: 0x1D45144
    ::System::TimeSpan GetUtcOffset(::System::DateTime dateTime, ::System::TimeZoneInfoOptions flags);
    // static System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, out System.Boolean isDaylightSavings, out System.Boolean isAmbiguousLocalDst)
    // Offset: 0x1D41668
    static ::System::TimeSpan GetUtcOffsetFromUtc(::System::DateTime time, ::System::TimeZoneInfo* zone, ByRef<bool> isDaylightSavings, ByRef<bool> isAmbiguousLocalDst);
    // System.Void .ctor()
    // Offset: 0x1D4516C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeZoneInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TimeZoneInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeZoneInfo*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1D416D8
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1D424AC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1D43D78
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.TimeZoneInfo
  #pragma pack(pop)
  static check_size<sizeof(TimeZoneInfo), 72 + sizeof(::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>)> __System_TimeZoneInfoSizeCheck;
  static_assert(sizeof(TimeZoneInfo) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::TimeZoneInfo::get_BaseUtcOffset
// Il2CppName: get_BaseUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_BaseUtcOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_BaseUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_Local
// Il2CppName: get_Local
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::get_Local)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_Local", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_SupportsDaylightSavingTime
// Il2CppName: get_SupportsDaylightSavingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::get_SupportsDaylightSavingTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_SupportsDaylightSavingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_Utc
// Il2CppName: get_Utc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::get_Utc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_Utc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_TimeZoneDirectory
// Il2CppName: get_TimeZoneDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::TimeZoneInfo::get_TimeZoneDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_TimeZoneDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_IsWindows
// Il2CppName: get_IsWindows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::TimeZoneInfo::get_IsWindows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_IsWindows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_TimeZoneKey
// Il2CppName: get_TimeZoneKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::RegistryKey* (*)()>(&System::TimeZoneInfo::get_TimeZoneKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_TimeZoneKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::get_LocalZoneKey
// Il2CppName: get_LocalZoneKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::RegistryKey* (*)()>(&System::TimeZoneInfo::get_LocalZoneKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "get_LocalZoneKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::UtcOffsetOutOfRange
// Il2CppName: UtcOffsetOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::TimeSpan)>(&System::TimeZoneInfo::UtcOffsetOutOfRange)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "UtcOffsetOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateAdjustmentRule
// Il2CppName: CreateAdjustmentRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>* (*)(int, ByRef<::ArrayW<int64_t>>, ByRef<::ArrayW<::StringW>>, ::StringW, ::StringW)>(&System::TimeZoneInfo::CreateAdjustmentRule)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->this_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->this_arg;
    static auto* standardNameCurrentYear = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* daylightNameCurrentYear = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateAdjustmentRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, data, names, standardNameCurrentYear, daylightNameCurrentYear});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateLocalUnity
// Il2CppName: CreateLocalUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::CreateLocalUnity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateLocalUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::EnumDynamicTimeZoneInformation
// Il2CppName: EnumDynamicTimeZoneInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint, ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>)>(&System::TimeZoneInfo::EnumDynamicTimeZoneInformation)> {
  static const MethodInfo* get() {
    static auto* dwIndex = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* lpTimeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "EnumDynamicTimeZoneInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwIndex, lpTimeZoneInformation});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDynamicTimeZoneInformation
// Il2CppName: GetDynamicTimeZoneInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>)>(&System::TimeZoneInfo::GetDynamicTimeZoneInformation)> {
  static const MethodInfo* get() {
    static auto* pTimeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDynamicTimeZoneInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pTimeZoneInformation});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDynamicTimeZoneInformationWin32
// Il2CppName: GetDynamicTimeZoneInformationWin32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>)>(&System::TimeZoneInfo::GetDynamicTimeZoneInformationWin32)> {
  static const MethodInfo* get() {
    static auto* pTimeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDynamicTimeZoneInformationWin32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pTimeZoneInformation});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDynamicTimeZoneInformationEffectiveYears
// Il2CppName: GetDynamicTimeZoneInformationEffectiveYears
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>, ByRef<uint>, ByRef<uint>)>(&System::TimeZoneInfo::GetDynamicTimeZoneInformationEffectiveYears)> {
  static const MethodInfo* get() {
    static auto* lpTimeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    static auto* FirstYear = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* LastYear = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDynamicTimeZoneInformationEffectiveYears", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lpTimeZoneInformation, FirstYear, LastYear});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetTimeZoneInformationForYear
// Il2CppName: GetTimeZoneInformationForYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint16_t, ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>, ByRef<::System::TimeZoneInfo::TIME_ZONE_INFORMATION>)>(&System::TimeZoneInfo::GetTimeZoneInformationForYear)> {
  static const MethodInfo* get() {
    static auto* wYear = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* pdtzi = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    static auto* ptzi = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TIME_ZONE_INFORMATION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetTimeZoneInformationForYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wYear, pdtzi, ptzi});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateAdjustmentRuleFromTimeZoneInformation
// Il2CppName: CreateAdjustmentRuleFromTimeZoneInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (*)(ByRef<::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION>, ::System::DateTime, ::System::DateTime, int)>(&System::TimeZoneInfo::CreateAdjustmentRuleFromTimeZoneInformation)> {
  static const MethodInfo* get() {
    static auto* timeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->this_arg;
    static auto* startDate = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* endDate = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* defaultBaseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateAdjustmentRuleFromTimeZoneInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeZoneInformation, startDate, endDate, defaultBaseUtcOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TransitionTimeFromTimeZoneInformation
// Il2CppName: TransitionTimeFromTimeZoneInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION, ByRef<::System::TimeZoneInfo::TransitionTime>, bool)>(&System::TimeZoneInfo::TransitionTimeFromTimeZoneInformation)> {
  static const MethodInfo* get() {
    static auto* timeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->byval_arg;
    static auto* transitionTime = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TransitionTime")->this_arg;
    static auto* readStartDate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TransitionTimeFromTimeZoneInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeZoneInformation, transitionTime, readStartDate});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryCreateTimeZone
// Il2CppName: TryCreateTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION)>(&System::TimeZoneInfo::TryCreateTimeZone)> {
  static const MethodInfo* get() {
    static auto* timeZoneInformation = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/DYNAMIC_TIME_ZONE_INFORMATION")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryCreateTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeZoneInformation});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalTimeZoneInfoWinRTFallback
// Il2CppName: GetLocalTimeZoneInfoWinRTFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::GetLocalTimeZoneInfoWinRTFallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalTimeZoneInfoWinRTFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalTimeZoneKeyNameWin32Fallback
// Il2CppName: GetLocalTimeZoneKeyNameWin32Fallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::TimeZoneInfo::GetLocalTimeZoneKeyNameWin32Fallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalTimeZoneKeyNameWin32Fallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindSystemTimeZoneByIdWinRTFallback
// Il2CppName: FindSystemTimeZoneByIdWinRTFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW)>(&System::TimeZoneInfo::FindSystemTimeZoneByIdWinRTFallback)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindSystemTimeZoneByIdWinRTFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetSystemTimeZonesWinRTFallback
// Il2CppName: GetSystemTimeZonesWinRTFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::TimeZoneInfo*>* (*)()>(&System::TimeZoneInfo::GetSystemTimeZonesWinRTFallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetSystemTimeZonesWinRTFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::readlink
// Il2CppName: readlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::readlink)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* buflen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "readlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, buffer, buflen});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::readlink
// Il2CppName: readlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::TimeZoneInfo::readlink)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "readlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryGetNameFromPath
// Il2CppName: TryGetNameFromPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>)>(&System::TimeZoneInfo::TryGetNameFromPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryGetNameFromPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, name});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateLocal
// Il2CppName: CreateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)()>(&System::TimeZoneInfo::CreateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindSystemTimeZoneByIdCore
// Il2CppName: FindSystemTimeZoneByIdCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW)>(&System::TimeZoneInfo::FindSystemTimeZoneByIdCore)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindSystemTimeZoneByIdCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetSystemTimeZonesCore
// Il2CppName: GetSystemTimeZonesCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::TimeZoneInfo*>*)>(&System::TimeZoneInfo::GetSystemTimeZonesCore)> {
  static const MethodInfo* get() {
    static auto* systemTimeZones = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetSystemTimeZonesCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{systemTimeZones});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TrimSpecial
// Il2CppName: TrimSpecial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::TimeZoneInfo::TrimSpecial)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TrimSpecial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryAddTicks
// Il2CppName: TryAddTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::DateTime, int64_t, ByRef<::System::DateTime>, ::System::DateTimeKind)>(&System::TimeZoneInfo::TryAddTicks)> {
  static const MethodInfo* get() {
    static auto* date = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryAddTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{date, ticks, result, kind});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTime
// Il2CppName: ConvertTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*, ::System::TimeZoneInfo*)>(&System::TimeZoneInfo::ConvertTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* sourceTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* destinationTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, sourceTimeZone, destinationTimeZone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeFromUtc
// Il2CppName: ConvertTimeFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::ConvertTimeFromUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeFromUtc
// Il2CppName: ConvertTimeFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*)>(&System::TimeZoneInfo::ConvertTimeFromUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* destinationTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, destinationTimeZone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeToUtc
// Il2CppName: ConvertTimeToUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::ConvertTimeToUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeToUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeToUtc
// Il2CppName: ConvertTimeToUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*)>(&System::TimeZoneInfo::ConvertTimeToUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* sourceTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeToUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, sourceTimeZone});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ConvertTimeToUtc
// Il2CppName: ConvertTimeToUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::System::TimeZoneInfo*, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::ConvertTimeToUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* sourceTimeZone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ConvertTimeToUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, sourceTimeZone, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetDateTimeNowUtcOffsetFromUtc
// Il2CppName: GetDateTimeNowUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ByRef<bool>)>(&System::TimeZoneInfo::GetDateTimeNowUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetDateTimeNowUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, isAmbiguousLocalDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateCustomTimeZone
// Il2CppName: CreateCustomTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW)>(&System::TimeZoneInfo::CreateCustomTimeZone)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateCustomTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, displayName, standardDisplayName});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateCustomTimeZone
// Il2CppName: CreateCustomTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>)>(&System::TimeZoneInfo::CreateCustomTimeZone)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* daylightDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* adjustmentRules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateCustomTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::CreateCustomTimeZone
// Il2CppName: CreateCustomTimeZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>, bool)>(&System::TimeZoneInfo::CreateCustomTimeZone)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standardDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* daylightDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* adjustmentRules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->byval_arg;
    static auto* disableDaylightSavingTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "CreateCustomTimeZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo*)>(&System::TimeZoneInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindSystemTimeZoneById
// Il2CppName: FindSystemTimeZoneById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW)>(&System::TimeZoneInfo::FindSystemTimeZoneById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindSystemTimeZoneById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FindSystemTimeZoneByFileName
// Il2CppName: FindSystemTimeZoneByFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::StringW)>(&System::TimeZoneInfo::FindSystemTimeZoneByFileName)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filepath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FindSystemTimeZoneByFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, filepath});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::FromRegistryKey
// Il2CppName: FromRegistryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::Microsoft::Win32::RegistryKey*)>(&System::TimeZoneInfo::FromRegistryKey)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("Microsoft.Win32", "RegistryKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "FromRegistryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, key});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseRegTzi
// Il2CppName: ParseRegTzi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>*, int, int, ::ArrayW<uint8_t>)>(&System::TimeZoneInfo::ParseRegTzi)> {
  static const MethodInfo* get() {
    static auto* adjustmentRules = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")})->byval_arg;
    static auto* start_year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end_year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseRegTzi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{adjustmentRules, start_year, end_year, buffer});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetAdjustmentRules
// Il2CppName: GetAdjustmentRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::GetAdjustmentRules)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetAdjustmentRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TimeZoneInfo::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::TimeZoneInfo::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetSystemTimeZones
// Il2CppName: GetSystemTimeZones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::TimeZoneInfo*>* (*)()>(&System::TimeZoneInfo::GetSystemTimeZones)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetSystemTimeZones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime, ByRef<bool>, bool)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* isDST = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* forOffset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, isDST, forOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffsetHelper
// Il2CppName: GetUtcOffsetHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*, ByRef<bool>, bool)>(&System::TimeZoneInfo::GetUtcOffsetHelper)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* tz = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* isDST = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* forOffset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffsetHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, tz, isDST, forOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::HasSameRules
// Il2CppName: HasSameRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo*)>(&System::TimeZoneInfo::HasSameRules)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "HasSameRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsAmbiguousTime
// Il2CppName: IsAmbiguousTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::IsAmbiguousTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsAmbiguousTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsAmbiguousLocalDstFromUtc
// Il2CppName: IsAmbiguousLocalDstFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::IsAmbiguousLocalDstFromUtc)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsAmbiguousLocalDstFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsInDST
// Il2CppName: IsInDST
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo::AdjustmentRule*, ::System::DateTime)>(&System::TimeZoneInfo::IsInDST)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsInDST", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule, dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsInDSTForYear
// Il2CppName: IsInDSTForYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::TimeZoneInfo::AdjustmentRule*, ::System::DateTime, int)>(&System::TimeZoneInfo::IsInDSTForYear)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsInDSTForYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule, dateTime, year});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::IsInvalidTime
// Il2CppName: IsInvalidTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::IsInvalidTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "IsInvalidTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TimeZoneInfo::*)(::Il2CppObject*)>(&System::TimeZoneInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::TimeSpan, ::ArrayW<::System::TimeZoneInfo::AdjustmentRule*>)>(&System::TimeZoneInfo::Validate)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* baseUtcOffset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* adjustmentRules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, baseUtcOffset, adjustmentRules});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetApplicableRule
// Il2CppName: GetApplicableRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo::AdjustmentRule* (System::TimeZoneInfo::*)(::System::DateTime)>(&System::TimeZoneInfo::GetApplicableRule)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetApplicableRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TryGetTransitionOffset
// Il2CppName: TryGetTransitionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::System::DateTime, ByRef<::System::TimeSpan>, ByRef<bool>, bool)>(&System::TimeZoneInfo::TryGetTransitionOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* isDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* forOffset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TryGetTransitionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset, isDst, forOffset});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::TransitionPoint
// Il2CppName: TransitionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::TimeZoneInfo::TransitionTime, int)>(&System::TimeZoneInfo::TransitionPoint)> {
  static const MethodInfo* get() {
    static auto* transition = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/TransitionTime")->byval_arg;
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "TransitionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transition, year});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ValidateRules
// Il2CppName: ValidateRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::TimeZoneInfo::AdjustmentRule*> (*)(::System::Collections::Generic::List_1<::System::TimeZoneInfo::AdjustmentRule*>*)>(&System::TimeZoneInfo::ValidateRules)> {
  static const MethodInfo* get() {
    static auto* adjustmentRules = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo/AdjustmentRule")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ValidateRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{adjustmentRules});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::BuildFromStream
// Il2CppName: BuildFromStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::System::IO::Stream*)>(&System::TimeZoneInfo::BuildFromStream)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "BuildFromStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, stream});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ValidTZFile
// Il2CppName: ValidTZFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::ValidTZFile)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ValidTZFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::SwapInt32
// Il2CppName: SwapInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::TimeZoneInfo::SwapInt32)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "SwapInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ReadBigEndianInt32
// Il2CppName: ReadBigEndianInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::ReadBigEndianInt32)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ReadBigEndianInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, start});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseTZBuffer
// Il2CppName: ParseTZBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeZoneInfo* (*)(::StringW, ::ArrayW<uint8_t>, int)>(&System::TimeZoneInfo::ParseTZBuffer)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseTZBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, buffer, length});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseAbbreviations
// Il2CppName: ParseAbbreviations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<int, ::StringW>* (*)(::ArrayW<uint8_t>, int, int)>(&System::TimeZoneInfo::ParseAbbreviations)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseAbbreviations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseTimesTypes
// Il2CppName: ParseTimesTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<int, ::System::TimeType*>* (*)(::ArrayW<uint8_t>, int, int, ::System::Collections::Generic::Dictionary_2<int, ::StringW>*)>(&System::TimeZoneInfo::ParseTimesTypes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* abbreviations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseTimesTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count, abbreviations});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ParseTransitions
// Il2CppName: ParseTransitions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<::System::DateTime, ::System::TimeType*>>* (*)(::ArrayW<uint8_t>, int, int, ::System::Collections::Generic::Dictionary_2<int, ::System::TimeType*>*)>(&System::TimeZoneInfo::ParseTransitions)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* time_types = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "TimeType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ParseTransitions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count, time_types});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::DateTimeFromUnixTime
// Il2CppName: DateTimeFromUnixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int64_t)>(&System::TimeZoneInfo::DateTimeFromUnixTime)> {
  static const MethodInfo* get() {
    static auto* unix_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "DateTimeFromUnixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unix_time});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetLocalUtcOffset
// Il2CppName: GetLocalUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetLocalUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetLocalUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::TimeZoneInfo::*)(::System::DateTime, ::System::TimeZoneInfoOptions)>(&System::TimeZoneInfo::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfoOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, flags});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetUtcOffsetFromUtc
// Il2CppName: GetUtcOffsetFromUtc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime, ::System::TimeZoneInfo*, ByRef<bool>, ByRef<bool>)>(&System::TimeZoneInfo::GetUtcOffsetFromUtc)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* zone = &::il2cpp_utils::GetClassFromName("System", "TimeZoneInfo")->byval_arg;
    static auto* isDaylightSavings = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* isAmbiguousLocalDst = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetUtcOffsetFromUtc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, zone, isDaylightSavings, isAmbiguousLocalDst});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TimeZoneInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TimeZoneInfo::*)(::Il2CppObject*)>(&System::TimeZoneInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TimeZoneInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TimeZoneInfo::*)()>(&System::TimeZoneInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TimeZoneInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
