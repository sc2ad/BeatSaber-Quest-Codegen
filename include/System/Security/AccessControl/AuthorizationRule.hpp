// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.AccessControl.InheritanceFlags
#include "System/Security/AccessControl/InheritanceFlags.hpp"
// Including type: System.Security.AccessControl.PropagationFlags
#include "System/Security/AccessControl/PropagationFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: IdentityReference
  class IdentityReference;
}
// Completed forward declares
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: AuthorizationRule
  class AuthorizationRule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::AccessControl::AuthorizationRule);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::AccessControl::AuthorizationRule*, "System.Security.AccessControl", "AuthorizationRule");
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.AccessControl.AuthorizationRule
  // [TokenAttribute] Offset: FFFFFFFF
  class AuthorizationRule : public ::Il2CppObject {
    public:
    public:
    // private System.Security.Principal.IdentityReference identity
    // Size: 0x8
    // Offset: 0x10
    ::System::Security::Principal::IdentityReference* identity;
    // Field size check
    static_assert(sizeof(::System::Security::Principal::IdentityReference*) == 0x8);
    // private System.Int32 accessMask
    // Size: 0x4
    // Offset: 0x18
    int accessMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isInherited
    // Size: 0x1
    // Offset: 0x1C
    bool isInherited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInherited and: inheritanceFlags
    char __padding2[0x3] = {};
    // private System.Security.AccessControl.InheritanceFlags inheritanceFlags
    // Size: 0x4
    // Offset: 0x20
    ::System::Security::AccessControl::InheritanceFlags inheritanceFlags;
    // Field size check
    static_assert(sizeof(::System::Security::AccessControl::InheritanceFlags) == 0x4);
    // private System.Security.AccessControl.PropagationFlags propagationFlags
    // Size: 0x4
    // Offset: 0x24
    ::System::Security::AccessControl::PropagationFlags propagationFlags;
    // Field size check
    static_assert(sizeof(::System::Security::AccessControl::PropagationFlags) == 0x4);
    public:
    // Get instance field reference: private System.Security.Principal.IdentityReference identity
    [[deprecated("Use field access instead!")]] ::System::Security::Principal::IdentityReference*& dyn_identity();
    // Get instance field reference: private System.Int32 accessMask
    [[deprecated("Use field access instead!")]] int& dyn_accessMask();
    // Get instance field reference: private System.Boolean isInherited
    [[deprecated("Use field access instead!")]] bool& dyn_isInherited();
    // Get instance field reference: private System.Security.AccessControl.InheritanceFlags inheritanceFlags
    [[deprecated("Use field access instead!")]] ::System::Security::AccessControl::InheritanceFlags& dyn_inheritanceFlags();
    // Get instance field reference: private System.Security.AccessControl.PropagationFlags propagationFlags
    [[deprecated("Use field access instead!")]] ::System::Security::AccessControl::PropagationFlags& dyn_propagationFlags();
    // protected internal System.Int32 get_AccessMask()
    // Offset: 0x1BAEFDC
    int get_AccessMask();
    // protected internal System.Void .ctor(System.Security.Principal.IdentityReference identity, System.Int32 accessMask, System.Boolean isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags)
    // Offset: 0x1BAED7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthorizationRule* New_ctor(::System::Security::Principal::IdentityReference* identity, int accessMask, bool isInherited, ::System::Security::AccessControl::InheritanceFlags inheritanceFlags, ::System::Security::AccessControl::PropagationFlags propagationFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::AuthorizationRule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthorizationRule*, creationType>(identity, accessMask, isInherited, inheritanceFlags, propagationFlags)));
    }
  }; // System.Security.AccessControl.AuthorizationRule
  #pragma pack(pop)
  static check_size<sizeof(AuthorizationRule), 36 + sizeof(::System::Security::AccessControl::PropagationFlags)> __System_Security_AccessControl_AuthorizationRuleSizeCheck;
  static_assert(sizeof(AuthorizationRule) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::AccessControl::AuthorizationRule::get_AccessMask
// Il2CppName: get_AccessMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::AccessControl::AuthorizationRule::*)()>(&System::Security::AccessControl::AuthorizationRule::get_AccessMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::AuthorizationRule*), "get_AccessMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::AuthorizationRule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
