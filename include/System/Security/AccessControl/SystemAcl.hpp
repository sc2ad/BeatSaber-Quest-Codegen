// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.AccessControl.CommonAcl
#include "System/Security/AccessControl/CommonAcl.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: AuditFlags
  struct AuditFlags;
  // Forward declaring type: RawAcl
  class RawAcl;
  // Forward declaring type: AceQualifier
  struct AceQualifier;
  // Forward declaring type: GenericAce
  class GenericAce;
}
// Completed forward declares
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: SystemAcl
  class SystemAcl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::AccessControl::SystemAcl);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::AccessControl::SystemAcl*, "System.Security.AccessControl", "SystemAcl");
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.AccessControl.SystemAcl
  // [TokenAttribute] Offset: FFFFFFFF
  class SystemAcl : public ::System::Security::AccessControl::CommonAcl {
    public:
    // static private System.Boolean IsValidAuditFlags(System.Security.AccessControl.AuditFlags auditFlags)
    // Offset: 0x1BB544C
    static bool IsValidAuditFlags(::System::Security::AccessControl::AuditFlags auditFlags);
    // public System.Void .ctor(System.Boolean isContainer, System.Boolean isDS, System.Security.AccessControl.RawAcl rawAcl)
    // Offset: 0x1BB21A4
    // Implemented from: System.Security.AccessControl.CommonAcl
    // Base method: System.Void CommonAcl::.ctor(System.Boolean isContainer, System.Boolean isDS, System.Security.AccessControl.RawAcl rawAcl)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SystemAcl* New_ctor(bool isContainer, bool isDS, ::System::Security::AccessControl::RawAcl* rawAcl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::SystemAcl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SystemAcl*, creationType>(isContainer, isDS, rawAcl)));
    }
    // override System.Void ApplyCanonicalSortToExplicitAces()
    // Offset: 0x1BB5300
    // Implemented from: System.Security.AccessControl.CommonAcl
    // Base method: System.Void CommonAcl::ApplyCanonicalSortToExplicitAces()
    void ApplyCanonicalSortToExplicitAces();
    // override System.Int32 GetAceInsertPosition(System.Security.AccessControl.AceQualifier aceQualifier)
    // Offset: 0x1BB532C
    // Implemented from: System.Security.AccessControl.CommonAcl
    // Base method: System.Int32 CommonAcl::GetAceInsertPosition(System.Security.AccessControl.AceQualifier aceQualifier)
    int GetAceInsertPosition(::System::Security::AccessControl::AceQualifier aceQualifier);
    // override System.Boolean IsAceMeaningless(System.Security.AccessControl.GenericAce ace)
    // Offset: 0x1BB5334
    // Implemented from: System.Security.AccessControl.CommonAcl
    // Base method: System.Boolean CommonAcl::IsAceMeaningless(System.Security.AccessControl.GenericAce ace)
    bool IsAceMeaningless(::System::Security::AccessControl::GenericAce* ace);
  }; // System.Security.AccessControl.SystemAcl
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::AccessControl::SystemAcl::IsValidAuditFlags
// Il2CppName: IsValidAuditFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Security::AccessControl::AuditFlags)>(&System::Security::AccessControl::SystemAcl::IsValidAuditFlags)> {
  static const MethodInfo* get() {
    static auto* auditFlags = &::il2cpp_utils::GetClassFromName("System.Security.AccessControl", "AuditFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::SystemAcl*), "IsValidAuditFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{auditFlags});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::SystemAcl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::AccessControl::SystemAcl::ApplyCanonicalSortToExplicitAces
// Il2CppName: ApplyCanonicalSortToExplicitAces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::SystemAcl::*)()>(&System::Security::AccessControl::SystemAcl::ApplyCanonicalSortToExplicitAces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::SystemAcl*), "ApplyCanonicalSortToExplicitAces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::SystemAcl::GetAceInsertPosition
// Il2CppName: GetAceInsertPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::AccessControl::SystemAcl::*)(::System::Security::AccessControl::AceQualifier)>(&System::Security::AccessControl::SystemAcl::GetAceInsertPosition)> {
  static const MethodInfo* get() {
    static auto* aceQualifier = &::il2cpp_utils::GetClassFromName("System.Security.AccessControl", "AceQualifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::SystemAcl*), "GetAceInsertPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aceQualifier});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::SystemAcl::IsAceMeaningless
// Il2CppName: IsAceMeaningless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::AccessControl::SystemAcl::*)(::System::Security::AccessControl::GenericAce*)>(&System::Security::AccessControl::SystemAcl::IsAceMeaningless)> {
  static const MethodInfo* get() {
    static auto* ace = &::il2cpp_utils::GetClassFromName("System.Security.AccessControl", "GenericAce")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::SystemAcl*), "IsAceMeaningless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ace});
  }
};
