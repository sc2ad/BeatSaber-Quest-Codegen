// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.AccessControl.KnownAce
#include "System/Security/AccessControl/KnownAce.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: AceQualifier
  struct AceQualifier;
}
// Completed forward declares
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: QualifiedAce
  class QualifiedAce;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::AccessControl::QualifiedAce);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::AccessControl::QualifiedAce*, "System.Security.AccessControl", "QualifiedAce");
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.AccessControl.QualifiedAce
  // [TokenAttribute] Offset: FFFFFFFF
  class QualifiedAce : public ::System::Security::AccessControl::KnownAce {
    public:
    public:
    // private System.Byte[] opaque
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> opaque;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<uint8_t>
    constexpr operator ::ArrayW<uint8_t>() const noexcept {
      return opaque;
    }
    // Get instance field reference: private System.Byte[] opaque
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_opaque();
    // public System.Security.AccessControl.AceQualifier get_AceQualifier()
    // Offset: 0x1BB078C
    ::System::Security::AccessControl::AceQualifier get_AceQualifier();
    // public System.Boolean get_IsCallback()
    // Offset: 0x1BB1054
    bool get_IsCallback();
    // public System.Int32 get_OpaqueLength()
    // Offset: 0x1BAF57C
    int get_OpaqueLength();
    // System.Void .ctor(System.Security.AccessControl.AceType type, System.Security.AccessControl.AceFlags flags, System.Byte[] opaque)
    // Offset: 0x1BAF1C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QualifiedAce* New_ctor(::System::Security::AccessControl::AceType type, ::System::Security::AccessControl::AceFlags flags, ::ArrayW<uint8_t> opaque) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::QualifiedAce::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QualifiedAce*, creationType>(type, flags, opaque)));
    }
    // public System.Byte[] GetOpaque()
    // Offset: 0x1BAF778
    ::ArrayW<uint8_t> GetOpaque();
    // public System.Void SetOpaque(System.Byte[] opaque)
    // Offset: 0x1BAF4A4
    void SetOpaque(::ArrayW<uint8_t> opaque);
    // System.Void .ctor(System.Byte[] binaryForm, System.Int32 offset)
    // Offset: 0x1BAF3D4
    // Implemented from: System.Security.AccessControl.KnownAce
    // Base method: System.Void KnownAce::.ctor(System.Byte[] binaryForm, System.Int32 offset)
    // Base method: System.Void GenericAce::.ctor(System.Byte[] binaryForm, System.Int32 offset)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QualifiedAce* New_ctor(::ArrayW<uint8_t> binaryForm, int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::QualifiedAce::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QualifiedAce*, creationType>(binaryForm, offset)));
    }
  }; // System.Security.AccessControl.QualifiedAce
  #pragma pack(pop)
  static check_size<sizeof(QualifiedAce), 32 + sizeof(::ArrayW<uint8_t>)> __System_Security_AccessControl_QualifiedAceSizeCheck;
  static_assert(sizeof(QualifiedAce) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::get_AceQualifier
// Il2CppName: get_AceQualifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::AccessControl::AceQualifier (System::Security::AccessControl::QualifiedAce::*)()>(&System::Security::AccessControl::QualifiedAce::get_AceQualifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::QualifiedAce*), "get_AceQualifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::get_IsCallback
// Il2CppName: get_IsCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::AccessControl::QualifiedAce::*)()>(&System::Security::AccessControl::QualifiedAce::get_IsCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::QualifiedAce*), "get_IsCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::get_OpaqueLength
// Il2CppName: get_OpaqueLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::AccessControl::QualifiedAce::*)()>(&System::Security::AccessControl::QualifiedAce::get_OpaqueLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::QualifiedAce*), "get_OpaqueLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::GetOpaque
// Il2CppName: GetOpaque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::AccessControl::QualifiedAce::*)()>(&System::Security::AccessControl::QualifiedAce::GetOpaque)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::QualifiedAce*), "GetOpaque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::SetOpaque
// Il2CppName: SetOpaque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::QualifiedAce::*)(::ArrayW<uint8_t>)>(&System::Security::AccessControl::QualifiedAce::SetOpaque)> {
  static const MethodInfo* get() {
    static auto* opaque = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::QualifiedAce*), "SetOpaque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opaque});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::QualifiedAce::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
