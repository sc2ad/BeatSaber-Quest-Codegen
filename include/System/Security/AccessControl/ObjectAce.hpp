// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.AccessControl.QualifiedAce
#include "System/Security/AccessControl/QualifiedAce.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Security.AccessControl.ObjectAceFlags
#include "System/Security/AccessControl/ObjectAceFlags.hpp"
// Including type: System.Security.AccessControl.AceQualifier
#include "System/Security/AccessControl/AceQualifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: SecurityIdentifier
  class SecurityIdentifier;
}
// Forward declaring namespace: System::Security::AccessControl
namespace System::Security::AccessControl {
  // Skipping declaration: AceType because it is already included!
}
// Completed forward declares
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: ObjectAce
  class ObjectAce;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::AccessControl::ObjectAce);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::AccessControl::ObjectAce*, "System.Security.AccessControl", "ObjectAce");
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.AccessControl.ObjectAce
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectAce : public ::System::Security::AccessControl::QualifiedAce {
    public:
    public:
    // private System.Guid object_ace_type
    // Size: 0x10
    // Offset: 0x28
    ::System::Guid object_ace_type;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // private System.Guid inherited_object_type
    // Size: 0x10
    // Offset: 0x38
    ::System::Guid inherited_object_type;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // private System.Security.AccessControl.ObjectAceFlags object_ace_flags
    // Size: 0x4
    // Offset: 0x48
    ::System::Security::AccessControl::ObjectAceFlags object_ace_flags;
    // Field size check
    static_assert(sizeof(::System::Security::AccessControl::ObjectAceFlags) == 0x4);
    public:
    // Deleting conversion operator: operator ::ArrayW<uint8_t>
    constexpr operator ::ArrayW<uint8_t>() const noexcept = delete;
    // Get instance field reference: private System.Guid object_ace_type
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_object_ace_type();
    // Get instance field reference: private System.Guid inherited_object_type
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_inherited_object_type();
    // Get instance field reference: private System.Security.AccessControl.ObjectAceFlags object_ace_flags
    [[deprecated("Use field access instead!")]] ::System::Security::AccessControl::ObjectAceFlags& dyn_object_ace_flags();
    // public System.Guid get_InheritedObjectAceType()
    // Offset: 0x1BB45C4
    ::System::Guid get_InheritedObjectAceType();
    // public System.Void set_InheritedObjectAceType(System.Guid value)
    // Offset: 0x1BB45D0
    void set_InheritedObjectAceType(::System::Guid value);
    // private System.Boolean get_InheritedObjectAceTypePresent()
    // Offset: 0x1BB44B8
    bool get_InheritedObjectAceTypePresent();
    // public System.Security.AccessControl.ObjectAceFlags get_ObjectAceFlags()
    // Offset: 0x1BB45D8
    ::System::Security::AccessControl::ObjectAceFlags get_ObjectAceFlags();
    // public System.Void set_ObjectAceFlags(System.Security.AccessControl.ObjectAceFlags value)
    // Offset: 0x1BB45E0
    void set_ObjectAceFlags(::System::Security::AccessControl::ObjectAceFlags value);
    // public System.Guid get_ObjectAceType()
    // Offset: 0x1BB45E8
    ::System::Guid get_ObjectAceType();
    // public System.Void set_ObjectAceType(System.Guid value)
    // Offset: 0x1BB45F4
    void set_ObjectAceType(::System::Guid value);
    // private System.Boolean get_ObjectAceTypePresent()
    // Offset: 0x1BB44AC
    bool get_ObjectAceTypePresent();
    // public System.Void .ctor(System.Security.AccessControl.AceFlags aceFlags, System.Security.AccessControl.AceQualifier qualifier, System.Int32 accessMask, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAceFlags flags, System.Guid type, System.Guid inheritedType, System.Boolean isCallback, System.Byte[] opaque)
    // Offset: 0x1BB1148
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectAce* New_ctor(::System::Security::AccessControl::AceFlags aceFlags, ::System::Security::AccessControl::AceQualifier qualifier, int accessMask, ::System::Security::Principal::SecurityIdentifier* sid, ::System::Security::AccessControl::ObjectAceFlags flags, ::System::Guid type, ::System::Guid inheritedType, bool isCallback, ::ArrayW<uint8_t> opaque) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::ObjectAce::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectAce*, creationType>(aceFlags, qualifier, accessMask, sid, flags, type, inheritedType, isCallback, opaque)));
    }
    // static private System.Security.AccessControl.AceType ConvertType(System.Security.AccessControl.AceQualifier qualifier, System.Boolean isCallback)
    // Offset: 0x1BB4384
    static ::System::Security::AccessControl::AceType ConvertType(::System::Security::AccessControl::AceQualifier qualifier, bool isCallback);
    // private System.Void WriteGuid(System.Guid val, System.Byte[] buffer, System.Int32 offset)
    // Offset: 0x1BB4778
    void WriteGuid(::System::Guid val, ::ArrayW<uint8_t> buffer, int offset);
    // private System.Guid ReadGuid(System.Byte[] buffer, System.Int32 offset)
    // Offset: 0x1BB44C4
    ::System::Guid ReadGuid(::ArrayW<uint8_t> buffer, int offset);
    // public override System.Int32 get_BinaryLength()
    // Offset: 0x1BB4564
    // Implemented from: System.Security.AccessControl.GenericAce
    // Base method: System.Int32 GenericAce::get_BinaryLength()
    int get_BinaryLength();
    // System.Void .ctor(System.Byte[] binaryForm, System.Int32 offset)
    // Offset: 0x1BB2A4C
    // Implemented from: System.Security.AccessControl.QualifiedAce
    // Base method: System.Void QualifiedAce::.ctor(System.Byte[] binaryForm, System.Int32 offset)
    // Base method: System.Void KnownAce::.ctor(System.Byte[] binaryForm, System.Int32 offset)
    // Base method: System.Void GenericAce::.ctor(System.Byte[] binaryForm, System.Int32 offset)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectAce* New_ctor(::ArrayW<uint8_t> binaryForm, int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::AccessControl::ObjectAce::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectAce*, creationType>(binaryForm, offset)));
    }
    // public override System.Void GetBinaryForm(System.Byte[] binaryForm, System.Int32 offset)
    // Offset: 0x1BB45FC
    // Implemented from: System.Security.AccessControl.GenericAce
    // Base method: System.Void GenericAce::GetBinaryForm(System.Byte[] binaryForm, System.Int32 offset)
    void GetBinaryForm(::ArrayW<uint8_t> binaryForm, int offset);
  }; // System.Security.AccessControl.ObjectAce
  #pragma pack(pop)
  static check_size<sizeof(ObjectAce), 72 + sizeof(::System::Security::AccessControl::ObjectAceFlags)> __System_Security_AccessControl_ObjectAceSizeCheck;
  static_assert(sizeof(ObjectAce) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_InheritedObjectAceType
// Il2CppName: get_InheritedObjectAceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_InheritedObjectAceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_InheritedObjectAceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::set_InheritedObjectAceType
// Il2CppName: set_InheritedObjectAceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::ObjectAce::*)(::System::Guid)>(&System::Security::AccessControl::ObjectAce::set_InheritedObjectAceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "set_InheritedObjectAceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_InheritedObjectAceTypePresent
// Il2CppName: get_InheritedObjectAceTypePresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_InheritedObjectAceTypePresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_InheritedObjectAceTypePresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_ObjectAceFlags
// Il2CppName: get_ObjectAceFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::AccessControl::ObjectAceFlags (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_ObjectAceFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_ObjectAceFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::set_ObjectAceFlags
// Il2CppName: set_ObjectAceFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::ObjectAce::*)(::System::Security::AccessControl::ObjectAceFlags)>(&System::Security::AccessControl::ObjectAce::set_ObjectAceFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.AccessControl", "ObjectAceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "set_ObjectAceFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_ObjectAceType
// Il2CppName: get_ObjectAceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_ObjectAceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_ObjectAceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::set_ObjectAceType
// Il2CppName: set_ObjectAceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::ObjectAce::*)(::System::Guid)>(&System::Security::AccessControl::ObjectAce::set_ObjectAceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "set_ObjectAceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_ObjectAceTypePresent
// Il2CppName: get_ObjectAceTypePresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_ObjectAceTypePresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_ObjectAceTypePresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::ConvertType
// Il2CppName: ConvertType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::AccessControl::AceType (*)(::System::Security::AccessControl::AceQualifier, bool)>(&System::Security::AccessControl::ObjectAce::ConvertType)> {
  static const MethodInfo* get() {
    static auto* qualifier = &::il2cpp_utils::GetClassFromName("System.Security.AccessControl", "AceQualifier")->byval_arg;
    static auto* isCallback = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "ConvertType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifier, isCallback});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::WriteGuid
// Il2CppName: WriteGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::ObjectAce::*)(::System::Guid, ::ArrayW<uint8_t>, int)>(&System::Security::AccessControl::ObjectAce::WriteGuid)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "WriteGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val, buffer, offset});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::ReadGuid
// Il2CppName: ReadGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::Security::AccessControl::ObjectAce::*)(::ArrayW<uint8_t>, int)>(&System::Security::AccessControl::ObjectAce::ReadGuid)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "ReadGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::get_BinaryLength
// Il2CppName: get_BinaryLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::AccessControl::ObjectAce::*)()>(&System::Security::AccessControl::ObjectAce::get_BinaryLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "get_BinaryLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::AccessControl::ObjectAce::GetBinaryForm
// Il2CppName: GetBinaryForm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::AccessControl::ObjectAce::*)(::ArrayW<uint8_t>, int)>(&System::Security::AccessControl::ObjectAce::GetBinaryForm)> {
  static const MethodInfo* get() {
    static auto* binaryForm = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::AccessControl::ObjectAce*), "GetBinaryForm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binaryForm, offset});
  }
};
