// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Security.Permissions.SecurityAction
#include "System/Security/Permissions/SecurityAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security
namespace System::Security {
  // Forward declaring type: IPermission
  class IPermission;
}
// Completed forward declares
// Type namespace: System.Security.Permissions
namespace System::Security::Permissions {
  // Forward declaring type: SecurityAttribute
  class SecurityAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Permissions::SecurityAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Permissions::SecurityAttribute*, "System.Security.Permissions", "SecurityAttribute");
// Type namespace: System.Security.Permissions
namespace System::Security::Permissions {
  // Size: 0x15
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Permissions.SecurityAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8F32FC
  // [ComVisibleAttribute] Offset: 8F32FC
  // [ObsoleteAttribute] Offset: 8F32FC
  class SecurityAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Security.Permissions.SecurityAction m_Action
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Permissions::SecurityAction m_Action;
    // Field size check
    static_assert(sizeof(::System::Security::Permissions::SecurityAction) == 0x4);
    // private System.Boolean m_Unrestricted
    // Size: 0x1
    // Offset: 0x14
    bool m_Unrestricted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Security.Permissions.SecurityAction m_Action
    [[deprecated("Use field access instead!")]] ::System::Security::Permissions::SecurityAction& dyn_m_Action();
    // Get instance field reference: private System.Boolean m_Unrestricted
    [[deprecated("Use field access instead!")]] bool& dyn_m_Unrestricted();
    // public System.Boolean get_Unrestricted()
    // Offset: 0x13B0C98
    bool get_Unrestricted();
    // public System.Void set_Action(System.Security.Permissions.SecurityAction value)
    // Offset: 0x13B0CA0
    void set_Action(::System::Security::Permissions::SecurityAction value);
    // protected System.Void .ctor(System.Security.Permissions.SecurityAction action)
    // Offset: 0x13B0C6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecurityAttribute* New_ctor(::System::Security::Permissions::SecurityAction action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Permissions::SecurityAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecurityAttribute*, creationType>(action)));
    }
    // public System.Security.IPermission CreatePermission()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Security::IPermission* CreatePermission();
  }; // System.Security.Permissions.SecurityAttribute
  #pragma pack(pop)
  static check_size<sizeof(SecurityAttribute), 20 + sizeof(bool)> __System_Security_Permissions_SecurityAttributeSizeCheck;
  static_assert(sizeof(SecurityAttribute) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Permissions::SecurityAttribute::get_Unrestricted
// Il2CppName: get_Unrestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Permissions::SecurityAttribute::*)()>(&System::Security::Permissions::SecurityAttribute::get_Unrestricted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Permissions::SecurityAttribute*), "get_Unrestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Permissions::SecurityAttribute::set_Action
// Il2CppName: set_Action
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Permissions::SecurityAttribute::*)(::System::Security::Permissions::SecurityAction)>(&System::Security::Permissions::SecurityAttribute::set_Action)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Permissions", "SecurityAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Permissions::SecurityAttribute*), "set_Action", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::Permissions::SecurityAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Permissions::SecurityAttribute::CreatePermission
// Il2CppName: CreatePermission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Security::Permissions::SecurityAttribute::*)()>(&System::Security::Permissions::SecurityAttribute::CreatePermission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Permissions::SecurityAttribute*), "CreatePermission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
