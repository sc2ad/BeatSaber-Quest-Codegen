// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.MaskGenerationMethod
#include "System/Security/Cryptography/MaskGenerationMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: PKCS1MaskGenerationMethod
  class PKCS1MaskGenerationMethod;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::PKCS1MaskGenerationMethod);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::PKCS1MaskGenerationMethod*, "System.Security.Cryptography", "PKCS1MaskGenerationMethod");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.PKCS1MaskGenerationMethod
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 8F388C
  class PKCS1MaskGenerationMethod : public ::System::Security::Cryptography::MaskGenerationMethod {
    public:
    public:
    // private System.String HashNameValue
    // Size: 0x8
    // Offset: 0x10
    ::StringW HashNameValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return HashNameValue;
    }
    // Get instance field reference: private System.String HashNameValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_HashNameValue();
    // public System.String get_HashName()
    // Offset: 0x12B2148
    ::StringW get_HashName();
    // public System.Void set_HashName(System.String value)
    // Offset: 0x12B2150
    void set_HashName(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x12B20EC
    // Implemented from: System.Security.Cryptography.MaskGenerationMethod
    // Base method: System.Void MaskGenerationMethod::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PKCS1MaskGenerationMethod* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::PKCS1MaskGenerationMethod::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PKCS1MaskGenerationMethod*, creationType>()));
    }
    // public override System.Byte[] GenerateMask(System.Byte[] rgbSeed, System.Int32 cbReturn)
    // Offset: 0x12B21B4
    // Implemented from: System.Security.Cryptography.MaskGenerationMethod
    // Base method: System.Byte[] MaskGenerationMethod::GenerateMask(System.Byte[] rgbSeed, System.Int32 cbReturn)
    ::ArrayW<uint8_t> GenerateMask(::ArrayW<uint8_t> rgbSeed, int cbReturn);
  }; // System.Security.Cryptography.PKCS1MaskGenerationMethod
  #pragma pack(pop)
  static check_size<sizeof(PKCS1MaskGenerationMethod), 16 + sizeof(::StringW)> __System_Security_Cryptography_PKCS1MaskGenerationMethodSizeCheck;
  static_assert(sizeof(PKCS1MaskGenerationMethod) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::PKCS1MaskGenerationMethod::get_HashName
// Il2CppName: get_HashName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::PKCS1MaskGenerationMethod::*)()>(&System::Security::Cryptography::PKCS1MaskGenerationMethod::get_HashName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PKCS1MaskGenerationMethod*), "get_HashName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::PKCS1MaskGenerationMethod::set_HashName
// Il2CppName: set_HashName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::PKCS1MaskGenerationMethod::*)(::StringW)>(&System::Security::Cryptography::PKCS1MaskGenerationMethod::set_HashName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PKCS1MaskGenerationMethod*), "set_HashName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::PKCS1MaskGenerationMethod::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::PKCS1MaskGenerationMethod::GenerateMask
// Il2CppName: GenerateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::PKCS1MaskGenerationMethod::*)(::ArrayW<uint8_t>, int)>(&System::Security::Cryptography::PKCS1MaskGenerationMethod::GenerateMask)> {
  static const MethodInfo* get() {
    static auto* rgbSeed = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* cbReturn = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::PKCS1MaskGenerationMethod*), "GenerateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgbSeed, cbReturn});
  }
};
