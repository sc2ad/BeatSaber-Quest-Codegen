// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImpl
#include "System/Security/Cryptography/X509Certificates/X509ChainImpl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.StoreLocation
#include "System/Security/Cryptography/X509Certificates/StoreLocation.hpp"
// Including type: Mono.Security.X509.X509Crl
#include "Mono/Security/X509/X509Crl.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509ChainElementCollection
  class X509ChainElementCollection;
  // Forward declaring type: X509ChainPolicy
  class X509ChainPolicy;
  // Forward declaring type: X500DistinguishedName
  class X500DistinguishedName;
  // Forward declaring type: X509ChainElement
  class X509ChainElement;
  // Forward declaring type: X509Certificate2Collection
  class X509Certificate2Collection;
  // Forward declaring type: X509Store
  class X509Store;
  // Skipping declaration: X509ChainStatusFlags because it is already included!
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Extension
  class X509Extension;
  // Forward declaring type: X509Store
  class X509Store;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509ChainImplMono
  class X509ChainImplMono;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::X509Certificates::X509ChainImplMono);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::X509Certificates::X509ChainImplMono*, "System.Security.Cryptography.X509Certificates", "X509ChainImplMono");
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.X509Certificates.X509ChainImplMono
  // [TokenAttribute] Offset: FFFFFFFF
  class X509ChainImplMono : public ::System::Security::Cryptography::X509Certificates::X509ChainImpl {
    public:
    public:
    // private System.Security.Cryptography.X509Certificates.StoreLocation location
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Cryptography::X509Certificates::StoreLocation location;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::StoreLocation) == 0x4);
    // Padding between fields: location and: elements
    char __padding0[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* elements;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::X509Certificates::X509ChainPolicy* policy;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509ChainStatus[] status
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> status;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus>) == 0x8);
    // private System.Int32 max_path_length
    // Size: 0x4
    // Offset: 0x30
    int max_path_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: max_path_length and: working_issuer_name
    char __padding4[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X500DistinguishedName working_issuer_name
    // Size: 0x8
    // Offset: 0x38
    ::System::Security::Cryptography::X509Certificates::X500DistinguishedName* working_issuer_name;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X500DistinguishedName*) == 0x8);
    // private System.Security.Cryptography.AsymmetricAlgorithm working_public_key
    // Size: 0x8
    // Offset: 0x40
    ::System::Security::Cryptography::AsymmetricAlgorithm* working_public_key;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::AsymmetricAlgorithm*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509ChainElement bce_restriction
    // Size: 0x8
    // Offset: 0x48
    ::System::Security::Cryptography::X509Certificates::X509ChainElement* bce_restriction;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainElement*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection roots
    // Size: 0x8
    // Offset: 0x50
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* roots;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection cas
    // Size: 0x8
    // Offset: 0x58
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* cas;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Store root_store
    // Size: 0x8
    // Offset: 0x60
    ::System::Security::Cryptography::X509Certificates::X509Store* root_store;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Store*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Store ca_store
    // Size: 0x8
    // Offset: 0x68
    ::System::Security::Cryptography::X509Certificates::X509Store* ca_store;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Store*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Store user_root_store
    // Size: 0x8
    // Offset: 0x70
    ::System::Security::Cryptography::X509Certificates::X509Store* user_root_store;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Store*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Store user_ca_store
    // Size: 0x8
    // Offset: 0x78
    ::System::Security::Cryptography::X509Certificates::X509Store* user_ca_store;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Store*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection collection
    // Size: 0x8
    // Offset: 0x80
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* collection;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*) == 0x8);
    public:
    // Get static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
    static ::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> _get_Empty();
    // Set static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
    static void _set_Empty(::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> value);
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.StoreLocation location
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::StoreLocation& dyn_location();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*& dyn_elements();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainPolicy*& dyn_policy();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainStatus[] status
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus>& dyn_status();
    // Get instance field reference: private System.Int32 max_path_length
    [[deprecated("Use field access instead!")]] int& dyn_max_path_length();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X500DistinguishedName working_issuer_name
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X500DistinguishedName*& dyn_working_issuer_name();
    // Get instance field reference: private System.Security.Cryptography.AsymmetricAlgorithm working_public_key
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::AsymmetricAlgorithm*& dyn_working_public_key();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainElement bce_restriction
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainElement*& dyn_bce_restriction();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate2Collection roots
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*& dyn_roots();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate2Collection cas
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*& dyn_cas();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Store root_store
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Store*& dyn_root_store();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Store ca_store
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Store*& dyn_ca_store();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Store user_root_store
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Store*& dyn_user_root_store();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Store user_ca_store
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Store*& dyn_user_ca_store();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate2Collection collection
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*& dyn_collection();
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_Roots()
    // Offset: 0x1C874B4
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* get_Roots();
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_CertificateAuthorities()
    // Offset: 0x1C877F0
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* get_CertificateAuthorities();
    // private System.Security.Cryptography.X509Certificates.X509Store get_LMRootStore()
    // Offset: 0x1C87580
    ::System::Security::Cryptography::X509Certificates::X509Store* get_LMRootStore();
    // private System.Security.Cryptography.X509Certificates.X509Store get_UserRootStore()
    // Offset: 0x1C87674
    ::System::Security::Cryptography::X509Certificates::X509Store* get_UserRootStore();
    // private System.Security.Cryptography.X509Certificates.X509Store get_LMCAStore()
    // Offset: 0x1C878BC
    ::System::Security::Cryptography::X509Certificates::X509Store* get_LMCAStore();
    // private System.Security.Cryptography.X509Certificates.X509Store get_UserCAStore()
    // Offset: 0x1C879B0
    ::System::Security::Cryptography::X509Certificates::X509Store* get_UserCAStore();
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_CertificateCollection()
    // Offset: 0x1C87EF4
    ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* get_CertificateCollection();
    // public System.Void .ctor(System.Boolean useMachineContext)
    // Offset: 0x1C86A70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509ChainImplMono* New_ctor(bool useMachineContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::X509Certificates::X509ChainImplMono::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509ChainImplMono*, creationType>(useMachineContext)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1C8A004
    static void _cctor();
    // private System.Security.Cryptography.X509Certificates.X509ChainStatusFlags BuildChainFrom(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C87154
    ::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags BuildChainFrom(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2 SelectBestFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2 child, System.Security.Cryptography.X509Certificates.X509Certificate2Collection c)
    // Offset: 0x1C8836C
    ::System::Security::Cryptography::X509Certificates::X509Certificate2* SelectBestFromCollection(::System::Security::Cryptography::X509Certificates::X509Certificate2* child, ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* c);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2 FindParent(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C88170
    ::System::Security::Cryptography::X509Certificates::X509Certificate2* FindParent(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // private System.Boolean IsChainComplete(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C88294
    bool IsChainComplete(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // private System.Boolean IsSelfIssued(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C88644
    bool IsSelfIssued(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // private System.Void ValidateChain(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flag)
    // Offset: 0x1C87240
    void ValidateChain(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flag);
    // private System.Void Process(System.Int32 n)
    // Offset: 0x1C88690
    void Process(int n);
    // private System.Void PrepareForNextCertificate(System.Int32 n)
    // Offset: 0x1C88958
    void PrepareForNextCertificate(int n);
    // private System.Void WrapUp()
    // Offset: 0x1C88D54
    void WrapUp();
    // private System.Void ProcessCertificateExtensions(System.Security.Cryptography.X509Certificates.X509ChainElement element)
    // Offset: 0x1C88E30
    void ProcessCertificateExtensions(::System::Security::Cryptography::X509Certificates::X509ChainElement* element);
    // private System.Boolean IsSignedWith(System.Security.Cryptography.X509Certificates.X509Certificate2 signed, System.Security.Cryptography.AsymmetricAlgorithm pubkey)
    // Offset: 0x1C88DE4
    bool IsSignedWith(::System::Security::Cryptography::X509Certificates::X509Certificate2* _signed, ::System::Security::Cryptography::AsymmetricAlgorithm* pubkey);
    // private System.String GetSubjectKeyIdentifier(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C885A4
    ::StringW GetSubjectKeyIdentifier(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // static private System.String GetAuthorityKeyIdentifier(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C88508
    static ::StringW GetAuthorityKeyIdentifier(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // static private System.String GetAuthorityKeyIdentifier(Mono.Security.X509.X509Crl crl)
    // Offset: 0x1C89274
    static ::StringW GetAuthorityKeyIdentifier(::Mono::Security::X509::X509Crl* crl);
    // static private System.String GetAuthorityKeyIdentifier(Mono.Security.X509.X509Extension ext)
    // Offset: 0x1C89124
    static ::StringW GetAuthorityKeyIdentifier(::Mono::Security::X509::X509Extension* ext);
    // private System.Void CheckRevocationOnChain(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flag)
    // Offset: 0x1C88B3C
    void CheckRevocationOnChain(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flag);
    // private System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CheckRevocation(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Int32 ca, System.Boolean online)
    // Offset: 0x1C89304
    ::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags CheckRevocation(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, int ca, bool online);
    // private System.Security.Cryptography.X509Certificates.X509ChainStatusFlags CheckRevocation(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Security.Cryptography.X509Certificates.X509Certificate2 ca_cert, System.Boolean online)
    // Offset: 0x1C893E0
    ::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags CheckRevocation(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::System::Security::Cryptography::X509Certificates::X509Certificate2* ca_cert, bool online);
    // static private Mono.Security.X509.X509Crl CheckCrls(System.String subject, System.String ski, Mono.Security.X509.X509Store store)
    // Offset: 0x1C89CD8
    static ::Mono::Security::X509::X509Crl* CheckCrls(::StringW subject, ::StringW ski, ::Mono::Security::X509::X509Store* store);
    // private Mono.Security.X509.X509Crl FindCrl(System.Security.Cryptography.X509Certificates.X509Certificate2 caCertificate)
    // Offset: 0x1C895B8
    ::Mono::Security::X509::X509Crl* FindCrl(::System::Security::Cryptography::X509Certificates::X509Certificate2* caCertificate);
    // private System.Boolean ProcessCrlExtensions(Mono.Security.X509.X509Crl crl)
    // Offset: 0x1C89A04
    bool ProcessCrlExtensions(::Mono::Security::X509::X509Crl* crl);
    // private System.Boolean ProcessCrlEntryExtensions(Mono.Security.X509.X509Crl/Mono.Security.X509.X509CrlEntry entry)
    // Offset: 0x1C8975C
    bool ProcessCrlEntryExtensions(::Mono::Security::X509::X509Crl::X509CrlEntry* entry);
    // public override System.Boolean get_IsValid()
    // Offset: 0x1C86B4C
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Boolean X509ChainImpl::get_IsValid()
    bool get_IsValid();
    // public override System.Security.Cryptography.X509Certificates.X509ChainElementCollection get_ChainElements()
    // Offset: 0x1C86B54
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Security.Cryptography.X509Certificates.X509ChainElementCollection X509ChainImpl::get_ChainElements()
    ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* get_ChainElements();
    // public override System.Security.Cryptography.X509Certificates.X509ChainPolicy get_ChainPolicy()
    // Offset: 0x1C86B5C
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Security.Cryptography.X509Certificates.X509ChainPolicy X509ChainImpl::get_ChainPolicy()
    ::System::Security::Cryptography::X509Certificates::X509ChainPolicy* get_ChainPolicy();
    // public override System.Void set_ChainPolicy(System.Security.Cryptography.X509Certificates.X509ChainPolicy value)
    // Offset: 0x1C86B64
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::set_ChainPolicy(System.Security.Cryptography.X509Certificates.X509ChainPolicy value)
    void set_ChainPolicy(::System::Security::Cryptography::X509Certificates::X509ChainPolicy* value);
    // public override System.Security.Cryptography.X509Certificates.X509ChainStatus[] get_ChainStatus()
    // Offset: 0x1C86B6C
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Security.Cryptography.X509Certificates.X509ChainStatus[] X509ChainImpl::get_ChainStatus()
    ::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> get_ChainStatus();
    // public override System.Boolean Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1C86BE0
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Boolean X509ChainImpl::Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    bool Build(::System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // public override System.Void Reset()
    // Offset: 0x1C87390
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::Reset()
    void Reset();
  }; // System.Security.Cryptography.X509Certificates.X509ChainImplMono
  #pragma pack(pop)
  static check_size<sizeof(X509ChainImplMono), 128 + sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)> __System_Security_Cryptography_X509Certificates_X509ChainImplMonoSizeCheck;
  static_assert(sizeof(X509ChainImplMono) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_Roots
// Il2CppName: get_Roots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_Roots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_Roots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateAuthorities
// Il2CppName: get_CertificateAuthorities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateAuthorities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_CertificateAuthorities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMRootStore
// Il2CppName: get_LMRootStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Store* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMRootStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_LMRootStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserRootStore
// Il2CppName: get_UserRootStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Store* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserRootStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_UserRootStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMCAStore
// Il2CppName: get_LMCAStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Store* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_LMCAStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_LMCAStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserCAStore
// Il2CppName: get_UserCAStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Store* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_UserCAStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_UserCAStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateCollection
// Il2CppName: get_CertificateCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_CertificateCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_CertificateCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::BuildChainFrom
// Il2CppName: BuildChainFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::BuildChainFrom)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "BuildChainFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::SelectBestFromCollection
// Il2CppName: SelectBestFromCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*, ::System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::SelectBestFromCollection)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2Collection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "SelectBestFromCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, c});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindParent
// Il2CppName: FindParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate2* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindParent)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "FindParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsChainComplete
// Il2CppName: IsChainComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsChainComplete)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "IsChainComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSelfIssued
// Il2CppName: IsSelfIssued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSelfIssued)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "IsSelfIssued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::ValidateChain
// Il2CppName: ValidateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::ValidateChain)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "ValidateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(int)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::Process)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::PrepareForNextCertificate
// Il2CppName: PrepareForNextCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(int)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::PrepareForNextCertificate)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "PrepareForNextCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::WrapUp
// Il2CppName: WrapUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::WrapUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "WrapUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCertificateExtensions
// Il2CppName: ProcessCertificateExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509ChainElement*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCertificateExtensions)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "ProcessCertificateExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSignedWith
// Il2CppName: IsSignedWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*, ::System::Security::Cryptography::AsymmetricAlgorithm*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::IsSignedWith)> {
  static const MethodInfo* get() {
    static auto* _signed = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    static auto* pubkey = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "AsymmetricAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "IsSignedWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_signed, pubkey});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetSubjectKeyIdentifier
// Il2CppName: GetSubjectKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetSubjectKeyIdentifier)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "GetSubjectKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Mono::Security::X509::X509Crl*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  static const MethodInfo* get() {
    static auto* crl = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Crl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{crl});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier
// Il2CppName: GetAuthorityKeyIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Mono::Security::X509::X509Extension*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::GetAuthorityKeyIdentifier)> {
  static const MethodInfo* get() {
    static auto* ext = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Extension")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "GetAuthorityKeyIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ext});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocationOnChain
// Il2CppName: CheckRevocationOnChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocationOnChain)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainStatusFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "CheckRevocationOnChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation
// Il2CppName: CheckRevocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*, int, bool)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    static auto* ca = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* online = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "CheckRevocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, ca, online});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation
// Il2CppName: CheckRevocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainStatusFlags (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*, ::System::Security::Cryptography::X509Certificates::X509Certificate2*, bool)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckRevocation)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    static auto* ca_cert = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    static auto* online = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "CheckRevocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate, ca_cert, online});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckCrls
// Il2CppName: CheckCrls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl* (*)(::StringW, ::StringW, ::Mono::Security::X509::X509Store*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::CheckCrls)> {
  static const MethodInfo* get() {
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ski = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* store = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Store")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "CheckCrls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subject, ski, store});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindCrl
// Il2CppName: FindCrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::X509::X509Crl* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::FindCrl)> {
  static const MethodInfo* get() {
    static auto* caCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "FindCrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caCertificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlExtensions
// Il2CppName: ProcessCrlExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::Mono::Security::X509::X509Crl*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlExtensions)> {
  static const MethodInfo* get() {
    static auto* crl = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Crl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "ProcessCrlExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{crl});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlEntryExtensions
// Il2CppName: ProcessCrlEntryExtensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::Mono::Security::X509::X509Crl::X509CrlEntry*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::ProcessCrlEntryExtensions)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Mono.Security.X509", "X509Crl/X509CrlEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "ProcessCrlEntryExtensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainElements
// Il2CppName: get_ChainElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_ChainElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainPolicy
// Il2CppName: get_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509ChainPolicy* (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainPolicy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy
// Il2CppName: set_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainPolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "set_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainStatus
// Il2CppName: get_ChainStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_ChainStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_ChainStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::Build)> {
  static const MethodInfo* get() {
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificate});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
