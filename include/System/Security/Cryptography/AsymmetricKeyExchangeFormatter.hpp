// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricKeyExchangeFormatter
  class AsymmetricKeyExchangeFormatter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::AsymmetricKeyExchangeFormatter);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::AsymmetricKeyExchangeFormatter*, "System.Security.Cryptography", "AsymmetricKeyExchangeFormatter");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 8F3574
  class AsymmetricKeyExchangeFormatter : public ::Il2CppObject {
    public:
    // public System.String get_Parameters()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Parameters();
    // public System.Void SetKey(System.Security.Cryptography.AsymmetricAlgorithm key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetKey(::System::Security::Cryptography::AsymmetricAlgorithm* key);
    // public System.Byte[] CreateKeyExchange(System.Byte[] data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<uint8_t> CreateKeyExchange(::ArrayW<uint8_t> data);
    // public System.Byte[] CreateKeyExchange(System.Byte[] data, System.Type symAlgType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<uint8_t> CreateKeyExchange(::ArrayW<uint8_t> data, ::System::Type* symAlgType);
    // protected System.Void .ctor()
    // Offset: 0x12A262C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsymmetricKeyExchangeFormatter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::AsymmetricKeyExchangeFormatter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsymmetricKeyExchangeFormatter*, creationType>()));
    }
  }; // System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::AsymmetricKeyExchangeFormatter::get_Parameters
// Il2CppName: get_Parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Cryptography::AsymmetricKeyExchangeFormatter::*)()>(&System::Security::Cryptography::AsymmetricKeyExchangeFormatter::get_Parameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AsymmetricKeyExchangeFormatter*), "get_Parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AsymmetricKeyExchangeFormatter::SetKey
// Il2CppName: SetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::AsymmetricKeyExchangeFormatter::*)(::System::Security::Cryptography::AsymmetricAlgorithm*)>(&System::Security::Cryptography::AsymmetricKeyExchangeFormatter::SetKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography", "AsymmetricAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AsymmetricKeyExchangeFormatter*), "SetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AsymmetricKeyExchangeFormatter::CreateKeyExchange
// Il2CppName: CreateKeyExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::AsymmetricKeyExchangeFormatter::*)(::ArrayW<uint8_t>)>(&System::Security::Cryptography::AsymmetricKeyExchangeFormatter::CreateKeyExchange)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AsymmetricKeyExchangeFormatter*), "CreateKeyExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AsymmetricKeyExchangeFormatter::CreateKeyExchange
// Il2CppName: CreateKeyExchange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::AsymmetricKeyExchangeFormatter::*)(::ArrayW<uint8_t>, ::System::Type*)>(&System::Security::Cryptography::AsymmetricKeyExchangeFormatter::CreateKeyExchange)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* symAlgType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::AsymmetricKeyExchangeFormatter*), "CreateKeyExchange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, symAlgType});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::AsymmetricKeyExchangeFormatter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
