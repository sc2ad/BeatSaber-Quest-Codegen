// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: SHA1Internal
  class SHA1Internal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::SHA1Internal);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::SHA1Internal*, "System.Security.Cryptography", "SHA1Internal");
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.SHA1Internal
  // [TokenAttribute] Offset: FFFFFFFF
  class SHA1Internal : public ::Il2CppObject {
    public:
    public:
    // private System.UInt32[] _H
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint> H;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.UInt64 count
    // Size: 0x8
    // Offset: 0x18
    uint64_t count;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private System.Byte[] _ProcessingBuffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> ProcessingBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _ProcessingBufferCount
    // Size: 0x4
    // Offset: 0x28
    int ProcessingBufferCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ProcessingBufferCount and: buff
    char __padding3[0x4] = {};
    // private System.UInt32[] buff
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint> buff;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    public:
    // Get instance field reference: private System.UInt32[] _H
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn__H();
    // Get instance field reference: private System.UInt64 count
    [[deprecated("Use field access instead!")]] uint64_t& dyn_count();
    // Get instance field reference: private System.Byte[] _ProcessingBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__ProcessingBuffer();
    // Get instance field reference: private System.Int32 _ProcessingBufferCount
    [[deprecated("Use field access instead!")]] int& dyn__ProcessingBufferCount();
    // Get instance field reference: private System.UInt32[] buff
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_buff();
    // public System.Void HashCore(System.Byte[] rgb, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0x24F4DD4
    void HashCore(::ArrayW<uint8_t> rgb, int ibStart, int cbSize);
    // public System.Byte[] HashFinal()
    // Offset: 0x24F4EF8
    ::ArrayW<uint8_t> HashFinal();
    // public System.Void Initialize()
    // Offset: 0x24F5004
    void Initialize();
    // private System.Void ProcessBlock(System.Byte[] inputBuffer, System.UInt32 inputOffset)
    // Offset: 0x24F50C8
    void ProcessBlock(::ArrayW<uint8_t> inputBuffer, uint inputOffset);
    // static private System.Void InitialiseBuff(System.UInt32[] buff, System.Byte[] input, System.UInt32 inputOffset)
    // Offset: 0x24F57A4
    static void InitialiseBuff(::ArrayW<uint> buff, ::ArrayW<uint8_t> input, uint inputOffset);
    // static private System.Void FillBuff(System.UInt32[] buff)
    // Offset: 0x24F5E8C
    static void FillBuff(::ArrayW<uint> buff);
    // private System.Void ProcessFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x24F55EC
    void ProcessFinalBlock(::ArrayW<uint8_t> inputBuffer, int inputOffset, int inputCount);
    // System.Void AddLength(System.UInt64 length, System.Byte[] buffer, System.Int32 position)
    // Offset: 0x24F60CC
    void AddLength(uint64_t length, ::ArrayW<uint8_t> buffer, int position);
    // public System.Void .ctor()
    // Offset: 0x24F4C64
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SHA1Internal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::SHA1Internal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SHA1Internal*, creationType>()));
    }
  }; // System.Security.Cryptography.SHA1Internal
  #pragma pack(pop)
  static check_size<sizeof(SHA1Internal), 48 + sizeof(::ArrayW<uint>)> __System_Security_Cryptography_SHA1InternalSizeCheck;
  static_assert(sizeof(SHA1Internal) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::HashCore
// Il2CppName: HashCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::SHA1Internal::*)(::ArrayW<uint8_t>, int, int)>(&System::Security::Cryptography::SHA1Internal::HashCore)> {
  static const MethodInfo* get() {
    static auto* rgb = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* ibStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cbSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "HashCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb, ibStart, cbSize});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::HashFinal
// Il2CppName: HashFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Security::Cryptography::SHA1Internal::*)()>(&System::Security::Cryptography::SHA1Internal::HashFinal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "HashFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::SHA1Internal::*)()>(&System::Security::Cryptography::SHA1Internal::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::ProcessBlock
// Il2CppName: ProcessBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::SHA1Internal::*)(::ArrayW<uint8_t>, uint)>(&System::Security::Cryptography::SHA1Internal::ProcessBlock)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inputOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "ProcessBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer, inputOffset});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::InitialiseBuff
// Il2CppName: InitialiseBuff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ::ArrayW<uint8_t>, uint)>(&System::Security::Cryptography::SHA1Internal::InitialiseBuff)> {
  static const MethodInfo* get() {
    static auto* buff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inputOffset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "InitialiseBuff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buff, input, inputOffset});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::FillBuff
// Il2CppName: FillBuff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>)>(&System::Security::Cryptography::SHA1Internal::FillBuff)> {
  static const MethodInfo* get() {
    static auto* buff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "FillBuff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buff});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::ProcessFinalBlock
// Il2CppName: ProcessFinalBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::SHA1Internal::*)(::ArrayW<uint8_t>, int, int)>(&System::Security::Cryptography::SHA1Internal::ProcessFinalBlock)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inputOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "ProcessFinalBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer, inputOffset, inputCount});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::AddLength
// Il2CppName: AddLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::SHA1Internal::*)(uint64_t, ::ArrayW<uint8_t>, int)>(&System::Security::Cryptography::SHA1Internal::AddLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::SHA1Internal*), "AddLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length, buffer, position});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::SHA1Internal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
