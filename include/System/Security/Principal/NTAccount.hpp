// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Principal.IdentityReference
#include "System/Security/Principal/IdentityReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Security.Principal
namespace System::Security::Principal {
  // Forward declaring type: NTAccount
  class NTAccount;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Principal::NTAccount);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Principal::NTAccount*, "System.Security.Principal", "NTAccount");
// Type namespace: System.Security.Principal
namespace System::Security::Principal {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Principal.NTAccount
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 107925C
  class NTAccount : public ::System::Security::Principal::IdentityReference {
    public:
    public:
    // private System.String _value
    // Size: 0x8
    // Offset: 0x10
    ::StringW value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return value;
    }
    // Get instance field reference: private System.String _value
    [[deprecated("Use field access instead!")]] ::StringW& dyn__value();
    // public System.Void .ctor(System.String name)
    // Offset: 0x1C03FA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NTAccount* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Principal::NTAccount::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NTAccount*, creationType>(name)));
    }
    // public override System.String get_Value()
    // Offset: 0x1C040A4
    // Implemented from: System.Security.Principal.IdentityReference
    // Base method: System.String IdentityReference::get_Value()
    ::StringW get_Value();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x1C040AC
    // Implemented from: System.Security.Principal.IdentityReference
    // Base method: System.Boolean IdentityReference::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1C041BC
    // Implemented from: System.Security.Principal.IdentityReference
    // Base method: System.Int32 IdentityReference::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1C041E8
    // Implemented from: System.Security.Principal.IdentityReference
    // Base method: System.String IdentityReference::ToString()
    ::StringW ToString();
    // public override System.Security.Principal.IdentityReference Translate(System.Type targetType)
    // Offset: 0x1C041F4
    // Implemented from: System.Security.Principal.IdentityReference
    // Base method: System.Security.Principal.IdentityReference IdentityReference::Translate(System.Type targetType)
    ::System::Security::Principal::IdentityReference* Translate(::System::Type* targetType);
  }; // System.Security.Principal.NTAccount
  #pragma pack(pop)
  static check_size<sizeof(NTAccount), 16 + sizeof(::StringW)> __System_Security_Principal_NTAccountSizeCheck;
  static_assert(sizeof(NTAccount) == 0x18);
  // static public System.Boolean op_Equality(System.Security.Principal.NTAccount left, System.Security.Principal.NTAccount right)
  // Offset: 0x1C04154
  bool operator ==(::System::Security::Principal::NTAccount* left, ::System::Security::Principal::NTAccount& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Principal::NTAccount::*)()>(&System::Security::Principal::NTAccount::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::NTAccount*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Principal::NTAccount::*)(::Il2CppObject*)>(&System::Security::Principal::NTAccount::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::NTAccount*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::Principal::NTAccount::*)()>(&System::Security::Principal::NTAccount::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::NTAccount*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::Principal::NTAccount::*)()>(&System::Security::Principal::NTAccount::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::NTAccount*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Principal::IdentityReference* (System::Security::Principal::NTAccount::*)(::System::Type*)>(&System::Security::Principal::NTAccount::Translate)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Principal::NTAccount*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType});
  }
};
// Writing MetadataGetter for method: System::Security::Principal::NTAccount::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
