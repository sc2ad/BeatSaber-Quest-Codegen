// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.PermissionSet
#include "System/Security/PermissionSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security
namespace System::Security {
  // Forward declaring type: SecurityElement
  class SecurityElement;
}
// Completed forward declares
// Type namespace: System.Security
namespace System::Security {
  // Forward declaring type: NamedPermissionSet
  class NamedPermissionSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::NamedPermissionSet);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::NamedPermissionSet*, "System.Security", "NamedPermissionSet");
// Type namespace: System.Security
namespace System::Security {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.NamedPermissionSet
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1078E50
  class NamedPermissionSet : public ::System::Security::PermissionSet {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x30
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String description
    // Size: 0x8
    // Offset: 0x38
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // public System.String get_Name()
    // Offset: 0x1C01DE4
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x1C01D18
    void set_Name(::StringW value);
    // public System.Void .ctor(System.String name, System.Security.Permissions.PermissionState state)
    // Offset: 0x1C01C4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamedPermissionSet* New_ctor(::StringW name, ::System::Security::Permissions::PermissionState state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::NamedPermissionSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamedPermissionSet*, creationType>(name, state)));
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0x1C01DDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamedPermissionSet* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::NamedPermissionSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamedPermissionSet*, creationType>(name)));
    }
    // System.Void .ctor()
    // Offset: 0x1C01B7C
    // Implemented from: System.Security.PermissionSet
    // Base method: System.Void PermissionSet::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamedPermissionSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::NamedPermissionSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamedPermissionSet*, creationType>()));
    }
    // public override System.Security.SecurityElement ToXml()
    // Offset: 0x1C01DEC
    // Implemented from: System.Security.PermissionSet
    // Base method: System.Security.SecurityElement PermissionSet::ToXml()
    ::System::Security::SecurityElement* ToXml();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1C02388
    // Implemented from: System.Security.PermissionSet
    // Base method: System.Boolean PermissionSet::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1C025D4
    // Implemented from: System.Security.PermissionSet
    // Base method: System.Int32 PermissionSet::GetHashCode()
    int GetHashCode();
  }; // System.Security.NamedPermissionSet
  #pragma pack(pop)
  static check_size<sizeof(NamedPermissionSet), 56 + sizeof(::StringW)> __System_Security_NamedPermissionSetSizeCheck;
  static_assert(sizeof(NamedPermissionSet) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Security::NamedPermissionSet::*)()>(&System::Security::NamedPermissionSet::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::NamedPermissionSet*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::NamedPermissionSet::*)(::StringW)>(&System::Security::NamedPermissionSet::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::NamedPermissionSet*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::SecurityElement* (System::Security::NamedPermissionSet::*)()>(&System::Security::NamedPermissionSet::ToXml)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::NamedPermissionSet*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::NamedPermissionSet::*)(::Il2CppObject*)>(&System::Security::NamedPermissionSet::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::NamedPermissionSet*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Security::NamedPermissionSet::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Security::NamedPermissionSet::*)()>(&System::Security::NamedPermissionSet::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::NamedPermissionSet*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
