// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IConsoleDriver
#include "System/IConsoleDriver.hpp"
// Including type: System.ConsoleColor
#include "System/ConsoleColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TermInfoReader
  class TermInfoReader;
  // Forward declaring type: ByteMatcher
  class ByteMatcher;
  // Forward declaring type: ConsoleKeyInfo
  struct ConsoleKeyInfo;
  // Forward declaring type: TermInfoStrings
  struct TermInfoStrings;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamReader
  class StreamReader;
  // Forward declaring type: CStreamWriter
  class CStreamWriter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: TermInfoDriver
  class TermInfoDriver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::TermInfoDriver);
DEFINE_IL2CPP_ARG_TYPE(::System::TermInfoDriver*, "System", "TermInfoDriver");
// Type namespace: System
namespace System {
  // Size: 0x11C
  #pragma pack(push, 1)
  // Autogenerated type: System.TermInfoDriver
  // [TokenAttribute] Offset: FFFFFFFF
  class TermInfoDriver : public ::Il2CppObject/*, public ::System::IConsoleDriver*/ {
    public:
    public:
    // private System.TermInfoReader reader
    // Size: 0x8
    // Offset: 0x10
    ::System::TermInfoReader* reader;
    // Field size check
    static_assert(sizeof(::System::TermInfoReader*) == 0x8);
    // private System.Int32 cursorLeft
    // Size: 0x4
    // Offset: 0x18
    int cursorLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 cursorTop
    // Size: 0x4
    // Offset: 0x1C
    int cursorTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String title
    // Size: 0x8
    // Offset: 0x20
    ::StringW title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String titleFormat
    // Size: 0x8
    // Offset: 0x28
    ::StringW titleFormat;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean cursorVisible
    // Size: 0x1
    // Offset: 0x30
    bool cursorVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cursorVisible and: csrVisible
    char __padding5[0x7] = {};
    // private System.String csrVisible
    // Size: 0x8
    // Offset: 0x38
    ::StringW csrVisible;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String csrInvisible
    // Size: 0x8
    // Offset: 0x40
    ::StringW csrInvisible;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String clear
    // Size: 0x8
    // Offset: 0x48
    ::StringW clear;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String bell
    // Size: 0x8
    // Offset: 0x50
    ::StringW bell;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String term
    // Size: 0x8
    // Offset: 0x58
    ::StringW term;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.IO.StreamReader stdin
    // Size: 0x8
    // Offset: 0x60
    ::System::IO::StreamReader* stdin;
    // Field size check
    static_assert(sizeof(::System::IO::StreamReader*) == 0x8);
    // private System.IO.CStreamWriter stdout
    // Size: 0x8
    // Offset: 0x68
    ::System::IO::CStreamWriter* stdout;
    // Field size check
    static_assert(sizeof(::System::IO::CStreamWriter*) == 0x8);
    // private System.Int32 windowWidth
    // Size: 0x4
    // Offset: 0x70
    int windowWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 windowHeight
    // Size: 0x4
    // Offset: 0x74
    int windowHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bufferHeight
    // Size: 0x4
    // Offset: 0x78
    int bufferHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bufferWidth
    // Size: 0x4
    // Offset: 0x7C
    int bufferWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char[] buffer
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::Il2CppChar> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 readpos
    // Size: 0x4
    // Offset: 0x88
    int readpos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 writepos
    // Size: 0x4
    // Offset: 0x8C
    int writepos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String keypadXmit
    // Size: 0x8
    // Offset: 0x90
    ::StringW keypadXmit;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String keypadLocal
    // Size: 0x8
    // Offset: 0x98
    ::StringW keypadLocal;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean inited
    // Size: 0x1
    // Offset: 0xA0
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inited and: initLock
    char __padding22[0x7] = {};
    // private System.Object initLock
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppObject* initLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean initKeys
    // Size: 0x1
    // Offset: 0xB0
    bool initKeys;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initKeys and: origPair
    char __padding24[0x7] = {};
    // private System.String origPair
    // Size: 0x8
    // Offset: 0xB8
    ::StringW origPair;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String origColors
    // Size: 0x8
    // Offset: 0xC0
    ::StringW origColors;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String cursorAddress
    // Size: 0x8
    // Offset: 0xC8
    ::StringW cursorAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.ConsoleColor fgcolor
    // Size: 0x4
    // Offset: 0xD0
    ::System::ConsoleColor fgcolor;
    // Field size check
    static_assert(sizeof(::System::ConsoleColor) == 0x4);
    // Padding between fields: fgcolor and: setfgcolor
    char __padding28[0x4] = {};
    // private System.String setfgcolor
    // Size: 0x8
    // Offset: 0xD8
    ::StringW setfgcolor;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String setbgcolor
    // Size: 0x8
    // Offset: 0xE0
    ::StringW setbgcolor;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 maxColors
    // Size: 0x4
    // Offset: 0xE8
    int maxColors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean noGetPosition
    // Size: 0x1
    // Offset: 0xEC
    bool noGetPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noGetPosition and: keymap
    char __padding32[0x3] = {};
    // private System.Collections.Hashtable keymap
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Hashtable* keymap;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.ByteMatcher rootmap
    // Size: 0x8
    // Offset: 0xF8
    ::System::ByteMatcher* rootmap;
    // Field size check
    static_assert(sizeof(::System::ByteMatcher*) == 0x8);
    // private System.Int32 rl_startx
    // Size: 0x4
    // Offset: 0x100
    int rl_startx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rl_starty
    // Size: 0x4
    // Offset: 0x104
    int rl_starty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte[] control_characters
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<uint8_t> control_characters;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Char[] echobuf
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::Il2CppChar> echobuf;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 echon
    // Size: 0x4
    // Offset: 0x118
    int echon;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IConsoleDriver
    operator ::System::IConsoleDriver() noexcept {
      return *reinterpret_cast<::System::IConsoleDriver*>(this);
    }
    // Creating interface conversion operator: i_IConsoleDriver
    inline ::System::IConsoleDriver* i_IConsoleDriver() noexcept {
      return reinterpret_cast<::System::IConsoleDriver*>(this);
    }
    // Get static field: static private System.Int32* native_terminal_size
    static int* _get_native_terminal_size();
    // Set static field: static private System.Int32* native_terminal_size
    static void _set_native_terminal_size(int* value);
    // Get static field: static private System.Int32 terminal_size
    static int _get_terminal_size();
    // Set static field: static private System.Int32 terminal_size
    static void _set_terminal_size(int value);
    // Get static field: static private readonly System.String[] locations
    static ::ArrayW<::StringW> _get_locations();
    // Set static field: static private readonly System.String[] locations
    static void _set_locations(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.Int32[] _consoleColorToAnsiCode
    static ::ArrayW<int> _get__consoleColorToAnsiCode();
    // Set static field: static private readonly System.Int32[] _consoleColorToAnsiCode
    static void _set__consoleColorToAnsiCode(::ArrayW<int> value);
    // Get instance field reference: private System.TermInfoReader reader
    [[deprecated("Use field access instead!")]] ::System::TermInfoReader*& dyn_reader();
    // Get instance field reference: private System.Int32 cursorLeft
    [[deprecated("Use field access instead!")]] int& dyn_cursorLeft();
    // Get instance field reference: private System.Int32 cursorTop
    [[deprecated("Use field access instead!")]] int& dyn_cursorTop();
    // Get instance field reference: private System.String title
    [[deprecated("Use field access instead!")]] ::StringW& dyn_title();
    // Get instance field reference: private System.String titleFormat
    [[deprecated("Use field access instead!")]] ::StringW& dyn_titleFormat();
    // Get instance field reference: private System.Boolean cursorVisible
    [[deprecated("Use field access instead!")]] bool& dyn_cursorVisible();
    // Get instance field reference: private System.String csrVisible
    [[deprecated("Use field access instead!")]] ::StringW& dyn_csrVisible();
    // Get instance field reference: private System.String csrInvisible
    [[deprecated("Use field access instead!")]] ::StringW& dyn_csrInvisible();
    // Get instance field reference: private System.String clear
    [[deprecated("Use field access instead!")]] ::StringW& dyn_clear();
    // Get instance field reference: private System.String bell
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bell();
    // Get instance field reference: private System.String term
    [[deprecated("Use field access instead!")]] ::StringW& dyn_term();
    // Get instance field reference: private System.IO.StreamReader stdin
    [[deprecated("Use field access instead!")]] ::System::IO::StreamReader*& dyn_stdin();
    // Get instance field reference: private System.IO.CStreamWriter stdout
    [[deprecated("Use field access instead!")]] ::System::IO::CStreamWriter*& dyn_stdout();
    // Get instance field reference: private System.Int32 windowWidth
    [[deprecated("Use field access instead!")]] int& dyn_windowWidth();
    // Get instance field reference: private System.Int32 windowHeight
    [[deprecated("Use field access instead!")]] int& dyn_windowHeight();
    // Get instance field reference: private System.Int32 bufferHeight
    [[deprecated("Use field access instead!")]] int& dyn_bufferHeight();
    // Get instance field reference: private System.Int32 bufferWidth
    [[deprecated("Use field access instead!")]] int& dyn_bufferWidth();
    // Get instance field reference: private System.Char[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_buffer();
    // Get instance field reference: private System.Int32 readpos
    [[deprecated("Use field access instead!")]] int& dyn_readpos();
    // Get instance field reference: private System.Int32 writepos
    [[deprecated("Use field access instead!")]] int& dyn_writepos();
    // Get instance field reference: private System.String keypadXmit
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keypadXmit();
    // Get instance field reference: private System.String keypadLocal
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keypadLocal();
    // Get instance field reference: private System.Boolean inited
    [[deprecated("Use field access instead!")]] bool& dyn_inited();
    // Get instance field reference: private System.Object initLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_initLock();
    // Get instance field reference: private System.Boolean initKeys
    [[deprecated("Use field access instead!")]] bool& dyn_initKeys();
    // Get instance field reference: private System.String origPair
    [[deprecated("Use field access instead!")]] ::StringW& dyn_origPair();
    // Get instance field reference: private System.String origColors
    [[deprecated("Use field access instead!")]] ::StringW& dyn_origColors();
    // Get instance field reference: private System.String cursorAddress
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cursorAddress();
    // Get instance field reference: private System.ConsoleColor fgcolor
    [[deprecated("Use field access instead!")]] ::System::ConsoleColor& dyn_fgcolor();
    // Get instance field reference: private System.String setfgcolor
    [[deprecated("Use field access instead!")]] ::StringW& dyn_setfgcolor();
    // Get instance field reference: private System.String setbgcolor
    [[deprecated("Use field access instead!")]] ::StringW& dyn_setbgcolor();
    // Get instance field reference: private System.Int32 maxColors
    [[deprecated("Use field access instead!")]] int& dyn_maxColors();
    // Get instance field reference: private System.Boolean noGetPosition
    [[deprecated("Use field access instead!")]] bool& dyn_noGetPosition();
    // Get instance field reference: private System.Collections.Hashtable keymap
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_keymap();
    // Get instance field reference: private System.ByteMatcher rootmap
    [[deprecated("Use field access instead!")]] ::System::ByteMatcher*& dyn_rootmap();
    // Get instance field reference: private System.Int32 rl_startx
    [[deprecated("Use field access instead!")]] int& dyn_rl_startx();
    // Get instance field reference: private System.Int32 rl_starty
    [[deprecated("Use field access instead!")]] int& dyn_rl_starty();
    // Get instance field reference: private System.Byte[] control_characters
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_control_characters();
    // Get instance field reference: private System.Char[] echobuf
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_echobuf();
    // Get instance field reference: private System.Int32 echon
    [[deprecated("Use field access instead!")]] int& dyn_echon();
    // public System.Boolean get_Initialized()
    // Offset: 0x2132784
    bool get_Initialized();
    // public System.Int32 get_WindowHeight()
    // Offset: 0x2133274
    int get_WindowHeight();
    // public System.Int32 get_WindowWidth()
    // Offset: 0x213323C
    int get_WindowWidth();
    // public System.Void .ctor(System.String term)
    // Offset: 0x2132140
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TermInfoDriver* New_ctor(::StringW term) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::TermInfoDriver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TermInfoDriver*, creationType>(term)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2136764
    static void _cctor();
    // static private System.String TryTermInfoDir(System.String dir, System.String term)
    // Offset: 0x2131E5C
    static ::StringW TryTermInfoDir(::StringW dir, ::StringW term);
    // static private System.String SearchTerminfo(System.String term)
    // Offset: 0x2131FA0
    static ::StringW SearchTerminfo(::StringW term);
    // private System.Void WriteConsole(System.String str)
    // Offset: 0x213211C
    void WriteConsole(::StringW str);
    // public System.Void Init()
    // Offset: 0x213278C
    void Init();
    // private System.Void IncrementX()
    // Offset: 0x21331CC
    void IncrementX();
    // public System.Void WriteSpecialKey(System.ConsoleKeyInfo key)
    // Offset: 0x21332AC
    void WriteSpecialKey(::System::ConsoleKeyInfo key);
    // public System.Void WriteSpecialKey(System.Char c)
    // Offset: 0x2133584
    void WriteSpecialKey(::Il2CppChar c);
    // public System.Boolean IsSpecialKey(System.ConsoleKeyInfo key)
    // Offset: 0x213373C
    bool IsSpecialKey(::System::ConsoleKeyInfo key);
    // public System.Boolean IsSpecialKey(System.Char c)
    // Offset: 0x21337C4
    bool IsSpecialKey(::Il2CppChar c);
    // private System.Void GetCursorPosition()
    // Offset: 0x2132F1C
    void GetCursorPosition();
    // private System.Void CheckWindowDimensions()
    // Offset: 0x2133908
    void CheckWindowDimensions();
    // private System.Void AddToBuffer(System.Int32 b)
    // Offset: 0x21337F8
    void AddToBuffer(int b);
    // private System.Void AdjustBuffer()
    // Offset: 0x2133A68
    void AdjustBuffer();
    // private System.ConsoleKeyInfo CreateKeyInfoFromInt(System.Int32 n, System.Boolean alt)
    // Offset: 0x21335B8
    ::System::ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
    // private System.Object GetKeyFromBuffer(System.Boolean cooked)
    // Offset: 0x2133A7C
    ::Il2CppObject* GetKeyFromBuffer(bool cooked);
    // private System.ConsoleKeyInfo ReadKeyInternal(out System.Boolean fresh)
    // Offset: 0x2133D68
    ::System::ConsoleKeyInfo ReadKeyInternal(ByRef<bool> fresh);
    // private System.Boolean InputPending()
    // Offset: 0x21340A0
    bool InputPending();
    // private System.Void QueueEcho(System.Char c)
    // Offset: 0x21340D0
    void QueueEcho(::Il2CppChar c);
    // private System.Void Echo(System.ConsoleKeyInfo key)
    // Offset: 0x21341C8
    void Echo(::System::ConsoleKeyInfo key);
    // private System.Void EchoFlush()
    // Offset: 0x213422C
    void EchoFlush();
    // public System.Int32 Read(in System.Char[] dest, System.Int32 index, System.Int32 count)
    // Offset: 0x213426C
    int Read(ByRef<::ArrayW<::Il2CppChar>> dest, int index, int count);
    // public System.ConsoleKeyInfo ReadKey(System.Boolean intercept)
    // Offset: 0x2134590
    ::System::ConsoleKeyInfo ReadKey(bool intercept);
    // public System.String ReadLine()
    // Offset: 0x21345F8
    ::StringW ReadLine();
    // public System.String ReadToEnd()
    // Offset: 0x21347E8
    ::StringW ReadToEnd();
    // private System.String ReadUntilConditionInternal(System.Boolean haltOnNewLine)
    // Offset: 0x2134600
    ::StringW ReadUntilConditionInternal(bool haltOnNewLine);
    // public System.Void SetCursorPosition(System.Int32 left, System.Int32 top)
    // Offset: 0x21333D4
    void SetCursorPosition(int left, int top);
    // private System.Void CreateKeyMap()
    // Offset: 0x21347F0
    void CreateKeyMap();
    // private System.Void InitKeys()
    // Offset: 0x2133F3C
    void InitKeys();
    // private System.Void AddStringMapping(System.TermInfoStrings s)
    // Offset: 0x2136678
    void AddStringMapping(::System::TermInfoStrings s);
  }; // System.TermInfoDriver
  #pragma pack(pop)
  static check_size<sizeof(TermInfoDriver), 280 + sizeof(int)> __System_TermInfoDriverSizeCheck;
  static_assert(sizeof(TermInfoDriver) == 0x11C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::TermInfoDriver::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TermInfoDriver::*)()>(&System::TermInfoDriver::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::get_WindowHeight
// Il2CppName: get_WindowHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TermInfoDriver::*)()>(&System::TermInfoDriver::get_WindowHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "get_WindowHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::get_WindowWidth
// Il2CppName: get_WindowWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TermInfoDriver::*)()>(&System::TermInfoDriver::get_WindowWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "get_WindowWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::TermInfoDriver::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::TermInfoDriver::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::TryTermInfoDir
// Il2CppName: TryTermInfoDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&System::TermInfoDriver::TryTermInfoDir)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* term = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "TryTermInfoDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir, term});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::SearchTerminfo
// Il2CppName: SearchTerminfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::TermInfoDriver::SearchTerminfo)> {
  static const MethodInfo* get() {
    static auto* term = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "SearchTerminfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{term});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::WriteConsole
// Il2CppName: WriteConsole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::StringW)>(&System::TermInfoDriver::WriteConsole)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "WriteConsole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::IncrementX
// Il2CppName: IncrementX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::IncrementX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "IncrementX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::WriteSpecialKey
// Il2CppName: WriteSpecialKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::System::ConsoleKeyInfo)>(&System::TermInfoDriver::WriteSpecialKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "ConsoleKeyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "WriteSpecialKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::WriteSpecialKey
// Il2CppName: WriteSpecialKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::Il2CppChar)>(&System::TermInfoDriver::WriteSpecialKey)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "WriteSpecialKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::IsSpecialKey
// Il2CppName: IsSpecialKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TermInfoDriver::*)(::System::ConsoleKeyInfo)>(&System::TermInfoDriver::IsSpecialKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "ConsoleKeyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "IsSpecialKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::IsSpecialKey
// Il2CppName: IsSpecialKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TermInfoDriver::*)(::Il2CppChar)>(&System::TermInfoDriver::IsSpecialKey)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "IsSpecialKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::GetCursorPosition
// Il2CppName: GetCursorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::GetCursorPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "GetCursorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::CheckWindowDimensions
// Il2CppName: CheckWindowDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::CheckWindowDimensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "CheckWindowDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::AddToBuffer
// Il2CppName: AddToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(int)>(&System::TermInfoDriver::AddToBuffer)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "AddToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::AdjustBuffer
// Il2CppName: AdjustBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::AdjustBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "AdjustBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::CreateKeyInfoFromInt
// Il2CppName: CreateKeyInfoFromInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ConsoleKeyInfo (System::TermInfoDriver::*)(int, bool)>(&System::TermInfoDriver::CreateKeyInfoFromInt)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* alt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "CreateKeyInfoFromInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n, alt});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::GetKeyFromBuffer
// Il2CppName: GetKeyFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::TermInfoDriver::*)(bool)>(&System::TermInfoDriver::GetKeyFromBuffer)> {
  static const MethodInfo* get() {
    static auto* cooked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "GetKeyFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cooked});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::ReadKeyInternal
// Il2CppName: ReadKeyInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ConsoleKeyInfo (System::TermInfoDriver::*)(ByRef<bool>)>(&System::TermInfoDriver::ReadKeyInternal)> {
  static const MethodInfo* get() {
    static auto* fresh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "ReadKeyInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fresh});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::InputPending
// Il2CppName: InputPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::TermInfoDriver::*)()>(&System::TermInfoDriver::InputPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "InputPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::QueueEcho
// Il2CppName: QueueEcho
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::Il2CppChar)>(&System::TermInfoDriver::QueueEcho)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "QueueEcho", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::Echo
// Il2CppName: Echo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::System::ConsoleKeyInfo)>(&System::TermInfoDriver::Echo)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "ConsoleKeyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "Echo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::EchoFlush
// Il2CppName: EchoFlush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::EchoFlush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "EchoFlush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::TermInfoDriver::*)(ByRef<::ArrayW<::Il2CppChar>>, int, int)>(&System::TermInfoDriver::Read)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, index, count});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::ReadKey
// Il2CppName: ReadKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ConsoleKeyInfo (System::TermInfoDriver::*)(bool)>(&System::TermInfoDriver::ReadKey)> {
  static const MethodInfo* get() {
    static auto* intercept = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "ReadKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intercept});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TermInfoDriver::*)()>(&System::TermInfoDriver::ReadLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TermInfoDriver::*)()>(&System::TermInfoDriver::ReadToEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::ReadUntilConditionInternal
// Il2CppName: ReadUntilConditionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::TermInfoDriver::*)(bool)>(&System::TermInfoDriver::ReadUntilConditionInternal)> {
  static const MethodInfo* get() {
    static auto* haltOnNewLine = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "ReadUntilConditionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{haltOnNewLine});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::SetCursorPosition
// Il2CppName: SetCursorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(int, int)>(&System::TermInfoDriver::SetCursorPosition)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "SetCursorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, top});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::CreateKeyMap
// Il2CppName: CreateKeyMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::CreateKeyMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "CreateKeyMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::InitKeys
// Il2CppName: InitKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)()>(&System::TermInfoDriver::InitKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "InitKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::TermInfoDriver::AddStringMapping
// Il2CppName: AddStringMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::TermInfoDriver::*)(::System::TermInfoStrings)>(&System::TermInfoDriver::AddStringMapping)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "TermInfoStrings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::TermInfoDriver*), "AddStringMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
