// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: StringExtensions
  class StringExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::StringExtensions);
DEFINE_IL2CPP_ARG_TYPE(::System::StringExtensions*, "System", "StringExtensions");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.StringExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class StringExtensions : public ::Il2CppObject {
    public:
    // static System.String SubstringTrim(System.String value, System.Int32 startIndex)
    // Offset: 0x12948CC
    static ::StringW SubstringTrim(::StringW value, int startIndex);
    // static System.String SubstringTrim(System.String value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x12948E8
    static ::StringW SubstringTrim(::StringW value, int startIndex, int length);
  }; // System.StringExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::StringExtensions::SubstringTrim
// Il2CppName: SubstringTrim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int)>(&System::StringExtensions::SubstringTrim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringExtensions*), "SubstringTrim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::StringExtensions::SubstringTrim
// Il2CppName: SubstringTrim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int, int)>(&System::StringExtensions::SubstringTrim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringExtensions*), "SubstringTrim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, length});
  }
};
