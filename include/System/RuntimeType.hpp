// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Reflection.TypeInfo
#include "System/Reflection/TypeInfo.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: MonoTypeInfo
  class MonoTypeInfo;
  // Skipping declaration: Type because it is already included!
  // Forward declaring type: TypeNameKind
  struct TypeNameKind;
  // Skipping declaration: IntPtr because it is already included!
  // Forward declaring type: Guid
  struct Guid;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Skipping declaration: RuntimeTypeHandle because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: RuntimeConstructorInfo
  class RuntimeConstructorInfo;
  // Skipping declaration: MemberInfo because it is already included!
  // Forward declaring type: RuntimeMethodInfo
  class RuntimeMethodInfo;
  // Forward declaring type: CallingConventions
  struct CallingConventions;
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
  // Forward declaring type: EventInfo
  class EventInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: RuntimeModule
  class RuntimeModule;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
  // Forward declaring type: Binder
  class Binder;
  // Forward declaring type: MonoCMethod
  class MonoCMethod;
  // Forward declaring type: RuntimePropertyInfo
  class RuntimePropertyInfo;
  // Forward declaring type: GenericParameterAttributes
  struct GenericParameterAttributes;
  // Forward declaring type: RuntimeFieldInfo
  class RuntimeFieldInfo;
  // Forward declaring type: RuntimeEventInfo
  class RuntimeEventInfo;
  // Forward declaring type: Module
  class Module;
  // Forward declaring type: Assembly
  class Assembly;
  // Forward declaring type: MemberTypes
  struct MemberTypes;
  // Forward declaring type: TypeAttributes
  struct TypeAttributes;
  // Forward declaring type: CustomAttributeData
  class CustomAttributeData;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: RuntimeType
  class RuntimeType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::RuntimeType);
DEFINE_IL2CPP_ARG_TYPE(::System::RuntimeType*, "System", "RuntimeType");
// Type namespace: System
namespace System {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.RuntimeType
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeType : public ::System::Reflection::TypeInfo/*, public ::System::ICloneable, public ::System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: ::System::RuntimeType::MemberListType
    struct MemberListType;
    // Nested type: ::System::RuntimeType::ListBuilder_1<T>
    template<typename T>
    struct ListBuilder_1;
    public:
    // private System.MonoTypeInfo type_info
    // Size: 0x8
    // Offset: 0x18
    ::System::MonoTypeInfo* type_info;
    // Field size check
    static_assert(sizeof(::System::MonoTypeInfo*) == 0x8);
    // System.Object GenericCache
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* GenericCache;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Reflection.RuntimeConstructorInfo m_serializationCtor
    // Size: 0x8
    // Offset: 0x28
    ::System::Reflection::RuntimeConstructorInfo* m_serializationCtor;
    // Field size check
    static_assert(sizeof(::System::Reflection::RuntimeConstructorInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Deleting conversion operator: operator ::System::RuntimeTypeHandle
    constexpr operator ::System::RuntimeTypeHandle() const noexcept = delete;
    // Get static field: static readonly System.RuntimeType ValueType
    static ::System::RuntimeType* _get_ValueType();
    // Set static field: static readonly System.RuntimeType ValueType
    static void _set_ValueType(::System::RuntimeType* value);
    // Get static field: static readonly System.RuntimeType EnumType
    static ::System::RuntimeType* _get_EnumType();
    // Set static field: static readonly System.RuntimeType EnumType
    static void _set_EnumType(::System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType ObjectType
    static ::System::RuntimeType* _get_ObjectType();
    // Set static field: static private readonly System.RuntimeType ObjectType
    static void _set_ObjectType(::System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType StringType
    static ::System::RuntimeType* _get_StringType();
    // Set static field: static private readonly System.RuntimeType StringType
    static void _set_StringType(::System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType DelegateType
    static ::System::RuntimeType* _get_DelegateType();
    // Set static field: static private readonly System.RuntimeType DelegateType
    static void _set_DelegateType(::System::RuntimeType* value);
    // Get static field: static private System.Type[] s_SICtorParamTypes
    static ::ArrayW<::System::Type*> _get_s_SICtorParamTypes();
    // Set static field: static private System.Type[] s_SICtorParamTypes
    static void _set_s_SICtorParamTypes(::ArrayW<::System::Type*> value);
    // static field const value: static private System.Reflection.BindingFlags MemberBindingMask
    static constexpr const int MemberBindingMask = 255;
    // Get static field: static private System.Reflection.BindingFlags MemberBindingMask
    static ::System::Reflection::BindingFlags _get_MemberBindingMask();
    // Set static field: static private System.Reflection.BindingFlags MemberBindingMask
    static void _set_MemberBindingMask(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags InvocationMask
    static constexpr const int InvocationMask = 65280;
    // Get static field: static private System.Reflection.BindingFlags InvocationMask
    static ::System::Reflection::BindingFlags _get_InvocationMask();
    // Set static field: static private System.Reflection.BindingFlags InvocationMask
    static void _set_InvocationMask(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static constexpr const int BinderNonCreateInstance = 15616;
    // Get static field: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static ::System::Reflection::BindingFlags _get_BinderNonCreateInstance();
    // Set static field: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static void _set_BinderNonCreateInstance(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderGetSetProperty
    static constexpr const int BinderGetSetProperty = 12288;
    // Get static field: static private System.Reflection.BindingFlags BinderGetSetProperty
    static ::System::Reflection::BindingFlags _get_BinderGetSetProperty();
    // Set static field: static private System.Reflection.BindingFlags BinderGetSetProperty
    static void _set_BinderGetSetProperty(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static constexpr const int BinderSetInvokeProperty = 8448;
    // Get static field: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static ::System::Reflection::BindingFlags _get_BinderSetInvokeProperty();
    // Set static field: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static void _set_BinderSetInvokeProperty(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderGetSetField
    static constexpr const int BinderGetSetField = 3072;
    // Get static field: static private System.Reflection.BindingFlags BinderGetSetField
    static ::System::Reflection::BindingFlags _get_BinderGetSetField();
    // Set static field: static private System.Reflection.BindingFlags BinderGetSetField
    static void _set_BinderGetSetField(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderSetInvokeField
    static constexpr const int BinderSetInvokeField = 2304;
    // Get static field: static private System.Reflection.BindingFlags BinderSetInvokeField
    static ::System::Reflection::BindingFlags _get_BinderSetInvokeField();
    // Set static field: static private System.Reflection.BindingFlags BinderSetInvokeField
    static void _set_BinderSetInvokeField(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static constexpr const int BinderNonFieldGetSet = 16773888;
    // Get static field: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static ::System::Reflection::BindingFlags _get_BinderNonFieldGetSet();
    // Set static field: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static void _set_BinderNonFieldGetSet(::System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags ClassicBindingMask
    static constexpr const int ClassicBindingMask = 61696;
    // Get static field: static private System.Reflection.BindingFlags ClassicBindingMask
    static ::System::Reflection::BindingFlags _get_ClassicBindingMask();
    // Set static field: static private System.Reflection.BindingFlags ClassicBindingMask
    static void _set_ClassicBindingMask(::System::Reflection::BindingFlags value);
    // Get static field: static private System.RuntimeType s_typedRef
    static ::System::RuntimeType* _get_s_typedRef();
    // Set static field: static private System.RuntimeType s_typedRef
    static void _set_s_typedRef(::System::RuntimeType* value);
    // Get instance field reference: private System.MonoTypeInfo type_info
    [[deprecated("Use field access instead!")]] ::System::MonoTypeInfo*& dyn_type_info();
    // Get instance field reference: System.Object GenericCache
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_GenericCache();
    // Get instance field reference: private System.Reflection.RuntimeConstructorInfo m_serializationCtor
    [[deprecated("Use field access instead!")]] ::System::Reflection::RuntimeConstructorInfo*& dyn_m_serializationCtor();
    // static private System.Void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type)
    // Offset: 0x16C9D84
    static void ThrowIfTypeNeverValidGenericArgument(::System::RuntimeType* type);
    // static System.Void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters)
    // Offset: 0x16C9EE4
    static void SanityCheckGenericArguments(::ArrayW<::System::RuntimeType*> genericArguments, ::ArrayW<::System::RuntimeType*> genericParamters);
    // static private System.Void SplitName(System.String fullname, out System.String name, out System.String ns)
    // Offset: 0x16CA114
    static void SplitName(::StringW fullname, ByRef<::StringW> name, ByRef<::StringW> ns);
    // static private System.Void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref System.String name, System.Boolean allowPrefixLookup, out System.Boolean prefixLookup, out System.Boolean ignoreCase, out System.RuntimeType/System.MemberListType listType)
    // Offset: 0x16CA1FC
    static void FilterHelper(::System::Reflection::BindingFlags bindingFlags, ByRef<::StringW> name, bool allowPrefixLookup, ByRef<bool> prefixLookup, ByRef<bool> ignoreCase, ByRef<::System::RuntimeType::MemberListType> listType);
    // static private System.Void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref System.String name, out System.Boolean ignoreCase, out System.RuntimeType/System.MemberListType listType)
    // Offset: 0x16CA328
    static void FilterHelper(::System::Reflection::BindingFlags bindingFlags, ByRef<::StringW> name, ByRef<bool> ignoreCase, ByRef<::System::RuntimeType::MemberListType> listType);
    // static private System.Boolean FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, System.String name, System.Boolean ignoreCase)
    // Offset: 0x16CA3C4
    static bool FilterApplyPrefixLookup(::System::Reflection::MemberInfo* memberInfo, ::StringW name, bool ignoreCase);
    // static private System.Boolean FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, System.Boolean isPublic, System.Boolean isNonProtectedInternal, System.Boolean isStatic, System.String name, System.Boolean prefixLookup)
    // Offset: 0x16CA428
    static bool FilterApplyBase(::System::Reflection::MemberInfo* memberInfo, ::System::Reflection::BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, ::StringW name, bool prefixLookup);
    // static private System.Boolean FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, System.String name, System.Boolean prefixLookup, System.String ns)
    // Offset: 0x16CA614
    static bool FilterApplyType(::System::Type* type, ::System::Reflection::BindingFlags bindingFlags, ::StringW name, bool prefixLookup, ::StringW ns);
    // static private System.Boolean FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0x16CA744
    static bool FilterApplyMethodInfo(::System::Reflection::RuntimeMethodInfo* method, ::System::Reflection::BindingFlags bindingFlags, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> argumentTypes);
    // static private System.Boolean FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0x16CAA78
    static bool FilterApplyConstructorInfo(::System::Reflection::RuntimeConstructorInfo* constructor, ::System::Reflection::BindingFlags bindingFlags, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> argumentTypes);
    // static private System.Boolean FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0x16CA7E4
    static bool FilterApplyMethodBase(::System::Reflection::MethodBase* methodBase, ::System::Reflection::BindingFlags methodFlags, ::System::Reflection::BindingFlags bindingFlags, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> argumentTypes);
    // System.Boolean IsSpecialSerializableType()
    // Offset: 0x16CAB88
    bool IsSpecialSerializableType();
    // private System.RuntimeType/System.ListBuilder`1<System.Reflection.MethodInfo> GetMethodCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0x16CAE80
    ::System::RuntimeType::ListBuilder_1<::System::Reflection::MethodInfo*> GetMethodCandidates(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> types, bool allowPrefixLookup);
    // private System.RuntimeType/System.ListBuilder`1<System.Reflection.ConstructorInfo> GetConstructorCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0x16CB2EC
    ::System::RuntimeType::ListBuilder_1<::System::Reflection::ConstructorInfo*> GetConstructorCandidates(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> types, bool allowPrefixLookup);
    // private System.RuntimeType/System.ListBuilder`1<System.Reflection.PropertyInfo> GetPropertyCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0x16CB774
    ::System::RuntimeType::ListBuilder_1<::System::Reflection::PropertyInfo*> GetPropertyCandidates(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::ArrayW<::System::Type*> types, bool allowPrefixLookup);
    // private System.RuntimeType/System.ListBuilder`1<System.Reflection.EventInfo> GetEventCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0x16CBC0C
    ::System::RuntimeType::ListBuilder_1<::System::Reflection::EventInfo*> GetEventCandidates(::StringW name, ::System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // private System.RuntimeType/System.ListBuilder`1<System.Reflection.FieldInfo> GetFieldCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0x16CC068
    ::System::RuntimeType::ListBuilder_1<::System::Reflection::FieldInfo*> GetFieldCandidates(::StringW name, ::System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // private System.RuntimeType/System.ListBuilder`1<System.Type> GetNestedTypeCandidates(System.String fullname, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0x16CC4C4
    ::System::RuntimeType::ListBuilder_1<::System::Type*> GetNestedTypeCandidates(::StringW fullname, ::System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // System.Reflection.RuntimeModule GetRuntimeModule()
    // Offset: 0x16CDD8C
    ::System::Reflection::RuntimeModule* GetRuntimeModule();
    // System.Reflection.RuntimeAssembly GetRuntimeAssembly()
    // Offset: 0x16CDD9C
    ::System::Reflection::RuntimeAssembly* GetRuntimeAssembly();
    // private System.RuntimeType GetBaseType()
    // Offset: 0x16CAC6C
    ::System::RuntimeType* GetBaseType();
    // System.RuntimeType[] GetGenericArgumentsInternal()
    // Offset: 0x16CEFBC
    ::ArrayW<::System::RuntimeType*> GetGenericArgumentsInternal();
    // public System.Object Clone()
    // Offset: 0x16D0704
    ::Il2CppObject* Clone();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x16D0708
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // private System.Void CreateInstanceCheckThis()
    // Offset: 0x16D0E00
    void CreateInstanceCheckThis();
    // System.Object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x16D1010
    ::Il2CppObject* CreateInstanceImpl(::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::ArrayW<::Il2CppObject*> args, ::System::Globalization::CultureInfo* culture, ::ArrayW<::Il2CppObject*> activationAttributes, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // System.Object CreateInstanceDefaultCtor(System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x16D1928
    ::Il2CppObject* CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // System.Reflection.MonoCMethod GetDefaultConstructor()
    // Offset: 0x16D1A80
    ::System::Reflection::MonoCMethod* GetDefaultConstructor();
    // private System.String GetDefaultMemberName()
    // Offset: 0x16D0618
    ::StringW GetDefaultMemberName();
    // System.Reflection.RuntimeConstructorInfo GetSerializationCtor()
    // Offset: 0x16C3D08
    ::System::Reflection::RuntimeConstructorInfo* GetSerializationCtor();
    // System.Object CreateInstanceSlow(System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x16D1A48
    ::Il2CppObject* CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ByRef<::System::Threading::StackCrawlMark> stackMark);
    // private System.Object CreateInstanceMono(System.Boolean nonPublic)
    // Offset: 0x16D1C14
    ::Il2CppObject* CreateInstanceMono(bool nonPublic);
    // System.Object CheckValue(System.Object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr)
    // Offset: 0x16D1F10
    ::Il2CppObject* CheckValue(::Il2CppObject* value, ::System::Reflection::Binder* binder, ::System::Globalization::CultureInfo* culture, ::System::Reflection::BindingFlags invokeAttr);
    // private System.Object TryConvertToType(System.Object value, ref System.Boolean failed)
    // Offset: 0x16D2098
    ::Il2CppObject* TryConvertToType(::Il2CppObject* value, ByRef<bool> failed);
    // static private System.Object IsConvertibleToPrimitiveType(System.Object value, System.Type targetType)
    // Offset: 0x16D2300
    static ::Il2CppObject* IsConvertibleToPrimitiveType(::Il2CppObject* value, ::System::Type* targetType);
    // private System.String GetCachedName(System.TypeNameKind kind)
    // Offset: 0x16D0D10
    ::StringW GetCachedName(::System::TypeNameKind kind);
    // private System.Type make_array_type(System.Int32 rank)
    // Offset: 0x16D2D24
    ::System::Type* make_array_type(int rank);
    // private System.Type make_byref_type()
    // Offset: 0x16D2DC0
    ::System::Type* make_byref_type();
    // static private System.Type MakePointerType(System.Type type)
    // Offset: 0x16D2E54
    static ::System::Type* MakePointerType(::System::Type* type);
    // static System.Object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument)
    // Offset: 0x16D30DC
    static ::Il2CppObject* CreateInstanceForAnotherGenericParameter(::System::Type* genericType, ::System::RuntimeType* genericArgument);
    // static private System.Type MakeGenericType(System.Type gt, System.Type[] types)
    // Offset: 0x16CF4FC
    static ::System::Type* MakeGenericType(::System::Type* gt, ::ArrayW<::System::Type*> types);
    // System.IntPtr GetMethodsByName_native(System.IntPtr namePtr, System.Reflection.BindingFlags bindingAttr, System.Boolean ignoreCase)
    // Offset: 0x16D31F8
    ::System::IntPtr GetMethodsByName_native(::System::IntPtr namePtr, ::System::Reflection::BindingFlags bindingAttr, bool ignoreCase);
    // System.Reflection.RuntimeMethodInfo[] GetMethodsByName(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean ignoreCase, System.RuntimeType reflectedType)
    // Offset: 0x16CB068
    ::ArrayW<::System::Reflection::RuntimeMethodInfo*> GetMethodsByName(::StringW name, ::System::Reflection::BindingFlags bindingAttr, bool ignoreCase, ::System::RuntimeType* reflectedType);
    // private System.IntPtr GetPropertiesByName_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr, System.Boolean icase)
    // Offset: 0x16D3200
    ::System::IntPtr GetPropertiesByName_native(::System::IntPtr name, ::System::Reflection::BindingFlags bindingAttr, bool icase);
    // private System.IntPtr GetConstructors_native(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16D3208
    ::System::IntPtr GetConstructors_native(::System::Reflection::BindingFlags bindingAttr);
    // private System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0x16CB56C
    ::ArrayW<::System::Reflection::RuntimeConstructorInfo*> GetConstructors_internal(::System::Reflection::BindingFlags bindingAttr, ::System::RuntimeType* reflectedType);
    // private System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean icase, System.RuntimeType reflectedType)
    // Offset: 0x16CB988
    ::ArrayW<::System::Reflection::RuntimePropertyInfo*> GetPropertiesByName(::StringW name, ::System::Reflection::BindingFlags bindingAttr, bool icase, ::System::RuntimeType* reflectedType);
    // static System.Type GetTypeFromCLSIDImpl(System.Guid clsid, System.String server, System.Boolean throwOnError)
    // Offset: 0x16D3334
    static ::System::Type* GetTypeFromCLSIDImpl(::System::Guid clsid, ::StringW server, bool throwOnError);
    // static private System.TypeCode GetTypeCodeImplInternal(System.Type type)
    // Offset: 0x16D3404
    static ::System::TypeCode GetTypeCodeImplInternal(::System::Type* type);
    // private System.Boolean IsGenericCOMObjectImpl()
    // Offset: 0x16D1920
    bool IsGenericCOMObjectImpl();
    // static private System.Object CreateInstanceInternal(System.Type type)
    // Offset: 0x16D1F0C
    static ::Il2CppObject* CreateInstanceInternal(::System::Type* type);
    // System.String getFullName(System.Boolean full_name, System.Boolean assembly_qualified)
    // Offset: 0x16D3414
    ::StringW getFullName(bool full_name, bool assembly_qualified);
    // private System.Type[] GetGenericArgumentsInternal(System.Boolean runtimeArray)
    // Offset: 0x16CF034
    ::ArrayW<::System::Type*> GetGenericArgumentsInternal(bool runtimeArray);
    // private System.Reflection.GenericParameterAttributes GetGenericParameterAttributes()
    // Offset: 0x16CE3C4
    ::System::Reflection::GenericParameterAttributes GetGenericParameterAttributes();
    // private System.Int32 GetGenericParameterPosition()
    // Offset: 0x16CF5BC
    int GetGenericParameterPosition();
    // private System.IntPtr GetEvents_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16D3424
    ::System::IntPtr GetEvents_native(::System::IntPtr name, ::System::Reflection::BindingFlags bindingAttr);
    // private System.IntPtr GetFields_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16D3428
    ::System::IntPtr GetFields_native(::System::IntPtr name, ::System::Reflection::BindingFlags bindingAttr);
    // private System.Reflection.RuntimeFieldInfo[] GetFields_internal(System.String name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0x16CC248
    ::ArrayW<::System::Reflection::RuntimeFieldInfo*> GetFields_internal(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::RuntimeType* reflectedType);
    // private System.Reflection.RuntimeEventInfo[] GetEvents_internal(System.String name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0x16CBDEC
    ::ArrayW<::System::Reflection::RuntimeEventInfo*> GetEvents_internal(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::RuntimeType* reflectedType);
    // private System.IntPtr GetNestedTypes_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16D3430
    ::System::IntPtr GetNestedTypes_native(::System::IntPtr name, ::System::Reflection::BindingFlags bindingAttr);
    // private System.RuntimeType[] GetNestedTypes_internal(System.String displayName, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CC688
    ::ArrayW<::System::RuntimeType*> GetNestedTypes_internal(::StringW displayName, ::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.Module get_Module()
    // Offset: 0x16CDD84
    // Implemented from: System.Type
    // Base method: System.Reflection.Module Type::get_Module()
    ::System::Reflection::Module* get_Module();
    // public override System.Reflection.Assembly get_Assembly()
    // Offset: 0x16CDD94
    // Implemented from: System.Type
    // Base method: System.Reflection.Assembly Type::get_Assembly()
    ::System::Reflection::Assembly* get_Assembly();
    // public override System.RuntimeTypeHandle get_TypeHandle()
    // Offset: 0x16CDDA4
    // Implemented from: System.Type
    // Base method: System.RuntimeTypeHandle Type::get_TypeHandle()
    ::System::RuntimeTypeHandle get_TypeHandle();
    // public override System.Type get_BaseType()
    // Offset: 0x16CE128
    // Implemented from: System.Type
    // Base method: System.Type Type::get_BaseType()
    ::System::Type* get_BaseType();
    // public override System.Type get_UnderlyingSystemType()
    // Offset: 0x16CE12C
    // Implemented from: System.Type
    // Base method: System.Type Type::get_UnderlyingSystemType()
    ::System::Type* get_UnderlyingSystemType();
    // public override System.Boolean get_IsEnum()
    // Offset: 0x16CE28C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsEnum()
    bool get_IsEnum();
    // public override System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
    // Offset: 0x16CE318
    // Implemented from: System.Type
    // Base method: System.Reflection.GenericParameterAttributes Type::get_GenericParameterAttributes()
    ::System::Reflection::GenericParameterAttributes get_GenericParameterAttributes();
    // override System.Boolean get_IsSzArray()
    // Offset: 0x16CE40C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsSzArray()
    bool get_IsSzArray();
    // public override System.Boolean get_IsGenericTypeDefinition()
    // Offset: 0x16CF500
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericTypeDefinition()
    bool get_IsGenericTypeDefinition();
    // public override System.Boolean get_IsGenericParameter()
    // Offset: 0x16CF508
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericParameter()
    bool get_IsGenericParameter();
    // public override System.Int32 get_GenericParameterPosition()
    // Offset: 0x16CF510
    // Implemented from: System.Type
    // Base method: System.Int32 Type::get_GenericParameterPosition()
    int get_GenericParameterPosition();
    // public override System.Boolean get_IsGenericType()
    // Offset: 0x16CF670
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericType()
    bool get_IsGenericType();
    // public override System.Reflection.MemberTypes get_MemberType()
    // Offset: 0x16D0DA0
    // Implemented from: System.Type
    // Base method: System.Reflection.MemberTypes Type::get_MemberType()
    ::System::Reflection::MemberTypes get_MemberType();
    // public override System.Type get_ReflectedType()
    // Offset: 0x16D0DEC
    // Implemented from: System.Type
    // Base method: System.Type Type::get_ReflectedType()
    ::System::Type* get_ReflectedType();
    // public override System.Int32 get_MetadataToken()
    // Offset: 0x16D0DF8
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Int32 MemberInfo::get_MetadataToken()
    int get_MetadataToken();
    // public override System.Boolean get_ContainsGenericParameters()
    // Offset: 0x16D2EBC
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_ContainsGenericParameters()
    bool get_ContainsGenericParameters();
    // public override System.Guid get_GUID()
    // Offset: 0x16D320C
    // Implemented from: System.Type
    // Base method: System.Guid Type::get_GUID()
    ::System::Guid get_GUID();
    // public override System.Reflection.MethodBase get_DeclaringMethod()
    // Offset: 0x16D3420
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodBase Type::get_DeclaringMethod()
    ::System::Reflection::MethodBase* get_DeclaringMethod();
    // public override System.String get_AssemblyQualifiedName()
    // Offset: 0x16D3434
    // Implemented from: System.Type
    // Base method: System.String Type::get_AssemblyQualifiedName()
    ::StringW get_AssemblyQualifiedName();
    // public override System.Type get_DeclaringType()
    // Offset: 0x16D3440
    // Implemented from: System.Type
    // Base method: System.Type Type::get_DeclaringType()
    ::System::Type* get_DeclaringType();
    // public override System.String get_Name()
    // Offset: 0x16D3444
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.String MemberInfo::get_Name()
    ::StringW get_Name();
    // public override System.String get_Namespace()
    // Offset: 0x16D3448
    // Implemented from: System.Type
    // Base method: System.String Type::get_Namespace()
    ::StringW get_Namespace();
    // public override System.String get_FullName()
    // Offset: 0x16D353C
    // Implemented from: System.Type
    // Base method: System.String Type::get_FullName()
    ::StringW get_FullName();
    // System.Void .ctor()
    // Offset: 0x16CAB18
    // Implemented from: System.Reflection.TypeInfo
    // Base method: System.Void TypeInfo::.ctor()
    // Base method: System.Void Type::.ctor()
    // Base method: System.Void MemberInfo::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeType* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::RuntimeType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeType*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x16D3618
    // Implemented from: System.Type
    // Base method: System.Void Type::.cctor()
    static void _cctor();
    // public override System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CC9AC
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodInfo[] Type::GetMethods(System.Reflection.BindingFlags bindingAttr)
    ::ArrayW<::System::Reflection::MethodInfo*> GetMethods(::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CCA3C
    // Implemented from: System.Type
    // Base method: System.Reflection.ConstructorInfo[] Type::GetConstructors(System.Reflection.BindingFlags bindingAttr)
    ::ArrayW<::System::Reflection::ConstructorInfo*> GetConstructors(::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CCADC
    // Implemented from: System.Type
    // Base method: System.Reflection.PropertyInfo[] Type::GetProperties(System.Reflection.BindingFlags bindingAttr)
    ::ArrayW<::System::Reflection::PropertyInfo*> GetProperties(::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CCB68
    // Implemented from: System.Type
    // Base method: System.Reflection.FieldInfo[] Type::GetFields(System.Reflection.BindingFlags bindingAttr)
    ::ArrayW<::System::Reflection::FieldInfo*> GetFields(::System::Reflection::BindingFlags bindingAttr);
    // protected override System.Reflection.MethodInfo GetMethodImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0x16CCBF0
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodInfo Type::GetMethodImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    ::System::Reflection::MethodInfo* GetMethodImpl(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Reflection::CallingConventions callConv, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers);
    // protected override System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0x16CCE4C
    // Implemented from: System.Type
    // Base method: System.Reflection.ConstructorInfo Type::GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    ::System::Reflection::ConstructorInfo* GetConstructorImpl(::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Reflection::CallingConventions callConvention, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers);
    // protected override System.Reflection.PropertyInfo GetPropertyImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0x16CD03C
    // Implemented from: System.Type
    // Base method: System.Reflection.PropertyInfo Type::GetPropertyImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    ::System::Reflection::PropertyInfo* GetPropertyImpl(::StringW name, ::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::Binder* binder, ::System::Type* returnType, ::ArrayW<::System::Type*> types, ::ArrayW<::System::Reflection::ParameterModifier> modifiers);
    // public override System.Reflection.EventInfo GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CD298
    // Implemented from: System.Type
    // Base method: System.Reflection.EventInfo Type::GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
    ::System::Reflection::EventInfo* GetEvent(::StringW name, ::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.FieldInfo GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CD470
    // Implemented from: System.Type
    // Base method: System.Reflection.FieldInfo Type::GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
    ::System::Reflection::FieldInfo* GetField(::StringW name, ::System::Reflection::BindingFlags bindingAttr);
    // public override System.Type GetNestedType(System.String fullname, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CD768
    // Implemented from: System.Type
    // Base method: System.Type Type::GetNestedType(System.String fullname, System.Reflection.BindingFlags bindingAttr)
    ::System::Type* GetNestedType(::StringW fullname, ::System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.MemberInfo[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x16CD980
    // Implemented from: System.Type
    // Base method: System.Reflection.MemberInfo[] Type::GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
    ::ArrayW<::System::Reflection::MemberInfo*> GetMember(::StringW name, ::System::Reflection::MemberTypes type, ::System::Reflection::BindingFlags bindingAttr);
    // public override System.Boolean IsInstanceOfType(System.Object o)
    // Offset: 0x16CDDD4
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsInstanceOfType(System.Object o)
    bool IsInstanceOfType(::Il2CppObject* o);
    // public override System.Boolean IsSubclassOf(System.Type type)
    // Offset: 0x16CDDDC
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsSubclassOf(System.Type type)
    bool IsSubclassOf(::System::Type* type);
    // public override System.Boolean IsAssignableFrom(System.Type c)
    // Offset: 0x16CDF68
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsAssignableFrom(System.Type c)
    bool IsAssignableFrom(::System::Type* c);
    // public override System.Boolean IsEquivalentTo(System.Type other)
    // Offset: 0x16CE05C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsEquivalentTo(System.Type other)
    bool IsEquivalentTo(::System::Type* other);
    // protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl()
    // Offset: 0x16CE130
    // Implemented from: System.Type
    // Base method: System.Reflection.TypeAttributes Type::GetAttributeFlagsImpl()
    ::System::Reflection::TypeAttributes GetAttributeFlagsImpl();
    // protected override System.Boolean IsContextfulImpl()
    // Offset: 0x16CE138
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsContextfulImpl()
    bool IsContextfulImpl();
    // protected override System.Boolean IsByRefImpl()
    // Offset: 0x16CE140
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsByRefImpl()
    bool IsByRefImpl();
    // protected override System.Boolean IsPrimitiveImpl()
    // Offset: 0x16CE148
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsPrimitiveImpl()
    bool IsPrimitiveImpl();
    // protected override System.Boolean IsPointerImpl()
    // Offset: 0x16CE150
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsPointerImpl()
    bool IsPointerImpl();
    // protected override System.Boolean IsCOMObjectImpl()
    // Offset: 0x16CE158
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsCOMObjectImpl()
    bool IsCOMObjectImpl();
    // protected override System.Boolean IsValueTypeImpl()
    // Offset: 0x16CE164
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsValueTypeImpl()
    bool IsValueTypeImpl();
    // protected override System.Boolean HasElementTypeImpl()
    // Offset: 0x16CE310
    // Implemented from: System.Type
    // Base method: System.Boolean Type::HasElementTypeImpl()
    bool HasElementTypeImpl();
    // protected override System.Boolean IsArrayImpl()
    // Offset: 0x16CE414
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsArrayImpl()
    bool IsArrayImpl();
    // public override System.Int32 GetArrayRank()
    // Offset: 0x16CE41C
    // Implemented from: System.Type
    // Base method: System.Int32 Type::GetArrayRank()
    int GetArrayRank();
    // public override System.Type GetElementType()
    // Offset: 0x16CE4CC
    // Implemented from: System.Type
    // Base method: System.Type Type::GetElementType()
    ::System::Type* GetElementType();
    // public override System.String[] GetEnumNames()
    // Offset: 0x16CE4D4
    // Implemented from: System.Type
    // Base method: System.String[] Type::GetEnumNames()
    ::ArrayW<::StringW> GetEnumNames();
    // public override System.Array GetEnumValues()
    // Offset: 0x16CE5F0
    // Implemented from: System.Type
    // Base method: System.Array Type::GetEnumValues()
    ::System::Array* GetEnumValues();
    // public override System.Type GetEnumUnderlyingType()
    // Offset: 0x16CE7B8
    // Implemented from: System.Type
    // Base method: System.Type Type::GetEnumUnderlyingType()
    ::System::Type* GetEnumUnderlyingType();
    // public override System.Boolean IsEnumDefined(System.Object value)
    // Offset: 0x16CE894
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsEnumDefined(System.Object value)
    bool IsEnumDefined(::Il2CppObject* value);
    // public override System.String GetEnumName(System.Object value)
    // Offset: 0x16CEDCC
    // Implemented from: System.Type
    // Base method: System.String Type::GetEnumName(System.Object value)
    ::StringW GetEnumName(::Il2CppObject* value);
    // public override System.Type[] GetGenericArguments()
    // Offset: 0x16CF03C
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetGenericArguments()
    ::ArrayW<::System::Type*> GetGenericArguments();
    // public override System.Type MakeGenericType(params System.Type[] instantiation)
    // Offset: 0x16CF0B8
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeGenericType(params System.Type[] instantiation)
    ::System::Type* MakeGenericType(::ArrayW<::System::Type*> instantiation);
    // public override System.Type GetGenericTypeDefinition()
    // Offset: 0x16CF5C0
    // Implemented from: System.Type
    // Base method: System.Type Type::GetGenericTypeDefinition()
    ::System::Type* GetGenericTypeDefinition();
    // public override System.Object InvokeMember(System.String name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, System.Object target, System.Object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParams)
    // Offset: 0x16CF678
    // Implemented from: System.Type
    // Base method: System.Object Type::InvokeMember(System.String name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, System.Object target, System.Object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParams)
    ::Il2CppObject* InvokeMember(::StringW name, ::System::Reflection::BindingFlags bindingFlags, ::System::Reflection::Binder* binder, ::Il2CppObject* target, ::ArrayW<::Il2CppObject*> providedArgs, ::ArrayW<::System::Reflection::ParameterModifier> modifiers, ::System::Globalization::CultureInfo* culture, ::ArrayW<::StringW> namedParams);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x16D06F8
    // Implemented from: System.Type
    // Base method: System.Boolean Type::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Object[] GetCustomAttributes(System.Boolean inherit)
    // Offset: 0x16D07A0
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Object[] MemberInfo::GetCustomAttributes(System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(bool inherit);
    // public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x16D084C
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Object[] MemberInfo::GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    ::ArrayW<::Il2CppObject*> GetCustomAttributes(::System::Type* attributeType, bool inherit);
    // public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x16D09D8
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Boolean MemberInfo::IsDefined(System.Type attributeType, System.Boolean inherit)
    bool IsDefined(::System::Type* attributeType, bool inherit);
    // public override System.Collections.Generic.IList`1<System.Reflection.CustomAttributeData> GetCustomAttributesData()
    // Offset: 0x16D0B64
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Collections.Generic.IList`1<System.Reflection.CustomAttributeData> MemberInfo::GetCustomAttributesData()
    ::System::Collections::Generic::IList_1<::System::Reflection::CustomAttributeData*>* GetCustomAttributesData();
    // override System.String FormatTypeName(System.Boolean serialization)
    // Offset: 0x16D0B6C
    // Implemented from: System.Type
    // Base method: System.String Type::FormatTypeName(System.Boolean serialization)
    ::StringW FormatTypeName(bool serialization);
    // public override System.Type MakeArrayType()
    // Offset: 0x16D2D28
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeArrayType()
    ::System::Type* MakeArrayType();
    // public override System.Type MakeArrayType(System.Int32 rank)
    // Offset: 0x16D2D30
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeArrayType(System.Int32 rank)
    ::System::Type* MakeArrayType(int rank);
    // public override System.Type MakeByRefType()
    // Offset: 0x16D2DC4
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeByRefType()
    ::System::Type* MakeByRefType();
    // public override System.Type MakePointerType()
    // Offset: 0x16D2E58
    // Implemented from: System.Type
    // Base method: System.Type Type::MakePointerType()
    ::System::Type* MakePointerType();
    // public override System.Type[] GetGenericParameterConstraints()
    // Offset: 0x16D2FD0
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetGenericParameterConstraints()
    ::ArrayW<::System::Type*> GetGenericParameterConstraints();
    // protected override System.TypeCode GetTypeCodeImpl()
    // Offset: 0x16D33A0
    // Implemented from: System.Type
    // Base method: System.TypeCode Type::GetTypeCodeImpl()
    ::System::TypeCode GetTypeCodeImpl();
    // public override System.String ToString()
    // Offset: 0x16D3408
    // Implemented from: System.Type
    // Base method: System.String Type::ToString()
    ::StringW ToString();
    // public override System.Type[] GetInterfaces()
    // Offset: 0x16D342C
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetInterfaces()
    ::ArrayW<::System::Type*> GetInterfaces();
    // public override System.Int32 GetHashCode()
    // Offset: 0x16D344C
    // Implemented from: System.Type
    // Base method: System.Int32 Type::GetHashCode()
    int GetHashCode();
  }; // System.RuntimeType
  #pragma pack(pop)
  static check_size<sizeof(RuntimeType), 40 + sizeof(::System::Reflection::RuntimeConstructorInfo*)> __System_RuntimeTypeSizeCheck;
  static_assert(sizeof(RuntimeType) == 0x30);
  // static public System.Boolean op_Equality(System.RuntimeType left, System.RuntimeType right)
  // Offset: 0x16C5A34
  bool operator ==(::System::RuntimeType* left, ::System::RuntimeType& right);
  // static public System.Boolean op_Inequality(System.RuntimeType left, System.RuntimeType right)
  // Offset: 0x16CAE74
  bool operator !=(::System::RuntimeType* left, ::System::RuntimeType& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::RuntimeType::ThrowIfTypeNeverValidGenericArgument
// Il2CppName: ThrowIfTypeNeverValidGenericArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::RuntimeType*)>(&System::RuntimeType::ThrowIfTypeNeverValidGenericArgument)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "ThrowIfTypeNeverValidGenericArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::SanityCheckGenericArguments
// Il2CppName: SanityCheckGenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::System::RuntimeType*>, ::ArrayW<::System::RuntimeType*>)>(&System::RuntimeType::SanityCheckGenericArguments)> {
  static const MethodInfo* get() {
    static auto* genericArguments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "RuntimeType"), 1)->byval_arg;
    static auto* genericParamters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "RuntimeType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "SanityCheckGenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{genericArguments, genericParamters});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::SplitName
// Il2CppName: SplitName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>)>(&System::RuntimeType::SplitName)> {
  static const MethodInfo* get() {
    static auto* fullname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "SplitName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullname, name, ns});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterHelper
// Il2CppName: FilterHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::BindingFlags, ByRef<::StringW>, bool, ByRef<bool>, ByRef<bool>, ByRef<::System::RuntimeType::MemberListType>)>(&System::RuntimeType::FilterHelper)> {
  static const MethodInfo* get() {
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* prefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* listType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType/MemberListType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingFlags, name, allowPrefixLookup, prefixLookup, ignoreCase, listType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterHelper
// Il2CppName: FilterHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::BindingFlags, ByRef<::StringW>, ByRef<bool>, ByRef<::System::RuntimeType::MemberListType>)>(&System::RuntimeType::FilterHelper)> {
  static const MethodInfo* get() {
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* listType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType/MemberListType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingFlags, name, ignoreCase, listType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyPrefixLookup
// Il2CppName: FilterApplyPrefixLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, ::StringW, bool)>(&System::RuntimeType::FilterApplyPrefixLookup)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyPrefixLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo, name, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyBase
// Il2CppName: FilterApplyBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, ::System::Reflection::BindingFlags, bool, bool, bool, ::StringW, bool)>(&System::RuntimeType::FilterApplyBase)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* isPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isNonProtectedInternal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isStatic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo, bindingFlags, isPublic, isNonProtectedInternal, isStatic, name, prefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyType
// Il2CppName: FilterApplyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Reflection::BindingFlags, ::StringW, bool, ::StringW)>(&System::RuntimeType::FilterApplyType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, bindingFlags, name, prefixLookup, ns});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyMethodInfo
// Il2CppName: FilterApplyMethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::RuntimeMethodInfo*, ::System::Reflection::BindingFlags, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>)>(&System::RuntimeType::FilterApplyMethodInfo)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "RuntimeMethodInfo")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* argumentTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyMethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, bindingFlags, callConv, argumentTypes});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyConstructorInfo
// Il2CppName: FilterApplyConstructorInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::RuntimeConstructorInfo*, ::System::Reflection::BindingFlags, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>)>(&System::RuntimeType::FilterApplyConstructorInfo)> {
  static const MethodInfo* get() {
    static auto* constructor = &::il2cpp_utils::GetClassFromName("System.Reflection", "RuntimeConstructorInfo")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* argumentTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyConstructorInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constructor, bindingFlags, callConv, argumentTypes});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FilterApplyMethodBase
// Il2CppName: FilterApplyMethodBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MethodBase*, ::System::Reflection::BindingFlags, ::System::Reflection::BindingFlags, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>)>(&System::RuntimeType::FilterApplyMethodBase)> {
  static const MethodInfo* get() {
    static auto* methodBase = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodBase")->byval_arg;
    static auto* methodFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* argumentTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FilterApplyMethodBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodBase, methodFlags, bindingFlags, callConv, argumentTypes});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsSpecialSerializableType
// Il2CppName: IsSpecialSerializableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsSpecialSerializableType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsSpecialSerializableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMethodCandidates
// Il2CppName: GetMethodCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Reflection::MethodInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>, bool)>(&System::RuntimeType::GetMethodCandidates)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMethodCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, callConv, types, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetConstructorCandidates
// Il2CppName: GetConstructorCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Reflection::ConstructorInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>, bool)>(&System::RuntimeType::GetConstructorCandidates)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetConstructorCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, callConv, types, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetPropertyCandidates
// Il2CppName: GetPropertyCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Reflection::PropertyInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::ArrayW<::System::Type*>, bool)>(&System::RuntimeType::GetPropertyCandidates)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetPropertyCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, types, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEventCandidates
// Il2CppName: GetEventCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Reflection::EventInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, bool)>(&System::RuntimeType::GetEventCandidates)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEventCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetFieldCandidates
// Il2CppName: GetFieldCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Reflection::FieldInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, bool)>(&System::RuntimeType::GetFieldCandidates)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetFieldCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetNestedTypeCandidates
// Il2CppName: GetNestedTypeCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType::ListBuilder_1<::System::Type*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, bool)>(&System::RuntimeType::GetNestedTypeCandidates)> {
  static const MethodInfo* get() {
    static auto* fullname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* allowPrefixLookup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetNestedTypeCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullname, bindingAttr, allowPrefixLookup});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetRuntimeModule
// Il2CppName: GetRuntimeModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeModule* (System::RuntimeType::*)()>(&System::RuntimeType::GetRuntimeModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetRuntimeModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetRuntimeAssembly
// Il2CppName: GetRuntimeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeAssembly* (System::RuntimeType::*)()>(&System::RuntimeType::GetRuntimeAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetRuntimeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetBaseType
// Il2CppName: GetBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeType* (System::RuntimeType::*)()>(&System::RuntimeType::GetBaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericArgumentsInternal
// Il2CppName: GetGenericArgumentsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::RuntimeType*> (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericArgumentsInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericArgumentsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)()>(&System::RuntimeType::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::RuntimeType::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::RuntimeType::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceCheckThis
// Il2CppName: CreateInstanceCheckThis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::RuntimeType::*)()>(&System::RuntimeType::CreateInstanceCheckThis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceCheckThis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceImpl
// Il2CppName: CreateInstanceImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(::System::Reflection::BindingFlags, ::System::Reflection::Binder*, ::ArrayW<::Il2CppObject*>, ::System::Globalization::CultureInfo*, ::ArrayW<::Il2CppObject*>, ByRef<::System::Threading::StackCrawlMark>)>(&System::RuntimeType::CreateInstanceImpl)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* activationAttributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr, binder, args, culture, activationAttributes, stackMark});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceDefaultCtor
// Il2CppName: CreateInstanceDefaultCtor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(bool, bool, bool, ByRef<::System::Threading::StackCrawlMark>)>(&System::RuntimeType::CreateInstanceDefaultCtor)> {
  static const MethodInfo* get() {
    static auto* publicOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* skipCheckThis = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fillCache = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceDefaultCtor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicOnly, skipCheckThis, fillCache, stackMark});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetDefaultConstructor
// Il2CppName: GetDefaultConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MonoCMethod* (System::RuntimeType::*)()>(&System::RuntimeType::GetDefaultConstructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetDefaultConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetDefaultMemberName
// Il2CppName: GetDefaultMemberName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::GetDefaultMemberName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetDefaultMemberName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetSerializationCtor
// Il2CppName: GetSerializationCtor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::RuntimeConstructorInfo* (System::RuntimeType::*)()>(&System::RuntimeType::GetSerializationCtor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetSerializationCtor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceSlow
// Il2CppName: CreateInstanceSlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(bool, bool, bool, ByRef<::System::Threading::StackCrawlMark>)>(&System::RuntimeType::CreateInstanceSlow)> {
  static const MethodInfo* get() {
    static auto* publicOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* skipCheckThis = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fillCache = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceSlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicOnly, skipCheckThis, fillCache, stackMark});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceMono
// Il2CppName: CreateInstanceMono
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(bool)>(&System::RuntimeType::CreateInstanceMono)> {
  static const MethodInfo* get() {
    static auto* nonPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceMono", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nonPublic});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CheckValue
// Il2CppName: CheckValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(::Il2CppObject*, ::System::Reflection::Binder*, ::System::Globalization::CultureInfo*, ::System::Reflection::BindingFlags)>(&System::RuntimeType::CheckValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* invokeAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CheckValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, binder, culture, invokeAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::TryConvertToType
// Il2CppName: TryConvertToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(::Il2CppObject*, ByRef<bool>)>(&System::RuntimeType::TryConvertToType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* failed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "TryConvertToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, failed});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsConvertibleToPrimitiveType
// Il2CppName: IsConvertibleToPrimitiveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::Il2CppObject*, ::System::Type*)>(&System::RuntimeType::IsConvertibleToPrimitiveType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsConvertibleToPrimitiveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, targetType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetCachedName
// Il2CppName: GetCachedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)(::System::TypeNameKind)>(&System::RuntimeType::GetCachedName)> {
  static const MethodInfo* get() {
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "TypeNameKind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetCachedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kind});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::make_array_type
// Il2CppName: make_array_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)(int)>(&System::RuntimeType::make_array_type)> {
  static const MethodInfo* get() {
    static auto* rank = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "make_array_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rank});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::make_byref_type
// Il2CppName: make_byref_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::make_byref_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "make_byref_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakePointerType
// Il2CppName: MakePointerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&System::RuntimeType::MakePointerType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakePointerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceForAnotherGenericParameter
// Il2CppName: CreateInstanceForAnotherGenericParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*, ::System::RuntimeType*)>(&System::RuntimeType::CreateInstanceForAnotherGenericParameter)> {
  static const MethodInfo* get() {
    static auto* genericType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericArgument = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceForAnotherGenericParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{genericType, genericArgument});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakeGenericType
// Il2CppName: MakeGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*, ::ArrayW<::System::Type*>)>(&System::RuntimeType::MakeGenericType)> {
  static const MethodInfo* get() {
    static auto* gt = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakeGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gt, types});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMethodsByName_native
// Il2CppName: GetMethodsByName_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::IntPtr, ::System::Reflection::BindingFlags, bool)>(&System::RuntimeType::GetMethodsByName_native)> {
  static const MethodInfo* get() {
    static auto* namePtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMethodsByName_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namePtr, bindingAttr, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMethodsByName
// Il2CppName: GetMethodsByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::RuntimeMethodInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, bool, ::System::RuntimeType*)>(&System::RuntimeType::GetMethodsByName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reflectedType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMethodsByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, ignoreCase, reflectedType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetPropertiesByName_native
// Il2CppName: GetPropertiesByName_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::IntPtr, ::System::Reflection::BindingFlags, bool)>(&System::RuntimeType::GetPropertiesByName_native)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* icase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetPropertiesByName_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, icase});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetConstructors_native
// Il2CppName: GetConstructors_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::Reflection::BindingFlags)>(&System::RuntimeType::GetConstructors_native)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetConstructors_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetConstructors_internal
// Il2CppName: GetConstructors_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::RuntimeConstructorInfo*> (System::RuntimeType::*)(::System::Reflection::BindingFlags, ::System::RuntimeType*)>(&System::RuntimeType::GetConstructors_internal)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* reflectedType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetConstructors_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr, reflectedType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetPropertiesByName
// Il2CppName: GetPropertiesByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::RuntimePropertyInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, bool, ::System::RuntimeType*)>(&System::RuntimeType::GetPropertiesByName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* icase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reflectedType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetPropertiesByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, icase, reflectedType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetTypeFromCLSIDImpl
// Il2CppName: GetTypeFromCLSIDImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Guid, ::StringW, bool)>(&System::RuntimeType::GetTypeFromCLSIDImpl)> {
  static const MethodInfo* get() {
    static auto* clsid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetTypeFromCLSIDImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clsid, server, throwOnError});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetTypeCodeImplInternal
// Il2CppName: GetTypeCodeImplInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (*)(::System::Type*)>(&System::RuntimeType::GetTypeCodeImplInternal)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetTypeCodeImplInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsGenericCOMObjectImpl
// Il2CppName: IsGenericCOMObjectImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsGenericCOMObjectImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsGenericCOMObjectImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::CreateInstanceInternal
// Il2CppName: CreateInstanceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*)>(&System::RuntimeType::CreateInstanceInternal)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "CreateInstanceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::getFullName
// Il2CppName: getFullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)(bool, bool)>(&System::RuntimeType::getFullName)> {
  static const MethodInfo* get() {
    static auto* full_name = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* assembly_qualified = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "getFullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{full_name, assembly_qualified});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericArgumentsInternal
// Il2CppName: GetGenericArgumentsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::RuntimeType::*)(bool)>(&System::RuntimeType::GetGenericArgumentsInternal)> {
  static const MethodInfo* get() {
    static auto* runtimeArray = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericArgumentsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runtimeArray});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericParameterAttributes
// Il2CppName: GetGenericParameterAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::GenericParameterAttributes (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericParameterAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericParameterAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericParameterPosition
// Il2CppName: GetGenericParameterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericParameterPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericParameterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEvents_native
// Il2CppName: GetEvents_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::IntPtr, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetEvents_native)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEvents_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetFields_native
// Il2CppName: GetFields_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::IntPtr, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetFields_native)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetFields_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetFields_internal
// Il2CppName: GetFields_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::RuntimeFieldInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::RuntimeType*)>(&System::RuntimeType::GetFields_internal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* reflectedType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetFields_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, reflectedType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEvents_internal
// Il2CppName: GetEvents_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::RuntimeEventInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::RuntimeType*)>(&System::RuntimeType::GetEvents_internal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* reflectedType = &::il2cpp_utils::GetClassFromName("System", "RuntimeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEvents_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, reflectedType});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetNestedTypes_native
// Il2CppName: GetNestedTypes_native
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::RuntimeType::*)(::System::IntPtr, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetNestedTypes_native)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetNestedTypes_native", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetNestedTypes_internal
// Il2CppName: GetNestedTypes_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::RuntimeType*> (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetNestedTypes_internal)> {
  static const MethodInfo* get() {
    static auto* displayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetNestedTypes_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{displayName, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_Module
// Il2CppName: get_Module
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Module* (System::RuntimeType::*)()>(&System::RuntimeType::get_Module)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_Module", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::Assembly* (System::RuntimeType::*)()>(&System::RuntimeType::get_Assembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_TypeHandle
// Il2CppName: get_TypeHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::RuntimeTypeHandle (System::RuntimeType::*)()>(&System::RuntimeType::get_TypeHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_TypeHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::get_BaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_UnderlyingSystemType
// Il2CppName: get_UnderlyingSystemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::get_UnderlyingSystemType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_UnderlyingSystemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_IsEnum
// Il2CppName: get_IsEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_IsEnum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_IsEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_GenericParameterAttributes
// Il2CppName: get_GenericParameterAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::GenericParameterAttributes (System::RuntimeType::*)()>(&System::RuntimeType::get_GenericParameterAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_GenericParameterAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_IsSzArray
// Il2CppName: get_IsSzArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_IsSzArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_IsSzArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_IsGenericTypeDefinition
// Il2CppName: get_IsGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_IsGenericTypeDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_IsGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_IsGenericParameter
// Il2CppName: get_IsGenericParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_IsGenericParameter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_IsGenericParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_GenericParameterPosition
// Il2CppName: get_GenericParameterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::RuntimeType::*)()>(&System::RuntimeType::get_GenericParameterPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_GenericParameterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_IsGenericType
// Il2CppName: get_IsGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_IsGenericType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_IsGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_MemberType
// Il2CppName: get_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MemberTypes (System::RuntimeType::*)()>(&System::RuntimeType::get_MemberType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_ReflectedType
// Il2CppName: get_ReflectedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::get_ReflectedType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_ReflectedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_MetadataToken
// Il2CppName: get_MetadataToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::RuntimeType::*)()>(&System::RuntimeType::get_MetadataToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_MetadataToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::get_ContainsGenericParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_GUID
// Il2CppName: get_GUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (System::RuntimeType::*)()>(&System::RuntimeType::get_GUID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_GUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_DeclaringMethod
// Il2CppName: get_DeclaringMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodBase* (System::RuntimeType::*)()>(&System::RuntimeType::get_DeclaringMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_DeclaringMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_AssemblyQualifiedName
// Il2CppName: get_AssemblyQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::get_AssemblyQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_AssemblyQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_DeclaringType
// Il2CppName: get_DeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::get_DeclaringType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_DeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::get_FullName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::RuntimeType::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::RuntimeType::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMethods
// Il2CppName: GetMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::MethodInfo*> (System::RuntimeType::*)(::System::Reflection::BindingFlags)>(&System::RuntimeType::GetMethods)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetConstructors
// Il2CppName: GetConstructors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::ConstructorInfo*> (System::RuntimeType::*)(::System::Reflection::BindingFlags)>(&System::RuntimeType::GetConstructors)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetConstructors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetProperties
// Il2CppName: GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::PropertyInfo*> (System::RuntimeType::*)(::System::Reflection::BindingFlags)>(&System::RuntimeType::GetProperties)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetFields
// Il2CppName: GetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::FieldInfo*> (System::RuntimeType::*)(::System::Reflection::BindingFlags)>(&System::RuntimeType::GetFields)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMethodImpl
// Il2CppName: GetMethodImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::Reflection::Binder*, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>, ::ArrayW<::System::Reflection::ParameterModifier>)>(&System::RuntimeType::GetMethodImpl)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* callConv = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* modifiers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterModifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMethodImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, binder, callConv, types, modifiers});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetConstructorImpl
// Il2CppName: GetConstructorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (System::RuntimeType::*)(::System::Reflection::BindingFlags, ::System::Reflection::Binder*, ::System::Reflection::CallingConventions, ::ArrayW<::System::Type*>, ::ArrayW<::System::Reflection::ParameterModifier>)>(&System::RuntimeType::GetConstructorImpl)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* callConvention = &::il2cpp_utils::GetClassFromName("System.Reflection", "CallingConventions")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* modifiers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterModifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetConstructorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr, binder, callConvention, types, modifiers});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetPropertyImpl
// Il2CppName: GetPropertyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::PropertyInfo* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::Reflection::Binder*, ::System::Type*, ::ArrayW<::System::Type*>, ::ArrayW<::System::Reflection::ParameterModifier>)>(&System::RuntimeType::GetPropertyImpl)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* returnType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* types = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    static auto* modifiers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterModifier"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetPropertyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr, binder, returnType, types, modifiers});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEvent
// Il2CppName: GetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::EventInfo* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetEvent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetField
// Il2CppName: GetField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::FieldInfo* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetField)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetNestedType
// Il2CppName: GetNestedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetNestedType)> {
  static const MethodInfo* get() {
    static auto* fullname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetNestedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullname, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetMember
// Il2CppName: GetMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::MemberInfo*> (System::RuntimeType::*)(::StringW, ::System::Reflection::MemberTypes, ::System::Reflection::BindingFlags)>(&System::RuntimeType::GetMember)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberTypes")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type, bindingAttr});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsInstanceOfType
// Il2CppName: IsInstanceOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::Il2CppObject*)>(&System::RuntimeType::IsInstanceOfType)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsInstanceOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsSubclassOf
// Il2CppName: IsSubclassOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::System::Type*)>(&System::RuntimeType::IsSubclassOf)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsSubclassOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsAssignableFrom
// Il2CppName: IsAssignableFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::System::Type*)>(&System::RuntimeType::IsAssignableFrom)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsAssignableFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::System::Type*)>(&System::RuntimeType::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetAttributeFlagsImpl
// Il2CppName: GetAttributeFlagsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::TypeAttributes (System::RuntimeType::*)()>(&System::RuntimeType::GetAttributeFlagsImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetAttributeFlagsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsContextfulImpl
// Il2CppName: IsContextfulImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsContextfulImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsContextfulImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsByRefImpl
// Il2CppName: IsByRefImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsByRefImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsByRefImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsPrimitiveImpl
// Il2CppName: IsPrimitiveImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsPrimitiveImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsPrimitiveImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsPointerImpl
// Il2CppName: IsPointerImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsPointerImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsPointerImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsCOMObjectImpl
// Il2CppName: IsCOMObjectImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsCOMObjectImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsCOMObjectImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsValueTypeImpl
// Il2CppName: IsValueTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsValueTypeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsValueTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::HasElementTypeImpl
// Il2CppName: HasElementTypeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::HasElementTypeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "HasElementTypeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsArrayImpl
// Il2CppName: IsArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)()>(&System::RuntimeType::IsArrayImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetArrayRank
// Il2CppName: GetArrayRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::RuntimeType::*)()>(&System::RuntimeType::GetArrayRank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetArrayRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetElementType
// Il2CppName: GetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::GetElementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEnumNames
// Il2CppName: GetEnumNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::RuntimeType::*)()>(&System::RuntimeType::GetEnumNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEnumNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEnumValues
// Il2CppName: GetEnumValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (System::RuntimeType::*)()>(&System::RuntimeType::GetEnumValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEnumValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEnumUnderlyingType
// Il2CppName: GetEnumUnderlyingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::GetEnumUnderlyingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEnumUnderlyingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsEnumDefined
// Il2CppName: IsEnumDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::Il2CppObject*)>(&System::RuntimeType::IsEnumDefined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsEnumDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetEnumName
// Il2CppName: GetEnumName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)(::Il2CppObject*)>(&System::RuntimeType::GetEnumName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetEnumName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericArguments
// Il2CppName: GetGenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericArguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakeGenericType
// Il2CppName: MakeGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)(::ArrayW<::System::Type*>)>(&System::RuntimeType::MakeGenericType)> {
  static const MethodInfo* get() {
    static auto* instantiation = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Type"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakeGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instantiation});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericTypeDefinition
// Il2CppName: GetGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericTypeDefinition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::InvokeMember
// Il2CppName: InvokeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::RuntimeType::*)(::StringW, ::System::Reflection::BindingFlags, ::System::Reflection::Binder*, ::Il2CppObject*, ::ArrayW<::Il2CppObject*>, ::ArrayW<::System::Reflection::ParameterModifier>, ::System::Globalization::CultureInfo*, ::ArrayW<::StringW>)>(&System::RuntimeType::InvokeMember)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingFlags = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Reflection", "Binder")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* providedArgs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* modifiers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterModifier"), 1)->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* namedParams = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "InvokeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingFlags, binder, target, providedArgs, modifiers, culture, namedParams});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::Il2CppObject*)>(&System::RuntimeType::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::RuntimeType::*)(bool)>(&System::RuntimeType::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inherit});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetCustomAttributes
// Il2CppName: GetCustomAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::RuntimeType::*)(::System::Type*, bool)>(&System::RuntimeType::GetCustomAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetCustomAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::RuntimeType::*)(::System::Type*, bool)>(&System::RuntimeType::IsDefined)> {
  static const MethodInfo* get() {
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeType, inherit});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetCustomAttributesData
// Il2CppName: GetCustomAttributesData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::System::Reflection::CustomAttributeData*>* (System::RuntimeType::*)()>(&System::RuntimeType::GetCustomAttributesData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetCustomAttributesData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::FormatTypeName
// Il2CppName: FormatTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)(bool)>(&System::RuntimeType::FormatTypeName)> {
  static const MethodInfo* get() {
    static auto* serialization = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "FormatTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serialization});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakeArrayType
// Il2CppName: MakeArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::MakeArrayType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakeArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakeArrayType
// Il2CppName: MakeArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)(int)>(&System::RuntimeType::MakeArrayType)> {
  static const MethodInfo* get() {
    static auto* rank = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakeArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rank});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakeByRefType
// Il2CppName: MakeByRefType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::MakeByRefType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakeByRefType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::MakePointerType
// Il2CppName: MakePointerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::RuntimeType::*)()>(&System::RuntimeType::MakePointerType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "MakePointerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetGenericParameterConstraints
// Il2CppName: GetGenericParameterConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::RuntimeType::*)()>(&System::RuntimeType::GetGenericParameterConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetGenericParameterConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetTypeCodeImpl
// Il2CppName: GetTypeCodeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (System::RuntimeType::*)()>(&System::RuntimeType::GetTypeCodeImpl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetTypeCodeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::RuntimeType::*)()>(&System::RuntimeType::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetInterfaces
// Il2CppName: GetInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (System::RuntimeType::*)()>(&System::RuntimeType::GetInterfaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::RuntimeType::*)()>(&System::RuntimeType::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::RuntimeType*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::RuntimeType::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::RuntimeType::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
