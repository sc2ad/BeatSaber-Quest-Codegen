// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: HandleCollector
  class HandleCollector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::HandleCollector);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::HandleCollector*, "System.Runtime.InteropServices", "HandleCollector");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.HandleCollector
  // [TokenAttribute] Offset: FFFFFFFF
  class HandleCollector : public ::Il2CppObject {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 initialThreshold
    // Size: 0x4
    // Offset: 0x18
    int initialThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 maximumThreshold
    // Size: 0x4
    // Offset: 0x1C
    int maximumThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 threshold
    // Size: 0x4
    // Offset: 0x20
    int threshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 handleCount
    // Size: 0x4
    // Offset: 0x24
    int handleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32[] gc_counts
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> gc_counts;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 gc_gen
    // Size: 0x4
    // Offset: 0x30
    int gc_gen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Int32 deltaPercent
    static constexpr const int deltaPercent = 10;
    // Get static field: static private System.Int32 deltaPercent
    static int _get_deltaPercent();
    // Set static field: static private System.Int32 deltaPercent
    static void _set_deltaPercent(int value);
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.Int32 initialThreshold
    [[deprecated("Use field access instead!")]] int& dyn_initialThreshold();
    // Get instance field reference: private System.Int32 maximumThreshold
    [[deprecated("Use field access instead!")]] int& dyn_maximumThreshold();
    // Get instance field reference: private System.Int32 threshold
    [[deprecated("Use field access instead!")]] int& dyn_threshold();
    // Get instance field reference: private System.Int32 handleCount
    [[deprecated("Use field access instead!")]] int& dyn_handleCount();
    // Get instance field reference: private System.Int32[] gc_counts
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_gc_counts();
    // Get instance field reference: private System.Int32 gc_gen
    [[deprecated("Use field access instead!")]] int& dyn_gc_gen();
    // public System.Int32 get_Count()
    // Offset: 0xE082D4
    int get_Count();
    // public System.Int32 get_InitialThreshold()
    // Offset: 0xE082DC
    int get_InitialThreshold();
    // public System.Int32 get_MaximumThreshold()
    // Offset: 0xE082E4
    int get_MaximumThreshold();
    // public System.String get_Name()
    // Offset: 0xE082EC
    ::StringW get_Name();
    // public System.Void .ctor(System.String name, System.Int32 initialThreshold)
    // Offset: 0xE0813C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandleCollector* New_ctor(::StringW name, int initialThreshold) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::HandleCollector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandleCollector*, creationType>(name, initialThreshold)));
    }
    // public System.Void .ctor(System.String name, System.Int32 initialThreshold, System.Int32 maximumThreshold)
    // Offset: 0xE08144
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandleCollector* New_ctor(::StringW name, int initialThreshold, int maximumThreshold) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::InteropServices::HandleCollector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandleCollector*, creationType>(name, initialThreshold, maximumThreshold)));
    }
    // public System.Void Add()
    // Offset: 0xE082F4
    void Add();
    // public System.Void Remove()
    // Offset: 0xE0855C
    void Remove();
  }; // System.Runtime.InteropServices.HandleCollector
  #pragma pack(pop)
  static check_size<sizeof(HandleCollector), 48 + sizeof(int)> __System_Runtime_InteropServices_HandleCollectorSizeCheck;
  static_assert(sizeof(HandleCollector) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::get_InitialThreshold
// Il2CppName: get_InitialThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::get_InitialThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "get_InitialThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::get_MaximumThreshold
// Il2CppName: get_MaximumThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::get_MaximumThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "get_MaximumThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::Add)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::HandleCollector::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::HandleCollector::*)()>(&System::Runtime::InteropServices::HandleCollector::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::HandleCollector*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
