// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
#include "Microsoft/Win32/SafeHandles/SafeHandleZeroOrMinusOneIsInvalid.hpp"
// Completed includes
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeBuffer
  class SafeBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::InteropServices::SafeBuffer);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::InteropServices::SafeBuffer*, "System.Runtime.InteropServices", "SafeBuffer");
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Size: 0x1F
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.InteropServices.SafeBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class SafeBuffer : public ::Microsoft::Win32::SafeHandles::SafeHandleZeroOrMinusOneIsInvalid {
    public:
    public:
    // private System.Boolean inited
    // Size: 0x1
    // Offset: 0x1E
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return inited;
    }
    // Get instance field reference: private System.Boolean inited
    [[deprecated("Use field access instead!")]] bool& dyn_inited();
    // public System.Void AcquirePointer(ref System.Byte* pointer)
    // Offset: 0x1E3D650
    void AcquirePointer(ByRef<uint8_t*> pointer);
    // public System.Void ReleasePointer()
    // Offset: 0x1E3D7E4
    void ReleasePointer();
  }; // System.Runtime.InteropServices.SafeBuffer
  #pragma pack(pop)
  static check_size<sizeof(SafeBuffer), 30 + sizeof(bool)> __System_Runtime_InteropServices_SafeBufferSizeCheck;
  static_assert(sizeof(SafeBuffer) == 0x1F);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::AcquirePointer
// Il2CppName: AcquirePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::SafeBuffer::*)(ByRef<uint8_t*>)>(&System::Runtime::InteropServices::SafeBuffer::AcquirePointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), "AcquirePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer});
  }
};
// Writing MetadataGetter for method: System::Runtime::InteropServices::SafeBuffer::ReleasePointer
// Il2CppName: ReleasePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::InteropServices::SafeBuffer::*)()>(&System::Runtime::InteropServices::SafeBuffer::ReleasePointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::InteropServices::SafeBuffer*), "ReleasePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
