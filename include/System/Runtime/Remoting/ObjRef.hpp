// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IObjectReference
#include "System/Runtime/Serialization/IObjectReference.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
  // Forward declaring type: IChannelInfo
  class IChannelInfo;
  // Forward declaring type: IRemotingTypeInfo
  class IRemotingTypeInfo;
  // Forward declaring type: IEnvoyInfo
  class IEnvoyInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting
namespace System::Runtime::Remoting {
  // Forward declaring type: ObjRef
  class ObjRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::Remoting::ObjRef);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::Remoting::ObjRef*, "System.Runtime.Remoting", "ObjRef");
// Type namespace: System.Runtime.Remoting
namespace System::Runtime::Remoting {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.ObjRef
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 103CE38
  class ObjRef : public ::Il2CppObject/*, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IObjectReference*/ {
    public:
    public:
    // private System.Runtime.Remoting.IChannelInfo channel_info
    // Size: 0x8
    // Offset: 0x10
    ::System::Runtime::Remoting::IChannelInfo* channel_info;
    // Field size check
    static_assert(sizeof(::System::Runtime::Remoting::IChannelInfo*) == 0x8);
    // private System.String uri
    // Size: 0x8
    // Offset: 0x18
    ::StringW uri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Runtime.Remoting.IRemotingTypeInfo typeInfo
    // Size: 0x8
    // Offset: 0x20
    ::System::Runtime::Remoting::IRemotingTypeInfo* typeInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::Remoting::IRemotingTypeInfo*) == 0x8);
    // private System.Runtime.Remoting.IEnvoyInfo envoyInfo
    // Size: 0x8
    // Offset: 0x28
    ::System::Runtime::Remoting::IEnvoyInfo* envoyInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::Remoting::IEnvoyInfo*) == 0x8);
    // private System.Int32 flags
    // Size: 0x4
    // Offset: 0x30
    int flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: flags and: serverType
    char __padding4[0x4] = {};
    // private System.Type _serverType
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* serverType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IObjectReference
    operator ::System::Runtime::Serialization::IObjectReference() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IObjectReference*>(this);
    }
    // Creating interface conversion operator: i_IObjectReference
    inline ::System::Runtime::Serialization::IObjectReference* i_IObjectReference() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IObjectReference*>(this);
    }
    // Get static field: static private System.Int32 MarshalledObjectRef
    static int _get_MarshalledObjectRef();
    // Set static field: static private System.Int32 MarshalledObjectRef
    static void _set_MarshalledObjectRef(int value);
    // Get static field: static private System.Int32 WellKnowObjectRef
    static int _get_WellKnowObjectRef();
    // Set static field: static private System.Int32 WellKnowObjectRef
    static void _set_WellKnowObjectRef(int value);
    // Get instance field reference: private System.Runtime.Remoting.IChannelInfo channel_info
    [[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::IChannelInfo*& dyn_channel_info();
    // Get instance field reference: private System.String uri
    [[deprecated("Use field access instead!")]] ::StringW& dyn_uri();
    // Get instance field reference: private System.Runtime.Remoting.IRemotingTypeInfo typeInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::IRemotingTypeInfo*& dyn_typeInfo();
    // Get instance field reference: private System.Runtime.Remoting.IEnvoyInfo envoyInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::IEnvoyInfo*& dyn_envoyInfo();
    // Get instance field reference: private System.Int32 flags
    [[deprecated("Use field access instead!")]] int& dyn_flags();
    // Get instance field reference: private System.Type _serverType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__serverType();
    // System.Boolean get_IsReferenceToWellKnow()
    // Offset: 0x1C90364
    bool get_IsReferenceToWellKnow();
    // public System.Runtime.Remoting.IChannelInfo get_ChannelInfo()
    // Offset: 0x1C903DC
    ::System::Runtime::Remoting::IChannelInfo* get_ChannelInfo();
    // public System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo()
    // Offset: 0x1C903E4
    ::System::Runtime::Remoting::IEnvoyInfo* get_EnvoyInfo();
    // public System.Void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value)
    // Offset: 0x1C903EC
    void set_EnvoyInfo(::System::Runtime::Remoting::IEnvoyInfo* value);
    // public System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo()
    // Offset: 0x1C903F4
    ::System::Runtime::Remoting::IRemotingTypeInfo* get_TypeInfo();
    // public System.Void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value)
    // Offset: 0x1C903FC
    void set_TypeInfo(::System::Runtime::Remoting::IRemotingTypeInfo* value);
    // public System.String get_URI()
    // Offset: 0x1C90404
    ::StringW get_URI();
    // public System.Void set_URI(System.String value)
    // Offset: 0x1C9040C
    void set_URI(::StringW value);
    // System.Type get_ServerType()
    // Offset: 0x1C90644
    ::System::Type* get_ServerType();
    // System.Void .ctor(System.String uri, System.Runtime.Remoting.IChannelInfo cinfo)
    // Offset: 0x1C8FE2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjRef* New_ctor(::StringW uri, ::System::Runtime::Remoting::IChannelInfo* cinfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Remoting::ObjRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjRef*, creationType>(uri, cinfo)));
    }
    // System.Void .ctor(System.Type type, System.String url, System.Object remoteChannelData)
    // Offset: 0x1C8FE64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjRef* New_ctor(::System::Type* type, ::StringW url, ::Il2CppObject* remoteChannelData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Remoting::ObjRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjRef*, creationType>(type, url, remoteChannelData)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1C8FF54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjRef* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Remoting::ObjRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjRef*, creationType>(info, context)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1C9078C
    static void _cctor();
    // System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(System.Int32 domainId, System.Byte[] tInfo)
    // Offset: 0x1C83DBC
    ::System::Runtime::Remoting::ObjRef* DeserializeInTheCurrentDomain(int domainId, ::ArrayW<uint8_t> tInfo);
    // System.Byte[] SerializeType()
    // Offset: 0x1C84E3C
    ::ArrayW<uint8_t> SerializeType();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1C90414
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // public System.Object GetRealObject(System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1C90584
    ::Il2CppObject* GetRealObject(::System::Runtime::Serialization::StreamingContext context);
    // System.Void UpdateChannelInfo()
    // Offset: 0x1C8FDCC
    void UpdateChannelInfo();
    // public System.Void .ctor()
    // Offset: 0x1C8FDA4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Remoting::ObjRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjRef*, creationType>()));
    }
  }; // System.Runtime.Remoting.ObjRef
  #pragma pack(pop)
  static check_size<sizeof(ObjRef), 56 + sizeof(::System::Type*)> __System_Runtime_Remoting_ObjRefSizeCheck;
  static_assert(sizeof(ObjRef) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_IsReferenceToWellKnow
// Il2CppName: get_IsReferenceToWellKnow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_IsReferenceToWellKnow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_IsReferenceToWellKnow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_ChannelInfo
// Il2CppName: get_ChannelInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::IChannelInfo* (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_ChannelInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_ChannelInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_EnvoyInfo
// Il2CppName: get_EnvoyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::IEnvoyInfo* (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_EnvoyInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_EnvoyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::set_EnvoyInfo
// Il2CppName: set_EnvoyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Remoting::ObjRef::*)(::System::Runtime::Remoting::IEnvoyInfo*)>(&System::Runtime::Remoting::ObjRef::set_EnvoyInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting", "IEnvoyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "set_EnvoyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_TypeInfo
// Il2CppName: get_TypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::IRemotingTypeInfo* (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_TypeInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_TypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::set_TypeInfo
// Il2CppName: set_TypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Remoting::ObjRef::*)(::System::Runtime::Remoting::IRemotingTypeInfo*)>(&System::Runtime::Remoting::ObjRef::set_TypeInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting", "IRemotingTypeInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "set_TypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_URI
// Il2CppName: get_URI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_URI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_URI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::set_URI
// Il2CppName: set_URI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Remoting::ObjRef::*)(::StringW)>(&System::Runtime::Remoting::ObjRef::set_URI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "set_URI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::get_ServerType
// Il2CppName: get_ServerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::get_ServerType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "get_ServerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Runtime::Remoting::ObjRef::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::DeserializeInTheCurrentDomain
// Il2CppName: DeserializeInTheCurrentDomain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::ObjRef* (System::Runtime::Remoting::ObjRef::*)(int, ::ArrayW<uint8_t>)>(&System::Runtime::Remoting::ObjRef::DeserializeInTheCurrentDomain)> {
  static const MethodInfo* get() {
    static auto* domainId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tInfo = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "DeserializeInTheCurrentDomain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{domainId, tInfo});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::SerializeType
// Il2CppName: SerializeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::SerializeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "SerializeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Remoting::ObjRef::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Runtime::Remoting::ObjRef::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::GetRealObject
// Il2CppName: GetRealObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Runtime::Remoting::ObjRef::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Runtime::Remoting::ObjRef::GetRealObject)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "GetRealObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::UpdateChannelInfo
// Il2CppName: UpdateChannelInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Remoting::ObjRef::*)()>(&System::Runtime::Remoting::ObjRef::UpdateChannelInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Remoting::ObjRef*), "UpdateChannelInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::Remoting::ObjRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
