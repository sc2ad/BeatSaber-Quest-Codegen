// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: Unsafe
  class Unsafe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::CompilerServices::Unsafe);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::CompilerServices::Unsafe*, "System.Runtime.CompilerServices", "Unsafe");
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.CompilerServices.Unsafe
  // [TokenAttribute] Offset: FFFFFFFF
  class Unsafe : public ::Il2CppObject {
    public:
    // static public T Add(ref T source, System.Int32 elementOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Add(ByRef<T> source, int elementOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(elementOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), elementOffset);
    }
    // static public T AddByteOffset(ref T source, System.IntPtr byteOffset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AddByteOffset(ByRef<T> source, ::System::IntPtr byteOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AddByteOffset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AddByteOffset", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(byteOffset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(source), byteOffset);
    }
    // static public T As(System.Object o)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T As(::Il2CppObject* o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::As");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "As", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, o);
    }
    // static public T AsRef(System.Void* source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T AsRef(void* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::AsRef");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "AsRef", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source);
    }
    // static public System.IntPtr ByteOffset(ref T origin, ref T target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::IntPtr ByteOffset(ByRef<T> origin, ByRef<T> target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::Unsafe::ByteOffset");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Runtime.CompilerServices", "Unsafe", "ByteOffset", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(target)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(origin), byref(target));
    }
  }; // System.Runtime.CompilerServices.Unsafe
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AddByteOffset
// Il2CppName: AddByteOffset
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::As
// Il2CppName: As
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::AsRef
// Il2CppName: AsRef
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Runtime::CompilerServices::Unsafe::ByteOffset
// Il2CppName: ByteOffset
// Cannot write MetadataGetter for generic methods!
