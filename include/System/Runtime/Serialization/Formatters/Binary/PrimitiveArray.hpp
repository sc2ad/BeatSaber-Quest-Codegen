// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE
#include "System/Runtime/Serialization/Formatters/Binary/InternalPrimitiveTypeE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Runtime.Serialization.Formatters.Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Forward declaring type: PrimitiveArray
  class PrimitiveArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::Serialization::Formatters::Binary::PrimitiveArray);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::Serialization::Formatters::Binary::PrimitiveArray*, "System.Runtime.Serialization.Formatters.Binary", "PrimitiveArray");
// Type namespace: System.Runtime.Serialization.Formatters.Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.Formatters.Binary.PrimitiveArray
  // [TokenAttribute] Offset: FFFFFFFF
  class PrimitiveArray : public ::Il2CppObject {
    public:
    public:
    // private System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code
    // Size: 0x4
    // Offset: 0x10
    ::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE code;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE) == 0x4);
    // Padding between fields: code and: booleanA
    char __padding0[0x4] = {};
    // private System.Boolean[] booleanA
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<bool> booleanA;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Char[] charA
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Il2CppChar> charA;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Double[] doubleA
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<double> doubleA;
    // Field size check
    static_assert(sizeof(::ArrayW<double>) == 0x8);
    // private System.Int16[] int16A
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int16_t> int16A;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private System.Int32[] int32A
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> int32A;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int64[] int64A
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int64_t> int64A;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    // private System.SByte[] sbyteA
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int8_t> sbyteA;
    // Field size check
    static_assert(sizeof(::ArrayW<int8_t>) == 0x8);
    // private System.Single[] singleA
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> singleA;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.UInt16[] uint16A
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<uint16_t> uint16A;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // private System.UInt32[] uint32A
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<uint> uint32A;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.UInt64[] uint64A
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<uint64_t> uint64A;
    // Field size check
    static_assert(sizeof(::ArrayW<uint64_t>) == 0x8);
    public:
    // Get instance field reference: private System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE& dyn_code();
    // Get instance field reference: private System.Boolean[] booleanA
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_booleanA();
    // Get instance field reference: private System.Char[] charA
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_charA();
    // Get instance field reference: private System.Double[] doubleA
    [[deprecated("Use field access instead!")]] ::ArrayW<double>& dyn_doubleA();
    // Get instance field reference: private System.Int16[] int16A
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_int16A();
    // Get instance field reference: private System.Int32[] int32A
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_int32A();
    // Get instance field reference: private System.Int64[] int64A
    [[deprecated("Use field access instead!")]] ::ArrayW<int64_t>& dyn_int64A();
    // Get instance field reference: private System.SByte[] sbyteA
    [[deprecated("Use field access instead!")]] ::ArrayW<int8_t>& dyn_sbyteA();
    // Get instance field reference: private System.Single[] singleA
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_singleA();
    // Get instance field reference: private System.UInt16[] uint16A
    [[deprecated("Use field access instead!")]] ::ArrayW<uint16_t>& dyn_uint16A();
    // Get instance field reference: private System.UInt32[] uint32A
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_uint32A();
    // Get instance field reference: private System.UInt64[] uint64A
    [[deprecated("Use field access instead!")]] ::ArrayW<uint64_t>& dyn_uint64A();
    // System.Void .ctor(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array)
    // Offset: 0x16B559C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrimitiveArray* New_ctor(::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE code, ::System::Array* array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrimitiveArray*, creationType>(code, array)));
    }
    // System.Void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array)
    // Offset: 0x16B55DC
    void Init(::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE code, ::System::Array* array);
    // System.Void SetValue(System.String value, System.Int32 index)
    // Offset: 0x16B5864
    void SetValue(::StringW value, int index);
  }; // System.Runtime.Serialization.Formatters.Binary.PrimitiveArray
  #pragma pack(pop)
  static check_size<sizeof(PrimitiveArray), 104 + sizeof(::ArrayW<uint64_t>)> __System_Runtime_Serialization_Formatters_Binary_PrimitiveArraySizeCheck;
  static_assert(sizeof(PrimitiveArray) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::*)(::System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE, ::System::Array*)>(&System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::Init)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization.Formatters.Binary", "InternalPrimitiveTypeE")->byval_arg;
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::Formatters::Binary::PrimitiveArray*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, array});
  }
};
// Writing MetadataGetter for method: System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::*)(::StringW, int)>(&System::Runtime::Serialization::Formatters::Binary::PrimitiveArray::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::Serialization::Formatters::Binary::PrimitiveArray*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index});
  }
};
