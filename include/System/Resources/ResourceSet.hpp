// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Resources
namespace System::Resources {
  // Forward declaring type: IResourceReader
  class IResourceReader;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Resources
namespace System::Resources {
  // Forward declaring type: ResourceSet
  class ResourceSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Resources::ResourceSet);
DEFINE_IL2CPP_ARG_TYPE(::System::Resources::ResourceSet*, "System.Resources", "ResourceSet");
// Type namespace: System.Resources
namespace System::Resources {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Resources.ResourceSet
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1039160
  class ResourceSet : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Collections::IEnumerable*/ {
    public:
    public:
    // protected System.Resources.IResourceReader Reader
    // Size: 0x8
    // Offset: 0x10
    ::System::Resources::IResourceReader* Reader;
    // Field size check
    static_assert(sizeof(::System::Resources::IResourceReader*) == 0x8);
    // protected System.Collections.Hashtable Table
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Hashtable* Table;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _caseInsensitiveTable
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Hashtable* caseInsensitiveTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Creating interface conversion operator: i_IEnumerable
    inline ::System::Collections::IEnumerable* i_IEnumerable() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Get instance field reference: protected System.Resources.IResourceReader Reader
    [[deprecated("Use field access instead!")]] ::System::Resources::IResourceReader*& dyn_Reader();
    // Get instance field reference: protected System.Collections.Hashtable Table
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_Table();
    // Get instance field reference: private System.Collections.Hashtable _caseInsensitiveTable
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__caseInsensitiveTable();
    // System.Void .ctor(System.Boolean junk)
    // Offset: 0x1D84740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceSet* New_ctor(bool junk) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Resources::ResourceSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceSet*, creationType>(junk)));
    }
    // private System.Void CommonInit()
    // Offset: 0x1D846E0
    void CommonInit();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1D84748
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0x1D84814
    void Dispose();
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x1D84824
    ::System::Collections::IDictionaryEnumerator* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1D848D0
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Collections.IDictionaryEnumerator GetEnumeratorHelper()
    // Offset: 0x1D84828
    ::System::Collections::IDictionaryEnumerator* GetEnumeratorHelper();
    // public System.String GetString(System.String name)
    // Offset: 0x1D848D4
    ::StringW GetString(::StringW name);
    // public System.String GetString(System.String name, System.Boolean ignoreCase)
    // Offset: 0x1D84B3C
    ::StringW GetString(::StringW name, bool ignoreCase);
    // public System.Object GetObject(System.String name)
    // Offset: 0x1D85024
    ::Il2CppObject* GetObject(::StringW name);
    // public System.Object GetObject(System.String name, System.Boolean ignoreCase)
    // Offset: 0x1D85028
    ::Il2CppObject* GetObject(::StringW name, bool ignoreCase);
    // private System.Object GetObjectInternal(System.String name)
    // Offset: 0x1D84A44
    ::Il2CppObject* GetObjectInternal(::StringW name);
    // private System.Object GetCaseInsensitiveObjectInternal(System.String name)
    // Offset: 0x1D84D40
    ::Il2CppObject* GetCaseInsensitiveObjectInternal(::StringW name);
    // protected System.Void .ctor()
    // Offset: 0x1D846B8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Resources::ResourceSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceSet*, creationType>()));
    }
  }; // System.Resources.ResourceSet
  #pragma pack(pop)
  static check_size<sizeof(ResourceSet), 32 + sizeof(::System::Collections::Hashtable*)> __System_Resources_ResourceSetSizeCheck;
  static_assert(sizeof(ResourceSet) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Resources::ResourceSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Resources::ResourceSet::CommonInit
// Il2CppName: CommonInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Resources::ResourceSet::*)()>(&System::Resources::ResourceSet::CommonInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "CommonInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Resources::ResourceSet::*)(bool)>(&System::Resources::ResourceSet::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Resources::ResourceSet::*)()>(&System::Resources::ResourceSet::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IDictionaryEnumerator* (System::Resources::ResourceSet::*)()>(&System::Resources::ResourceSet::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Resources::ResourceSet::*)()>(&System::Resources::ResourceSet::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetEnumeratorHelper
// Il2CppName: GetEnumeratorHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IDictionaryEnumerator* (System::Resources::ResourceSet::*)()>(&System::Resources::ResourceSet::GetEnumeratorHelper)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetEnumeratorHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Resources::ResourceSet::*)(::StringW)>(&System::Resources::ResourceSet::GetString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Resources::ResourceSet::*)(::StringW, bool)>(&System::Resources::ResourceSet::GetString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetObject
// Il2CppName: GetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Resources::ResourceSet::*)(::StringW)>(&System::Resources::ResourceSet::GetObject)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetObject
// Il2CppName: GetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Resources::ResourceSet::*)(::StringW, bool)>(&System::Resources::ResourceSet::GetObject)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetObjectInternal
// Il2CppName: GetObjectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Resources::ResourceSet::*)(::StringW)>(&System::Resources::ResourceSet::GetObjectInternal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetObjectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::GetCaseInsensitiveObjectInternal
// Il2CppName: GetCaseInsensitiveObjectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Resources::ResourceSet::*)(::StringW)>(&System::Resources::ResourceSet::GetCaseInsensitiveObjectInternal)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Resources::ResourceSet*), "GetCaseInsensitiveObjectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Resources::ResourceSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
