// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.ProxyChain
#include "System/Net/ProxyChain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: StaticProxy
  class StaticProxy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::StaticProxy);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::StaticProxy*, "System.Net", "StaticProxy");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.StaticProxy
  // [TokenAttribute] Offset: FFFFFFFF
  class StaticProxy : public ::System::Net::ProxyChain {
    public:
    public:
    // private System.Uri m_Proxy
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* m_Proxy;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Uri*
    constexpr operator ::System::Uri*() const noexcept {
      return m_Proxy;
    }
    // Get instance field reference: private System.Uri m_Proxy
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_m_Proxy();
    // System.Void .ctor(System.Uri destination, System.Uri proxy)
    // Offset: 0xC9A448
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StaticProxy* New_ctor(::System::Uri* destination, ::System::Uri* proxy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::StaticProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StaticProxy*, creationType>(destination, proxy)));
    }
    // protected override System.Boolean GetNextProxy(out System.Uri proxy)
    // Offset: 0xC9A51C
    // Implemented from: System.Net.ProxyChain
    // Base method: System.Boolean ProxyChain::GetNextProxy(out System.Uri proxy)
    bool GetNextProxy(ByRef<::System::Uri*> proxy);
  }; // System.Net.StaticProxy
  #pragma pack(pop)
  static check_size<sizeof(StaticProxy), 56 + sizeof(::System::Uri*)> __System_Net_StaticProxySizeCheck;
  static_assert(sizeof(StaticProxy) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::StaticProxy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::StaticProxy::GetNextProxy
// Il2CppName: GetNextProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::StaticProxy::*)(ByRef<::System::Uri*>)>(&System::Net::StaticProxy::GetNextProxy)> {
  static const MethodInfo* get() {
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System", "Uri")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::StaticProxy*), "GetNextProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proxy});
  }
};
