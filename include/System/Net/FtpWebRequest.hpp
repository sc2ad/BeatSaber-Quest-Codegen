// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: FtpAsyncResult
  class FtpAsyncResult;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: IPHostEntry
  class IPHostEntry;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: FtpWebResponse
  class FtpWebResponse;
  // Skipping declaration: RequestState because it is already included!
  // Forward declaring type: FtpStatus
  class FtpStatus;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: StreamReader
  class StreamReader;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: FtpWebRequest
  class FtpWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::FtpWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpWebRequest*, "System.Net", "FtpWebRequest");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class FtpWebRequest : public ::System::Net::WebRequest {
    public:
    // Nested type: ::System::Net::FtpWebRequest::RequestState
    struct RequestState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.FtpWebRequest/System.Net.RequestState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RequestState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RequestState
      constexpr RequestState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Before
      static constexpr const int Before = 0;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Before
      static ::System::Net::FtpWebRequest::RequestState _get_Before();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Before
      static void _set_Before(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Scheduled
      static constexpr const int Scheduled = 1;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Scheduled
      static ::System::Net::FtpWebRequest::RequestState _get_Scheduled();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Scheduled
      static void _set_Scheduled(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Connecting
      static constexpr const int Connecting = 2;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Connecting
      static ::System::Net::FtpWebRequest::RequestState _get_Connecting();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Connecting
      static void _set_Connecting(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Authenticating
      static constexpr const int Authenticating = 3;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Authenticating
      static ::System::Net::FtpWebRequest::RequestState _get_Authenticating();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Authenticating
      static void _set_Authenticating(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState OpeningData
      static constexpr const int OpeningData = 4;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState OpeningData
      static ::System::Net::FtpWebRequest::RequestState _get_OpeningData();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState OpeningData
      static void _set_OpeningData(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState TransferInProgress
      static constexpr const int TransferInProgress = 5;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState TransferInProgress
      static ::System::Net::FtpWebRequest::RequestState _get_TransferInProgress();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState TransferInProgress
      static void _set_TransferInProgress(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Finished
      static constexpr const int Finished = 6;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Finished
      static ::System::Net::FtpWebRequest::RequestState _get_Finished();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Finished
      static void _set_Finished(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Aborted
      static constexpr const int Aborted = 7;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Aborted
      static ::System::Net::FtpWebRequest::RequestState _get_Aborted();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Aborted
      static void _set_Aborted(::System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/System.Net.RequestState Error
      static constexpr const int Error = 8;
      // Get static field: static public System.Net.FtpWebRequest/System.Net.RequestState Error
      static ::System::Net::FtpWebRequest::RequestState _get_Error();
      // Set static field: static public System.Net.FtpWebRequest/System.Net.RequestState Error
      static void _set_Error(::System::Net::FtpWebRequest::RequestState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.FtpWebRequest/System.Net.RequestState
    #pragma pack(pop)
    static check_size<sizeof(FtpWebRequest::RequestState), 0 + sizeof(int)> __System_Net_FtpWebRequest_RequestStateSizeCheck;
    static_assert(sizeof(FtpWebRequest::RequestState) == 0x4);
    public:
    // private System.Uri requestUri
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* requestUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.String file_name
    // Size: 0x8
    // Offset: 0x40
    ::StringW file_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Net.ServicePoint servicePoint
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.IO.Stream origDataStream
    // Size: 0x8
    // Offset: 0x50
    ::System::IO::Stream* origDataStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Stream dataStream
    // Size: 0x8
    // Offset: 0x58
    ::System::IO::Stream* dataStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Stream controlStream
    // Size: 0x8
    // Offset: 0x60
    ::System::IO::Stream* controlStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.StreamReader controlReader
    // Size: 0x8
    // Offset: 0x68
    ::System::IO::StreamReader* controlReader;
    // Field size check
    static_assert(sizeof(::System::IO::StreamReader*) == 0x8);
    // private System.Net.NetworkCredential credentials
    // Size: 0x8
    // Offset: 0x70
    ::System::Net::NetworkCredential* credentials;
    // Field size check
    static_assert(sizeof(::System::Net::NetworkCredential*) == 0x8);
    // private System.Net.IPHostEntry hostEntry
    // Size: 0x8
    // Offset: 0x78
    ::System::Net::IPHostEntry* hostEntry;
    // Field size check
    static_assert(sizeof(::System::Net::IPHostEntry*) == 0x8);
    // private System.Net.IPEndPoint localEndPoint
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::IPEndPoint* localEndPoint;
    // Field size check
    static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
    // private System.Net.IPEndPoint remoteEndPoint
    // Size: 0x8
    // Offset: 0x88
    ::System::Net::IPEndPoint* remoteEndPoint;
    // Field size check
    static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(::System::Net::IWebProxy*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0x98
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rwTimeout
    // Size: 0x4
    // Offset: 0x9C
    int rwTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 offset
    // Size: 0x8
    // Offset: 0xA0
    int64_t offset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean binary
    // Size: 0x1
    // Offset: 0xA8
    bool binary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean enableSsl
    // Size: 0x1
    // Offset: 0xA9
    bool enableSsl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usePassive
    // Size: 0x1
    // Offset: 0xAA
    bool usePassive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0xAB
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: method
    char __padding18[0x4] = {};
    // private System.String method
    // Size: 0x8
    // Offset: 0xB0
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String renameTo
    // Size: 0x8
    // Offset: 0xB8
    ::StringW renameTo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Object locker
    // Size: 0x8
    // Offset: 0xC0
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.FtpWebRequest/System.Net.RequestState requestState
    // Size: 0x4
    // Offset: 0xC8
    ::System::Net::FtpWebRequest::RequestState requestState;
    // Field size check
    static_assert(sizeof(::System::Net::FtpWebRequest::RequestState) == 0x4);
    // Padding between fields: requestState and: asyncResult
    char __padding22[0x4] = {};
    // private System.Net.FtpAsyncResult asyncResult
    // Size: 0x8
    // Offset: 0xD0
    ::System::Net::FtpAsyncResult* asyncResult;
    // Field size check
    static_assert(sizeof(::System::Net::FtpAsyncResult*) == 0x8);
    // private System.Net.FtpWebResponse ftpResponse
    // Size: 0x8
    // Offset: 0xD8
    ::System::Net::FtpWebResponse* ftpResponse;
    // Field size check
    static_assert(sizeof(::System::Net::FtpWebResponse*) == 0x8);
    // private System.IO.Stream requestStream
    // Size: 0x8
    // Offset: 0xE0
    ::System::IO::Stream* requestStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.String initial_path
    // Size: 0x8
    // Offset: 0xE8
    ::StringW initial_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Text.Encoding dataEncoding
    // Size: 0x8
    // Offset: 0xF0
    ::System::Text::Encoding* dataEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    public:
    // Get static field: static private readonly System.String[] supportedCommands
    static ::ArrayW<::StringW> _get_supportedCommands();
    // Set static field: static private readonly System.String[] supportedCommands
    static void _set_supportedCommands(::ArrayW<::StringW> value);
    // Get instance field reference: private System.Uri requestUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_requestUri();
    // Get instance field reference: private System.String file_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_file_name();
    // Get instance field reference: private System.Net.ServicePoint servicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_servicePoint();
    // Get instance field reference: private System.IO.Stream origDataStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_origDataStream();
    // Get instance field reference: private System.IO.Stream dataStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_dataStream();
    // Get instance field reference: private System.IO.Stream controlStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_controlStream();
    // Get instance field reference: private System.IO.StreamReader controlReader
    [[deprecated("Use field access instead!")]] ::System::IO::StreamReader*& dyn_controlReader();
    // Get instance field reference: private System.Net.NetworkCredential credentials
    [[deprecated("Use field access instead!")]] ::System::Net::NetworkCredential*& dyn_credentials();
    // Get instance field reference: private System.Net.IPHostEntry hostEntry
    [[deprecated("Use field access instead!")]] ::System::Net::IPHostEntry*& dyn_hostEntry();
    // Get instance field reference: private System.Net.IPEndPoint localEndPoint
    [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn_localEndPoint();
    // Get instance field reference: private System.Net.IPEndPoint remoteEndPoint
    [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn_remoteEndPoint();
    // Get instance field reference: private System.Net.IWebProxy proxy
    [[deprecated("Use field access instead!")]] ::System::Net::IWebProxy*& dyn_proxy();
    // Get instance field reference: private System.Int32 timeout
    [[deprecated("Use field access instead!")]] int& dyn_timeout();
    // Get instance field reference: private System.Int32 rwTimeout
    [[deprecated("Use field access instead!")]] int& dyn_rwTimeout();
    // Get instance field reference: private System.Int64 offset
    [[deprecated("Use field access instead!")]] int64_t& dyn_offset();
    // Get instance field reference: private System.Boolean binary
    [[deprecated("Use field access instead!")]] bool& dyn_binary();
    // Get instance field reference: private System.Boolean enableSsl
    [[deprecated("Use field access instead!")]] bool& dyn_enableSsl();
    // Get instance field reference: private System.Boolean usePassive
    [[deprecated("Use field access instead!")]] bool& dyn_usePassive();
    // Get instance field reference: private System.Boolean keepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_keepAlive();
    // Get instance field reference: private System.String method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_method();
    // Get instance field reference: private System.String renameTo
    [[deprecated("Use field access instead!")]] ::StringW& dyn_renameTo();
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Net.FtpWebRequest/System.Net.RequestState requestState
    [[deprecated("Use field access instead!")]] ::System::Net::FtpWebRequest::RequestState& dyn_requestState();
    // Get instance field reference: private System.Net.FtpAsyncResult asyncResult
    [[deprecated("Use field access instead!")]] ::System::Net::FtpAsyncResult*& dyn_asyncResult();
    // Get instance field reference: private System.Net.FtpWebResponse ftpResponse
    [[deprecated("Use field access instead!")]] ::System::Net::FtpWebResponse*& dyn_ftpResponse();
    // Get instance field reference: private System.IO.Stream requestStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_requestStream();
    // Get instance field reference: private System.String initial_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initial_path();
    // Get instance field reference: private System.Text.Encoding dataEncoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_dataEncoding();
    // public System.Boolean get_EnableSsl()
    // Offset: 0x1AADBB8
    bool get_EnableSsl();
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0x1AADDD8
    int get_ReadWriteTimeout();
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x1AADDE8
    ::System::Net::ServicePoint* get_ServicePoint();
    // private System.String get_DataType()
    // Offset: 0x1AADF48
    ::StringW get_DataType();
    // private System.Net.FtpWebRequest/System.Net.RequestState get_State()
    // Offset: 0x1AADFA8
    ::System::Net::FtpWebRequest::RequestState get_State();
    // private System.Void set_State(System.Net.FtpWebRequest/System.Net.RequestState value)
    // Offset: 0x1AAE034
    void set_State(::System::Net::FtpWebRequest::RequestState value);
    // System.Void .ctor(System.Uri uri)
    // Offset: 0x1AAD798
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpWebRequest* New_ctor(::System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::FtpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpWebRequest*, creationType>(uri)));
    }
    // static private System.Exception GetMustImplement()
    // Offset: 0x1AAD97C
    static ::System::Exception* GetMustImplement();
    // private System.Net.ServicePoint GetServicePoint()
    // Offset: 0x1AADDEC
    ::System::Net::ServicePoint* GetServicePoint();
    // private System.Void ResolveHost()
    // Offset: 0x1AAEE48
    void ResolveHost();
    // private System.Void ProcessRequest()
    // Offset: 0x1AAEF80
    void ProcessRequest();
    // private System.Void SetType()
    // Offset: 0x1AAF9A4
    void SetType();
    // private System.String GetRemoteFolderPath(System.Uri uri)
    // Offset: 0x1AAFBCC
    ::StringW GetRemoteFolderPath(::System::Uri* uri);
    // private System.Void CWDAndSetFileName(System.Uri uri)
    // Offset: 0x1AAFDA0
    void CWDAndSetFileName(::System::Uri* uri);
    // private System.Void ProcessMethod()
    // Offset: 0x1AAF22C
    void ProcessMethod();
    // private System.Void CloseControlConnection()
    // Offset: 0x1AB0A74
    void CloseControlConnection();
    // System.Void CloseDataConnection()
    // Offset: 0x1AAC010
    void CloseDataConnection();
    // private System.Void CloseConnection()
    // Offset: 0x1AB0B88
    void CloseConnection();
    // private System.Void ProcessSimpleMethod()
    // Offset: 0x1AB0508
    void ProcessSimpleMethod();
    // private System.Void UploadData()
    // Offset: 0x1AB0464
    void UploadData();
    // private System.Void DownloadData()
    // Offset: 0x1AB03C4
    void DownloadData();
    // private System.Void CheckRequestStarted()
    // Offset: 0x1AADB30
    void CheckRequestStarted();
    // private System.Void OpenControlConnection()
    // Offset: 0x1AAFF20
    void OpenControlConnection();
    // static private System.String GetInitialPath(System.Net.FtpStatus status)
    // Offset: 0x1AB13CC
    static ::StringW GetInitialPath(::System::Net::FtpStatus* status);
    // private System.Net.Sockets.Socket SetupPassiveConnection(System.String statusDescription, System.Boolean ipv6)
    // Offset: 0x1AB1554
    ::System::Net::Sockets::Socket* SetupPassiveConnection(::StringW statusDescription, bool ipv6);
    // private System.Int32 GetPortV4(System.String responseString)
    // Offset: 0x1AB1724
    int GetPortV4(::StringW responseString);
    // private System.Int32 GetPortV6(System.String responseString)
    // Offset: 0x1AB1960
    int GetPortV6(::StringW responseString);
    // private System.String FormatAddress(System.Net.IPAddress address, System.Int32 Port)
    // Offset: 0x1AB1B30
    ::StringW FormatAddress(::System::Net::IPAddress* address, int Port);
    // private System.String FormatAddressV6(System.Net.IPAddress address, System.Int32 port)
    // Offset: 0x1AB1C74
    ::StringW FormatAddressV6(::System::Net::IPAddress* address, int port);
    // private System.Exception CreateExceptionFromResponse(System.Net.FtpStatus status)
    // Offset: 0x1AAFAF0
    ::System::Exception* CreateExceptionFromResponse(::System::Net::FtpStatus* status);
    // System.Void SetTransferCompleted()
    // Offset: 0x1AAC048
    void SetTransferCompleted();
    // System.Void OperationCompleted()
    // Offset: 0x1AB1DA0
    void OperationCompleted();
    // private System.Void SetCompleteWithError(System.Exception exc)
    // Offset: 0x1AAF6BC
    void SetCompleteWithError(::System::Exception* exc);
    // private System.Net.Sockets.Socket InitDataConnection()
    // Offset: 0x1AB1DB0
    ::System::Net::Sockets::Socket* InitDataConnection();
    // private System.Void OpenDataConnection()
    // Offset: 0x1AB0BC4
    void OpenDataConnection();
    // private System.Void Authenticate()
    // Offset: 0x1AB0FDC
    void Authenticate();
    // private System.Net.FtpStatus SendCommand(System.String command, params System.String[] parameters)
    // Offset: 0x1AAFAE0
    ::System::Net::FtpStatus* SendCommand(::StringW command, ::ArrayW<::StringW> parameters);
    // private System.Net.FtpStatus SendCommand(System.Boolean waitResponse, System.String command, params System.String[] parameters)
    // Offset: 0x1AAE330
    ::System::Net::FtpStatus* SendCommand(bool waitResponse, ::StringW command, ::ArrayW<::StringW> parameters);
    // static System.Net.FtpStatus ServiceNotAvailable()
    // Offset: 0x1AB24A4
    static ::System::Net::FtpStatus* ServiceNotAvailable();
    // System.Net.FtpStatus GetResponseStatus()
    // Offset: 0x1AAF714
    ::System::Net::FtpStatus* GetResponseStatus();
    // private System.Void InitiateSecureConnection(ref System.IO.Stream stream)
    // Offset: 0x1AB23A4
    void InitiateSecureConnection(ByRef<::System::IO::Stream*> stream);
    // System.Boolean ChangeToSSLSocket(ref System.IO.Stream stream)
    // Offset: 0x1AB21C4
    bool ChangeToSSLSocket(ByRef<::System::IO::Stream*> stream);
    // private System.Boolean InFinalState()
    // Offset: 0x1AAE510
    bool InFinalState();
    // private System.Boolean InProgress()
    // Offset: 0x1AAF6D8
    bool InProgress();
    // System.Void CheckIfAborted()
    // Offset: 0x1AABF80
    void CheckIfAborted();
    // private System.Void CheckFinalState()
    // Offset: 0x1AAE0D4
    void CheckFinalState();
    // public override System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x1AAD9D8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ConnectionGroupName(System.String value)
    void set_ConnectionGroupName(::StringW value);
    // public override System.Int64 get_ContentLength()
    // Offset: 0x1AADA3C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x1AADA44
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0x1AADA48
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    ::System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x1AADA50
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(::System::Net::ICredentials* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x1AADBC0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    ::System::Net::WebHeaderCollection* get_Headers();
    // public override System.String get_Method()
    // Offset: 0x1AADC24
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::StringW get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0x1AADC2C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::StringW value);
    // public override System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x1AADD48
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_PreAuthenticate(System.Boolean value)
    void set_PreAuthenticate(bool value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0x1AADDA8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    ::System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x1AADDB0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(::System::Net::IWebProxy* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0x1AADDE0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    ::System::Uri* get_RequestUri();
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0x1AADE78
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // public override System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x1AADEDC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_UseDefaultCredentials(System.Boolean value)
    void set_UseDefaultCredentials(bool value);
    // public override System.Int32 get_Timeout()
    // Offset: 0x1AADF40
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // static private System.Void .cctor()
    // Offset: 0x1AB2528
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
    // public override System.Void Abort()
    // Offset: 0x1AAE15C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1AAE650
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetResponse(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x1AAE858
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    ::System::Net::WebResponse* EndGetResponse(::System::IAsyncResult* asyncResult);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0x1AAE9CC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    ::System::Net::WebResponse* GetResponse();
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1AAEA14
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetRequestStream(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x1AAEC50
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult);
  }; // System.Net.FtpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(FtpWebRequest), 240 + sizeof(::System::Text::Encoding*)> __System_Net_FtpWebRequestSizeCheck;
  static_assert(sizeof(FtpWebRequest) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::FtpWebRequest::RequestState, "System.Net", "FtpWebRequest/RequestState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_EnableSsl
// Il2CppName: get_EnableSsl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_EnableSsl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_EnableSsl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ReadWriteTimeout
// Il2CppName: get_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_DataType
// Il2CppName: get_DataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_DataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_DataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpWebRequest::RequestState (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::FtpWebRequest::RequestState)>(&System::Net::FtpWebRequest::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "FtpWebRequest/RequestState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetMustImplement
// Il2CppName: GetMustImplement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Net::FtpWebRequest::GetMustImplement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetMustImplement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetServicePoint
// Il2CppName: GetServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::GetServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ResolveHost
// Il2CppName: ResolveHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::ResolveHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ResolveHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ProcessRequest
// Il2CppName: ProcessRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::ProcessRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ProcessRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SetType
// Il2CppName: SetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::SetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetRemoteFolderPath
// Il2CppName: GetRemoteFolderPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)(::System::Uri*)>(&System::Net::FtpWebRequest::GetRemoteFolderPath)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetRemoteFolderPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CWDAndSetFileName
// Il2CppName: CWDAndSetFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Uri*)>(&System::Net::FtpWebRequest::CWDAndSetFileName)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CWDAndSetFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ProcessMethod
// Il2CppName: ProcessMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::ProcessMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ProcessMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CloseControlConnection
// Il2CppName: CloseControlConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CloseControlConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CloseControlConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CloseDataConnection
// Il2CppName: CloseDataConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CloseDataConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CloseDataConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CloseConnection
// Il2CppName: CloseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CloseConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CloseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ProcessSimpleMethod
// Il2CppName: ProcessSimpleMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::ProcessSimpleMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ProcessSimpleMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::UploadData
// Il2CppName: UploadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::UploadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "UploadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::DownloadData
// Il2CppName: DownloadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::DownloadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "DownloadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CheckRequestStarted
// Il2CppName: CheckRequestStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CheckRequestStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CheckRequestStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::OpenControlConnection
// Il2CppName: OpenControlConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::OpenControlConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "OpenControlConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetInitialPath
// Il2CppName: GetInitialPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Net::FtpStatus*)>(&System::Net::FtpWebRequest::GetInitialPath)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.Net", "FtpStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetInitialPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SetupPassiveConnection
// Il2CppName: SetupPassiveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::FtpWebRequest::*)(::StringW, bool)>(&System::Net::FtpWebRequest::SetupPassiveConnection)> {
  static const MethodInfo* get() {
    static auto* statusDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ipv6 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SetupPassiveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusDescription, ipv6});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetPortV4
// Il2CppName: GetPortV4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::GetPortV4)> {
  static const MethodInfo* get() {
    static auto* responseString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetPortV4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseString});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetPortV6
// Il2CppName: GetPortV6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::GetPortV6)> {
  static const MethodInfo* get() {
    static auto* responseString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetPortV6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseString});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::FormatAddress
// Il2CppName: FormatAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)(::System::Net::IPAddress*, int)>(&System::Net::FtpWebRequest::FormatAddress)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* Port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "FormatAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, Port});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::FormatAddressV6
// Il2CppName: FormatAddressV6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)(::System::Net::IPAddress*, int)>(&System::Net::FtpWebRequest::FormatAddressV6)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "FormatAddressV6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, port});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CreateExceptionFromResponse
// Il2CppName: CreateExceptionFromResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (System::Net::FtpWebRequest::*)(::System::Net::FtpStatus*)>(&System::Net::FtpWebRequest::CreateExceptionFromResponse)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.Net", "FtpStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CreateExceptionFromResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SetTransferCompleted
// Il2CppName: SetTransferCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::SetTransferCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SetTransferCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::OperationCompleted
// Il2CppName: OperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::OperationCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "OperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SetCompleteWithError
// Il2CppName: SetCompleteWithError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Exception*)>(&System::Net::FtpWebRequest::SetCompleteWithError)> {
  static const MethodInfo* get() {
    static auto* exc = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SetCompleteWithError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exc});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::InitDataConnection
// Il2CppName: InitDataConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::InitDataConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "InitDataConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::OpenDataConnection
// Il2CppName: OpenDataConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::OpenDataConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "OpenDataConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::Authenticate
// Il2CppName: Authenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::Authenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "Authenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SendCommand
// Il2CppName: SendCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpStatus* (System::Net::FtpWebRequest::*)(::StringW, ::ArrayW<::StringW>)>(&System::Net::FtpWebRequest::SendCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SendCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, parameters});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::SendCommand
// Il2CppName: SendCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpStatus* (System::Net::FtpWebRequest::*)(bool, ::StringW, ::ArrayW<::StringW>)>(&System::Net::FtpWebRequest::SendCommand)> {
  static const MethodInfo* get() {
    static auto* waitResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* command = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "SendCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waitResponse, command, parameters});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ServiceNotAvailable
// Il2CppName: ServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpStatus* (*)()>(&System::Net::FtpWebRequest::ServiceNotAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetResponseStatus
// Il2CppName: GetResponseStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::FtpStatus* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::GetResponseStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetResponseStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::InitiateSecureConnection
// Il2CppName: InitiateSecureConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(ByRef<::System::IO::Stream*>)>(&System::Net::FtpWebRequest::InitiateSecureConnection)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "InitiateSecureConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::ChangeToSSLSocket
// Il2CppName: ChangeToSSLSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)(ByRef<::System::IO::Stream*>)>(&System::Net::FtpWebRequest::ChangeToSSLSocket)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "ChangeToSSLSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::InFinalState
// Il2CppName: InFinalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::InFinalState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "InFinalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::InProgress
// Il2CppName: InProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::InProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "InProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CheckIfAborted
// Il2CppName: CheckIfAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CheckIfAborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CheckIfAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::CheckFinalState
// Il2CppName: CheckFinalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::CheckFinalState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "CheckFinalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ConnectionGroupName
// Il2CppName: set_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_ConnectionGroupName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_ContentLength
// Il2CppName: set_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(int64_t)>(&System::Net::FtpWebRequest::set_ContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICredentials* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::ICredentials*)>(&System::Net::FtpWebRequest::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Method
// Il2CppName: set_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::StringW)>(&System::Net::FtpWebRequest::set_Method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_PreAuthenticate
// Il2CppName: set_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_PreAuthenticate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_Proxy
// Il2CppName: set_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(::System::Net::IWebProxy*)>(&System::Net::FtpWebRequest::set_Proxy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_RequestUri
// Il2CppName: get_RequestUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_RequestUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_RequestUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_UseDefaultCredentials
// Il2CppName: get_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::set_UseDefaultCredentials
// Il2CppName: set_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)(bool)>(&System::Net::FtpWebRequest::set_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "set_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::FtpWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::BeginGetResponse
// Il2CppName: BeginGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::FtpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::FtpWebRequest::BeginGetResponse)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "BeginGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::EndGetResponse
// Il2CppName: EndGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::FtpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::FtpWebRequest::EndGetResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "EndGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::FtpWebRequest::*)()>(&System::Net::FtpWebRequest::GetResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::BeginGetRequestStream
// Il2CppName: BeginGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::FtpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::FtpWebRequest::BeginGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "BeginGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::FtpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::FtpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::FtpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::FtpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
