// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HttpListenerTimeoutManager
  class HttpListenerTimeoutManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HttpListenerTimeoutManager);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpListenerTimeoutManager*, "System.Net", "HttpListenerTimeoutManager");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpListenerTimeoutManager
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpListenerTimeoutManager : public ::Il2CppObject {
    public:
    // public System.TimeSpan get_EntityBody()
    // Offset: 0xFD630C
    ::System::TimeSpan get_EntityBody();
    // public System.Void set_EntityBody(System.TimeSpan value)
    // Offset: 0xFD636C
    void set_EntityBody(::System::TimeSpan value);
    // public System.TimeSpan get_DrainEntityBody()
    // Offset: 0xFD63CC
    ::System::TimeSpan get_DrainEntityBody();
    // public System.Void set_DrainEntityBody(System.TimeSpan value)
    // Offset: 0xFD642C
    void set_DrainEntityBody(::System::TimeSpan value);
    // public System.TimeSpan get_RequestQueue()
    // Offset: 0xFD648C
    ::System::TimeSpan get_RequestQueue();
    // public System.Void set_RequestQueue(System.TimeSpan value)
    // Offset: 0xFD64EC
    void set_RequestQueue(::System::TimeSpan value);
    // public System.TimeSpan get_IdleConnection()
    // Offset: 0xFD654C
    ::System::TimeSpan get_IdleConnection();
    // public System.Void set_IdleConnection(System.TimeSpan value)
    // Offset: 0xFD65AC
    void set_IdleConnection(::System::TimeSpan value);
    // public System.TimeSpan get_HeaderWait()
    // Offset: 0xFD660C
    ::System::TimeSpan get_HeaderWait();
    // public System.Void set_HeaderWait(System.TimeSpan value)
    // Offset: 0xFD666C
    void set_HeaderWait(::System::TimeSpan value);
    // public System.Int64 get_MinSendBytesPerSecond()
    // Offset: 0xFD66CC
    int64_t get_MinSendBytesPerSecond();
    // public System.Void set_MinSendBytesPerSecond(System.Int64 value)
    // Offset: 0xFD672C
    void set_MinSendBytesPerSecond(int64_t value);
    // public System.Void .ctor()
    // Offset: 0xFD678C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpListenerTimeoutManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpListenerTimeoutManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpListenerTimeoutManager*, creationType>()));
    }
  }; // System.Net.HttpListenerTimeoutManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_EntityBody
// Il2CppName: get_EntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_EntityBody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_EntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_EntityBody
// Il2CppName: set_EntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(::System::TimeSpan)>(&System::Net::HttpListenerTimeoutManager::set_EntityBody)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_EntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_DrainEntityBody
// Il2CppName: get_DrainEntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_DrainEntityBody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_DrainEntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_DrainEntityBody
// Il2CppName: set_DrainEntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(::System::TimeSpan)>(&System::Net::HttpListenerTimeoutManager::set_DrainEntityBody)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_DrainEntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_RequestQueue
// Il2CppName: get_RequestQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_RequestQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_RequestQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_RequestQueue
// Il2CppName: set_RequestQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(::System::TimeSpan)>(&System::Net::HttpListenerTimeoutManager::set_RequestQueue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_RequestQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_IdleConnection
// Il2CppName: get_IdleConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_IdleConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_IdleConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_IdleConnection
// Il2CppName: set_IdleConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(::System::TimeSpan)>(&System::Net::HttpListenerTimeoutManager::set_IdleConnection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_IdleConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_HeaderWait
// Il2CppName: get_HeaderWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_HeaderWait)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_HeaderWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_HeaderWait
// Il2CppName: set_HeaderWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(::System::TimeSpan)>(&System::Net::HttpListenerTimeoutManager::set_HeaderWait)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_HeaderWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::get_MinSendBytesPerSecond
// Il2CppName: get_MinSendBytesPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::HttpListenerTimeoutManager::*)()>(&System::Net::HttpListenerTimeoutManager::get_MinSendBytesPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "get_MinSendBytesPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::set_MinSendBytesPerSecond
// Il2CppName: set_MinSendBytesPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpListenerTimeoutManager::*)(int64_t)>(&System::Net::HttpListenerTimeoutManager::set_MinSendBytesPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpListenerTimeoutManager*), "set_MinSendBytesPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpListenerTimeoutManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
