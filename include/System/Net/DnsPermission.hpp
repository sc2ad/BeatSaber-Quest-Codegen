// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.CodeAccessPermission
#include "System/Security/CodeAccessPermission.hpp"
// Including type: System.Security.Permissions.IUnrestrictedPermission
#include "System/Security/Permissions/IUnrestrictedPermission.hpp"
// Including type: System.Security.Permissions.PermissionState
#include "System/Security/Permissions/PermissionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security
namespace System::Security {
  // Skipping declaration: IPermission because it is already included!
  // Forward declaring type: SecurityElement
  class SecurityElement;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: DnsPermission
  class DnsPermission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::DnsPermission);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::DnsPermission*, "System.Net", "DnsPermission");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.DnsPermission
  // [TokenAttribute] Offset: FFFFFFFF
  class DnsPermission : public ::System::Security::CodeAccessPermission/*, public ::System::Security::Permissions::IUnrestrictedPermission*/ {
    public:
    // Creating interface conversion operator: operator ::System::Security::Permissions::IUnrestrictedPermission
    operator ::System::Security::Permissions::IUnrestrictedPermission() noexcept {
      return *reinterpret_cast<::System::Security::Permissions::IUnrestrictedPermission*>(this);
    }
    // public System.Void .ctor(System.Security.Permissions.PermissionState state)
    // Offset: 0x106CE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DnsPermission* New_ctor(::System::Security::Permissions::PermissionState state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::DnsPermission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DnsPermission*, creationType>(state)));
    }
    // public System.Boolean IsUnrestricted()
    // Offset: 0x106CF70
    bool IsUnrestricted();
    // public override System.Security.IPermission Copy()
    // Offset: 0x106CE70
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.IPermission CodeAccessPermission::Copy()
    ::System::Security::IPermission* Copy();
    // public override System.Void FromXml(System.Security.SecurityElement securityElement)
    // Offset: 0x106CEB0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Void CodeAccessPermission::FromXml(System.Security.SecurityElement securityElement)
    void FromXml(::System::Security::SecurityElement* securityElement);
    // public override System.Security.IPermission Intersect(System.Security.IPermission target)
    // Offset: 0x106CEF0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.IPermission CodeAccessPermission::Intersect(System.Security.IPermission target)
    ::System::Security::IPermission* Intersect(::System::Security::IPermission* target);
    // public override System.Boolean IsSubsetOf(System.Security.IPermission target)
    // Offset: 0x106CF30
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Boolean CodeAccessPermission::IsSubsetOf(System.Security.IPermission target)
    bool IsSubsetOf(::System::Security::IPermission* target);
    // public override System.Security.SecurityElement ToXml()
    // Offset: 0x106CFB0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.SecurityElement CodeAccessPermission::ToXml()
    ::System::Security::SecurityElement* ToXml();
  }; // System.Net.DnsPermission
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::DnsPermission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::DnsPermission::IsUnrestricted
// Il2CppName: IsUnrestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::DnsPermission::*)()>(&System::Net::DnsPermission::IsUnrestricted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "IsUnrestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::DnsPermission::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::DnsPermission::*)()>(&System::Net::DnsPermission::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::DnsPermission::FromXml
// Il2CppName: FromXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::DnsPermission::*)(::System::Security::SecurityElement*)>(&System::Net::DnsPermission::FromXml)> {
  static const MethodInfo* get() {
    static auto* securityElement = &::il2cpp_utils::GetClassFromName("System.Security", "SecurityElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "FromXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{securityElement});
  }
};
// Writing MetadataGetter for method: System::Net::DnsPermission::Intersect
// Il2CppName: Intersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::DnsPermission::*)(::System::Security::IPermission*)>(&System::Net::DnsPermission::Intersect)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Security", "IPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "Intersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Net::DnsPermission::IsSubsetOf
// Il2CppName: IsSubsetOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::DnsPermission::*)(::System::Security::IPermission*)>(&System::Net::DnsPermission::IsSubsetOf)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Security", "IPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "IsSubsetOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Net::DnsPermission::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::SecurityElement* (System::Net::DnsPermission::*)()>(&System::Net::DnsPermission::ToXml)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::DnsPermission*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
