// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.CodeAccessPermission
#include "System/Security/CodeAccessPermission.hpp"
// Including type: System.Security.Permissions.IUnrestrictedPermission
#include "System/Security/Permissions/IUnrestrictedPermission.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Security.Permissions.PermissionState
#include "System/Security/Permissions/PermissionState.hpp"
// Including type: System.Net.NetworkAccess
#include "System/Net/NetworkAccess.hpp"
// Including type: System.Net.TransportType
#include "System/Net/TransportType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Security
namespace System::Security {
  // Forward declaring type: SecurityElement
  class SecurityElement;
  // Skipping declaration: IPermission because it is already included!
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: SocketPermission
  class SocketPermission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::SocketPermission);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::SocketPermission*, "System.Net", "SocketPermission");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.SocketPermission
  // [TokenAttribute] Offset: FFFFFFFF
  class SocketPermission : public ::System::Security::CodeAccessPermission/*, public ::System::Security::Permissions::IUnrestrictedPermission*/ {
    public:
    public:
    // private System.Collections.ArrayList m_acceptList
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::ArrayList* m_acceptList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList m_connectList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* m_connectList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Boolean m_noRestriction
    // Size: 0x1
    // Offset: 0x20
    bool m_noRestriction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Security::Permissions::IUnrestrictedPermission
    operator ::System::Security::Permissions::IUnrestrictedPermission() noexcept {
      return *reinterpret_cast<::System::Security::Permissions::IUnrestrictedPermission*>(this);
    }
    // static field const value: static public System.Int32 AllPorts
    static constexpr const int AllPorts = -1;
    // Get static field: static public System.Int32 AllPorts
    static int _get_AllPorts();
    // Set static field: static public System.Int32 AllPorts
    static void _set_AllPorts(int value);
    // Get instance field reference: private System.Collections.ArrayList m_acceptList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_m_acceptList();
    // Get instance field reference: private System.Collections.ArrayList m_connectList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_m_connectList();
    // Get instance field reference: private System.Boolean m_noRestriction
    [[deprecated("Use field access instead!")]] bool& dyn_m_noRestriction();
    // public System.Collections.IEnumerator get_AcceptList()
    // Offset: 0xF7CE60
    ::System::Collections::IEnumerator* get_AcceptList();
    // public System.Collections.IEnumerator get_ConnectList()
    // Offset: 0xF7CE84
    ::System::Collections::IEnumerator* get_ConnectList();
    // public System.Void .ctor(System.Security.Permissions.PermissionState state)
    // Offset: 0xF7CC30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SocketPermission* New_ctor(::System::Security::Permissions::PermissionState state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::SocketPermission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SocketPermission*, creationType>(state)));
    }
    // public System.Void .ctor(System.Net.NetworkAccess access, System.Net.TransportType transport, System.String hostName, System.Int32 portNumber)
    // Offset: 0xF7CCCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SocketPermission* New_ctor(::System::Net::NetworkAccess access, ::System::Net::TransportType transport, ::StringW hostName, int portNumber) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::SocketPermission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SocketPermission*, creationType>(access, transport, hostName, portNumber)));
    }
    // public System.Void AddPermission(System.Net.NetworkAccess access, System.Net.TransportType transport, System.String hostName, System.Int32 portNumber)
    // Offset: 0xF7CD90
    void AddPermission(::System::Net::NetworkAccess access, ::System::Net::TransportType transport, ::StringW hostName, int portNumber);
    // private System.Boolean IntersectEmpty(System.Net.SocketPermission permission)
    // Offset: 0xF7D104
    bool IntersectEmpty(::System::Net::SocketPermission* permission);
    // private System.Void Intersect(System.Collections.ArrayList list1, System.Collections.ArrayList list2, System.Collections.ArrayList result)
    // Offset: 0xF7D174
    void Intersect(::System::Collections::ArrayList* list1, ::System::Collections::ArrayList* list2, ::System::Collections::ArrayList* result);
    // private System.Boolean IsSubsetOf(System.Collections.ArrayList list1, System.Collections.ArrayList list2)
    // Offset: 0xF7D954
    bool IsSubsetOf(::System::Collections::ArrayList* list1, ::System::Collections::ArrayList* list2);
    // public System.Boolean IsUnrestricted()
    // Offset: 0xF7DEA0
    bool IsUnrestricted();
    // private System.Void ToXml(System.Security.SecurityElement root, System.String childName, System.Collections.IEnumerator enumerator)
    // Offset: 0xF7E04C
    void ToXml(::System::Security::SecurityElement* root, ::StringW childName, ::System::Collections::IEnumerator* enumerator);
    // private System.Void FromXml(System.Collections.ArrayList endpoints, System.Net.NetworkAccess access)
    // Offset: 0xF7E6E0
    void FromXml(::System::Collections::ArrayList* endpoints, ::System::Net::NetworkAccess access);
    // public override System.Security.IPermission Copy()
    // Offset: 0xF7CEA8
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.IPermission CodeAccessPermission::Copy()
    ::System::Security::IPermission* Copy();
    // public override System.Security.IPermission Intersect(System.Security.IPermission target)
    // Offset: 0xF7CFC0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.IPermission CodeAccessPermission::Intersect(System.Security.IPermission target)
    ::System::Security::IPermission* Intersect(::System::Security::IPermission* target);
    // public override System.Boolean IsSubsetOf(System.Security.IPermission target)
    // Offset: 0xF7D7B0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Boolean CodeAccessPermission::IsSubsetOf(System.Security.IPermission target)
    bool IsSubsetOf(::System::Security::IPermission* target);
    // public override System.Security.SecurityElement ToXml()
    // Offset: 0xF7DEA8
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.SecurityElement CodeAccessPermission::ToXml()
    ::System::Security::SecurityElement* ToXml();
    // public override System.Void FromXml(System.Security.SecurityElement securityElement)
    // Offset: 0xF7E31C
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Void CodeAccessPermission::FromXml(System.Security.SecurityElement securityElement)
    void FromXml(::System::Security::SecurityElement* securityElement);
    // public override System.Security.IPermission Union(System.Security.IPermission target)
    // Offset: 0xF7EAC0
    // Implemented from: System.Security.CodeAccessPermission
    // Base method: System.Security.IPermission CodeAccessPermission::Union(System.Security.IPermission target)
    ::System::Security::IPermission* Union(::System::Security::IPermission* target);
  }; // System.Net.SocketPermission
  #pragma pack(pop)
  static check_size<sizeof(SocketPermission), 32 + sizeof(bool)> __System_Net_SocketPermissionSizeCheck;
  static_assert(sizeof(SocketPermission) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::SocketPermission::get_AcceptList
// Il2CppName: get_AcceptList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Net::SocketPermission::*)()>(&System::Net::SocketPermission::get_AcceptList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "get_AcceptList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::get_ConnectList
// Il2CppName: get_ConnectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Net::SocketPermission::*)()>(&System::Net::SocketPermission::get_ConnectList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "get_ConnectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::SocketPermission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::SocketPermission::AddPermission
// Il2CppName: AddPermission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermission::*)(::System::Net::NetworkAccess, ::System::Net::TransportType, ::StringW, int)>(&System::Net::SocketPermission::AddPermission)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("System.Net", "NetworkAccess")->byval_arg;
    static auto* transport = &::il2cpp_utils::GetClassFromName("System.Net", "TransportType")->byval_arg;
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* portNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "AddPermission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, transport, hostName, portNumber});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::IntersectEmpty
// Il2CppName: IntersectEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::SocketPermission::*)(::System::Net::SocketPermission*)>(&System::Net::SocketPermission::IntersectEmpty)> {
  static const MethodInfo* get() {
    static auto* permission = &::il2cpp_utils::GetClassFromName("System.Net", "SocketPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "IntersectEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{permission});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::Intersect
// Il2CppName: Intersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermission::*)(::System::Collections::ArrayList*, ::System::Collections::ArrayList*, ::System::Collections::ArrayList*)>(&System::Net::SocketPermission::Intersect)> {
  static const MethodInfo* get() {
    static auto* list1 = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* list2 = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "Intersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list1, list2, result});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::IsSubsetOf
// Il2CppName: IsSubsetOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::SocketPermission::*)(::System::Collections::ArrayList*, ::System::Collections::ArrayList*)>(&System::Net::SocketPermission::IsSubsetOf)> {
  static const MethodInfo* get() {
    static auto* list1 = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* list2 = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "IsSubsetOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list1, list2});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::IsUnrestricted
// Il2CppName: IsUnrestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::SocketPermission::*)()>(&System::Net::SocketPermission::IsUnrestricted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "IsUnrestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermission::*)(::System::Security::SecurityElement*, ::StringW, ::System::Collections::IEnumerator*)>(&System::Net::SocketPermission::ToXml)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Security", "SecurityElement")->byval_arg;
    static auto* childName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* enumerator = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, childName, enumerator});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::FromXml
// Il2CppName: FromXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermission::*)(::System::Collections::ArrayList*, ::System::Net::NetworkAccess)>(&System::Net::SocketPermission::FromXml)> {
  static const MethodInfo* get() {
    static auto* endpoints = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* access = &::il2cpp_utils::GetClassFromName("System.Net", "NetworkAccess")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "FromXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endpoints, access});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::SocketPermission::*)()>(&System::Net::SocketPermission::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::Intersect
// Il2CppName: Intersect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::SocketPermission::*)(::System::Security::IPermission*)>(&System::Net::SocketPermission::Intersect)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Security", "IPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "Intersect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::IsSubsetOf
// Il2CppName: IsSubsetOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::SocketPermission::*)(::System::Security::IPermission*)>(&System::Net::SocketPermission::IsSubsetOf)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Security", "IPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "IsSubsetOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::SecurityElement* (System::Net::SocketPermission::*)()>(&System::Net::SocketPermission::ToXml)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::FromXml
// Il2CppName: FromXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermission::*)(::System::Security::SecurityElement*)>(&System::Net::SocketPermission::FromXml)> {
  static const MethodInfo* get() {
    static auto* securityElement = &::il2cpp_utils::GetClassFromName("System.Security", "SecurityElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "FromXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{securityElement});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermission::Union
// Il2CppName: Union
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::SocketPermission::*)(::System::Security::IPermission*)>(&System::Net::SocketPermission::Union)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Security", "IPermission")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermission*), "Union", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
