// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: Cookie
  class Cookie;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: CookieCollection
  class CookieCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::CookieCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::CookieCollection*, "System.Net", "CookieCollection");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.CookieCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 1048558
  class CookieCollection : public ::Il2CppObject/*, public ::System::Collections::ICollection*/ {
    public:
    // Nested type: ::System::Net::CookieCollection::Stamp
    struct Stamp;
    // Nested type: ::System::Net::CookieCollection::CookieCollectionEnumerator
    class CookieCollectionEnumerator;
    public:
    // System.Int32 m_version
    // Size: 0x4
    // Offset: 0x10
    int m_version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_version and: m_list
    char __padding0[0x4] = {};
    // private System.Collections.ArrayList m_list
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::ArrayList* m_list;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.DateTime m_TimeStamp
    // Size: 0x8
    // Offset: 0x20
    ::System::DateTime m_TimeStamp;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean m_has_other_versions
    // Size: 0x1
    // Offset: 0x28
    bool m_has_other_versions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0x1049030
    // private System.Boolean m_IsReadOnly
    // Size: 0x1
    // Offset: 0x29
    bool m_IsReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: i_ICollection
    inline ::System::Collections::ICollection* i_ICollection() noexcept {
      return reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Get instance field reference: System.Int32 m_version
    [[deprecated("Use field access instead!")]] int& dyn_m_version();
    // Get instance field reference: private System.Collections.ArrayList m_list
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_m_list();
    // Get instance field reference: private System.DateTime m_TimeStamp
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_m_TimeStamp();
    // Get instance field reference: private System.Boolean m_has_other_versions
    [[deprecated("Use field access instead!")]] bool& dyn_m_has_other_versions();
    // Get instance field reference: private System.Boolean m_IsReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsReadOnly();
    // public System.Net.Cookie get_Item(System.Int32 index)
    // Offset: 0x1A784D4
    ::System::Net::Cookie* get_Item(int index);
    // public System.Int32 get_Count()
    // Offset: 0x1A78CF4
    int get_Count();
    // public System.Object get_SyncRoot()
    // Offset: 0x1A78D18
    ::Il2CppObject* get_SyncRoot();
    // System.Boolean get_IsOtherVersionSeen()
    // Offset: 0x1A78E38
    bool get_IsOtherVersionSeen();
    // public System.Void .ctor()
    // Offset: 0x1A78430
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CookieCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CookieCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CookieCollection*, creationType>()));
    }
    // public System.Void Add(System.Net.Cookie cookie)
    // Offset: 0x1A785C0
    void Add(::System::Net::Cookie* cookie);
    // public System.Void Add(System.Net.CookieCollection cookies)
    // Offset: 0x1A78A30
    void Add(::System::Net::CookieCollection* cookies);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1A78D1C
    void CopyTo(::System::Array* array, int index);
    // System.DateTime TimeStamp(System.Net.CookieCollection/System.Net.Stamp how)
    // Offset: 0x1A78D40
    ::System::DateTime TimeStamp(::System::Net::CookieCollection::Stamp how);
    // System.Int32 InternalAdd(System.Net.Cookie cookie, System.Boolean isStrict)
    // Offset: 0x1A78E40
    int InternalAdd(::System::Net::Cookie* cookie, bool isStrict);
    // System.Int32 IndexOf(System.Net.Cookie cookie)
    // Offset: 0x1A786B0
    int IndexOf(::System::Net::Cookie* cookie);
    // System.Void RemoveAt(System.Int32 idx)
    // Offset: 0x1A79264
    void RemoveAt(int idx);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1A78C94
    ::System::Collections::IEnumerator* GetEnumerator();
  }; // System.Net.CookieCollection
  #pragma pack(pop)
  static check_size<sizeof(CookieCollection), 41 + sizeof(bool)> __System_Net_CookieCollectionSizeCheck;
  static_assert(sizeof(CookieCollection) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::CookieCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Cookie* (System::Net::CookieCollection::*)(int)>(&System::Net::CookieCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CookieCollection::*)()>(&System::Net::CookieCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::CookieCollection::*)()>(&System::Net::CookieCollection::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::get_IsOtherVersionSeen
// Il2CppName: get_IsOtherVersionSeen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::CookieCollection::*)()>(&System::Net::CookieCollection::get_IsOtherVersionSeen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "get_IsOtherVersionSeen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CookieCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::CookieCollection::*)(::System::Net::Cookie*)>(&System::Net::CookieCollection::Add)> {
  static const MethodInfo* get() {
    static auto* cookie = &::il2cpp_utils::GetClassFromName("System.Net", "Cookie")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookie});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::CookieCollection::*)(::System::Net::CookieCollection*)>(&System::Net::CookieCollection::Add)> {
  static const MethodInfo* get() {
    static auto* cookies = &::il2cpp_utils::GetClassFromName("System.Net", "CookieCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookies});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::CookieCollection::*)(::System::Array*, int)>(&System::Net::CookieCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::TimeStamp
// Il2CppName: TimeStamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Net::CookieCollection::*)(::System::Net::CookieCollection::Stamp)>(&System::Net::CookieCollection::TimeStamp)> {
  static const MethodInfo* get() {
    static auto* how = &::il2cpp_utils::GetClassFromName("System.Net", "CookieCollection/Stamp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "TimeStamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{how});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::InternalAdd
// Il2CppName: InternalAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CookieCollection::*)(::System::Net::Cookie*, bool)>(&System::Net::CookieCollection::InternalAdd)> {
  static const MethodInfo* get() {
    static auto* cookie = &::il2cpp_utils::GetClassFromName("System.Net", "Cookie")->byval_arg;
    static auto* isStrict = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "InternalAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookie, isStrict});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CookieCollection::*)(::System::Net::Cookie*)>(&System::Net::CookieCollection::IndexOf)> {
  static const MethodInfo* get() {
    static auto* cookie = &::il2cpp_utils::GetClassFromName("System.Net", "Cookie")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookie});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::RemoveAt
// Il2CppName: RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::CookieCollection::*)(int)>(&System::Net::CookieCollection::RemoveAt)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Net::CookieCollection::*)()>(&System::Net::CookieCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
