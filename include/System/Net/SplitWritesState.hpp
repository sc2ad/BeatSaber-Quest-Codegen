// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: SplitWritesState
  class SplitWritesState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::SplitWritesState);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::SplitWritesState*, "System.Net", "SplitWritesState");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.SplitWritesState
  // [TokenAttribute] Offset: FFFFFFFF
  class SplitWritesState : public ::Il2CppObject {
    public:
    public:
    // private System.Net.BufferOffsetSize[] _UserBuffers
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::Net::BufferOffsetSize*> UserBuffers;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Net::BufferOffsetSize*>) == 0x8);
    // private System.Int32 _Index
    // Size: 0x4
    // Offset: 0x18
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _LastBufferConsumed
    // Size: 0x4
    // Offset: 0x1C
    int LastBufferConsumed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.BufferOffsetSize[] _RealBuffers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::System::Net::BufferOffsetSize*> RealBuffers;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Net::BufferOffsetSize*>) == 0x8);
    public:
    // static field const value: static private System.Int32 c_SplitEncryptedBuffersSize
    static constexpr const int c_SplitEncryptedBuffersSize = 65536;
    // Get static field: static private System.Int32 c_SplitEncryptedBuffersSize
    static int _get_c_SplitEncryptedBuffersSize();
    // Set static field: static private System.Int32 c_SplitEncryptedBuffersSize
    static void _set_c_SplitEncryptedBuffersSize(int value);
    // Get instance field reference: private System.Net.BufferOffsetSize[] _UserBuffers
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Net::BufferOffsetSize*>& dyn__UserBuffers();
    // Get instance field reference: private System.Int32 _Index
    [[deprecated("Use field access instead!")]] int& dyn__Index();
    // Get instance field reference: private System.Int32 _LastBufferConsumed
    [[deprecated("Use field access instead!")]] int& dyn__LastBufferConsumed();
    // Get instance field reference: private System.Net.BufferOffsetSize[] _RealBuffers
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Net::BufferOffsetSize*>& dyn__RealBuffers();
    // System.Boolean get_IsDone()
    // Offset: 0xC9A0CC
    bool get_IsDone();
    // System.Void .ctor(System.Net.BufferOffsetSize[] buffers)
    // Offset: 0xC9A09C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SplitWritesState* New_ctor(::ArrayW<::System::Net::BufferOffsetSize*> buffers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::SplitWritesState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SplitWritesState*, creationType>(buffers)));
    }
    // System.Net.BufferOffsetSize[] GetNextBuffers()
    // Offset: 0xC9A13C
    ::ArrayW<::System::Net::BufferOffsetSize*> GetNextBuffers();
  }; // System.Net.SplitWritesState
  #pragma pack(pop)
  static check_size<sizeof(SplitWritesState), 32 + sizeof(::ArrayW<::System::Net::BufferOffsetSize*>)> __System_Net_SplitWritesStateSizeCheck;
  static_assert(sizeof(SplitWritesState) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::SplitWritesState::get_IsDone
// Il2CppName: get_IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::SplitWritesState::*)()>(&System::Net::SplitWritesState::get_IsDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SplitWritesState*), "get_IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SplitWritesState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::SplitWritesState::GetNextBuffers
// Il2CppName: GetNextBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Net::BufferOffsetSize*> (System::Net::SplitWritesState::*)()>(&System::Net::SplitWritesState::GetNextBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SplitWritesState*), "GetNextBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
