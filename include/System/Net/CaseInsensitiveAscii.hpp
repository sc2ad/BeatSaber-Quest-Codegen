// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IComparer
#include "System/Collections/IComparer.hpp"
// Including type: System.Collections.IEqualityComparer
#include "System/Collections/IEqualityComparer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: CaseInsensitiveAscii
  class CaseInsensitiveAscii;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::CaseInsensitiveAscii);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::CaseInsensitiveAscii*, "System.Net", "CaseInsensitiveAscii");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.CaseInsensitiveAscii
  // [TokenAttribute] Offset: FFFFFFFF
  class CaseInsensitiveAscii : public ::Il2CppObject/*, public ::System::Collections::IComparer, public ::System::Collections::IEqualityComparer*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::IComparer
    operator ::System::Collections::IComparer() noexcept {
      return *reinterpret_cast<::System::Collections::IComparer*>(this);
    }
    // Creating interface conversion operator: i_IComparer
    inline ::System::Collections::IComparer* i_IComparer() noexcept {
      return reinterpret_cast<::System::Collections::IComparer*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IEqualityComparer
    operator ::System::Collections::IEqualityComparer() noexcept {
      return *reinterpret_cast<::System::Collections::IEqualityComparer*>(this);
    }
    // Creating interface conversion operator: i_IEqualityComparer
    inline ::System::Collections::IEqualityComparer* i_IEqualityComparer() noexcept {
      return reinterpret_cast<::System::Collections::IEqualityComparer*>(this);
    }
    // Get static field: static readonly System.Net.CaseInsensitiveAscii StaticInstance
    static ::System::Net::CaseInsensitiveAscii* _get_StaticInstance();
    // Set static field: static readonly System.Net.CaseInsensitiveAscii StaticInstance
    static void _set_StaticInstance(::System::Net::CaseInsensitiveAscii* value);
    // Get static field: static readonly System.Byte[] AsciiToLower
    static ::ArrayW<uint8_t> _get_AsciiToLower();
    // Set static field: static readonly System.Byte[] AsciiToLower
    static void _set_AsciiToLower(::ArrayW<uint8_t> value);
    // public System.Void .ctor()
    // Offset: 0x1CFA4B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CaseInsensitiveAscii* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CaseInsensitiveAscii::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CaseInsensitiveAscii*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1CFA4C0
    static void _cctor();
    // public System.Int32 GetHashCode(System.Object myObject)
    // Offset: 0x1CF9F7C
    int GetHashCode(::Il2CppObject* myObject);
    // public System.Int32 Compare(System.Object firstObject, System.Object secondObject)
    // Offset: 0x1CFA0A0
    int Compare(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
    // private System.Int32 FastGetHashCode(System.String myString)
    // Offset: 0x1CFA224
    int FastGetHashCode(::StringW myString);
    // public System.Boolean Equals(System.Object firstObject, System.Object secondObject)
    // Offset: 0x1CFA32C
    bool Equals(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
  }; // System.Net.CaseInsensitiveAscii
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::CaseInsensitiveAscii::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CaseInsensitiveAscii*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CaseInsensitiveAscii::*)(::Il2CppObject*)>(&System::Net::CaseInsensitiveAscii::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* myObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CaseInsensitiveAscii*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myObject});
  }
};
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CaseInsensitiveAscii::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Net::CaseInsensitiveAscii::Compare)> {
  static const MethodInfo* get() {
    static auto* firstObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* secondObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CaseInsensitiveAscii*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstObject, secondObject});
  }
};
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::FastGetHashCode
// Il2CppName: FastGetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::CaseInsensitiveAscii::*)(::StringW)>(&System::Net::CaseInsensitiveAscii::FastGetHashCode)> {
  static const MethodInfo* get() {
    static auto* myString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CaseInsensitiveAscii*), "FastGetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myString});
  }
};
// Writing MetadataGetter for method: System::Net::CaseInsensitiveAscii::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::CaseInsensitiveAscii::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Net::CaseInsensitiveAscii::Equals)> {
  static const MethodInfo* get() {
    static auto* firstObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* secondObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::CaseInsensitiveAscii*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstObject, secondObject});
  }
};
