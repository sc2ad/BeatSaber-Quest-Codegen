// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: NetConfig
  class NetConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::NetConfig);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::NetConfig*, "System.Net", "NetConfig");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.NetConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class NetConfig : public ::Il2CppObject/*, public ::System::ICloneable*/ {
    public:
    public:
    // System.Boolean ipv6Enabled
    // Size: 0x1
    // Offset: 0x10
    bool ipv6Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ipv6Enabled and: MaxResponseHeadersLength
    char __padding0[0x3] = {};
    // System.Int32 MaxResponseHeadersLength
    // Size: 0x4
    // Offset: 0x14
    int MaxResponseHeadersLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Get instance field reference: System.Boolean ipv6Enabled
    [[deprecated("Use field access instead!")]] bool& dyn_ipv6Enabled();
    // Get instance field reference: System.Int32 MaxResponseHeadersLength
    [[deprecated("Use field access instead!")]] int& dyn_MaxResponseHeadersLength();
    // System.Void .ctor()
    // Offset: 0xF6B750
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::NetConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetConfig*, creationType>()));
    }
    // private System.Object System.ICloneable.Clone()
    // Offset: 0xF6B760
    ::Il2CppObject* System_ICloneable_Clone();
  }; // System.Net.NetConfig
  #pragma pack(pop)
  static check_size<sizeof(NetConfig), 20 + sizeof(int)> __System_Net_NetConfigSizeCheck;
  static_assert(sizeof(NetConfig) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::NetConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::NetConfig::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::NetConfig::*)()>(&System::Net::NetConfig::System_ICloneable_Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::NetConfig*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
