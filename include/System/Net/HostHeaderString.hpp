// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HostHeaderString
  class HostHeaderString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HostHeaderString);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HostHeaderString*, "System.Net", "HostHeaderString");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HostHeaderString
  // [TokenAttribute] Offset: FFFFFFFF
  class HostHeaderString : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean m_Converted
    // Size: 0x1
    // Offset: 0x10
    bool m_Converted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Converted and: m_String
    char __padding0[0x7] = {};
    // private System.String m_String
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_String;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte[] m_Bytes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> m_Bytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private System.Boolean m_Converted
    [[deprecated("Use field access instead!")]] bool& dyn_m_Converted();
    // Get instance field reference: private System.String m_String
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_String();
    // Get instance field reference: private System.Byte[] m_Bytes
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_m_Bytes();
    // System.String get_String()
    // Offset: 0x1080508
    ::StringW get_String();
    // System.Void set_String(System.String value)
    // Offset: 0x1080510
    void set_String(::StringW value);
    // System.Int32 get_ByteCount()
    // Offset: 0x108051C
    int get_ByteCount();
    // System.Byte[] get_Bytes()
    // Offset: 0x108054C
    ::ArrayW<uint8_t> get_Bytes();
    // System.Void .ctor()
    // Offset: 0x10803EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HostHeaderString* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HostHeaderString::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HostHeaderString*, creationType>()));
    }
    // System.Void .ctor(System.String s)
    // Offset: 0x1080424
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HostHeaderString* New_ctor(::StringW s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HostHeaderString::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HostHeaderString*, creationType>(s)));
    }
    // private System.Void Init(System.String s)
    // Offset: 0x1080418
    void Init(::StringW s);
    // private System.Void Convert()
    // Offset: 0x1080454
    void Convert();
    // System.Void Copy(System.Byte[] destBytes, System.Int32 destByteIndex)
    // Offset: 0x1080570
    void Copy(::ArrayW<uint8_t> destBytes, int destByteIndex);
  }; // System.Net.HostHeaderString
  #pragma pack(pop)
  static check_size<sizeof(HostHeaderString), 32 + sizeof(::ArrayW<uint8_t>)> __System_Net_HostHeaderStringSizeCheck;
  static_assert(sizeof(HostHeaderString) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HostHeaderString::get_String
// Il2CppName: get_String
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HostHeaderString::*)()>(&System::Net::HostHeaderString::get_String)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "get_String", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::set_String
// Il2CppName: set_String
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HostHeaderString::*)(::StringW)>(&System::Net::HostHeaderString::set_String)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "set_String", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::get_ByteCount
// Il2CppName: get_ByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HostHeaderString::*)()>(&System::Net::HostHeaderString::get_ByteCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "get_ByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::get_Bytes
// Il2CppName: get_Bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::HostHeaderString::*)()>(&System::Net::HostHeaderString::get_Bytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "get_Bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HostHeaderString::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HostHeaderString::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HostHeaderString::*)(::StringW)>(&System::Net::HostHeaderString::Init)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::Convert
// Il2CppName: Convert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HostHeaderString::*)()>(&System::Net::HostHeaderString::Convert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HostHeaderString::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HostHeaderString::*)(::ArrayW<uint8_t>, int)>(&System::Net::HostHeaderString::Copy)> {
  static const MethodInfo* get() {
    static auto* destBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* destByteIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HostHeaderString*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destBytes, destByteIndex});
  }
};
