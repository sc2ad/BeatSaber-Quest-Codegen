// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.TimerThread
#include "System/Net/TimerThread.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::TimerThread::TimerThreadState, "System.Net", "TimerThread/TimerThreadState");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.TimerThread/System.Net.TimerThreadState
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimerThread::TimerThreadState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TimerThreadState
    constexpr TimerThreadState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Net.TimerThread/System.Net.TimerThreadState Idle
    static constexpr const int Idle = 0;
    // Get static field: static public System.Net.TimerThread/System.Net.TimerThreadState Idle
    static ::System::Net::TimerThread::TimerThreadState _get_Idle();
    // Set static field: static public System.Net.TimerThread/System.Net.TimerThreadState Idle
    static void _set_Idle(::System::Net::TimerThread::TimerThreadState value);
    // static field const value: static public System.Net.TimerThread/System.Net.TimerThreadState Running
    static constexpr const int Running = 1;
    // Get static field: static public System.Net.TimerThread/System.Net.TimerThreadState Running
    static ::System::Net::TimerThread::TimerThreadState _get_Running();
    // Set static field: static public System.Net.TimerThread/System.Net.TimerThreadState Running
    static void _set_Running(::System::Net::TimerThread::TimerThreadState value);
    // static field const value: static public System.Net.TimerThread/System.Net.TimerThreadState Stopped
    static constexpr const int Stopped = 2;
    // Get static field: static public System.Net.TimerThread/System.Net.TimerThreadState Stopped
    static ::System::Net::TimerThread::TimerThreadState _get_Stopped();
    // Set static field: static public System.Net.TimerThread/System.Net.TimerThreadState Stopped
    static void _set_Stopped(::System::Net::TimerThread::TimerThreadState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Net.TimerThread/System.Net.TimerThreadState
  #pragma pack(pop)
  static check_size<sizeof(TimerThread::TimerThreadState), 0 + sizeof(int)> __System_Net_TimerThread_TimerThreadStateSizeCheck;
  static_assert(sizeof(TimerThread::TimerThreadState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
