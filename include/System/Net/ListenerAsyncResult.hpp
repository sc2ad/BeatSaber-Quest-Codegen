// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitCallback
  class WaitCallback;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ListenerAsyncResult
  class ListenerAsyncResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ListenerAsyncResult);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ListenerAsyncResult*, "System.Net", "ListenerAsyncResult");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x52
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ListenerAsyncResult
  // [TokenAttribute] Offset: FFFFFFFF
  class ListenerAsyncResult : public ::Il2CppObject/*, public ::System::IAsyncResult*/ {
    public:
    public:
    // private System.Threading.ManualResetEvent handle
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::ManualResetEvent* handle;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private System.Boolean synch
    // Size: 0x1
    // Offset: 0x18
    bool synch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean completed
    // Size: 0x1
    // Offset: 0x19
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: completed and: cb
    char __padding2[0x6] = {};
    // private System.AsyncCallback cb
    // Size: 0x8
    // Offset: 0x20
    ::System::AsyncCallback* cb;
    // Field size check
    static_assert(sizeof(::System::AsyncCallback*) == 0x8);
    // private System.Object state
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Exception exception
    // Size: 0x8
    // Offset: 0x30
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Net.HttpListenerContext context
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::HttpListenerContext* context;
    // Field size check
    static_assert(sizeof(::System::Net::HttpListenerContext*) == 0x8);
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.ListenerAsyncResult forward
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ListenerAsyncResult* forward;
    // Field size check
    static_assert(sizeof(::System::Net::ListenerAsyncResult*) == 0x8);
    // System.Boolean EndCalled
    // Size: 0x1
    // Offset: 0x50
    bool EndCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean InGet
    // Size: 0x1
    // Offset: 0x51
    bool InGet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IAsyncResult
    operator ::System::IAsyncResult() noexcept {
      return *reinterpret_cast<::System::IAsyncResult*>(this);
    }
    // Creating interface conversion operator: i_IAsyncResult
    inline ::System::IAsyncResult* i_IAsyncResult() noexcept {
      return reinterpret_cast<::System::IAsyncResult*>(this);
    }
    // Get static field: static private System.Threading.WaitCallback InvokeCB
    static ::System::Threading::WaitCallback* _get_InvokeCB();
    // Set static field: static private System.Threading.WaitCallback InvokeCB
    static void _set_InvokeCB(::System::Threading::WaitCallback* value);
    // Get instance field reference: private System.Threading.ManualResetEvent handle
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_handle();
    // Get instance field reference: private System.Boolean synch
    [[deprecated("Use field access instead!")]] bool& dyn_synch();
    // Get instance field reference: private System.Boolean completed
    [[deprecated("Use field access instead!")]] bool& dyn_completed();
    // Get instance field reference: private System.AsyncCallback cb
    [[deprecated("Use field access instead!")]] ::System::AsyncCallback*& dyn_cb();
    // Get instance field reference: private System.Object state
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_state();
    // Get instance field reference: private System.Exception exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_exception();
    // Get instance field reference: private System.Net.HttpListenerContext context
    [[deprecated("Use field access instead!")]] ::System::Net::HttpListenerContext*& dyn_context();
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Net.ListenerAsyncResult forward
    [[deprecated("Use field access instead!")]] ::System::Net::ListenerAsyncResult*& dyn_forward();
    // Get instance field reference: System.Boolean EndCalled
    [[deprecated("Use field access instead!")]] bool& dyn_EndCalled();
    // Get instance field reference: System.Boolean InGet
    [[deprecated("Use field access instead!")]] bool& dyn_InGet();
    // public System.Object get_AsyncState()
    // Offset: 0x1ADCEE4
    ::Il2CppObject* get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x1ACEE6C
    ::System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x1ADCEF8
    bool get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x1ACEDC0
    bool get_IsCompleted();
    // public System.Void .ctor(System.AsyncCallback cb, System.Object state)
    // Offset: 0x1ACE480
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListenerAsyncResult* New_ctor(::System::AsyncCallback* cb, ::Il2CppObject* state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ListenerAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListenerAsyncResult*, creationType>(cb, state)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1ADCF0C
    static void _cctor();
    // System.Void Complete(System.Exception exc)
    // Offset: 0x1ACE060
    void Complete(::System::Exception* exc);
    // static private System.Void InvokeCallback(System.Object o)
    // Offset: 0x1ADCD90
    static void InvokeCallback(::Il2CppObject* o);
    // System.Void Complete(System.Net.HttpListenerContext context)
    // Offset: 0x1ACF360
    void Complete(::System::Net::HttpListenerContext* context);
    // System.Void Complete(System.Net.HttpListenerContext context, System.Boolean synch)
    // Offset: 0x1ACE5CC
    void Complete(::System::Net::HttpListenerContext* context, bool synch);
    // System.Net.HttpListenerContext GetContext()
    // Offset: 0x1ACEF70
    ::System::Net::HttpListenerContext* GetContext();
  }; // System.Net.ListenerAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(ListenerAsyncResult), 81 + sizeof(bool)> __System_Net_ListenerAsyncResultSizeCheck;
  static_assert(sizeof(ListenerAsyncResult) == 0x52);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::get_AsyncState
// Il2CppName: get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::ListenerAsyncResult::*)()>(&System::Net::ListenerAsyncResult::get_AsyncState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::get_AsyncWaitHandle
// Il2CppName: get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::WaitHandle* (System::Net::ListenerAsyncResult::*)()>(&System::Net::ListenerAsyncResult::get_AsyncWaitHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::get_CompletedSynchronously
// Il2CppName: get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ListenerAsyncResult::*)()>(&System::Net::ListenerAsyncResult::get_CompletedSynchronously)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ListenerAsyncResult::*)()>(&System::Net::ListenerAsyncResult::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::ListenerAsyncResult::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ListenerAsyncResult::*)(::System::Exception*)>(&System::Net::ListenerAsyncResult::Complete)> {
  static const MethodInfo* get() {
    static auto* exc = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exc});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::InvokeCallback
// Il2CppName: InvokeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&System::Net::ListenerAsyncResult::InvokeCallback)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "InvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ListenerAsyncResult::*)(::System::Net::HttpListenerContext*)>(&System::Net::ListenerAsyncResult::Complete)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Net", "HttpListenerContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ListenerAsyncResult::*)(::System::Net::HttpListenerContext*, bool)>(&System::Net::ListenerAsyncResult::Complete)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Net", "HttpListenerContext")->byval_arg;
    static auto* synch = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, synch});
  }
};
// Writing MetadataGetter for method: System::Net::ListenerAsyncResult::GetContext
// Il2CppName: GetContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpListenerContext* (System::Net::ListenerAsyncResult::*)()>(&System::Net::ListenerAsyncResult::GetContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ListenerAsyncResult*), "GetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
