// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.ProxyChain
#include "System/Net/ProxyChain.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ProxyChain::ProxyEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ProxyChain::ProxyEnumerator*, "System.Net", "ProxyChain/ProxyEnumerator");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ProxyChain/System.Net.ProxyEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class ProxyChain::ProxyEnumerator : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::System::Uri*>*/ {
    public:
    public:
    // private System.Net.ProxyChain m_Chain
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::ProxyChain* m_Chain;
    // Field size check
    static_assert(sizeof(::System::Net::ProxyChain*) == 0x8);
    // private System.Boolean m_Finished
    // Size: 0x1
    // Offset: 0x18
    bool m_Finished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Finished and: m_CurrentIndex
    char __padding1[0x3] = {};
    // private System.Int32 m_CurrentIndex
    // Size: 0x4
    // Offset: 0x1C
    int m_CurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_TriedDirect
    // Size: 0x1
    // Offset: 0x20
    bool m_TriedDirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Uri*>
    operator ::System::Collections::Generic::IEnumerator_1<::System::Uri*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Uri*>*>(this);
    }
    // Get instance field reference: private System.Net.ProxyChain m_Chain
    [[deprecated("Use field access instead!")]] ::System::Net::ProxyChain*& dyn_m_Chain();
    // Get instance field reference: private System.Boolean m_Finished
    [[deprecated("Use field access instead!")]] bool& dyn_m_Finished();
    // Get instance field reference: private System.Int32 m_CurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentIndex();
    // Get instance field reference: private System.Boolean m_TriedDirect
    [[deprecated("Use field access instead!")]] bool& dyn_m_TriedDirect();
    // public System.Uri get_Current()
    // Offset: 0xF71C84
    ::System::Uri* get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xF71D58
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // System.Void .ctor(System.Net.ProxyChain chain)
    // Offset: 0xF71B88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProxyChain::ProxyEnumerator* New_ctor(::System::Net::ProxyChain* chain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ProxyChain::ProxyEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProxyChain::ProxyEnumerator*, creationType>(chain)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0xF71D5C
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xF72008
    void Reset();
    // public System.Void Dispose()
    // Offset: 0xF72018
    void Dispose();
  }; // System.Net.ProxyChain/System.Net.ProxyEnumerator
  #pragma pack(pop)
  static check_size<sizeof(ProxyChain::ProxyEnumerator), 32 + sizeof(bool)> __System_Net_ProxyChain_ProxyEnumeratorSizeCheck;
  static_assert(sizeof(ProxyChain::ProxyEnumerator) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::ProxyChain::ProxyEnumerator::*)()>(&System::Net::ProxyChain::ProxyEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ProxyChain::ProxyEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::ProxyChain::ProxyEnumerator::*)()>(&System::Net::ProxyChain::ProxyEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ProxyChain::ProxyEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ProxyChain::ProxyEnumerator::*)()>(&System::Net::ProxyChain::ProxyEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ProxyChain::ProxyEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ProxyChain::ProxyEnumerator::*)()>(&System::Net::ProxyChain::ProxyEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ProxyChain::ProxyEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ProxyChain::ProxyEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ProxyChain::ProxyEnumerator::*)()>(&System::Net::ProxyChain::ProxyEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ProxyChain::ProxyEnumerator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
