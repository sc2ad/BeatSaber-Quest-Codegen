// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: DelayedRegex
  class DelayedRegex;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::DelayedRegex);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::DelayedRegex*, "System.Net", "DelayedRegex");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.DelayedRegex
  // [TokenAttribute] Offset: FFFFFFFF
  class DelayedRegex : public ::Il2CppObject {
    public:
    public:
    // private System.Text.RegularExpressions.Regex _AsRegex
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::RegularExpressions::Regex* AsRegex;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    // private System.String _AsString
    // Size: 0x8
    // Offset: 0x18
    ::StringW AsString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Text.RegularExpressions.Regex _AsRegex
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& dyn__AsRegex();
    // Get instance field reference: private System.String _AsString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__AsString();
    // System.Text.RegularExpressions.Regex get_AsRegex()
    // Offset: 0x1066918
    ::System::Text::RegularExpressions::Regex* get_AsRegex();
    // System.Void .ctor(System.String regexString)
    // Offset: 0x10667E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DelayedRegex* New_ctor(::StringW regexString) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::DelayedRegex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DelayedRegex*, creationType>(regexString)));
    }
    // System.Void .ctor(System.Text.RegularExpressions.Regex regex)
    // Offset: 0x106687C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DelayedRegex* New_ctor(::System::Text::RegularExpressions::Regex* regex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::DelayedRegex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DelayedRegex*, creationType>(regex)));
    }
    // public override System.String ToString()
    // Offset: 0x10669B4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Net.DelayedRegex
  #pragma pack(pop)
  static check_size<sizeof(DelayedRegex), 24 + sizeof(::StringW)> __System_Net_DelayedRegexSizeCheck;
  static_assert(sizeof(DelayedRegex) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::DelayedRegex::get_AsRegex
// Il2CppName: get_AsRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::Regex* (System::Net::DelayedRegex::*)()>(&System::Net::DelayedRegex::get_AsRegex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::DelayedRegex*), "get_AsRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::DelayedRegex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::DelayedRegex::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::DelayedRegex::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::DelayedRegex::*)()>(&System::Net::DelayedRegex::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::DelayedRegex*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
