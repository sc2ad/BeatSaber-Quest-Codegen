// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebClient
#include "System/Net/WebClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebClient::ProgressData);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebClient::ProgressData*, "System.Net", "WebClient/ProgressData");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebClient/System.Net.ProgressData
  // [TokenAttribute] Offset: FFFFFFFF
  class WebClient::ProgressData : public ::Il2CppObject {
    public:
    public:
    // System.Int64 BytesSent
    // Size: 0x8
    // Offset: 0x10
    int64_t BytesSent;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 TotalBytesToSend
    // Size: 0x8
    // Offset: 0x18
    int64_t TotalBytesToSend;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 BytesReceived
    // Size: 0x8
    // Offset: 0x20
    int64_t BytesReceived;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 TotalBytesToReceive
    // Size: 0x8
    // Offset: 0x28
    int64_t TotalBytesToReceive;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Boolean HasUploadPhase
    // Size: 0x1
    // Offset: 0x30
    bool HasUploadPhase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: System.Int64 BytesSent
    [[deprecated("Use field access instead!")]] int64_t& dyn_BytesSent();
    // Get instance field reference: System.Int64 TotalBytesToSend
    [[deprecated("Use field access instead!")]] int64_t& dyn_TotalBytesToSend();
    // Get instance field reference: System.Int64 BytesReceived
    [[deprecated("Use field access instead!")]] int64_t& dyn_BytesReceived();
    // Get instance field reference: System.Int64 TotalBytesToReceive
    [[deprecated("Use field access instead!")]] int64_t& dyn_TotalBytesToReceive();
    // Get instance field reference: System.Boolean HasUploadPhase
    [[deprecated("Use field access instead!")]] bool& dyn_HasUploadPhase();
    // public System.Void .ctor()
    // Offset: 0xFAE790
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebClient::ProgressData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebClient::ProgressData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebClient::ProgressData*, creationType>()));
    }
    // System.Void Reset()
    // Offset: 0xFAE77C
    void Reset();
  }; // System.Net.WebClient/System.Net.ProgressData
  #pragma pack(pop)
  static check_size<sizeof(WebClient::ProgressData), 48 + sizeof(bool)> __System_Net_WebClient_ProgressDataSizeCheck;
  static_assert(sizeof(WebClient::ProgressData) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebClient::ProgressData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebClient::ProgressData::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebClient::ProgressData::*)()>(&System::Net::WebClient::ProgressData::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::ProgressData*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
