// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebClient
#include "System/Net/WebClient.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebRequest
  class WebRequest;
  // Forward declaring type: CompletionDelegate
  class CompletionDelegate;
  // Forward declaring type: ScatterGatherBuffers
  class ScatterGatherBuffers;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebClient::DownloadBitsState);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebClient::DownloadBitsState*, "System.Net", "WebClient/DownloadBitsState");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebClient/System.Net.DownloadBitsState
  // [TokenAttribute] Offset: FFFFFFFF
  class WebClient::DownloadBitsState : public ::Il2CppObject {
    public:
    public:
    // System.Net.WebClient WebClient
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::WebClient* WebClient;
    // Field size check
    static_assert(sizeof(::System::Net::WebClient*) == 0x8);
    // System.IO.Stream WriteStream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* WriteStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // System.Byte[] InnerBuffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> InnerBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.ComponentModel.AsyncOperation AsyncOp
    // Size: 0x8
    // Offset: 0x28
    ::System::ComponentModel::AsyncOperation* AsyncOp;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::AsyncOperation*) == 0x8);
    // System.Net.WebRequest Request
    // Size: 0x8
    // Offset: 0x30
    ::System::Net::WebRequest* Request;
    // Field size check
    static_assert(sizeof(::System::Net::WebRequest*) == 0x8);
    // System.Net.CompletionDelegate CompletionDelegate
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::CompletionDelegate* CompletionDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::CompletionDelegate*) == 0x8);
    // System.IO.Stream ReadStream
    // Size: 0x8
    // Offset: 0x40
    ::System::IO::Stream* ReadStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // System.Net.ScatterGatherBuffers SgBuffers
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ScatterGatherBuffers* SgBuffers;
    // Field size check
    static_assert(sizeof(::System::Net::ScatterGatherBuffers*) == 0x8);
    // System.Int64 ContentLength
    // Size: 0x8
    // Offset: 0x50
    int64_t ContentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 Length
    // Size: 0x8
    // Offset: 0x58
    int64_t Length;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Net.WebClient/System.Net.ProgressData Progress
    // Size: 0x8
    // Offset: 0x60
    ::System::Net::WebClient::ProgressData* Progress;
    // Field size check
    static_assert(sizeof(::System::Net::WebClient::ProgressData*) == 0x8);
    public:
    // static field const value: static private System.Int32 Offset
    static constexpr const int Offset = 0;
    // Get static field: static private System.Int32 Offset
    static int _get_Offset();
    // Set static field: static private System.Int32 Offset
    static void _set_Offset(int value);
    // Get instance field reference: System.Net.WebClient WebClient
    [[deprecated("Use field access instead!")]] ::System::Net::WebClient*& dyn_WebClient();
    // Get instance field reference: System.IO.Stream WriteStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_WriteStream();
    // Get instance field reference: System.Byte[] InnerBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_InnerBuffer();
    // Get instance field reference: System.ComponentModel.AsyncOperation AsyncOp
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::AsyncOperation*& dyn_AsyncOp();
    // Get instance field reference: System.Net.WebRequest Request
    [[deprecated("Use field access instead!")]] ::System::Net::WebRequest*& dyn_Request();
    // Get instance field reference: System.Net.CompletionDelegate CompletionDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::CompletionDelegate*& dyn_CompletionDelegate();
    // Get instance field reference: System.IO.Stream ReadStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_ReadStream();
    // Get instance field reference: System.Net.ScatterGatherBuffers SgBuffers
    [[deprecated("Use field access instead!")]] ::System::Net::ScatterGatherBuffers*& dyn_SgBuffers();
    // Get instance field reference: System.Int64 ContentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn_ContentLength();
    // Get instance field reference: System.Int64 Length
    [[deprecated("Use field access instead!")]] int64_t& dyn_Length();
    // Get instance field reference: System.Net.WebClient/System.Net.ProgressData Progress
    [[deprecated("Use field access instead!")]] ::System::Net::WebClient::ProgressData*& dyn_Progress();
    // System.Boolean get_Async()
    // Offset: 0xFAE18C
    bool get_Async();
    // System.Void .ctor(System.Net.WebRequest request, System.IO.Stream writeStream, System.Net.CompletionDelegate completionDelegate, System.ComponentModel.AsyncOperation asyncOp, System.Net.WebClient/System.Net.ProgressData progress, System.Net.WebClient webClient)
    // Offset: 0xFAE128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebClient::DownloadBitsState* New_ctor(::System::Net::WebRequest* request, ::System::IO::Stream* writeStream, ::System::Net::CompletionDelegate* completionDelegate, ::System::ComponentModel::AsyncOperation* asyncOp, ::System::Net::WebClient::ProgressData* progress, ::System::Net::WebClient* webClient) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebClient::DownloadBitsState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebClient::DownloadBitsState*, creationType>(request, writeStream, completionDelegate, asyncOp, progress, webClient)));
    }
    // System.Int32 SetResponse(System.Net.WebResponse response)
    // Offset: 0xFAE19C
    int SetResponse(::System::Net::WebResponse* response);
    // System.Boolean RetrieveBytes(ref System.Int32 bytesRetrieved)
    // Offset: 0xFAE474
    bool RetrieveBytes(ByRef<int> bytesRetrieved);
    // System.Void Close()
    // Offset: 0xFAE728
    void Close();
  }; // System.Net.WebClient/System.Net.DownloadBitsState
  #pragma pack(pop)
  static check_size<sizeof(WebClient::DownloadBitsState), 96 + sizeof(::System::Net::WebClient::ProgressData*)> __System_Net_WebClient_DownloadBitsStateSizeCheck;
  static_assert(sizeof(WebClient::DownloadBitsState) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebClient::DownloadBitsState::get_Async
// Il2CppName: get_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebClient::DownloadBitsState::*)()>(&System::Net::WebClient::DownloadBitsState::get_Async)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::DownloadBitsState*), "get_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::DownloadBitsState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebClient::DownloadBitsState::SetResponse
// Il2CppName: SetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebClient::DownloadBitsState::*)(::System::Net::WebResponse*)>(&System::Net::WebClient::DownloadBitsState::SetResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::DownloadBitsState*), "SetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::DownloadBitsState::RetrieveBytes
// Il2CppName: RetrieveBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebClient::DownloadBitsState::*)(ByRef<int>)>(&System::Net::WebClient::DownloadBitsState::RetrieveBytes)> {
  static const MethodInfo* get() {
    static auto* bytesRetrieved = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::DownloadBitsState*), "RetrieveBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesRetrieved});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::DownloadBitsState::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebClient::DownloadBitsState::*)()>(&System::Net::WebClient::DownloadBitsState::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::DownloadBitsState*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
