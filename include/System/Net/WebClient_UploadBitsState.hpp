// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebClient
#include "System/Net/WebClient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebRequest
  class WebRequest;
  // Forward declaring type: CompletionDelegate
  class CompletionDelegate;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebClient::UploadBitsState);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebClient::UploadBitsState*, "System.Net", "WebClient/UploadBitsState");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebClient/System.Net.UploadBitsState
  // [TokenAttribute] Offset: FFFFFFFF
  class WebClient::UploadBitsState : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 m_ChunkSize
    // Size: 0x4
    // Offset: 0x10
    int m_ChunkSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_BufferWritePosition
    // Size: 0x4
    // Offset: 0x14
    int m_BufferWritePosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Net.WebClient WebClient
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::WebClient* WebClient;
    // Field size check
    static_assert(sizeof(::System::Net::WebClient*) == 0x8);
    // System.IO.Stream WriteStream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Stream* WriteStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // System.Byte[] InnerBuffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> InnerBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] Header
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> Header;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] Footer
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<uint8_t> Footer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.ComponentModel.AsyncOperation AsyncOp
    // Size: 0x8
    // Offset: 0x40
    ::System::ComponentModel::AsyncOperation* AsyncOp;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::AsyncOperation*) == 0x8);
    // System.Net.WebRequest Request
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::WebRequest* Request;
    // Field size check
    static_assert(sizeof(::System::Net::WebRequest*) == 0x8);
    // System.Net.CompletionDelegate UploadCompletionDelegate
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::CompletionDelegate* UploadCompletionDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::CompletionDelegate*) == 0x8);
    // System.Net.CompletionDelegate DownloadCompletionDelegate
    // Size: 0x8
    // Offset: 0x58
    ::System::Net::CompletionDelegate* DownloadCompletionDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::CompletionDelegate*) == 0x8);
    // System.IO.Stream ReadStream
    // Size: 0x8
    // Offset: 0x60
    ::System::IO::Stream* ReadStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // System.Net.WebClient/System.Net.ProgressData Progress
    // Size: 0x8
    // Offset: 0x68
    ::System::Net::WebClient::ProgressData* Progress;
    // Field size check
    static_assert(sizeof(::System::Net::WebClient::ProgressData*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 m_ChunkSize
    [[deprecated("Use field access instead!")]] int& dyn_m_ChunkSize();
    // Get instance field reference: private System.Int32 m_BufferWritePosition
    [[deprecated("Use field access instead!")]] int& dyn_m_BufferWritePosition();
    // Get instance field reference: System.Net.WebClient WebClient
    [[deprecated("Use field access instead!")]] ::System::Net::WebClient*& dyn_WebClient();
    // Get instance field reference: System.IO.Stream WriteStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_WriteStream();
    // Get instance field reference: System.Byte[] InnerBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_InnerBuffer();
    // Get instance field reference: System.Byte[] Header
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Header();
    // Get instance field reference: System.Byte[] Footer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Footer();
    // Get instance field reference: System.ComponentModel.AsyncOperation AsyncOp
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::AsyncOperation*& dyn_AsyncOp();
    // Get instance field reference: System.Net.WebRequest Request
    [[deprecated("Use field access instead!")]] ::System::Net::WebRequest*& dyn_Request();
    // Get instance field reference: System.Net.CompletionDelegate UploadCompletionDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::CompletionDelegate*& dyn_UploadCompletionDelegate();
    // Get instance field reference: System.Net.CompletionDelegate DownloadCompletionDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::CompletionDelegate*& dyn_DownloadCompletionDelegate();
    // Get instance field reference: System.IO.Stream ReadStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_ReadStream();
    // Get instance field reference: System.Net.WebClient/System.Net.ProgressData Progress
    [[deprecated("Use field access instead!")]] ::System::Net::WebClient::ProgressData*& dyn_Progress();
    // System.Boolean get_FileUpload()
    // Offset: 0xFAE884
    bool get_FileUpload();
    // System.Boolean get_Async()
    // Offset: 0xFAE894
    bool get_Async();
    // System.Void .ctor(System.Net.WebRequest request, System.IO.Stream readStream, System.Byte[] buffer, System.Int32 chunkSize, System.Byte[] header, System.Byte[] footer, System.Net.CompletionDelegate uploadCompletionDelegate, System.Net.CompletionDelegate downloadCompletionDelegate, System.ComponentModel.AsyncOperation asyncOp, System.Net.WebClient/System.Net.ProgressData progress, System.Net.WebClient webClient)
    // Offset: 0xFAE7A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebClient::UploadBitsState* New_ctor(::System::Net::WebRequest* request, ::System::IO::Stream* readStream, ::ArrayW<uint8_t> buffer, int chunkSize, ::ArrayW<uint8_t> header, ::ArrayW<uint8_t> footer, ::System::Net::CompletionDelegate* uploadCompletionDelegate, ::System::Net::CompletionDelegate* downloadCompletionDelegate, ::System::ComponentModel::AsyncOperation* asyncOp, ::System::Net::WebClient::ProgressData* progress, ::System::Net::WebClient* webClient) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebClient::UploadBitsState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebClient::UploadBitsState*, creationType>(request, readStream, buffer, chunkSize, header, footer, uploadCompletionDelegate, downloadCompletionDelegate, asyncOp, progress, webClient)));
    }
    // System.Void SetRequestStream(System.IO.Stream writeStream)
    // Offset: 0xFAE8A4
    void SetRequestStream(::System::IO::Stream* writeStream);
    // System.Boolean WriteBytes()
    // Offset: 0xFAE9D0
    bool WriteBytes();
    // System.Void Close()
    // Offset: 0xFAEBA0
    void Close();
  }; // System.Net.WebClient/System.Net.UploadBitsState
  #pragma pack(pop)
  static check_size<sizeof(WebClient::UploadBitsState), 104 + sizeof(::System::Net::WebClient::ProgressData*)> __System_Net_WebClient_UploadBitsStateSizeCheck;
  static_assert(sizeof(WebClient::UploadBitsState) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::get_FileUpload
// Il2CppName: get_FileUpload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebClient::UploadBitsState::*)()>(&System::Net::WebClient::UploadBitsState::get_FileUpload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::UploadBitsState*), "get_FileUpload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::get_Async
// Il2CppName: get_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebClient::UploadBitsState::*)()>(&System::Net::WebClient::UploadBitsState::get_Async)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::UploadBitsState*), "get_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::SetRequestStream
// Il2CppName: SetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebClient::UploadBitsState::*)(::System::IO::Stream*)>(&System::Net::WebClient::UploadBitsState::SetRequestStream)> {
  static const MethodInfo* get() {
    static auto* writeStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::UploadBitsState*), "SetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writeStream});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::WriteBytes
// Il2CppName: WriteBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebClient::UploadBitsState::*)()>(&System::Net::WebClient::UploadBitsState::WriteBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::UploadBitsState*), "WriteBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebClient::UploadBitsState::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebClient::UploadBitsState::*)()>(&System::Net::WebClient::UploadBitsState::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebClient::UploadBitsState*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
