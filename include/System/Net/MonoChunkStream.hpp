// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Skipping declaration: State because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: MonoChunkStream
  class MonoChunkStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::MonoChunkStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::MonoChunkStream*, "System.Net", "MonoChunkStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.MonoChunkStream
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoChunkStream : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::MonoChunkStream::State
    struct State;
    // Nested type: ::System::Net::MonoChunkStream::Chunk
    class Chunk;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.MonoChunkStream/System.Net.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.MonoChunkStream/System.Net.State None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.MonoChunkStream/System.Net.State None
      static ::System::Net::MonoChunkStream::State _get_None();
      // Set static field: static public System.Net.MonoChunkStream/System.Net.State None
      static void _set_None(::System::Net::MonoChunkStream::State value);
      // static field const value: static public System.Net.MonoChunkStream/System.Net.State PartialSize
      static constexpr const int PartialSize = 1;
      // Get static field: static public System.Net.MonoChunkStream/System.Net.State PartialSize
      static ::System::Net::MonoChunkStream::State _get_PartialSize();
      // Set static field: static public System.Net.MonoChunkStream/System.Net.State PartialSize
      static void _set_PartialSize(::System::Net::MonoChunkStream::State value);
      // static field const value: static public System.Net.MonoChunkStream/System.Net.State Body
      static constexpr const int Body = 2;
      // Get static field: static public System.Net.MonoChunkStream/System.Net.State Body
      static ::System::Net::MonoChunkStream::State _get_Body();
      // Set static field: static public System.Net.MonoChunkStream/System.Net.State Body
      static void _set_Body(::System::Net::MonoChunkStream::State value);
      // static field const value: static public System.Net.MonoChunkStream/System.Net.State BodyFinished
      static constexpr const int BodyFinished = 3;
      // Get static field: static public System.Net.MonoChunkStream/System.Net.State BodyFinished
      static ::System::Net::MonoChunkStream::State _get_BodyFinished();
      // Set static field: static public System.Net.MonoChunkStream/System.Net.State BodyFinished
      static void _set_BodyFinished(::System::Net::MonoChunkStream::State value);
      // static field const value: static public System.Net.MonoChunkStream/System.Net.State Trailer
      static constexpr const int Trailer = 4;
      // Get static field: static public System.Net.MonoChunkStream/System.Net.State Trailer
      static ::System::Net::MonoChunkStream::State _get_Trailer();
      // Set static field: static public System.Net.MonoChunkStream/System.Net.State Trailer
      static void _set_Trailer(::System::Net::MonoChunkStream::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.MonoChunkStream/System.Net.State
    #pragma pack(pop)
    static check_size<sizeof(MonoChunkStream::State), 0 + sizeof(int)> __System_Net_MonoChunkStream_StateSizeCheck;
    static_assert(sizeof(MonoChunkStream::State) == 0x4);
    public:
    // System.Net.WebHeaderCollection headers
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::WebHeaderCollection* headers;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.Int32 chunkSize
    // Size: 0x4
    // Offset: 0x18
    int chunkSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chunkRead
    // Size: 0x4
    // Offset: 0x1C
    int chunkRead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 totalWritten
    // Size: 0x4
    // Offset: 0x20
    int totalWritten;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.MonoChunkStream/System.Net.State state
    // Size: 0x4
    // Offset: 0x24
    ::System::Net::MonoChunkStream::State state;
    // Field size check
    static_assert(sizeof(::System::Net::MonoChunkStream::State) == 0x4);
    // private System.Text.StringBuilder saved
    // Size: 0x8
    // Offset: 0x28
    ::System::Text::StringBuilder* saved;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Boolean sawCR
    // Size: 0x1
    // Offset: 0x30
    bool sawCR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean gotit
    // Size: 0x1
    // Offset: 0x31
    bool gotit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gotit and: trailerState
    char __padding7[0x2] = {};
    // private System.Int32 trailerState
    // Size: 0x4
    // Offset: 0x34
    int trailerState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.ArrayList chunks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ArrayList* chunks;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    public:
    // Get instance field reference: System.Net.WebHeaderCollection headers
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn_headers();
    // Get instance field reference: private System.Int32 chunkSize
    [[deprecated("Use field access instead!")]] int& dyn_chunkSize();
    // Get instance field reference: private System.Int32 chunkRead
    [[deprecated("Use field access instead!")]] int& dyn_chunkRead();
    // Get instance field reference: private System.Int32 totalWritten
    [[deprecated("Use field access instead!")]] int& dyn_totalWritten();
    // Get instance field reference: private System.Net.MonoChunkStream/System.Net.State state
    [[deprecated("Use field access instead!")]] ::System::Net::MonoChunkStream::State& dyn_state();
    // Get instance field reference: private System.Text.StringBuilder saved
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_saved();
    // Get instance field reference: private System.Boolean sawCR
    [[deprecated("Use field access instead!")]] bool& dyn_sawCR();
    // Get instance field reference: private System.Boolean gotit
    [[deprecated("Use field access instead!")]] bool& dyn_gotit();
    // Get instance field reference: private System.Int32 trailerState
    [[deprecated("Use field access instead!")]] int& dyn_trailerState();
    // Get instance field reference: private System.Collections.ArrayList chunks
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_chunks();
    // public System.Boolean get_WantMore()
    // Offset: 0x1ABA660
    bool get_WantMore();
    // public System.Boolean get_DataAvailable()
    // Offset: 0x1ABA688
    bool get_DataAvailable();
    // public System.Int32 get_ChunkLeft()
    // Offset: 0x1ABA790
    int get_ChunkLeft();
    // public System.Void .ctor(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.WebHeaderCollection headers)
    // Offset: 0x1AB9830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoChunkStream* New_ctor(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::WebHeaderCollection* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::MonoChunkStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoChunkStream*, creationType>(buffer, offset, size, headers)));
    }
    // public System.Void .ctor(System.Net.WebHeaderCollection headers)
    // Offset: 0x1AB9890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoChunkStream* New_ctor(::System::Net::WebHeaderCollection* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::MonoChunkStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoChunkStream*, creationType>(headers)));
    }
    // public System.Void ResetBuffer()
    // Offset: 0x1AB9964
    void ResetBuffer();
    // public System.Void WriteAndReadBack(System.Byte[] buffer, System.Int32 offset, System.Int32 size, ref System.Int32 read)
    // Offset: 0x1AB9998
    void WriteAndReadBack(::ArrayW<uint8_t> buffer, int offset, int size, ByRef<int> read);
    // public System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1AB9A18
    int Read(::ArrayW<uint8_t> buffer, int offset, int size);
    // private System.Int32 ReadFromChunks(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1AB9A1C
    int ReadFromChunks(::ArrayW<uint8_t> buffer, int offset, int size);
    // public System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1AB9938
    void Write(::ArrayW<uint8_t> buffer, int offset, int size);
    // private System.Void InternalWrite(System.Byte[] buffer, ref System.Int32 offset, System.Int32 size)
    // Offset: 0x1AB9CE4
    void InternalWrite(::ArrayW<uint8_t> buffer, ByRef<int> offset, int size);
    // private System.Net.MonoChunkStream/System.Net.State ReadBody(System.Byte[] buffer, ref System.Int32 offset, System.Int32 size)
    // Offset: 0x1ABA11C
    ::System::Net::MonoChunkStream::State ReadBody(::ArrayW<uint8_t> buffer, ByRef<int> offset, int size);
    // private System.Net.MonoChunkStream/System.Net.State GetChunkSize(System.Byte[] buffer, ref System.Int32 offset, System.Int32 size)
    // Offset: 0x1AB9E24
    ::System::Net::MonoChunkStream::State GetChunkSize(::ArrayW<uint8_t> buffer, ByRef<int> offset, int size);
    // static private System.String RemoveChunkExtension(System.String input)
    // Offset: 0x1ABA83C
    static ::StringW RemoveChunkExtension(::StringW input);
    // private System.Net.MonoChunkStream/System.Net.State ReadCRLF(System.Byte[] buffer, ref System.Int32 offset, System.Int32 size)
    // Offset: 0x1ABA24C
    ::System::Net::MonoChunkStream::State ReadCRLF(::ArrayW<uint8_t> buffer, ByRef<int> offset, int size);
    // private System.Net.MonoChunkStream/System.Net.State ReadTrailer(System.Byte[] buffer, ref System.Int32 offset, System.Int32 size)
    // Offset: 0x1ABA35C
    ::System::Net::MonoChunkStream::State ReadTrailer(::ArrayW<uint8_t> buffer, ByRef<int> offset, int size);
    // static private System.Void ThrowProtocolViolation(System.String message)
    // Offset: 0x1ABA7C8
    static void ThrowProtocolViolation(::StringW message);
  }; // System.Net.MonoChunkStream
  #pragma pack(pop)
  static check_size<sizeof(MonoChunkStream), 56 + sizeof(::System::Collections::ArrayList*)> __System_Net_MonoChunkStreamSizeCheck;
  static_assert(sizeof(MonoChunkStream) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::MonoChunkStream::State, "System.Net", "MonoChunkStream/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::MonoChunkStream::get_WantMore
// Il2CppName: get_WantMore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::get_WantMore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "get_WantMore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::get_DataAvailable
// Il2CppName: get_DataAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::get_DataAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "get_DataAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::get_ChunkLeft
// Il2CppName: get_ChunkLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::get_ChunkLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "get_ChunkLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::MonoChunkStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ResetBuffer
// Il2CppName: ResetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::MonoChunkStream::*)()>(&System::Net::MonoChunkStream::ResetBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ResetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::WriteAndReadBack
// Il2CppName: WriteAndReadBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, int, int, ByRef<int>)>(&System::Net::MonoChunkStream::WriteAndReadBack)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* read = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "WriteAndReadBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, read});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::MonoChunkStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ReadFromChunks
// Il2CppName: ReadFromChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::MonoChunkStream::ReadFromChunks)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ReadFromChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::MonoChunkStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::InternalWrite
// Il2CppName: InternalWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&System::Net::MonoChunkStream::InternalWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "InternalWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ReadBody
// Il2CppName: ReadBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::MonoChunkStream::State (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&System::Net::MonoChunkStream::ReadBody)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ReadBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::GetChunkSize
// Il2CppName: GetChunkSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::MonoChunkStream::State (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&System::Net::MonoChunkStream::GetChunkSize)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "GetChunkSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::RemoveChunkExtension
// Il2CppName: RemoveChunkExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Net::MonoChunkStream::RemoveChunkExtension)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "RemoveChunkExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ReadCRLF
// Il2CppName: ReadCRLF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::MonoChunkStream::State (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&System::Net::MonoChunkStream::ReadCRLF)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ReadCRLF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ReadTrailer
// Il2CppName: ReadTrailer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::MonoChunkStream::State (System::Net::MonoChunkStream::*)(::ArrayW<uint8_t>, ByRef<int>, int)>(&System::Net::MonoChunkStream::ReadTrailer)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ReadTrailer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::MonoChunkStream::ThrowProtocolViolation
// Il2CppName: ThrowProtocolViolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::MonoChunkStream::ThrowProtocolViolation)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoChunkStream*), "ThrowProtocolViolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
