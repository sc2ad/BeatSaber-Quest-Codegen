// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: TransportType
  struct TransportType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::TransportType, "System.Net", "TransportType");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.TransportType
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransportType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TransportType
    constexpr TransportType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Net.TransportType Udp
    static constexpr const int Udp = 1;
    // Get static field: static public System.Net.TransportType Udp
    static ::System::Net::TransportType _get_Udp();
    // Set static field: static public System.Net.TransportType Udp
    static void _set_Udp(::System::Net::TransportType value);
    // static field const value: static public System.Net.TransportType Connectionless
    static constexpr const int Connectionless = 1;
    // Get static field: static public System.Net.TransportType Connectionless
    static ::System::Net::TransportType _get_Connectionless();
    // Set static field: static public System.Net.TransportType Connectionless
    static void _set_Connectionless(::System::Net::TransportType value);
    // static field const value: static public System.Net.TransportType Tcp
    static constexpr const int Tcp = 2;
    // Get static field: static public System.Net.TransportType Tcp
    static ::System::Net::TransportType _get_Tcp();
    // Set static field: static public System.Net.TransportType Tcp
    static void _set_Tcp(::System::Net::TransportType value);
    // static field const value: static public System.Net.TransportType ConnectionOriented
    static constexpr const int ConnectionOriented = 2;
    // Get static field: static public System.Net.TransportType ConnectionOriented
    static ::System::Net::TransportType _get_ConnectionOriented();
    // Set static field: static public System.Net.TransportType ConnectionOriented
    static void _set_ConnectionOriented(::System::Net::TransportType value);
    // static field const value: static public System.Net.TransportType All
    static constexpr const int All = 3;
    // Get static field: static public System.Net.TransportType All
    static ::System::Net::TransportType _get_All();
    // Set static field: static public System.Net.TransportType All
    static void _set_All(::System::Net::TransportType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Net.TransportType
  #pragma pack(pop)
  static check_size<sizeof(TransportType), 0 + sizeof(int)> __System_Net_TransportTypeSizeCheck;
  static_assert(sizeof(TransportType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
