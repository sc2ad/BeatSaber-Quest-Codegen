// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Net.BufferType
#include "System/Net/BufferType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: SecurityBufferStruct
  struct SecurityBufferStruct;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::SecurityBufferStruct, "System.Net", "SecurityBufferStruct");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.SecurityBufferStruct
  // [TokenAttribute] Offset: FFFFFFFF
  struct SecurityBufferStruct/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Net.BufferType type
    // Size: 0x4
    // Offset: 0x4
    ::System::Net::BufferType type;
    // Field size check
    static_assert(sizeof(::System::Net::BufferType) == 0x4);
    // public System.IntPtr token
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr token;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: SecurityBufferStruct
    constexpr SecurityBufferStruct(int count_ = {}, ::System::Net::BufferType type_ = {}, ::System::IntPtr token_ = {}) noexcept : count{count_}, type{type_}, token{token_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Size
    static int _get_Size();
    // Set static field: static public readonly System.Int32 Size
    static void _set_Size(int value);
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public System.Net.BufferType type
    [[deprecated("Use field access instead!")]] ::System::Net::BufferType& dyn_type();
    // Get instance field reference: public System.IntPtr token
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_token();
    // static private System.Void .cctor()
    // Offset: 0xF7659C
    static void _cctor();
  }; // System.Net.SecurityBufferStruct
  #pragma pack(pop)
  static check_size<sizeof(SecurityBufferStruct), 8 + sizeof(::System::IntPtr)> __System_Net_SecurityBufferStructSizeCheck;
  static_assert(sizeof(SecurityBufferStruct) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::SecurityBufferStruct::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::SecurityBufferStruct::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SecurityBufferStruct), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
