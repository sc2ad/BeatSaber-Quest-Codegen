// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ConnectionPool
  class ConnectionPool;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: GeneralAsyncDelegate
  class GeneralAsyncDelegate;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: WeakReference
  class WeakReference;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: NetworkStream
  class NetworkStream;
  // Forward declaring type: Socket
  class Socket;
  // Forward declaring type: SocketShutdown
  struct SocketShutdown;
  // Forward declaring type: SelectMode
  struct SelectMode;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: PooledStream
  class PooledStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::PooledStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::PooledStream*, "System.Net", "PooledStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.PooledStream
  // [TokenAttribute] Offset: FFFFFFFF
  class PooledStream : public ::System::IO::Stream {
    public:
    public:
    // private System.Boolean m_CheckLifetime
    // Size: 0x1
    // Offset: 0x28
    bool m_CheckLifetime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CheckLifetime and: m_Lifetime
    char __padding0[0x7] = {};
    // private System.TimeSpan m_Lifetime
    // Size: 0x8
    // Offset: 0x30
    ::System::TimeSpan m_Lifetime;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private System.DateTime m_CreateTime
    // Size: 0x8
    // Offset: 0x38
    ::System::DateTime m_CreateTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean m_ConnectionIsDoomed
    // Size: 0x1
    // Offset: 0x40
    bool m_ConnectionIsDoomed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ConnectionIsDoomed and: m_ConnectionPool
    char __padding3[0x7] = {};
    // private System.Net.ConnectionPool m_ConnectionPool
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ConnectionPool* m_ConnectionPool;
    // Field size check
    static_assert(sizeof(::System::Net::ConnectionPool*) == 0x8);
    // private System.WeakReference m_Owner
    // Size: 0x8
    // Offset: 0x50
    ::System::WeakReference* m_Owner;
    // Field size check
    static_assert(sizeof(::System::WeakReference*) == 0x8);
    // private System.Int32 m_PooledCount
    // Size: 0x4
    // Offset: 0x58
    int m_PooledCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_Initalizing
    // Size: 0x1
    // Offset: 0x5C
    bool m_Initalizing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Initalizing and: m_ServerAddress
    char __padding7[0x3] = {};
    // private System.Net.IPAddress m_ServerAddress
    // Size: 0x8
    // Offset: 0x60
    ::System::Net::IPAddress* m_ServerAddress;
    // Field size check
    static_assert(sizeof(::System::Net::IPAddress*) == 0x8);
    // private System.Net.Sockets.NetworkStream m_NetworkStream
    // Size: 0x8
    // Offset: 0x68
    ::System::Net::Sockets::NetworkStream* m_NetworkStream;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::NetworkStream*) == 0x8);
    // private System.Net.Sockets.Socket m_AbortSocket
    // Size: 0x8
    // Offset: 0x70
    ::System::Net::Sockets::Socket* m_AbortSocket;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private System.Net.Sockets.Socket m_AbortSocket6
    // Size: 0x8
    // Offset: 0x78
    ::System::Net::Sockets::Socket* m_AbortSocket6;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private System.Boolean m_JustConnected
    // Size: 0x1
    // Offset: 0x80
    bool m_JustConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_JustConnected and: m_AsyncCallback
    char __padding12[0x7] = {};
    // private System.Net.GeneralAsyncDelegate m_AsyncCallback
    // Size: 0x8
    // Offset: 0x88
    ::System::Net::GeneralAsyncDelegate* m_AsyncCallback;
    // Field size check
    static_assert(sizeof(::System::Net::GeneralAsyncDelegate*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean m_CheckLifetime
    [[deprecated("Use field access instead!")]] bool& dyn_m_CheckLifetime();
    // Get instance field reference: private System.TimeSpan m_Lifetime
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn_m_Lifetime();
    // Get instance field reference: private System.DateTime m_CreateTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_m_CreateTime();
    // Get instance field reference: private System.Boolean m_ConnectionIsDoomed
    [[deprecated("Use field access instead!")]] bool& dyn_m_ConnectionIsDoomed();
    // Get instance field reference: private System.Net.ConnectionPool m_ConnectionPool
    [[deprecated("Use field access instead!")]] ::System::Net::ConnectionPool*& dyn_m_ConnectionPool();
    // Get instance field reference: private System.WeakReference m_Owner
    [[deprecated("Use field access instead!")]] ::System::WeakReference*& dyn_m_Owner();
    // Get instance field reference: private System.Int32 m_PooledCount
    [[deprecated("Use field access instead!")]] int& dyn_m_PooledCount();
    // Get instance field reference: private System.Boolean m_Initalizing
    [[deprecated("Use field access instead!")]] bool& dyn_m_Initalizing();
    // Get instance field reference: private System.Net.IPAddress m_ServerAddress
    [[deprecated("Use field access instead!")]] ::System::Net::IPAddress*& dyn_m_ServerAddress();
    // Get instance field reference: private System.Net.Sockets.NetworkStream m_NetworkStream
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::NetworkStream*& dyn_m_NetworkStream();
    // Get instance field reference: private System.Net.Sockets.Socket m_AbortSocket
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_m_AbortSocket();
    // Get instance field reference: private System.Net.Sockets.Socket m_AbortSocket6
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_m_AbortSocket6();
    // Get instance field reference: private System.Boolean m_JustConnected
    [[deprecated("Use field access instead!")]] bool& dyn_m_JustConnected();
    // Get instance field reference: private System.Net.GeneralAsyncDelegate m_AsyncCallback
    [[deprecated("Use field access instead!")]] ::System::Net::GeneralAsyncDelegate*& dyn_m_AsyncCallback();
    // System.Boolean get_JustConnected()
    // Offset: 0xF70A94
    bool get_JustConnected();
    // System.Net.IPAddress get_ServerAddress()
    // Offset: 0xF70AB0
    ::System::Net::IPAddress* get_ServerAddress();
    // System.Boolean get_IsInitalizing()
    // Offset: 0xF70AB8
    bool get_IsInitalizing();
    // System.Boolean get_CanBePooled()
    // Offset: 0xF70AC0
    bool get_CanBePooled();
    // System.Void set_CanBePooled(System.Boolean value)
    // Offset: 0xF70B30
    void set_CanBePooled(bool value);
    // System.Boolean get_IsEmancipated()
    // Offset: 0xF70B4C
    bool get_IsEmancipated();
    // System.Object get_Owner()
    // Offset: 0xF70B94
    ::Il2CppObject* get_Owner();
    // System.Void set_Owner(System.Object value)
    // Offset: 0xF70BE4
    void set_Owner(::Il2CppObject* value);
    // System.Net.ConnectionPool get_Pool()
    // Offset: 0xF70C8C
    ::System::Net::ConnectionPool* get_Pool();
    // System.Net.ServicePoint get_ServicePoint()
    // Offset: 0xF70C94
    ::System::Net::ServicePoint* get_ServicePoint();
    // protected System.Boolean get_UsingSecureStream()
    // Offset: 0xF714E4
    bool get_UsingSecureStream();
    // System.Net.Sockets.NetworkStream get_NetworkStream()
    // Offset: 0xF714EC
    ::System::Net::Sockets::NetworkStream* get_NetworkStream();
    // System.Void set_NetworkStream(System.Net.Sockets.NetworkStream value)
    // Offset: 0xF714F4
    void set_NetworkStream(::System::Net::Sockets::NetworkStream* value);
    // protected System.Net.Sockets.Socket get_Socket()
    // Offset: 0xF71500
    ::System::Net::Sockets::Socket* get_Socket();
    // System.Void .ctor(System.Object owner)
    // Offset: 0xF708B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PooledStream* New_ctor(::Il2CppObject* owner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::PooledStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PooledStream*, creationType>(owner)));
    }
    // System.Void .ctor(System.Net.ConnectionPool connectionPool, System.TimeSpan lifetime, System.Boolean checkLifetime)
    // Offset: 0xF709A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PooledStream* New_ctor(::System::Net::ConnectionPool* connectionPool, ::System::TimeSpan lifetime, bool checkLifetime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::PooledStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PooledStream*, creationType>(connectionPool, lifetime, checkLifetime)));
    }
    // System.Boolean Activate(System.Object owningObject, System.Net.GeneralAsyncDelegate asyncCallback)
    // Offset: 0xF70CB0
    bool Activate(::Il2CppObject* owningObject, ::System::Net::GeneralAsyncDelegate* asyncCallback);
    // protected System.Boolean Activate(System.Object owningObject, System.Boolean async, System.Net.GeneralAsyncDelegate asyncCallback)
    // Offset: 0xF70CC0
    bool Activate(::Il2CppObject* owningObject, bool async, ::System::Net::GeneralAsyncDelegate* asyncCallback);
    // System.Void Deactivate()
    // Offset: 0xF70E68
    void Deactivate();
    // System.Void ConnectionCallback(System.Object owningObject, System.Exception e, System.Net.Sockets.Socket socket, System.Net.IPAddress address)
    // Offset: 0xF70F5C
    void ConnectionCallback(::Il2CppObject* owningObject, ::System::Exception* e, ::System::Net::Sockets::Socket* socket, ::System::Net::IPAddress* address);
    // protected System.Void CheckLifetime()
    // Offset: 0xF70E84
    void CheckLifetime();
    // System.Void UpdateLifetime()
    // Offset: 0xF710C4
    void UpdateLifetime();
    // System.Void PrePush(System.Object expectedOwner)
    // Offset: 0xF71158
    void PrePush(::Il2CppObject* expectedOwner);
    // System.Void PostPop(System.Object newOwner)
    // Offset: 0xF71310
    void PostPop(::Il2CppObject* newOwner);
    // System.Void MultipleWrite(System.Net.BufferOffsetSize[] buffers)
    // Offset: 0xF716FC
    void MultipleWrite(::ArrayW<::System::Net::BufferOffsetSize*> buffers);
    // System.Void CloseSocket()
    // Offset: 0xF717A8
    void CloseSocket();
    // public System.Void Close(System.Int32 timeout)
    // Offset: 0xF7180C
    void Close(int timeout);
    // System.IAsyncResult UnsafeBeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0xF718A4
    ::System::IAsyncResult* UnsafeBeginRead(::ArrayW<uint8_t> buffer, int offset, int size, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.IAsyncResult UnsafeBeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0xF71910
    ::System::IAsyncResult* UnsafeBeginWrite(::ArrayW<uint8_t> buffer, int offset, int size, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.IAsyncResult BeginMultipleWrite(System.Net.BufferOffsetSize[] buffers, System.AsyncCallback callback, System.Object state)
    // Offset: 0xF71958
    ::System::IAsyncResult* BeginMultipleWrite(::ArrayW<::System::Net::BufferOffsetSize*> buffers, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.Void EndMultipleWrite(System.IAsyncResult asyncResult)
    // Offset: 0xF7197C
    void EndMultipleWrite(::System::IAsyncResult* asyncResult);
    // System.Void SetSocketTimeoutOption(System.Net.Sockets.SocketShutdown mode, System.Int32 timeout, System.Boolean silent)
    // Offset: 0xF71A0C
    void SetSocketTimeoutOption(::System::Net::Sockets::SocketShutdown mode, int timeout, bool silent);
    // System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
    // Offset: 0xF71A2C
    bool Poll(int microSeconds, ::System::Net::Sockets::SelectMode mode);
    // System.Boolean PollRead()
    // Offset: 0xF71A48
    bool PollRead();
    // public override System.Boolean get_CanRead()
    // Offset: 0xF7151C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0xF7153C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0xF7155C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Boolean get_CanTimeout()
    // Offset: 0xF7157C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanTimeout()
    bool get_CanTimeout();
    // public override System.Int32 get_ReadTimeout()
    // Offset: 0xF7159C
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_ReadTimeout()
    int get_ReadTimeout();
    // public override System.Void set_ReadTimeout(System.Int32 value)
    // Offset: 0xF715C0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_ReadTimeout(System.Int32 value)
    void set_ReadTimeout(int value);
    // public override System.Int32 get_WriteTimeout()
    // Offset: 0xF715E4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_WriteTimeout()
    int get_WriteTimeout();
    // public override System.Void set_WriteTimeout(System.Int32 value)
    // Offset: 0xF71608
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_WriteTimeout(System.Int32 value)
    void set_WriteTimeout(int value);
    // public override System.Int64 get_Length()
    // Offset: 0xF7162C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0xF7164C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0xF7166C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0xF71690
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0xF716B4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    int Read(::ArrayW<uint8_t> buffer, int offset, int size);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0xF716D8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    void Write(::ArrayW<uint8_t> buffer, int offset, int size);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0xF71720
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0xF71880
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginRead(::ArrayW<uint8_t> buffer, int offset, int size, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0xF718C8
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(::System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0xF718EC
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginWrite(::ArrayW<uint8_t> buffer, int offset, int size, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0xF71934
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(::System::IAsyncResult* asyncResult);
    // public override System.Void Flush()
    // Offset: 0xF719A0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xF719C4
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task Stream::FlushAsync(System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* FlushAsync(::System::Threading::CancellationToken cancellationToken);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0xF719E8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
  }; // System.Net.PooledStream
  #pragma pack(pop)
  static check_size<sizeof(PooledStream), 136 + sizeof(::System::Net::GeneralAsyncDelegate*)> __System_Net_PooledStreamSizeCheck;
  static_assert(sizeof(PooledStream) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::PooledStream::get_JustConnected
// Il2CppName: get_JustConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_JustConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_JustConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_ServerAddress
// Il2CppName: get_ServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_ServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_ServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_IsInitalizing
// Il2CppName: get_IsInitalizing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_IsInitalizing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_IsInitalizing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_CanBePooled
// Il2CppName: get_CanBePooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_CanBePooled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_CanBePooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_CanBePooled
// Il2CppName: set_CanBePooled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(bool)>(&System::Net::PooledStream::set_CanBePooled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_CanBePooled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_IsEmancipated
// Il2CppName: get_IsEmancipated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_IsEmancipated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_IsEmancipated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_Owner
// Il2CppName: get_Owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_Owner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_Owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_Owner
// Il2CppName: set_Owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::Il2CppObject*)>(&System::Net::PooledStream::set_Owner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_Owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_Pool
// Il2CppName: get_Pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ConnectionPool* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_Pool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_Pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_UsingSecureStream
// Il2CppName: get_UsingSecureStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_UsingSecureStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_UsingSecureStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_NetworkStream
// Il2CppName: get_NetworkStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::NetworkStream* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_NetworkStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_NetworkStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_NetworkStream
// Il2CppName: set_NetworkStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::System::Net::Sockets::NetworkStream*)>(&System::Net::PooledStream::set_NetworkStream)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "NetworkStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_NetworkStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_Socket
// Il2CppName: get_Socket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_Socket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_Socket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::PooledStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::PooledStream::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)(::Il2CppObject*, ::System::Net::GeneralAsyncDelegate*)>(&System::Net::PooledStream::Activate)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System.Net", "GeneralAsyncDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject, asyncCallback});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)(::Il2CppObject*, bool, ::System::Net::GeneralAsyncDelegate*)>(&System::Net::PooledStream::Activate)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* async = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System.Net", "GeneralAsyncDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject, async, asyncCallback});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)()>(&System::Net::PooledStream::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::ConnectionCallback
// Il2CppName: ConnectionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::Il2CppObject*, ::System::Exception*, ::System::Net::Sockets::Socket*, ::System::Net::IPAddress*)>(&System::Net::PooledStream::ConnectionCallback)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* socket = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket")->byval_arg;
    static auto* address = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "ConnectionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject, e, socket, address});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::CheckLifetime
// Il2CppName: CheckLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)()>(&System::Net::PooledStream::CheckLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "CheckLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::UpdateLifetime
// Il2CppName: UpdateLifetime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)()>(&System::Net::PooledStream::UpdateLifetime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "UpdateLifetime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::PrePush
// Il2CppName: PrePush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::Il2CppObject*)>(&System::Net::PooledStream::PrePush)> {
  static const MethodInfo* get() {
    static auto* expectedOwner = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "PrePush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expectedOwner});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::PostPop
// Il2CppName: PostPop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::Il2CppObject*)>(&System::Net::PooledStream::PostPop)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "PostPop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::MultipleWrite
// Il2CppName: MultipleWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::ArrayW<::System::Net::BufferOffsetSize*>)>(&System::Net::PooledStream::MultipleWrite)> {
  static const MethodInfo* get() {
    static auto* buffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "MultipleWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::CloseSocket
// Il2CppName: CloseSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)()>(&System::Net::PooledStream::CloseSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "CloseSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(int)>(&System::Net::PooledStream::Close)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::UnsafeBeginRead
// Il2CppName: UnsafeBeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::PooledStream::UnsafeBeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "UnsafeBeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::UnsafeBeginWrite
// Il2CppName: UnsafeBeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::PooledStream::UnsafeBeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "UnsafeBeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::BeginMultipleWrite
// Il2CppName: BeginMultipleWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::PooledStream::*)(::ArrayW<::System::Net::BufferOffsetSize*>, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::PooledStream::BeginMultipleWrite)> {
  static const MethodInfo* get() {
    static auto* buffers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Net", "BufferOffsetSize"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "BeginMultipleWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::EndMultipleWrite
// Il2CppName: EndMultipleWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::System::IAsyncResult*)>(&System::Net::PooledStream::EndMultipleWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "EndMultipleWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::SetSocketTimeoutOption
// Il2CppName: SetSocketTimeoutOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::System::Net::Sockets::SocketShutdown, int, bool)>(&System::Net::PooledStream::SetSocketTimeoutOption)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketShutdown")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* silent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "SetSocketTimeoutOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, timeout, silent});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Poll
// Il2CppName: Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)(int, ::System::Net::Sockets::SelectMode)>(&System::Net::PooledStream::Poll)> {
  static const MethodInfo* get() {
    static auto* microSeconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SelectMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microSeconds, mode});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::PollRead
// Il2CppName: PollRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::PollRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "PollRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_CanTimeout
// Il2CppName: get_CanTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_CanTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_CanTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_ReadTimeout
// Il2CppName: get_ReadTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_ReadTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_ReadTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_ReadTimeout
// Il2CppName: set_ReadTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(int)>(&System::Net::PooledStream::set_ReadTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_ReadTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_WriteTimeout
// Il2CppName: get_WriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_WriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_WriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_WriteTimeout
// Il2CppName: set_WriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(int)>(&System::Net::PooledStream::set_WriteTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_WriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::PooledStream::*)()>(&System::Net::PooledStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(int64_t)>(&System::Net::PooledStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::PooledStream::*)(int64_t, ::System::IO::SeekOrigin)>(&System::Net::PooledStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::PooledStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::PooledStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(bool)>(&System::Net::PooledStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::PooledStream::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::PooledStream::*)(::System::IAsyncResult*)>(&System::Net::PooledStream::EndRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::PooledStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::PooledStream::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(::System::IAsyncResult*)>(&System::Net::PooledStream::EndWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)()>(&System::Net::PooledStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::FlushAsync
// Il2CppName: FlushAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::PooledStream::*)(::System::Threading::CancellationToken)>(&System::Net::PooledStream::FlushAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "FlushAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::PooledStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::PooledStream::*)(int64_t)>(&System::Net::PooledStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::PooledStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
