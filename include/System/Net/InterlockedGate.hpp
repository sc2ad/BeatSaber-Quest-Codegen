// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: InterlockedGate
  struct InterlockedGate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::InterlockedGate, "System.Net", "InterlockedGate");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.InterlockedGate
  // [TokenAttribute] Offset: FFFFFFFF
  struct InterlockedGate/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_State
    // Size: 0x4
    // Offset: 0x0
    int m_State;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InterlockedGate
    constexpr InterlockedGate(int m_State_ = {}) noexcept : m_State{m_State_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_State;
    }
    // static field const value: static System.Int32 Open
    static constexpr const int Open = 0;
    // Get static field: static System.Int32 Open
    static int _get_Open();
    // Set static field: static System.Int32 Open
    static void _set_Open(int value);
    // static field const value: static System.Int32 Triggering
    static constexpr const int Triggering = 1;
    // Get static field: static System.Int32 Triggering
    static int _get_Triggering();
    // Set static field: static System.Int32 Triggering
    static void _set_Triggering(int value);
    // static field const value: static System.Int32 Triggered
    static constexpr const int Triggered = 2;
    // Get static field: static System.Int32 Triggered
    static int _get_Triggered();
    // Set static field: static System.Int32 Triggered
    static void _set_Triggered(int value);
    // static field const value: static System.Int32 Signaling
    static constexpr const int Signaling = 3;
    // Get static field: static System.Int32 Signaling
    static int _get_Signaling();
    // Set static field: static System.Int32 Signaling
    static void _set_Signaling(int value);
    // static field const value: static System.Int32 Signaled
    static constexpr const int Signaled = 4;
    // Get static field: static System.Int32 Signaled
    static int _get_Signaled();
    // Set static field: static System.Int32 Signaled
    static void _set_Signaled(int value);
    // static field const value: static System.Int32 Completed
    static constexpr const int Completed = 5;
    // Get static field: static System.Int32 Completed
    static int _get_Completed();
    // Set static field: static System.Int32 Completed
    static void _set_Completed(int value);
    // Get instance field reference: private System.Int32 m_State
    [[deprecated("Use field access instead!")]] int& dyn_m_State();
    // System.Void Reset()
    // Offset: 0xA4D1B8
    void Reset();
    // System.Boolean Trigger(System.Boolean exclusive)
    // Offset: 0xA4D1C0
    bool Trigger(bool exclusive);
    // System.Boolean StartTriggering(System.Boolean exclusive)
    // Offset: 0xA4D1CC
    bool StartTriggering(bool exclusive);
    // System.Void FinishTriggering()
    // Offset: 0xA4D1D8
    void FinishTriggering();
    // System.Boolean StartSignaling(System.Boolean exclusive)
    // Offset: 0xA4D1E0
    bool StartSignaling(bool exclusive);
    // System.Void FinishSignaling()
    // Offset: 0xA4D1EC
    void FinishSignaling();
    // System.Boolean Complete()
    // Offset: 0xA4D1F4
    bool Complete();
  }; // System.Net.InterlockedGate
  #pragma pack(pop)
  static check_size<sizeof(InterlockedGate), 0 + sizeof(int)> __System_Net_InterlockedGateSizeCheck;
  static_assert(sizeof(InterlockedGate) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::InterlockedGate::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::InterlockedGate::*)()>(&System::Net::InterlockedGate::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::Trigger
// Il2CppName: Trigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::InterlockedGate::*)(bool)>(&System::Net::InterlockedGate::Trigger)> {
  static const MethodInfo* get() {
    static auto* exclusive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "Trigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exclusive});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::StartTriggering
// Il2CppName: StartTriggering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::InterlockedGate::*)(bool)>(&System::Net::InterlockedGate::StartTriggering)> {
  static const MethodInfo* get() {
    static auto* exclusive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "StartTriggering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exclusive});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::FinishTriggering
// Il2CppName: FinishTriggering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::InterlockedGate::*)()>(&System::Net::InterlockedGate::FinishTriggering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "FinishTriggering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::StartSignaling
// Il2CppName: StartSignaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::InterlockedGate::*)(bool)>(&System::Net::InterlockedGate::StartSignaling)> {
  static const MethodInfo* get() {
    static auto* exclusive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "StartSignaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exclusive});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::FinishSignaling
// Il2CppName: FinishSignaling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::InterlockedGate::*)()>(&System::Net::InterlockedGate::FinishSignaling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "FinishSignaling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedGate::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::InterlockedGate::*)()>(&System::Net::InterlockedGate::Complete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedGate), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
