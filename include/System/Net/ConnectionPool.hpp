// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.TimerThread
#include "System/Net/TimerThread.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: InterlockedStack
  class InterlockedStack;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: CreateConnectionDelegate
  class CreateConnectionDelegate;
  // Forward declaring type: Semaphore
  class Semaphore;
  // Forward declaring type: PooledStream
  class PooledStream;
  // Forward declaring type: GeneralAsyncDelegate
  class GeneralAsyncDelegate;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: Mutex
  class Mutex;
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Queue
  class Queue;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ConnectionPool
  class ConnectionPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ConnectionPool);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ConnectionPool*, "System.Net", "ConnectionPool");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ConnectionPool
  // [TokenAttribute] Offset: FFFFFFFF
  class ConnectionPool : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::ConnectionPool::State
    struct State;
    // Nested type: ::System::Net::ConnectionPool::AsyncConnectionPoolRequest
    class AsyncConnectionPoolRequest;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.ConnectionPool/System.Net.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.ConnectionPool/System.Net.State Initializing
      static constexpr const int Initializing = 0;
      // Get static field: static public System.Net.ConnectionPool/System.Net.State Initializing
      static ::System::Net::ConnectionPool::State _get_Initializing();
      // Set static field: static public System.Net.ConnectionPool/System.Net.State Initializing
      static void _set_Initializing(::System::Net::ConnectionPool::State value);
      // static field const value: static public System.Net.ConnectionPool/System.Net.State Running
      static constexpr const int Running = 1;
      // Get static field: static public System.Net.ConnectionPool/System.Net.State Running
      static ::System::Net::ConnectionPool::State _get_Running();
      // Set static field: static public System.Net.ConnectionPool/System.Net.State Running
      static void _set_Running(::System::Net::ConnectionPool::State value);
      // static field const value: static public System.Net.ConnectionPool/System.Net.State ShuttingDown
      static constexpr const int ShuttingDown = 2;
      // Get static field: static public System.Net.ConnectionPool/System.Net.State ShuttingDown
      static ::System::Net::ConnectionPool::State _get_ShuttingDown();
      // Set static field: static public System.Net.ConnectionPool/System.Net.State ShuttingDown
      static void _set_ShuttingDown(::System::Net::ConnectionPool::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.ConnectionPool/System.Net.State
    #pragma pack(pop)
    static check_size<sizeof(ConnectionPool::State), 0 + sizeof(int)> __System_Net_ConnectionPool_StateSizeCheck;
    static_assert(sizeof(ConnectionPool::State) == 0x4);
    public:
    // private readonly System.Net.TimerThread/System.Net.Queue m_CleanupQueue
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::TimerThread::Queue* m_CleanupQueue;
    // Field size check
    static_assert(sizeof(::System::Net::TimerThread::Queue*) == 0x8);
    // private System.Net.ConnectionPool/System.Net.State m_State
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::ConnectionPool::State m_State;
    // Field size check
    static_assert(sizeof(::System::Net::ConnectionPool::State) == 0x4);
    // Padding between fields: m_State and: m_StackOld
    char __padding1[0x4] = {};
    // private System.Net.InterlockedStack m_StackOld
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::InterlockedStack* m_StackOld;
    // Field size check
    static_assert(sizeof(::System::Net::InterlockedStack*) == 0x8);
    // private System.Net.InterlockedStack m_StackNew
    // Size: 0x8
    // Offset: 0x28
    ::System::Net::InterlockedStack* m_StackNew;
    // Field size check
    static_assert(sizeof(::System::Net::InterlockedStack*) == 0x8);
    // private System.Int32 m_WaitCount
    // Size: 0x4
    // Offset: 0x30
    int m_WaitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_WaitCount and: m_WaitHandles
    char __padding4[0x4] = {};
    // private System.Threading.WaitHandle[] m_WaitHandles
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::System::Threading::WaitHandle*> m_WaitHandles;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Threading::WaitHandle*>) == 0x8);
    // private System.Exception m_ResError
    // Size: 0x8
    // Offset: 0x40
    ::System::Exception* m_ResError;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Boolean m_ErrorOccured
    // Size: 0x1
    // Offset: 0x48
    bool m_ErrorOccured;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ErrorOccured and: m_ErrorTimer
    char __padding7[0x7] = {};
    // private System.Net.TimerThread/System.Net.Timer m_ErrorTimer
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::TimerThread::Timer* m_ErrorTimer;
    // Field size check
    static_assert(sizeof(::System::Net::TimerThread::Timer*) == 0x8);
    // private System.Collections.ArrayList m_ObjectList
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::ArrayList* m_ObjectList;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Int32 m_TotalObjects
    // Size: 0x4
    // Offset: 0x60
    int m_TotalObjects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_TotalObjects and: m_QueuedRequests
    char __padding10[0x4] = {};
    // private System.Collections.Queue m_QueuedRequests
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Queue* m_QueuedRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Queue*) == 0x8);
    // private System.Threading.Thread m_AsyncThread
    // Size: 0x8
    // Offset: 0x70
    ::System::Threading::Thread* m_AsyncThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.Int32 m_MaxPoolSize
    // Size: 0x4
    // Offset: 0x78
    int m_MaxPoolSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MinPoolSize
    // Size: 0x4
    // Offset: 0x7C
    int m_MinPoolSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.ServicePoint m_ServicePoint
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::ServicePoint* m_ServicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.Net.CreateConnectionDelegate m_CreateConnectionCallback
    // Size: 0x8
    // Offset: 0x88
    ::System::Net::CreateConnectionDelegate* m_CreateConnectionCallback;
    // Field size check
    static_assert(sizeof(::System::Net::CreateConnectionDelegate*) == 0x8);
    public:
    // Get static field: static private System.Net.TimerThread/System.Net.Callback s_CleanupCallback
    static ::System::Net::TimerThread::Callback* _get_s_CleanupCallback();
    // Set static field: static private System.Net.TimerThread/System.Net.Callback s_CleanupCallback
    static void _set_s_CleanupCallback(::System::Net::TimerThread::Callback* value);
    // Get static field: static private System.Net.TimerThread/System.Net.Callback s_CancelErrorCallback
    static ::System::Net::TimerThread::Callback* _get_s_CancelErrorCallback();
    // Set static field: static private System.Net.TimerThread/System.Net.Callback s_CancelErrorCallback
    static void _set_s_CancelErrorCallback(::System::Net::TimerThread::Callback* value);
    // Get static field: static private System.Net.TimerThread/System.Net.Queue s_CancelErrorQueue
    static ::System::Net::TimerThread::Queue* _get_s_CancelErrorQueue();
    // Set static field: static private System.Net.TimerThread/System.Net.Queue s_CancelErrorQueue
    static void _set_s_CancelErrorQueue(::System::Net::TimerThread::Queue* value);
    // static field const value: static private System.Int32 MaxQueueSize
    static constexpr const int MaxQueueSize = 1048576;
    // Get static field: static private System.Int32 MaxQueueSize
    static int _get_MaxQueueSize();
    // Set static field: static private System.Int32 MaxQueueSize
    static void _set_MaxQueueSize(int value);
    // static field const value: static private System.Int32 SemaphoreHandleIndex
    static constexpr const int SemaphoreHandleIndex = 0;
    // Get static field: static private System.Int32 SemaphoreHandleIndex
    static int _get_SemaphoreHandleIndex();
    // Set static field: static private System.Int32 SemaphoreHandleIndex
    static void _set_SemaphoreHandleIndex(int value);
    // static field const value: static private System.Int32 ErrorHandleIndex
    static constexpr const int ErrorHandleIndex = 1;
    // Get static field: static private System.Int32 ErrorHandleIndex
    static int _get_ErrorHandleIndex();
    // Set static field: static private System.Int32 ErrorHandleIndex
    static void _set_ErrorHandleIndex(int value);
    // static field const value: static private System.Int32 CreationHandleIndex
    static constexpr const int CreationHandleIndex = 2;
    // Get static field: static private System.Int32 CreationHandleIndex
    static int _get_CreationHandleIndex();
    // Set static field: static private System.Int32 CreationHandleIndex
    static void _set_CreationHandleIndex(int value);
    // static field const value: static private System.Int32 WaitTimeout
    static constexpr const int WaitTimeout = 258;
    // Get static field: static private System.Int32 WaitTimeout
    static int _get_WaitTimeout();
    // Set static field: static private System.Int32 WaitTimeout
    static void _set_WaitTimeout(int value);
    // static field const value: static private System.Int32 WaitAbandoned
    static constexpr const int WaitAbandoned = 128;
    // Get static field: static private System.Int32 WaitAbandoned
    static int _get_WaitAbandoned();
    // Set static field: static private System.Int32 WaitAbandoned
    static void _set_WaitAbandoned(int value);
    // static field const value: static private System.Int32 ErrorWait
    static constexpr const int ErrorWait = 5000;
    // Get static field: static private System.Int32 ErrorWait
    static int _get_ErrorWait();
    // Set static field: static private System.Int32 ErrorWait
    static void _set_ErrorWait(int value);
    // Get instance field reference: private readonly System.Net.TimerThread/System.Net.Queue m_CleanupQueue
    [[deprecated("Use field access instead!")]] ::System::Net::TimerThread::Queue*& dyn_m_CleanupQueue();
    // Get instance field reference: private System.Net.ConnectionPool/System.Net.State m_State
    [[deprecated("Use field access instead!")]] ::System::Net::ConnectionPool::State& dyn_m_State();
    // Get instance field reference: private System.Net.InterlockedStack m_StackOld
    [[deprecated("Use field access instead!")]] ::System::Net::InterlockedStack*& dyn_m_StackOld();
    // Get instance field reference: private System.Net.InterlockedStack m_StackNew
    [[deprecated("Use field access instead!")]] ::System::Net::InterlockedStack*& dyn_m_StackNew();
    // Get instance field reference: private System.Int32 m_WaitCount
    [[deprecated("Use field access instead!")]] int& dyn_m_WaitCount();
    // Get instance field reference: private System.Threading.WaitHandle[] m_WaitHandles
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Threading::WaitHandle*>& dyn_m_WaitHandles();
    // Get instance field reference: private System.Exception m_ResError
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_m_ResError();
    // Get instance field reference: private System.Boolean m_ErrorOccured
    [[deprecated("Use field access instead!")]] bool& dyn_m_ErrorOccured();
    // Get instance field reference: private System.Net.TimerThread/System.Net.Timer m_ErrorTimer
    [[deprecated("Use field access instead!")]] ::System::Net::TimerThread::Timer*& dyn_m_ErrorTimer();
    // Get instance field reference: private System.Collections.ArrayList m_ObjectList
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn_m_ObjectList();
    // Get instance field reference: private System.Int32 m_TotalObjects
    [[deprecated("Use field access instead!")]] int& dyn_m_TotalObjects();
    // Get instance field reference: private System.Collections.Queue m_QueuedRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Queue*& dyn_m_QueuedRequests();
    // Get instance field reference: private System.Threading.Thread m_AsyncThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_m_AsyncThread();
    // Get instance field reference: private System.Int32 m_MaxPoolSize
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxPoolSize();
    // Get instance field reference: private System.Int32 m_MinPoolSize
    [[deprecated("Use field access instead!")]] int& dyn_m_MinPoolSize();
    // Get instance field reference: private System.Net.ServicePoint m_ServicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_m_ServicePoint();
    // Get instance field reference: private System.Net.CreateConnectionDelegate m_CreateConnectionCallback
    [[deprecated("Use field access instead!")]] ::System::Net::CreateConnectionDelegate*& dyn_m_CreateConnectionCallback();
    // private System.Threading.Mutex get_CreationMutex()
    // Offset: 0x1300A10
    ::System::Threading::Mutex* get_CreationMutex();
    // private System.Threading.ManualResetEvent get_ErrorEvent()
    // Offset: 0x1300A98
    ::System::Threading::ManualResetEvent* get_ErrorEvent();
    // private System.Net.Semaphore get_Semaphore()
    // Offset: 0x1300B20
    ::System::Net::Semaphore* get_Semaphore();
    // System.Int32 get_Count()
    // Offset: 0x13019DC
    int get_Count();
    // System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x13019E4
    ::System::Net::ServicePoint* get_ServicePoint();
    // System.Int32 get_MaxPoolSize()
    // Offset: 0x13019EC
    int get_MaxPoolSize();
    // System.Int32 get_MinPoolSize()
    // Offset: 0x13019F4
    int get_MinPoolSize();
    // private System.Boolean get_ErrorOccurred()
    // Offset: 0x13019FC
    bool get_ErrorOccurred();
    // System.Void .ctor(System.Net.ServicePoint servicePoint, System.Int32 maxPoolSize, System.Int32 minPoolSize, System.Int32 idleTimeout, System.Net.CreateConnectionDelegate createConnectionCallback)
    // Offset: 0x1300BA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectionPool* New_ctor(::System::Net::ServicePoint* servicePoint, int maxPoolSize, int minPoolSize, int idleTimeout, ::System::Net::CreateConnectionDelegate* createConnectionCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ConnectionPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectionPool*, creationType>(servicePoint, maxPoolSize, minPoolSize, idleTimeout, createConnectionCallback)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1302F00
    static void _cctor();
    // private System.Void Initialize()
    // Offset: 0x1300CD0
    void Initialize();
    // private System.Void QueueRequest(System.Net.ConnectionPool/System.Net.AsyncConnectionPoolRequest asyncRequest)
    // Offset: 0x1300EBC
    void QueueRequest(::System::Net::ConnectionPool::AsyncConnectionPoolRequest* asyncRequest);
    // private System.Void AsyncThread()
    // Offset: 0x1301034
    void AsyncThread();
    // static private System.Void CleanupCallbackWrapper(System.Net.TimerThread/System.Net.Timer timer, System.Int32 timeNoticed, System.Object context)
    // Offset: 0x1301A20
    static void CleanupCallbackWrapper(::System::Net::TimerThread::Timer* timer, int timeNoticed, ::Il2CppObject* context);
    // System.Void ForceCleanup()
    // Offset: 0x1301CF0
    void ForceCleanup();
    // private System.Void CleanupCallback()
    // Offset: 0x1301B44
    void CleanupCallback();
    // private System.Net.PooledStream Create(System.Net.CreateConnectionDelegate createConnectionCallback)
    // Offset: 0x1301F98
    ::System::Net::PooledStream* Create(::System::Net::CreateConnectionDelegate* createConnectionCallback);
    // private System.Void Destroy(System.Net.PooledStream pooledStream)
    // Offset: 0x1301E38
    void Destroy(::System::Net::PooledStream* pooledStream);
    // static private System.Void CancelErrorCallbackWrapper(System.Net.TimerThread/System.Net.Timer timer, System.Int32 timeNoticed, System.Object context)
    // Offset: 0x13026FC
    static void CancelErrorCallbackWrapper(::System::Net::TimerThread::Timer* timer, int timeNoticed, ::Il2CppObject* context);
    // private System.Void CancelErrorCallback()
    // Offset: 0x1302784
    void CancelErrorCallback();
    // private System.Net.PooledStream GetFromPool(System.Object owningObject)
    // Offset: 0x13027E0
    ::System::Net::PooledStream* GetFromPool(::Il2CppObject* owningObject);
    // private System.Net.PooledStream Get(System.Object owningObject, System.Int32 result, ref System.Boolean continueLoop, ref System.Threading.WaitHandle[] waitHandles)
    // Offset: 0x1301438
    ::System::Net::PooledStream* Get(::Il2CppObject* owningObject, int result, ByRef<bool> continueLoop, ByRef<::ArrayW<::System::Threading::WaitHandle*>> waitHandles);
    // System.Void Abort()
    // Offset: 0x13025F8
    void Abort();
    // System.Net.PooledStream GetConnection(System.Object owningObject, System.Net.GeneralAsyncDelegate asyncCallback, System.Int32 creationTimeout)
    // Offset: 0x1302BE0
    ::System::Net::PooledStream* GetConnection(::Il2CppObject* owningObject, ::System::Net::GeneralAsyncDelegate* asyncCallback, int creationTimeout);
    // System.Void PutConnection(System.Net.PooledStream pooledStream, System.Object owningObject, System.Int32 creationTimeout)
    // Offset: 0x1302EB8
    void PutConnection(::System::Net::PooledStream* pooledStream, ::Il2CppObject* owningObject, int creationTimeout);
    // System.Void PutConnection(System.Net.PooledStream pooledStream, System.Object owningObject, System.Int32 creationTimeout, System.Boolean canReuse)
    // Offset: 0x1301774
    void PutConnection(::System::Net::PooledStream* pooledStream, ::Il2CppObject* owningObject, int creationTimeout, bool canReuse);
    // private System.Void PutNew(System.Net.PooledStream pooledStream)
    // Offset: 0x1302EC0
    void PutNew(::System::Net::PooledStream* pooledStream);
    // private System.Boolean ReclaimEmancipatedObjects()
    // Offset: 0x1302918
    bool ReclaimEmancipatedObjects();
    // private System.Net.PooledStream UserCreateRequest()
    // Offset: 0x13028B4
    ::System::Net::PooledStream* UserCreateRequest();
  }; // System.Net.ConnectionPool
  #pragma pack(pop)
  static check_size<sizeof(ConnectionPool), 136 + sizeof(::System::Net::CreateConnectionDelegate*)> __System_Net_ConnectionPoolSizeCheck;
  static_assert(sizeof(ConnectionPool) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ConnectionPool::State, "System.Net", "ConnectionPool/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_CreationMutex
// Il2CppName: get_CreationMutex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Mutex* (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_CreationMutex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_CreationMutex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_ErrorEvent
// Il2CppName: get_ErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ManualResetEvent* (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_ErrorEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_ErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_Semaphore
// Il2CppName: get_Semaphore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Semaphore* (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_Semaphore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_Semaphore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_MaxPoolSize
// Il2CppName: get_MaxPoolSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_MaxPoolSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_MaxPoolSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_MinPoolSize
// Il2CppName: get_MinPoolSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_MinPoolSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_MinPoolSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::get_ErrorOccurred
// Il2CppName: get_ErrorOccurred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::get_ErrorOccurred)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "get_ErrorOccurred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ConnectionPool::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::ConnectionPool::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::QueueRequest
// Il2CppName: QueueRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)(::System::Net::ConnectionPool::AsyncConnectionPoolRequest*)>(&System::Net::ConnectionPool::QueueRequest)> {
  static const MethodInfo* get() {
    static auto* asyncRequest = &::il2cpp_utils::GetClassFromName("System.Net", "ConnectionPool/AsyncConnectionPoolRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "QueueRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncRequest});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::AsyncThread
// Il2CppName: AsyncThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::AsyncThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "AsyncThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::CleanupCallbackWrapper
// Il2CppName: CleanupCallbackWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::TimerThread::Timer*, int, ::Il2CppObject*)>(&System::Net::ConnectionPool::CleanupCallbackWrapper)> {
  static const MethodInfo* get() {
    static auto* timer = &::il2cpp_utils::GetClassFromName("System.Net", "TimerThread/Timer")->byval_arg;
    static auto* timeNoticed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "CleanupCallbackWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timer, timeNoticed, context});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::ForceCleanup
// Il2CppName: ForceCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::ForceCleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "ForceCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::CleanupCallback
// Il2CppName: CleanupCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::CleanupCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "CleanupCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::PooledStream* (System::Net::ConnectionPool::*)(::System::Net::CreateConnectionDelegate*)>(&System::Net::ConnectionPool::Create)> {
  static const MethodInfo* get() {
    static auto* createConnectionCallback = &::il2cpp_utils::GetClassFromName("System.Net", "CreateConnectionDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createConnectionCallback});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)(::System::Net::PooledStream*)>(&System::Net::ConnectionPool::Destroy)> {
  static const MethodInfo* get() {
    static auto* pooledStream = &::il2cpp_utils::GetClassFromName("System.Net", "PooledStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pooledStream});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::CancelErrorCallbackWrapper
// Il2CppName: CancelErrorCallbackWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::TimerThread::Timer*, int, ::Il2CppObject*)>(&System::Net::ConnectionPool::CancelErrorCallbackWrapper)> {
  static const MethodInfo* get() {
    static auto* timer = &::il2cpp_utils::GetClassFromName("System.Net", "TimerThread/Timer")->byval_arg;
    static auto* timeNoticed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "CancelErrorCallbackWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timer, timeNoticed, context});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::CancelErrorCallback
// Il2CppName: CancelErrorCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::CancelErrorCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "CancelErrorCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::GetFromPool
// Il2CppName: GetFromPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::PooledStream* (System::Net::ConnectionPool::*)(::Il2CppObject*)>(&System::Net::ConnectionPool::GetFromPool)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "GetFromPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::PooledStream* (System::Net::ConnectionPool::*)(::Il2CppObject*, int, ByRef<bool>, ByRef<::ArrayW<::System::Threading::WaitHandle*>>)>(&System::Net::ConnectionPool::Get)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* continueLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* waitHandles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Threading", "WaitHandle"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject, result, continueLoop, waitHandles});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::PooledStream* (System::Net::ConnectionPool::*)(::Il2CppObject*, ::System::Net::GeneralAsyncDelegate*, int)>(&System::Net::ConnectionPool::GetConnection)> {
  static const MethodInfo* get() {
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System.Net", "GeneralAsyncDelegate")->byval_arg;
    static auto* creationTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owningObject, asyncCallback, creationTimeout});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::PutConnection
// Il2CppName: PutConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)(::System::Net::PooledStream*, ::Il2CppObject*, int)>(&System::Net::ConnectionPool::PutConnection)> {
  static const MethodInfo* get() {
    static auto* pooledStream = &::il2cpp_utils::GetClassFromName("System.Net", "PooledStream")->byval_arg;
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* creationTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "PutConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pooledStream, owningObject, creationTimeout});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::PutConnection
// Il2CppName: PutConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)(::System::Net::PooledStream*, ::Il2CppObject*, int, bool)>(&System::Net::ConnectionPool::PutConnection)> {
  static const MethodInfo* get() {
    static auto* pooledStream = &::il2cpp_utils::GetClassFromName("System.Net", "PooledStream")->byval_arg;
    static auto* owningObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* creationTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* canReuse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "PutConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pooledStream, owningObject, creationTimeout, canReuse});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::PutNew
// Il2CppName: PutNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ConnectionPool::*)(::System::Net::PooledStream*)>(&System::Net::ConnectionPool::PutNew)> {
  static const MethodInfo* get() {
    static auto* pooledStream = &::il2cpp_utils::GetClassFromName("System.Net", "PooledStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "PutNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pooledStream});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::ReclaimEmancipatedObjects
// Il2CppName: ReclaimEmancipatedObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::ReclaimEmancipatedObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "ReclaimEmancipatedObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ConnectionPool::UserCreateRequest
// Il2CppName: UserCreateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::PooledStream* (System::Net::ConnectionPool::*)()>(&System::Net::ConnectionPool::UserCreateRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ConnectionPool*), "UserCreateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
