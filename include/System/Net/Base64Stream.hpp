// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.DelegatedStream
#include "System/Net/DelegatedStream.hpp"
// Including type: System.Net.Mime.IEncodableStream
#include "System/Net/Mime/IEncodableStream.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Forward declaring namespace: System::Net::Mime
namespace System::Net::Mime {
  // Forward declaring type: Base64WriteStateInfo
  class Base64WriteStateInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: Base64Stream
  class Base64Stream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Base64Stream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Base64Stream*, "System.Net", "Base64Stream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Base64Stream
  // [TokenAttribute] Offset: FFFFFFFF
  class Base64Stream : public ::System::Net::DelegatedStream/*, public ::System::Net::Mime::IEncodableStream*/ {
    public:
    // Nested type: ::System::Net::Base64Stream::ReadAsyncResult
    class ReadAsyncResult;
    // Nested type: ::System::Net::Base64Stream::WriteAsyncResult
    class WriteAsyncResult;
    // Nested type: ::System::Net::Base64Stream::ReadStateInfo
    class ReadStateInfo;
    public:
    // private System.Int32 lineLength
    // Size: 0x4
    // Offset: 0x38
    int lineLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lineLength and: readState
    char __padding0[0x4] = {};
    // private System.Net.Base64Stream/System.Net.ReadStateInfo readState
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::Base64Stream::ReadStateInfo* readState;
    // Field size check
    static_assert(sizeof(::System::Net::Base64Stream::ReadStateInfo*) == 0x8);
    // private System.Net.Mime.Base64WriteStateInfo writeState
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::Mime::Base64WriteStateInfo* writeState;
    // Field size check
    static_assert(sizeof(::System::Net::Mime::Base64WriteStateInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Net::Mime::IEncodableStream
    operator ::System::Net::Mime::IEncodableStream() noexcept {
      return *reinterpret_cast<::System::Net::Mime::IEncodableStream*>(this);
    }
    // Get static field: static private System.Byte[] base64DecodeMap
    static ::ArrayW<uint8_t> _get_base64DecodeMap();
    // Set static field: static private System.Byte[] base64DecodeMap
    static void _set_base64DecodeMap(::ArrayW<uint8_t> value);
    // Get static field: static private System.Byte[] base64EncodeMap
    static ::ArrayW<uint8_t> _get_base64EncodeMap();
    // Set static field: static private System.Byte[] base64EncodeMap
    static void _set_base64EncodeMap(::ArrayW<uint8_t> value);
    // static field const value: static private System.Int32 sizeOfBase64EncodedChar
    static constexpr const int sizeOfBase64EncodedChar = 4;
    // Get static field: static private System.Int32 sizeOfBase64EncodedChar
    static int _get_sizeOfBase64EncodedChar();
    // Set static field: static private System.Int32 sizeOfBase64EncodedChar
    static void _set_sizeOfBase64EncodedChar(int value);
    // static field const value: static private System.Byte invalidBase64Value
    static constexpr const uint8_t invalidBase64Value = 255u;
    // Get static field: static private System.Byte invalidBase64Value
    static uint8_t _get_invalidBase64Value();
    // Set static field: static private System.Byte invalidBase64Value
    static void _set_invalidBase64Value(uint8_t value);
    // Get instance field reference: private System.Int32 lineLength
    [[deprecated("Use field access instead!")]] int& dyn_lineLength();
    // Get instance field reference: private System.Net.Base64Stream/System.Net.ReadStateInfo readState
    [[deprecated("Use field access instead!")]] ::System::Net::Base64Stream::ReadStateInfo*& dyn_readState();
    // Get instance field reference: private System.Net.Mime.Base64WriteStateInfo writeState
    [[deprecated("Use field access instead!")]] ::System::Net::Mime::Base64WriteStateInfo*& dyn_writeState();
    // private System.Net.Base64Stream/System.Net.ReadStateInfo get_ReadState()
    // Offset: 0x12F7594
    ::System::Net::Base64Stream::ReadStateInfo* get_ReadState();
    // System.Net.Mime.Base64WriteStateInfo get_WriteState()
    // Offset: 0x12F7608
    ::System::Net::Mime::Base64WriteStateInfo* get_WriteState();
    // System.Void .ctor(System.IO.Stream stream, System.Net.Mime.Base64WriteStateInfo writeStateInfo)
    // Offset: 0x12F743C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Base64Stream* New_ctor(::System::IO::Stream* stream, ::System::Net::Mime::Base64WriteStateInfo* writeStateInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Base64Stream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Base64Stream*, creationType>(stream, writeStateInfo)));
    }
    // System.Void .ctor(System.IO.Stream stream, System.Int32 lineLength)
    // Offset: 0x12F74CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Base64Stream* New_ctor(::System::IO::Stream* stream, int lineLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Base64Stream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Base64Stream*, creationType>(stream, lineLength)));
    }
    // System.Void .ctor(System.Net.Mime.Base64WriteStateInfo writeStateInfo)
    // Offset: 0x12F7550
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Base64Stream* New_ctor(::System::Net::Mime::Base64WriteStateInfo* writeStateInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Base64Stream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Base64Stream*, creationType>(writeStateInfo)));
    }
    // static private System.Void .cctor()
    // Offset: 0x12F9010
    static void _cctor();
    // public System.Int32 DecodeBytes(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x12F7ED0
    int DecodeBytes(::ArrayW<uint8_t> buffer, int offset, int count);
    // public System.Int32 EncodeBytes(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x12F8158
    int EncodeBytes(::ArrayW<uint8_t> buffer, int offset, int count);
    // System.Int32 EncodeBytes(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Boolean dontDeferFinalBytes, System.Boolean shouldAppendSpaceToCRLF)
    // Offset: 0x12F8164
    int EncodeBytes(::ArrayW<uint8_t> buffer, int offset, int count, bool dontDeferFinalBytes, bool shouldAppendSpaceToCRLF);
    // public System.IO.Stream GetStream()
    // Offset: 0x12F8A88
    ::System::IO::Stream* GetStream();
    // public System.String GetEncodedString()
    // Offset: 0x12F8A8C
    ::StringW GetEncodedString();
    // private System.Void FlushInternal()
    // Offset: 0x12F7E88
    void FlushInternal();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x12F758C
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Boolean DelegatedStream::get_CanWrite()
    bool get_CanWrite();
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x12F7610
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.IAsyncResult DelegatedStream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginRead(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x12F7908
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.IAsyncResult DelegatedStream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginWrite(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Void Close()
    // Offset: 0x12F7C5C
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Void DelegatedStream::Close()
    void Close();
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x12F8AD8
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Int32 DelegatedStream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(::System::IAsyncResult* asyncResult);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x12F8C10
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Void DelegatedStream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(::System::IAsyncResult* asyncResult);
    // public override System.Void Flush()
    // Offset: 0x12F8D40
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Void DelegatedStream::Flush()
    void Flush();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x12F8D80
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Int32 DelegatedStream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x12F8EB8
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Void DelegatedStream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
  }; // System.Net.Base64Stream
  #pragma pack(pop)
  static check_size<sizeof(Base64Stream), 72 + sizeof(::System::Net::Mime::Base64WriteStateInfo*)> __System_Net_Base64StreamSizeCheck;
  static_assert(sizeof(Base64Stream) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Base64Stream::get_ReadState
// Il2CppName: get_ReadState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Base64Stream::ReadStateInfo* (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::get_ReadState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "get_ReadState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Mime::Base64WriteStateInfo* (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::get_WriteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Base64Stream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Base64Stream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Base64Stream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::Base64Stream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::DecodeBytes
// Il2CppName: DecodeBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Base64Stream::DecodeBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "DecodeBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::EncodeBytes
// Il2CppName: EncodeBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Base64Stream::EncodeBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "EncodeBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::EncodeBytes
// Il2CppName: EncodeBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int, bool, bool)>(&System::Net::Base64Stream::EncodeBytes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dontDeferFinalBytes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* shouldAppendSpaceToCRLF = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "EncodeBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, dontDeferFinalBytes, shouldAppendSpaceToCRLF});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::GetStream
// Il2CppName: GetStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::GetStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "GetStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::GetEncodedString
// Il2CppName: GetEncodedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::GetEncodedString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "GetEncodedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::FlushInternal
// Il2CppName: FlushInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::FlushInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "FlushInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Base64Stream::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Base64Stream::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Base64Stream::*)(::System::IAsyncResult*)>(&System::Net::Base64Stream::EndRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::*)(::System::IAsyncResult*)>(&System::Net::Base64Stream::EndWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::*)()>(&System::Net::Base64Stream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Base64Stream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Base64Stream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
