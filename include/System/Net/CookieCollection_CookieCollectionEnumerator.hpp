// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.CookieCollection
#include "System/Net/CookieCollection.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::CookieCollection::CookieCollectionEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::CookieCollection::CookieCollectionEnumerator*, "System.Net", "CookieCollection/CookieCollectionEnumerator");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.CookieCollection/System.Net.CookieCollectionEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class CookieCollection::CookieCollectionEnumerator : public ::Il2CppObject/*, public ::System::Collections::IEnumerator*/ {
    public:
    public:
    // private System.Net.CookieCollection m_cookies
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::CookieCollection* m_cookies;
    // Field size check
    static_assert(sizeof(::System::Net::CookieCollection*) == 0x8);
    // private System.Int32 m_count
    // Size: 0x4
    // Offset: 0x18
    int m_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_index
    // Size: 0x4
    // Offset: 0x1C
    int m_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_version
    // Size: 0x4
    // Offset: 0x20
    int m_version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerator
    operator ::System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Creating interface conversion operator: i_IEnumerator
    inline ::System::Collections::IEnumerator* i_IEnumerator() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerator*>(this);
    }
    // Get instance field reference: private System.Net.CookieCollection m_cookies
    [[deprecated("Use field access instead!")]] ::System::Net::CookieCollection*& dyn_m_cookies();
    // Get instance field reference: private System.Int32 m_count
    [[deprecated("Use field access instead!")]] int& dyn_m_count();
    // Get instance field reference: private System.Int32 m_index
    [[deprecated("Use field access instead!")]] int& dyn_m_index();
    // Get instance field reference: private System.Int32 m_version
    [[deprecated("Use field access instead!")]] int& dyn_m_version();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x1A9D3E4
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // System.Void .ctor(System.Net.CookieCollection cookies)
    // Offset: 0x1A9D384
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CookieCollection::CookieCollectionEnumerator* New_ctor(::System::Net::CookieCollection* cookies) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::CookieCollection::CookieCollectionEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CookieCollection::CookieCollectionEnumerator*, creationType>(cookies)));
    }
    // private System.Boolean System.Collections.IEnumerator.MoveNext()
    // Offset: 0x1A9D4B0
    bool System_Collections_IEnumerator_MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x1A9D574
    void System_Collections_IEnumerator_Reset();
  }; // System.Net.CookieCollection/System.Net.CookieCollectionEnumerator
  #pragma pack(pop)
  static check_size<sizeof(CookieCollection::CookieCollectionEnumerator), 32 + sizeof(int)> __System_Net_CookieCollection_CookieCollectionEnumeratorSizeCheck;
  static_assert(sizeof(CookieCollection::CookieCollectionEnumerator) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::CookieCollection::CookieCollectionEnumerator::*)()>(&System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection::CookieCollectionEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::CookieCollectionEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_MoveNext
// Il2CppName: System.Collections.IEnumerator.MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::CookieCollection::CookieCollectionEnumerator::*)()>(&System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection::CookieCollectionEnumerator*), "System.Collections.IEnumerator.MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::CookieCollection::CookieCollectionEnumerator::*)()>(&System::Net::CookieCollection::CookieCollectionEnumerator::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::CookieCollection::CookieCollectionEnumerator*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
