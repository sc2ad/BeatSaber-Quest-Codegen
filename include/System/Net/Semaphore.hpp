// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: Semaphore
  class Semaphore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Semaphore);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Semaphore*, "System.Net", "Semaphore");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Semaphore
  // [TokenAttribute] Offset: FFFFFFFF
  class Semaphore : public ::System::Threading::WaitHandle {
    public:
    // System.Void .ctor(System.Int32 initialCount, System.Int32 maxCount)
    // Offset: 0xF76690
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Semaphore* New_ctor(int initialCount, int maxCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Semaphore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Semaphore*, creationType>(initialCount, maxCount)));
    }
    // System.Boolean ReleaseSemaphore()
    // Offset: 0xF767D0
    bool ReleaseSemaphore();
  }; // System.Net.Semaphore
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Semaphore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Semaphore::ReleaseSemaphore
// Il2CppName: ReleaseSemaphore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Semaphore::*)()>(&System::Net::Semaphore::ReleaseSemaphore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Semaphore*), "ReleaseSemaphore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
