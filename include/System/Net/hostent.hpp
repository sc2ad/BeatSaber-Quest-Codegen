// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: hostent
  struct hostent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::hostent, "System.Net", "hostent");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.hostent
  // [TokenAttribute] Offset: FFFFFFFF
  struct hostent/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr h_name
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr h_name;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr h_aliases
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr h_aliases;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int16 h_addrtype
    // Size: 0x2
    // Offset: 0x10
    int16_t h_addrtype;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // public System.Int16 h_length
    // Size: 0x2
    // Offset: 0x12
    int16_t h_length;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: h_length and: h_addr_list
    char __padding3[0x4] = {};
    // public System.IntPtr h_addr_list
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr h_addr_list;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: hostent
    constexpr hostent(::System::IntPtr h_name_ = {}, ::System::IntPtr h_aliases_ = {}, int16_t h_addrtype_ = {}, int16_t h_length_ = {}, ::System::IntPtr h_addr_list_ = {}) noexcept : h_name{h_name_}, h_aliases{h_aliases_}, h_addrtype{h_addrtype_}, h_length{h_length_}, h_addr_list{h_addr_list_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr h_name
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_h_name();
    // Get instance field reference: public System.IntPtr h_aliases
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_h_aliases();
    // Get instance field reference: public System.Int16 h_addrtype
    [[deprecated("Use field access instead!")]] int16_t& dyn_h_addrtype();
    // Get instance field reference: public System.Int16 h_length
    [[deprecated("Use field access instead!")]] int16_t& dyn_h_length();
    // Get instance field reference: public System.IntPtr h_addr_list
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_h_addr_list();
  }; // System.Net.hostent
  #pragma pack(pop)
  static check_size<sizeof(hostent), 24 + sizeof(::System::IntPtr)> __System_Net_hostentSizeCheck;
  static_assert(sizeof(hostent) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
