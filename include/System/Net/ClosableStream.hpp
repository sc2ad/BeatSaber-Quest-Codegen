// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.DelegatedStream
#include "System/Net/DelegatedStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler
  class EventHandler;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ClosableStream
  class ClosableStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ClosableStream);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ClosableStream*, "System.Net", "ClosableStream");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ClosableStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ClosableStream : public ::System::Net::DelegatedStream {
    public:
    public:
    // private System.EventHandler onClose
    // Size: 0x8
    // Offset: 0x38
    ::System::EventHandler* onClose;
    // Field size check
    static_assert(sizeof(::System::EventHandler*) == 0x8);
    // private System.Int32 closed
    // Size: 0x4
    // Offset: 0x40
    int closed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.EventHandler onClose
    [[deprecated("Use field access instead!")]] ::System::EventHandler*& dyn_onClose();
    // Get instance field reference: private System.Int32 closed
    [[deprecated("Use field access instead!")]] int& dyn_closed();
    // System.Void .ctor(System.IO.Stream stream, System.EventHandler onClose)
    // Offset: 0x12FBCB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClosableStream* New_ctor(::System::IO::Stream* stream, ::System::EventHandler* onClose) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ClosableStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClosableStream*, creationType>(stream, onClose)));
    }
    // public override System.Void Close()
    // Offset: 0x12FBCE4
    // Implemented from: System.Net.DelegatedStream
    // Base method: System.Void DelegatedStream::Close()
    void Close();
  }; // System.Net.ClosableStream
  #pragma pack(pop)
  static check_size<sizeof(ClosableStream), 64 + sizeof(int)> __System_Net_ClosableStreamSizeCheck;
  static_assert(sizeof(ClosableStream) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ClosableStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ClosableStream::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ClosableStream::*)()>(&System::Net::ClosableStream::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ClosableStream*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
