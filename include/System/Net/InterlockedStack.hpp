// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Stack
  class Stack;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: InterlockedStack
  class InterlockedStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::InterlockedStack);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::InterlockedStack*, "System.Net", "InterlockedStack");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.InterlockedStack
  // [TokenAttribute] Offset: FFFFFFFF
  class InterlockedStack : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Stack _stack
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Stack* stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Stack*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Stack*
    constexpr operator ::System::Collections::Stack*() const noexcept {
      return stack;
    }
    // Get instance field reference: private readonly System.Collections.Stack _stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Stack*& dyn__stack();
    // System.Void .ctor()
    // Offset: 0xF66F18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InterlockedStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::InterlockedStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InterlockedStack*, creationType>()));
    }
    // System.Void Push(System.Object pooledStream)
    // Offset: 0xF66F80
    void Push(::Il2CppObject* pooledStream);
    // System.Object Pop()
    // Offset: 0xF670B4
    ::Il2CppObject* Pop();
  }; // System.Net.InterlockedStack
  #pragma pack(pop)
  static check_size<sizeof(InterlockedStack), 16 + sizeof(::System::Collections::Stack*)> __System_Net_InterlockedStackSizeCheck;
  static_assert(sizeof(InterlockedStack) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::InterlockedStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::InterlockedStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::InterlockedStack::*)(::Il2CppObject*)>(&System::Net::InterlockedStack::Push)> {
  static const MethodInfo* get() {
    static auto* pooledStream = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pooledStream});
  }
};
// Writing MetadataGetter for method: System::Net::InterlockedStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::InterlockedStack::*)()>(&System::Net::InterlockedStack::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::InterlockedStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
