// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: Blob
  struct Blob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Blob, "System.Net", "Blob");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.Blob
  // [TokenAttribute] Offset: FFFFFFFF
  struct Blob/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 cbSize
    // Size: 0x4
    // Offset: 0x0
    int cbSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pBlobData
    // Size: 0x4
    // Offset: 0x4
    int pBlobData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Blob
    constexpr Blob(int cbSize_ = {}, int pBlobData_ = {}) noexcept : cbSize{cbSize_}, pBlobData{pBlobData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 cbSize
    [[deprecated("Use field access instead!")]] int& dyn_cbSize();
    // Get instance field reference: public System.Int32 pBlobData
    [[deprecated("Use field access instead!")]] int& dyn_pBlobData();
  }; // System.Net.Blob
  #pragma pack(pop)
  static check_size<sizeof(Blob), 4 + sizeof(int)> __System_Net_BlobSizeCheck;
  static_assert(sizeof(Blob) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
