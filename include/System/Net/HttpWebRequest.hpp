// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
// Including type: System.Net.DecompressionMethods
#include "System/Net/DecompressionMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Skipping declaration: NtlmAuthState because it is already included!
  // Forward declaring type: HttpContinueDelegate
  class HttpContinueDelegate;
  // Forward declaring type: CookieContainer
  class CookieContainer;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: WebConnectionStream
  class WebConnectionStream;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
  // Forward declaring type: WebAsyncResult
  class WebAsyncResult;
  // Forward declaring type: WebConnection
  class WebConnection;
  // Forward declaring type: ServerCertValidationCallback
  class ServerCertValidationCallback;
  // Forward declaring type: SimpleAsyncResult
  class SimpleAsyncResult;
  // Forward declaring type: HttpStatusCode
  struct HttpStatusCode;
  // Forward declaring type: WebResponse
  class WebResponse;
  // Forward declaring type: WebExceptionStatus
  struct WebExceptionStatus;
  // Forward declaring type: SimpleAsyncCallback
  class SimpleAsyncCallback;
  // Forward declaring type: WebConnectionData
  class WebConnectionData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsProvider
  class MonoTlsProvider;
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HttpWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest*, "System.Net", "HttpWebRequest");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x1C0
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpWebRequest : public ::System::Net::WebRequest {
    public:
    // Nested type: ::System::Net::HttpWebRequest::NtlmAuthState
    struct NtlmAuthState;
    // Nested type: ::System::Net::HttpWebRequest::AuthorizationState
    struct AuthorizationState;
    // Nested type: ::System::Net::HttpWebRequest::$$c__DisplayClass238_0
    class $$c__DisplayClass238_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.HttpWebRequest/System.Net.NtlmAuthState
    // [TokenAttribute] Offset: FFFFFFFF
    struct NtlmAuthState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NtlmAuthState
      constexpr NtlmAuthState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_None();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState None
      static void _set_None(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static constexpr const int Challenge = 1;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Challenge();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Challenge
      static void _set_Challenge(::System::Net::HttpWebRequest::NtlmAuthState value);
      // static field const value: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static constexpr const int Response = 2;
      // Get static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static ::System::Net::HttpWebRequest::NtlmAuthState _get_Response();
      // Set static field: static public System.Net.HttpWebRequest/System.Net.NtlmAuthState Response
      static void _set_Response(::System::Net::HttpWebRequest::NtlmAuthState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.HttpWebRequest/System.Net.NtlmAuthState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::NtlmAuthState), 0 + sizeof(int)> __System_Net_HttpWebRequest_NtlmAuthStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::NtlmAuthState) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Net.HttpWebRequest/System.Net.AuthorizationState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AuthorizationState/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly System.Net.HttpWebRequest request
      // Size: 0x8
      // Offset: 0x0
      ::System::Net::HttpWebRequest* request;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
      // private readonly System.Boolean isProxy
      // Size: 0x1
      // Offset: 0x8
      bool isProxy;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // private System.Boolean isCompleted
      // Size: 0x1
      // Offset: 0x9
      bool isCompleted;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isCompleted and: ntlm_auth_state
      char __padding2[0x2] = {};
      // private System.Net.HttpWebRequest/System.Net.NtlmAuthState ntlm_auth_state
      // Size: 0x4
      // Offset: 0xC
      ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state;
      // Field size check
      static_assert(sizeof(::System::Net::HttpWebRequest::NtlmAuthState) == 0x4);
      public:
      // Creating value type constructor for type: AuthorizationState
      constexpr AuthorizationState(::System::Net::HttpWebRequest* request_ = {}, bool isProxy_ = {}, bool isCompleted_ = {}, ::System::Net::HttpWebRequest::NtlmAuthState ntlm_auth_state_ = {}) noexcept : request{request_}, isProxy{isProxy_}, isCompleted{isCompleted_}, ntlm_auth_state{ntlm_auth_state_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly System.Net.HttpWebRequest request
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_request();
      // Get instance field reference: private readonly System.Boolean isProxy
      [[deprecated("Use field access instead!")]] bool& dyn_isProxy();
      // Get instance field reference: private System.Boolean isCompleted
      [[deprecated("Use field access instead!")]] bool& dyn_isCompleted();
      // Get instance field reference: private System.Net.HttpWebRequest/System.Net.NtlmAuthState ntlm_auth_state
      [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::NtlmAuthState& dyn_ntlm_auth_state();
      // public System.Boolean get_IsCompleted()
      // Offset: 0x1AB5628
      bool get_IsCompleted();
      // public System.Net.HttpWebRequest/System.Net.NtlmAuthState get_NtlmAuthState()
      // Offset: 0x1AB5630
      ::System::Net::HttpWebRequest::NtlmAuthState get_NtlmAuthState();
      // public System.Boolean get_IsNtlmAuthenticated()
      // Offset: 0x1AB4E24
      bool get_IsNtlmAuthenticated();
      // public System.Void .ctor(System.Net.HttpWebRequest request, System.Boolean isProxy)
      // Offset: 0x1AB0320
      AuthorizationState(::System::Net::HttpWebRequest* request, bool isProxy);
      // public System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
      // Offset: 0x1AB4E5C
      bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
      // public System.Void Reset()
      // Offset: 0x1AB5160
      void Reset();
      // public override System.String ToString()
      // Offset: 0x1AB5638
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // System.Net.HttpWebRequest/System.Net.AuthorizationState
    #pragma pack(pop)
    static check_size<sizeof(HttpWebRequest::AuthorizationState), 12 + sizeof(::System::Net::HttpWebRequest::NtlmAuthState)> __System_Net_HttpWebRequest_AuthorizationStateSizeCheck;
    static_assert(sizeof(HttpWebRequest::AuthorizationState) == 0x10);
    public:
    // private System.Uri requestUri
    // Size: 0x8
    // Offset: 0x38
    ::System::Uri* requestUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Uri actualUri
    // Size: 0x8
    // Offset: 0x40
    ::System::Uri* actualUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // private System.Boolean hostChanged
    // Size: 0x1
    // Offset: 0x48
    bool hostChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowAutoRedirect
    // Size: 0x1
    // Offset: 0x49
    bool allowAutoRedirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allowBuffering
    // Size: 0x1
    // Offset: 0x4A
    bool allowBuffering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowBuffering and: certificates
    char __padding4[0x5] = {};
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    // Size: 0x8
    // Offset: 0x50
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.String connectionGroup
    // Size: 0x8
    // Offset: 0x58
    ::StringW connectionGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean haveContentLength
    // Size: 0x1
    // Offset: 0x60
    bool haveContentLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: haveContentLength and: contentLength
    char __padding7[0x7] = {};
    // private System.Int64 contentLength
    // Size: 0x8
    // Offset: 0x68
    int64_t contentLength;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Net.HttpContinueDelegate continueDelegate
    // Size: 0x8
    // Offset: 0x70
    ::System::Net::HttpContinueDelegate* continueDelegate;
    // Field size check
    static_assert(sizeof(::System::Net::HttpContinueDelegate*) == 0x8);
    // private System.Net.CookieContainer cookieContainer
    // Size: 0x8
    // Offset: 0x78
    ::System::Net::CookieContainer* cookieContainer;
    // Field size check
    static_assert(sizeof(::System::Net::CookieContainer*) == 0x8);
    // private System.Net.ICredentials credentials
    // Size: 0x8
    // Offset: 0x80
    ::System::Net::ICredentials* credentials;
    // Field size check
    static_assert(sizeof(::System::Net::ICredentials*) == 0x8);
    // private System.Boolean haveResponse
    // Size: 0x1
    // Offset: 0x88
    bool haveResponse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean haveRequest
    // Size: 0x1
    // Offset: 0x89
    bool haveRequest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean requestSent
    // Size: 0x1
    // Offset: 0x8A
    bool requestSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requestSent and: webHeaders
    char __padding14[0x5] = {};
    // private System.Net.WebHeaderCollection webHeaders
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::WebHeaderCollection* webHeaders;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0x98
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: maxAutoRedirect
    char __padding16[0x3] = {};
    // private System.Int32 maxAutoRedirect
    // Size: 0x4
    // Offset: 0x9C
    int maxAutoRedirect;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String mediaType
    // Size: 0x8
    // Offset: 0xA0
    ::StringW mediaType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String method
    // Size: 0x8
    // Offset: 0xA8
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String initialMethod
    // Size: 0x8
    // Offset: 0xB0
    ::StringW initialMethod;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean pipelined
    // Size: 0x1
    // Offset: 0xB8
    bool pipelined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean preAuthenticate
    // Size: 0x1
    // Offset: 0xB9
    bool preAuthenticate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usedPreAuth
    // Size: 0x1
    // Offset: 0xBA
    bool usedPreAuth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usedPreAuth and: version
    char __padding23[0x5] = {};
    // private System.Version version
    // Size: 0x8
    // Offset: 0xC0
    ::System::Version* version;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Boolean force_version
    // Size: 0x1
    // Offset: 0xC8
    bool force_version;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: force_version and: actualVersion
    char __padding25[0x7] = {};
    // private System.Version actualVersion
    // Size: 0x8
    // Offset: 0xD0
    ::System::Version* actualVersion;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0xD8
    ::System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(::System::Net::IWebProxy*) == 0x8);
    // private System.Boolean sendChunked
    // Size: 0x1
    // Offset: 0xE0
    bool sendChunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendChunked and: servicePoint
    char __padding28[0x7] = {};
    // private System.Net.ServicePoint servicePoint
    // Size: 0x8
    // Offset: 0xE8
    ::System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(::System::Net::ServicePoint*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0xF0
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: timeout and: writeStream
    char __padding30[0x4] = {};
    // private System.Net.WebConnectionStream writeStream
    // Size: 0x8
    // Offset: 0xF8
    ::System::Net::WebConnectionStream* writeStream;
    // Field size check
    static_assert(sizeof(::System::Net::WebConnectionStream*) == 0x8);
    // private System.Net.HttpWebResponse webResponse
    // Size: 0x8
    // Offset: 0x100
    ::System::Net::HttpWebResponse* webResponse;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebResponse*) == 0x8);
    // private System.Net.WebAsyncResult asyncWrite
    // Size: 0x8
    // Offset: 0x108
    ::System::Net::WebAsyncResult* asyncWrite;
    // Field size check
    static_assert(sizeof(::System::Net::WebAsyncResult*) == 0x8);
    // private System.Net.WebAsyncResult asyncRead
    // Size: 0x8
    // Offset: 0x110
    ::System::Net::WebAsyncResult* asyncRead;
    // Field size check
    static_assert(sizeof(::System::Net::WebAsyncResult*) == 0x8);
    // private System.EventHandler abortHandler
    // Size: 0x8
    // Offset: 0x118
    ::System::EventHandler* abortHandler;
    // Field size check
    static_assert(sizeof(::System::EventHandler*) == 0x8);
    // private System.Int32 aborted
    // Size: 0x4
    // Offset: 0x120
    int aborted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean gotRequestStream
    // Size: 0x1
    // Offset: 0x124
    bool gotRequestStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gotRequestStream and: redirects
    char __padding37[0x3] = {};
    // private System.Int32 redirects
    // Size: 0x4
    // Offset: 0x128
    int redirects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean expectContinue
    // Size: 0x1
    // Offset: 0x12C
    bool expectContinue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: expectContinue and: bodyBuffer
    char __padding39[0x3] = {};
    // private System.Byte[] bodyBuffer
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<uint8_t> bodyBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 bodyBufferLength
    // Size: 0x4
    // Offset: 0x138
    int bodyBufferLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean getResponseCalled
    // Size: 0x1
    // Offset: 0x13C
    bool getResponseCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: getResponseCalled and: saved_exc
    char __padding42[0x3] = {};
    // private System.Exception saved_exc
    // Size: 0x8
    // Offset: 0x140
    ::System::Exception* saved_exc;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x148
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean finished_reading
    // Size: 0x1
    // Offset: 0x150
    bool finished_reading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: finished_reading and: WebConnection
    char __padding45[0x7] = {};
    // System.Net.WebConnection WebConnection
    // Size: 0x8
    // Offset: 0x158
    ::System::Net::WebConnection* WebConnection;
    // Field size check
    static_assert(sizeof(::System::Net::WebConnection*) == 0x8);
    // private System.Net.DecompressionMethods auto_decomp
    // Size: 0x4
    // Offset: 0x160
    ::System::Net::DecompressionMethods auto_decomp;
    // Field size check
    static_assert(sizeof(::System::Net::DecompressionMethods) == 0x4);
    // private System.Int32 readWriteTimeout
    // Size: 0x4
    // Offset: 0x164
    int readWriteTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Mono.Security.Interface.MonoTlsProvider tlsProvider
    // Size: 0x8
    // Offset: 0x168
    ::Mono::Security::Interface::MonoTlsProvider* tlsProvider;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsProvider*) == 0x8);
    // private Mono.Security.Interface.MonoTlsSettings tlsSettings
    // Size: 0x8
    // Offset: 0x170
    ::Mono::Security::Interface::MonoTlsSettings* tlsSettings;
    // Field size check
    static_assert(sizeof(::Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    // private System.Net.ServerCertValidationCallback certValidationCallback
    // Size: 0x8
    // Offset: 0x178
    ::System::Net::ServerCertValidationCallback* certValidationCallback;
    // Field size check
    static_assert(sizeof(::System::Net::ServerCertValidationCallback*) == 0x8);
    // private System.Net.HttpWebRequest/System.Net.AuthorizationState auth_state
    // Size: 0x10
    // Offset: 0x180
    ::System::Net::HttpWebRequest::AuthorizationState auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // private System.Net.HttpWebRequest/System.Net.AuthorizationState proxy_auth_state
    // Size: 0x10
    // Offset: 0x190
    ::System::Net::HttpWebRequest::AuthorizationState proxy_auth_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest::AuthorizationState) == 0x10);
    // private System.String host
    // Size: 0x8
    // Offset: 0x1A0
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Action`1<System.IO.Stream> ResendContentFactory
    // Size: 0x8
    // Offset: 0x1A8
    ::System::Action_1<::System::IO::Stream*>* ResendContentFactory;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::IO::Stream*>*) == 0x8);
    // private System.Boolean <ThrowOnError>k__BackingField
    // Size: 0x1
    // Offset: 0x1B0
    bool ThrowOnError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean unsafe_auth_blah
    // Size: 0x1
    // Offset: 0x1B1
    bool unsafe_auth_blah;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReuseConnection>k__BackingField
    // Size: 0x1
    // Offset: 0x1B2
    bool ReuseConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ReuseConnection and: StoredConnection
    char __padding58[0x5] = {};
    // System.Net.WebConnection StoredConnection
    // Size: 0x8
    // Offset: 0x1B8
    ::System::Net::WebConnection* StoredConnection;
    // Field size check
    static_assert(sizeof(::System::Net::WebConnection*) == 0x8);
    public:
    // Get static field: static private System.Int32 defaultMaxResponseHeadersLength
    static int _get_defaultMaxResponseHeadersLength();
    // Set static field: static private System.Int32 defaultMaxResponseHeadersLength
    static void _set_defaultMaxResponseHeadersLength(int value);
    // Get instance field reference: private System.Uri requestUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_requestUri();
    // Get instance field reference: private System.Uri actualUri
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_actualUri();
    // Get instance field reference: private System.Boolean hostChanged
    [[deprecated("Use field access instead!")]] bool& dyn_hostChanged();
    // Get instance field reference: private System.Boolean allowAutoRedirect
    [[deprecated("Use field access instead!")]] bool& dyn_allowAutoRedirect();
    // Get instance field reference: private System.Boolean allowBuffering
    [[deprecated("Use field access instead!")]] bool& dyn_allowBuffering();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn_certificates();
    // Get instance field reference: private System.String connectionGroup
    [[deprecated("Use field access instead!")]] ::StringW& dyn_connectionGroup();
    // Get instance field reference: private System.Boolean haveContentLength
    [[deprecated("Use field access instead!")]] bool& dyn_haveContentLength();
    // Get instance field reference: private System.Int64 contentLength
    [[deprecated("Use field access instead!")]] int64_t& dyn_contentLength();
    // Get instance field reference: private System.Net.HttpContinueDelegate continueDelegate
    [[deprecated("Use field access instead!")]] ::System::Net::HttpContinueDelegate*& dyn_continueDelegate();
    // Get instance field reference: private System.Net.CookieContainer cookieContainer
    [[deprecated("Use field access instead!")]] ::System::Net::CookieContainer*& dyn_cookieContainer();
    // Get instance field reference: private System.Net.ICredentials credentials
    [[deprecated("Use field access instead!")]] ::System::Net::ICredentials*& dyn_credentials();
    // Get instance field reference: private System.Boolean haveResponse
    [[deprecated("Use field access instead!")]] bool& dyn_haveResponse();
    // Get instance field reference: private System.Boolean haveRequest
    [[deprecated("Use field access instead!")]] bool& dyn_haveRequest();
    // Get instance field reference: private System.Boolean requestSent
    [[deprecated("Use field access instead!")]] bool& dyn_requestSent();
    // Get instance field reference: private System.Net.WebHeaderCollection webHeaders
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn_webHeaders();
    // Get instance field reference: private System.Boolean keepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_keepAlive();
    // Get instance field reference: private System.Int32 maxAutoRedirect
    [[deprecated("Use field access instead!")]] int& dyn_maxAutoRedirect();
    // Get instance field reference: private System.String mediaType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mediaType();
    // Get instance field reference: private System.String method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_method();
    // Get instance field reference: private System.String initialMethod
    [[deprecated("Use field access instead!")]] ::StringW& dyn_initialMethod();
    // Get instance field reference: private System.Boolean pipelined
    [[deprecated("Use field access instead!")]] bool& dyn_pipelined();
    // Get instance field reference: private System.Boolean preAuthenticate
    [[deprecated("Use field access instead!")]] bool& dyn_preAuthenticate();
    // Get instance field reference: private System.Boolean usedPreAuth
    [[deprecated("Use field access instead!")]] bool& dyn_usedPreAuth();
    // Get instance field reference: private System.Version version
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_version();
    // Get instance field reference: private System.Boolean force_version
    [[deprecated("Use field access instead!")]] bool& dyn_force_version();
    // Get instance field reference: private System.Version actualVersion
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_actualVersion();
    // Get instance field reference: private System.Net.IWebProxy proxy
    [[deprecated("Use field access instead!")]] ::System::Net::IWebProxy*& dyn_proxy();
    // Get instance field reference: private System.Boolean sendChunked
    [[deprecated("Use field access instead!")]] bool& dyn_sendChunked();
    // Get instance field reference: private System.Net.ServicePoint servicePoint
    [[deprecated("Use field access instead!")]] ::System::Net::ServicePoint*& dyn_servicePoint();
    // Get instance field reference: private System.Int32 timeout
    [[deprecated("Use field access instead!")]] int& dyn_timeout();
    // Get instance field reference: private System.Net.WebConnectionStream writeStream
    [[deprecated("Use field access instead!")]] ::System::Net::WebConnectionStream*& dyn_writeStream();
    // Get instance field reference: private System.Net.HttpWebResponse webResponse
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebResponse*& dyn_webResponse();
    // Get instance field reference: private System.Net.WebAsyncResult asyncWrite
    [[deprecated("Use field access instead!")]] ::System::Net::WebAsyncResult*& dyn_asyncWrite();
    // Get instance field reference: private System.Net.WebAsyncResult asyncRead
    [[deprecated("Use field access instead!")]] ::System::Net::WebAsyncResult*& dyn_asyncRead();
    // Get instance field reference: private System.EventHandler abortHandler
    [[deprecated("Use field access instead!")]] ::System::EventHandler*& dyn_abortHandler();
    // Get instance field reference: private System.Int32 aborted
    [[deprecated("Use field access instead!")]] int& dyn_aborted();
    // Get instance field reference: private System.Boolean gotRequestStream
    [[deprecated("Use field access instead!")]] bool& dyn_gotRequestStream();
    // Get instance field reference: private System.Int32 redirects
    [[deprecated("Use field access instead!")]] int& dyn_redirects();
    // Get instance field reference: private System.Boolean expectContinue
    [[deprecated("Use field access instead!")]] bool& dyn_expectContinue();
    // Get instance field reference: private System.Byte[] bodyBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_bodyBuffer();
    // Get instance field reference: private System.Int32 bodyBufferLength
    [[deprecated("Use field access instead!")]] int& dyn_bodyBufferLength();
    // Get instance field reference: private System.Boolean getResponseCalled
    [[deprecated("Use field access instead!")]] bool& dyn_getResponseCalled();
    // Get instance field reference: private System.Exception saved_exc
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_saved_exc();
    // Get instance field reference: private System.Object locker
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_locker();
    // Get instance field reference: private System.Boolean finished_reading
    [[deprecated("Use field access instead!")]] bool& dyn_finished_reading();
    // Get instance field reference: System.Net.WebConnection WebConnection
    [[deprecated("Use field access instead!")]] ::System::Net::WebConnection*& dyn_WebConnection();
    // Get instance field reference: private System.Net.DecompressionMethods auto_decomp
    [[deprecated("Use field access instead!")]] ::System::Net::DecompressionMethods& dyn_auto_decomp();
    // Get instance field reference: private System.Int32 readWriteTimeout
    [[deprecated("Use field access instead!")]] int& dyn_readWriteTimeout();
    // Get instance field reference: private Mono.Security.Interface.MonoTlsProvider tlsProvider
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsProvider*& dyn_tlsProvider();
    // Get instance field reference: private Mono.Security.Interface.MonoTlsSettings tlsSettings
    [[deprecated("Use field access instead!")]] ::Mono::Security::Interface::MonoTlsSettings*& dyn_tlsSettings();
    // Get instance field reference: private System.Net.ServerCertValidationCallback certValidationCallback
    [[deprecated("Use field access instead!")]] ::System::Net::ServerCertValidationCallback*& dyn_certValidationCallback();
    // Get instance field reference: private System.Net.HttpWebRequest/System.Net.AuthorizationState auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_auth_state();
    // Get instance field reference: private System.Net.HttpWebRequest/System.Net.AuthorizationState proxy_auth_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest::AuthorizationState& dyn_proxy_auth_state();
    // Get instance field reference: private System.String host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_host();
    // Get instance field reference: System.Action`1<System.IO.Stream> ResendContentFactory
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::IO::Stream*>*& dyn_ResendContentFactory();
    // Get instance field reference: private System.Boolean <ThrowOnError>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ThrowOnError$k__BackingField();
    // Get instance field reference: private System.Boolean unsafe_auth_blah
    [[deprecated("Use field access instead!")]] bool& dyn_unsafe_auth_blah();
    // Get instance field reference: private System.Boolean <ReuseConnection>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReuseConnection$k__BackingField();
    // Get instance field reference: System.Net.WebConnection StoredConnection
    [[deprecated("Use field access instead!")]] ::System::Net::WebConnection*& dyn_StoredConnection();
    // public System.Uri get_Address()
    // Offset: 0x1AB0338
    ::System::Uri* get_Address();
    // System.Void set_Address(System.Uri value)
    // Offset: 0x1AB0340
    void set_Address(::System::Uri* value);
    // public System.Void set_AllowAutoRedirect(System.Boolean value)
    // Offset: 0x1AB0348
    void set_AllowAutoRedirect(bool value);
    // public System.Boolean get_AllowWriteStreamBuffering()
    // Offset: 0x1AB0354
    bool get_AllowWriteStreamBuffering();
    // public System.Void set_AllowWriteStreamBuffering(System.Boolean value)
    // Offset: 0x1AB035C
    void set_AllowWriteStreamBuffering(bool value);
    // public System.Net.DecompressionMethods get_AutomaticDecompression()
    // Offset: 0x1AB0368
    ::System::Net::DecompressionMethods get_AutomaticDecompression();
    // public System.Void set_AutomaticDecompression(System.Net.DecompressionMethods value)
    // Offset: 0x1AB0370
    void set_AutomaticDecompression(::System::Net::DecompressionMethods value);
    // System.Boolean get_InternalAllowBuffering()
    // Offset: 0x1AB041C
    bool get_InternalAllowBuffering();
    // private System.Boolean get_MethodWithBuffer()
    // Offset: 0x1AB0430
    bool get_MethodWithBuffer();
    // Mono.Security.Interface.MonoTlsProvider get_TlsProvider()
    // Offset: 0x1AB0504
    ::Mono::Security::Interface::MonoTlsProvider* get_TlsProvider();
    // Mono.Security.Interface.MonoTlsSettings get_TlsSettings()
    // Offset: 0x1AB050C
    ::Mono::Security::Interface::MonoTlsSettings* get_TlsSettings();
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x1AB0514
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // System.Void set_InternalContentLength(System.Int64 value)
    // Offset: 0x1AB063C
    void set_InternalContentLength(int64_t value);
    // System.Boolean get_ThrowOnError()
    // Offset: 0x1AB0644
    bool get_ThrowOnError();
    // System.Void set_ThrowOnError(System.Boolean value)
    // Offset: 0x1AB064C
    void set_ThrowOnError(bool value);
    // public System.Void set_CookieContainer(System.Net.CookieContainer value)
    // Offset: 0x1AB0658
    void set_CookieContainer(::System::Net::CookieContainer* value);
    // public System.String get_Host()
    // Offset: 0x1AB0678
    ::StringW get_Host();
    // public System.Void set_Host(System.String value)
    // Offset: 0x1AB06A4
    void set_Host(::StringW value);
    // public System.Boolean get_KeepAlive()
    // Offset: 0x1AB0994
    bool get_KeepAlive();
    // public System.Void set_KeepAlive(System.Boolean value)
    // Offset: 0x1AB099C
    void set_KeepAlive(bool value);
    // public System.Void set_MaximumAutomaticRedirections(System.Int32 value)
    // Offset: 0x1AB09A8
    void set_MaximumAutomaticRedirections(int value);
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0x1AB0A48
    int get_ReadWriteTimeout();
    // public System.Version get_ProtocolVersion()
    // Offset: 0x1AB0C04
    ::System::Version* get_ProtocolVersion();
    // public System.Void set_ProtocolVersion(System.Version value)
    // Offset: 0x1AB0C0C
    void set_ProtocolVersion(::System::Version* value);
    // public System.Boolean get_SendChunked()
    // Offset: 0x1AB0EB0
    bool get_SendChunked();
    // public System.Void set_SendChunked(System.Boolean value)
    // Offset: 0x1AB0EB8
    void set_SendChunked(bool value);
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x1AB0EE4
    ::System::Net::ServicePoint* get_ServicePoint();
    // System.Net.ServicePoint get_ServicePointNoLock()
    // Offset: 0x1AB0EE8
    ::System::Net::ServicePoint* get_ServicePointNoLock();
    // public System.String get_TransferEncoding()
    // Offset: 0x1AB0EF8
    ::StringW get_TransferEncoding();
    // public System.Boolean get_UnsafeAuthenticatedConnectionSharing()
    // Offset: 0x1AB1070
    bool get_UnsafeAuthenticatedConnectionSharing();
    // System.Boolean get_ExpectContinue()
    // Offset: 0x1AB1078
    bool get_ExpectContinue();
    // System.Void set_ExpectContinue(System.Boolean value)
    // Offset: 0x1AB1080
    void set_ExpectContinue(bool value);
    // System.Uri get_AuthUri()
    // Offset: 0x1AB108C
    ::System::Uri* get_AuthUri();
    // System.Boolean get_ProxyQuery()
    // Offset: 0x1AB1094
    bool get_ProxyQuery();
    // System.Net.ServerCertValidationCallback get_ServerCertValidationCallback()
    // Offset: 0x1AB10C8
    ::System::Net::ServerCertValidationCallback* get_ServerCertValidationCallback();
    // System.Boolean get_FinishedReading()
    // Offset: 0x1AB1BBC
    bool get_FinishedReading();
    // System.Void set_FinishedReading(System.Boolean value)
    // Offset: 0x1AB1BC4
    void set_FinishedReading(bool value);
    // System.Boolean get_Aborted()
    // Offset: 0x1AB14C0
    bool get_Aborted();
    // System.Boolean get_ReuseConnection()
    // Offset: 0x1AB51E0
    bool get_ReuseConnection();
    // System.Void set_ReuseConnection(System.Boolean value)
    // Offset: 0x1AB51E8
    void set_ReuseConnection(bool value);
    // public System.Void .ctor(System.Uri uri)
    // Offset: 0x1AAF874
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(uri)));
    }
    // private System.Void ResetAuthorization()
    // Offset: 0x1AAFDBC
    void ResetAuthorization();
    // static private System.Boolean CheckValidHost(System.String scheme, System.String val)
    // Offset: 0x1AB07D4
    static bool CheckValidHost(::StringW scheme, ::StringW val);
    // System.Net.ServicePoint GetServicePoint()
    // Offset: 0x1AB0D98
    ::System::Net::ServicePoint* GetServicePoint();
    // private System.Boolean CheckIfForceWrite(System.Net.SimpleAsyncResult result)
    // Offset: 0x1AB1604
    bool CheckIfForceWrite(::System::Net::SimpleAsyncResult* result);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1AB1FD4
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // private System.Void CheckRequestStarted()
    // Offset: 0x1AB0398
    void CheckRequestStarted();
    // System.Void DoContinueDelegate(System.Int32 statusCode, System.Net.WebHeaderCollection headers)
    // Offset: 0x1AB232C
    void DoContinueDelegate(int statusCode, ::System::Net::WebHeaderCollection* headers);
    // private System.Void RewriteRedirectToGet()
    // Offset: 0x1AB233C
    void RewriteRedirectToGet();
    // private System.Boolean Redirect(System.Net.WebAsyncResult result, System.Net.HttpStatusCode code, System.Net.WebResponse response)
    // Offset: 0x1AB23B0
    bool Redirect(::System::Net::WebAsyncResult* result, ::System::Net::HttpStatusCode code, ::System::Net::WebResponse* response);
    // private System.String GetHeaders()
    // Offset: 0x1AB27F4
    ::StringW GetHeaders();
    // private System.Void DoPreAuthenticate()
    // Offset: 0x1AB2E24
    void DoPreAuthenticate();
    // System.Void SetWriteStreamError(System.Net.WebExceptionStatus status, System.Exception exc)
    // Offset: 0x1AB3028
    void SetWriteStreamError(::System::Net::WebExceptionStatus status, ::System::Exception* exc);
    // System.Byte[] GetRequestHeaders()
    // Offset: 0x1AB31E8
    ::ArrayW<uint8_t> GetRequestHeaders();
    // System.Void SetWriteStream(System.Net.WebConnectionStream stream)
    // Offset: 0x1AB3534
    void SetWriteStream(::System::Net::WebConnectionStream* stream);
    // private System.Void SetWriteStreamInner(System.Net.SimpleAsyncCallback callback)
    // Offset: 0x1AB3630
    void SetWriteStreamInner(::System::Net::SimpleAsyncCallback* callback);
    // private System.Void SetWriteStreamError(System.Exception exc)
    // Offset: 0x1AB36BC
    void SetWriteStreamError(::System::Exception* exc);
    // System.Void SetResponseError(System.Net.WebExceptionStatus status, System.Exception e, System.String where)
    // Offset: 0x1AB3754
    void SetResponseError(::System::Net::WebExceptionStatus status, ::System::Exception* e, ::StringW where);
    // private System.Void CheckSendError(System.Net.WebConnectionData data)
    // Offset: 0x1AB3958
    void CheckSendError(::System::Net::WebConnectionData* data);
    // private System.Boolean HandleNtlmAuth(System.Net.WebAsyncResult r)
    // Offset: 0x1AB3B68
    bool HandleNtlmAuth(::System::Net::WebAsyncResult* r);
    // System.Void SetResponseData(System.Net.WebConnectionData data)
    // Offset: 0x1AB3D9C
    void SetResponseData(::System::Net::WebConnectionData* data);
    // private System.Boolean CheckAuthorization(System.Net.WebResponse response, System.Net.HttpStatusCode code)
    // Offset: 0x1AB4E44
    bool CheckAuthorization(::System::Net::WebResponse* response, ::System::Net::HttpStatusCode code);
    // private System.Boolean CheckFinalStatus(System.Net.WebAsyncResult result)
    // Offset: 0x1AB47D0
    bool CheckFinalStatus(::System::Net::WebAsyncResult* result);
    // private System.Void <SetWriteStream>b__258_0(System.Net.SimpleAsyncResult result)
    // Offset: 0x1AB51F4
    void $SetWriteStream$b__258_0(::System::Net::SimpleAsyncResult* result);
    // private System.Void <SetWriteStream>b__258_1(System.Net.SimpleAsyncResult inner)
    // Offset: 0x1AB52AC
    void $SetWriteStream$b__258_1(::System::Net::SimpleAsyncResult* inner);
    // private System.Boolean <SetWriteStreamInner>b__259_0(System.Net.SimpleAsyncResult result)
    // Offset: 0x1AB5324
    bool $SetWriteStreamInner$b__259_0(::System::Net::SimpleAsyncResult* result);
    // public override System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x1AB0580
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ConnectionGroupName(System.String value)
    void set_ConnectionGroupName(::StringW value);
    // public override System.Int64 get_ContentLength()
    // Offset: 0x1AB0588
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x1AB0590
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0x1AB0660
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    ::System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x1AB0668
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(::System::Net::ICredentials* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x1AB0670
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    ::System::Net::WebHeaderCollection* get_Headers();
    // public override System.String get_Method()
    // Offset: 0x1AB0A50
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::StringW get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0x1AB0A58
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::StringW value);
    // public override System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x1AB0BF8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_PreAuthenticate(System.Boolean value)
    void set_PreAuthenticate(bool value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0x1AB0D60
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    ::System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x1AB0D68
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(::System::Net::IWebProxy* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0x1AB0EA8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    ::System::Uri* get_RequestUri();
    // public override System.Int32 get_Timeout()
    // Offset: 0x1AB0EF0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0x1AB0F54
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // public override System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x1AB0FDC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_UseDefaultCredentials(System.Boolean value)
    void set_UseDefaultCredentials(bool value);
    // static private System.Void .cctor()
    // Offset: 0x1AAFD68
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1AAFDCC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>(serializationInfo, streamingContext)));
    }
    // public System.Void .ctor()
    // Offset: 0x1AB53E8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpWebRequest*, creationType>()));
    }
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1AB10D0
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetRequestStream(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x1AB14EC
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    ::System::IO::Stream* EndGetRequestStream(::System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1AB1714
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    ::System::IAsyncResult* BeginGetResponse(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x1AB198C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    ::System::Net::WebResponse* EndGetResponse(::System::IAsyncResult* asyncResult);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0x1AB1B08
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    ::System::Net::WebResponse* GetResponse();
    // public override System.Void Abort()
    // Offset: 0x1AB1BD0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // protected override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1AB1FE0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
  }; // System.Net.HttpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(HttpWebRequest), 440 + sizeof(::System::Net::WebConnection*)> __System_Net_HttpWebRequestSizeCheck;
  static_assert(sizeof(HttpWebRequest) == 0x1C0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::AuthorizationState, "System.Net", "HttpWebRequest/AuthorizationState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpWebRequest::NtlmAuthState, "System.Net", "HttpWebRequest/NtlmAuthState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Address
// Il2CppName: set_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Uri*)>(&System::Net::HttpWebRequest::set_Address)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AllowAutoRedirect
// Il2CppName: set_AllowAutoRedirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_AllowAutoRedirect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AllowAutoRedirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AllowWriteStreamBuffering
// Il2CppName: get_AllowWriteStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AllowWriteStreamBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AllowWriteStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AllowWriteStreamBuffering
// Il2CppName: set_AllowWriteStreamBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_AllowWriteStreamBuffering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AllowWriteStreamBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AutomaticDecompression
// Il2CppName: get_AutomaticDecompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::DecompressionMethods (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AutomaticDecompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AutomaticDecompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_AutomaticDecompression
// Il2CppName: set_AutomaticDecompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::DecompressionMethods)>(&System::Net::HttpWebRequest::set_AutomaticDecompression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "DecompressionMethods")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_AutomaticDecompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_InternalAllowBuffering
// Il2CppName: get_InternalAllowBuffering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_InternalAllowBuffering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_InternalAllowBuffering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_MethodWithBuffer
// Il2CppName: get_MethodWithBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_MethodWithBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_MethodWithBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsProvider
// Il2CppName: get_TlsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::MonoTlsProvider* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TlsSettings
// Il2CppName: get_TlsSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Mono::Security::Interface::MonoTlsSettings* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TlsSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TlsSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_InternalContentLength
// Il2CppName: set_InternalContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_InternalContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_InternalContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ThrowOnError
// Il2CppName: get_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ThrowOnError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ThrowOnError
// Il2CppName: set_ThrowOnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ThrowOnError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ThrowOnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_CookieContainer
// Il2CppName: set_CookieContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::CookieContainer*)>(&System::Net::HttpWebRequest::set_CookieContainer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "CookieContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_CookieContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Host
// Il2CppName: set_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Host)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_KeepAlive
// Il2CppName: get_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_KeepAlive
// Il2CppName: set_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_KeepAlive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_MaximumAutomaticRedirections
// Il2CppName: set_MaximumAutomaticRedirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int)>(&System::Net::HttpWebRequest::set_MaximumAutomaticRedirections)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_MaximumAutomaticRedirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ReadWriteTimeout
// Il2CppName: get_ReadWriteTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ReadWriteTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ReadWriteTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProtocolVersion
// Il2CppName: get_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProtocolVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ProtocolVersion
// Il2CppName: set_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Version*)>(&System::Net::HttpWebRequest::set_ProtocolVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Version")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_SendChunked
// Il2CppName: get_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_SendChunked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_SendChunked
// Il2CppName: set_SendChunked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_SendChunked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_SendChunked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePoint
// Il2CppName: get_ServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServicePointNoLock
// Il2CppName: get_ServicePointNoLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServicePointNoLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServicePointNoLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_TransferEncoding
// Il2CppName: get_TransferEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_TransferEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_TransferEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing
// Il2CppName: get_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ExpectContinue
// Il2CppName: get_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ExpectContinue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ExpectContinue
// Il2CppName: set_ExpectContinue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ExpectContinue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ExpectContinue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_AuthUri
// Il2CppName: get_AuthUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_AuthUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_AuthUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ProxyQuery
// Il2CppName: get_ProxyQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ProxyQuery)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ProxyQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ServerCertValidationCallback
// Il2CppName: get_ServerCertValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServerCertValidationCallback* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ServerCertValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ServerCertValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_FinishedReading
// Il2CppName: get_FinishedReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_FinishedReading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_FinishedReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_FinishedReading
// Il2CppName: set_FinishedReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_FinishedReading)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_FinishedReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Aborted
// Il2CppName: get_Aborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Aborted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Aborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ReuseConnection
// Il2CppName: get_ReuseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ReuseConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ReuseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ReuseConnection
// Il2CppName: set_ReuseConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_ReuseConnection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ReuseConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::ResetAuthorization
// Il2CppName: ResetAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::ResetAuthorization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "ResetAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckValidHost
// Il2CppName: CheckValidHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&System::Net::HttpWebRequest::CheckValidHost)> {
  static const MethodInfo* get() {
    static auto* scheme = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckValidHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scheme, val});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetServicePoint
// Il2CppName: GetServicePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ServicePoint* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetServicePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetServicePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckIfForceWrite
// Il2CppName: CheckIfForceWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::SimpleAsyncResult*)>(&System::Net::HttpWebRequest::CheckIfForceWrite)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckIfForceWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckRequestStarted
// Il2CppName: CheckRequestStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::CheckRequestStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckRequestStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoContinueDelegate
// Il2CppName: DoContinueDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int, ::System::Net::WebHeaderCollection*)>(&System::Net::HttpWebRequest::DoContinueDelegate)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* headers = &::il2cpp_utils::GetClassFromName("System.Net", "WebHeaderCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoContinueDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode, headers});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::RewriteRedirectToGet
// Il2CppName: RewriteRedirectToGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::RewriteRedirectToGet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "RewriteRedirectToGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Redirect
// Il2CppName: Redirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebAsyncResult*, ::System::Net::HttpStatusCode, ::System::Net::WebResponse*)>(&System::Net::HttpWebRequest::Redirect)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "WebAsyncResult")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Redirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, code, response});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::DoPreAuthenticate
// Il2CppName: DoPreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::DoPreAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "DoPreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetWriteStreamError
// Il2CppName: SetWriteStreamError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebExceptionStatus, ::System::Exception*)>(&System::Net::HttpWebRequest::SetWriteStreamError)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.Net", "WebExceptionStatus")->byval_arg;
    static auto* exc = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetWriteStreamError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, exc});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetRequestHeaders
// Il2CppName: GetRequestHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetRequestHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetRequestHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetWriteStream
// Il2CppName: SetWriteStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebConnectionStream*)>(&System::Net::HttpWebRequest::SetWriteStream)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnectionStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetWriteStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetWriteStreamInner
// Il2CppName: SetWriteStreamInner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::SimpleAsyncCallback*)>(&System::Net::HttpWebRequest::SetWriteStreamInner)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetWriteStreamInner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetWriteStreamError
// Il2CppName: SetWriteStreamError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Exception*)>(&System::Net::HttpWebRequest::SetWriteStreamError)> {
  static const MethodInfo* get() {
    static auto* exc = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetWriteStreamError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exc});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetResponseError
// Il2CppName: SetResponseError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebExceptionStatus, ::System::Exception*, ::StringW)>(&System::Net::HttpWebRequest::SetResponseError)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System.Net", "WebExceptionStatus")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* where = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetResponseError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, e, where});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckSendError
// Il2CppName: CheckSendError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebConnectionData*)>(&System::Net::HttpWebRequest::CheckSendError)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnectionData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckSendError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::HandleNtlmAuth
// Il2CppName: HandleNtlmAuth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebAsyncResult*)>(&System::Net::HttpWebRequest::HandleNtlmAuth)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System.Net", "WebAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "HandleNtlmAuth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::SetResponseData
// Il2CppName: SetResponseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::WebConnectionData*)>(&System::Net::HttpWebRequest::SetResponseData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnectionData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "SetResponseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckAuthorization
// Il2CppName: CheckAuthorization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebResponse*, ::System::Net::HttpStatusCode)>(&System::Net::HttpWebRequest::CheckAuthorization)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckAuthorization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, code});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::CheckFinalStatus
// Il2CppName: CheckFinalStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::WebAsyncResult*)>(&System::Net::HttpWebRequest::CheckFinalStatus)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "WebAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "CheckFinalStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$SetWriteStream$b__258_0
// Il2CppName: <SetWriteStream>b__258_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::SimpleAsyncResult*)>(&System::Net::HttpWebRequest::$SetWriteStream$b__258_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "<SetWriteStream>b__258_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$SetWriteStream$b__258_1
// Il2CppName: <SetWriteStream>b__258_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::SimpleAsyncResult*)>(&System::Net::HttpWebRequest::$SetWriteStream$b__258_1)> {
  static const MethodInfo* get() {
    static auto* inner = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "<SetWriteStream>b__258_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inner});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::$SetWriteStreamInner$b__259_0
// Il2CppName: <SetWriteStreamInner>b__259_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)(::System::Net::SimpleAsyncResult*)>(&System::Net::HttpWebRequest::$SetWriteStreamInner$b__259_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Net", "SimpleAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "<SetWriteStreamInner>b__259_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ConnectionGroupName
// Il2CppName: set_ConnectionGroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_ConnectionGroupName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ConnectionGroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_ContentLength
// Il2CppName: get_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_ContentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_ContentLength
// Il2CppName: set_ContentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(int64_t)>(&System::Net::HttpWebRequest::set_ContentLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_ContentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ICredentials* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Credentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Credentials
// Il2CppName: set_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::ICredentials*)>(&System::Net::HttpWebRequest::set_Credentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ICredentials")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Method)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Method
// Il2CppName: set_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::StringW)>(&System::Net::HttpWebRequest::set_Method)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_PreAuthenticate
// Il2CppName: set_PreAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_PreAuthenticate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_PreAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IWebProxy* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_Proxy
// Il2CppName: set_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Net::IWebProxy*)>(&System::Net::HttpWebRequest::set_Proxy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IWebProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_RequestUri
// Il2CppName: get_RequestUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_RequestUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_RequestUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::get_UseDefaultCredentials
// Il2CppName: get_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::get_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::set_UseDefaultCredentials
// Il2CppName: set_UseDefaultCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(bool)>(&System::Net::HttpWebRequest::set_UseDefaultCredentials)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "set_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::HttpWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetRequestStream
// Il2CppName: BeginGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetRequestStream
// Il2CppName: EndGetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetRequestStream)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::BeginGetResponse
// Il2CppName: BeginGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::HttpWebRequest::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::HttpWebRequest::BeginGetResponse)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "BeginGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::EndGetResponse
// Il2CppName: EndGetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)(::System::IAsyncResult*)>(&System::Net::HttpWebRequest::EndGetResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "EndGetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebResponse* (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::GetResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)()>(&System::Net::HttpWebRequest::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpWebRequest::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpWebRequest::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Net::HttpWebRequest::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpWebRequest*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
