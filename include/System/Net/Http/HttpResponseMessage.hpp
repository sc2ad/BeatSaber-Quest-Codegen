// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Net.HttpStatusCode
#include "System/Net/HttpStatusCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: HttpResponseHeaders
  class HttpResponseHeaders;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
  // Forward declaring type: HttpContent
  class HttpContent;
  // Forward declaring type: HttpRequestMessage
  class HttpRequestMessage;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Forward declaring type: HttpResponseMessage
  class HttpResponseMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Http::HttpResponseMessage);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Http::HttpResponseMessage*, "System.Net.Http", "HttpResponseMessage");
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpResponseMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpResponseMessage : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Net.Http.Headers.HttpResponseHeaders headers
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Http::Headers::HttpResponseHeaders* headers;
    // Field size check
    static_assert(sizeof(::System::Net::Http::Headers::HttpResponseHeaders*) == 0x8);
    // private System.String reasonPhrase
    // Size: 0x8
    // Offset: 0x18
    ::StringW reasonPhrase;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Net.HttpStatusCode statusCode
    // Size: 0x4
    // Offset: 0x20
    ::System::Net::HttpStatusCode statusCode;
    // Field size check
    static_assert(sizeof(::System::Net::HttpStatusCode) == 0x4);
    // Padding between fields: statusCode and: version
    char __padding2[0x4] = {};
    // private System.Version version
    // Size: 0x8
    // Offset: 0x28
    ::System::Version* version;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x30
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: Content
    char __padding4[0x7] = {};
    // private System.Net.Http.HttpContent <Content>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::Http::HttpContent* Content;
    // Field size check
    static_assert(sizeof(::System::Net::Http::HttpContent*) == 0x8);
    // private System.Net.Http.HttpRequestMessage <RequestMessage>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::Http::HttpRequestMessage* RequestMessage;
    // Field size check
    static_assert(sizeof(::System::Net::Http::HttpRequestMessage*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Net.Http.Headers.HttpResponseHeaders headers
    [[deprecated("Use field access instead!")]] ::System::Net::Http::Headers::HttpResponseHeaders*& dyn_headers();
    // Get instance field reference: private System.String reasonPhrase
    [[deprecated("Use field access instead!")]] ::StringW& dyn_reasonPhrase();
    // Get instance field reference: private System.Net.HttpStatusCode statusCode
    [[deprecated("Use field access instead!")]] ::System::Net::HttpStatusCode& dyn_statusCode();
    // Get instance field reference: private System.Version version
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn_version();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Net.Http.HttpContent <Content>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Http::HttpContent*& dyn_$Content$k__BackingField();
    // Get instance field reference: private System.Net.Http.HttpRequestMessage <RequestMessage>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Http::HttpRequestMessage*& dyn_$RequestMessage$k__BackingField();
    // public System.Net.Http.HttpContent get_Content()
    // Offset: 0x19A5CA4
    ::System::Net::Http::HttpContent* get_Content();
    // public System.Void set_Content(System.Net.Http.HttpContent value)
    // Offset: 0x19A5CAC
    void set_Content(::System::Net::Http::HttpContent* value);
    // public System.Net.Http.Headers.HttpResponseHeaders get_Headers()
    // Offset: 0x19A30D0
    ::System::Net::Http::Headers::HttpResponseHeaders* get_Headers();
    // public System.Boolean get_IsSuccessStatusCode()
    // Offset: 0x19A5CB4
    bool get_IsSuccessStatusCode();
    // public System.String get_ReasonPhrase()
    // Offset: 0x19A5CC8
    ::StringW get_ReasonPhrase();
    // public System.Void set_ReasonPhrase(System.String value)
    // Offset: 0x19A5CE4
    void set_ReasonPhrase(::StringW value);
    // public System.Void set_RequestMessage(System.Net.Http.HttpRequestMessage value)
    // Offset: 0x19A5CEC
    void set_RequestMessage(::System::Net::Http::HttpRequestMessage* value);
    // public System.Net.HttpStatusCode get_StatusCode()
    // Offset: 0x19A5CF4
    ::System::Net::HttpStatusCode get_StatusCode();
    // public System.Void set_StatusCode(System.Net.HttpStatusCode value)
    // Offset: 0x19A5C20
    void set_StatusCode(::System::Net::HttpStatusCode value);
    // public System.Version get_Version()
    // Offset: 0x19A5CFC
    ::System::Version* get_Version();
    // public System.Void .ctor(System.Net.HttpStatusCode statusCode)
    // Offset: 0x19A3074
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpResponseMessage* New_ctor(::System::Net::HttpStatusCode statusCode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Http::HttpResponseMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpResponseMessage*, creationType>(statusCode)));
    }
    // public System.Void Dispose()
    // Offset: 0x19A5D70
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x19A5D80
    void Dispose(bool disposing);
    // public System.Net.Http.HttpResponseMessage EnsureSuccessStatusCode()
    // Offset: 0x19A1DCC
    ::System::Net::Http::HttpResponseMessage* EnsureSuccessStatusCode();
    // public override System.String ToString()
    // Offset: 0x19A5DB4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Net.Http.HttpResponseMessage
  #pragma pack(pop)
  static check_size<sizeof(HttpResponseMessage), 64 + sizeof(::System::Net::Http::HttpRequestMessage*)> __System_Net_Http_HttpResponseMessageSizeCheck;
  static_assert(sizeof(HttpResponseMessage) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_Content
// Il2CppName: get_Content
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Http::HttpContent* (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_Content)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_Content", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::set_Content
// Il2CppName: set_Content
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)(::System::Net::Http::HttpContent*)>(&System::Net::Http::HttpResponseMessage::set_Content)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpContent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "set_Content", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Http::Headers::HttpResponseHeaders* (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_IsSuccessStatusCode
// Il2CppName: get_IsSuccessStatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_IsSuccessStatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_IsSuccessStatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_ReasonPhrase
// Il2CppName: get_ReasonPhrase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_ReasonPhrase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_ReasonPhrase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::set_ReasonPhrase
// Il2CppName: set_ReasonPhrase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)(::StringW)>(&System::Net::Http::HttpResponseMessage::set_ReasonPhrase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "set_ReasonPhrase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::set_RequestMessage
// Il2CppName: set_RequestMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)(::System::Net::Http::HttpRequestMessage*)>(&System::Net::Http::HttpResponseMessage::set_RequestMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpRequestMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "set_RequestMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_StatusCode
// Il2CppName: get_StatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpStatusCode (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_StatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_StatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::set_StatusCode
// Il2CppName: set_StatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)(::System::Net::HttpStatusCode)>(&System::Net::Http::HttpResponseMessage::set_StatusCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "HttpStatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "set_StatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpResponseMessage::*)(bool)>(&System::Net::Http::HttpResponseMessage::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::EnsureSuccessStatusCode
// Il2CppName: EnsureSuccessStatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Http::HttpResponseMessage* (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::EnsureSuccessStatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "EnsureSuccessStatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpResponseMessage::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Http::HttpResponseMessage::*)()>(&System::Net::Http::HttpResponseMessage::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpResponseMessage*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
