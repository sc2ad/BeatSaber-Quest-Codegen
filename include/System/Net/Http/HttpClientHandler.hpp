// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Http.HttpMessageHandler
#include "System/Net/Http/HttpMessageHandler.hpp"
// Including type: System.Net.DecompressionMethods
#include "System/Net/DecompressionMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
  // Forward declaring type: HttpRequestMessage
  class HttpRequestMessage;
  // Forward declaring type: HttpResponseMessage
  class HttpResponseMessage;
  // Forward declaring type: HttpMethod
  class HttpMethod;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: CookieContainer
  class CookieContainer;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Forward declaring type: HttpClientHandler
  class HttpClientHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Http::HttpClientHandler);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Http::HttpClientHandler*, "System.Net.Http", "HttpClientHandler");
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpClientHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpClientHandler : public ::System::Net::Http::HttpMessageHandler {
    public:
    // Nested type: ::System::Net::Http::HttpClientHandler::$$c
    class $$c;
    // Nested type: ::System::Net::Http::HttpClientHandler::$SendAsync$d__64
    struct $SendAsync$d__64;
    public:
    // private System.Boolean allowAutoRedirect
    // Size: 0x1
    // Offset: 0x10
    bool allowAutoRedirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowAutoRedirect and: automaticDecompression
    char __padding0[0x3] = {};
    // private System.Net.DecompressionMethods automaticDecompression
    // Size: 0x4
    // Offset: 0x14
    ::System::Net::DecompressionMethods automaticDecompression;
    // Field size check
    static_assert(sizeof(::System::Net::DecompressionMethods) == 0x4);
    // private System.Net.CookieContainer cookieContainer
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::CookieContainer* cookieContainer;
    // Field size check
    static_assert(sizeof(::System::Net::CookieContainer*) == 0x8);
    // private System.Net.ICredentials credentials
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::ICredentials* credentials;
    // Field size check
    static_assert(sizeof(::System::Net::ICredentials*) == 0x8);
    // private System.Int32 maxAutomaticRedirections
    // Size: 0x4
    // Offset: 0x28
    int maxAutomaticRedirections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxAutomaticRedirections and: maxRequestContentBufferSize
    char __padding4[0x4] = {};
    // private System.Int64 maxRequestContentBufferSize
    // Size: 0x8
    // Offset: 0x30
    int64_t maxRequestContentBufferSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean preAuthenticate
    // Size: 0x1
    // Offset: 0x38
    bool preAuthenticate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: preAuthenticate and: proxy
    char __padding6[0x7] = {};
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(::System::Net::IWebProxy*) == 0x8);
    // private System.Boolean useCookies
    // Size: 0x1
    // Offset: 0x48
    bool useCookies;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useDefaultCredentials
    // Size: 0x1
    // Offset: 0x49
    bool useDefaultCredentials;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useProxy
    // Size: 0x1
    // Offset: 0x4A
    bool useProxy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean sentRequest
    // Size: 0x1
    // Offset: 0x4B
    bool sentRequest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sentRequest and: connectionGroupName
    char __padding11[0x4] = {};
    // private System.String connectionGroupName
    // Size: 0x8
    // Offset: 0x50
    ::StringW connectionGroupName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x58
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Int64 groupCounter
    static int64_t _get_groupCounter();
    // Set static field: static private System.Int64 groupCounter
    static void _set_groupCounter(int64_t value);
    // Get instance field reference: private System.Boolean allowAutoRedirect
    [[deprecated("Use field access instead!")]] bool& dyn_allowAutoRedirect();
    // Get instance field reference: private System.Net.DecompressionMethods automaticDecompression
    [[deprecated("Use field access instead!")]] ::System::Net::DecompressionMethods& dyn_automaticDecompression();
    // Get instance field reference: private System.Net.CookieContainer cookieContainer
    [[deprecated("Use field access instead!")]] ::System::Net::CookieContainer*& dyn_cookieContainer();
    // Get instance field reference: private System.Net.ICredentials credentials
    [[deprecated("Use field access instead!")]] ::System::Net::ICredentials*& dyn_credentials();
    // Get instance field reference: private System.Int32 maxAutomaticRedirections
    [[deprecated("Use field access instead!")]] int& dyn_maxAutomaticRedirections();
    // Get instance field reference: private System.Int64 maxRequestContentBufferSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_maxRequestContentBufferSize();
    // Get instance field reference: private System.Boolean preAuthenticate
    [[deprecated("Use field access instead!")]] bool& dyn_preAuthenticate();
    // Get instance field reference: private System.Net.IWebProxy proxy
    [[deprecated("Use field access instead!")]] ::System::Net::IWebProxy*& dyn_proxy();
    // Get instance field reference: private System.Boolean useCookies
    [[deprecated("Use field access instead!")]] bool& dyn_useCookies();
    // Get instance field reference: private System.Boolean useDefaultCredentials
    [[deprecated("Use field access instead!")]] bool& dyn_useDefaultCredentials();
    // Get instance field reference: private System.Boolean useProxy
    [[deprecated("Use field access instead!")]] bool& dyn_useProxy();
    // Get instance field reference: private System.Boolean sentRequest
    [[deprecated("Use field access instead!")]] bool& dyn_sentRequest();
    // Get instance field reference: private System.String connectionGroupName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_connectionGroupName();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // public System.Net.CookieContainer get_CookieContainer()
    // Offset: 0x19F1300
    ::System::Net::CookieContainer* get_CookieContainer();
    // public System.Int64 get_MaxRequestContentBufferSize()
    // Offset: 0x19F136C
    int64_t get_MaxRequestContentBufferSize();
    // System.Net.HttpWebRequest CreateWebRequest(System.Net.Http.HttpRequestMessage request)
    // Offset: 0x19F1418
    ::System::Net::HttpWebRequest* CreateWebRequest(::System::Net::Http::HttpRequestMessage* request);
    // private System.Net.Http.HttpResponseMessage CreateResponseMessage(System.Net.HttpWebResponse wr, System.Net.Http.HttpRequestMessage requestMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x19F1ADC
    ::System::Net::Http::HttpResponseMessage* CreateResponseMessage(::System::Net::HttpWebResponse* wr, ::System::Net::Http::HttpRequestMessage* requestMessage, ::System::Threading::CancellationToken cancellationToken);
    // static private System.Boolean MethodHasBody(System.Net.Http.HttpMethod method)
    // Offset: 0x19F1DC0
    static bool MethodHasBody(::System::Net::Http::HttpMethod* method);
    // public System.Void .ctor()
    // Offset: 0x19EF830
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Void HttpMessageHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpClientHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Http::HttpClientHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpClientHandler*, creationType>()));
    }
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x19F1374
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Void HttpMessageHandler::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected internal override System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x19F1EA4
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> HttpMessageHandler::SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task_1<::System::Net::Http::HttpResponseMessage*>* SendAsync(::System::Net::Http::HttpRequestMessage* request, ::System::Threading::CancellationToken cancellationToken);
  }; // System.Net.Http.HttpClientHandler
  #pragma pack(pop)
  static check_size<sizeof(HttpClientHandler), 88 + sizeof(bool)> __System_Net_Http_HttpClientHandlerSizeCheck;
  static_assert(sizeof(HttpClientHandler) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::get_CookieContainer
// Il2CppName: get_CookieContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CookieContainer* (System::Net::Http::HttpClientHandler::*)()>(&System::Net::Http::HttpClientHandler::get_CookieContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "get_CookieContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::get_MaxRequestContentBufferSize
// Il2CppName: get_MaxRequestContentBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Net::Http::HttpClientHandler::*)()>(&System::Net::Http::HttpClientHandler::get_MaxRequestContentBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "get_MaxRequestContentBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::CreateWebRequest
// Il2CppName: CreateWebRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::HttpWebRequest* (System::Net::Http::HttpClientHandler::*)(::System::Net::Http::HttpRequestMessage*)>(&System::Net::Http::HttpClientHandler::CreateWebRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpRequestMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "CreateWebRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::CreateResponseMessage
// Il2CppName: CreateResponseMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Http::HttpResponseMessage* (System::Net::Http::HttpClientHandler::*)(::System::Net::HttpWebResponse*, ::System::Net::Http::HttpRequestMessage*, ::System::Threading::CancellationToken)>(&System::Net::Http::HttpClientHandler::CreateResponseMessage)> {
  static const MethodInfo* get() {
    static auto* wr = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebResponse")->byval_arg;
    static auto* requestMessage = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpRequestMessage")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "CreateResponseMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wr, requestMessage, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::MethodHasBody
// Il2CppName: MethodHasBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::Http::HttpMethod*)>(&System::Net::Http::HttpClientHandler::MethodHasBody)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "MethodHasBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpClientHandler::*)(bool)>(&System::Net::Http::HttpClientHandler::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpClientHandler::SendAsync
// Il2CppName: SendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::Http::HttpResponseMessage*>* (System::Net::Http::HttpClientHandler::*)(::System::Net::Http::HttpRequestMessage*, ::System::Threading::CancellationToken)>(&System::Net::Http::HttpClientHandler::SendAsync)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net.Http", "HttpRequestMessage")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpClientHandler*), "SendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, cancellationToken});
  }
};
