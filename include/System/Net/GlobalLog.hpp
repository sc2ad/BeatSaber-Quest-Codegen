// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: BaseLoggingObject
  class BaseLoggingObject;
  // Forward declaring type: ThreadKinds
  struct ThreadKinds;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: GlobalLog
  class GlobalLog;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::GlobalLog);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::GlobalLog*, "System.Net", "GlobalLog");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.GlobalLog
  // [TokenAttribute] Offset: FFFFFFFF
  class GlobalLog : public ::Il2CppObject {
    public:
    // Get static field: static private System.Net.BaseLoggingObject Logobject
    static ::System::Net::BaseLoggingObject* _get_Logobject();
    // Set static field: static private System.Net.BaseLoggingObject Logobject
    static void _set_Logobject(::System::Net::BaseLoggingObject* value);
    // static System.Net.ThreadKinds get_CurrentThreadKind()
    // Offset: 0x107E1FC
    static ::System::Net::ThreadKinds get_CurrentThreadKind();
    // static private System.Void .cctor()
    // Offset: 0x107E49C
    static void _cctor();
    // static private System.Net.BaseLoggingObject LoggingInitialize()
    // Offset: 0x107E1A0
    static ::System::Net::BaseLoggingObject* LoggingInitialize();
    // static System.Void SetThreadSource(System.Net.ThreadKinds source)
    // Offset: 0x107E204
    static void SetThreadSource(::System::Net::ThreadKinds source);
    // static System.Void ThreadContract(System.Net.ThreadKinds kind, System.String errorMsg)
    // Offset: 0x107E208
    static void ThreadContract(::System::Net::ThreadKinds kind, ::StringW errorMsg);
    // static System.Void ThreadContract(System.Net.ThreadKinds kind, System.Net.ThreadKinds allowedSources, System.String errorMsg)
    // Offset: 0x107E20C
    static void ThreadContract(::System::Net::ThreadKinds kind, ::System::Net::ThreadKinds allowedSources, ::StringW errorMsg);
    // static public System.Void AddToArray(System.String msg)
    // Offset: 0x107E2C8
    static void AddToArray(::StringW msg);
    // static public System.Void Ignore(System.Object msg)
    // Offset: 0x107E2CC
    static void Ignore(::Il2CppObject* msg);
    // static public System.Void Print(System.String msg)
    // Offset: 0x107E2D0
    static void Print(::StringW msg);
    // static public System.Void PrintHex(System.String msg, System.Object value)
    // Offset: 0x107E2D4
    static void PrintHex(::StringW msg, ::Il2CppObject* value);
    // static public System.Void Enter(System.String func)
    // Offset: 0x107E2D8
    static void Enter(::StringW func);
    // static public System.Void Enter(System.String func, System.String parms)
    // Offset: 0x107E2DC
    static void Enter(::StringW func, ::StringW parms);
    // static public System.Void Assert(System.Boolean condition, System.String messageFormat, params System.Object[] data)
    // Offset: 0x107E2E0
    static void Assert_(bool condition, ::StringW messageFormat, ::ArrayW<::Il2CppObject*> data);
    // static public System.Void Assert(System.String message)
    // Offset: 0x107E38C
    static void Assert_(::StringW message);
    // static public System.Void Assert(System.String message, System.String detailMessage)
    // Offset: 0x107E390
    static void Assert_(::StringW message, ::StringW detailMessage);
    // static public System.Void LeaveException(System.String func, System.Exception exception)
    // Offset: 0x107E474
    static void LeaveException(::StringW func, ::System::Exception* exception);
    // static public System.Void Leave(System.String func)
    // Offset: 0x107E478
    static void Leave(::StringW func);
    // static public System.Void Leave(System.String func, System.String result)
    // Offset: 0x107E47C
    static void Leave(::StringW func, ::StringW result);
    // static public System.Void Leave(System.String func, System.Int32 returnval)
    // Offset: 0x107E480
    static void Leave(::StringW func, int returnval);
    // static public System.Void Leave(System.String func, System.Boolean returnval)
    // Offset: 0x107E484
    static void Leave(::StringW func, bool returnval);
    // static public System.Void DumpArray()
    // Offset: 0x107E488
    static void DumpArray();
    // static public System.Void Dump(System.Byte[] buffer)
    // Offset: 0x107E48C
    static void Dump(::ArrayW<uint8_t> buffer);
    // static public System.Void Dump(System.Byte[] buffer, System.Int32 length)
    // Offset: 0x107E490
    static void Dump(::ArrayW<uint8_t> buffer, int length);
    // static public System.Void Dump(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x107E494
    static void Dump(::ArrayW<uint8_t> buffer, int offset, int length);
    // static public System.Void Dump(System.IntPtr buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x107E498
    static void Dump(::System::IntPtr buffer, int offset, int length);
  }; // System.Net.GlobalLog
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::GlobalLog::get_CurrentThreadKind
// Il2CppName: get_CurrentThreadKind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ThreadKinds (*)()>(&System::Net::GlobalLog::get_CurrentThreadKind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "get_CurrentThreadKind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::GlobalLog::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::LoggingInitialize
// Il2CppName: LoggingInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::BaseLoggingObject* (*)()>(&System::Net::GlobalLog::LoggingInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "LoggingInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::SetThreadSource
// Il2CppName: SetThreadSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::ThreadKinds)>(&System::Net::GlobalLog::SetThreadSource)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Net", "ThreadKinds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "SetThreadSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::ThreadContract
// Il2CppName: ThreadContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::ThreadKinds, ::StringW)>(&System::Net::GlobalLog::ThreadContract)> {
  static const MethodInfo* get() {
    static auto* kind = &::il2cpp_utils::GetClassFromName("System.Net", "ThreadKinds")->byval_arg;
    static auto* errorMsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "ThreadContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kind, errorMsg});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::ThreadContract
// Il2CppName: ThreadContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::ThreadKinds, ::System::Net::ThreadKinds, ::StringW)>(&System::Net::GlobalLog::ThreadContract)> {
  static const MethodInfo* get() {
    static auto* kind = &::il2cpp_utils::GetClassFromName("System.Net", "ThreadKinds")->byval_arg;
    static auto* allowedSources = &::il2cpp_utils::GetClassFromName("System.Net", "ThreadKinds")->byval_arg;
    static auto* errorMsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "ThreadContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kind, allowedSources, errorMsg});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::AddToArray
// Il2CppName: AddToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::GlobalLog::AddToArray)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "AddToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Ignore
// Il2CppName: Ignore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&System::Net::GlobalLog::Ignore)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Ignore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Print
// Il2CppName: Print
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::GlobalLog::Print)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Print", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::PrintHex
// Il2CppName: PrintHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::Il2CppObject*)>(&System::Net::GlobalLog::PrintHex)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "PrintHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, value});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Enter
// Il2CppName: Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::GlobalLog::Enter)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Enter
// Il2CppName: Enter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&System::Net::GlobalLog::Enter)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parms = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, parms});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Assert_
// Il2CppName: Assert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW, ::ArrayW<::Il2CppObject*>)>(&System::Net::GlobalLog::Assert_)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* messageFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Assert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, messageFormat, data});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Assert_
// Il2CppName: Assert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::GlobalLog::Assert_)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Assert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Assert_
// Il2CppName: Assert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&System::Net::GlobalLog::Assert_)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* detailMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Assert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, detailMessage});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::LeaveException
// Il2CppName: LeaveException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Exception*)>(&System::Net::GlobalLog::LeaveException)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "LeaveException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, exception});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&System::Net::GlobalLog::Leave)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&System::Net::GlobalLog::Leave)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, result});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, int)>(&System::Net::GlobalLog::Leave)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* returnval = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, returnval});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, bool)>(&System::Net::GlobalLog::Leave)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* returnval = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func, returnval});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::DumpArray
// Il2CppName: DumpArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::GlobalLog::DumpArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "DumpArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Dump
// Il2CppName: Dump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>)>(&System::Net::GlobalLog::Dump)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Dump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Dump
// Il2CppName: Dump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int)>(&System::Net::GlobalLog::Dump)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Dump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, length});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Dump
// Il2CppName: Dump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, int, int)>(&System::Net::GlobalLog::Dump)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Dump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
// Writing MetadataGetter for method: System::Net::GlobalLog::Dump
// Il2CppName: Dump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, int)>(&System::Net::GlobalLog::Dump)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::GlobalLog*), "Dump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
