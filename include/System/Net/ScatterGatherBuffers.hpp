// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: ScatterGatherBuffers
  class ScatterGatherBuffers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::ScatterGatherBuffers);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::ScatterGatherBuffers*, "System.Net", "ScatterGatherBuffers");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ScatterGatherBuffers
  // [TokenAttribute] Offset: FFFFFFFF
  class ScatterGatherBuffers : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::ScatterGatherBuffers::MemoryChunk
    class MemoryChunk;
    public:
    // private System.Net.ScatterGatherBuffers/System.Net.MemoryChunk headChunk
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::ScatterGatherBuffers::MemoryChunk* headChunk;
    // Field size check
    static_assert(sizeof(::System::Net::ScatterGatherBuffers::MemoryChunk*) == 0x8);
    // private System.Net.ScatterGatherBuffers/System.Net.MemoryChunk currentChunk
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::ScatterGatherBuffers::MemoryChunk* currentChunk;
    // Field size check
    static_assert(sizeof(::System::Net::ScatterGatherBuffers::MemoryChunk*) == 0x8);
    // private System.Int32 nextChunkLength
    // Size: 0x4
    // Offset: 0x20
    int nextChunkLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 totalLength
    // Size: 0x4
    // Offset: 0x24
    int totalLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chunkCount
    // Size: 0x4
    // Offset: 0x28
    int chunkCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Net.ScatterGatherBuffers/System.Net.MemoryChunk headChunk
    [[deprecated("Use field access instead!")]] ::System::Net::ScatterGatherBuffers::MemoryChunk*& dyn_headChunk();
    // Get instance field reference: private System.Net.ScatterGatherBuffers/System.Net.MemoryChunk currentChunk
    [[deprecated("Use field access instead!")]] ::System::Net::ScatterGatherBuffers::MemoryChunk*& dyn_currentChunk();
    // Get instance field reference: private System.Int32 nextChunkLength
    [[deprecated("Use field access instead!")]] int& dyn_nextChunkLength();
    // Get instance field reference: private System.Int32 totalLength
    [[deprecated("Use field access instead!")]] int& dyn_totalLength();
    // Get instance field reference: private System.Int32 chunkCount
    [[deprecated("Use field access instead!")]] int& dyn_chunkCount();
    // private System.Boolean get_Empty()
    // Offset: 0xF741E0
    bool get_Empty();
    // System.Int32 get_Length()
    // Offset: 0xF74200
    int get_Length();
    // System.Void .ctor()
    // Offset: 0xF73FB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScatterGatherBuffers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ScatterGatherBuffers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScatterGatherBuffers*, creationType>()));
    }
    // System.Void .ctor(System.Int64 totalSize)
    // Offset: 0xF73FC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScatterGatherBuffers* New_ctor(int64_t totalSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::ScatterGatherBuffers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScatterGatherBuffers*, creationType>(totalSize)));
    }
    // System.Net.BufferOffsetSize[] GetBuffers()
    // Offset: 0xF740C0
    ::ArrayW<::System::Net::BufferOffsetSize*> GetBuffers();
    // System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xF74208
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // private System.Net.ScatterGatherBuffers/System.Net.MemoryChunk AllocateMemoryChunk(System.Int32 newSize)
    // Offset: 0xF74018
    ::System::Net::ScatterGatherBuffers::MemoryChunk* AllocateMemoryChunk(int newSize);
  }; // System.Net.ScatterGatherBuffers
  #pragma pack(pop)
  static check_size<sizeof(ScatterGatherBuffers), 40 + sizeof(int)> __System_Net_ScatterGatherBuffersSizeCheck;
  static_assert(sizeof(ScatterGatherBuffers) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::ScatterGatherBuffers::*)()>(&System::Net::ScatterGatherBuffers::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ScatterGatherBuffers*), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::ScatterGatherBuffers::*)()>(&System::Net::ScatterGatherBuffers::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ScatterGatherBuffers*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::GetBuffers
// Il2CppName: GetBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Net::BufferOffsetSize*> (System::Net::ScatterGatherBuffers::*)()>(&System::Net::ScatterGatherBuffers::GetBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::ScatterGatherBuffers*), "GetBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::ScatterGatherBuffers::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::ScatterGatherBuffers::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ScatterGatherBuffers*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: System::Net::ScatterGatherBuffers::AllocateMemoryChunk
// Il2CppName: AllocateMemoryChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ScatterGatherBuffers::MemoryChunk* (System::Net::ScatterGatherBuffers::*)(int)>(&System::Net::ScatterGatherBuffers::AllocateMemoryChunk)> {
  static const MethodInfo* get() {
    static auto* newSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::ScatterGatherBuffers*), "AllocateMemoryChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSize});
  }
};
