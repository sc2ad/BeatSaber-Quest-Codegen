// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: MonoHttpDate
  class MonoHttpDate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::MonoHttpDate);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::MonoHttpDate*, "System.Net", "MonoHttpDate");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.MonoHttpDate
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoHttpDate : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.String rfc1123_date
    static ::StringW _get_rfc1123_date();
    // Set static field: static private readonly System.String rfc1123_date
    static void _set_rfc1123_date(::StringW value);
    // Get static field: static private readonly System.String rfc850_date
    static ::StringW _get_rfc850_date();
    // Set static field: static private readonly System.String rfc850_date
    static void _set_rfc850_date(::StringW value);
    // Get static field: static private readonly System.String asctime_date
    static ::StringW _get_asctime_date();
    // Set static field: static private readonly System.String asctime_date
    static void _set_asctime_date(::StringW value);
    // Get static field: static private readonly System.String[] formats
    static ::ArrayW<::StringW> _get_formats();
    // Set static field: static private readonly System.String[] formats
    static void _set_formats(::ArrayW<::StringW> value);
    // public System.Void .ctor()
    // Offset: 0xF6AB74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoHttpDate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::MonoHttpDate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoHttpDate*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xF6AB7C
    static void _cctor();
    // static System.DateTime Parse(System.String dateStr)
    // Offset: 0xF6AA80
    static ::System::DateTime Parse(::StringW dateStr);
  }; // System.Net.MonoHttpDate
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::MonoHttpDate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::MonoHttpDate::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::MonoHttpDate::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoHttpDate*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::MonoHttpDate::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::StringW)>(&System::Net::MonoHttpDate::Parse)> {
  static const MethodInfo* get() {
    static auto* dateStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::MonoHttpDate*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateStr});
  }
};
