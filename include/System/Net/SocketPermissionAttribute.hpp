// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Permissions.CodeAccessSecurityAttribute
#include "System/Security/Permissions/CodeAccessSecurityAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security
namespace System::Security {
  // Forward declaring type: IPermission
  class IPermission;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: SocketPermissionAttribute
  class SocketPermissionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::SocketPermissionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::SocketPermissionAttribute*, "System.Net", "SocketPermissionAttribute");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.SocketPermissionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FFDB8
  class SocketPermissionAttribute : public ::System::Security::Permissions::CodeAccessSecurityAttribute {
    public:
    // Writing base type padding for base size: 0x15 to desired offset: 0x18
    char ___base_padding[0x3] = {};
    public:
    // private System.String m_access
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_access;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_host
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_port
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_port;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_transport
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_transport;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String m_access
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_access();
    // Get instance field reference: private System.String m_host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_host();
    // Get instance field reference: private System.String m_port
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_port();
    // Get instance field reference: private System.String m_transport
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_transport();
    // public System.String get_Access()
    // Offset: 0xC89574
    ::StringW get_Access();
    // public System.Void set_Access(System.String value)
    // Offset: 0xC8957C
    void set_Access(::StringW value);
    // public System.String get_Host()
    // Offset: 0xC8967C
    ::StringW get_Host();
    // public System.Void set_Host(System.String value)
    // Offset: 0xC89684
    void set_Host(::StringW value);
    // public System.String get_Port()
    // Offset: 0xC896EC
    ::StringW get_Port();
    // public System.Void set_Port(System.String value)
    // Offset: 0xC896F4
    void set_Port(::StringW value);
    // public System.String get_Transport()
    // Offset: 0xC8975C
    ::StringW get_Transport();
    // public System.Void set_Transport(System.String value)
    // Offset: 0xC89764
    void set_Transport(::StringW value);
    // public System.Void .ctor(System.Security.Permissions.SecurityAction action)
    // Offset: 0xC8956C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SocketPermissionAttribute* New_ctor(::System::Security::Permissions::SecurityAction action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::SocketPermissionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SocketPermissionAttribute*, creationType>(action)));
    }
    // System.Void AlreadySet(System.String property)
    // Offset: 0xC895E4
    void AlreadySet(::StringW property);
    // public override System.Security.IPermission CreatePermission()
    // Offset: 0xC897CC
    // Implemented from: System.Security.Permissions.SecurityAttribute
    // Base method: System.Security.IPermission SecurityAttribute::CreatePermission()
    ::System::Security::IPermission* CreatePermission();
  }; // System.Net.SocketPermissionAttribute
  #pragma pack(pop)
  static check_size<sizeof(SocketPermissionAttribute), 48 + sizeof(::StringW)> __System_Net_SocketPermissionAttributeSizeCheck;
  static_assert(sizeof(SocketPermissionAttribute) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::get_Access
// Il2CppName: get_Access
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::SocketPermissionAttribute::*)()>(&System::Net::SocketPermissionAttribute::get_Access)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "get_Access", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::set_Access
// Il2CppName: set_Access
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermissionAttribute::*)(::StringW)>(&System::Net::SocketPermissionAttribute::set_Access)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "set_Access", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::SocketPermissionAttribute::*)()>(&System::Net::SocketPermissionAttribute::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::set_Host
// Il2CppName: set_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermissionAttribute::*)(::StringW)>(&System::Net::SocketPermissionAttribute::set_Host)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "set_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::get_Port
// Il2CppName: get_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::SocketPermissionAttribute::*)()>(&System::Net::SocketPermissionAttribute::get_Port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "get_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::set_Port
// Il2CppName: set_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermissionAttribute::*)(::StringW)>(&System::Net::SocketPermissionAttribute::set_Port)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "set_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::get_Transport
// Il2CppName: get_Transport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::SocketPermissionAttribute::*)()>(&System::Net::SocketPermissionAttribute::get_Transport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "get_Transport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::set_Transport
// Il2CppName: set_Transport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermissionAttribute::*)(::StringW)>(&System::Net::SocketPermissionAttribute::set_Transport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "set_Transport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::AlreadySet
// Il2CppName: AlreadySet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::SocketPermissionAttribute::*)(::StringW)>(&System::Net::SocketPermissionAttribute::AlreadySet)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "AlreadySet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: System::Net::SocketPermissionAttribute::CreatePermission
// Il2CppName: CreatePermission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::IPermission* (System::Net::SocketPermissionAttribute::*)()>(&System::Net::SocketPermissionAttribute::CreatePermission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::SocketPermissionAttribute*), "CreatePermission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
