// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Net.Mime
namespace System::Net::Mime {
  // Forward declaring type: WriteStateInfoBase
  class WriteStateInfoBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Mime::WriteStateInfoBase);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Mime::WriteStateInfoBase*, "System.Net.Mime", "WriteStateInfoBase");
// Type namespace: System.Net.Mime
namespace System::Net::Mime {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Mime.WriteStateInfoBase
  // [TokenAttribute] Offset: FFFFFFFF
  class WriteStateInfoBase : public ::Il2CppObject {
    public:
    public:
    // protected System.Byte[] _header
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> header;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // protected System.Byte[] _footer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> footer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // protected System.Int32 _maxLineLength
    // Size: 0x4
    // Offset: 0x20
    int maxLineLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxLineLength and: buffer
    char __padding2[0x4] = {};
    // protected System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // protected System.Int32 _currentLineLength
    // Size: 0x4
    // Offset: 0x30
    int currentLineLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _currentBufferUsed
    // Size: 0x4
    // Offset: 0x34
    int currentBufferUsed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: protected System.Byte[] _header
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__header();
    // Get instance field reference: protected System.Byte[] _footer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__footer();
    // Get instance field reference: protected System.Int32 _maxLineLength
    [[deprecated("Use field access instead!")]] int& dyn__maxLineLength();
    // Get instance field reference: protected System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // Get instance field reference: protected System.Int32 _currentLineLength
    [[deprecated("Use field access instead!")]] int& dyn__currentLineLength();
    // Get instance field reference: protected System.Int32 _currentBufferUsed
    [[deprecated("Use field access instead!")]] int& dyn__currentBufferUsed();
    // System.Int32 get_FooterLength()
    // Offset: 0xF69720
    int get_FooterLength();
    // System.Byte[] get_Footer()
    // Offset: 0xF6973C
    ::ArrayW<uint8_t> get_Footer();
    // System.Byte[] get_Header()
    // Offset: 0xF69744
    ::ArrayW<uint8_t> get_Header();
    // System.Byte[] get_Buffer()
    // Offset: 0xF6974C
    ::ArrayW<uint8_t> get_Buffer();
    // System.Int32 get_Length()
    // Offset: 0xF69754
    int get_Length();
    // System.Int32 get_CurrentLineLength()
    // Offset: 0xF6975C
    int get_CurrentLineLength();
    // System.Int32 get_MaxLineLength()
    // Offset: 0xF69A04
    int get_MaxLineLength();
    // System.Void .ctor()
    // Offset: 0xF69668
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WriteStateInfoBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Mime::WriteStateInfoBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WriteStateInfoBase*, creationType>()));
    }
    // private System.Void EnsureSpaceInBuffer(System.Int32 moreBytes)
    // Offset: 0xF69764
    void EnsureSpaceInBuffer(int moreBytes);
    // System.Void Append(System.Byte aByte)
    // Offset: 0xF69818
    void Append(uint8_t aByte);
    // System.Void Append(params System.Byte[] bytes)
    // Offset: 0xF69884
    void Append(::ArrayW<uint8_t> bytes);
    // System.Void AppendCRLF(System.Boolean includeSpace)
    // Offset: 0xF698E4
    void AppendCRLF(bool includeSpace);
    // System.Void AppendHeader()
    // Offset: 0xF699EC
    void AppendHeader();
    // System.Void AppendFooter()
    // Offset: 0xF699D4
    void AppendFooter();
    // System.Void Reset()
    // Offset: 0xF69A0C
    void Reset();
  }; // System.Net.Mime.WriteStateInfoBase
  #pragma pack(pop)
  static check_size<sizeof(WriteStateInfoBase), 52 + sizeof(int)> __System_Net_Mime_WriteStateInfoBaseSizeCheck;
  static_assert(sizeof(WriteStateInfoBase) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_FooterLength
// Il2CppName: get_FooterLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_FooterLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_FooterLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_Footer
// Il2CppName: get_Footer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_Footer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_Footer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_Header
// Il2CppName: get_Header
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_Header)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_Header", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_CurrentLineLength
// Il2CppName: get_CurrentLineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_CurrentLineLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_CurrentLineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::get_MaxLineLength
// Il2CppName: get_MaxLineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::get_MaxLineLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "get_MaxLineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::EnsureSpaceInBuffer
// Il2CppName: EnsureSpaceInBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)(int)>(&System::Net::Mime::WriteStateInfoBase::EnsureSpaceInBuffer)> {
  static const MethodInfo* get() {
    static auto* moreBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "EnsureSpaceInBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moreBytes});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)(uint8_t)>(&System::Net::Mime::WriteStateInfoBase::Append)> {
  static const MethodInfo* get() {
    static auto* aByte = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aByte});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)(::ArrayW<uint8_t>)>(&System::Net::Mime::WriteStateInfoBase::Append)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::AppendCRLF
// Il2CppName: AppendCRLF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)(bool)>(&System::Net::Mime::WriteStateInfoBase::AppendCRLF)> {
  static const MethodInfo* get() {
    static auto* includeSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "AppendCRLF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includeSpace});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::AppendHeader
// Il2CppName: AppendHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::AppendHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "AppendHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::AppendFooter
// Il2CppName: AppendFooter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::AppendFooter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "AppendFooter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::WriteStateInfoBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::WriteStateInfoBase::*)()>(&System::Net::Mime::WriteStateInfoBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::WriteStateInfoBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
