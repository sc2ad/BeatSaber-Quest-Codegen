// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Mime.WriteStateInfoBase
#include "System/Net/Mime/WriteStateInfoBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net.Mime
namespace System::Net::Mime {
  // Forward declaring type: Base64WriteStateInfo
  class Base64WriteStateInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Mime::Base64WriteStateInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Mime::Base64WriteStateInfo*, "System.Net.Mime", "Base64WriteStateInfo");
// Type namespace: System.Net.Mime
namespace System::Net::Mime {
  // Size: 0x3D
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Mime.Base64WriteStateInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class Base64WriteStateInfo : public ::System::Net::Mime::WriteStateInfoBase {
    public:
    public:
    // private System.Int32 <Padding>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int Padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte <LastBits>k__BackingField
    // Size: 0x1
    // Offset: 0x3C
    uint8_t LastBits;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: private System.Int32 <Padding>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Padding$k__BackingField();
    // Get instance field reference: private System.Byte <LastBits>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$LastBits$k__BackingField();
    // System.Int32 get_Padding()
    // Offset: 0xF696F8
    int get_Padding();
    // System.Void set_Padding(System.Int32 value)
    // Offset: 0xF69700
    void set_Padding(int value);
    // System.Byte get_LastBits()
    // Offset: 0xF69708
    uint8_t get_LastBits();
    // System.Void set_LastBits(System.Byte value)
    // Offset: 0xF69710
    void set_LastBits(uint8_t value);
    // System.Void .ctor()
    // Offset: 0xF69664
    // Implemented from: System.Net.Mime.WriteStateInfoBase
    // Base method: System.Void WriteStateInfoBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Base64WriteStateInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Mime::Base64WriteStateInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Base64WriteStateInfo*, creationType>()));
    }
  }; // System.Net.Mime.Base64WriteStateInfo
  #pragma pack(pop)
  static check_size<sizeof(Base64WriteStateInfo), 60 + sizeof(uint8_t)> __System_Net_Mime_Base64WriteStateInfoSizeCheck;
  static_assert(sizeof(Base64WriteStateInfo) == 0x3D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Mime::Base64WriteStateInfo::get_Padding
// Il2CppName: get_Padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mime::Base64WriteStateInfo::*)()>(&System::Net::Mime::Base64WriteStateInfo::get_Padding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::Base64WriteStateInfo*), "get_Padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::Base64WriteStateInfo::set_Padding
// Il2CppName: set_Padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::Base64WriteStateInfo::*)(int)>(&System::Net::Mime::Base64WriteStateInfo::set_Padding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::Base64WriteStateInfo*), "set_Padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::Base64WriteStateInfo::get_LastBits
// Il2CppName: get_LastBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Net::Mime::Base64WriteStateInfo::*)()>(&System::Net::Mime::Base64WriteStateInfo::get_LastBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::Base64WriteStateInfo*), "get_LastBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::Base64WriteStateInfo::set_LastBits
// Il2CppName: set_LastBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mime::Base64WriteStateInfo::*)(uint8_t)>(&System::Net::Mime::Base64WriteStateInfo::set_LastBits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mime::Base64WriteStateInfo*), "set_LastBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Mime::Base64WriteStateInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
