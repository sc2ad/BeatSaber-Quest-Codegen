// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.TimerThread
#include "System/Net/TimerThread.hpp"
// Including type: System.Net.TimerThread/System.Net.Timer
#include "System/Net/TimerThread_Timer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::TimerThread::InfiniteTimer);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::TimerThread::InfiniteTimer*, "System.Net", "TimerThread/InfiniteTimer");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.TimerThread/System.Net.InfiniteTimer
  // [TokenAttribute] Offset: FFFFFFFF
  class TimerThread::InfiniteTimer : public ::System::Net::TimerThread::Timer {
    public:
    public:
    // private System.Int32 cancelled
    // Size: 0x4
    // Offset: 0x18
    int cancelled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return cancelled;
    }
    // Get instance field reference: private System.Int32 cancelled
    [[deprecated("Use field access instead!")]] int& dyn_cancelled();
    // System.Void .ctor()
    // Offset: 0xC9C5AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimerThread::InfiniteTimer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::TimerThread::InfiniteTimer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimerThread::InfiniteTimer*, creationType>()));
    }
    // override System.Boolean get_HasExpired()
    // Offset: 0xC9C61C
    // Implemented from: System.Net.TimerThread/System.Net.Timer
    // Base method: System.Boolean Timer::get_HasExpired()
    bool get_HasExpired();
    // override System.Boolean Cancel()
    // Offset: 0xC9C624
    // Implemented from: System.Net.TimerThread/System.Net.Timer
    // Base method: System.Boolean Timer::Cancel()
    bool Cancel();
  }; // System.Net.TimerThread/System.Net.InfiniteTimer
  #pragma pack(pop)
  static check_size<sizeof(TimerThread::InfiniteTimer), 24 + sizeof(int)> __System_Net_TimerThread_InfiniteTimerSizeCheck;
  static_assert(sizeof(TimerThread::InfiniteTimer) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::TimerThread::InfiniteTimer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::TimerThread::InfiniteTimer::get_HasExpired
// Il2CppName: get_HasExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::TimerThread::InfiniteTimer::*)()>(&System::Net::TimerThread::InfiniteTimer::get_HasExpired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::TimerThread::InfiniteTimer*), "get_HasExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::TimerThread::InfiniteTimer::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::TimerThread::InfiniteTimer::*)()>(&System::Net::TimerThread::InfiniteTimer::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::TimerThread::InfiniteTimer*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
