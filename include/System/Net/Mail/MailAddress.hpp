// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: FormatException
  class FormatException;
}
// Completed forward declares
// Type namespace: System.Net.Mail
namespace System::Net::Mail {
  // Forward declaring type: MailAddress
  class MailAddress;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Mail::MailAddress);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Mail::MailAddress*, "System.Net.Mail", "MailAddress");
// Type namespace: System.Net.Mail
namespace System::Net::Mail {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Mail.MailAddress
  // [TokenAttribute] Offset: FFFFFFFF
  class MailAddress : public ::Il2CppObject {
    public:
    public:
    // private System.String address
    // Size: 0x8
    // Offset: 0x10
    ::StringW address;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String displayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String host
    // Size: 0x8
    // Offset: 0x20
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String user
    // Size: 0x8
    // Offset: 0x28
    ::StringW user;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String to_string
    // Size: 0x8
    // Offset: 0x30
    ::StringW to_string;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String address
    [[deprecated("Use field access instead!")]] ::StringW& dyn_address();
    // Get instance field reference: private System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: private System.String host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_host();
    // Get instance field reference: private System.String user
    [[deprecated("Use field access instead!")]] ::StringW& dyn_user();
    // Get instance field reference: private System.String to_string
    [[deprecated("Use field access instead!")]] ::StringW& dyn_to_string();
    // public System.String get_Address()
    // Offset: 0x1ADD77C
    ::StringW get_Address();
    // public System.String get_DisplayName()
    // Offset: 0x1ADD784
    ::StringW get_DisplayName();
    // public System.Void .ctor(System.String address)
    // Offset: 0x1ADD370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MailAddress* New_ctor(::StringW address) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Mail::MailAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MailAddress*, creationType>(address)));
    }
    // public System.Void .ctor(System.String address, System.String displayName)
    // Offset: 0x1ADD3A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MailAddress* New_ctor(::StringW address, ::StringW displayName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Mail::MailAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MailAddress*, creationType>(address, displayName)));
    }
    // public System.Void .ctor(System.String address, System.String displayName, System.Text.Encoding displayNameEncoding)
    // Offset: 0x1ADD3E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MailAddress* New_ctor(::StringW address, ::StringW displayName, ::System::Text::Encoding* displayNameEncoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Mail::MailAddress::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MailAddress*, creationType>(address, displayName, displayNameEncoding)));
    }
    // private System.Void ParseAddress(System.String address)
    // Offset: 0x1ADD4D0
    void ParseAddress(::StringW address);
    // static private System.FormatException CreateFormatException()
    // Offset: 0x1ADD714
    static ::System::FormatException* CreateFormatException();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x1ADD7E0
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1ADD844
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1ADD870
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Net.Mail.MailAddress
  #pragma pack(pop)
  static check_size<sizeof(MailAddress), 48 + sizeof(::StringW)> __System_Net_Mail_MailAddressSizeCheck;
  static_assert(sizeof(MailAddress) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::get_Address
// Il2CppName: get_Address
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Mail::MailAddress::*)()>(&System::Net::Mail::MailAddress::get_Address)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "get_Address", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Mail::MailAddress::*)()>(&System::Net::Mail::MailAddress::get_DisplayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::ParseAddress
// Il2CppName: ParseAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Mail::MailAddress::*)(::StringW)>(&System::Net::Mail::MailAddress::ParseAddress)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "ParseAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::CreateFormatException
// Il2CppName: CreateFormatException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::FormatException* (*)()>(&System::Net::Mail::MailAddress::CreateFormatException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "CreateFormatException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Mail::MailAddress::*)(::Il2CppObject*)>(&System::Net::Mail::MailAddress::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Mail::MailAddress::*)()>(&System::Net::Mail::MailAddress::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Mail::MailAddress::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::Mail::MailAddress::*)()>(&System::Net::Mail::MailAddress::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Mail::MailAddress*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
