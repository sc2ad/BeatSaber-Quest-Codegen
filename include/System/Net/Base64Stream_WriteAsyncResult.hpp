// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.Base64Stream
#include "System/Net/Base64Stream.hpp"
// Including type: System.Net.LazyAsyncResult
#include "System/Net/LazyAsyncResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Skipping declaration: IAsyncResult because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Base64Stream::WriteAsyncResult);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Base64Stream::WriteAsyncResult*, "System.Net", "Base64Stream/WriteAsyncResult");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Base64Stream/System.Net.WriteAsyncResult
  // [TokenAttribute] Offset: FFFFFFFF
  class Base64Stream::WriteAsyncResult : public ::System::Net::LazyAsyncResult {
    public:
    public:
    // private System.Net.Base64Stream parent
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::Base64Stream* parent;
    // Field size check
    static_assert(sizeof(::System::Net::Base64Stream*) == 0x8);
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 offset
    // Size: 0x4
    // Offset: 0x58
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x5C
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 written
    // Size: 0x4
    // Offset: 0x60
    int written;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.AsyncCallback onWrite
    static ::System::AsyncCallback* _get_onWrite();
    // Set static field: static private System.AsyncCallback onWrite
    static void _set_onWrite(::System::AsyncCallback* value);
    // Get instance field reference: private System.Net.Base64Stream parent
    [[deprecated("Use field access instead!")]] ::System::Net::Base64Stream*& dyn_parent();
    // Get instance field reference: private System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // Get instance field reference: private System.Int32 offset
    [[deprecated("Use field access instead!")]] int& dyn_offset();
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private System.Int32 written
    [[deprecated("Use field access instead!")]] int& dyn_written();
    // System.Void .ctor(System.Net.Base64Stream parent, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x12F7A5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Base64Stream::WriteAsyncResult* New_ctor(::System::Net::Base64Stream* parent, ::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* callback, ::Il2CppObject* state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Base64Stream::WriteAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Base64Stream::WriteAsyncResult*, creationType>(parent, buffer, offset, count, callback, state)));
    }
    // static private System.Void .cctor()
    // Offset: 0x12F96A8
    static void _cctor();
    // System.Void Write()
    // Offset: 0x12F7AB4
    void Write();
    // private System.Void CompleteWrite(System.IAsyncResult result)
    // Offset: 0x12F9420
    void CompleteWrite(::System::IAsyncResult* result);
    // static private System.Void OnWrite(System.IAsyncResult result)
    // Offset: 0x12F9474
    static void OnWrite(::System::IAsyncResult* result);
    // static System.Void End(System.IAsyncResult result)
    // Offset: 0x12F8CB4
    static void End(::System::IAsyncResult* result);
  }; // System.Net.Base64Stream/System.Net.WriteAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(Base64Stream::WriteAsyncResult), 96 + sizeof(int)> __System_Net_Base64Stream_WriteAsyncResultSizeCheck;
  static_assert(sizeof(Base64Stream::WriteAsyncResult) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::Base64Stream::WriteAsyncResult::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream::WriteAsyncResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::WriteAsyncResult::*)()>(&System::Net::Base64Stream::WriteAsyncResult::Write)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream::WriteAsyncResult*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::CompleteWrite
// Il2CppName: CompleteWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Base64Stream::WriteAsyncResult::*)(::System::IAsyncResult*)>(&System::Net::Base64Stream::WriteAsyncResult::CompleteWrite)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream::WriteAsyncResult*), "CompleteWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::OnWrite
// Il2CppName: OnWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::Base64Stream::WriteAsyncResult::OnWrite)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream::WriteAsyncResult*), "OnWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::Base64Stream::WriteAsyncResult::End
// Il2CppName: End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::Base64Stream::WriteAsyncResult::End)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Base64Stream::WriteAsyncResult*), "End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
