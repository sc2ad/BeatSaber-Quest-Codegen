// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: MemoryStream
  class MemoryStream;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPointListener
  class EndPointListener;
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
  // Forward declaring type: ListenerPrefix
  class ListenerPrefix;
  // Forward declaring type: RequestStream
  class RequestStream;
  // Forward declaring type: ResponseStream
  class ResponseStream;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: HttpListener
  class HttpListener;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
  // Forward declaring type: SslPolicyErrors
  struct SslPolicyErrors;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Forward declaring type: HttpConnection
  class HttpConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::HttpConnection);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpConnection*, "System.Net", "HttpConnection");
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpConnection : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::HttpConnection::InputState
    struct InputState;
    // Nested type: ::System::Net::HttpConnection::LineState
    struct LineState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.HttpConnection/System.Net.InputState
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputState
      constexpr InputState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpConnection/System.Net.InputState RequestLine
      static constexpr const int RequestLine = 0;
      // Get static field: static public System.Net.HttpConnection/System.Net.InputState RequestLine
      static ::System::Net::HttpConnection::InputState _get_RequestLine();
      // Set static field: static public System.Net.HttpConnection/System.Net.InputState RequestLine
      static void _set_RequestLine(::System::Net::HttpConnection::InputState value);
      // static field const value: static public System.Net.HttpConnection/System.Net.InputState Headers
      static constexpr const int Headers = 1;
      // Get static field: static public System.Net.HttpConnection/System.Net.InputState Headers
      static ::System::Net::HttpConnection::InputState _get_Headers();
      // Set static field: static public System.Net.HttpConnection/System.Net.InputState Headers
      static void _set_Headers(::System::Net::HttpConnection::InputState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.HttpConnection/System.Net.InputState
    #pragma pack(pop)
    static check_size<sizeof(HttpConnection::InputState), 0 + sizeof(int)> __System_Net_HttpConnection_InputStateSizeCheck;
    static_assert(sizeof(HttpConnection::InputState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.HttpConnection/System.Net.LineState
    // [TokenAttribute] Offset: FFFFFFFF
    struct LineState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LineState
      constexpr LineState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpConnection/System.Net.LineState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.HttpConnection/System.Net.LineState None
      static ::System::Net::HttpConnection::LineState _get_None();
      // Set static field: static public System.Net.HttpConnection/System.Net.LineState None
      static void _set_None(::System::Net::HttpConnection::LineState value);
      // static field const value: static public System.Net.HttpConnection/System.Net.LineState CR
      static constexpr const int CR = 1;
      // Get static field: static public System.Net.HttpConnection/System.Net.LineState CR
      static ::System::Net::HttpConnection::LineState _get_CR();
      // Set static field: static public System.Net.HttpConnection/System.Net.LineState CR
      static void _set_CR(::System::Net::HttpConnection::LineState value);
      // static field const value: static public System.Net.HttpConnection/System.Net.LineState LF
      static constexpr const int LF = 2;
      // Get static field: static public System.Net.HttpConnection/System.Net.LineState LF
      static ::System::Net::HttpConnection::LineState _get_LF();
      // Set static field: static public System.Net.HttpConnection/System.Net.LineState LF
      static void _set_LF(::System::Net::HttpConnection::LineState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Net.HttpConnection/System.Net.LineState
    #pragma pack(pop)
    static check_size<sizeof(HttpConnection::LineState), 0 + sizeof(int)> __System_Net_HttpConnection_LineStateSizeCheck;
    static_assert(sizeof(HttpConnection::LineState) == 0x4);
    public:
    // private System.Net.Sockets.Socket sock
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Sockets::Socket* sock;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private System.IO.Stream stream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Net.EndPointListener epl
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::EndPointListener* epl;
    // Field size check
    static_assert(sizeof(::System::Net::EndPointListener*) == 0x8);
    // private System.IO.MemoryStream ms
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::MemoryStream* ms;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Net.HttpListenerContext context
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::HttpListenerContext* context;
    // Field size check
    static_assert(sizeof(::System::Net::HttpListenerContext*) == 0x8);
    // private System.Text.StringBuilder current_line
    // Size: 0x8
    // Offset: 0x40
    ::System::Text::StringBuilder* current_line;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.Net.ListenerPrefix prefix
    // Size: 0x8
    // Offset: 0x48
    ::System::Net::ListenerPrefix* prefix;
    // Field size check
    static_assert(sizeof(::System::Net::ListenerPrefix*) == 0x8);
    // private System.Net.RequestStream i_stream
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::RequestStream* i_stream;
    // Field size check
    static_assert(sizeof(::System::Net::RequestStream*) == 0x8);
    // private System.Net.ResponseStream o_stream
    // Size: 0x8
    // Offset: 0x58
    ::System::Net::ResponseStream* o_stream;
    // Field size check
    static_assert(sizeof(::System::Net::ResponseStream*) == 0x8);
    // private System.Boolean chunked
    // Size: 0x1
    // Offset: 0x60
    bool chunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: chunked and: reuses
    char __padding10[0x3] = {};
    // private System.Int32 reuses
    // Size: 0x4
    // Offset: 0x64
    int reuses;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean context_bound
    // Size: 0x1
    // Offset: 0x68
    bool context_bound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean secure
    // Size: 0x1
    // Offset: 0x69
    bool secure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: secure and: cert
    char __padding13[0x6] = {};
    // private System.Security.Cryptography.X509Certificates.X509Certificate cert
    // Size: 0x8
    // Offset: 0x70
    ::System::Security::Cryptography::X509Certificates::X509Certificate* cert;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate*) == 0x8);
    // private System.Int32 s_timeout
    // Size: 0x4
    // Offset: 0x78
    int s_timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: s_timeout and: timer
    char __padding15[0x4] = {};
    // private System.Threading.Timer timer
    // Size: 0x8
    // Offset: 0x80
    ::System::Threading::Timer* timer;
    // Field size check
    static_assert(sizeof(::System::Threading::Timer*) == 0x8);
    // private System.Net.IPEndPoint local_ep
    // Size: 0x8
    // Offset: 0x88
    ::System::Net::IPEndPoint* local_ep;
    // Field size check
    static_assert(sizeof(::System::Net::IPEndPoint*) == 0x8);
    // private System.Net.HttpListener last_listener
    // Size: 0x8
    // Offset: 0x90
    ::System::Net::HttpListener* last_listener;
    // Field size check
    static_assert(sizeof(::System::Net::HttpListener*) == 0x8);
    // private System.Int32[] client_cert_errors
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<int> client_cert_errors;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509Certificate2 client_cert
    // Size: 0x8
    // Offset: 0xA0
    ::System::Security::Cryptography::X509Certificates::X509Certificate2* client_cert;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509Certificate2*) == 0x8);
    // private System.Net.Security.SslStream ssl_stream
    // Size: 0x8
    // Offset: 0xA8
    ::System::Net::Security::SslStream* ssl_stream;
    // Field size check
    static_assert(sizeof(::System::Net::Security::SslStream*) == 0x8);
    // private System.Net.HttpConnection/System.Net.InputState input_state
    // Size: 0x4
    // Offset: 0xB0
    ::System::Net::HttpConnection::InputState input_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpConnection::InputState) == 0x4);
    // private System.Net.HttpConnection/System.Net.LineState line_state
    // Size: 0x4
    // Offset: 0xB4
    ::System::Net::HttpConnection::LineState line_state;
    // Field size check
    static_assert(sizeof(::System::Net::HttpConnection::LineState) == 0x4);
    // private System.Int32 position
    // Size: 0x4
    // Offset: 0xB8
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.AsyncCallback onread_cb
    static ::System::AsyncCallback* _get_onread_cb();
    // Set static field: static private System.AsyncCallback onread_cb
    static void _set_onread_cb(::System::AsyncCallback* value);
    // Get instance field reference: private System.Net.Sockets.Socket sock
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_sock();
    // Get instance field reference: private System.IO.Stream stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn_stream();
    // Get instance field reference: private System.Net.EndPointListener epl
    [[deprecated("Use field access instead!")]] ::System::Net::EndPointListener*& dyn_epl();
    // Get instance field reference: private System.IO.MemoryStream ms
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn_ms();
    // Get instance field reference: private System.Byte[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_buffer();
    // Get instance field reference: private System.Net.HttpListenerContext context
    [[deprecated("Use field access instead!")]] ::System::Net::HttpListenerContext*& dyn_context();
    // Get instance field reference: private System.Text.StringBuilder current_line
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_current_line();
    // Get instance field reference: private System.Net.ListenerPrefix prefix
    [[deprecated("Use field access instead!")]] ::System::Net::ListenerPrefix*& dyn_prefix();
    // Get instance field reference: private System.Net.RequestStream i_stream
    [[deprecated("Use field access instead!")]] ::System::Net::RequestStream*& dyn_i_stream();
    // Get instance field reference: private System.Net.ResponseStream o_stream
    [[deprecated("Use field access instead!")]] ::System::Net::ResponseStream*& dyn_o_stream();
    // Get instance field reference: private System.Boolean chunked
    [[deprecated("Use field access instead!")]] bool& dyn_chunked();
    // Get instance field reference: private System.Int32 reuses
    [[deprecated("Use field access instead!")]] int& dyn_reuses();
    // Get instance field reference: private System.Boolean context_bound
    [[deprecated("Use field access instead!")]] bool& dyn_context_bound();
    // Get instance field reference: private System.Boolean secure
    [[deprecated("Use field access instead!")]] bool& dyn_secure();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate cert
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate*& dyn_cert();
    // Get instance field reference: private System.Int32 s_timeout
    [[deprecated("Use field access instead!")]] int& dyn_s_timeout();
    // Get instance field reference: private System.Threading.Timer timer
    [[deprecated("Use field access instead!")]] ::System::Threading::Timer*& dyn_timer();
    // Get instance field reference: private System.Net.IPEndPoint local_ep
    [[deprecated("Use field access instead!")]] ::System::Net::IPEndPoint*& dyn_local_ep();
    // Get instance field reference: private System.Net.HttpListener last_listener
    [[deprecated("Use field access instead!")]] ::System::Net::HttpListener*& dyn_last_listener();
    // Get instance field reference: private System.Int32[] client_cert_errors
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_client_cert_errors();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509Certificate2 client_cert
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509Certificate2*& dyn_client_cert();
    // Get instance field reference: private System.Net.Security.SslStream ssl_stream
    [[deprecated("Use field access instead!")]] ::System::Net::Security::SslStream*& dyn_ssl_stream();
    // Get instance field reference: private System.Net.HttpConnection/System.Net.InputState input_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpConnection::InputState& dyn_input_state();
    // Get instance field reference: private System.Net.HttpConnection/System.Net.LineState line_state
    [[deprecated("Use field access instead!")]] ::System::Net::HttpConnection::LineState& dyn_line_state();
    // Get instance field reference: private System.Int32 position
    [[deprecated("Use field access instead!")]] int& dyn_position();
    // public System.Int32 get_Reuses()
    // Offset: 0x1AC97E4
    int get_Reuses();
    // public System.Net.IPEndPoint get_LocalEndPoint()
    // Offset: 0x1AC97EC
    ::System::Net::IPEndPoint* get_LocalEndPoint();
    // public System.Boolean get_IsSecure()
    // Offset: 0x1AC9888
    bool get_IsSecure();
    // public System.Void set_Prefix(System.Net.ListenerPrefix value)
    // Offset: 0x1AC9890
    void set_Prefix(::System::Net::ListenerPrefix* value);
    // public System.Void .ctor(System.Net.Sockets.Socket sock, System.Net.EndPointListener epl, System.Boolean secure, System.Security.Cryptography.X509Certificates.X509Certificate cert)
    // Offset: 0x1AC9324
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpConnection* New_ctor(::System::Net::Sockets::Socket* sock, ::System::Net::EndPointListener* epl, bool secure, ::System::Security::Cryptography::X509Certificates::X509Certificate* cert) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::HttpConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpConnection*, creationType>(sock, epl, secure, cert)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1ACCB58
    static void _cctor();
    // private System.Void Init()
    // Offset: 0x1AC96A8
    void Init();
    // private System.Void OnTimeout(System.Object unused)
    // Offset: 0x1AC9898
    void OnTimeout(::Il2CppObject* unused);
    // public System.Void BeginReadRequest()
    // Offset: 0x1AC9A1C
    void BeginReadRequest();
    // public System.Net.RequestStream GetRequestStream(System.Boolean chunked, System.Int64 contentlength)
    // Offset: 0x1AC9BC0
    ::System::Net::RequestStream* GetRequestStream(bool chunked, int64_t contentlength);
    // public System.Net.ResponseStream GetResponseStream()
    // Offset: 0x1AC9E0C
    ::System::Net::ResponseStream* GetResponseStream();
    // static private System.Void OnRead(System.IAsyncResult ares)
    // Offset: 0x1AC9EE0
    static void OnRead(::System::IAsyncResult* ares);
    // private System.Void OnReadInternal(System.IAsyncResult ares)
    // Offset: 0x1AC9FB8
    void OnReadInternal(::System::IAsyncResult* ares);
    // private System.Void RemoveConnection()
    // Offset: 0x1ACAFE0
    void RemoveConnection();
    // private System.Boolean ProcessInput(System.IO.MemoryStream ms)
    // Offset: 0x1ACA70C
    bool ProcessInput(::System::IO::MemoryStream* ms);
    // private System.String ReadLine(System.Byte[] buffer, System.Int32 offset, System.Int32 len, ref System.Int32 used)
    // Offset: 0x1ACB384
    ::StringW ReadLine(::ArrayW<uint8_t> buffer, int offset, int len, ByRef<int> used);
    // public System.Void SendError(System.String msg, System.Int32 status)
    // Offset: 0x1ACA2E8
    void SendError(::StringW msg, int status);
    // public System.Void SendError()
    // Offset: 0x1ACA6EC
    void SendError();
    // private System.Void Unbind()
    // Offset: 0x1AC99DC
    void Unbind();
    // private System.Void CloseSocket()
    // Offset: 0x1AC98BC
    void CloseSocket();
    // System.Void Close(System.Boolean force_close)
    // Offset: 0x1ACA4AC
    void Close(bool force_close);
    // private System.Boolean <.ctor>b__24_0(System.Object t, System.Security.Cryptography.X509Certificates.X509Certificate c, System.Security.Cryptography.X509Certificates.X509Chain ch, System.Net.Security.SslPolicyErrors e)
    // Offset: 0x1ACCBD4
    bool $_ctor$b__24_0(::Il2CppObject* t, ::System::Security::Cryptography::X509Certificates::X509Certificate* c, ::System::Security::Cryptography::X509Certificates::X509Chain* ch, ::System::Net::Security::SslPolicyErrors e);
  }; // System.Net.HttpConnection
  #pragma pack(pop)
  static check_size<sizeof(HttpConnection), 184 + sizeof(int)> __System_Net_HttpConnectionSizeCheck;
  static_assert(sizeof(HttpConnection) == 0xBC);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpConnection::LineState, "System.Net", "HttpConnection/LineState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::HttpConnection::InputState, "System.Net", "HttpConnection/InputState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::HttpConnection::get_Reuses
// Il2CppName: get_Reuses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::get_Reuses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "get_Reuses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::get_LocalEndPoint
// Il2CppName: get_LocalEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPEndPoint* (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::get_LocalEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "get_LocalEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::get_IsSecure
// Il2CppName: get_IsSecure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::get_IsSecure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "get_IsSecure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::set_Prefix
// Il2CppName: set_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)(::System::Net::ListenerPrefix*)>(&System::Net::HttpConnection::set_Prefix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "ListenerPrefix")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "set_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpConnection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::HttpConnection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::OnTimeout
// Il2CppName: OnTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)(::Il2CppObject*)>(&System::Net::HttpConnection::OnTimeout)> {
  static const MethodInfo* get() {
    static auto* unused = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "OnTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unused});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::BeginReadRequest
// Il2CppName: BeginReadRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::BeginReadRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "BeginReadRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::GetRequestStream
// Il2CppName: GetRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::RequestStream* (System::Net::HttpConnection::*)(bool, int64_t)>(&System::Net::HttpConnection::GetRequestStream)> {
  static const MethodInfo* get() {
    static auto* chunked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* contentlength = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "GetRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chunked, contentlength});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::GetResponseStream
// Il2CppName: GetResponseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::ResponseStream* (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::GetResponseStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "GetResponseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IAsyncResult*)>(&System::Net::HttpConnection::OnRead)> {
  static const MethodInfo* get() {
    static auto* ares = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ares});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::OnReadInternal
// Il2CppName: OnReadInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)(::System::IAsyncResult*)>(&System::Net::HttpConnection::OnReadInternal)> {
  static const MethodInfo* get() {
    static auto* ares = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "OnReadInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ares});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::RemoveConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::ProcessInput
// Il2CppName: ProcessInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpConnection::*)(::System::IO::MemoryStream*)>(&System::Net::HttpConnection::ProcessInput)> {
  static const MethodInfo* get() {
    static auto* ms = &::il2cpp_utils::GetClassFromName("System.IO", "MemoryStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "ProcessInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ms});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::HttpConnection::*)(::ArrayW<uint8_t>, int, int, ByRef<int>)>(&System::Net::HttpConnection::ReadLine)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* used = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, len, used});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::SendError
// Il2CppName: SendError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)(::StringW, int)>(&System::Net::HttpConnection::SendError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "SendError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, status});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::SendError
// Il2CppName: SendError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::SendError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "SendError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::Unbind
// Il2CppName: Unbind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::Unbind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "Unbind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::CloseSocket
// Il2CppName: CloseSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)()>(&System::Net::HttpConnection::CloseSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "CloseSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::HttpConnection::*)(bool)>(&System::Net::HttpConnection::Close)> {
  static const MethodInfo* get() {
    static auto* force_close = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force_close});
  }
};
// Writing MetadataGetter for method: System::Net::HttpConnection::$_ctor$b__24_0
// Il2CppName: <.ctor>b__24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::HttpConnection::*)(::Il2CppObject*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::System::Security::Cryptography::X509Certificates::X509Chain*, ::System::Net::Security::SslPolicyErrors)>(&System::Net::HttpConnection::$_ctor$b__24_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Chain")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SslPolicyErrors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::HttpConnection*), "<.ctor>b__24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, c, ch, e});
  }
};
