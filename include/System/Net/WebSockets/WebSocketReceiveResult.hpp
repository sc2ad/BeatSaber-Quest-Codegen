// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebSockets.WebSocketMessageType
#include "System/Net/WebSockets/WebSocketMessageType.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Net.WebSockets.WebSocketCloseStatus
#include "System/Net/WebSockets/WebSocketCloseStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: WebSocketReceiveResult
  class WebSocketReceiveResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebSockets::WebSocketReceiveResult);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::WebSocketReceiveResult*, "System.Net.WebSockets", "WebSocketReceiveResult");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Net.WebSockets.WebSocketReceiveResult
  // [TokenAttribute] Offset: FFFFFFFF
  class WebSocketReceiveResult : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 <Count>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Boolean <EndOfMessage>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool EndOfMessage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Net.WebSockets.WebSocketMessageType <MessageType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::WebSockets::WebSocketMessageType MessageType;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::WebSocketMessageType) == 0x4);
    // private readonly System.Nullable`1<System.Net.WebSockets.WebSocketCloseStatus> <CloseStatus>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x1C
    ::System::Nullable_1<::System::Net::WebSockets::WebSocketCloseStatus> CloseStatus;
    // private readonly System.String <CloseStatusDescription>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW CloseStatusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32 <Count>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Count$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <EndOfMessage>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EndOfMessage$k__BackingField();
    // Get instance field reference: private readonly System.Net.WebSockets.WebSocketMessageType <MessageType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::WebSocketMessageType& dyn_$MessageType$k__BackingField();
    // Get instance field reference: private readonly System.Nullable`1<System.Net.WebSockets.WebSocketCloseStatus> <CloseStatus>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::Net::WebSockets::WebSocketCloseStatus>& dyn_$CloseStatus$k__BackingField();
    // Get instance field reference: private readonly System.String <CloseStatusDescription>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$CloseStatusDescription$k__BackingField();
    // public System.Int32 get_Count()
    // Offset: 0xE0564C
    int get_Count();
    // public System.Boolean get_EndOfMessage()
    // Offset: 0xE05654
    bool get_EndOfMessage();
    // public System.Void .ctor(System.Int32 count, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage)
    // Offset: 0xE0101C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebSocketReceiveResult* New_ctor(int count, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::WebSocketReceiveResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebSocketReceiveResult*, creationType>(count, messageType, endOfMessage)));
    }
    // public System.Void .ctor(System.Int32 count, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Nullable`1<System.Net.WebSockets.WebSocketCloseStatus> closeStatus, System.String closeStatusDescription)
    // Offset: 0xDFFEB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebSocketReceiveResult* New_ctor(int count, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, ::System::Nullable_1<::System::Net::WebSockets::WebSocketCloseStatus> closeStatus, ::StringW closeStatusDescription) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::WebSocketReceiveResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebSocketReceiveResult*, creationType>(count, messageType, endOfMessage, closeStatus, closeStatusDescription)));
    }
  }; // System.Net.WebSockets.WebSocketReceiveResult
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketReceiveResult::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebSockets::WebSocketReceiveResult::*)()>(&System::Net::WebSockets::WebSocketReceiveResult::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketReceiveResult*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketReceiveResult::get_EndOfMessage
// Il2CppName: get_EndOfMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebSockets::WebSocketReceiveResult::*)()>(&System::Net::WebSockets::WebSocketReceiveResult::get_EndOfMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketReceiveResult*), "get_EndOfMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketReceiveResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketReceiveResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
