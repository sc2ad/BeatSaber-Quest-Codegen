// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: CookieContainer
  class CookieContainer;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Completed forward declares
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: ClientWebSocketOptions
  class ClientWebSocketOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebSockets::ClientWebSocketOptions);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::ClientWebSocketOptions*, "System.Net.WebSockets", "ClientWebSocketOptions");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Net.WebSockets.ClientWebSocketOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class ClientWebSocketOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean _isReadOnly
    // Size: 0x1
    // Offset: 0x10
    bool isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Collections.Generic.List`1<System.String> _requestedSubProtocols
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* requestedSubProtocols;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.Net.WebHeaderCollection _requestHeaders
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::WebHeaderCollection* requestHeaders;
    // Field size check
    static_assert(sizeof(::System::Net::WebHeaderCollection*) == 0x8);
    // private System.TimeSpan _keepAliveInterval
    // Size: 0x8
    // Offset: 0x28
    ::System::TimeSpan keepAliveInterval;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    // Size: 0x8
    // Offset: 0x30
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.Net.CookieContainer _cookies
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::CookieContainer* cookies;
    // Field size check
    static_assert(sizeof(::System::Net::CookieContainer*) == 0x8);
    // private System.Int32 _receiveBufferSize
    // Size: 0x4
    // Offset: 0x40
    int receiveBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _sendBufferSize
    // Size: 0x4
    // Offset: 0x44
    int sendBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Nullable`1<System.ArraySegment`1<System.Byte>> _buffer
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::System::Nullable_1<::System::ArraySegment_1<uint8_t>> buffer;
    public:
    // Get instance field reference: private System.Boolean _isReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn__isReadOnly();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> _requestedSubProtocols
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__requestedSubProtocols();
    // Get instance field reference: private readonly System.Net.WebHeaderCollection _requestHeaders
    [[deprecated("Use field access instead!")]] ::System::Net::WebHeaderCollection*& dyn__requestHeaders();
    // Get instance field reference: private System.TimeSpan _keepAliveInterval
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn__keepAliveInterval();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection _clientCertificates
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn__clientCertificates();
    // Get instance field reference: private System.Net.CookieContainer _cookies
    [[deprecated("Use field access instead!")]] ::System::Net::CookieContainer*& dyn__cookies();
    // Get instance field reference: private System.Int32 _receiveBufferSize
    [[deprecated("Use field access instead!")]] int& dyn__receiveBufferSize();
    // Get instance field reference: private System.Int32 _sendBufferSize
    [[deprecated("Use field access instead!")]] int& dyn__sendBufferSize();
    // Get instance field reference: private System.Nullable`1<System.ArraySegment`1<System.Byte>> _buffer
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::ArraySegment_1<uint8_t>>& dyn__buffer();
    // System.Net.WebHeaderCollection get_RequestHeaders()
    // Offset: 0xDFB630
    ::System::Net::WebHeaderCollection* get_RequestHeaders();
    // System.Collections.Generic.List`1<System.String> get_RequestedSubProtocols()
    // Offset: 0xDFB638
    ::System::Collections::Generic::List_1<::StringW>* get_RequestedSubProtocols();
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0xDFB640
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Net.CookieContainer get_Cookies()
    // Offset: 0xDFB6AC
    ::System::Net::CookieContainer* get_Cookies();
    // public System.TimeSpan get_KeepAliveInterval()
    // Offset: 0xDFBB00
    ::System::TimeSpan get_KeepAliveInterval();
    // System.Int32 get_ReceiveBufferSize()
    // Offset: 0xDFBB08
    int get_ReceiveBufferSize();
    // System.Int32 get_SendBufferSize()
    // Offset: 0xDFBB10
    int get_SendBufferSize();
    // System.Nullable`1<System.ArraySegment`1<System.Byte>> get_Buffer()
    // Offset: 0xDFBB18
    ::System::Nullable_1<::System::ArraySegment_1<uint8_t>> get_Buffer();
    // System.Void .ctor()
    // Offset: 0xDFA710
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientWebSocketOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::ClientWebSocketOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientWebSocketOptions*, creationType>()));
    }
    // public System.Void AddSubProtocol(System.String subProtocol)
    // Offset: 0xDFB6B4
    void AddSubProtocol(::StringW subProtocol);
    // System.Void SetToReadOnly()
    // Offset: 0xDFAB90
    void SetToReadOnly();
    // private System.Void ThrowIfReadOnly()
    // Offset: 0xDFB844
    void ThrowIfReadOnly();
  }; // System.Net.WebSockets.ClientWebSocketOptions
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_RequestHeaders
// Il2CppName: get_RequestHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebHeaderCollection* (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_RequestHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_RequestHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_RequestedSubProtocols
// Il2CppName: get_RequestedSubProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_RequestedSubProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_RequestedSubProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_Cookies
// Il2CppName: get_Cookies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::CookieContainer* (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_Cookies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_Cookies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_KeepAliveInterval
// Il2CppName: get_KeepAliveInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_KeepAliveInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_KeepAliveInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_ReceiveBufferSize
// Il2CppName: get_ReceiveBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_ReceiveBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_ReceiveBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_SendBufferSize
// Il2CppName: get_SendBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_SendBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_SendBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::ArraySegment_1<uint8_t>> (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::AddSubProtocol
// Il2CppName: AddSubProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ClientWebSocketOptions::*)(::StringW)>(&System::Net::WebSockets::ClientWebSocketOptions::AddSubProtocol)> {
  static const MethodInfo* get() {
    static auto* subProtocol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "AddSubProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subProtocol});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::SetToReadOnly
// Il2CppName: SetToReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::SetToReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "SetToReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::ClientWebSocketOptions::ThrowIfReadOnly
// Il2CppName: ThrowIfReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::ClientWebSocketOptions::*)()>(&System::Net::WebSockets::ClientWebSocketOptions::ThrowIfReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::ClientWebSocketOptions*), "ThrowIfReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
