// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: WebSocketState
  struct WebSocketState;
  // Forward declaring type: WebSocketCloseStatus
  struct WebSocketCloseStatus;
  // Forward declaring type: WebSocketReceiveResult
  class WebSocketReceiveResult;
  // Forward declaring type: WebSocketMessageType
  struct WebSocketMessageType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: WebSocket
  class WebSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebSockets::WebSocket);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::WebSocket*, "System.Net.WebSockets", "WebSocket");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebSockets.WebSocket
  // [TokenAttribute] Offset: FFFFFFFF
  class WebSocket : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public System.String get_CloseStatusDescription()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_CloseStatusDescription();
    // public System.Net.WebSockets.WebSocketState get_State()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Net::WebSockets::WebSocketState get_State();
    // static public System.TimeSpan get_DefaultKeepAliveInterval()
    // Offset: 0xDFB5CC
    static ::System::TimeSpan get_DefaultKeepAliveInterval();
    // protected System.Void .ctor()
    // Offset: 0xDFA704
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebSocket* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::WebSocket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebSocket*, creationType>()));
    }
    // public System.Void Abort()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Abort();
    // public System.Threading.Tasks.Task CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.String statusDescription, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* CloseOutputAsync(::System::Net::WebSockets::WebSocketCloseStatus closeStatus, ::StringW statusDescription, ::System::Threading::CancellationToken cancellationToken);
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose();
    // public System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync(System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* ReceiveAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task SendAsync(System.ArraySegment`1<System.Byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::Tasks::Task* SendAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, ::System::Threading::CancellationToken cancellationToken);
    // static public System.Net.WebSockets.WebSocket CreateClientWebSocket(System.IO.Stream innerStream, System.String subProtocol, System.Int32 receiveBufferSize, System.Int32 sendBufferSize, System.TimeSpan keepAliveInterval, System.Boolean useZeroMaskingKey, System.ArraySegment`1<System.Byte> internalBuffer)
    // Offset: 0xE01D24
    static ::System::Net::WebSockets::WebSocket* CreateClientWebSocket(::System::IO::Stream* innerStream, ::StringW subProtocol, int receiveBufferSize, int sendBufferSize, ::System::TimeSpan keepAliveInterval, bool useZeroMaskingKey, ::System::ArraySegment_1<uint8_t> internalBuffer);
  }; // System.Net.WebSockets.WebSocket
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::get_CloseStatusDescription
// Il2CppName: get_CloseStatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::WebSockets::WebSocket::*)()>(&System::Net::WebSockets::WebSocket::get_CloseStatusDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "get_CloseStatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::WebSocketState (System::Net::WebSockets::WebSocket::*)()>(&System::Net::WebSockets::WebSocket::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::get_DefaultKeepAliveInterval
// Il2CppName: get_DefaultKeepAliveInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)()>(&System::Net::WebSockets::WebSocket::get_DefaultKeepAliveInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "get_DefaultKeepAliveInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocket::*)()>(&System::Net::WebSockets::WebSocket::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::CloseOutputAsync
// Il2CppName: CloseOutputAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::WebSocket::*)(::System::Net::WebSockets::WebSocketCloseStatus, ::StringW, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocket::CloseOutputAsync)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    static auto* statusDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "CloseOutputAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus, statusDescription, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocket::*)()>(&System::Net::WebSockets::WebSocket::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::ReceiveAsync
// Il2CppName: ReceiveAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* (System::Net::WebSockets::WebSocket::*)(::System::ArraySegment_1<uint8_t>, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocket::ReceiveAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "ReceiveAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::SendAsync
// Il2CppName: SendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::WebSocket::*)(::System::ArraySegment_1<uint8_t>, ::System::Net::WebSockets::WebSocketMessageType, bool, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocket::SendAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketMessageType")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "SendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, messageType, endOfMessage, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocket::CreateClientWebSocket
// Il2CppName: CreateClientWebSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::WebSocket* (*)(::System::IO::Stream*, ::StringW, int, int, ::System::TimeSpan, bool, ::System::ArraySegment_1<uint8_t>)>(&System::Net::WebSockets::WebSocket::CreateClientWebSocket)> {
  static const MethodInfo* get() {
    static auto* innerStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* subProtocol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* receiveBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sendBufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keepAliveInterval = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* useZeroMaskingKey = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* internalBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocket*), "CreateClientWebSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerStream, subProtocol, receiveBufferSize, sendBufferSize, keepAliveInterval, useZeroMaskingKey, internalBuffer});
  }
};
