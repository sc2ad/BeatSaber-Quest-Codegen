// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebSockets.WebSocketState
#include "System/Net/WebSockets/WebSocketState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: WebSocket
  class WebSocket;
  // Forward declaring type: WebSocketMessageType
  struct WebSocketMessageType;
  // Forward declaring type: WebSocketReceiveResult
  class WebSocketReceiveResult;
  // Forward declaring type: WebSocketCloseStatus
  struct WebSocketCloseStatus;
  // Forward declaring type: ClientWebSocketOptions
  class ClientWebSocketOptions;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: KeyValuePair`2<TKey, TValue>
  template<typename TKey, typename TValue>
  struct KeyValuePair_2;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: WebSocketHandle
  class WebSocketHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::WebSockets::WebSocketHandle);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::WebSocketHandle*, "System.Net.WebSockets", "WebSocketHandle");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebSockets.WebSocketHandle
  // [TokenAttribute] Offset: FFFFFFFF
  class WebSocketHandle : public ::Il2CppObject {
    public:
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$$c
    class $$c;
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$ConnectAsyncCore$d__24
    struct $ConnectAsyncCore$d__24;
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25
    struct $ConnectSocketAsync$d__25;
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$$c__DisplayClass28_0
    class $$c__DisplayClass28_0;
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$ParseAndValidateConnectResponseAsync$d__28
    struct $ParseAndValidateConnectResponseAsync$d__28;
    // Nested type: ::System::Net::WebSockets::WebSocketHandle::$ReadResponseHeaderLineAsync$d__30
    struct $ReadResponseHeaderLineAsync$d__30;
    public:
    // private readonly System.Threading.CancellationTokenSource _abortSource
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::CancellationTokenSource* abortSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Net.WebSockets.WebSocketState _state
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::WebSockets::WebSocketState state;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::WebSocketState) == 0x4);
    // Padding between fields: state and: webSocket
    char __padding1[0x4] = {};
    // private System.Net.WebSockets.WebSocket _webSocket
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::WebSockets::WebSocket* webSocket;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::WebSocket*) == 0x8);
    public:
    // Get static field: static private System.Text.StringBuilder t_cachedStringBuilder
    static ::System::Text::StringBuilder* _get_t_cachedStringBuilder();
    // Set static field: static private System.Text.StringBuilder t_cachedStringBuilder
    static void _set_t_cachedStringBuilder(::System::Text::StringBuilder* value);
    // Get static field: static private readonly System.Text.Encoding s_defaultHttpEncoding
    static ::System::Text::Encoding* _get_s_defaultHttpEncoding();
    // Set static field: static private readonly System.Text.Encoding s_defaultHttpEncoding
    static void _set_s_defaultHttpEncoding(::System::Text::Encoding* value);
    // Get instance field reference: private readonly System.Threading.CancellationTokenSource _abortSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__abortSource();
    // Get instance field reference: private System.Net.WebSockets.WebSocketState _state
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::WebSocketState& dyn__state();
    // Get instance field reference: private System.Net.WebSockets.WebSocket _webSocket
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::WebSocket*& dyn__webSocket();
    // public System.String get_CloseStatusDescription()
    // Offset: 0xDFA860
    ::StringW get_CloseStatusDescription();
    // public System.Net.WebSockets.WebSocketState get_State()
    // Offset: 0xDFA930
    ::System::Net::WebSockets::WebSocketState get_State();
    // public System.Void .ctor()
    // Offset: 0xE02564
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebSocketHandle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::WebSockets::WebSocketHandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebSocketHandle*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xE033C8
    static void _cctor();
    // static public System.Net.WebSockets.WebSocketHandle Create()
    // Offset: 0xDFB444
    static ::System::Net::WebSockets::WebSocketHandle* Create();
    // static public System.Boolean IsValid(System.Net.WebSockets.WebSocketHandle handle)
    // Offset: 0xDFA854
    static bool IsValid(::System::Net::WebSockets::WebSocketHandle* handle);
    // static public System.Void CheckPlatformSupport()
    // Offset: 0xDFA70C
    static void CheckPlatformSupport();
    // public System.Void Dispose()
    // Offset: 0xDFB0CC
    void Dispose();
    // public System.Void Abort()
    // Offset: 0xDFAFCC
    void Abort();
    // public System.Threading.Tasks.Task SendAsync(System.ArraySegment`1<System.Byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, System.Boolean endOfMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xDFAE0C
    ::System::Threading::Tasks::Task* SendAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync(System.ArraySegment`1<System.Byte> buffer, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xDFAE8C
    ::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* ReceiveAsync(::System::ArraySegment_1<uint8_t> buffer, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, System.String statusDescription, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xDFAF08
    ::System::Threading::Tasks::Task* CloseOutputAsync(::System::Net::WebSockets::WebSocketCloseStatus closeStatus, ::StringW statusDescription, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task ConnectAsyncCore(System.Uri uri, System.Threading.CancellationToken cancellationToken, System.Net.WebSockets.ClientWebSocketOptions options)
    // Offset: 0xDFB49C
    ::System::Threading::Tasks::Task* ConnectAsyncCore(::System::Uri* uri, ::System::Threading::CancellationToken cancellationToken, ::System::Net::WebSockets::ClientWebSocketOptions* options);
    // private System.Threading.Tasks.Task`1<System.Net.Sockets.Socket> ConnectSocketAsync(System.String host, System.Int32 port, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xE025D4
    ::System::Threading::Tasks::Task_1<::System::Net::Sockets::Socket*>* ConnectSocketAsync(::StringW host, int port, ::System::Threading::CancellationToken cancellationToken);
    // static private System.Byte[] BuildRequestHeader(System.Uri uri, System.Net.WebSockets.ClientWebSocketOptions options, System.String secKey)
    // Offset: 0xE02708
    static ::ArrayW<uint8_t> BuildRequestHeader(::System::Uri* uri, ::System::Net::WebSockets::ClientWebSocketOptions* options, ::StringW secKey);
    // static private System.Collections.Generic.KeyValuePair`2<System.String,System.String> CreateSecKeyAndSecWebSocketAccept()
    // Offset: 0xE02E04
    static ::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW> CreateSecKeyAndSecWebSocketAccept();
    // private System.Threading.Tasks.Task`1<System.String> ParseAndValidateConnectResponseAsync(System.IO.Stream stream, System.Net.WebSockets.ClientWebSocketOptions options, System.String expectedSecWebSocketAccept, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xE03058
    ::System::Threading::Tasks::Task_1<::StringW>* ParseAndValidateConnectResponseAsync(::System::IO::Stream* stream, ::System::Net::WebSockets::ClientWebSocketOptions* options, ::StringW expectedSecWebSocketAccept, ::System::Threading::CancellationToken cancellationToken);
    // static private System.Void ValidateAndTrackHeader(System.String targetHeaderName, System.String targetHeaderValue, System.String foundHeaderName, System.String foundHeaderValue, ref System.Boolean foundHeader)
    // Offset: 0xE03190
    static void ValidateAndTrackHeader(::StringW targetHeaderName, ::StringW targetHeaderValue, ::StringW foundHeaderName, ::StringW foundHeaderValue, ByRef<bool> foundHeader);
    // static private System.Threading.Tasks.Task`1<System.String> ReadResponseHeaderLineAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xE032B8
    static ::System::Threading::Tasks::Task_1<::StringW>* ReadResponseHeaderLineAsync(::System::IO::Stream* stream, ::System::Threading::CancellationToken cancellationToken);
  }; // System.Net.WebSockets.WebSocketHandle
  #pragma pack(pop)
  static check_size<sizeof(WebSocketHandle), 32 + sizeof(::System::Net::WebSockets::WebSocket*)> __System_Net_WebSockets_WebSocketHandleSizeCheck;
  static_assert(sizeof(WebSocketHandle) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::get_CloseStatusDescription
// Il2CppName: get_CloseStatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Net::WebSockets::WebSocketHandle::*)()>(&System::Net::WebSockets::WebSocketHandle::get_CloseStatusDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "get_CloseStatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::WebSocketState (System::Net::WebSockets::WebSocketHandle::*)()>(&System::Net::WebSockets::WebSocketHandle::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::WebSockets::WebSocketHandle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::WebSockets::WebSocketHandle* (*)()>(&System::Net::WebSockets::WebSocketHandle::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::WebSockets::WebSocketHandle*)>(&System::Net::WebSockets::WebSocketHandle::IsValid)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::CheckPlatformSupport
// Il2CppName: CheckPlatformSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::WebSockets::WebSocketHandle::CheckPlatformSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "CheckPlatformSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocketHandle::*)()>(&System::Net::WebSockets::WebSocketHandle::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocketHandle::*)()>(&System::Net::WebSockets::WebSocketHandle::Abort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::SendAsync
// Il2CppName: SendAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::WebSocketHandle::*)(::System::ArraySegment_1<uint8_t>, ::System::Net::WebSockets::WebSocketMessageType, bool, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::SendAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketMessageType")->byval_arg;
    static auto* endOfMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "SendAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, messageType, endOfMessage, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ReceiveAsync
// Il2CppName: ReceiveAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::WebSockets::WebSocketReceiveResult*>* (System::Net::WebSockets::WebSocketHandle::*)(::System::ArraySegment_1<uint8_t>, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::ReceiveAsync)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ReceiveAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::CloseOutputAsync
// Il2CppName: CloseOutputAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::WebSocketHandle::*)(::System::Net::WebSockets::WebSocketCloseStatus, ::StringW, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::CloseOutputAsync)> {
  static const MethodInfo* get() {
    static auto* closeStatus = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "WebSocketCloseStatus")->byval_arg;
    static auto* statusDescription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "CloseOutputAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeStatus, statusDescription, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ConnectAsyncCore
// Il2CppName: ConnectAsyncCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::Net::WebSockets::WebSocketHandle::*)(::System::Uri*, ::System::Threading::CancellationToken, ::System::Net::WebSockets::ClientWebSocketOptions*)>(&System::Net::WebSockets::WebSocketHandle::ConnectAsyncCore)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ClientWebSocketOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ConnectAsyncCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, cancellationToken, options});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ConnectSocketAsync
// Il2CppName: ConnectSocketAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::Net::Sockets::Socket*>* (System::Net::WebSockets::WebSocketHandle::*)(::StringW, int, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::ConnectSocketAsync)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ConnectSocketAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, port, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::BuildRequestHeader
// Il2CppName: BuildRequestHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::Uri*, ::System::Net::WebSockets::ClientWebSocketOptions*, ::StringW)>(&System::Net::WebSockets::WebSocketHandle::BuildRequestHeader)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ClientWebSocketOptions")->byval_arg;
    static auto* secKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "BuildRequestHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, options, secKey});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::CreateSecKeyAndSecWebSocketAccept
// Il2CppName: CreateSecKeyAndSecWebSocketAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::KeyValuePair_2<::StringW, ::StringW> (*)()>(&System::Net::WebSockets::WebSocketHandle::CreateSecKeyAndSecWebSocketAccept)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "CreateSecKeyAndSecWebSocketAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ParseAndValidateConnectResponseAsync
// Il2CppName: ParseAndValidateConnectResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::StringW>* (System::Net::WebSockets::WebSocketHandle::*)(::System::IO::Stream*, ::System::Net::WebSockets::ClientWebSocketOptions*, ::StringW, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::ParseAndValidateConnectResponseAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Net.WebSockets", "ClientWebSocketOptions")->byval_arg;
    static auto* expectedSecWebSocketAccept = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ParseAndValidateConnectResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, options, expectedSecWebSocketAccept, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ValidateAndTrackHeader
// Il2CppName: ValidateAndTrackHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, ::StringW, ::StringW, ByRef<bool>)>(&System::Net::WebSockets::WebSocketHandle::ValidateAndTrackHeader)> {
  static const MethodInfo* get() {
    static auto* targetHeaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetHeaderValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* foundHeaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* foundHeaderValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* foundHeader = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ValidateAndTrackHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetHeaderName, targetHeaderValue, foundHeaderName, foundHeaderValue, foundHeader});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::ReadResponseHeaderLineAsync
// Il2CppName: ReadResponseHeaderLineAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::StringW>* (*)(::System::IO::Stream*, ::System::Threading::CancellationToken)>(&System::Net::WebSockets::WebSocketHandle::ReadResponseHeaderLineAsync)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle*), "ReadResponseHeaderLineAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, cancellationToken});
  }
};
