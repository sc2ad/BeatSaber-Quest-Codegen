// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Net.WebSockets.WebSocketHandle
#include "System/Net/WebSockets/WebSocketHandle.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
#include "System/Runtime/CompilerServices/AsyncTaskMethodBuilder_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable_1.hpp"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25, "System.Net.WebSockets", "WebSocketHandle/<ConnectSocketAsync>d__25");
// Type namespace: System.Net.WebSockets
namespace System::Net::WebSockets {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Net.WebSockets.WebSocketHandle/System.Net.WebSockets.<ConnectSocketAsync>d__25
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct WebSocketHandle::$ConnectSocketAsync$d__25/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
    public:
    public:
    // public System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Net.Sockets.Socket> <>t__builder
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Net::Sockets::Socket*> $$t__builder;
    // public System.String host
    // Size: 0x8
    // Offset: 0x20
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Threading.CancellationToken cancellationToken
    // Size: 0x8
    // Offset: 0x28
    ::System::Threading::CancellationToken cancellationToken;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationToken) == 0x8);
    // public System.Net.WebSockets.WebSocketHandle <>4__this
    // Size: 0x8
    // Offset: 0x30
    ::System::Net::WebSockets::WebSocketHandle* $$4__this;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::WebSocketHandle*) == 0x8);
    // public System.Int32 port
    // Size: 0x4
    // Offset: 0x38
    int port;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.Sockets.Socket <socket>5__1
    // Size: 0x8
    // Offset: 0x40
    ::System::Net::Sockets::Socket* $socket$5__1;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo <lastException>5__2
    // Size: 0x8
    // Offset: 0x48
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* $lastException$5__2;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    // private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Net.IPAddress[]> <>u__1
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::ArrayW<::System::Net::IPAddress*>>::ConfiguredTaskAwaiter $$u__1;
    // private System.Net.IPAddress[] <>7__wrap1
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::System::Net::IPAddress*> $$7__wrap1;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Net::IPAddress*>) == 0x8);
    // private System.Int32 <>7__wrap2
    // Size: 0x4
    // Offset: 0x68
    int $$7__wrap2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.CancellationTokenRegistration <>7__wrap3
    // Size: 0xFFFFFFFF
    // Offset: 0x70
    ::System::Threading::CancellationTokenRegistration $$7__wrap3;
    // private System.Threading.CancellationTokenRegistration <>7__wrap4
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::System::Threading::CancellationTokenRegistration $$7__wrap4;
    // private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__2
    // Size: 0x9
    // Offset: 0xA0
    ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter $$u__2;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter) == 0x9);
    public:
    // Creating value type constructor for type: $ConnectSocketAsync$d__25
    constexpr $ConnectSocketAsync$d__25(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Net::Sockets::Socket*> $$t__builder_ = {}, ::StringW host_ = {}, ::System::Threading::CancellationToken cancellationToken_ = {}, ::System::Net::WebSockets::WebSocketHandle* $$4__this_ = {}, int port_ = {}, ::System::Net::Sockets::Socket* $socket$5__1_ = {}, ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* $lastException$5__2_ = {}, typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::ArrayW<::System::Net::IPAddress*>>::ConfiguredTaskAwaiter $$u__1_ = {}, ::ArrayW<::System::Net::IPAddress*> $$7__wrap1_ = ::ArrayW<::System::Net::IPAddress*>(static_cast<void*>(nullptr)), int $$7__wrap2_ = {}, ::System::Threading::CancellationTokenRegistration $$7__wrap3_ = {}, ::System::Threading::CancellationTokenRegistration $$7__wrap4_ = {}, ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter $$u__2_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, host{host_}, cancellationToken{cancellationToken_}, $$4__this{$$4__this_}, port{port_}, $socket$5__1{$socket$5__1_}, $lastException$5__2{$lastException$5__2_}, $$u__1{$$u__1_}, $$7__wrap1{$$7__wrap1_}, $$7__wrap2{$$7__wrap2_}, $$7__wrap3{$$7__wrap3_}, $$7__wrap4{$$7__wrap4_}, $$u__2{$$u__2_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
    operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // Get instance field reference: public System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<System.Net.Sockets.Socket> <>t__builder
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<::System::Net::Sockets::Socket*>& dyn_$$t__builder();
    // Get instance field reference: public System.String host
    [[deprecated("Use field access instead!")]] ::StringW& dyn_host();
    // Get instance field reference: public System.Threading.CancellationToken cancellationToken
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& dyn_cancellationToken();
    // Get instance field reference: public System.Net.WebSockets.WebSocketHandle <>4__this
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::WebSocketHandle*& dyn_$$4__this();
    // Get instance field reference: public System.Int32 port
    [[deprecated("Use field access instead!")]] int& dyn_port();
    // Get instance field reference: private System.Net.Sockets.Socket <socket>5__1
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_$socket$5__1();
    // Get instance field reference: private System.Runtime.ExceptionServices.ExceptionDispatchInfo <lastException>5__2
    [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_$lastException$5__2();
    // Get instance field reference: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/System.Runtime.CompilerServices.ConfiguredTaskAwaiter<System.Net.IPAddress[]> <>u__1
    [[deprecated("Use field access instead!")]] typename ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<::ArrayW<::System::Net::IPAddress*>>::ConfiguredTaskAwaiter& dyn_$$u__1();
    // Get instance field reference: private System.Net.IPAddress[] <>7__wrap1
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Net::IPAddress*>& dyn_$$7__wrap1();
    // Get instance field reference: private System.Int32 <>7__wrap2
    [[deprecated("Use field access instead!")]] int& dyn_$$7__wrap2();
    // Get instance field reference: private System.Threading.CancellationTokenRegistration <>7__wrap3
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& dyn_$$7__wrap3();
    // Get instance field reference: private System.Threading.CancellationTokenRegistration <>7__wrap4
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenRegistration& dyn_$$7__wrap4();
    // Get instance field reference: private System.Runtime.CompilerServices.ConfiguredTaskAwaitable/System.Runtime.CompilerServices.ConfiguredTaskAwaiter <>u__2
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::ConfiguredTaskAwaitable::ConfiguredTaskAwaiter& dyn_$$u__2();
    // private System.Void MoveNext()
    // Offset: 0xA44458
    void MoveNext();
    // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    // Offset: 0xA44460
    void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine);
  }; // System.Net.WebSockets.WebSocketHandle/System.Net.WebSockets.<ConnectSocketAsync>d__25
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::*)()>(&System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::*)(::System::Runtime::CompilerServices::IAsyncStateMachine*)>(&System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25::SetStateMachine)> {
  static const MethodInfo* get() {
    static auto* stateMachine = &::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "IAsyncStateMachine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebSockets::WebSocketHandle::$ConnectSocketAsync$d__25), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateMachine});
  }
};
