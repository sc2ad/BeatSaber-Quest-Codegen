// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Globalization.NumberStyles
#include "System/Globalization/NumberStyles.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Globalization::NumberFormatInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::NumberFormatInfo*, "System.Globalization", "NumberFormatInfo");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0xD5
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.NumberFormatInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 103A75C
  class NumberFormatInfo : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::IFormatProvider*/ {
    public:
    public:
    // System.Int32[] numberGroupSizes
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> numberGroupSizes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] currencyGroupSizes
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> currencyGroupSizes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32[] percentGroupSizes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> percentGroupSizes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.String positiveSign
    // Size: 0x8
    // Offset: 0x28
    ::StringW positiveSign;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String negativeSign
    // Size: 0x8
    // Offset: 0x30
    ::StringW negativeSign;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String numberDecimalSeparator
    // Size: 0x8
    // Offset: 0x38
    ::StringW numberDecimalSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String numberGroupSeparator
    // Size: 0x8
    // Offset: 0x40
    ::StringW numberGroupSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String currencyGroupSeparator
    // Size: 0x8
    // Offset: 0x48
    ::StringW currencyGroupSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String currencyDecimalSeparator
    // Size: 0x8
    // Offset: 0x50
    ::StringW currencyDecimalSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String currencySymbol
    // Size: 0x8
    // Offset: 0x58
    ::StringW currencySymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String ansiCurrencySymbol
    // Size: 0x8
    // Offset: 0x60
    ::StringW ansiCurrencySymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String nanSymbol
    // Size: 0x8
    // Offset: 0x68
    ::StringW nanSymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String positiveInfinitySymbol
    // Size: 0x8
    // Offset: 0x70
    ::StringW positiveInfinitySymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String negativeInfinitySymbol
    // Size: 0x8
    // Offset: 0x78
    ::StringW negativeInfinitySymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String percentDecimalSeparator
    // Size: 0x8
    // Offset: 0x80
    ::StringW percentDecimalSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String percentGroupSeparator
    // Size: 0x8
    // Offset: 0x88
    ::StringW percentGroupSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String percentSymbol
    // Size: 0x8
    // Offset: 0x90
    ::StringW percentSymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String perMilleSymbol
    // Size: 0x8
    // Offset: 0x98
    ::StringW perMilleSymbol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [OptionalFieldAttribute] Offset: 0x10409E8
    // System.String[] nativeDigits
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::StringW> nativeDigits;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // [OptionalFieldAttribute] Offset: 0x1040A20
    // System.Int32 m_dataItem
    // Size: 0x4
    // Offset: 0xA8
    int m_dataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 numberDecimalDigits
    // Size: 0x4
    // Offset: 0xAC
    int numberDecimalDigits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currencyDecimalDigits
    // Size: 0x4
    // Offset: 0xB0
    int currencyDecimalDigits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currencyPositivePattern
    // Size: 0x4
    // Offset: 0xB4
    int currencyPositivePattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 currencyNegativePattern
    // Size: 0x4
    // Offset: 0xB8
    int currencyNegativePattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 numberNegativePattern
    // Size: 0x4
    // Offset: 0xBC
    int numberNegativePattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percentPositivePattern
    // Size: 0x4
    // Offset: 0xC0
    int percentPositivePattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percentNegativePattern
    // Size: 0x4
    // Offset: 0xC4
    int percentNegativePattern;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 percentDecimalDigits
    // Size: 0x4
    // Offset: 0xC8
    int percentDecimalDigits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0x1040A58
    // System.Int32 digitSubstitution
    // Size: 0x4
    // Offset: 0xCC
    int digitSubstitution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean isReadOnly
    // Size: 0x1
    // Offset: 0xD0
    bool isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0x1040A90
    // System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0xD1
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0x1040AC8
    // System.Boolean m_isInvariant
    // Size: 0x1
    // Offset: 0xD2
    bool m_isInvariant;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0x1040B00
    // System.Boolean validForParseAsNumber
    // Size: 0x1
    // Offset: 0xD3
    bool validForParseAsNumber;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0x1040B38
    // System.Boolean validForParseAsCurrency
    // Size: 0x1
    // Offset: 0xD4
    bool validForParseAsCurrency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormatProvider
    operator ::System::IFormatProvider() noexcept {
      return *reinterpret_cast<::System::IFormatProvider*>(this);
    }
    // Creating interface conversion operator: i_IFormatProvider
    inline ::System::IFormatProvider* i_IFormatProvider() noexcept {
      return reinterpret_cast<::System::IFormatProvider*>(this);
    }
    // Get static field: static private System.Globalization.NumberFormatInfo invariantInfo
    static ::System::Globalization::NumberFormatInfo* _get_invariantInfo();
    // Set static field: static private System.Globalization.NumberFormatInfo invariantInfo
    static void _set_invariantInfo(::System::Globalization::NumberFormatInfo* value);
    // static field const value: static private System.Globalization.NumberStyles InvalidNumberStyles
    static constexpr const int InvalidNumberStyles = -1024;
    // Get static field: static private System.Globalization.NumberStyles InvalidNumberStyles
    static ::System::Globalization::NumberStyles _get_InvalidNumberStyles();
    // Set static field: static private System.Globalization.NumberStyles InvalidNumberStyles
    static void _set_InvalidNumberStyles(::System::Globalization::NumberStyles value);
    // Get instance field reference: System.Int32[] numberGroupSizes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_numberGroupSizes();
    // Get instance field reference: System.Int32[] currencyGroupSizes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_currencyGroupSizes();
    // Get instance field reference: System.Int32[] percentGroupSizes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_percentGroupSizes();
    // Get instance field reference: System.String positiveSign
    [[deprecated("Use field access instead!")]] ::StringW& dyn_positiveSign();
    // Get instance field reference: System.String negativeSign
    [[deprecated("Use field access instead!")]] ::StringW& dyn_negativeSign();
    // Get instance field reference: System.String numberDecimalSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_numberDecimalSeparator();
    // Get instance field reference: System.String numberGroupSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_numberGroupSeparator();
    // Get instance field reference: System.String currencyGroupSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currencyGroupSeparator();
    // Get instance field reference: System.String currencyDecimalSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currencyDecimalSeparator();
    // Get instance field reference: System.String currencySymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currencySymbol();
    // Get instance field reference: System.String ansiCurrencySymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ansiCurrencySymbol();
    // Get instance field reference: System.String nanSymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nanSymbol();
    // Get instance field reference: System.String positiveInfinitySymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_positiveInfinitySymbol();
    // Get instance field reference: System.String negativeInfinitySymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_negativeInfinitySymbol();
    // Get instance field reference: System.String percentDecimalSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_percentDecimalSeparator();
    // Get instance field reference: System.String percentGroupSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_percentGroupSeparator();
    // Get instance field reference: System.String percentSymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_percentSymbol();
    // Get instance field reference: System.String perMilleSymbol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_perMilleSymbol();
    // Get instance field reference: System.String[] nativeDigits
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_nativeDigits();
    // Get instance field reference: System.Int32 m_dataItem
    [[deprecated("Use field access instead!")]] int& dyn_m_dataItem();
    // Get instance field reference: System.Int32 numberDecimalDigits
    [[deprecated("Use field access instead!")]] int& dyn_numberDecimalDigits();
    // Get instance field reference: System.Int32 currencyDecimalDigits
    [[deprecated("Use field access instead!")]] int& dyn_currencyDecimalDigits();
    // Get instance field reference: System.Int32 currencyPositivePattern
    [[deprecated("Use field access instead!")]] int& dyn_currencyPositivePattern();
    // Get instance field reference: System.Int32 currencyNegativePattern
    [[deprecated("Use field access instead!")]] int& dyn_currencyNegativePattern();
    // Get instance field reference: System.Int32 numberNegativePattern
    [[deprecated("Use field access instead!")]] int& dyn_numberNegativePattern();
    // Get instance field reference: System.Int32 percentPositivePattern
    [[deprecated("Use field access instead!")]] int& dyn_percentPositivePattern();
    // Get instance field reference: System.Int32 percentNegativePattern
    [[deprecated("Use field access instead!")]] int& dyn_percentNegativePattern();
    // Get instance field reference: System.Int32 percentDecimalDigits
    [[deprecated("Use field access instead!")]] int& dyn_percentDecimalDigits();
    // Get instance field reference: System.Int32 digitSubstitution
    [[deprecated("Use field access instead!")]] int& dyn_digitSubstitution();
    // Get instance field reference: System.Boolean isReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_isReadOnly();
    // Get instance field reference: System.Boolean m_useUserOverride
    [[deprecated("Use field access instead!")]] bool& dyn_m_useUserOverride();
    // Get instance field reference: System.Boolean m_isInvariant
    [[deprecated("Use field access instead!")]] bool& dyn_m_isInvariant();
    // Get instance field reference: System.Boolean validForParseAsNumber
    [[deprecated("Use field access instead!")]] bool& dyn_validForParseAsNumber();
    // Get instance field reference: System.Boolean validForParseAsCurrency
    [[deprecated("Use field access instead!")]] bool& dyn_validForParseAsCurrency();
    // static public System.Globalization.NumberFormatInfo get_InvariantInfo()
    // Offset: 0x2148164
    static ::System::Globalization::NumberFormatInfo* get_InvariantInfo();
    // public System.Int32 get_CurrencyDecimalDigits()
    // Offset: 0x21485E0
    int get_CurrencyDecimalDigits();
    // public System.String get_CurrencyDecimalSeparator()
    // Offset: 0x21485E8
    ::StringW get_CurrencyDecimalSeparator();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x21485F0
    bool get_IsReadOnly();
    // public System.Int32[] get_CurrencyGroupSizes()
    // Offset: 0x21485F8
    ::ArrayW<int> get_CurrencyGroupSizes();
    // public System.Int32[] get_NumberGroupSizes()
    // Offset: 0x2148678
    ::ArrayW<int> get_NumberGroupSizes();
    // public System.Int32[] get_PercentGroupSizes()
    // Offset: 0x21486F8
    ::ArrayW<int> get_PercentGroupSizes();
    // public System.String get_CurrencyGroupSeparator()
    // Offset: 0x2148778
    ::StringW get_CurrencyGroupSeparator();
    // public System.Void set_CurrencyGroupSeparator(System.String value)
    // Offset: 0x2148780
    void set_CurrencyGroupSeparator(::StringW value);
    // public System.String get_CurrencySymbol()
    // Offset: 0x21487EC
    ::StringW get_CurrencySymbol();
    // static public System.Globalization.NumberFormatInfo get_CurrentInfo()
    // Offset: 0x2148480
    static ::System::Globalization::NumberFormatInfo* get_CurrentInfo();
    // public System.String get_NaNSymbol()
    // Offset: 0x21487F4
    ::StringW get_NaNSymbol();
    // public System.Int32 get_CurrencyNegativePattern()
    // Offset: 0x21487FC
    int get_CurrencyNegativePattern();
    // public System.Int32 get_NumberNegativePattern()
    // Offset: 0x2148804
    int get_NumberNegativePattern();
    // public System.Int32 get_PercentPositivePattern()
    // Offset: 0x214880C
    int get_PercentPositivePattern();
    // public System.Int32 get_PercentNegativePattern()
    // Offset: 0x2148814
    int get_PercentNegativePattern();
    // public System.String get_NegativeInfinitySymbol()
    // Offset: 0x214881C
    ::StringW get_NegativeInfinitySymbol();
    // public System.String get_NegativeSign()
    // Offset: 0x2148824
    ::StringW get_NegativeSign();
    // public System.Int32 get_NumberDecimalDigits()
    // Offset: 0x214882C
    int get_NumberDecimalDigits();
    // public System.String get_NumberDecimalSeparator()
    // Offset: 0x2148834
    ::StringW get_NumberDecimalSeparator();
    // public System.String get_NumberGroupSeparator()
    // Offset: 0x214883C
    ::StringW get_NumberGroupSeparator();
    // public System.Void set_NumberGroupSeparator(System.String value)
    // Offset: 0x2148844
    void set_NumberGroupSeparator(::StringW value);
    // public System.Int32 get_CurrencyPositivePattern()
    // Offset: 0x21488B0
    int get_CurrencyPositivePattern();
    // public System.String get_PositiveInfinitySymbol()
    // Offset: 0x21488B8
    ::StringW get_PositiveInfinitySymbol();
    // public System.String get_PositiveSign()
    // Offset: 0x21488C0
    ::StringW get_PositiveSign();
    // public System.Int32 get_PercentDecimalDigits()
    // Offset: 0x21488C8
    int get_PercentDecimalDigits();
    // public System.String get_PercentDecimalSeparator()
    // Offset: 0x21488D0
    ::StringW get_PercentDecimalSeparator();
    // public System.String get_PercentGroupSeparator()
    // Offset: 0x21488D8
    ::StringW get_PercentGroupSeparator();
    // public System.Void set_PercentGroupSeparator(System.String value)
    // Offset: 0x21488E0
    void set_PercentGroupSeparator(::StringW value);
    // public System.String get_PercentSymbol()
    // Offset: 0x214894C
    ::StringW get_PercentSymbol();
    // public System.String get_PerMilleSymbol()
    // Offset: 0x2148954
    ::StringW get_PerMilleSymbol();
    // System.Void .ctor(System.Globalization.CultureData cultureData)
    // Offset: 0x2147B8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberFormatInfo* New_ctor(::System::Globalization::CultureData* cultureData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::NumberFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberFormatInfo*, creationType>(cultureData)));
    }
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x2147F90
    void OnSerializing(::System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x2148020
    void OnDeserializing(::System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x2148024
    void OnDeserialized(::System::Runtime::Serialization::StreamingContext ctx);
    // static private System.Void VerifyGroupSeparator(System.String groupSep, System.String propertyName)
    // Offset: 0x2148028
    static void VerifyGroupSeparator(::StringW groupSep, ::StringW propertyName);
    // private System.Void VerifyWritable()
    // Offset: 0x21480CC
    void VerifyWritable();
    // static public System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider)
    // Offset: 0x21482DC
    static ::System::Globalization::NumberFormatInfo* GetInstance(::System::IFormatProvider* formatProvider);
    // public System.Object Clone()
    // Offset: 0x214856C
    ::Il2CppObject* Clone();
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x214895C
    ::Il2CppObject* GetFormat(::System::Type* formatType);
    // static public System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2148210
    static ::System::Globalization::NumberFormatInfo* ReadOnly(::System::Globalization::NumberFormatInfo* nfi);
    // static System.Void ValidateParseStyleInteger(System.Globalization.NumberStyles style)
    // Offset: 0x21489F8
    static void ValidateParseStyleInteger(::System::Globalization::NumberStyles style);
    // static System.Void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style)
    // Offset: 0x2148AEC
    static void ValidateParseStyleFloatingPoint(::System::Globalization::NumberStyles style);
    // public System.Void .ctor()
    // Offset: 0x2147B84
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberFormatInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::NumberFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberFormatInfo*, creationType>()));
    }
  }; // System.Globalization.NumberFormatInfo
  #pragma pack(pop)
  static check_size<sizeof(NumberFormatInfo), 212 + sizeof(bool)> __System_Globalization_NumberFormatInfoSizeCheck;
  static_assert(sizeof(NumberFormatInfo) == 0xD5);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_InvariantInfo
// Il2CppName: get_InvariantInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (*)()>(&System::Globalization::NumberFormatInfo::get_InvariantInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_InvariantInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyDecimalDigits
// Il2CppName: get_CurrencyDecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyDecimalDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyDecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyDecimalSeparator
// Il2CppName: get_CurrencyDecimalSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyDecimalSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyDecimalSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyGroupSizes
// Il2CppName: get_CurrencyGroupSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyGroupSizes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyGroupSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NumberGroupSizes
// Il2CppName: get_NumberGroupSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NumberGroupSizes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NumberGroupSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentGroupSizes
// Il2CppName: get_PercentGroupSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentGroupSizes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentGroupSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyGroupSeparator
// Il2CppName: get_CurrencyGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyGroupSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::set_CurrencyGroupSeparator
// Il2CppName: set_CurrencyGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::StringW)>(&System::Globalization::NumberFormatInfo::set_CurrencyGroupSeparator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "set_CurrencyGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencySymbol
// Il2CppName: get_CurrencySymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencySymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencySymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrentInfo
// Il2CppName: get_CurrentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (*)()>(&System::Globalization::NumberFormatInfo::get_CurrentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NaNSymbol
// Il2CppName: get_NaNSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NaNSymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NaNSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyNegativePattern
// Il2CppName: get_CurrencyNegativePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyNegativePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyNegativePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NumberNegativePattern
// Il2CppName: get_NumberNegativePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NumberNegativePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NumberNegativePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentPositivePattern
// Il2CppName: get_PercentPositivePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentPositivePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentPositivePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentNegativePattern
// Il2CppName: get_PercentNegativePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentNegativePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentNegativePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NegativeInfinitySymbol
// Il2CppName: get_NegativeInfinitySymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NegativeInfinitySymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NegativeInfinitySymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NegativeSign
// Il2CppName: get_NegativeSign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NegativeSign)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NegativeSign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NumberDecimalDigits
// Il2CppName: get_NumberDecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NumberDecimalDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NumberDecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NumberDecimalSeparator
// Il2CppName: get_NumberDecimalSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NumberDecimalSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NumberDecimalSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_NumberGroupSeparator
// Il2CppName: get_NumberGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_NumberGroupSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_NumberGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::set_NumberGroupSeparator
// Il2CppName: set_NumberGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::StringW)>(&System::Globalization::NumberFormatInfo::set_NumberGroupSeparator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "set_NumberGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_CurrencyPositivePattern
// Il2CppName: get_CurrencyPositivePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_CurrencyPositivePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_CurrencyPositivePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PositiveInfinitySymbol
// Il2CppName: get_PositiveInfinitySymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PositiveInfinitySymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PositiveInfinitySymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PositiveSign
// Il2CppName: get_PositiveSign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PositiveSign)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PositiveSign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentDecimalDigits
// Il2CppName: get_PercentDecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentDecimalDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentDecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentDecimalSeparator
// Il2CppName: get_PercentDecimalSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentDecimalSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentDecimalSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentGroupSeparator
// Il2CppName: get_PercentGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentGroupSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::set_PercentGroupSeparator
// Il2CppName: set_PercentGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::StringW)>(&System::Globalization::NumberFormatInfo::set_PercentGroupSeparator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "set_PercentGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PercentSymbol
// Il2CppName: get_PercentSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PercentSymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PercentSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::get_PerMilleSymbol
// Il2CppName: get_PerMilleSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::get_PerMilleSymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "get_PerMilleSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::OnSerializing
// Il2CppName: OnSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::NumberFormatInfo::OnSerializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "OnSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::OnDeserializing
// Il2CppName: OnDeserializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::NumberFormatInfo::OnDeserializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "OnDeserializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::OnDeserialized
// Il2CppName: OnDeserialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Globalization::NumberFormatInfo::OnDeserialized)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "OnDeserialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::VerifyGroupSeparator
// Il2CppName: VerifyGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&System::Globalization::NumberFormatInfo::VerifyGroupSeparator)> {
  static const MethodInfo* get() {
    static auto* groupSep = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "VerifyGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupSep, propertyName});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::VerifyWritable
// Il2CppName: VerifyWritable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::VerifyWritable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "VerifyWritable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (*)(::System::IFormatProvider*)>(&System::Globalization::NumberFormatInfo::GetInstance)> {
  static const MethodInfo* get() {
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatProvider});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::NumberFormatInfo::*)()>(&System::Globalization::NumberFormatInfo::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::GetFormat
// Il2CppName: GetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::NumberFormatInfo::*)(::System::Type*)>(&System::Globalization::NumberFormatInfo::GetFormat)> {
  static const MethodInfo* get() {
    static auto* formatType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "GetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatType});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::ReadOnly
// Il2CppName: ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (*)(::System::Globalization::NumberFormatInfo*)>(&System::Globalization::NumberFormatInfo::ReadOnly)> {
  static const MethodInfo* get() {
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nfi});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::ValidateParseStyleInteger
// Il2CppName: ValidateParseStyleInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Globalization::NumberStyles)>(&System::Globalization::NumberFormatInfo::ValidateParseStyleInteger)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "ValidateParseStyleInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::ValidateParseStyleFloatingPoint
// Il2CppName: ValidateParseStyleFloatingPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Globalization::NumberStyles)>(&System::Globalization::NumberFormatInfo::ValidateParseStyleFloatingPoint)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::NumberFormatInfo*), "ValidateParseStyleFloatingPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: System::Globalization::NumberFormatInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
