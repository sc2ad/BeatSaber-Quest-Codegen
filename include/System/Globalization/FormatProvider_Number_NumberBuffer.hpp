// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Globalization.FormatProvider/System.Globalization.Number
#include "System/Globalization/FormatProvider_Number.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::FormatProvider::Number::NumberBuffer, "System.Globalization", "FormatProvider/Number/NumberBuffer");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.FormatProvider/System.Globalization.Number/System.Globalization.NumberBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct FormatProvider::Number::NumberBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 precision
    // Size: 0x4
    // Offset: 0x0
    int precision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 scale
    // Size: 0x4
    // Offset: 0x4
    int scale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean sign
    // Size: 0x1
    // Offset: 0x8
    bool sign;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sign and: overrideDigits
    char __padding2[0x7] = {};
    // public System.Char* overrideDigits
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppChar* overrideDigits;
    // Field size check
    static_assert(sizeof(::Il2CppChar*) == 0x8);
    public:
    // Creating value type constructor for type: NumberBuffer
    constexpr NumberBuffer(int precision_ = {}, int scale_ = {}, bool sign_ = {}, ::Il2CppChar* overrideDigits_ = {}) noexcept : precision{precision_}, scale{scale_}, sign{sign_}, overrideDigits{overrideDigits_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 precision
    [[deprecated("Use field access instead!")]] int& dyn_precision();
    // Get instance field reference: public System.Int32 scale
    [[deprecated("Use field access instead!")]] int& dyn_scale();
    // Get instance field reference: public System.Boolean sign
    [[deprecated("Use field access instead!")]] bool& dyn_sign();
    // Get instance field reference: public System.Char* overrideDigits
    [[deprecated("Use field access instead!")]] ::Il2CppChar*& dyn_overrideDigits();
    // public System.Char* get_digits()
    // Offset: 0xA7AB80
    ::Il2CppChar* get_digits();
  }; // System.Globalization.FormatProvider/System.Globalization.Number/System.Globalization.NumberBuffer
  #pragma pack(pop)
  static check_size<sizeof(FormatProvider::Number::NumberBuffer), 16 + sizeof(::Il2CppChar*)> __System_Globalization_FormatProvider_Number_NumberBufferSizeCheck;
  static_assert(sizeof(FormatProvider::Number::NumberBuffer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::FormatProvider::Number::NumberBuffer::get_digits
// Il2CppName: get_digits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (System::Globalization::FormatProvider::Number::NumberBuffer::*)()>(&System::Globalization::FormatProvider::Number::NumberBuffer::get_digits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::FormatProvider::Number::NumberBuffer), "get_digits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
