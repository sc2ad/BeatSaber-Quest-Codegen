// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: DateTimeFormatInfo
  class DateTimeFormatInfo;
  // Forward declaring type: TextInfo
  class TextInfo;
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: CultureData
  class CultureData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Globalization::CultureInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Globalization::CultureInfo*, "System.Globalization", "CultureInfo");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0xC9
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.CultureInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 103A80C
  class CultureInfo : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::IFormatProvider*/ {
    public:
    // Nested type: ::System::Globalization::CultureInfo::Data
    struct Data;
    public:
    // private System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x10
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isReadOnly and: cultureID
    char __padding0[0x3] = {};
    // private System.Int32 cultureID
    // Size: 0x4
    // Offset: 0x14
    int cultureID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 parent_lcid
    // Size: 0x4
    // Offset: 0x18
    int parent_lcid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 datetime_index
    // Size: 0x4
    // Offset: 0x1C
    int datetime_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 number_index
    // Size: 0x4
    // Offset: 0x20
    int number_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 default_calendar_type
    // Size: 0x4
    // Offset: 0x24
    int default_calendar_type;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0x28
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_useUserOverride and: numInfo
    char __padding6[0x7] = {};
    // System.Globalization.NumberFormatInfo numInfo
    // Size: 0x8
    // Offset: 0x30
    ::System::Globalization::NumberFormatInfo* numInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::NumberFormatInfo*) == 0x8);
    // System.Globalization.DateTimeFormatInfo dateTimeInfo
    // Size: 0x8
    // Offset: 0x38
    ::System::Globalization::DateTimeFormatInfo* dateTimeInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::DateTimeFormatInfo*) == 0x8);
    // private System.Globalization.TextInfo textInfo
    // Size: 0x8
    // Offset: 0x40
    ::System::Globalization::TextInfo* textInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::TextInfo*) == 0x8);
    // System.String m_name
    // Size: 0x8
    // Offset: 0x48
    ::StringW m_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String englishname
    // Size: 0x8
    // Offset: 0x50
    ::StringW englishname;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String nativename
    // Size: 0x8
    // Offset: 0x58
    ::StringW nativename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String iso3lang
    // Size: 0x8
    // Offset: 0x60
    ::StringW iso3lang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String iso2lang
    // Size: 0x8
    // Offset: 0x68
    ::StringW iso2lang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String win3lang
    // Size: 0x8
    // Offset: 0x70
    ::StringW win3lang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String territory
    // Size: 0x8
    // Offset: 0x78
    ::StringW territory;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String[] native_calendar_names
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::StringW> native_calendar_names;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Globalization.CompareInfo compareInfo
    // Size: 0x8
    // Offset: 0x88
    ::System::Globalization::CompareInfo* compareInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::CompareInfo*) == 0x8);
    // private readonly System.Void* textinfo_data
    // Size: 0x8
    // Offset: 0x90
    void* textinfo_data;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // private System.Int32 m_dataItem
    // Size: 0x4
    // Offset: 0x98
    int m_dataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_dataItem and: calendar
    char __padding20[0x4] = {};
    // private System.Globalization.Calendar calendar
    // Size: 0x8
    // Offset: 0xA0
    ::System::Globalization::Calendar* calendar;
    // Field size check
    static_assert(sizeof(::System::Globalization::Calendar*) == 0x8);
    // private System.Globalization.CultureInfo parent_culture
    // Size: 0x8
    // Offset: 0xA8
    ::System::Globalization::CultureInfo* parent_culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // private System.Boolean constructed
    // Size: 0x1
    // Offset: 0xB0
    bool constructed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: constructed and: cached_serialized_form
    char __padding23[0x7] = {};
    // System.Byte[] cached_serialized_form
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<uint8_t> cached_serialized_form;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Globalization.CultureData m_cultureData
    // Size: 0x8
    // Offset: 0xC0
    ::System::Globalization::CultureData* m_cultureData;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureData*) == 0x8);
    // System.Boolean m_isInherited
    // Size: 0x1
    // Offset: 0xC8
    bool m_isInherited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormatProvider
    operator ::System::IFormatProvider() noexcept {
      return *reinterpret_cast<::System::IFormatProvider*>(this);
    }
    // Creating interface conversion operator: i_IFormatProvider
    inline ::System::IFormatProvider* i_IFormatProvider() noexcept {
      return reinterpret_cast<::System::IFormatProvider*>(this);
    }
    // Get static field: static private System.Globalization.CultureInfo invariant_culture_info
    static ::System::Globalization::CultureInfo* _get_invariant_culture_info();
    // Set static field: static private System.Globalization.CultureInfo invariant_culture_info
    static void _set_invariant_culture_info(::System::Globalization::CultureInfo* value);
    // Get static field: static private System.Object shared_table_lock
    static ::Il2CppObject* _get_shared_table_lock();
    // Set static field: static private System.Object shared_table_lock
    static void _set_shared_table_lock(::Il2CppObject* value);
    // Get static field: static private System.Globalization.CultureInfo default_current_culture
    static ::System::Globalization::CultureInfo* _get_default_current_culture();
    // Set static field: static private System.Globalization.CultureInfo default_current_culture
    static void _set_default_current_culture(::System::Globalization::CultureInfo* value);
    // static field const value: static System.Int32 InvariantCultureId
    static constexpr const int InvariantCultureId = 127;
    // Get static field: static System.Int32 InvariantCultureId
    static int _get_InvariantCultureId();
    // Set static field: static System.Int32 InvariantCultureId
    static void _set_InvariantCultureId(int value);
    // static field const value: static private System.Int32 CalendarTypeBits
    static constexpr const int CalendarTypeBits = 8;
    // Get static field: static private System.Int32 CalendarTypeBits
    static int _get_CalendarTypeBits();
    // Set static field: static private System.Int32 CalendarTypeBits
    static void _set_CalendarTypeBits(int value);
    // static field const value: static private System.String MSG_READONLY
    static constexpr const char* MSG_READONLY = "This instance is read only";
    // Get static field: static private System.String MSG_READONLY
    static ::StringW _get_MSG_READONLY();
    // Set static field: static private System.String MSG_READONLY
    static void _set_MSG_READONLY(::StringW value);
    // Get static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture
    static ::System::Globalization::CultureInfo* _get_s_DefaultThreadCurrentUICulture();
    // Set static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture
    static void _set_s_DefaultThreadCurrentUICulture(::System::Globalization::CultureInfo* value);
    // Get static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentCulture
    static ::System::Globalization::CultureInfo* _get_s_DefaultThreadCurrentCulture();
    // Set static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentCulture
    static void _set_s_DefaultThreadCurrentCulture(::System::Globalization::CultureInfo* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo> shared_by_number
    static ::System::Collections::Generic::Dictionary_2<int, ::System::Globalization::CultureInfo*>* _get_shared_by_number();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo> shared_by_number
    static void _set_shared_by_number(::System::Collections::Generic::Dictionary_2<int, ::System::Globalization::CultureInfo*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> shared_by_name
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Globalization::CultureInfo*>* _get_shared_by_name();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> shared_by_name
    static void _set_shared_by_name(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Globalization::CultureInfo*>* value);
    // Get static field: static readonly System.Boolean IsTaiwanSku
    static bool _get_IsTaiwanSku();
    // Set static field: static readonly System.Boolean IsTaiwanSku
    static void _set_IsTaiwanSku(bool value);
    // Get instance field reference: private System.Boolean m_isReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_isReadOnly();
    // Get instance field reference: private System.Int32 cultureID
    [[deprecated("Use field access instead!")]] int& dyn_cultureID();
    // Get instance field reference: private System.Int32 parent_lcid
    [[deprecated("Use field access instead!")]] int& dyn_parent_lcid();
    // Get instance field reference: private System.Int32 datetime_index
    [[deprecated("Use field access instead!")]] int& dyn_datetime_index();
    // Get instance field reference: private System.Int32 number_index
    [[deprecated("Use field access instead!")]] int& dyn_number_index();
    // Get instance field reference: private System.Int32 default_calendar_type
    [[deprecated("Use field access instead!")]] int& dyn_default_calendar_type();
    // Get instance field reference: private System.Boolean m_useUserOverride
    [[deprecated("Use field access instead!")]] bool& dyn_m_useUserOverride();
    // Get instance field reference: System.Globalization.NumberFormatInfo numInfo
    [[deprecated("Use field access instead!")]] ::System::Globalization::NumberFormatInfo*& dyn_numInfo();
    // Get instance field reference: System.Globalization.DateTimeFormatInfo dateTimeInfo
    [[deprecated("Use field access instead!")]] ::System::Globalization::DateTimeFormatInfo*& dyn_dateTimeInfo();
    // Get instance field reference: private System.Globalization.TextInfo textInfo
    [[deprecated("Use field access instead!")]] ::System::Globalization::TextInfo*& dyn_textInfo();
    // Get instance field reference: System.String m_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_name();
    // Get instance field reference: private System.String englishname
    [[deprecated("Use field access instead!")]] ::StringW& dyn_englishname();
    // Get instance field reference: private System.String nativename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nativename();
    // Get instance field reference: private System.String iso3lang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_iso3lang();
    // Get instance field reference: private System.String iso2lang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_iso2lang();
    // Get instance field reference: private System.String win3lang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_win3lang();
    // Get instance field reference: private System.String territory
    [[deprecated("Use field access instead!")]] ::StringW& dyn_territory();
    // Get instance field reference: private System.String[] native_calendar_names
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_native_calendar_names();
    // Get instance field reference: private System.Globalization.CompareInfo compareInfo
    [[deprecated("Use field access instead!")]] ::System::Globalization::CompareInfo*& dyn_compareInfo();
    // Get instance field reference: private readonly System.Void* textinfo_data
    [[deprecated("Use field access instead!")]] void*& dyn_textinfo_data();
    // Get instance field reference: private System.Int32 m_dataItem
    [[deprecated("Use field access instead!")]] int& dyn_m_dataItem();
    // Get instance field reference: private System.Globalization.Calendar calendar
    [[deprecated("Use field access instead!")]] ::System::Globalization::Calendar*& dyn_calendar();
    // Get instance field reference: private System.Globalization.CultureInfo parent_culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn_parent_culture();
    // Get instance field reference: private System.Boolean constructed
    [[deprecated("Use field access instead!")]] bool& dyn_constructed();
    // Get instance field reference: System.Byte[] cached_serialized_form
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_cached_serialized_form();
    // Get instance field reference: System.Globalization.CultureData m_cultureData
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureData*& dyn_m_cultureData();
    // Get instance field reference: System.Boolean m_isInherited
    [[deprecated("Use field access instead!")]] bool& dyn_m_isInherited();
    // static public System.Globalization.CultureInfo get_InvariantCulture()
    // Offset: 0x195F260
    static ::System::Globalization::CultureInfo* get_InvariantCulture();
    // static public System.Globalization.CultureInfo get_CurrentCulture()
    // Offset: 0x1962894
    static ::System::Globalization::CultureInfo* get_CurrentCulture();
    // static public System.Globalization.CultureInfo get_CurrentUICulture()
    // Offset: 0x196C2F4
    static ::System::Globalization::CultureInfo* get_CurrentUICulture();
    // System.String get_Territory()
    // Offset: 0x196C7B8
    ::StringW get_Territory();
    // public System.Int32 get_LCID()
    // Offset: 0x196C7C0
    int get_LCID();
    // public System.String get_Name()
    // Offset: 0x196C7C8
    ::StringW get_Name();
    // public System.Globalization.Calendar get_Calendar()
    // Offset: 0x196C7D0
    ::System::Globalization::Calendar* get_Calendar();
    // public System.Globalization.CultureInfo get_Parent()
    // Offset: 0x196CA8C
    ::System::Globalization::CultureInfo* get_Parent();
    // public System.Globalization.TextInfo get_TextInfo()
    // Offset: 0x196CCD8
    ::System::Globalization::TextInfo* get_TextInfo();
    // public System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x196D190
    ::System::Globalization::CompareInfo* get_CompareInfo();
    // public System.Boolean get_IsNeutralCulture()
    // Offset: 0x196D2A8
    bool get_IsNeutralCulture();
    // public System.Globalization.NumberFormatInfo get_NumberFormat()
    // Offset: 0x196D300
    ::System::Globalization::NumberFormatInfo* get_NumberFormat();
    // public System.Void set_NumberFormat(System.Globalization.NumberFormatInfo value)
    // Offset: 0x196D3A0
    void set_NumberFormat(::System::Globalization::NumberFormatInfo* value);
    // public System.Globalization.DateTimeFormatInfo get_DateTimeFormat()
    // Offset: 0x196D484
    ::System::Globalization::DateTimeFormatInfo* get_DateTimeFormat();
    // public System.Void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value)
    // Offset: 0x196D5CC
    void set_DateTimeFormat(::System::Globalization::DateTimeFormatInfo* value);
    // public System.String get_EnglishName()
    // Offset: 0x196D6B0
    ::StringW get_EnglishName();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x196D6EC
    bool get_IsReadOnly();
    // System.Int32 get_CalendarType()
    // Offset: 0x196DBA8
    int get_CalendarType();
    // static public System.Globalization.CultureInfo get_DefaultThreadCurrentCulture()
    // Offset: 0x19701C4
    static ::System::Globalization::CultureInfo* get_DefaultThreadCurrentCulture();
    // static public System.Void set_DefaultThreadCurrentCulture(System.Globalization.CultureInfo value)
    // Offset: 0x1970234
    static void set_DefaultThreadCurrentCulture(::System::Globalization::CultureInfo* value);
    // static public System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture()
    // Offset: 0x19702A4
    static ::System::Globalization::CultureInfo* get_DefaultThreadCurrentUICulture();
    // System.String get_SortName()
    // Offset: 0x1970314
    ::StringW get_SortName();
    // static System.Globalization.CultureInfo get_UserDefaultUICulture()
    // Offset: 0x197031C
    static ::System::Globalization::CultureInfo* get_UserDefaultUICulture();
    // static System.Globalization.CultureInfo get_UserDefaultCulture()
    // Offset: 0x1970378
    static ::System::Globalization::CultureInfo* get_UserDefaultCulture();
    // public System.Void .ctor(System.Int32 culture)
    // Offset: 0x196CCCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(int culture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(culture)));
    }
    // public System.Void .ctor(System.Int32 culture, System.Boolean useUserOverride)
    // Offset: 0x196D91C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(int culture, bool useUserOverride) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(culture, useUserOverride)));
    }
    // private System.Void .ctor(System.Int32 culture, System.Boolean useUserOverride, System.Boolean read_only)
    // Offset: 0x196D928
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(int culture, bool useUserOverride, bool read_only) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(culture, useUserOverride, read_only)));
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0x196CCC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(name)));
    }
    // public System.Void .ctor(System.String name, System.Boolean useUserOverride)
    // Offset: 0x196B908
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(::StringW name, bool useUserOverride) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(name, useUserOverride)));
    }
    // private System.Void .ctor(System.String name, System.Boolean useUserOverride, System.Boolean read_only)
    // Offset: 0x196DC44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor(::StringW name, bool useUserOverride, bool read_only) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>(name, useUserOverride, read_only)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1970564
    static void _cctor();
    // static System.Globalization.CultureInfo ConstructCurrentCulture()
    // Offset: 0x196C318
    static ::System::Globalization::CultureInfo* ConstructCurrentCulture();
    // static System.Globalization.CultureInfo ConstructCurrentUICulture()
    // Offset: 0x196C75C
    static ::System::Globalization::CultureInfo* ConstructCurrentUICulture();
    // public System.Object Clone()
    // Offset: 0x196CE44
    ::Il2CppObject* Clone();
    // private System.Globalization.CultureInfo/System.Globalization.Data GetTextInfoData()
    // Offset: 0x196D164
    ::System::Globalization::CultureInfo::Data GetTextInfoData();
    // private System.Void CheckNeutral()
    // Offset: 0x196D2FC
    void CheckNeutral();
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x196D6F4
    ::Il2CppObject* GetFormat(::System::Type* formatType);
    // private System.Void Construct()
    // Offset: 0x196C864
    void Construct();
    // private System.Boolean construct_internal_locale_from_lcid(System.Int32 lcid)
    // Offset: 0x196D7FC
    bool construct_internal_locale_from_lcid(int lcid);
    // private System.Boolean construct_internal_locale_from_name(System.String name)
    // Offset: 0x196D800
    bool construct_internal_locale_from_name(::StringW name);
    // static private System.String get_current_locale_name()
    // Offset: 0x196C4C0
    static ::StringW get_current_locale_name();
    // private System.Void ConstructInvariant(System.Boolean read_only)
    // Offset: 0x196D804
    void ConstructInvariant(bool read_only);
    // private System.Globalization.TextInfo CreateTextInfo(System.Boolean readOnly)
    // Offset: 0x196CDC0
    ::System::Globalization::TextInfo* CreateTextInfo(bool readOnly);
    // static private System.Void insert_into_shared_tables(System.Globalization.CultureInfo c)
    // Offset: 0x196DF4C
    static void insert_into_shared_tables(::System::Globalization::CultureInfo* c);
    // static public System.Globalization.CultureInfo GetCultureInfo(System.Int32 culture)
    // Offset: 0x19698B8
    static ::System::Globalization::CultureInfo* GetCultureInfo(int culture);
    // static public System.Globalization.CultureInfo GetCultureInfo(System.String name)
    // Offset: 0x1968A8C
    static ::System::Globalization::CultureInfo* GetCultureInfo(::StringW name);
    // static System.Globalization.CultureInfo CreateCulture(System.String name, System.Boolean reference)
    // Offset: 0x196E0A4
    static ::System::Globalization::CultureInfo* CreateCulture(::StringW name, bool reference);
    // static public System.Globalization.CultureInfo CreateSpecificCulture(System.String name)
    // Offset: 0x196C4C4
    static ::System::Globalization::CultureInfo* CreateSpecificCulture(::StringW name);
    // static private System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(System.String name)
    // Offset: 0x196E128
    static ::System::Globalization::CultureInfo* CreateSpecificCultureFromNeutral(::StringW name);
    // static private System.Globalization.Calendar CreateCalendar(System.Int32 calendarType)
    // Offset: 0x196C890
    static ::System::Globalization::Calendar* CreateCalendar(int calendarType);
    // static private System.Exception CreateNotFoundException(System.String name)
    // Offset: 0x196DE84
    static ::System::Exception* CreateNotFoundException(::StringW name);
    // static System.Void CheckDomainSafetyObject(System.Object obj, System.Object container)
    // Offset: 0x19703D4
    static void CheckDomainSafetyObject(::Il2CppObject* obj, ::Il2CppObject* container);
    // private System.Void .ctor()
    // Offset: 0x196DF20
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Globalization::CultureInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureInfo*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x196D0A4
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x196D17C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x196D188
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.Globalization.CultureInfo
  #pragma pack(pop)
  static check_size<sizeof(CultureInfo), 200 + sizeof(bool)> __System_Globalization_CultureInfoSizeCheck;
  static_assert(sizeof(CultureInfo) == 0xC9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_InvariantCulture
// Il2CppName: get_InvariantCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_InvariantCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_InvariantCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_CurrentCulture
// Il2CppName: get_CurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_CurrentCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_CurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_CurrentUICulture
// Il2CppName: get_CurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_CurrentUICulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_CurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_Territory
// Il2CppName: get_Territory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_Territory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_Territory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_LCID
// Il2CppName: get_LCID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_LCID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_LCID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_Calendar
// Il2CppName: get_Calendar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::Calendar* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_Calendar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_Calendar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_Parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_TextInfo
// Il2CppName: get_TextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::TextInfo* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_TextInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_TextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_CompareInfo
// Il2CppName: get_CompareInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CompareInfo* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_CompareInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_CompareInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_IsNeutralCulture
// Il2CppName: get_IsNeutralCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_IsNeutralCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_IsNeutralCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_NumberFormat
// Il2CppName: get_NumberFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_NumberFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_NumberFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::set_NumberFormat
// Il2CppName: set_NumberFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::CultureInfo::*)(::System::Globalization::NumberFormatInfo*)>(&System::Globalization::CultureInfo::set_NumberFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "set_NumberFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_DateTimeFormat
// Il2CppName: get_DateTimeFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::DateTimeFormatInfo* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_DateTimeFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_DateTimeFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::set_DateTimeFormat
// Il2CppName: set_DateTimeFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::CultureInfo::*)(::System::Globalization::DateTimeFormatInfo*)>(&System::Globalization::CultureInfo::set_DateTimeFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "set_DateTimeFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_EnglishName
// Il2CppName: get_EnglishName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_EnglishName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_EnglishName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_CalendarType
// Il2CppName: get_CalendarType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_CalendarType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_CalendarType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_DefaultThreadCurrentCulture
// Il2CppName: get_DefaultThreadCurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_DefaultThreadCurrentCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_DefaultThreadCurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::set_DefaultThreadCurrentCulture
// Il2CppName: set_DefaultThreadCurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Globalization::CultureInfo*)>(&System::Globalization::CultureInfo::set_DefaultThreadCurrentCulture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "set_DefaultThreadCurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_DefaultThreadCurrentUICulture
// Il2CppName: get_DefaultThreadCurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_DefaultThreadCurrentUICulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_DefaultThreadCurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_SortName
// Il2CppName: get_SortName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::get_SortName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_SortName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_UserDefaultUICulture
// Il2CppName: get_UserDefaultUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_UserDefaultUICulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_UserDefaultUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_UserDefaultCulture
// Il2CppName: get_UserDefaultCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::get_UserDefaultCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_UserDefaultCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Globalization::CultureInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::ConstructCurrentCulture
// Il2CppName: ConstructCurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::ConstructCurrentCulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "ConstructCurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::ConstructCurrentUICulture
// Il2CppName: ConstructCurrentUICulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)()>(&System::Globalization::CultureInfo::ConstructCurrentUICulture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "ConstructCurrentUICulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::GetTextInfoData
// Il2CppName: GetTextInfoData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo::Data (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::GetTextInfoData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "GetTextInfoData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CheckNeutral
// Il2CppName: CheckNeutral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::CheckNeutral)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CheckNeutral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::GetFormat
// Il2CppName: GetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::CultureInfo::*)(::System::Type*)>(&System::Globalization::CultureInfo::GetFormat)> {
  static const MethodInfo* get() {
    static auto* formatType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "GetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatType});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::Construct)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::construct_internal_locale_from_lcid
// Il2CppName: construct_internal_locale_from_lcid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::CultureInfo::*)(int)>(&System::Globalization::CultureInfo::construct_internal_locale_from_lcid)> {
  static const MethodInfo* get() {
    static auto* lcid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "construct_internal_locale_from_lcid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lcid});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::construct_internal_locale_from_name
// Il2CppName: construct_internal_locale_from_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::CultureInfo::*)(::StringW)>(&System::Globalization::CultureInfo::construct_internal_locale_from_name)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "construct_internal_locale_from_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::get_current_locale_name
// Il2CppName: get_current_locale_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&System::Globalization::CultureInfo::get_current_locale_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "get_current_locale_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::ConstructInvariant
// Il2CppName: ConstructInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::CultureInfo::*)(bool)>(&System::Globalization::CultureInfo::ConstructInvariant)> {
  static const MethodInfo* get() {
    static auto* read_only = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "ConstructInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{read_only});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateTextInfo
// Il2CppName: CreateTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::TextInfo* (System::Globalization::CultureInfo::*)(bool)>(&System::Globalization::CultureInfo::CreateTextInfo)> {
  static const MethodInfo* get() {
    static auto* readOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readOnly});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::insert_into_shared_tables
// Il2CppName: insert_into_shared_tables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Globalization::CultureInfo*)>(&System::Globalization::CultureInfo::insert_into_shared_tables)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "insert_into_shared_tables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::GetCultureInfo
// Il2CppName: GetCultureInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)(int)>(&System::Globalization::CultureInfo::GetCultureInfo)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "GetCultureInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::GetCultureInfo
// Il2CppName: GetCultureInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)(::StringW)>(&System::Globalization::CultureInfo::GetCultureInfo)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "GetCultureInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateCulture
// Il2CppName: CreateCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)(::StringW, bool)>(&System::Globalization::CultureInfo::CreateCulture)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* reference = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, reference});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateSpecificCulture
// Il2CppName: CreateSpecificCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)(::StringW)>(&System::Globalization::CultureInfo::CreateSpecificCulture)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateSpecificCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateSpecificCultureFromNeutral
// Il2CppName: CreateSpecificCultureFromNeutral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (*)(::StringW)>(&System::Globalization::CultureInfo::CreateSpecificCultureFromNeutral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateSpecificCultureFromNeutral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateCalendar
// Il2CppName: CreateCalendar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::Calendar* (*)(int)>(&System::Globalization::CultureInfo::CreateCalendar)> {
  static const MethodInfo* get() {
    static auto* calendarType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateCalendar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{calendarType});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CreateNotFoundException
// Il2CppName: CreateNotFoundException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Globalization::CultureInfo::CreateNotFoundException)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CreateNotFoundException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::CheckDomainSafetyObject
// Il2CppName: CheckDomainSafetyObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Globalization::CultureInfo::CheckDomainSafetyObject)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "CheckDomainSafetyObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, container});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::CultureInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::CultureInfo::*)(::Il2CppObject*)>(&System::Globalization::CultureInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::CultureInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Globalization::CultureInfo::*)()>(&System::Globalization::CultureInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::CultureInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
