// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
// Including type: System.Collections.IEqualityComparer
#include "System/Collections/IEqualityComparer.hpp"
// Including type: System.Collections.IComparer
#include "System/Collections/IComparer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: StringComparer
  class StringComparer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::StringComparer);
DEFINE_IL2CPP_ARG_TYPE(::System::StringComparer*, "System", "StringComparer");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.StringComparer
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 107659C
  class StringComparer : public ::Il2CppObject/*, public ::System::Collections::Generic::IComparer_1<::StringW>, public ::System::Collections::Generic::IEqualityComparer_1<::StringW>, public ::System::Collections::IEqualityComparer, public ::System::Collections::IComparer*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::StringW>
    operator ::System::Collections::Generic::IComparer_1<::StringW>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::StringW>*>(this);
    }
    // Creating interface conversion operator: i_StringW
    inline ::System::Collections::Generic::IComparer_1<::StringW>* i_StringW() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IComparer_1<::StringW>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEqualityComparer_1<::StringW>
    operator ::System::Collections::Generic::IEqualityComparer_1<::StringW>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<::StringW>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IEqualityComparer
    operator ::System::Collections::IEqualityComparer() noexcept {
      return *reinterpret_cast<::System::Collections::IEqualityComparer*>(this);
    }
    // Creating interface conversion operator: i_IEqualityComparer
    inline ::System::Collections::IEqualityComparer* i_IEqualityComparer() noexcept {
      return reinterpret_cast<::System::Collections::IEqualityComparer*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IComparer
    operator ::System::Collections::IComparer() noexcept {
      return *reinterpret_cast<::System::Collections::IComparer*>(this);
    }
    // Creating interface conversion operator: i_IComparer
    inline ::System::Collections::IComparer* i_IComparer() noexcept {
      return reinterpret_cast<::System::Collections::IComparer*>(this);
    }
    // Get static field: static private readonly System.StringComparer _invariantCulture
    static ::System::StringComparer* _get__invariantCulture();
    // Set static field: static private readonly System.StringComparer _invariantCulture
    static void _set__invariantCulture(::System::StringComparer* value);
    // Get static field: static private readonly System.StringComparer _invariantCultureIgnoreCase
    static ::System::StringComparer* _get__invariantCultureIgnoreCase();
    // Set static field: static private readonly System.StringComparer _invariantCultureIgnoreCase
    static void _set__invariantCultureIgnoreCase(::System::StringComparer* value);
    // Get static field: static private readonly System.StringComparer _ordinal
    static ::System::StringComparer* _get__ordinal();
    // Set static field: static private readonly System.StringComparer _ordinal
    static void _set__ordinal(::System::StringComparer* value);
    // Get static field: static private readonly System.StringComparer _ordinalIgnoreCase
    static ::System::StringComparer* _get__ordinalIgnoreCase();
    // Set static field: static private readonly System.StringComparer _ordinalIgnoreCase
    static void _set__ordinalIgnoreCase(::System::StringComparer* value);
    // static public System.StringComparer get_InvariantCultureIgnoreCase()
    // Offset: 0x1F6FD78
    static ::System::StringComparer* get_InvariantCultureIgnoreCase();
    // static public System.StringComparer get_CurrentCultureIgnoreCase()
    // Offset: 0x1F6FDE0
    static ::System::StringComparer* get_CurrentCultureIgnoreCase();
    // static public System.StringComparer get_Ordinal()
    // Offset: 0x1F6FE74
    static ::System::StringComparer* get_Ordinal();
    // static public System.StringComparer get_OrdinalIgnoreCase()
    // Offset: 0x1F6FEDC
    static ::System::StringComparer* get_OrdinalIgnoreCase();
    // static private System.Void .cctor()
    // Offset: 0x1F70280
    static void _cctor();
    // public System.Int32 Compare(System.Object x, System.Object y)
    // Offset: 0x1F6FF44
    int Compare(::Il2CppObject* x, ::Il2CppObject* y);
    // public System.Boolean Equals(System.Object x, System.Object y)
    // Offset: 0x1F700DC
    bool Equals(::Il2CppObject* x, ::Il2CppObject* y);
    // public System.Int32 GetHashCode(System.Object obj)
    // Offset: 0x1F701AC
    int GetHashCode(::Il2CppObject* obj);
    // public System.Int32 Compare(System.String x, System.String y)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Compare(::StringW x, ::StringW y);
    // public System.Boolean Equals(System.String x, System.String y)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::StringW x, ::StringW y);
    // public System.Int32 GetHashCode(System.String obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetHashCode(::StringW obj);
    // protected System.Void .ctor()
    // Offset: 0x1F70278
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringComparer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::StringComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringComparer*, creationType>()));
    }
  }; // System.StringComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::StringComparer::get_InvariantCultureIgnoreCase
// Il2CppName: get_InvariantCultureIgnoreCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::StringComparer* (*)()>(&System::StringComparer::get_InvariantCultureIgnoreCase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "get_InvariantCultureIgnoreCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::StringComparer::get_CurrentCultureIgnoreCase
// Il2CppName: get_CurrentCultureIgnoreCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::StringComparer* (*)()>(&System::StringComparer::get_CurrentCultureIgnoreCase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "get_CurrentCultureIgnoreCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::StringComparer::get_Ordinal
// Il2CppName: get_Ordinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::StringComparer* (*)()>(&System::StringComparer::get_Ordinal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "get_Ordinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::StringComparer::get_OrdinalIgnoreCase
// Il2CppName: get_OrdinalIgnoreCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::StringComparer* (*)()>(&System::StringComparer::get_OrdinalIgnoreCase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "get_OrdinalIgnoreCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::StringComparer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::StringComparer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::StringComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::StringComparer::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::StringComparer::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::StringComparer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::StringComparer::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::StringComparer::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::StringComparer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::StringComparer::*)(::Il2CppObject*)>(&System::StringComparer::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::StringComparer::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::StringComparer::*)(::StringW, ::StringW)>(&System::StringComparer::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::StringComparer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::StringComparer::*)(::StringW, ::StringW)>(&System::StringComparer::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::StringComparer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::StringComparer::*)(::StringW)>(&System::StringComparer::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::StringComparer*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::StringComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
