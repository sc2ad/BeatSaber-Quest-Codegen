// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Generic::LinkedList_1, "System.Collections.Generic", "LinkedList`1");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.LinkedList`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 1085988
  // [DebuggerDisplayAttribute] Offset: 1085988
  template<typename T>
  class LinkedList_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<T>, public ::System::Collections::Generic::IReadOnlyCollection_1<T>, public ::System::Runtime::Serialization::ISerializable, public ::System::Collections::ICollection, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::Collections::Generic::LinkedList_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.LinkedList`1/System.Collections.Generic.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
      public:
      using declaring_type = LinkedList_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Collections.Generic.LinkedList`1<T> _list
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::LinkedList_1<T>* list;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::LinkedList_1<T>*) == 0x8);
      // private System.Collections.Generic.LinkedListNode`1<T> _node
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::LinkedListNode_1<T>* node;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<T>*) == 0x8);
      // private System.Int32 _version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T _current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T current;
      // private System.Int32 _index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::System::Collections::Generic::LinkedList_1<T>* list_ = {}, ::System::Collections::Generic::LinkedListNode_1<T>* node_ = {}, int version_ = {}, T current_ = {}, int index_ = {}) noexcept : list{list_}, node{node_}, version{version_}, current{current_}, index{index_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: i_IEnumerator_1_T
      inline ::System::Collections::Generic::IEnumerator_1<T>* i_IEnumerator_1_T() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
      operator ::System::Runtime::Serialization::ISerializable() noexcept {
        return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
      }
      // Creating interface conversion operator: i_ISerializable
      inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
        return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
      operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
        return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
      }
      // Creating interface conversion operator: i_IDeserializationCallback
      inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
        return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.LinkedList`1<T> _list
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<T>*& dyn__list() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::dyn__list");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_list"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::LinkedList_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.LinkedListNode`1<T> _node
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<T>*& dyn__node() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::dyn__node");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_node"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::LinkedListNode_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _version
      [[deprecated("Use field access instead!")]] int& dyn__version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::dyn__version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T _current
      [[deprecated("Use field access instead!")]] T& dyn__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::dyn__current");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _index
      [[deprecated("Use field access instead!")]] int& dyn__index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::dyn__index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Collections.Generic.LinkedList`1<T> list)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::LinkedList_1<T>* list) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
      }
      // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::System.Runtime.Serialization.ISerializable.GetObjectData");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
      }
      // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Enumerator::System.Runtime.Serialization.IDeserializationCallback.OnDeserialization");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
      }
    }; // System.Collections.Generic.LinkedList`1/System.Collections.Generic.Enumerator
    // Could not write size check! Type: System.Collections.Generic.LinkedList`1/System.Collections.Generic.Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // System.Collections.Generic.LinkedListNode`1<T> head
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::LinkedListNode_1<T>* head;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<T>*) == 0x8);
    // System.Int32 count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Runtime.Serialization.SerializationInfo _siInfo
    // Size: 0x8
    // Offset: 0x0
    ::System::Runtime::Serialization::SerializationInfo* siInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::SerializationInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<T>
    operator ::System::Collections::Generic::ICollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_ICollection_1_T
    inline ::System::Collections::Generic::ICollection_1<T>* i_ICollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<T>
    operator ::System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_IReadOnlyCollection_1_T
    inline ::System::Collections::Generic::IReadOnlyCollection_1<T>* i_IReadOnlyCollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: i_ICollection
    inline ::System::Collections::ICollection* i_ICollection() noexcept {
      return reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::StringW _get_VersionName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_get_VersionName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "VersionName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_set_VersionName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "VersionName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String CountName
    static ::StringW _get_CountName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_get_CountName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "CountName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String CountName
    static void _set_CountName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_set_CountName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "CountName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ValuesName
    static ::StringW _get_ValuesName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_get_ValuesName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "ValuesName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ValuesName
    static void _set_ValuesName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::_set_ValuesName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "ValuesName", value));
    }
    // Autogenerated instance field getter
    // Get instance field: System.Collections.Generic.LinkedListNode`1<T> head
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<T>*& dyn_head() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::dyn_head");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "head"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::LinkedListNode_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::dyn_count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::dyn_version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Object _syncRoot
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::dyn__syncRoot");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Runtime.Serialization.SerializationInfo _siInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::SerializationInfo*& dyn__siInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::dyn__siInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_siInfo"))->offset;
      return *reinterpret_cast<::System::Runtime::Serialization::SerializationInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> get_First()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::get_First");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_First", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> get_Last()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* get_Last() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::get_Last");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Last", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.ICollection.get_SyncRoot");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinkedList_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinkedList_1<T>*, creationType>()));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinkedList_1<T>* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinkedList_1<T>*, creationType>(info, context)));
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Add(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.Generic.ICollection<T>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddAfter(System.Collections.Generic.LinkedListNode`1<T> node, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* AddAfter(::System::Collections::Generic::LinkedListNode_1<T>* node, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddAfter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, node, value);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddBefore(System.Collections.Generic.LinkedListNode`1<T> node, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* AddBefore(::System::Collections::Generic::LinkedListNode_1<T>* node, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddBefore");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, node, value);
    }
    // public System.Void AddBefore(System.Collections.Generic.LinkedListNode`1<T> node, System.Collections.Generic.LinkedListNode`1<T> newNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddBefore(::System::Collections::Generic::LinkedListNode_1<T>* node, ::System::Collections::Generic::LinkedListNode_1<T>* newNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddBefore");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(newNode)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, newNode);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddFirst(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* AddFirst(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, value);
    }
    // public System.Void AddFirst(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddFirst(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddLast(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* AddLast(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, value);
    }
    // public System.Void AddLast(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddLast(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::AddLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Void CopyTo(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> Find(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* Find(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, value);
    }
    // public System.Collections.Generic.LinkedList`1/System.Collections.Generic.Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::LinkedList_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::LinkedList_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // public System.Boolean Remove(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Void Remove(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void RemoveFirst()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveFirst() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::RemoveFirst");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void RemoveLast()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveLast() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::RemoveLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::GetObjectData");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::OnDeserialization");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
    }
    // private System.Void InternalInsertNodeBefore(System.Collections.Generic.LinkedListNode`1<T> node, System.Collections.Generic.LinkedListNode`1<T> newNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InternalInsertNodeBefore(::System::Collections::Generic::LinkedListNode_1<T>* node, ::System::Collections::Generic::LinkedListNode_1<T>* newNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::InternalInsertNodeBefore");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInsertNodeBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(newNode)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node, newNode);
    }
    // private System.Void InternalInsertNodeToEmptyList(System.Collections.Generic.LinkedListNode`1<T> newNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InternalInsertNodeToEmptyList(::System::Collections::Generic::LinkedListNode_1<T>* newNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::InternalInsertNodeToEmptyList");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalInsertNodeToEmptyList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newNode)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newNode);
    }
    // System.Void InternalRemoveNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InternalRemoveNode(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::InternalRemoveNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRemoveNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // System.Void ValidateNewNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ValidateNewNode(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::ValidateNewNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateNewNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // System.Void ValidateNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ValidateNode(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::ValidateNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.ICollection.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::LinkedList_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // System.Collections.Generic.LinkedList`1
  // Could not write size check! Type: System.Collections.Generic.LinkedList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
