// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Slot because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
  // Skipping declaration: IEnumerable`1 because it is already included!
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Generic::HashSet_1, "System.Collections.Generic", "HashSet`1");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.HashSet`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 104B0CC
  // [DebuggerTypeProxyAttribute] Offset: 104B0CC
  template<typename T>
  class HashSet_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<T>, public ::System::Collections::Generic::IReadOnlyCollection_1<T>, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::Collections::Generic::HashSet_1::Slot<T>
    struct Slot;
    // Nested type: ::System::Collections::Generic::HashSet_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.HashSet`1/System.Collections.Generic.Slot
    // [TokenAttribute] Offset: FFFFFFFF
    struct Slot : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = HashSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Slot";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // System.Int32 hashCode
      // Size: 0x4
      // Offset: 0x0
      int hashCode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 next
      // Size: 0x4
      // Offset: 0x0
      int next;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // T value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T value;
      public:
      // Creating value type constructor for type: Slot
      constexpr Slot(int hashCode_ = {}, int next_ = {}, T value_ = {}) noexcept : hashCode{hashCode_}, next{next_}, value{value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 hashCode
      [[deprecated("Use field access instead!")]] int& dyn_hashCode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Slot::dyn_hashCode");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "hashCode"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 next
      [[deprecated("Use field access instead!")]] int& dyn_next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Slot::dyn_next");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "next"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: T value
      [[deprecated("Use field access instead!")]] T& dyn_value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Slot::dyn_value");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Collections.Generic.HashSet`1/System.Collections.Generic.Slot
    // Could not write size check! Type: System.Collections.Generic.HashSet`1/System.Collections.Generic.Slot is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = HashSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Collections.Generic.HashSet`1<T> _set
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::HashSet_1<T>* set;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::HashSet_1<T>*) == 0x8);
      // private System.Int32 _index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T _current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T current;
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::System::Collections::Generic::HashSet_1<T>* set_ = {}, int index_ = {}, int version_ = {}, T current_ = {}) noexcept : set{set_}, index{index_}, version{version_}, current{current_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: i_IEnumerator_1_T
      inline ::System::Collections::Generic::IEnumerator_1<T>* i_IEnumerator_1_T() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.HashSet`1<T> _set
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<T>*& dyn__set() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::dyn__set");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_set"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::HashSet_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _index
      [[deprecated("Use field access instead!")]] int& dyn__index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::dyn__index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _version
      [[deprecated("Use field access instead!")]] int& dyn__version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::dyn__version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T _current
      [[deprecated("Use field access instead!")]] T& dyn__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::dyn__current");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Collections.Generic.HashSet`1<T> set)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::HashSet_1<T>* set) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, set);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Enumerator::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator
    // Could not write size check! Type: System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private System.Int32[] _buckets
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<int> buckets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Collections.Generic.HashSet`1/System.Collections.Generic.Slot<T>[] _slots
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<typename ::System::Collections::Generic::HashSet_1<T>::Slot> slots;
    // Field size check
    static_assert(sizeof(::ArrayW<typename ::System::Collections::Generic::HashSet_1<T>::Slot>) == 0x8);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastIndex
    // Size: 0x4
    // Offset: 0x0
    int lastIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _freeList
    // Size: 0x4
    // Offset: 0x0
    int freeList;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.IEqualityComparer`1<T> _comparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEqualityComparer_1<T>* comparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEqualityComparer_1<T>*) == 0x8);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Runtime.Serialization.SerializationInfo _siInfo
    // Size: 0x8
    // Offset: 0x0
    ::System::Runtime::Serialization::SerializationInfo* siInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::SerializationInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<T>
    operator ::System::Collections::Generic::ICollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_ICollection_1_T
    inline ::System::Collections::Generic::ICollection_1<T>* i_ICollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<T>
    operator ::System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_IReadOnlyCollection_1_T
    inline ::System::Collections::Generic::IReadOnlyCollection_1<T>* i_IReadOnlyCollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 Lower31BitMask
    static int _get_Lower31BitMask() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_Lower31BitMask");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "Lower31BitMask"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 Lower31BitMask
    static void _set_Lower31BitMask(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_Lower31BitMask");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "Lower31BitMask", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 StackAllocThreshold
    static int _get_StackAllocThreshold() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_StackAllocThreshold");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "StackAllocThreshold"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 StackAllocThreshold
    static void _set_StackAllocThreshold(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_StackAllocThreshold");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "StackAllocThreshold", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 ShrinkThreshold
    static int _get_ShrinkThreshold() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_ShrinkThreshold");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ShrinkThreshold"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 ShrinkThreshold
    static void _set_ShrinkThreshold(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_ShrinkThreshold");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ShrinkThreshold", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String CapacityName
    static ::StringW _get_CapacityName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_CapacityName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "CapacityName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String CapacityName
    static void _set_CapacityName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_CapacityName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "CapacityName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ElementsName
    static ::StringW _get_ElementsName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_ElementsName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ElementsName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ElementsName
    static void _set_ElementsName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_ElementsName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ElementsName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ComparerName
    static ::StringW _get_ComparerName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_ComparerName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ComparerName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_ComparerName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "ComparerName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::StringW _get_VersionName() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_get_VersionName");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::StringW>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "VersionName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::_set_VersionName");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "VersionName", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32[] _buckets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__buckets() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__buckets");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buckets"))->offset;
      return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.HashSet`1/System.Collections.Generic.Slot<T>[] _slots
    [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Collections::Generic::HashSet_1<T>::Slot>& dyn__slots() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__slots");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_slots"))->offset;
      return *reinterpret_cast<::ArrayW<typename ::System::Collections::Generic::HashSet_1<T>::Slot>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _lastIndex
    [[deprecated("Use field access instead!")]] int& dyn__lastIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__lastIndex");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastIndex"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _freeList
    [[deprecated("Use field access instead!")]] int& dyn__freeList() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__freeList");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_freeList"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEqualityComparer`1<T> _comparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEqualityComparer_1<T>*& dyn__comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__comparer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _version
    [[deprecated("Use field access instead!")]] int& dyn__version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Runtime.Serialization.SerializationInfo _siInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::SerializationInfo*& dyn__siInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::dyn__siInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_siInfo"))->offset;
      return *reinterpret_cast<::System::Runtime::Serialization::SerializationInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IEqualityComparer`1<T> get_Comparer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEqualityComparer_1<T>* get_Comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::get_Comparer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEqualityComparer_1<T>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSet_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSet_1<T>*, creationType>()));
    }
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSet_1<T>* New_ctor(::System::Collections::Generic::IEqualityComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSet_1<T>*, creationType>(comparer)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> collection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSet_1<T>* New_ctor(::System::Collections::Generic::IEnumerable_1<T>* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSet_1<T>*, creationType>(collection)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> collection, System.Collections.Generic.IEqualityComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSet_1<T>* New_ctor(::System::Collections::Generic::IEnumerable_1<T>* collection, ::System::Collections::Generic::IEqualityComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSet_1<T>*, creationType>(collection, comparer)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSet_1<T>* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSet_1<T>*, creationType>(info, context)));
    }
    // private System.Void CopyFrom(System.Collections.Generic.HashSet`1<T> source)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyFrom(::System::Collections::Generic::HashSet_1<T>* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::CopyFrom");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, source);
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::System.Collections.Generic.ICollection<T>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::HashSet_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::HashSet_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::GetObjectData");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::OnDeserialization");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
    }
    // public System.Boolean Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void UnionWith(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnionWith(::System::Collections::Generic::IEnumerable_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::UnionWith");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnionWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // public System.Void IntersectWith(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IntersectWith(::System::Collections::Generic::IEnumerable_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::IntersectWith");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IntersectWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // public System.Void ExceptWith(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ExceptWith(::System::Collections::Generic::IEnumerable_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::ExceptWith");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExceptWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // public System.Void CopyTo(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex, count);
    }
    // public System.Void TrimExcess()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TrimExcess() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::TrimExcess");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrimExcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void Initialize(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::Initialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, capacity);
    }
    // private System.Void IncreaseCapacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IncreaseCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::IncreaseCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncreaseCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void SetCapacity(System.Int32 newSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCapacity(int newSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::SetCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSize)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newSize);
    }
    // private System.Boolean AddIfNotPresent(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool AddIfNotPresent(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::AddIfNotPresent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddIfNotPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // private System.Void AddValue(System.Int32 index, System.Int32 hashCode, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddValue(int index, int hashCode, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::AddValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(hashCode), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, hashCode, value);
    }
    // private System.Void IntersectWithHashSetWithSameEC(System.Collections.Generic.HashSet`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IntersectWithHashSetWithSameEC(::System::Collections::Generic::HashSet_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::IntersectWithHashSetWithSameEC");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IntersectWithHashSetWithSameEC", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // private System.Void IntersectWithEnumerable(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IntersectWithEnumerable(::System::Collections::Generic::IEnumerable_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::IntersectWithEnumerable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IntersectWithEnumerable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, other);
    }
    // private System.Int32 InternalIndexOf(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int InternalIndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::InternalIndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalIndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // static private System.Boolean AreEqualityComparersEqual(System.Collections.Generic.HashSet`1<T> set1, System.Collections.Generic.HashSet`1<T> set2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool AreEqualityComparersEqual(::System::Collections::Generic::HashSet_1<T>* set1, ::System::Collections::Generic::HashSet_1<T>* set2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::AreEqualityComparersEqual");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<HashSet_1<T>*>::get(), "AreEqualityComparersEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set1), ::il2cpp_utils::ExtractType(set2)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, set1, set2);
    }
    // private System.Int32 InternalGetHashCode(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int InternalGetHashCode(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::HashSet_1::InternalGetHashCode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalGetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
  }; // System.Collections.Generic.HashSet`1
  // Could not write size check! Type: System.Collections.Generic.HashSet`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
