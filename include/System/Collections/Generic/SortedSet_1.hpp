// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.NodeColor
#include "System/Collections/Generic/NodeColor.hpp"
// Including type: System.Collections.Generic.TreeRotation
#include "System/Collections/Generic/TreeRotation.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Node because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Skipping declaration: ElementCount because it is already included!
  // Skipping declaration: <>c__DisplayClass52_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass53_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass53_1 because it is already included!
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: TreeWalkPredicate`1<T>
  template<typename T>
  class TreeWalkPredicate_1;
  // Skipping declaration: IEnumerable`1 because it is already included!
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: SortedSet`1<T>
  template<typename T>
  class SortedSet_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Generic::SortedSet_1, "System.Collections.Generic", "SortedSet`1");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.SortedSet`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 1085A98
  // [DebuggerTypeProxyAttribute] Offset: 1085A98
  template<typename T>
  class SortedSet_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::ICollection_1<T>, public ::System::Collections::Generic::IReadOnlyCollection_1<T>, public ::System::Runtime::Serialization::ISerializable, public ::System::Collections::ICollection, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::Collections::Generic::SortedSet_1::Node<T>
    class Node;
    // Nested type: ::System::Collections::Generic::SortedSet_1::Enumerator<T>
    struct Enumerator;
    // Nested type: ::System::Collections::Generic::SortedSet_1::ElementCount<T>
    struct ElementCount;
    // Nested type: ::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0<T>
    class $$c__DisplayClass52_0;
    // Nested type: ::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_0<T>
    class $$c__DisplayClass53_0;
    // Nested type: ::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_1<T>
    class $$c__DisplayClass53_1;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node
    // [TokenAttribute] Offset: FFFFFFFF
    class Node : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Node";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private T <Item>k__BackingField
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T Item;
      // private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> <Left>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* Left;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Generic::SortedSet_1<T>::Node*) == 0x8);
      // private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> <Right>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* Right;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Generic::SortedSet_1<T>::Node*) == 0x8);
      // private System.Collections.Generic.NodeColor <Color>k__BackingField
      // Size: 0x1
      // Offset: 0x0
      ::System::Collections::Generic::NodeColor Color;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::NodeColor) == 0x1);
      public:
      // Autogenerated instance field getter
      // Get instance field: private T <Item>k__BackingField
      [[deprecated("Use field access instead!")]] T& dyn_$Item$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::dyn_$Item$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Item>k__BackingField"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> <Left>k__BackingField
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::SortedSet_1<T>::Node*& dyn_$Left$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::dyn_$Left$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Left>k__BackingField"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::SortedSet_1<T>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> <Right>k__BackingField
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::SortedSet_1<T>::Node*& dyn_$Right$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::dyn_$Right$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Right>k__BackingField"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::SortedSet_1<T>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.NodeColor <Color>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::NodeColor& dyn_$Color$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::dyn_$Color$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Color>k__BackingField"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::NodeColor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public T get_Item()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Item() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Item");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // public System.Void set_Item(T value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Item(T value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::set_Item");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> get_Left()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* get_Left() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Left");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Left", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Void set_Left(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Left(typename ::System::Collections::Generic::SortedSet_1<T>::Node* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::set_Left");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Left", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> get_Right()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* get_Right() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Right");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Right", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Void set_Right(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Right(typename ::System::Collections::Generic::SortedSet_1<T>::Node* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::set_Right");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Right", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Collections.Generic.NodeColor get_Color()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::NodeColor get_Color() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Color");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::NodeColor, false>(this, ___internal__method);
      }
      // public System.Void set_Color(System.Collections.Generic.NodeColor value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Color(::System::Collections::Generic::NodeColor value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::set_Color");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Boolean get_IsBlack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_IsBlack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_IsBlack");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsBlack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_IsRed()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_IsRed() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_IsRed");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_Is2Node()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_Is2Node() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Is2Node");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Is2Node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Boolean get_Is4Node()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_Is4Node() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::get_Is4Node");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Is4Node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void .ctor(T item, System.Collections.Generic.NodeColor color)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename SortedSet_1<T>::Node* New_ctor(T item, ::System::Collections::Generic::NodeColor color) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SortedSet_1<T>::Node*, creationType>(item, color)));
      }
      // static public System.Boolean IsNonNullRed(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> node)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static bool IsNonNullRed(typename ::System::Collections::Generic::SortedSet_1<T>::Node* node) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::IsNonNullRed");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename SortedSet_1<T>::Node*>::get(), "IsNonNullRed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
      }
      // static public System.Boolean IsNullOrBlack(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> node)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static bool IsNullOrBlack(typename ::System::Collections::Generic::SortedSet_1<T>::Node* node) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::IsNullOrBlack");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename SortedSet_1<T>::Node*>::get(), "IsNullOrBlack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, node);
      }
      // public System.Void ColorBlack()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void ColorBlack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::ColorBlack");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorBlack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void ColorRed()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void ColorRed() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::ColorRed");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorRed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.TreeRotation GetRotation(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> current, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> sibling)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::TreeRotation GetRotation(typename ::System::Collections::Generic::SortedSet_1<T>::Node* current, typename ::System::Collections::Generic::SortedSet_1<T>::Node* sibling) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::GetRotation");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(sibling)})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::TreeRotation, false>(this, ___internal__method, current, sibling);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> GetSibling(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> node)
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* GetSibling(typename ::System::Collections::Generic::SortedSet_1<T>::Node* node) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::GetSibling");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSibling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method, node);
      }
      // public System.Void Split4Node()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Split4Node() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::Split4Node");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Split4Node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> Rotate(System.Collections.Generic.TreeRotation rotation)
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* Rotate(::System::Collections::Generic::TreeRotation rotation) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::Rotate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method, rotation);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> RotateLeft()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* RotateLeft() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::RotateLeft");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> RotateLeftRight()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* RotateLeftRight() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::RotateLeftRight");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateLeftRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> RotateRight()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* RotateRight() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::RotateRight");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> RotateRightLeft()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* RotateRightLeft() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::RotateRightLeft");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateRightLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method);
      }
      // public System.Void Merge2Nodes()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Merge2Nodes() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::Merge2Nodes");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Merge2Nodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void ReplaceChild(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> child, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> newChild)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void ReplaceChild(typename ::System::Collections::Generic::SortedSet_1<T>::Node* child, typename ::System::Collections::Generic::SortedSet_1<T>::Node* newChild) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Node::ReplaceChild");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child), ::il2cpp_utils::ExtractType(newChild)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, child, newChild);
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Collections.Generic.SortedSet`1<T> _tree
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::SortedSet_1<T>* tree;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::SortedSet_1<T>*) == 0x8);
      // private System.Int32 _version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Collections.Generic.Stack`1<System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T>> _stack
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::Stack_1<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>* stack;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::Stack_1<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>*) == 0x8);
      // private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> _current
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Generic::SortedSet_1<T>::Node* current;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Generic::SortedSet_1<T>::Node*) == 0x8);
      // private System.Boolean _reverse
      // Size: 0x1
      // Offset: 0x0
      bool reverse;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::System::Collections::Generic::SortedSet_1<T>* tree_ = {}, int version_ = {}, ::System::Collections::Generic::Stack_1<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>* stack_ = {}, typename ::System::Collections::Generic::SortedSet_1<T>::Node* current_ = {}, bool reverse_ = {}) noexcept : tree{tree_}, version{version_}, stack{stack_}, current{current_}, reverse{reverse_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: i_IEnumerator_1_T
      inline ::System::Collections::Generic::IEnumerator_1<T>* i_IEnumerator_1_T() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
      operator ::System::Runtime::Serialization::ISerializable() noexcept {
        return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
      }
      // Creating interface conversion operator: i_ISerializable
      inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
        return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
      }
      // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
      operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
        return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
      }
      // Creating interface conversion operator: i_IDeserializationCallback
      inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
        return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
      }
      // Autogenerated static field getter
      // Get static field: static private readonly System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> s_dummyNode
      static typename ::System::Collections::Generic::SortedSet_1<T>::Node* _get_s_dummyNode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::_get_s_dummyNode");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename SortedSet_1<T>::Enumerator>::get(), "s_dummyNode"));
      }
      // Autogenerated static field setter
      // Set static field: static private readonly System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> s_dummyNode
      static void _set_s_dummyNode(typename ::System::Collections::Generic::SortedSet_1<T>::Node* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::_set_s_dummyNode");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename SortedSet_1<T>::Enumerator>::get(), "s_dummyNode", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.SortedSet`1<T> _tree
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::SortedSet_1<T>*& dyn__tree() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::dyn__tree");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tree"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::SortedSet_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _version
      [[deprecated("Use field access instead!")]] int& dyn__version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::dyn__version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.Stack`1<System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T>> _stack
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>*& dyn__stack() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::dyn__stack");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stack"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::Stack_1<typename ::System::Collections::Generic::SortedSet_1<T>::Node*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> _current
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::SortedSet_1<T>::Node*& dyn__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::dyn__current");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::SortedSet_1<T>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Boolean _reverse
      [[deprecated("Use field access instead!")]] bool& dyn__reverse() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::dyn__reverse");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reverse"))->offset;
        return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Collections.Generic.SortedSet`1<T> set)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::SortedSet_1<T>* set) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, set);
      }
      // System.Void .ctor(System.Collections.Generic.SortedSet`1<T> set, System.Boolean reverse)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::SortedSet_1<T>* set, bool reverse) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(set), ::il2cpp_utils::ExtractType(reverse)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, set, reverse);
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename SortedSet_1<T>::Enumerator>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::System.Runtime.Serialization.ISerializable.GetObjectData");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
      }
      // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::System.Runtime.Serialization.IDeserializationCallback.OnDeserialization");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
      }
      // private System.Void Initialize()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Initialize() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::Initialize");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::Reset");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Enumerator::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.Enumerator
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.Enumerator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.ElementCount
    // [TokenAttribute] Offset: FFFFFFFF
    struct ElementCount : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "ElementCount";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // System.Int32 UniqueCount
      // Size: 0x4
      // Offset: 0x0
      int UniqueCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 UnfoundCount
      // Size: 0x4
      // Offset: 0x0
      int UnfoundCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ElementCount
      constexpr ElementCount(int UniqueCount_ = {}, int UnfoundCount_ = {}) noexcept : UniqueCount{UniqueCount_}, UnfoundCount{UnfoundCount_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 UniqueCount
      [[deprecated("Use field access instead!")]] int& dyn_UniqueCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::ElementCount::dyn_UniqueCount");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UniqueCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 UnfoundCount
      [[deprecated("Use field access instead!")]] int& dyn_UnfoundCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::ElementCount::dyn_UnfoundCount");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnfoundCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.ElementCount
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.ElementCount is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass52_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass52_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass52_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 count
      // Size: 0x4
      // Offset: 0x0
      int count;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public T[] array
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<T> array;
      // Field size check
      static_assert(sizeof(::ArrayW<T>) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 index
      [[deprecated("Use field access instead!")]] int& dyn_index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0::dyn_index");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 count
      [[deprecated("Use field access instead!")]] int& dyn_count() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0::dyn_count");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public T[] array
      [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_array() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0::dyn_array");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "array"))->offset;
        return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename SortedSet_1<T>::$$c__DisplayClass52_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SortedSet_1<T>::$$c__DisplayClass52_0*, creationType>()));
      }
      // System.Boolean <CopyTo>b__0(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> node)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $CopyTo$b__0(typename ::System::Collections::Generic::SortedSet_1<T>::Node* node) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass52_0::<CopyTo>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CopyTo>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass52_0
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass52_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass53_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass53_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return index;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 index
      [[deprecated("Use field access instead!")]] int& dyn_index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_0::dyn_index");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename SortedSet_1<T>::$$c__DisplayClass53_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SortedSet_1<T>::$$c__DisplayClass53_0*, creationType>()));
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_0
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass53_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = SortedSet_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass53_1";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Object[] objects
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::Il2CppObject*> objects;
      // Field size check
      static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
      // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_0<T> CS$<>8__locals1
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Generic::SortedSet_1<T>::$$c__DisplayClass53_0* CS$$$8__locals1;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Generic::SortedSet_1<T>::$$c__DisplayClass53_0*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Object[] objects
      [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_objects() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_1::dyn_objects");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "objects"))->offset;
        return *reinterpret_cast<::ArrayW<::Il2CppObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_0<T> CS$<>8__locals1
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::SortedSet_1<T>::$$c__DisplayClass53_0*& dyn_CS$$$8__locals1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_1::dyn_CS$$$8__locals1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals1"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Generic::SortedSet_1<T>::$$c__DisplayClass53_0**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename SortedSet_1<T>::$$c__DisplayClass53_1* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SortedSet_1<T>::$$c__DisplayClass53_1*, creationType>()));
      }
      // System.Boolean <System.Collections.ICollection.CopyTo>b__0(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> node)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $System_Collections_ICollection_CopyTo$b__0(typename ::System::Collections::Generic::SortedSet_1<T>::Node* node) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::$$c__DisplayClass53_1::<System.Collections.ICollection.CopyTo>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<System.Collections.ICollection.CopyTo>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node);
      }
    }; // System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_1
    // Could not write size check! Type: System.Collections.Generic.SortedSet`1/System.Collections.Generic.<>c__DisplayClass53_1 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> root
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Collections::Generic::SortedSet_1<T>::Node* root;
    // Field size check
    static_assert(sizeof(typename ::System::Collections::Generic::SortedSet_1<T>::Node*) == 0x8);
    // private System.Collections.Generic.IComparer`1<T> comparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IComparer_1<T>* comparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IComparer_1<T>*) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Runtime.Serialization.SerializationInfo siInfo
    // Size: 0x8
    // Offset: 0x0
    ::System::Runtime::Serialization::SerializationInfo* siInfo;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::SerializationInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::ICollection_1<T>
    operator ::System::Collections::Generic::ICollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_ICollection_1_T
    inline ::System::Collections::Generic::ICollection_1<T>* i_ICollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyCollection_1<T>
    operator ::System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: i_IReadOnlyCollection_1_T
    inline ::System::Collections::Generic::IReadOnlyCollection_1<T>* i_IReadOnlyCollection_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::ICollection
    operator ::System::Collections::ICollection() noexcept {
      return *reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: i_ICollection
    inline ::System::Collections::ICollection* i_ICollection() noexcept {
      return reinterpret_cast<::System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> root
    [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::SortedSet_1<T>::Node*& dyn_root() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn_root");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
      return *reinterpret_cast<typename ::System::Collections::Generic::SortedSet_1<T>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IComparer`1<T> comparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IComparer_1<T>*& dyn_comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn_comparer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "comparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn_count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn_version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Object _syncRoot
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn__syncRoot");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Runtime.Serialization.SerializationInfo siInfo
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::SerializationInfo*& dyn_siInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::dyn_siInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "siInfo"))->offset;
      return *reinterpret_cast<::System::Runtime::Serialization::SerializationInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.IComparer`1<T> get_Comparer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IComparer_1<T>* get_Comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::get_Comparer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IComparer_1<T>*, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.ICollection.get_SyncRoot");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SortedSet_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SortedSet_1<T>*, creationType>()));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SortedSet_1<T>* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SortedSet_1<T>*, creationType>(info, context)));
    }
    // System.Boolean InOrderTreeWalk(System.Collections.Generic.TreeWalkPredicate`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool InOrderTreeWalk(::System::Collections::Generic::TreeWalkPredicate_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::InOrderTreeWalk");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InOrderTreeWalk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, action);
    }
    // System.Void VersionCheck()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void VersionCheck() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::VersionCheck");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VersionCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // System.Boolean IsWithinRange(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsWithinRange(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::IsWithinRange");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWithinRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Boolean Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.Generic.ICollection<T>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // System.Boolean AddIfNotPresent(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool AddIfNotPresent(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::AddIfNotPresent");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddIfNotPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // System.Boolean DoRemove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool DoRemove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::DoRemove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Void CopyTo(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Void CopyTo(T[] array, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index, count);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.ICollection.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Collections.Generic.SortedSet`1/System.Collections.Generic.Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::SortedSet_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Void InsertionBalance(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> current, ref System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> parent, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> grandParent, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> greatGrandParent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InsertionBalance(typename ::System::Collections::Generic::SortedSet_1<T>::Node* current, ByRef<typename ::System::Collections::Generic::SortedSet_1<T>::Node*> parent, typename ::System::Collections::Generic::SortedSet_1<T>::Node* grandParent, typename ::System::Collections::Generic::SortedSet_1<T>::Node* greatGrandParent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::InsertionBalance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertionBalance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(grandParent), ::il2cpp_utils::ExtractType(greatGrandParent)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, current, byref(parent), grandParent, greatGrandParent);
    }
    // private System.Void ReplaceChildOrRoot(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> parent, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> child, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> newChild)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReplaceChildOrRoot(typename ::System::Collections::Generic::SortedSet_1<T>::Node* parent, typename ::System::Collections::Generic::SortedSet_1<T>::Node* child, typename ::System::Collections::Generic::SortedSet_1<T>::Node* newChild) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::ReplaceChildOrRoot");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceChildOrRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(child), ::il2cpp_utils::ExtractType(newChild)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent, child, newChild);
    }
    // private System.Void ReplaceNode(System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> match, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> parentOfMatch, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> successor, System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> parentOfSuccessor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReplaceNode(typename ::System::Collections::Generic::SortedSet_1<T>::Node* match, typename ::System::Collections::Generic::SortedSet_1<T>::Node* parentOfMatch, typename ::System::Collections::Generic::SortedSet_1<T>::Node* successor, typename ::System::Collections::Generic::SortedSet_1<T>::Node* parentOfSuccessor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::ReplaceNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match), ::il2cpp_utils::ExtractType(parentOfMatch), ::il2cpp_utils::ExtractType(successor), ::il2cpp_utils::ExtractType(parentOfSuccessor)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, match, parentOfMatch, successor, parentOfSuccessor);
    }
    // System.Collections.Generic.SortedSet`1/System.Collections.Generic.Node<T> FindNode(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::SortedSet_1<T>::Node* FindNode(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::FindNode");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::Node*, false>(this, ___internal__method, item);
    }
    // System.Int32 InternalIndexOf(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int InternalIndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::InternalIndexOf");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalIndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // private System.Boolean HasEqualComparer(System.Collections.Generic.SortedSet`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool HasEqualComparer(::System::Collections::Generic::SortedSet_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::HasEqualComparer");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasEqualComparer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public System.Boolean SetEquals(System.Collections.Generic.IEnumerable`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool SetEquals(::System::Collections::Generic::IEnumerable_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::SetEquals");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEquals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // private System.Collections.Generic.SortedSet`1/System.Collections.Generic.ElementCount<T> CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable`1<T> other, System.Boolean returnIfUnfound)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::SortedSet_1<T>::ElementCount CheckUniqueAndUnfoundElements(::System::Collections::Generic::IEnumerable_1<T>* other, bool returnIfUnfound) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::CheckUniqueAndUnfoundElements");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckUniqueAndUnfoundElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other), ::il2cpp_utils::ExtractType(returnIfUnfound)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::SortedSet_1<T>::ElementCount, false>(this, ___internal__method, other, returnIfUnfound);
    }
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Runtime.Serialization.ISerializable.GetObjectData");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
    }
    // protected System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::GetObjectData");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, info, context);
    }
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::System.Runtime.Serialization.IDeserializationCallback.OnDeserialization");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
    }
    // protected System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::OnDeserialization");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeserialization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender);
    }
    // static private System.Int32 Log2(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int Log2(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::SortedSet_1::Log2");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SortedSet_1<T>*>::get(), "Log2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
    }
  }; // System.Collections.Generic.SortedSet`1
  // Could not write size check! Type: System.Collections.Generic.SortedSet`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
