// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Enumerator because it is already included!
  // Skipping declaration: IEnumerable`1 because it is already included!
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Converter`2<TInput, TOutput>
  template<typename TInput, typename TOutput>
  class Converter_2;
  // Forward declaring type: Array
  class Array;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Generic::List_1, "System.Collections.Generic", "List`1");
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.List`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 107C750
  // [DebuggerTypeProxyAttribute] Offset: 107C750
  // [DefaultMemberAttribute] Offset: 107C750
  template<typename T>
  class List_1 : public ::Il2CppObject/*, public ::System::Collections::Generic::IList_1<T>, public ::System::Collections::Generic::IReadOnlyList_1<T>, public ::System::Collections::IList*/ {
    public:
    // Nested type: ::System::Collections::Generic::List_1::Enumerator<T>
    struct Enumerator;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.List`1/System.Collections.Generic.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = List_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private System.Collections.Generic.List`1<T> list
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<T>* list;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
      // private System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T current;
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::System::Collections::Generic::List_1<T>* list_ = {}, int index_ = {}, int version_ = {}, T current_ = {}) noexcept : list{list_}, index{index_}, version{version_}, current{current_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<T>
      operator ::System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: i_IEnumerator_1_T
      inline ::System::Collections::Generic::IEnumerator_1<T>* i_IEnumerator_1_T() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1<T> list
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_list() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::dyn_list");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "list"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 index
      [[deprecated("Use field access instead!")]] int& dyn_index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::dyn_index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 version
      [[deprecated("Use field access instead!")]] int& dyn_version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::dyn_version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "version"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T current
      [[deprecated("Use field access instead!")]] T& dyn_current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::dyn_current");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "current"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Collections.Generic.List`1<T> list)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::System::Collections::Generic::List_1<T>* list) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, list);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNextRare()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNextRare() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::MoveNextRare");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNextRare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Enumerator::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.Generic.List`1/System.Collections.Generic.Enumerator
    // Could not write size check! Type: System.Collections.Generic.List`1/System.Collections.Generic.Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private T[] _items
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> items;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 _size
    // Size: 0x4
    // Offset: 0x0
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IList_1<T>
    operator ::System::Collections::Generic::IList_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IList_1<T>*>(this);
    }
    // Creating interface conversion operator: i_IList_1_T
    inline ::System::Collections::Generic::IList_1<T>* i_IList_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IList_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<T>
    operator ::System::Collections::Generic::IReadOnlyList_1<T>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<T>*>(this);
    }
    // Creating interface conversion operator: i_IReadOnlyList_1_T
    inline ::System::Collections::Generic::IReadOnlyList_1<T>* i_IReadOnlyList_1_T() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IList
    operator ::System::Collections::IList() noexcept {
      return *reinterpret_cast<::System::Collections::IList*>(this);
    }
    // Creating interface conversion operator: i_IList
    inline ::System::Collections::IList* i_IList() noexcept {
      return reinterpret_cast<::System::Collections::IList*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 _defaultCapacity
    static int _get__defaultCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::_get__defaultCapacity");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), "_defaultCapacity"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 _defaultCapacity
    static void _set__defaultCapacity(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::_set__defaultCapacity");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), "_defaultCapacity", value));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly T[] _emptyArray
    static ::ArrayW<T> _get__emptyArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::_get__emptyArray");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<T>>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), "_emptyArray"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly T[] _emptyArray
    static void _set__emptyArray(::ArrayW<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::_set__emptyArray");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), "_emptyArray", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] _items
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn__items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::dyn__items");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _size
    [[deprecated("Use field access instead!")]] int& dyn__size() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::dyn__size");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_size"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _version
    [[deprecated("Use field access instead!")]] int& dyn__version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::dyn__version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Object _syncRoot
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::dyn__syncRoot");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncRoot"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Capacity()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Capacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::get_Capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_Capacity(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Capacity(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::set_Capacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IList.get_IsFixedSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IList_get_IsFixedSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.get_IsFixedSize");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.get_IsFixedSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IList_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.ICollection.get_SyncRoot");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_IList_get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, index);
    }
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static List_1<T>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<List_1<T>*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<T> collection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static List_1<T>* New_ctor(::System::Collections::Generic::IEnumerable_1<T>* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<List_1<T>*, creationType>(collection)));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Boolean IsCompatibleObject(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsCompatibleObject(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::IsCompatibleObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<List_1<T>*>::get(), "IsCompatibleObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, value);
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // private System.Int32 System.Collections.IList.Add(System.Object item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int System_Collections_IList_Add(::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Void AddRange(System.Collections.Generic.IEnumerable`1<T> collection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddRange(::System::Collections::Generic::IEnumerable_1<T>* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::AddRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collection)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collection);
    }
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<T> AsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* AsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::AsReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<T>*, false>(this, ___internal__method);
    }
    // public System.Int32 BinarySearch(System.Int32 index, System.Int32 count, T item, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int BinarySearch(int index, int count, T item, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BinarySearch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(comparer)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, index, count, item, comparer);
    }
    // public System.Int32 BinarySearch(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int BinarySearch(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BinarySearch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // private System.Boolean System.Collections.IList.Contains(System.Object item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IList_Contains(::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Collections.Generic.List`1<TOutput> ConvertAll(System.Converter`2<T,TOutput> converter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TOutput>
    ::System::Collections::Generic::List_1<TOutput>* ConvertAll(::System::Converter_2<T, TOutput>* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::ConvertAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertAll", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(converter)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<TOutput>*, false>(this, ___generic__method, converter);
    }
    // public System.Void CopyTo(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_ICollection_CopyTo(::System::Array* array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.ICollection.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // public System.Void CopyTo(System.Int32 index, T[] array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(int index, ::ArrayW<T> array, int arrayIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, array, arrayIndex, count);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<T> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, arrayIndex);
    }
    // private System.Void EnsureCapacity(System.Int32 min)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void EnsureCapacity(int min) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::EnsureCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureCapacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, min);
    }
    // public System.Boolean Exists(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Exists(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Exists");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Exists", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, match);
    }
    // public T Find(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Find(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, match);
    }
    // public System.Collections.Generic.List`1<T> FindAll(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<T>* FindAll(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::FindAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(this, ___internal__method, match);
    }
    // public System.Int32 FindIndex(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int FindIndex(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::FindIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, match);
    }
    // public System.Int32 FindIndex(System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int FindIndex(int startIndex, int count, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::FindIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, startIndex, count, match);
    }
    // public T FindLast(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T FindLast(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::FindLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindLast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, match);
    }
    // public System.Void ForEach(System.Action`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ForEach(::System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::ForEach");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForEach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, action);
    }
    // public System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Collections::Generic::List_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Collections::Generic::List_1<T>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable$T$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.List`1<T> GetRange(System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<T>* GetRange(int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::GetRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<T>*, false>(this, ___internal__method, index, count);
    }
    // public System.Int32 IndexOf(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::IndexOf");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // private System.Int32 System.Collections.IList.IndexOf(System.Object item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int System_Collections_IList_IndexOf(::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.IndexOf");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Void Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Insert(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Insert");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, item);
    }
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IList_Insert(int index, ::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.Insert");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, item);
    }
    // public System.Void InsertRange(System.Int32 index, System.Collections.Generic.IEnumerable`1<T> collection)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InsertRange(int index, ::System::Collections::Generic::IEnumerable_1<T>* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::InsertRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(collection)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, collection);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // private System.Void System.Collections.IList.Remove(System.Object item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IList_Remove(::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::System.Collections.IList.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IList.Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Int32 RemoveAll(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RemoveAll(::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::RemoveAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, match);
    }
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAt(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::RemoveAt");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index);
    }
    // public System.Void RemoveRange(System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveRange(int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::RemoveRange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, count);
    }
    // public System.Void Reverse()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reverse() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Reverse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Reverse(System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Reverse(int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Reverse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, count);
    }
    // public System.Void Sort()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Sort() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Sort(System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Sort(::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(comparer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, comparer);
    }
    // public System.Void Sort(System.Int32 index, System.Int32 count, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Sort(int index, int count, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(comparer)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, count, comparer);
    }
    // public System.Void Sort(System.Comparison`1<T> comparison)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Sort(::System::Comparison_1<T>* comparison) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(comparison)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, comparison);
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> ToArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::ToArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // public System.Void TrimExcess()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TrimExcess() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::TrimExcess");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrimExcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static List_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Generic::List_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<List_1<T>*, creationType>()));
    }
  }; // System.Collections.Generic.List`1
  // Could not write size check! Type: System.Collections.Generic.List`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
