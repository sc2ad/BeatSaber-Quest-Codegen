// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Skipping declaration: Tables because it is already included!
  // Skipping declaration: Node because it is already included!
  // Skipping declaration: DictionaryEnumerator because it is already included!
  // Skipping declaration: <GetEnumerator>d__32 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
  // Skipping declaration: ICollection`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: ICollection because it is already included!
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: System.Collections.Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Collections::Concurrent::ConcurrentDictionary_2, "System.Collections.Concurrent", "ConcurrentDictionary`2");
// Type namespace: System.Collections.Concurrent
namespace System::Collections::Concurrent {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Concurrent.ConcurrentDictionary`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: 107C12C
  // [DefaultMemberAttribute] Offset: 107C12C
  // [DebuggerTypeProxyAttribute] Offset: 107C12C
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2 : public ::Il2CppObject/*, public ::System::Collections::IDictionary, public ::System::Collections::Generic::IDictionary_2<TKey, TValue>, public ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*/ {
    public:
    // Nested type: ::System::Collections::Concurrent::ConcurrentDictionary_2::Tables<TKey, TValue>
    class Tables;
    // Nested type: ::System::Collections::Concurrent::ConcurrentDictionary_2::Node<TKey, TValue>
    class Node;
    // Nested type: ::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator<TKey, TValue>
    class DictionaryEnumerator;
    // Nested type: ::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32<TKey, TValue>
    class $GetEnumerator$d__32;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables
    // [TokenAttribute] Offset: FFFFFFFF
    class Tables : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ConcurrentDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Tables";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // readonly System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue>[] _buckets
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*> buckets;
      // Field size check
      static_assert(sizeof(::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>) == 0x8);
      // readonly System.Object[] _locks
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<::Il2CppObject*> locks;
      // Field size check
      static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
      // System.Int32[] _countPerLock
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<int> countPerLock;
      // Field size check
      static_assert(sizeof(::ArrayW<int>) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: readonly System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue>[] _buckets
      [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>& dyn__buckets() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Tables::dyn__buckets");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buckets"))->offset;
        return *reinterpret_cast<::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly System.Object[] _locks
      [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn__locks() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Tables::dyn__locks");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_locks"))->offset;
        return *reinterpret_cast<::ArrayW<::Il2CppObject*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32[] _countPerLock
      [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__countPerLock() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Tables::dyn__countPerLock");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_countPerLock"))->offset;
        return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue>[] buckets, System.Object[] locks, System.Int32[] countPerLock)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ConcurrentDictionary_2<TKey, TValue>::Tables* New_ctor(::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*> buckets, ::ArrayW<::Il2CppObject*> locks, ::ArrayW<int> countPerLock) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Tables::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ConcurrentDictionary_2<TKey, TValue>::Tables*, creationType>(buckets, locks, countPerLock)));
      }
    }; // System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables
    // Could not write size check! Type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node
    // [TokenAttribute] Offset: FFFFFFFF
    class Node : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ConcurrentDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Node";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // readonly TKey _key
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey key;
      // TValue _value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      // System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue> _next
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node* next;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*) == 0x8);
      // readonly System.Int32 _hashcode
      // Size: 0x4
      // Offset: 0x0
      int hashcode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Autogenerated instance field getter
      // Get instance field: readonly TKey _key
      [[deprecated("Use field access instead!")]] TKey& dyn__key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Node::dyn__key");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_key"))->offset;
        return *reinterpret_cast<TKey*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: TValue _value
      [[deprecated("Use field access instead!")]] TValue& dyn__value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Node::dyn__value");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_value"))->offset;
        return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue> _next
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*& dyn__next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Node::dyn__next");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_next"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly System.Int32 _hashcode
      [[deprecated("Use field access instead!")]] int& dyn__hashcode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Node::dyn__hashcode");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hashcode"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(TKey key, TValue value, System.Int32 hashcode, System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue> next)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ConcurrentDictionary_2<TKey, TValue>::Node* New_ctor(TKey key, TValue value, int hashcode, typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node* next) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Node::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ConcurrentDictionary_2<TKey, TValue>::Node*, creationType>(key, value, hashcode, next)));
      }
    }; // System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node
    // Could not write size check! Type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.DictionaryEnumerator
    // [TokenAttribute] Offset: FFFFFFFF
    class DictionaryEnumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::IDictionaryEnumerator*/ {
      public:
      using declaring_type = ConcurrentDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "DictionaryEnumerator";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> _enumerator
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* enumerator;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::System::Collections::IDictionaryEnumerator
      operator ::System::Collections::IDictionaryEnumerator() noexcept {
        return *reinterpret_cast<::System::Collections::IDictionaryEnumerator*>(this);
      }
      // Creating interface conversion operator: i_IDictionaryEnumerator
      inline ::System::Collections::IDictionaryEnumerator* i_IDictionaryEnumerator() noexcept {
        return reinterpret_cast<::System::Collections::IDictionaryEnumerator*>(this);
      }
      // Creating conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*
      constexpr operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*() const noexcept {
        return enumerator;
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> _enumerator
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*& dyn__enumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::dyn__enumerator");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_enumerator"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Collections.DictionaryEntry get_Entry()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::DictionaryEntry get_Entry() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::get_Entry");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Entry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::DictionaryEntry, false>(this, ___internal__method);
      }
      // public System.Object get_Key()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Key() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::get_Key");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Object get_Value()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::get_Value");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Object get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Collections.Concurrent.ConcurrentDictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ConcurrentDictionary_2<TKey, TValue>::DictionaryEnumerator* New_ctor(::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>* dictionary) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ConcurrentDictionary_2<TKey, TValue>::DictionaryEnumerator*, creationType>(dictionary)));
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::DictionaryEnumerator::Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.DictionaryEnumerator
    // Could not write size check! Type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.DictionaryEnumerator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.<GetEnumerator>d__32
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetEnumerator$d__32 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*/ {
      public:
      using declaring_type = ConcurrentDictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__32";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Collections.Generic.KeyValuePair`2<TKey,TValue> <>2__current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::System::Collections::Generic::KeyValuePair_2<TKey, TValue> $$2__current;
      // public System.Collections.Concurrent.ConcurrentDictionary`2<TKey,TValue> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>* $$4__this;
      // Field size check
      static_assert(sizeof(::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>*) == 0x8);
      // private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue>[] <buckets>5__1
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*> $buckets$5__1;
      // Field size check
      static_assert(sizeof(::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>) == 0x8);
      // private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue> <current>5__2
      // Size: 0x8
      // Offset: 0x0
      typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node* $current$5__2;
      // Field size check
      static_assert(sizeof(typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*) == 0x8);
      // private System.Int32 <i>5__3
      // Size: 0x4
      // Offset: 0x0
      int $i$5__3;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>
      operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*>(this);
      }
      // Creating interface conversion operator: i_KeyValuePair_2_TKey_TValue
      inline ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* i_KeyValuePair_2_TKey_TValue() noexcept {
        return reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.KeyValuePair`2<TKey,TValue> <>2__current
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::KeyValuePair_2<TKey, TValue>& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Collections.Concurrent.ConcurrentDictionary`2<TKey,TValue> <>4__this
      [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue>[] <buckets>5__1
      [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>& dyn_$buckets$5__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$buckets$5__1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<buckets>5__1"))->offset;
        return *reinterpret_cast<::ArrayW<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Node<TKey,TValue> <current>5__2
      [[deprecated("Use field access instead!")]] typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node*& dyn_$current$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$current$5__2");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<current>5__2"))->offset;
        return *reinterpret_cast<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <i>5__3
      [[deprecated("Use field access instead!")]] int& dyn_$i$5__3() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::dyn_$i$5__3");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__3"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private System.Collections.Generic.KeyValuePair`2<TKey,TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::KeyValuePair_2<TKey, TValue> System_Collections_Generic_IEnumerator$System_Collections_Generic_KeyValuePair$TKey_TValue$$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ConcurrentDictionary_2<TKey, TValue>::$GetEnumerator$d__32* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ConcurrentDictionary_2<TKey, TValue>::$GetEnumerator$d__32*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::$GetEnumerator$d__32::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.<GetEnumerator>d__32
    // Could not write size check! Type: System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.<GetEnumerator>d__32 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables<TKey,TValue> _tables
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Tables* tables;
    // Field size check
    static_assert(sizeof(typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Tables*) == 0x8);
    // private System.Collections.Generic.IEqualityComparer`1<TKey> _comparer
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEqualityComparer_1<TKey>* comparer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEqualityComparer_1<TKey>*) == 0x8);
    // private readonly System.Boolean _growLockArray
    // Size: 0x1
    // Offset: 0x0
    bool growLockArray;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 _budget
    // Size: 0x4
    // Offset: 0x0
    int budget;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IDictionary
    operator ::System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<::System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: i_IDictionary
    inline ::System::Collections::IDictionary* i_IDictionary() noexcept {
      return reinterpret_cast<::System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IDictionary_2<TKey, TValue>
    operator ::System::Collections::Generic::IDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: i_IDictionary_2_TKey_TValue
    inline ::System::Collections::Generic::IDictionary_2<TKey, TValue>* i_IDictionary_2_TKey_TValue() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>
    operator ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: i_IReadOnlyDictionary_2_TKey_TValue
    inline ::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>* i_IReadOnlyDictionary_2_TKey_TValue() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 DefaultCapacity
    static int _get_DefaultCapacity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_get_DefaultCapacity");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "DefaultCapacity")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 DefaultCapacity
    static void _set_DefaultCapacity(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_set_DefaultCapacity");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "DefaultCapacity", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 MaxLockNumber
    static int _get_MaxLockNumber() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_get_MaxLockNumber");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "MaxLockNumber")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 MaxLockNumber
    static void _set_MaxLockNumber(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_set_MaxLockNumber");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "MaxLockNumber", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Boolean s_isValueWriteAtomic
    static bool _get_s_isValueWriteAtomic() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_get_s_isValueWriteAtomic");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "s_isValueWriteAtomic")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Boolean s_isValueWriteAtomic
    static void _set_s_isValueWriteAtomic(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::_set_s_isValueWriteAtomic");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "s_isValueWriteAtomic", value)));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables<TKey,TValue> _tables
    [[deprecated("Use field access instead!")]] typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Tables*& dyn__tables() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::dyn__tables");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tables"))->offset;
      return *reinterpret_cast<typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Tables**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEqualityComparer`1<TKey> _comparer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEqualityComparer_1<TKey>*& dyn__comparer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::dyn__comparer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_comparer"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<TKey>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean _growLockArray
    [[deprecated("Use field access instead!")]] bool& dyn__growLockArray() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::dyn__growLockArray");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_growLockArray"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _budget
    [[deprecated("Use field access instead!")]] int& dyn__budget() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::dyn__budget");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_budget"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public TValue get_Item(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue get_Item(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.ICollection`1<TKey> get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<TKey>* get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<TKey>*, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Boolean System.Collections.IDictionary.get_IsReadOnly()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IDictionary_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.get_IsReadOnly");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Collections.ICollection System.Collections.IDictionary.get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::ICollection* System_Collections_IDictionary_get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.get_Keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ICollection*, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IDictionary.get_Item(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.set_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.ICollection.get_SyncRoot");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // static private System.Int32 get_DefaultConcurrencyLevel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int get_DefaultConcurrencyLevel() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::get_DefaultConcurrencyLevel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "get_DefaultConcurrencyLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // System.Void .ctor(System.Int32 concurrencyLevel, System.Int32 capacity, System.Boolean growLockArray, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConcurrentDictionary_2<TKey, TValue>* New_ctor(int concurrencyLevel, int capacity, bool growLockArray, ::System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConcurrentDictionary_2<TKey, TValue>*, creationType>(concurrencyLevel, capacity, growLockArray, comparer)));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Boolean IsValueWriteAtomic()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsValueWriteAtomic() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::IsValueWriteAtomic");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "IsValueWriteAtomic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Boolean TryAdd(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryAdd(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, value);
    }
    // public System.Boolean ContainsKey(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsKey(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::ContainsKey");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean TryRemove(TKey key, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryRemove(TKey key, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryRemove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // private System.Boolean TryRemoveInternal(TKey key, out TValue value, System.Boolean matchValue, TValue oldValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryRemoveInternal(TKey key, ByRef<TValue> value, bool matchValue, TValue oldValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryRemoveInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRemoveInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>(), ::il2cpp_utils::ExtractType(matchValue), ::il2cpp_utils::ExtractType(oldValue)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value), matchValue, oldValue);
    }
    // public System.Boolean TryGetValue(TKey key, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValue(TKey key, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryGetValue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(value));
    }
    // private System.Boolean TryGetValueInternal(TKey key, System.Int32 hashcode, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValueInternal(TKey key, int hashcode, ByRef<TValue> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryGetValueInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValueInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(hashcode), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, hashcode, byref(value));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_CopyTo(::ArrayW<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void CopyToPairs(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyToPairs(::ArrayW<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::CopyToPairs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void CopyToEntries(System.Collections.DictionaryEntry[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyToEntries(::ArrayW<::System::Collections::DictionaryEntry> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::CopyToEntries");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToEntries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void CopyToObjects(System.Object[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyToObjects(::ArrayW<::Il2CppObject*> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::CopyToObjects");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyToObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*, false>(this, ___internal__method);
    }
    // private System.Boolean TryAddInternal(TKey key, System.Int32 hashcode, TValue value, System.Boolean updateIfExists, System.Boolean acquireLock, out TValue resultingValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ByRef<TValue> resultingValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::TryAddInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(hashcode), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(updateIfExists), ::il2cpp_utils::ExtractType(acquireLock), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, hashcode, value, updateIfExists, acquireLock, byref(resultingValue));
    }
    // static private System.Void ThrowKeyNotFoundException()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void ThrowKeyNotFoundException() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::ThrowKeyNotFoundException");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "ThrowKeyNotFoundException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // static private System.Void ThrowKeyNullException()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void ThrowKeyNullException() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::ThrowKeyNullException");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "ThrowKeyNullException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // private System.Int32 GetCountInternal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetCountInternal() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetCountInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCountInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public TValue GetOrAdd(TKey key, System.Func`2<TKey,TValue> valueFactory)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue GetOrAdd(TKey key, ::System::Func_2<TKey, TValue>* valueFactory) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetOrAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(valueFactory)})));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, key, valueFactory);
    }
    // private System.Void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_IDictionary$TKey_TValue$_Add(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IDictionary<TKey,TValue>.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_IDictionary$TKey_TValue$_Remove(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.IDictionary<TKey,TValue>.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IDictionary<TKey,TValue>.Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Add(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyValuePair)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyValuePair);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Contains(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyValuePair)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, keyValuePair);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_Generic_ICollection$System_Collections_Generic_KeyValuePair$TKey_TValue$$_Remove(::System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyValuePair)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, keyValuePair);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.IDictionary.Add(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_Add(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.Add");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean System.Collections.IDictionary.Contains(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.IDictionary.Remove(System.Object key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IDictionary_Remove(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.IDictionary.Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::System.Collections.ICollection.CopyTo");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void GrowTable(System.Collections.Concurrent.ConcurrentDictionary`2/System.Collections.Concurrent.Tables<TKey,TValue> tables)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GrowTable(typename ::System::Collections::Concurrent::ConcurrentDictionary_2<TKey, TValue>::Tables* tables) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GrowTable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrowTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tables)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tables);
    }
    // static private System.Int32 GetBucket(System.Int32 hashcode, System.Int32 bucketCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int GetBucket(int hashcode, int bucketCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetBucket");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "GetBucket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashcode), ::il2cpp_utils::ExtractType(bucketCount)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hashcode, bucketCount);
    }
    // static private System.Void GetBucketAndLockNo(System.Int32 hashcode, out System.Int32 bucketNo, out System.Int32 lockNo, System.Int32 bucketCount, System.Int32 lockCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void GetBucketAndLockNo(int hashcode, ByRef<int> bucketNo, ByRef<int> lockNo, int bucketCount, int lockCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetBucketAndLockNo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentDictionary_2<TKey, TValue>*>::get(), "GetBucketAndLockNo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashcode), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(bucketCount), ::il2cpp_utils::ExtractType(lockCount)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hashcode, byref(bucketNo), byref(lockNo), bucketCount, lockCount);
    }
    // private System.Void AcquireAllLocks(ref System.Int32 locksAcquired)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AcquireAllLocks(ByRef<int> locksAcquired) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::AcquireAllLocks");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireAllLocks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locksAcquired)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, byref(locksAcquired));
    }
    // private System.Void AcquireLocks(System.Int32 fromInclusive, System.Int32 toExclusive, ref System.Int32 locksAcquired)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AcquireLocks(int fromInclusive, int toExclusive, ByRef<int> locksAcquired) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::AcquireLocks");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireLocks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromInclusive), ::il2cpp_utils::ExtractType(toExclusive), ::il2cpp_utils::ExtractType(locksAcquired)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromInclusive, toExclusive, byref(locksAcquired));
    }
    // private System.Void ReleaseLocks(System.Int32 fromInclusive, System.Int32 toExclusive)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReleaseLocks(int fromInclusive, int toExclusive) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::ReleaseLocks");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseLocks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromInclusive), ::il2cpp_utils::ExtractType(toExclusive)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromInclusive, toExclusive);
    }
    // private System.Collections.ObjectModel.ReadOnlyCollection`1<TKey> GetKeys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<TKey>* GetKeys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::GetKeys");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<TKey>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConcurrentDictionary_2<TKey, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Concurrent::ConcurrentDictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConcurrentDictionary_2<TKey, TValue>*, creationType>()));
    }
  }; // System.Collections.Concurrent.ConcurrentDictionary`2
  // Could not write size check! Type: System.Collections.Concurrent.ConcurrentDictionary`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
