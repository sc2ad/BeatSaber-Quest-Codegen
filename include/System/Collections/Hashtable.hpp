// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: ICollection because it is already included!
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IHashCodeProvider
  class IHashCodeProvider;
  // Forward declaring type: IComparer
  class IComparer;
  // Forward declaring type: IEnumerator
  class IEnumerator;
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::Hashtable);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::Hashtable*, "System.Collections", "Hashtable");
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.Hashtable
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: 107B918
  // [DefaultMemberAttribute] Offset: 107B918
  // [DebuggerDisplayAttribute] Offset: 107B918
  // [ComVisibleAttribute] Offset: 107B918
  class Hashtable : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::Collections::IDictionary, public ::System::Runtime::Serialization::ISerializable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: ::System::Collections::Hashtable::bucket
    struct bucket;
    // Nested type: ::System::Collections::Hashtable::KeyCollection
    class KeyCollection;
    // Nested type: ::System::Collections::Hashtable::ValueCollection
    class ValueCollection;
    // Nested type: ::System::Collections::Hashtable::SyncHashtable
    class SyncHashtable;
    // Nested type: ::System::Collections::Hashtable::HashtableEnumerator
    class HashtableEnumerator;
    // Nested type: ::System::Collections::Hashtable::HashtableDebugView
    class HashtableDebugView;
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Hashtable/System.Collections.bucket
    // [TokenAttribute] Offset: FFFFFFFF
    struct bucket/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Object key
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* key;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public System.Object val
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppObject* val;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public System.Int32 hash_coll
      // Size: 0x4
      // Offset: 0x10
      int hash_coll;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: bucket
      constexpr bucket(::Il2CppObject* key_ = {}, ::Il2CppObject* val_ = {}, int hash_coll_ = {}) noexcept : key{key_}, val{val_}, hash_coll{hash_coll_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Object key
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_key();
      // Get instance field reference: public System.Object val
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_val();
      // Get instance field reference: public System.Int32 hash_coll
      [[deprecated("Use field access instead!")]] int& dyn_hash_coll();
    }; // System.Collections.Hashtable/System.Collections.bucket
    #pragma pack(pop)
    static check_size<sizeof(Hashtable::bucket), 16 + sizeof(int)> __System_Collections_Hashtable_bucketSizeCheck;
    static_assert(sizeof(Hashtable::bucket) == 0x14);
    public:
    // private System.Collections.Hashtable/System.Collections.bucket[] buckets
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::Collections::Hashtable::bucket> buckets;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Hashtable::bucket>) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x18
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 occupancy
    // Size: 0x4
    // Offset: 0x1C
    int occupancy;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 loadsize
    // Size: 0x4
    // Offset: 0x20
    int loadsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single loadFactor
    // Size: 0x4
    // Offset: 0x24
    float loadFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x28
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isWriterInProgress
    // Size: 0x1
    // Offset: 0x2C
    bool isWriterInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isWriterInProgress and: keys
    char __padding6[0x3] = {};
    // private System.Collections.ICollection keys
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ICollection* keys;
    // Field size check
    static_assert(sizeof(::System::Collections::ICollection*) == 0x8);
    // private System.Collections.ICollection values
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ICollection* values;
    // Field size check
    static_assert(sizeof(::System::Collections::ICollection*) == 0x8);
    // private System.Collections.IEqualityComparer _keycomparer
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::IEqualityComparer* keycomparer;
    // Field size check
    static_assert(sizeof(::System::Collections::IEqualityComparer*) == 0x8);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IDictionary
    operator ::System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<::System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: i_IDictionary
    inline ::System::Collections::IDictionary* i_IDictionary() noexcept {
      return reinterpret_cast<::System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // static field const value: static System.Int32 HashPrime
    static constexpr const int HashPrime = 101;
    // Get static field: static System.Int32 HashPrime
    static int _get_HashPrime();
    // Set static field: static System.Int32 HashPrime
    static void _set_HashPrime(int value);
    // static field const value: static private System.Int32 InitialSize
    static constexpr const int InitialSize = 3;
    // Get static field: static private System.Int32 InitialSize
    static int _get_InitialSize();
    // Set static field: static private System.Int32 InitialSize
    static void _set_InitialSize(int value);
    // static field const value: static private System.String LoadFactorName
    static constexpr const char* LoadFactorName = "LoadFactor";
    // Get static field: static private System.String LoadFactorName
    static ::StringW _get_LoadFactorName();
    // Set static field: static private System.String LoadFactorName
    static void _set_LoadFactorName(::StringW value);
    // static field const value: static private System.String VersionName
    static constexpr const char* VersionName = "Version";
    // Get static field: static private System.String VersionName
    static ::StringW _get_VersionName();
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::StringW value);
    // static field const value: static private System.String ComparerName
    static constexpr const char* ComparerName = "Comparer";
    // Get static field: static private System.String ComparerName
    static ::StringW _get_ComparerName();
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::StringW value);
    // static field const value: static private System.String HashCodeProviderName
    static constexpr const char* HashCodeProviderName = "HashCodeProvider";
    // Get static field: static private System.String HashCodeProviderName
    static ::StringW _get_HashCodeProviderName();
    // Set static field: static private System.String HashCodeProviderName
    static void _set_HashCodeProviderName(::StringW value);
    // static field const value: static private System.String HashSizeName
    static constexpr const char* HashSizeName = "HashSize";
    // Get static field: static private System.String HashSizeName
    static ::StringW _get_HashSizeName();
    // Set static field: static private System.String HashSizeName
    static void _set_HashSizeName(::StringW value);
    // static field const value: static private System.String KeysName
    static constexpr const char* KeysName = "Keys";
    // Get static field: static private System.String KeysName
    static ::StringW _get_KeysName();
    // Set static field: static private System.String KeysName
    static void _set_KeysName(::StringW value);
    // static field const value: static private System.String ValuesName
    static constexpr const char* ValuesName = "Values";
    // Get static field: static private System.String ValuesName
    static ::StringW _get_ValuesName();
    // Set static field: static private System.String ValuesName
    static void _set_ValuesName(::StringW value);
    // static field const value: static private System.String KeyComparerName
    static constexpr const char* KeyComparerName = "KeyComparer";
    // Get static field: static private System.String KeyComparerName
    static ::StringW _get_KeyComparerName();
    // Set static field: static private System.String KeyComparerName
    static void _set_KeyComparerName(::StringW value);
    // Get instance field reference: private System.Collections.Hashtable/System.Collections.bucket[] buckets
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Hashtable::bucket>& dyn_buckets();
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private System.Int32 occupancy
    [[deprecated("Use field access instead!")]] int& dyn_occupancy();
    // Get instance field reference: private System.Int32 loadsize
    [[deprecated("Use field access instead!")]] int& dyn_loadsize();
    // Get instance field reference: private System.Single loadFactor
    [[deprecated("Use field access instead!")]] float& dyn_loadFactor();
    // Get instance field reference: private System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // Get instance field reference: private System.Boolean isWriterInProgress
    [[deprecated("Use field access instead!")]] bool& dyn_isWriterInProgress();
    // Get instance field reference: private System.Collections.ICollection keys
    [[deprecated("Use field access instead!")]] ::System::Collections::ICollection*& dyn_keys();
    // Get instance field reference: private System.Collections.ICollection values
    [[deprecated("Use field access instead!")]] ::System::Collections::ICollection*& dyn_values();
    // Get instance field reference: private System.Collections.IEqualityComparer _keycomparer
    [[deprecated("Use field access instead!")]] ::System::Collections::IEqualityComparer*& dyn__keycomparer();
    // Get instance field reference: private System.Object _syncRoot
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__syncRoot();
    // public System.Object get_Item(System.Object key)
    // Offset: 0x1DB2A1C
    ::Il2CppObject* get_Item(::Il2CppObject* key);
    // public System.Void set_Item(System.Object key, System.Object value)
    // Offset: 0x1DB2C5C
    void set_Item(::Il2CppObject* key, ::Il2CppObject* value);
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1DB3170
    bool get_IsReadOnly();
    // public System.Collections.ICollection get_Keys()
    // Offset: 0x1DB3290
    ::System::Collections::ICollection* get_Keys();
    // public System.Collections.ICollection get_Values()
    // Offset: 0x1DB332C
    ::System::Collections::ICollection* get_Values();
    // public System.Object get_SyncRoot()
    // Offset: 0x1DB362C
    ::Il2CppObject* get_SyncRoot();
    // public System.Int32 get_Count()
    // Offset: 0x1DB36A4
    int get_Count();
    // System.Void .ctor(System.Boolean trash)
    // Offset: 0x1DB17E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(bool trash) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(trash)));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x1DB1ACC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor)
    // Offset: 0x1DB17FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer)
    // Offset: 0x1DB1AD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor, ::System::Collections::IHashCodeProvider* hcp, ::System::Collections::IComparer* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor, hcp, comparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor, System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x1DB1B84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor, ::System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor, equalityComparer)));
    }
    // public System.Void .ctor(System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer)
    // Offset: 0x1DB1BAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(::System::Collections::IHashCodeProvider* hcp, ::System::Collections::IComparer* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(hcp, comparer)));
    }
    // public System.Void .ctor(System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x1DB1BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(::System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(equalityComparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x1DB1BF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, ::System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, equalityComparer)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1DB1C1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(info, context)));
    }
    // private System.UInt32 InitHash(System.Object key, System.Int32 hashsize, out System.UInt32 seed, out System.UInt32 incr)
    // Offset: 0x1DB1CB4
    uint InitHash(::Il2CppObject* key, int hashsize, ByRef<uint> seed, ByRef<uint> incr);
    // public System.Void Add(System.Object key, System.Object value)
    // Offset: 0x1DB1D14
    void Add(::Il2CppObject* key, ::Il2CppObject* value);
    // public System.Void Clear()
    // Offset: 0x1DB2200
    void Clear();
    // public System.Object Clone()
    // Offset: 0x1DB2324
    ::Il2CppObject* Clone();
    // public System.Boolean Contains(System.Object key)
    // Offset: 0x1DB2450
    bool Contains(::Il2CppObject* key);
    // public System.Boolean ContainsKey(System.Object key)
    // Offset: 0x1DB2460
    bool ContainsKey(::Il2CppObject* key);
    // private System.Void CopyKeys(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1DB2600
    void CopyKeys(::System::Array* array, int arrayIndex);
    // private System.Void CopyEntries(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1DB26AC
    void CopyEntries(::System::Array* array, int arrayIndex);
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1DB27C8
    void CopyTo(::System::Array* array, int arrayIndex);
    // private System.Void CopyValues(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1DB2964
    void CopyValues(::System::Array* array, int arrayIndex);
    // private System.Void expand()
    // Offset: 0x1DB2C64
    void expand();
    // private System.Void rehash()
    // Offset: 0x1DB2E5C
    void rehash();
    // private System.Void UpdateVersion()
    // Offset: 0x1DB22F4
    void UpdateVersion();
    // private System.Void rehash(System.Int32 newsize, System.Boolean forceNewHashCode)
    // Offset: 0x1DB2CE4
    void rehash(int newsize, bool forceNewHashCode);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1DB2F60
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x1DB3028
    ::System::Collections::IDictionaryEnumerator* GetEnumerator();
    // protected System.Int32 GetHash(System.Object key)
    // Offset: 0x1DB308C
    int GetHash(::Il2CppObject* key);
    // protected System.Boolean KeyEquals(System.Object item, System.Object key)
    // Offset: 0x1DB3178
    bool KeyEquals(::Il2CppObject* item, ::Il2CppObject* key);
    // private System.Void Insert(System.Object key, System.Object nvalue, System.Boolean add)
    // Offset: 0x1DB1D1C
    void Insert(::Il2CppObject* key, ::Il2CppObject* nvalue, bool add);
    // private System.Void putEntry(System.Collections.Hashtable/System.Collections.bucket[] newBuckets, System.Object key, System.Object nvalue, System.Int32 hashcode)
    // Offset: 0x1DB2E7C
    void putEntry(::ArrayW<::System::Collections::Hashtable::bucket> newBuckets, ::Il2CppObject* key, ::Il2CppObject* nvalue, int hashcode);
    // public System.Void Remove(System.Object key)
    // Offset: 0x1DB33C8
    void Remove(::Il2CppObject* key);
    // static public System.Collections.Hashtable Synchronized(System.Collections.Hashtable table)
    // Offset: 0x1DB36AC
    static ::System::Collections::Hashtable* Synchronized(::System::Collections::Hashtable* table);
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1DB377C
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0x1DB3C3C
    void OnDeserialization(::Il2CppObject* sender);
    // public System.Void .ctor()
    // Offset: 0x1DB17F0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>()));
    }
  }; // System.Collections.Hashtable
  #pragma pack(pop)
  static check_size<sizeof(Hashtable), 72 + sizeof(::Il2CppObject*)> __System_Collections_HashtableSizeCheck;
  static_assert(sizeof(Hashtable) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::Hashtable::bucket, "System.Collections", "Hashtable/bucket");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::Hashtable::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::get_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Collections::Hashtable::set_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::get_Keys
// Il2CppName: get_Keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::get_Keys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::get_Values
// Il2CppName: get_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::get_Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Hashtable::InitHash
// Il2CppName: InitHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Collections::Hashtable::*)(::Il2CppObject*, int, ByRef<uint>, ByRef<uint>)>(&System::Collections::Hashtable::InitHash)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* hashsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* seed = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* incr = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "InitHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, hashsize, seed, incr});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Collections::Hashtable::Add)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::Contains)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::ContainsKey
// Il2CppName: ContainsKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::ContainsKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "ContainsKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::CopyKeys
// Il2CppName: CopyKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::System::Array*, int)>(&System::Collections::Hashtable::CopyKeys)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "CopyKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::CopyEntries
// Il2CppName: CopyEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::System::Array*, int)>(&System::Collections::Hashtable::CopyEntries)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "CopyEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::System::Array*, int)>(&System::Collections::Hashtable::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::CopyValues
// Il2CppName: CopyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::System::Array*, int)>(&System::Collections::Hashtable::CopyValues)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "CopyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::expand
// Il2CppName: expand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::expand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "expand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::rehash
// Il2CppName: rehash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::rehash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "rehash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::UpdateVersion
// Il2CppName: UpdateVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::UpdateVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "UpdateVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::rehash
// Il2CppName: rehash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(int, bool)>(&System::Collections::Hashtable::rehash)> {
  static const MethodInfo* get() {
    static auto* newsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* forceNewHashCode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "rehash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newsize, forceNewHashCode});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IDictionaryEnumerator* (System::Collections::Hashtable::*)()>(&System::Collections::Hashtable::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::GetHash
// Il2CppName: GetHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::GetHash)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "GetHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::KeyEquals
// Il2CppName: KeyEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::Hashtable::*)(::Il2CppObject*, ::Il2CppObject*)>(&System::Collections::Hashtable::KeyEquals)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "KeyEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item, key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::Il2CppObject*, ::Il2CppObject*, bool)>(&System::Collections::Hashtable::Insert)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* nvalue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* add = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, nvalue, add});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::putEntry
// Il2CppName: putEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::ArrayW<::System::Collections::Hashtable::bucket>, ::Il2CppObject*, ::Il2CppObject*, int)>(&System::Collections::Hashtable::putEntry)> {
  static const MethodInfo* get() {
    static auto* newBuckets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable/bucket"), 1)->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* nvalue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* hashcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "putEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newBuckets, key, nvalue, hashcode});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::Remove)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::Synchronized
// Il2CppName: Synchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (*)(::System::Collections::Hashtable*)>(&System::Collections::Hashtable::Synchronized)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "Synchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Collections::Hashtable::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::OnDeserialization
// Il2CppName: OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Hashtable::*)(::Il2CppObject*)>(&System::Collections::Hashtable::OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Hashtable*), "OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: System::Collections::Hashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
