// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.Component
#include "System/ComponentModel/Component.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: AsyncStreamReader
  class AsyncStreamReader;
  // Forward declaring type: ProcessThreadCollection
  class ProcessThreadCollection;
  // Forward declaring type: ProcessModuleCollection
  class ProcessModuleCollection;
  // Forward declaring type: ProcessStartInfo
  class ProcessStartInfo;
  // Forward declaring type: ProcessInfo
  class ProcessInfo;
  // Forward declaring type: ProcessThreadTimes
  class ProcessThreadTimes;
}
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeProcessHandle
  class SafeProcessHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: RegisteredWaitHandle
  class RegisteredWaitHandle;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ISynchronizeInvoke
  class ISynchronizeInvoke;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamReader
  class StreamReader;
  // Forward declaring type: StreamWriter
  class StreamWriter;
}
// Completed forward declares
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Process
  class Process;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Process);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Process*, "System.Diagnostics", "Process");
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Process
  // [TokenAttribute] Offset: FFFFFFFF
  // [MonitoringDescriptionAttribute] Offset: 1084984
  // [DefaultEventAttribute] Offset: 1084984
  // [DesignerAttribute] Offset: 1084984
  // [DefaultPropertyAttribute] Offset: 1084984
  class Process : public ::System::ComponentModel::Component {
    public:
    // Nested type: ::System::Diagnostics::Process::StreamReadMode
    struct StreamReadMode;
    // Nested type: ::System::Diagnostics::Process::State
    struct State;
    // Nested type: ::System::Diagnostics::Process::ProcInfo
    struct ProcInfo;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Diagnostics.Process/System.Diagnostics.StreamReadMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct StreamReadMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StreamReadMode
      constexpr StreamReadMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode undefined
      static constexpr const int undefined = 0;
      // Get static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode undefined
      static ::System::Diagnostics::Process::StreamReadMode _get_undefined();
      // Set static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode undefined
      static void _set_undefined(::System::Diagnostics::Process::StreamReadMode value);
      // static field const value: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode syncMode
      static constexpr const int syncMode = 1;
      // Get static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode syncMode
      static ::System::Diagnostics::Process::StreamReadMode _get_syncMode();
      // Set static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode syncMode
      static void _set_syncMode(::System::Diagnostics::Process::StreamReadMode value);
      // static field const value: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode asyncMode
      static constexpr const int asyncMode = 2;
      // Get static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode asyncMode
      static ::System::Diagnostics::Process::StreamReadMode _get_asyncMode();
      // Set static field: static public System.Diagnostics.Process/System.Diagnostics.StreamReadMode asyncMode
      static void _set_asyncMode(::System::Diagnostics::Process::StreamReadMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Diagnostics.Process/System.Diagnostics.StreamReadMode
    #pragma pack(pop)
    static check_size<sizeof(Process::StreamReadMode), 0 + sizeof(int)> __System_Diagnostics_Process_StreamReadModeSizeCheck;
    static_assert(sizeof(Process::StreamReadMode) == 0x4);
    public:
    // private System.Boolean haveProcessId
    // Size: 0x1
    // Offset: 0x28
    bool haveProcessId;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: haveProcessId and: processId
    char __padding0[0x3] = {};
    // private System.Int32 processId
    // Size: 0x4
    // Offset: 0x2C
    int processId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean haveProcessHandle
    // Size: 0x1
    // Offset: 0x30
    bool haveProcessHandle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: haveProcessHandle and: m_processHandle
    char __padding2[0x7] = {};
    // private Microsoft.Win32.SafeHandles.SafeProcessHandle m_processHandle
    // Size: 0x8
    // Offset: 0x38
    ::Microsoft::Win32::SafeHandles::SafeProcessHandle* m_processHandle;
    // Field size check
    static_assert(sizeof(::Microsoft::Win32::SafeHandles::SafeProcessHandle*) == 0x8);
    // private System.Boolean isRemoteMachine
    // Size: 0x1
    // Offset: 0x40
    bool isRemoteMachine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRemoteMachine and: machineName
    char __padding4[0x7] = {};
    // private System.String machineName
    // Size: 0x8
    // Offset: 0x48
    ::StringW machineName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 m_processAccess
    // Size: 0x4
    // Offset: 0x50
    int m_processAccess;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_processAccess and: threads
    char __padding6[0x4] = {};
    // private System.Diagnostics.ProcessThreadCollection threads
    // Size: 0x8
    // Offset: 0x58
    ::System::Diagnostics::ProcessThreadCollection* threads;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::ProcessThreadCollection*) == 0x8);
    // private System.Diagnostics.ProcessModuleCollection modules
    // Size: 0x8
    // Offset: 0x60
    ::System::Diagnostics::ProcessModuleCollection* modules;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::ProcessModuleCollection*) == 0x8);
    // private System.Boolean haveWorkingSetLimits
    // Size: 0x1
    // Offset: 0x68
    bool haveWorkingSetLimits;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean havePriorityClass
    // Size: 0x1
    // Offset: 0x69
    bool havePriorityClass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: havePriorityClass and: startInfo
    char __padding10[0x6] = {};
    // private System.Diagnostics.ProcessStartInfo startInfo
    // Size: 0x8
    // Offset: 0x70
    ::System::Diagnostics::ProcessStartInfo* startInfo;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::ProcessStartInfo*) == 0x8);
    // private System.Boolean watchForExit
    // Size: 0x1
    // Offset: 0x78
    bool watchForExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean watchingForExit
    // Size: 0x1
    // Offset: 0x79
    bool watchingForExit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: watchingForExit and: onExited
    char __padding13[0x6] = {};
    // private System.EventHandler onExited
    // Size: 0x8
    // Offset: 0x80
    ::System::EventHandler* onExited;
    // Field size check
    static_assert(sizeof(::System::EventHandler*) == 0x8);
    // private System.Boolean exited
    // Size: 0x1
    // Offset: 0x88
    bool exited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: exited and: exitCode
    char __padding15[0x3] = {};
    // private System.Int32 exitCode
    // Size: 0x4
    // Offset: 0x8C
    int exitCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean signaled
    // Size: 0x1
    // Offset: 0x90
    bool signaled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean haveExitTime
    // Size: 0x1
    // Offset: 0x91
    bool haveExitTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean raisedOnExited
    // Size: 0x1
    // Offset: 0x92
    bool raisedOnExited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: raisedOnExited and: registeredWaitHandle
    char __padding19[0x5] = {};
    // private System.Threading.RegisteredWaitHandle registeredWaitHandle
    // Size: 0x8
    // Offset: 0x98
    ::System::Threading::RegisteredWaitHandle* registeredWaitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::RegisteredWaitHandle*) == 0x8);
    // private System.Threading.WaitHandle waitHandle
    // Size: 0x8
    // Offset: 0xA0
    ::System::Threading::WaitHandle* waitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::WaitHandle*) == 0x8);
    // private System.ComponentModel.ISynchronizeInvoke synchronizingObject
    // Size: 0x8
    // Offset: 0xA8
    ::System::ComponentModel::ISynchronizeInvoke* synchronizingObject;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::ISynchronizeInvoke*) == 0x8);
    // private System.IO.StreamReader standardOutput
    // Size: 0x8
    // Offset: 0xB0
    ::System::IO::StreamReader* standardOutput;
    // Field size check
    static_assert(sizeof(::System::IO::StreamReader*) == 0x8);
    // private System.IO.StreamWriter standardInput
    // Size: 0x8
    // Offset: 0xB8
    ::System::IO::StreamWriter* standardInput;
    // Field size check
    static_assert(sizeof(::System::IO::StreamWriter*) == 0x8);
    // private System.IO.StreamReader standardError
    // Size: 0x8
    // Offset: 0xC0
    ::System::IO::StreamReader* standardError;
    // Field size check
    static_assert(sizeof(::System::IO::StreamReader*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0xC8
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: outputStreamReadMode
    char __padding26[0x3] = {};
    // private System.Diagnostics.Process/System.Diagnostics.StreamReadMode outputStreamReadMode
    // Size: 0x4
    // Offset: 0xCC
    ::System::Diagnostics::Process::StreamReadMode outputStreamReadMode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Process::StreamReadMode) == 0x4);
    // private System.Diagnostics.Process/System.Diagnostics.StreamReadMode errorStreamReadMode
    // Size: 0x4
    // Offset: 0xD0
    ::System::Diagnostics::Process::StreamReadMode errorStreamReadMode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Process::StreamReadMode) == 0x4);
    // private System.Diagnostics.Process/System.Diagnostics.StreamReadMode inputStreamReadMode
    // Size: 0x4
    // Offset: 0xD4
    ::System::Diagnostics::Process::StreamReadMode inputStreamReadMode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Process::StreamReadMode) == 0x4);
    // System.Diagnostics.AsyncStreamReader output
    // Size: 0x8
    // Offset: 0xD8
    ::System::Diagnostics::AsyncStreamReader* output;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::AsyncStreamReader*) == 0x8);
    // System.Diagnostics.AsyncStreamReader error
    // Size: 0x8
    // Offset: 0xE0
    ::System::Diagnostics::AsyncStreamReader* error;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::AsyncStreamReader*) == 0x8);
    // private System.String process_name
    // Size: 0x8
    // Offset: 0xE8
    ::StringW process_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Boolean haveProcessId
    [[deprecated("Use field access instead!")]] bool& dyn_haveProcessId();
    // Get instance field reference: private System.Int32 processId
    [[deprecated("Use field access instead!")]] int& dyn_processId();
    // Get instance field reference: private System.Boolean haveProcessHandle
    [[deprecated("Use field access instead!")]] bool& dyn_haveProcessHandle();
    // Get instance field reference: private Microsoft.Win32.SafeHandles.SafeProcessHandle m_processHandle
    [[deprecated("Use field access instead!")]] ::Microsoft::Win32::SafeHandles::SafeProcessHandle*& dyn_m_processHandle();
    // Get instance field reference: private System.Boolean isRemoteMachine
    [[deprecated("Use field access instead!")]] bool& dyn_isRemoteMachine();
    // Get instance field reference: private System.String machineName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_machineName();
    // Get instance field reference: private System.Int32 m_processAccess
    [[deprecated("Use field access instead!")]] int& dyn_m_processAccess();
    // Get instance field reference: private System.Diagnostics.ProcessThreadCollection threads
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::ProcessThreadCollection*& dyn_threads();
    // Get instance field reference: private System.Diagnostics.ProcessModuleCollection modules
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::ProcessModuleCollection*& dyn_modules();
    // Get instance field reference: private System.Boolean haveWorkingSetLimits
    [[deprecated("Use field access instead!")]] bool& dyn_haveWorkingSetLimits();
    // Get instance field reference: private System.Boolean havePriorityClass
    [[deprecated("Use field access instead!")]] bool& dyn_havePriorityClass();
    // Get instance field reference: private System.Diagnostics.ProcessStartInfo startInfo
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::ProcessStartInfo*& dyn_startInfo();
    // Get instance field reference: private System.Boolean watchForExit
    [[deprecated("Use field access instead!")]] bool& dyn_watchForExit();
    // Get instance field reference: private System.Boolean watchingForExit
    [[deprecated("Use field access instead!")]] bool& dyn_watchingForExit();
    // Get instance field reference: private System.EventHandler onExited
    [[deprecated("Use field access instead!")]] ::System::EventHandler*& dyn_onExited();
    // Get instance field reference: private System.Boolean exited
    [[deprecated("Use field access instead!")]] bool& dyn_exited();
    // Get instance field reference: private System.Int32 exitCode
    [[deprecated("Use field access instead!")]] int& dyn_exitCode();
    // Get instance field reference: private System.Boolean signaled
    [[deprecated("Use field access instead!")]] bool& dyn_signaled();
    // Get instance field reference: private System.Boolean haveExitTime
    [[deprecated("Use field access instead!")]] bool& dyn_haveExitTime();
    // Get instance field reference: private System.Boolean raisedOnExited
    [[deprecated("Use field access instead!")]] bool& dyn_raisedOnExited();
    // Get instance field reference: private System.Threading.RegisteredWaitHandle registeredWaitHandle
    [[deprecated("Use field access instead!")]] ::System::Threading::RegisteredWaitHandle*& dyn_registeredWaitHandle();
    // Get instance field reference: private System.Threading.WaitHandle waitHandle
    [[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& dyn_waitHandle();
    // Get instance field reference: private System.ComponentModel.ISynchronizeInvoke synchronizingObject
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::ISynchronizeInvoke*& dyn_synchronizingObject();
    // Get instance field reference: private System.IO.StreamReader standardOutput
    [[deprecated("Use field access instead!")]] ::System::IO::StreamReader*& dyn_standardOutput();
    // Get instance field reference: private System.IO.StreamWriter standardInput
    [[deprecated("Use field access instead!")]] ::System::IO::StreamWriter*& dyn_standardInput();
    // Get instance field reference: private System.IO.StreamReader standardError
    [[deprecated("Use field access instead!")]] ::System::IO::StreamReader*& dyn_standardError();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Diagnostics.Process/System.Diagnostics.StreamReadMode outputStreamReadMode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Process::StreamReadMode& dyn_outputStreamReadMode();
    // Get instance field reference: private System.Diagnostics.Process/System.Diagnostics.StreamReadMode errorStreamReadMode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Process::StreamReadMode& dyn_errorStreamReadMode();
    // Get instance field reference: private System.Diagnostics.Process/System.Diagnostics.StreamReadMode inputStreamReadMode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Process::StreamReadMode& dyn_inputStreamReadMode();
    // Get instance field reference: System.Diagnostics.AsyncStreamReader output
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::AsyncStreamReader*& dyn_output();
    // Get instance field reference: System.Diagnostics.AsyncStreamReader error
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::AsyncStreamReader*& dyn_error();
    // Get instance field reference: private System.String process_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_process_name();
    // private System.Boolean get_Associated()
    // Offset: 0x1D9AA64
    bool get_Associated();
    // public System.Boolean get_HasExited()
    // Offset: 0x1D9AA84
    bool get_HasExited();
    // public System.IntPtr get_Handle()
    // Offset: 0x1D9B7B8
    ::System::IntPtr get_Handle();
    // public System.Int32 get_Id()
    // Offset: 0x1D9B8EC
    int get_Id();
    // public System.Diagnostics.ProcessStartInfo get_StartInfo()
    // Offset: 0x1D9B914
    ::System::Diagnostics::ProcessStartInfo* get_StartInfo();
    // public System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject()
    // Offset: 0x1D9BA04
    ::System::ComponentModel::ISynchronizeInvoke* get_SynchronizingObject();
    // public System.TimeSpan get_TotalProcessorTime()
    // Offset: 0x1D9BB8C
    ::System::TimeSpan get_TotalProcessorTime();
    // public System.String get_ProcessName()
    // Offset: 0x1D9DCFC
    ::StringW get_ProcessName();
    // static private System.Boolean get_IsWindows()
    // Offset: 0x1D9E41C
    static bool get_IsWindows();
    // private System.Void .ctor(System.String machineName, System.Boolean isRemoteMachine, System.Int32 processId, System.Diagnostics.ProcessInfo processInfo)
    // Offset: 0x1D9A9B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Process* New_ctor(::StringW machineName, bool isRemoteMachine, int processId, ::System::Diagnostics::ProcessInfo* processInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Process::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Process*, creationType>(machineName, isRemoteMachine, processId, processInfo)));
    }
    // private System.Void .ctor(Microsoft.Win32.SafeHandles.SafeProcessHandle handle, System.Int32 id)
    // Offset: 0x1D9DEBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Process* New_ctor(::Microsoft::Win32::SafeHandles::SafeProcessHandle* handle, int id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Process::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Process*, creationType>(handle, id)));
    }
    // private System.Diagnostics.ProcessThreadTimes GetProcessTimes()
    // Offset: 0x1D9B548
    ::System::Diagnostics::ProcessThreadTimes* GetProcessTimes();
    // private System.Void ReleaseProcessHandle(Microsoft.Win32.SafeHandles.SafeProcessHandle handle)
    // Offset: 0x1D9B474
    void ReleaseProcessHandle(::Microsoft::Win32::SafeHandles::SafeProcessHandle* handle);
    // private System.Void CompletionCallback(System.Object context, System.Boolean wasSignaled)
    // Offset: 0x1D9BBF0
    void CompletionCallback(::Il2CppObject* context, bool wasSignaled);
    // public System.Void Close()
    // Offset: 0x1D9BD3C
    void Close();
    // private System.Void EnsureState(System.Diagnostics.Process/System.Diagnostics.State state)
    // Offset: 0x1D9AD60
    void EnsureState(::System::Diagnostics::Process::State state);
    // private System.Void EnsureWatchingForExit()
    // Offset: 0x1D9BEB0
    void EnsureWatchingForExit();
    // static public System.Diagnostics.Process GetProcessById(System.Int32 processId)
    // Offset: 0x1D9C0A0
    static ::System::Diagnostics::Process* GetProcessById(int processId);
    // static public System.Diagnostics.Process GetCurrentProcess()
    // Offset: 0x1D9C274
    static ::System::Diagnostics::Process* GetCurrentProcess();
    // protected System.Void OnExited()
    // Offset: 0x1D9C2F0
    void OnExited();
    // private Microsoft.Win32.SafeHandles.SafeProcessHandle GetProcessHandle(System.Int32 access, System.Boolean throwIfExited)
    // Offset: 0x1D9AEC0
    ::Microsoft::Win32::SafeHandles::SafeProcessHandle* GetProcessHandle(int access, bool throwIfExited);
    // private Microsoft.Win32.SafeHandles.SafeProcessHandle GetProcessHandle(System.Int32 access)
    // Offset: 0x1D9C55C
    ::Microsoft::Win32::SafeHandles::SafeProcessHandle* GetProcessHandle(int access);
    // private Microsoft.Win32.SafeHandles.SafeProcessHandle OpenProcessHandle(System.Int32 access)
    // Offset: 0x1D9B7F4
    ::Microsoft::Win32::SafeHandles::SafeProcessHandle* OpenProcessHandle(int access);
    // public System.Void Refresh()
    // Offset: 0x1D9BE9C
    void Refresh();
    // private System.Void SetProcessHandle(Microsoft.Win32.SafeHandles.SafeProcessHandle processHandle)
    // Offset: 0x1D9C564
    void SetProcessHandle(::Microsoft::Win32::SafeHandles::SafeProcessHandle* processHandle);
    // private System.Void SetProcessId(System.Int32 processId)
    // Offset: 0x1D9C580
    void SetProcessId(int processId);
    // public System.Boolean Start()
    // Offset: 0x1D9C590
    bool Start();
    // public System.Void Kill()
    // Offset: 0x1D9DA9C
    void Kill();
    // private System.Void StopWatchingForExit()
    // Offset: 0x1D9BC14
    void StopWatchingForExit();
    // static private System.String ProcessName_internal(System.IntPtr handle)
    // Offset: 0x1D9DF5C
    static ::StringW ProcessName_internal(::System::IntPtr handle);
    // static private System.String ProcessName_internal(Microsoft.Win32.SafeHandles.SafeProcessHandle handle)
    // Offset: 0x1D9DF60
    static ::StringW ProcessName_internal(::Microsoft::Win32::SafeHandles::SafeProcessHandle* handle);
    // static private System.IntPtr GetProcess_internal(System.Int32 pid)
    // Offset: 0x1D9E004
    static ::System::IntPtr GetProcess_internal(int pid);
    // static public System.Diagnostics.Process GetProcessById(System.Int32 processId, System.String machineName)
    // Offset: 0x1D9C0F0
    static ::System::Diagnostics::Process* GetProcessById(int processId, ::StringW machineName);
    // static private System.Boolean IsLocalMachine(System.String machineName)
    // Offset: 0x1D9E008
    static bool IsLocalMachine(::StringW machineName);
    // static private System.Boolean ShellExecuteEx_internal(System.Diagnostics.ProcessStartInfo startInfo, ref System.Diagnostics.Process/System.Diagnostics.ProcInfo procInfo)
    // Offset: 0x1D9E0A0
    static bool ShellExecuteEx_internal(::System::Diagnostics::ProcessStartInfo* startInfo, ByRef<::System::Diagnostics::Process::ProcInfo> procInfo);
    // static private System.Boolean CreateProcess_internal(System.Diagnostics.ProcessStartInfo startInfo, System.IntPtr stdin, System.IntPtr stdout, System.IntPtr stderr, ref System.Diagnostics.Process/System.Diagnostics.ProcInfo procInfo)
    // Offset: 0x1D9E0A4
    static bool CreateProcess_internal(::System::Diagnostics::ProcessStartInfo* startInfo, ::System::IntPtr stdin, ::System::IntPtr stdout, ::System::IntPtr stderr, ByRef<::System::Diagnostics::Process::ProcInfo> procInfo);
    // private System.Boolean StartWithShellExecuteEx(System.Diagnostics.ProcessStartInfo startInfo)
    // Offset: 0x1D9C71C
    bool StartWithShellExecuteEx(::System::Diagnostics::ProcessStartInfo* startInfo);
    // static private System.Void CreatePipe(out System.IntPtr read, out System.IntPtr write, System.Boolean writeDirection)
    // Offset: 0x1D9E250
    static void CreatePipe(ByRef<::System::IntPtr> read, ByRef<::System::IntPtr> write, bool writeDirection);
    // private System.Boolean StartWithCreateProcess(System.Diagnostics.ProcessStartInfo startInfo)
    // Offset: 0x1D9CA20
    bool StartWithCreateProcess(::System::Diagnostics::ProcessStartInfo* startInfo);
    // static private System.Void FillUserInfo(System.Diagnostics.ProcessStartInfo startInfo, ref System.Diagnostics.Process/System.Diagnostics.ProcInfo procInfo)
    // Offset: 0x1D9E104
    static void FillUserInfo(::System::Diagnostics::ProcessStartInfo* startInfo, ByRef<::System::Diagnostics::Process::ProcInfo> procInfo);
    // private System.Void RaiseOnExited()
    // Offset: 0x1D9B49C
    void RaiseOnExited();
    // public System.Void .ctor()
    // Offset: 0x1D9A928
    // Implemented from: System.ComponentModel.Component
    // Base method: System.Void Component::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Process* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Process::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Process*, creationType>()));
    }
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1D9BCF0
    // Implemented from: System.ComponentModel.Component
    // Base method: System.Void Component::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.String ToString()
    // Offset: 0x1D9DB98
    // Implemented from: System.ComponentModel.Component
    // Base method: System.String Component::ToString()
    ::StringW ToString();
  }; // System.Diagnostics.Process
  #pragma pack(pop)
  static check_size<sizeof(Process), 232 + sizeof(::StringW)> __System_Diagnostics_ProcessSizeCheck;
  static_assert(sizeof(Process) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Process::StreamReadMode, "System.Diagnostics", "Process/StreamReadMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Process::get_Associated
// Il2CppName: get_Associated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_Associated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_Associated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_HasExited
// Il2CppName: get_HasExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_HasExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_HasExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_StartInfo
// Il2CppName: get_StartInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::ProcessStartInfo* (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_StartInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_StartInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_SynchronizingObject
// Il2CppName: get_SynchronizingObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ISynchronizeInvoke* (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_SynchronizingObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_SynchronizingObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_TotalProcessorTime
// Il2CppName: get_TotalProcessorTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_TotalProcessorTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_TotalProcessorTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_ProcessName
// Il2CppName: get_ProcessName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::get_ProcessName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_ProcessName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::get_IsWindows
// Il2CppName: get_IsWindows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Diagnostics::Process::get_IsWindows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "get_IsWindows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Process::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcessTimes
// Il2CppName: GetProcessTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::ProcessThreadTimes* (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::GetProcessTimes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcessTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::ReleaseProcessHandle
// Il2CppName: ReleaseProcessHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(::Microsoft::Win32::SafeHandles::SafeProcessHandle*)>(&System::Diagnostics::Process::ReleaseProcessHandle)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafeProcessHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "ReleaseProcessHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::CompletionCallback
// Il2CppName: CompletionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(::Il2CppObject*, bool)>(&System::Diagnostics::Process::CompletionCallback)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* wasSignaled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "CompletionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, wasSignaled});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::EnsureState
// Il2CppName: EnsureState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(::System::Diagnostics::Process::State)>(&System::Diagnostics::Process::EnsureState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "Process/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "EnsureState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::EnsureWatchingForExit
// Il2CppName: EnsureWatchingForExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::EnsureWatchingForExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "EnsureWatchingForExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcessById
// Il2CppName: GetProcessById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Process* (*)(int)>(&System::Diagnostics::Process::GetProcessById)> {
  static const MethodInfo* get() {
    static auto* processId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcessById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetCurrentProcess
// Il2CppName: GetCurrentProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Process* (*)()>(&System::Diagnostics::Process::GetCurrentProcess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetCurrentProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::OnExited
// Il2CppName: OnExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::OnExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "OnExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcessHandle
// Il2CppName: GetProcessHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::SafeHandles::SafeProcessHandle* (System::Diagnostics::Process::*)(int, bool)>(&System::Diagnostics::Process::GetProcessHandle)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* throwIfExited = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcessHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access, throwIfExited});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcessHandle
// Il2CppName: GetProcessHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::SafeHandles::SafeProcessHandle* (System::Diagnostics::Process::*)(int)>(&System::Diagnostics::Process::GetProcessHandle)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcessHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::OpenProcessHandle
// Il2CppName: OpenProcessHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Microsoft::Win32::SafeHandles::SafeProcessHandle* (System::Diagnostics::Process::*)(int)>(&System::Diagnostics::Process::OpenProcessHandle)> {
  static const MethodInfo* get() {
    static auto* access = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "OpenProcessHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{access});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::SetProcessHandle
// Il2CppName: SetProcessHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(::Microsoft::Win32::SafeHandles::SafeProcessHandle*)>(&System::Diagnostics::Process::SetProcessHandle)> {
  static const MethodInfo* get() {
    static auto* processHandle = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafeProcessHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "SetProcessHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processHandle});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::SetProcessId
// Il2CppName: SetProcessId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(int)>(&System::Diagnostics::Process::SetProcessId)> {
  static const MethodInfo* get() {
    static auto* processId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "SetProcessId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::Kill
// Il2CppName: Kill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::Kill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "Kill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::StopWatchingForExit
// Il2CppName: StopWatchingForExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::StopWatchingForExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "StopWatchingForExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::ProcessName_internal
// Il2CppName: ProcessName_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::IntPtr)>(&System::Diagnostics::Process::ProcessName_internal)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "ProcessName_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::ProcessName_internal
// Il2CppName: ProcessName_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Microsoft::Win32::SafeHandles::SafeProcessHandle*)>(&System::Diagnostics::Process::ProcessName_internal)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("Microsoft.Win32.SafeHandles", "SafeProcessHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "ProcessName_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcess_internal
// Il2CppName: GetProcess_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int)>(&System::Diagnostics::Process::GetProcess_internal)> {
  static const MethodInfo* get() {
    static auto* pid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcess_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pid});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::GetProcessById
// Il2CppName: GetProcessById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Process* (*)(int, ::StringW)>(&System::Diagnostics::Process::GetProcessById)> {
  static const MethodInfo* get() {
    static auto* processId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* machineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "GetProcessById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processId, machineName});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::IsLocalMachine
// Il2CppName: IsLocalMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&System::Diagnostics::Process::IsLocalMachine)> {
  static const MethodInfo* get() {
    static auto* machineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "IsLocalMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{machineName});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::ShellExecuteEx_internal
// Il2CppName: ShellExecuteEx_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Diagnostics::ProcessStartInfo*, ByRef<::System::Diagnostics::Process::ProcInfo>)>(&System::Diagnostics::Process::ShellExecuteEx_internal)> {
  static const MethodInfo* get() {
    static auto* startInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "ProcessStartInfo")->byval_arg;
    static auto* procInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "Process/ProcInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "ShellExecuteEx_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startInfo, procInfo});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::CreateProcess_internal
// Il2CppName: CreateProcess_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Diagnostics::ProcessStartInfo*, ::System::IntPtr, ::System::IntPtr, ::System::IntPtr, ByRef<::System::Diagnostics::Process::ProcInfo>)>(&System::Diagnostics::Process::CreateProcess_internal)> {
  static const MethodInfo* get() {
    static auto* startInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "ProcessStartInfo")->byval_arg;
    static auto* stdin = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* stdout = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* stderr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* procInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "Process/ProcInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "CreateProcess_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startInfo, stdin, stdout, stderr, procInfo});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::StartWithShellExecuteEx
// Il2CppName: StartWithShellExecuteEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Process::*)(::System::Diagnostics::ProcessStartInfo*)>(&System::Diagnostics::Process::StartWithShellExecuteEx)> {
  static const MethodInfo* get() {
    static auto* startInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "ProcessStartInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "StartWithShellExecuteEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startInfo});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::CreatePipe
// Il2CppName: CreatePipe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::IntPtr>, ByRef<::System::IntPtr>, bool)>(&System::Diagnostics::Process::CreatePipe)> {
  static const MethodInfo* get() {
    static auto* read = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* write = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* writeDirection = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "CreatePipe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{read, write, writeDirection});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::StartWithCreateProcess
// Il2CppName: StartWithCreateProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Process::*)(::System::Diagnostics::ProcessStartInfo*)>(&System::Diagnostics::Process::StartWithCreateProcess)> {
  static const MethodInfo* get() {
    static auto* startInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "ProcessStartInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "StartWithCreateProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startInfo});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::FillUserInfo
// Il2CppName: FillUserInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::ProcessStartInfo*, ByRef<::System::Diagnostics::Process::ProcInfo>)>(&System::Diagnostics::Process::FillUserInfo)> {
  static const MethodInfo* get() {
    static auto* startInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "ProcessStartInfo")->byval_arg;
    static auto* procInfo = &::il2cpp_utils::GetClassFromName("System.Diagnostics", "Process/ProcInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "FillUserInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startInfo, procInfo});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::RaiseOnExited
// Il2CppName: RaiseOnExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::RaiseOnExited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "RaiseOnExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Process::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Process::*)(bool)>(&System::Diagnostics::Process::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Process::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Process::*)()>(&System::Diagnostics::Process::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Process*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
