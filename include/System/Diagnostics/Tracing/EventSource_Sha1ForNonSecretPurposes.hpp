// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventSource
#include "System/Diagnostics/Tracing/EventSource.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes, "System.Diagnostics.Tracing", "EventSource/Sha1ForNonSecretPurposes");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.Sha1ForNonSecretPurposes
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventSource::Sha1ForNonSecretPurposes/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int64 length
    // Size: 0x8
    // Offset: 0x0
    int64_t length;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.UInt32[] w
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<uint> w;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Int32 pos
    // Size: 0x4
    // Offset: 0x10
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Sha1ForNonSecretPurposes
    constexpr Sha1ForNonSecretPurposes(int64_t length_ = {}, ::ArrayW<uint> w_ = ::ArrayW<uint>(static_cast<void*>(nullptr)), int pos_ = {}) noexcept : length{length_}, w{w_}, pos{pos_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int64 length
    [[deprecated("Use field access instead!")]] int64_t& dyn_length();
    // Get instance field reference: private System.UInt32[] w
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_w();
    // Get instance field reference: private System.Int32 pos
    [[deprecated("Use field access instead!")]] int& dyn_pos();
    // public System.Void Start()
    // Offset: 0xA43FC0
    void Start();
    // public System.Void Append(System.Byte input)
    // Offset: 0xA43FC8
    void Append(uint8_t input);
    // public System.Void Append(System.Byte[] input)
    // Offset: 0xA43FD0
    void Append(::ArrayW<uint8_t> input);
    // public System.Void Finish(System.Byte[] output)
    // Offset: 0xA43FD8
    void Finish(::ArrayW<uint8_t> output);
    // private System.Void Drain()
    // Offset: 0xA43FE0
    void Drain();
    // static private System.UInt32 Rol1(System.UInt32 input)
    // Offset: 0xDDC970
    static uint Rol1(uint input);
    // static private System.UInt32 Rol5(System.UInt32 input)
    // Offset: 0xDDC978
    static uint Rol5(uint input);
    // static private System.UInt32 Rol30(System.UInt32 input)
    // Offset: 0xDDC980
    static uint Rol30(uint input);
  }; // System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.Sha1ForNonSecretPurposes
  #pragma pack(pop)
  static check_size<sizeof(EventSource::Sha1ForNonSecretPurposes), 16 + sizeof(int)> __System_Diagnostics_Tracing_EventSource_Sha1ForNonSecretPurposesSizeCheck;
  static_assert(sizeof(EventSource::Sha1ForNonSecretPurposes) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::*)()>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::*)(uint8_t)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Append)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::*)(::ArrayW<uint8_t>)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Append)> {
  static const MethodInfo* get() {
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::*)(::ArrayW<uint8_t>)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Finish)> {
  static const MethodInfo* get() {
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Drain
// Il2CppName: Drain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::*)()>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Drain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Drain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol1
// Il2CppName: Rol1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol1)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Rol1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol5
// Il2CppName: Rol5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol5)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Rol5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol30
// Il2CppName: Rol30
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes::Rol30)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes), "Rol30", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
