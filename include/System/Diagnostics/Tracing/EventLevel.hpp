// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventLevel
  struct EventLevel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventLevel, "System.Diagnostics.Tracing", "EventLevel");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventLevel
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventLevel/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EventLevel
    constexpr EventLevel(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Diagnostics.Tracing.EventLevel LogAlways
    static constexpr const int LogAlways = 0;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel LogAlways
    static ::System::Diagnostics::Tracing::EventLevel _get_LogAlways();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel LogAlways
    static void _set_LogAlways(::System::Diagnostics::Tracing::EventLevel value);
    // static field const value: static public System.Diagnostics.Tracing.EventLevel Critical
    static constexpr const int Critical = 1;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel Critical
    static ::System::Diagnostics::Tracing::EventLevel _get_Critical();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel Critical
    static void _set_Critical(::System::Diagnostics::Tracing::EventLevel value);
    // static field const value: static public System.Diagnostics.Tracing.EventLevel Error
    static constexpr const int Error = 2;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel Error
    static ::System::Diagnostics::Tracing::EventLevel _get_Error();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel Error
    static void _set_Error(::System::Diagnostics::Tracing::EventLevel value);
    // static field const value: static public System.Diagnostics.Tracing.EventLevel Warning
    static constexpr const int Warning = 3;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel Warning
    static ::System::Diagnostics::Tracing::EventLevel _get_Warning();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel Warning
    static void _set_Warning(::System::Diagnostics::Tracing::EventLevel value);
    // static field const value: static public System.Diagnostics.Tracing.EventLevel Informational
    static constexpr const int Informational = 4;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel Informational
    static ::System::Diagnostics::Tracing::EventLevel _get_Informational();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel Informational
    static void _set_Informational(::System::Diagnostics::Tracing::EventLevel value);
    // static field const value: static public System.Diagnostics.Tracing.EventLevel Verbose
    static constexpr const int Verbose = 5;
    // Get static field: static public System.Diagnostics.Tracing.EventLevel Verbose
    static ::System::Diagnostics::Tracing::EventLevel _get_Verbose();
    // Set static field: static public System.Diagnostics.Tracing.EventLevel Verbose
    static void _set_Verbose(::System::Diagnostics::Tracing::EventLevel value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Diagnostics.Tracing.EventLevel
  #pragma pack(pop)
  static check_size<sizeof(EventLevel), 0 + sizeof(int)> __System_Diagnostics_Tracing_EventLevelSizeCheck;
  static_assert(sizeof(EventLevel) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
