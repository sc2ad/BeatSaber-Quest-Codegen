// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventOpcode
#include "System/Diagnostics/Tracing/EventOpcode.hpp"
// Including type: System.Diagnostics.Tracing.EventTags
#include "System/Diagnostics/Tracing/EventTags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: TraceLoggingMetadataCollector
  class TraceLoggingMetadataCollector;
  // Forward declaring type: EventFieldFormat
  struct EventFieldFormat;
  // Forward declaring type: TraceLoggingDataCollector
  class TraceLoggingDataCollector;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: TraceLoggingTypeInfo
  class TraceLoggingTypeInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::TraceLoggingTypeInfo);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::TraceLoggingTypeInfo*, "System.Diagnostics.Tracing", "TraceLoggingTypeInfo");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.TraceLoggingTypeInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class TraceLoggingTypeInfo : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Diagnostics.Tracing.EventKeywords keywords
    // Size: 0x8
    // Offset: 0x18
    ::System::Diagnostics::Tracing::EventKeywords keywords;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // private readonly System.Diagnostics.Tracing.EventLevel level
    // Size: 0x4
    // Offset: 0x20
    ::System::Diagnostics::Tracing::EventLevel level;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventLevel) == 0x4);
    // private readonly System.Diagnostics.Tracing.EventOpcode opcode
    // Size: 0x4
    // Offset: 0x24
    ::System::Diagnostics::Tracing::EventOpcode opcode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventOpcode) == 0x4);
    // private readonly System.Diagnostics.Tracing.EventTags tags
    // Size: 0x4
    // Offset: 0x28
    ::System::Diagnostics::Tracing::EventTags tags;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventTags) == 0x4);
    // Padding between fields: tags and: dataType
    char __padding4[0x4] = {};
    // private readonly System.Type dataType
    // Size: 0x8
    // Offset: 0x30
    ::System::Type* dataType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private readonly System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private readonly System.Diagnostics.Tracing.EventKeywords keywords
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventKeywords& dyn_keywords();
    // Get instance field reference: private readonly System.Diagnostics.Tracing.EventLevel level
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventLevel& dyn_level();
    // Get instance field reference: private readonly System.Diagnostics.Tracing.EventOpcode opcode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventOpcode& dyn_opcode();
    // Get instance field reference: private readonly System.Diagnostics.Tracing.EventTags tags
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventTags& dyn_tags();
    // Get instance field reference: private readonly System.Type dataType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_dataType();
    // public System.String get_Name()
    // Offset: 0xDE6598
    ::StringW get_Name();
    // public System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0xDE65A0
    ::System::Diagnostics::Tracing::EventLevel get_Level();
    // public System.Diagnostics.Tracing.EventOpcode get_Opcode()
    // Offset: 0xDE65A8
    ::System::Diagnostics::Tracing::EventOpcode get_Opcode();
    // public System.Diagnostics.Tracing.EventKeywords get_Keywords()
    // Offset: 0xDE65B0
    ::System::Diagnostics::Tracing::EventKeywords get_Keywords();
    // public System.Diagnostics.Tracing.EventTags get_Tags()
    // Offset: 0xDE65B8
    ::System::Diagnostics::Tracing::EventTags get_Tags();
    // System.Type get_DataType()
    // Offset: 0xDE65C0
    ::System::Type* get_DataType();
    // System.Void .ctor(System.Type dataType)
    // Offset: 0xDE635C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceLoggingTypeInfo* New_ctor(::System::Type* dataType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceLoggingTypeInfo*, creationType>(dataType)));
    }
    // System.Void .ctor(System.Type dataType, System.String name, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventOpcode opcode, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventTags tags)
    // Offset: 0xDE644C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceLoggingTypeInfo* New_ctor(::System::Type* dataType, ::StringW name, ::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventOpcode opcode, ::System::Diagnostics::Tracing::EventKeywords keywords, ::System::Diagnostics::Tracing::EventTags tags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceLoggingTypeInfo*, creationType>(dataType, name, level, opcode, keywords, tags)));
    }
    // public System.Void WriteMetadata(System.Diagnostics.Tracing.TraceLoggingMetadataCollector collector, System.String name, System.Diagnostics.Tracing.EventFieldFormat format)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void WriteMetadata(::System::Diagnostics::Tracing::TraceLoggingMetadataCollector* collector, ::StringW name, ::System::Diagnostics::Tracing::EventFieldFormat format);
    // public System.Void WriteObjectData(System.Diagnostics.Tracing.TraceLoggingDataCollector collector, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void WriteObjectData(::System::Diagnostics::Tracing::TraceLoggingDataCollector* collector, ::Il2CppObject* value);
    // public System.Object GetData(System.Object value)
    // Offset: 0xDE4830
    ::Il2CppObject* GetData(::Il2CppObject* value);
  }; // System.Diagnostics.Tracing.TraceLoggingTypeInfo
  #pragma pack(pop)
  static check_size<sizeof(TraceLoggingTypeInfo), 48 + sizeof(::System::Type*)> __System_Diagnostics_Tracing_TraceLoggingTypeInfoSizeCheck;
  static_assert(sizeof(TraceLoggingTypeInfo) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Level
// Il2CppName: get_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventLevel (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Level)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Opcode
// Il2CppName: get_Opcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventOpcode (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Opcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_Opcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Keywords
// Il2CppName: get_Keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventKeywords (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Keywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_Keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Tags
// Il2CppName: get_Tags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventTags (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_Tags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_Tags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_DataType
// Il2CppName: get_DataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)()>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::get_DataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "get_DataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::WriteMetadata
// Il2CppName: WriteMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)(::System::Diagnostics::Tracing::TraceLoggingMetadataCollector*, ::StringW, ::System::Diagnostics::Tracing::EventFieldFormat)>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::WriteMetadata)> {
  static const MethodInfo* get() {
    static auto* collector = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingMetadataCollector")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventFieldFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "WriteMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collector, name, format});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::WriteObjectData
// Il2CppName: WriteObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)(::System::Diagnostics::Tracing::TraceLoggingDataCollector*, ::Il2CppObject*)>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::WriteObjectData)> {
  static const MethodInfo* get() {
    static auto* collector = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "TraceLoggingDataCollector")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "WriteObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collector, value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::TraceLoggingTypeInfo::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Diagnostics::Tracing::TraceLoggingTypeInfo::*)(::Il2CppObject*)>(&System::Diagnostics::Tracing::TraceLoggingTypeInfo::GetData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::TraceLoggingTypeInfo*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
