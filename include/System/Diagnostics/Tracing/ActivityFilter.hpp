// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventSource
  class EventSource;
  // Forward declaring type: EventKeywords
  struct EventKeywords;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ActivityFilter
  class ActivityFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::ActivityFilter);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::ActivityFilter*, "System.Diagnostics.Tracing", "ActivityFilter");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.ActivityFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class ActivityFilter : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Diagnostics::Tracing::ActivityFilter::$GetFilterAsTuple$d__7
    class $GetFilterAsTuple$d__7;
    // Nested type: ::System::Diagnostics::Tracing::ActivityFilter::$$c__DisplayClass11_0
    class $$c__DisplayClass11_0;
    // Nested type: ::System::Diagnostics::Tracing::ActivityFilter::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    public:
    // private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> m_activeActivities
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>* m_activeActivities;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>*) == 0x8);
    // private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Tuple`2<System.Guid,System.Int32>> m_rootActiveActivities
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, ::System::Tuple_2<::System::Guid, int>*>* m_rootActiveActivities;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, ::System::Tuple_2<::System::Guid, int>*>*) == 0x8);
    // private System.Guid m_providerGuid
    // Size: 0x10
    // Offset: 0x20
    ::System::Guid m_providerGuid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // private System.Int32 m_eventId
    // Size: 0x4
    // Offset: 0x30
    int m_eventId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_samplingFreq
    // Size: 0x4
    // Offset: 0x34
    int m_samplingFreq;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_curSampleCount
    // Size: 0x4
    // Offset: 0x38
    int m_curSampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_perEventSourceSessionId
    // Size: 0x4
    // Offset: 0x3C
    int m_perEventSourceSessionId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Diagnostics.Tracing.ActivityFilter m_next
    // Size: 0x8
    // Offset: 0x40
    ::System::Diagnostics::Tracing::ActivityFilter* m_next;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::ActivityFilter*) == 0x8);
    // private System.Action`1<System.Guid> m_myActivityDelegate
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::System::Guid>* m_myActivityDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::Guid>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> m_activeActivities
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>*& dyn_m_activeActivities();
    // Get instance field reference: private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Tuple`2<System.Guid,System.Int32>> m_rootActiveActivities
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, ::System::Tuple_2<::System::Guid, int>*>*& dyn_m_rootActiveActivities();
    // Get instance field reference: private System.Guid m_providerGuid
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_m_providerGuid();
    // Get instance field reference: private System.Int32 m_eventId
    [[deprecated("Use field access instead!")]] int& dyn_m_eventId();
    // Get instance field reference: private System.Int32 m_samplingFreq
    [[deprecated("Use field access instead!")]] int& dyn_m_samplingFreq();
    // Get instance field reference: private System.Int32 m_curSampleCount
    [[deprecated("Use field access instead!")]] int& dyn_m_curSampleCount();
    // Get instance field reference: private System.Int32 m_perEventSourceSessionId
    [[deprecated("Use field access instead!")]] int& dyn_m_perEventSourceSessionId();
    // Get instance field reference: private System.Diagnostics.Tracing.ActivityFilter m_next
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::ActivityFilter*& dyn_m_next();
    // Get instance field reference: private System.Action`1<System.Guid> m_myActivityDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::Guid>*& dyn_m_myActivityDelegate();
    // private System.Void .ctor(System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.Int32 eventId, System.Int32 samplingFreq, System.Diagnostics.Tracing.ActivityFilter existingFilter)
    // Offset: 0xD3FDB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActivityFilter* New_ctor(::System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, int eventId, int samplingFreq, ::System::Diagnostics::Tracing::ActivityFilter* existingFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::ActivityFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActivityFilter*, creationType>(source, perEventSourceSessionId, eventId, samplingFreq, existingFilter)));
    }
    // static public System.Void DisableFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source)
    // Offset: 0xD3EB20
    static void DisableFilter(ByRef<::System::Diagnostics::Tracing::ActivityFilter*> filterList, ::System::Diagnostics::Tracing::EventSource* source);
    // static public System.Void UpdateFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.String startEvents)
    // Offset: 0xD3EEC4
    static void UpdateFilter(ByRef<::System::Diagnostics::Tracing::ActivityFilter*> filterList, ::System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, ::StringW startEvents);
    // static public System.Boolean PassesActivityFilter(System.Diagnostics.Tracing.ActivityFilter filterList, System.Guid* childActivityID, System.Boolean triggeringEvent, System.Diagnostics.Tracing.EventSource source, System.Int32 eventId)
    // Offset: 0xD3F414
    static bool PassesActivityFilter(::System::Diagnostics::Tracing::ActivityFilter* filterList, ::System::Guid* childActivityID, bool triggeringEvent, ::System::Diagnostics::Tracing::EventSource* source, int eventId);
    // static public System.Void FlowActivityIfNeeded(System.Diagnostics.Tracing.ActivityFilter filterList, System.Guid* currentActivityId, System.Guid* childActivityID)
    // Offset: 0xD3F8D0
    static void FlowActivityIfNeeded(::System::Diagnostics::Tracing::ActivityFilter* filterList, ::System::Guid* currentActivityId, ::System::Guid* childActivityID);
    // static public System.Void UpdateKwdTriggers(System.Diagnostics.Tracing.ActivityFilter activityFilter, System.Guid sourceGuid, System.Diagnostics.Tracing.EventSource source, System.Diagnostics.Tracing.EventKeywords sessKeywords)
    // Offset: 0xD3FB9C
    static void UpdateKwdTriggers(::System::Diagnostics::Tracing::ActivityFilter* activityFilter, ::System::Guid sourceGuid, ::System::Diagnostics::Tracing::EventSource* source, ::System::Diagnostics::Tracing::EventKeywords sessKeywords);
    // public System.Collections.Generic.IEnumerable`1<System.Tuple`2<System.Int32,System.Int32>> GetFilterAsTuple(System.Guid sourceGuid)
    // Offset: 0xD3FCEC
    ::System::Collections::Generic::IEnumerable_1<::System::Tuple_2<int, int>*>* GetFilterAsTuple(::System::Guid sourceGuid);
    // public System.Void Dispose()
    // Offset: 0xD3ED50
    void Dispose();
    // static private System.Void EnsureActivityCleanupDelegate(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0xD3EDFC
    static void EnsureActivityCleanupDelegate(::System::Diagnostics::Tracing::ActivityFilter* filterList);
    // static private System.Action`1<System.Guid> GetActivityDyingDelegate(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0xD3FF34
    static ::System::Action_1<::System::Guid>* GetActivityDyingDelegate(::System::Diagnostics::Tracing::ActivityFilter* filterList);
    // static private System.Boolean EnableFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.Int32 eventId, System.Int32 samplingFreq)
    // Offset: 0xD3F318
    static bool EnableFilter(ByRef<::System::Diagnostics::Tracing::ActivityFilter*> filterList, ::System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, int eventId, int samplingFreq);
    // static private System.Void TrimActiveActivityStore(System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> activities)
    // Offset: 0xD3FA1C
    static void TrimActiveActivityStore(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>* activities);
    // static private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> GetActiveActivities(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0xD3F8B0
    static ::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>* GetActiveActivities(::System::Diagnostics::Tracing::ActivityFilter* filterList);
  }; // System.Diagnostics.Tracing.ActivityFilter
  #pragma pack(pop)
  static check_size<sizeof(ActivityFilter), 72 + sizeof(::System::Action_1<::System::Guid>*)> __System_Diagnostics_Tracing_ActivityFilterSizeCheck;
  static_assert(sizeof(ActivityFilter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::DisableFilter
// Il2CppName: DisableFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Diagnostics::Tracing::ActivityFilter*>, ::System::Diagnostics::Tracing::EventSource*)>(&System::Diagnostics::Tracing::ActivityFilter::DisableFilter)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "DisableFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList, source});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::UpdateFilter
// Il2CppName: UpdateFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Diagnostics::Tracing::ActivityFilter*>, ::System::Diagnostics::Tracing::EventSource*, int, ::StringW)>(&System::Diagnostics::Tracing::ActivityFilter::UpdateFilter)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    static auto* perEventSourceSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startEvents = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "UpdateFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList, source, perEventSourceSessionId, startEvents});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::PassesActivityFilter
// Il2CppName: PassesActivityFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Diagnostics::Tracing::ActivityFilter*, ::System::Guid*, bool, ::System::Diagnostics::Tracing::EventSource*, int)>(&System::Diagnostics::Tracing::ActivityFilter::PassesActivityFilter)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* triggeringEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "PassesActivityFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList, childActivityID, triggeringEvent, source, eventId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::FlowActivityIfNeeded
// Il2CppName: FlowActivityIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::Tracing::ActivityFilter*, ::System::Guid*, ::System::Guid*)>(&System::Diagnostics::Tracing::ActivityFilter::FlowActivityIfNeeded)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    static auto* currentActivityId = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "FlowActivityIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList, currentActivityId, childActivityID});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::UpdateKwdTriggers
// Il2CppName: UpdateKwdTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::Tracing::ActivityFilter*, ::System::Guid, ::System::Diagnostics::Tracing::EventSource*, ::System::Diagnostics::Tracing::EventKeywords)>(&System::Diagnostics::Tracing::ActivityFilter::UpdateKwdTriggers)> {
  static const MethodInfo* get() {
    static auto* activityFilter = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    static auto* sourceGuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    static auto* sessKeywords = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "UpdateKwdTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activityFilter, sourceGuid, source, sessKeywords});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::GetFilterAsTuple
// Il2CppName: GetFilterAsTuple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Tuple_2<int, int>*>* (System::Diagnostics::Tracing::ActivityFilter::*)(::System::Guid)>(&System::Diagnostics::Tracing::ActivityFilter::GetFilterAsTuple)> {
  static const MethodInfo* get() {
    static auto* sourceGuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "GetFilterAsTuple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceGuid});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::ActivityFilter::*)()>(&System::Diagnostics::Tracing::ActivityFilter::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::EnsureActivityCleanupDelegate
// Il2CppName: EnsureActivityCleanupDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::Tracing::ActivityFilter*)>(&System::Diagnostics::Tracing::ActivityFilter::EnsureActivityCleanupDelegate)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "EnsureActivityCleanupDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::GetActivityDyingDelegate
// Il2CppName: GetActivityDyingDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::System::Guid>* (*)(::System::Diagnostics::Tracing::ActivityFilter*)>(&System::Diagnostics::Tracing::ActivityFilter::GetActivityDyingDelegate)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "GetActivityDyingDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::EnableFilter
// Il2CppName: EnableFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::System::Diagnostics::Tracing::ActivityFilter*>, ::System::Diagnostics::Tracing::EventSource*, int, int, int)>(&System::Diagnostics::Tracing::ActivityFilter::EnableFilter)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventSource")->byval_arg;
    static auto* perEventSourceSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* samplingFreq = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "EnableFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList, source, perEventSourceSessionId, eventId, samplingFreq});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::TrimActiveActivityStore
// Il2CppName: TrimActiveActivityStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>*)>(&System::Diagnostics::Tracing::ActivityFilter::TrimActiveActivityStore)> {
  static const MethodInfo* get() {
    static auto* activities = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Concurrent", "ConcurrentDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "TrimActiveActivityStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activities});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::ActivityFilter::GetActiveActivities
// Il2CppName: GetActiveActivities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Concurrent::ConcurrentDictionary_2<::System::Guid, int>* (*)(::System::Diagnostics::Tracing::ActivityFilter*)>(&System::Diagnostics::Tracing::ActivityFilter::GetActiveActivities)> {
  static const MethodInfo* get() {
    static auto* filterList = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ActivityFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::ActivityFilter*), "GetActiveActivities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filterList});
  }
};
