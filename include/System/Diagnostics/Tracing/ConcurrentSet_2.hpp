// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ConcurrentSetItem`2<KeyType, ItemType>
  template<typename KeyType, typename ItemType>
  class ConcurrentSetItem_2;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ConcurrentSet`2<KeyType, ItemType>
  template<typename KeyType, typename ItemType>
  struct ConcurrentSet_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Diagnostics::Tracing::ConcurrentSet_2, "System.Diagnostics.Tracing", "ConcurrentSet`2");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.ConcurrentSet`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename KeyType, typename ItemType>
  struct ConcurrentSet_2/*, public ::System::ValueType*/ {
    public:
    public:
    // private ItemType[] items
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<ItemType> items;
    // Field size check
    static_assert(sizeof(::ArrayW<ItemType>) == 0x8);
    public:
    // Creating value type constructor for type: ConcurrentSet_2
    constexpr ConcurrentSet_2(::ArrayW<ItemType> items_ = ::ArrayW<ItemType>(static_cast<void*>(nullptr))) noexcept : items{items_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<ItemType>
    constexpr operator ::ArrayW<ItemType>() const noexcept {
      return items;
    }
    // Autogenerated instance field getter
    // Get instance field: private ItemType[] items
    [[deprecated("Use field access instead!")]] ::ArrayW<ItemType>& dyn_items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::ConcurrentSet_2::dyn_items");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "items"))->offset;
      return *reinterpret_cast<::ArrayW<ItemType>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public ItemType TryGet(KeyType key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ItemType TryGet(KeyType key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::ConcurrentSet_2::TryGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<ItemType, false>(this, ___internal__method, key);
    }
    // public ItemType GetOrAdd(ItemType newItem)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ItemType GetOrAdd(ItemType newItem) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::ConcurrentSet_2::GetOrAdd");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetOrAdd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newItem)})));
      return ::il2cpp_utils::RunMethodRethrow<ItemType, false>(this, ___internal__method, newItem);
    }
  }; // System.Diagnostics.Tracing.ConcurrentSet`2
  // Could not write size check! Type: System.Diagnostics.Tracing.ConcurrentSet`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
