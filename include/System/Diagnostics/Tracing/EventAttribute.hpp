// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.EventTask
#include "System/Diagnostics/Tracing/EventTask.hpp"
// Including type: System.Diagnostics.Tracing.EventTags
#include "System/Diagnostics/Tracing/EventTags.hpp"
// Including type: System.Diagnostics.Tracing.EventActivityOptions
#include "System/Diagnostics/Tracing/EventActivityOptions.hpp"
// Including type: System.Diagnostics.Tracing.EventOpcode
#include "System/Diagnostics/Tracing/EventOpcode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventAttribute
  class EventAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventAttribute*, "System.Diagnostics.Tracing", "EventAttribute");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x3D
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8F6EA8
  class EventAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Int32 <EventId>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int EventId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Diagnostics.Tracing.EventLevel <Level>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::System::Diagnostics::Tracing::EventLevel Level;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventLevel) == 0x4);
    // private System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Diagnostics::Tracing::EventKeywords Keywords;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // private System.Diagnostics.Tracing.EventTask <Task>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::System::Diagnostics::Tracing::EventTask Task;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventTask) == 0x4);
    // private System.Byte <Version>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    uint8_t Version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Version and: Message
    char __padding4[0x3] = {};
    // private System.String <Message>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Diagnostics.Tracing.EventTags <Tags>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::System::Diagnostics::Tracing::EventTags Tags;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventTags) == 0x4);
    // private System.Diagnostics.Tracing.EventActivityOptions <ActivityOptions>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    ::System::Diagnostics::Tracing::EventActivityOptions ActivityOptions;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventActivityOptions) == 0x4);
    // private System.Diagnostics.Tracing.EventOpcode m_opcode
    // Size: 0x4
    // Offset: 0x38
    ::System::Diagnostics::Tracing::EventOpcode m_opcode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventOpcode) == 0x4);
    // private System.Boolean m_opcodeSet
    // Size: 0x1
    // Offset: 0x3C
    bool m_opcodeSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Int32 <EventId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$EventId$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventLevel <Level>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventLevel& dyn_$Level$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventKeywords& dyn_$Keywords$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventTask <Task>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventTask& dyn_$Task$k__BackingField();
    // Get instance field reference: private System.Byte <Version>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$Version$k__BackingField();
    // Get instance field reference: private System.String <Message>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Message$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventTags <Tags>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventTags& dyn_$Tags$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventActivityOptions <ActivityOptions>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventActivityOptions& dyn_$ActivityOptions$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventOpcode m_opcode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventOpcode& dyn_m_opcode();
    // Get instance field reference: private System.Boolean m_opcodeSet
    [[deprecated("Use field access instead!")]] bool& dyn_m_opcodeSet();
    // public System.Int32 get_EventId()
    // Offset: 0xD43450
    int get_EventId();
    // private System.Void set_EventId(System.Int32 value)
    // Offset: 0xD43458
    void set_EventId(int value);
    // public System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0xD43460
    ::System::Diagnostics::Tracing::EventLevel get_Level();
    // public System.Void set_Level(System.Diagnostics.Tracing.EventLevel value)
    // Offset: 0xD43468
    void set_Level(::System::Diagnostics::Tracing::EventLevel value);
    // public System.Diagnostics.Tracing.EventKeywords get_Keywords()
    // Offset: 0xD43470
    ::System::Diagnostics::Tracing::EventKeywords get_Keywords();
    // public System.Void set_Keywords(System.Diagnostics.Tracing.EventKeywords value)
    // Offset: 0xD43478
    void set_Keywords(::System::Diagnostics::Tracing::EventKeywords value);
    // public System.Diagnostics.Tracing.EventOpcode get_Opcode()
    // Offset: 0xD43480
    ::System::Diagnostics::Tracing::EventOpcode get_Opcode();
    // public System.Void set_Opcode(System.Diagnostics.Tracing.EventOpcode value)
    // Offset: 0xD43488
    void set_Opcode(::System::Diagnostics::Tracing::EventOpcode value);
    // System.Boolean get_IsOpcodeSet()
    // Offset: 0xD43498
    bool get_IsOpcodeSet();
    // public System.Diagnostics.Tracing.EventTask get_Task()
    // Offset: 0xD434A0
    ::System::Diagnostics::Tracing::EventTask get_Task();
    // public System.Void set_Task(System.Diagnostics.Tracing.EventTask value)
    // Offset: 0xD434A8
    void set_Task(::System::Diagnostics::Tracing::EventTask value);
    // public System.Byte get_Version()
    // Offset: 0xD434B0
    uint8_t get_Version();
    // public System.String get_Message()
    // Offset: 0xD434B8
    ::StringW get_Message();
    // public System.Void set_Message(System.String value)
    // Offset: 0xD434C0
    void set_Message(::StringW value);
    // public System.Diagnostics.Tracing.EventTags get_Tags()
    // Offset: 0xD434C8
    ::System::Diagnostics::Tracing::EventTags get_Tags();
    // public System.Diagnostics.Tracing.EventActivityOptions get_ActivityOptions()
    // Offset: 0xD434D0
    ::System::Diagnostics::Tracing::EventActivityOptions get_ActivityOptions();
    // public System.Void set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions value)
    // Offset: 0xD434D8
    void set_ActivityOptions(::System::Diagnostics::Tracing::EventActivityOptions value);
    // public System.Void .ctor(System.Int32 eventId)
    // Offset: 0xD4341C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventAttribute* New_ctor(int eventId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventAttribute*, creationType>(eventId)));
    }
  }; // System.Diagnostics.Tracing.EventAttribute
  #pragma pack(pop)
  static check_size<sizeof(EventAttribute), 60 + sizeof(bool)> __System_Diagnostics_Tracing_EventAttributeSizeCheck;
  static_assert(sizeof(EventAttribute) == 0x3D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_EventId
// Il2CppName: get_EventId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_EventId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_EventId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_EventId
// Il2CppName: set_EventId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(int)>(&System::Diagnostics::Tracing::EventAttribute::set_EventId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_EventId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Level
// Il2CppName: get_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventLevel (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Level)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_Level
// Il2CppName: set_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::System::Diagnostics::Tracing::EventLevel)>(&System::Diagnostics::Tracing::EventAttribute::set_Level)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Keywords
// Il2CppName: get_Keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventKeywords (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Keywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_Keywords
// Il2CppName: set_Keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::System::Diagnostics::Tracing::EventKeywords)>(&System::Diagnostics::Tracing::EventAttribute::set_Keywords)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventKeywords")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_Keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Opcode
// Il2CppName: get_Opcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventOpcode (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Opcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Opcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_Opcode
// Il2CppName: set_Opcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::System::Diagnostics::Tracing::EventOpcode)>(&System::Diagnostics::Tracing::EventAttribute::set_Opcode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventOpcode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_Opcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_IsOpcodeSet
// Il2CppName: get_IsOpcodeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_IsOpcodeSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_IsOpcodeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Task
// Il2CppName: get_Task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventTask (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Task)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_Task
// Il2CppName: set_Task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::System::Diagnostics::Tracing::EventTask)>(&System::Diagnostics::Tracing::EventAttribute::set_Task)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventTask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_Task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::StringW)>(&System::Diagnostics::Tracing::EventAttribute::set_Message)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_Tags
// Il2CppName: get_Tags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventTags (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_Tags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_Tags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::get_ActivityOptions
// Il2CppName: get_ActivityOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventActivityOptions (System::Diagnostics::Tracing::EventAttribute::*)()>(&System::Diagnostics::Tracing::EventAttribute::get_ActivityOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "get_ActivityOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::set_ActivityOptions
// Il2CppName: set_ActivityOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventAttribute::*)(::System::Diagnostics::Tracing::EventActivityOptions)>(&System::Diagnostics::Tracing::EventAttribute::set_ActivityOptions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventActivityOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventAttribute*), "set_ActivityOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
