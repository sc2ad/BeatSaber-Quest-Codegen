// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventOpcode
#include "System/Diagnostics/Tracing/EventOpcode.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.EventTags
#include "System/Diagnostics/Tracing/EventTags.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventDataAttribute
  class EventDataAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventDataAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventDataAttribute*, "System.Diagnostics.Tracing", "EventDataAttribute");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventDataAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8F6D50
  class EventDataAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Diagnostics.Tracing.EventLevel level
    // Size: 0x4
    // Offset: 0x10
    ::System::Diagnostics::Tracing::EventLevel level;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventLevel) == 0x4);
    // private System.Diagnostics.Tracing.EventOpcode opcode
    // Size: 0x4
    // Offset: 0x14
    ::System::Diagnostics::Tracing::EventOpcode opcode;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventOpcode) == 0x4);
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Diagnostics::Tracing::EventKeywords Keywords;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // private System.Diagnostics.Tracing.EventTags <Tags>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::System::Diagnostics::Tracing::EventTags Tags;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventTags) == 0x4);
    public:
    // Get instance field reference: private System.Diagnostics.Tracing.EventLevel level
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventLevel& dyn_level();
    // Get instance field reference: private System.Diagnostics.Tracing.EventOpcode opcode
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventOpcode& dyn_opcode();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventKeywords& dyn_$Keywords$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Tracing.EventTags <Tags>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventTags& dyn_$Tags$k__BackingField();
    // public System.String get_Name()
    // Offset: 0xD435D0
    ::StringW get_Name();
    // System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0xD435D8
    ::System::Diagnostics::Tracing::EventLevel get_Level();
    // System.Diagnostics.Tracing.EventOpcode get_Opcode()
    // Offset: 0xD435E0
    ::System::Diagnostics::Tracing::EventOpcode get_Opcode();
    // System.Diagnostics.Tracing.EventKeywords get_Keywords()
    // Offset: 0xD435E8
    ::System::Diagnostics::Tracing::EventKeywords get_Keywords();
    // System.Diagnostics.Tracing.EventTags get_Tags()
    // Offset: 0xD435F0
    ::System::Diagnostics::Tracing::EventTags get_Tags();
  }; // System.Diagnostics.Tracing.EventDataAttribute
  #pragma pack(pop)
  static check_size<sizeof(EventDataAttribute), 40 + sizeof(::System::Diagnostics::Tracing::EventTags)> __System_Diagnostics_Tracing_EventDataAttributeSizeCheck;
  static_assert(sizeof(EventDataAttribute) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDataAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Diagnostics::Tracing::EventDataAttribute::*)()>(&System::Diagnostics::Tracing::EventDataAttribute::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDataAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDataAttribute::get_Level
// Il2CppName: get_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventLevel (System::Diagnostics::Tracing::EventDataAttribute::*)()>(&System::Diagnostics::Tracing::EventDataAttribute::get_Level)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDataAttribute*), "get_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDataAttribute::get_Opcode
// Il2CppName: get_Opcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventOpcode (System::Diagnostics::Tracing::EventDataAttribute::*)()>(&System::Diagnostics::Tracing::EventDataAttribute::get_Opcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDataAttribute*), "get_Opcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDataAttribute::get_Keywords
// Il2CppName: get_Keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventKeywords (System::Diagnostics::Tracing::EventDataAttribute::*)()>(&System::Diagnostics::Tracing::EventDataAttribute::get_Keywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDataAttribute*), "get_Keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDataAttribute::get_Tags
// Il2CppName: get_Tags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventTags (System::Diagnostics::Tracing::EventDataAttribute::*)()>(&System::Diagnostics::Tracing::EventDataAttribute::get_Tags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDataAttribute*), "get_Tags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
