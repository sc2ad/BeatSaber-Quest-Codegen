// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Skipping declaration: ICollection`1 because it is already included!
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventPayload
  class EventPayload;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventPayload);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventPayload*, "System.Diagnostics.Tracing", "EventPayload");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventPayload
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 8F6DBC
  class EventPayload : public ::Il2CppObject/*, public ::System::Collections::Generic::IDictionary_2<::StringW, ::Il2CppObject*>*/ {
    public:
    // Nested type: ::System::Diagnostics::Tracing::EventPayload::$GetEnumerator$d__17
    class $GetEnumerator$d__17;
    public:
    // private System.Collections.Generic.List`1<System.String> m_names
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* m_names;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Object> m_values
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Il2CppObject*>* m_values;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IDictionary_2<::StringW, ::Il2CppObject*>
    operator ::System::Collections::Generic::IDictionary_2<::StringW, ::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> m_names
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_m_names();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Object> m_values
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_m_values();
    // public System.Collections.Generic.ICollection`1<System.String> get_Keys()
    // Offset: 0xD445BC
    ::System::Collections::Generic::ICollection_1<::StringW>* get_Keys();
    // public System.Collections.Generic.ICollection`1<System.Object> get_Values()
    // Offset: 0xD445C4
    ::System::Collections::Generic::ICollection_1<::Il2CppObject*>* get_Values();
    // public System.Object get_Item(System.String key)
    // Offset: 0xD445CC
    ::Il2CppObject* get_Item(::StringW key);
    // public System.Void set_Item(System.String key, System.Object value)
    // Offset: 0xD44784
    void set_Item(::StringW key, ::Il2CppObject* value);
    // public System.Int32 get_Count()
    // Offset: 0xD44AA4
    int get_Count();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0xD44AF4
    bool get_IsReadOnly();
    // System.Void .ctor(System.Collections.Generic.List`1<System.String> payloadNames, System.Collections.Generic.List`1<System.Object> payloadValues)
    // Offset: 0xD44584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventPayload* New_ctor(::System::Collections::Generic::List_1<::StringW>* payloadNames, ::System::Collections::Generic::List_1<::Il2CppObject*>* payloadValues) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventPayload::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventPayload*, creationType>(payloadNames, payloadValues)));
    }
    // public System.Void Add(System.String key, System.Object value)
    // Offset: 0xD447E4
    void Add(::StringW key, ::Il2CppObject* value);
    // public System.Void Add(System.Collections.Generic.KeyValuePair`2<System.String,System.Object> payloadEntry)
    // Offset: 0xD44844
    void Add(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*> payloadEntry);
    // public System.Void Clear()
    // Offset: 0xD448A4
    void Clear();
    // public System.Boolean Contains(System.Collections.Generic.KeyValuePair`2<System.String,System.Object> entry)
    // Offset: 0xD44904
    bool Contains(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*> entry);
    // public System.Boolean ContainsKey(System.String key)
    // Offset: 0xD44958
    bool ContainsKey(::StringW key);
    // public System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,System.Object>> GetEnumerator()
    // Offset: 0xD44AFC
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xD44B98
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void CopyTo(System.Collections.Generic.KeyValuePair`2<System.String,System.Object>[] payloadEntries, System.Int32 count)
    // Offset: 0xD44C3C
    void CopyTo(::ArrayW<::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>> payloadEntries, int count);
    // public System.Boolean Remove(System.String key)
    // Offset: 0xD44C9C
    bool Remove(::StringW key);
    // public System.Boolean Remove(System.Collections.Generic.KeyValuePair`2<System.String,System.Object> entry)
    // Offset: 0xD44CFC
    bool Remove(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*> entry);
    // public System.Boolean TryGetValue(System.String key, out System.Object value)
    // Offset: 0xD44D5C
    bool TryGetValue(::StringW key, ByRef<::Il2CppObject*> value);
  }; // System.Diagnostics.Tracing.EventPayload
  #pragma pack(pop)
  static check_size<sizeof(EventPayload), 24 + sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*)> __System_Diagnostics_Tracing_EventPayloadSizeCheck;
  static_assert(sizeof(EventPayload) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::get_Keys
// Il2CppName: get_Keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::ICollection_1<::StringW>* (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::get_Keys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "get_Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::get_Values
// Il2CppName: get_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::ICollection_1<::Il2CppObject*>* (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::get_Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "get_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Diagnostics::Tracing::EventPayload::*)(::StringW)>(&System::Diagnostics::Tracing::EventPayload::get_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventPayload::*)(::StringW, ::Il2CppObject*)>(&System::Diagnostics::Tracing::EventPayload::set_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventPayload::*)(::StringW, ::Il2CppObject*)>(&System::Diagnostics::Tracing::EventPayload::Add)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventPayload::*)(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventPayload::Add)> {
  static const MethodInfo* get() {
    static auto* payloadEntry = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "KeyValuePair`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{payloadEntry});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventPayload::Contains)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "KeyValuePair`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::ContainsKey
// Il2CppName: ContainsKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)(::StringW)>(&System::Diagnostics::Tracing::EventPayload::ContainsKey)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "ContainsKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>>* (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Diagnostics::Tracing::EventPayload::*)()>(&System::Diagnostics::Tracing::EventPayload::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventPayload::*)(::ArrayW<::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>>, int)>(&System::Diagnostics::Tracing::EventPayload::CopyTo)> {
  static const MethodInfo* get() {
    static auto* payloadEntries = &il2cpp_functions::array_class_get(::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "KeyValuePair`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")}), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{payloadEntries, count});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)(::StringW)>(&System::Diagnostics::Tracing::EventPayload::Remove)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)(::System::Collections::Generic::KeyValuePair_2<::StringW, ::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventPayload::Remove)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "KeyValuePair`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventPayload::TryGetValue
// Il2CppName: TryGetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventPayload::*)(::StringW, ByRef<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventPayload::TryGetValue)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventPayload*), "TryGetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
