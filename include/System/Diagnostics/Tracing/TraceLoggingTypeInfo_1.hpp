// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.TraceLoggingTypeInfo
#include "System/Diagnostics/Tracing/TraceLoggingTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: TraceLoggingDataCollector
  class TraceLoggingDataCollector;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: TraceLoggingTypeInfo`1<DataType>
  template<typename DataType>
  class TraceLoggingTypeInfo_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1, "System.Diagnostics.Tracing", "TraceLoggingTypeInfo`1");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Diagnostics.Tracing.TraceLoggingTypeInfo`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename DataType>
  class TraceLoggingTypeInfo_1 : public ::System::Diagnostics::Tracing::TraceLoggingTypeInfo {
    public:
    // Autogenerated static field getter
    // Get static field: static private System.Diagnostics.Tracing.TraceLoggingTypeInfo`1<DataType> instance
    static ::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>* _get_instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::_get_instance");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TraceLoggingTypeInfo_1<DataType>*>::get(), "instance"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Diagnostics.Tracing.TraceLoggingTypeInfo`1<DataType> instance
    static void _set_instance(::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::_set_instance");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TraceLoggingTypeInfo_1<DataType>*>::get(), "instance", value));
    }
    // static public System.Diagnostics.Tracing.TraceLoggingTypeInfo`1<DataType> get_Instance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>* get_Instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::get_Instance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TraceLoggingTypeInfo_1<DataType>*>::get(), "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // protected System.Void .ctor(System.String name, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventOpcode opcode, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventTags tags)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceLoggingTypeInfo_1<DataType>* New_ctor(::StringW name, ::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventOpcode opcode, ::System::Diagnostics::Tracing::EventKeywords keywords, ::System::Diagnostics::Tracing::EventTags tags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceLoggingTypeInfo_1<DataType>*, creationType>(name, level, opcode, keywords, tags)));
    }
    // public System.Void WriteData(System.Diagnostics.Tracing.TraceLoggingDataCollector collector, ref DataType value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void WriteData(::System::Diagnostics::Tracing::TraceLoggingDataCollector* collector, ByRef<DataType> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::WriteData");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collector, byref(value));
    }
    // static System.Diagnostics.Tracing.TraceLoggingTypeInfo`1<DataType> GetInstance(System.Collections.Generic.List`1<System.Type> recursionCheck)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>* GetInstance(::System::Collections::Generic::List_1<::System::Type*>* recursionCheck) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::GetInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TraceLoggingTypeInfo_1<DataType>*>::get(), "GetInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recursionCheck)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, recursionCheck);
    }
    // static private System.Diagnostics.Tracing.TraceLoggingTypeInfo`1<DataType> InitInstance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>* InitInstance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::InitInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TraceLoggingTypeInfo_1<DataType>*>::get(), "InitInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1<DataType>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceLoggingTypeInfo_1<DataType>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceLoggingTypeInfo_1<DataType>*, creationType>()));
    }
    // public override System.Void WriteObjectData(System.Diagnostics.Tracing.TraceLoggingDataCollector collector, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Diagnostics.Tracing.TraceLoggingTypeInfo
    // Base method: System.Void TraceLoggingTypeInfo::WriteObjectData(System.Diagnostics.Tracing.TraceLoggingDataCollector collector, System.Object value)
    void WriteObjectData(::System::Diagnostics::Tracing::TraceLoggingDataCollector* collector, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::TraceLoggingTypeInfo_1::WriteObjectData");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Diagnostics::Tracing::TraceLoggingTypeInfo*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, collector, value);
    }
  }; // System.Diagnostics.Tracing.TraceLoggingTypeInfo`1
  // Could not write size check! Type: System.Diagnostics.Tracing.TraceLoggingTypeInfo`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
