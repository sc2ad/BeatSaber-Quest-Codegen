// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventSource
#include "System/Diagnostics/Tracing/EventSource.hpp"
// Including type: System.Diagnostics.Tracing.EventProvider
#include "System/Diagnostics/Tracing/EventProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ControllerCommand
  struct ControllerCommand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventSource::OverideEventProvider);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventSource::OverideEventProvider*, "System.Diagnostics.Tracing", "EventSource/OverideEventProvider");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.OverideEventProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class EventSource::OverideEventProvider : public ::System::Diagnostics::Tracing::EventProvider {
    public:
    // Writing base type padding for base size: 0x5D to desired offset: 0x60
    char ___base_padding[0x3] = {};
    public:
    // private System.Diagnostics.Tracing.EventSource m_eventSource
    // Size: 0x8
    // Offset: 0x60
    ::System::Diagnostics::Tracing::EventSource* m_eventSource;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventSource*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Diagnostics::Tracing::EventSource*
    constexpr operator ::System::Diagnostics::Tracing::EventSource*() const noexcept {
      return m_eventSource;
    }
    // Get instance field reference: private System.Diagnostics.Tracing.EventSource m_eventSource
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventSource*& dyn_m_eventSource();
    // public System.Void .ctor(System.Diagnostics.Tracing.EventSource eventSource)
    // Offset: 0xDDC224
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource::OverideEventProvider* New_ctor(::System::Diagnostics::Tracing::EventSource* eventSource) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventSource::OverideEventProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource::OverideEventProvider*, creationType>(eventSource)));
    }
    // protected override System.Void OnControllerCommand(System.Diagnostics.Tracing.ControllerCommand command, System.Collections.Generic.IDictionary`2<System.String,System.String> arguments, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId)
    // Offset: 0xDDC2A0
    // Implemented from: System.Diagnostics.Tracing.EventProvider
    // Base method: System.Void EventProvider::OnControllerCommand(System.Diagnostics.Tracing.ControllerCommand command, System.Collections.Generic.IDictionary`2<System.String,System.String> arguments, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId)
    void OnControllerCommand(::System::Diagnostics::Tracing::ControllerCommand command, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* arguments, int perEventSourceSessionId, int etwSessionId);
  }; // System.Diagnostics.Tracing.EventSource/System.Diagnostics.Tracing.OverideEventProvider
  #pragma pack(pop)
  static check_size<sizeof(EventSource::OverideEventProvider), 96 + sizeof(::System::Diagnostics::Tracing::EventSource*)> __System_Diagnostics_Tracing_EventSource_OverideEventProviderSizeCheck;
  static_assert(sizeof(EventSource::OverideEventProvider) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::OverideEventProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventSource::OverideEventProvider::OnControllerCommand
// Il2CppName: OnControllerCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventSource::OverideEventProvider::*)(::System::Diagnostics::Tracing::ControllerCommand, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*, int, int)>(&System::Diagnostics::Tracing::EventSource::OverideEventProvider::OnControllerCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ControllerCommand")->byval_arg;
    static auto* arguments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* perEventSourceSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventSource::OverideEventProvider*), "OnControllerCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, arguments, perEventSourceSessionId, etwSessionId});
  }
};
