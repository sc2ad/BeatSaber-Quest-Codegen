// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.Diagnostics.Tracing.EventCommand
#include "System/Diagnostics/Tracing/EventCommand.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventSource
  class EventSource;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: EventListener
  class EventListener;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventCommandEventArgs
  class EventCommandEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventCommandEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventCommandEventArgs*, "System.Diagnostics.Tracing", "EventCommandEventArgs");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventCommandEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class EventCommandEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Diagnostics.Tracing.EventCommand <Command>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::System::Diagnostics::Tracing::EventCommand Command;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventCommand) == 0x4);
    // Padding between fields: Command and: Arguments
    char __padding0[0x4] = {};
    // private System.Collections.Generic.IDictionary`2<System.String,System.String> <Arguments>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* Arguments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*) == 0x8);
    // System.Diagnostics.Tracing.EventSource eventSource
    // Size: 0x8
    // Offset: 0x20
    ::System::Diagnostics::Tracing::EventSource* eventSource;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventSource*) == 0x8);
    // System.Diagnostics.Tracing.EventDispatcher dispatcher
    // Size: 0x8
    // Offset: 0x28
    ::System::Diagnostics::Tracing::EventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventDispatcher*) == 0x8);
    // System.Diagnostics.Tracing.EventListener listener
    // Size: 0x8
    // Offset: 0x30
    ::System::Diagnostics::Tracing::EventListener* listener;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventListener*) == 0x8);
    // System.Int32 perEventSourceSessionId
    // Size: 0x4
    // Offset: 0x38
    int perEventSourceSessionId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 etwSessionId
    // Size: 0x4
    // Offset: 0x3C
    int etwSessionId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean enable
    // Size: 0x1
    // Offset: 0x40
    bool enable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enable and: level
    char __padding7[0x3] = {};
    // System.Diagnostics.Tracing.EventLevel level
    // Size: 0x4
    // Offset: 0x44
    ::System::Diagnostics::Tracing::EventLevel level;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventLevel) == 0x4);
    // System.Diagnostics.Tracing.EventKeywords matchAnyKeyword
    // Size: 0x8
    // Offset: 0x48
    ::System::Diagnostics::Tracing::EventKeywords matchAnyKeyword;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // System.Diagnostics.Tracing.EventCommandEventArgs nextCommand
    // Size: 0x8
    // Offset: 0x50
    ::System::Diagnostics::Tracing::EventCommandEventArgs* nextCommand;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventCommandEventArgs*) == 0x8);
    public:
    // Get instance field reference: private System.Diagnostics.Tracing.EventCommand <Command>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventCommand& dyn_$Command$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.IDictionary`2<System.String,System.String> <Arguments>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*& dyn_$Arguments$k__BackingField();
    // Get instance field reference: System.Diagnostics.Tracing.EventSource eventSource
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventSource*& dyn_eventSource();
    // Get instance field reference: System.Diagnostics.Tracing.EventDispatcher dispatcher
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventDispatcher*& dyn_dispatcher();
    // Get instance field reference: System.Diagnostics.Tracing.EventListener listener
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventListener*& dyn_listener();
    // Get instance field reference: System.Int32 perEventSourceSessionId
    [[deprecated("Use field access instead!")]] int& dyn_perEventSourceSessionId();
    // Get instance field reference: System.Int32 etwSessionId
    [[deprecated("Use field access instead!")]] int& dyn_etwSessionId();
    // Get instance field reference: System.Boolean enable
    [[deprecated("Use field access instead!")]] bool& dyn_enable();
    // Get instance field reference: System.Diagnostics.Tracing.EventLevel level
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventLevel& dyn_level();
    // Get instance field reference: System.Diagnostics.Tracing.EventKeywords matchAnyKeyword
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventKeywords& dyn_matchAnyKeyword();
    // Get instance field reference: System.Diagnostics.Tracing.EventCommandEventArgs nextCommand
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventCommandEventArgs*& dyn_nextCommand();
    // public System.Diagnostics.Tracing.EventCommand get_Command()
    // Offset: 0xD434E0
    ::System::Diagnostics::Tracing::EventCommand get_Command();
    // System.Void set_Command(System.Diagnostics.Tracing.EventCommand value)
    // Offset: 0xD434E8
    void set_Command(::System::Diagnostics::Tracing::EventCommand value);
    // public System.Collections.Generic.IDictionary`2<System.String,System.String> get_Arguments()
    // Offset: 0xD434F0
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* get_Arguments();
    // System.Void set_Arguments(System.Collections.Generic.IDictionary`2<System.String,System.String> value)
    // Offset: 0xD434F8
    void set_Arguments(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* value);
    // System.Void .ctor(System.Diagnostics.Tracing.EventCommand command, System.Collections.Generic.IDictionary`2<System.String,System.String> arguments, System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventListener listener, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId, System.Boolean enable, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword)
    // Offset: 0xD43500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventCommandEventArgs* New_ctor(::System::Diagnostics::Tracing::EventCommand command, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* arguments, ::System::Diagnostics::Tracing::EventSource* eventSource, ::System::Diagnostics::Tracing::EventListener* listener, int perEventSourceSessionId, int etwSessionId, bool enable, ::System::Diagnostics::Tracing::EventLevel level, ::System::Diagnostics::Tracing::EventKeywords matchAnyKeyword) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventCommandEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventCommandEventArgs*, creationType>(command, arguments, eventSource, listener, perEventSourceSessionId, etwSessionId, enable, level, matchAnyKeyword)));
    }
  }; // System.Diagnostics.Tracing.EventCommandEventArgs
  #pragma pack(pop)
  static check_size<sizeof(EventCommandEventArgs), 80 + sizeof(::System::Diagnostics::Tracing::EventCommandEventArgs*)> __System_Diagnostics_Tracing_EventCommandEventArgsSizeCheck;
  static_assert(sizeof(EventCommandEventArgs) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventCommandEventArgs::get_Command
// Il2CppName: get_Command
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventCommand (System::Diagnostics::Tracing::EventCommandEventArgs::*)()>(&System::Diagnostics::Tracing::EventCommandEventArgs::get_Command)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventCommandEventArgs*), "get_Command", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventCommandEventArgs::set_Command
// Il2CppName: set_Command
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventCommandEventArgs::*)(::System::Diagnostics::Tracing::EventCommand)>(&System::Diagnostics::Tracing::EventCommandEventArgs::set_Command)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventCommandEventArgs*), "set_Command", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventCommandEventArgs::get_Arguments
// Il2CppName: get_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* (System::Diagnostics::Tracing::EventCommandEventArgs::*)()>(&System::Diagnostics::Tracing::EventCommandEventArgs::get_Arguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventCommandEventArgs*), "get_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventCommandEventArgs::set_Arguments
// Il2CppName: set_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventCommandEventArgs::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&System::Diagnostics::Tracing::EventCommandEventArgs::set_Arguments)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventCommandEventArgs*), "set_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventCommandEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
