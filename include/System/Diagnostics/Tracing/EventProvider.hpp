// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventDescriptor
#include "System/Diagnostics/Tracing/EventDescriptor.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw
#include "Microsoft/Win32/UnsafeNativeMethods_ManifestEtw.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventKeywords
  struct EventKeywords;
  // Forward declaring type: EventLevel
  struct EventLevel;
  // Forward declaring type: ControllerCommand
  struct ControllerCommand;
  // Skipping declaration: WriteEventErrorCode because it is already included!
  // Forward declaring type: EventData
  struct EventProvider_EventData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventProvider
  class EventProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EventProvider);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventProvider*, "System.Diagnostics.Tracing", "EventProvider");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x5D
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class EventProvider : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Diagnostics::Tracing::EventProvider::SessionInfo
    struct SessionInfo;
    // Nested type: ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode
    struct WriteEventErrorCode;
    // Nested type: ::System::Diagnostics::Tracing::EventProvider::MonoPInvokeCallbackAttribute
    class MonoPInvokeCallbackAttribute;
    // Nested type: ::System::Diagnostics::Tracing::EventProvider::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct SessionInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // System.Int32 sessionIdBit
      // Size: 0x4
      // Offset: 0x0
      int sessionIdBit;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 etwSessionId
      // Size: 0x4
      // Offset: 0x4
      int etwSessionId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SessionInfo
      constexpr SessionInfo(int sessionIdBit_ = {}, int etwSessionId_ = {}) noexcept : sessionIdBit{sessionIdBit_}, etwSessionId{etwSessionId_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.Int32 sessionIdBit
      [[deprecated("Use field access instead!")]] int& dyn_sessionIdBit();
      // Get instance field reference: System.Int32 etwSessionId
      [[deprecated("Use field access instead!")]] int& dyn_etwSessionId();
      // System.Void .ctor(System.Int32 sessionIdBit_, System.Int32 etwSessionId_)
      // Offset: 0xA3D2EC
      // ABORTED: conflicts with another method.  SessionInfo(int sessionIdBit_, int etwSessionId_);
    }; // System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo
    #pragma pack(pop)
    static check_size<sizeof(EventProvider::SessionInfo), 4 + sizeof(int)> __System_Diagnostics_Tracing_EventProvider_SessionInfoSizeCheck;
    static_assert(sizeof(EventProvider::SessionInfo) == 0x8);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode
    // [TokenAttribute] Offset: FFFFFFFF
    struct WriteEventErrorCode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WriteEventErrorCode
      constexpr WriteEventErrorCode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoError
      static constexpr const int NoError = 0;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoError
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NoError();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoError
      static void _set_NoError(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoFreeBuffers
      static constexpr const int NoFreeBuffers = 1;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoFreeBuffers
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NoFreeBuffers();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NoFreeBuffers
      static void _set_NoFreeBuffers(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode EventTooBig
      static constexpr const int EventTooBig = 2;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode EventTooBig
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_EventTooBig();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode EventTooBig
      static void _set_EventTooBig(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NullInput
      static constexpr const int NullInput = 3;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NullInput
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NullInput();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode NullInput
      static void _set_NullInput(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode TooManyArgs
      static constexpr const int TooManyArgs = 4;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode TooManyArgs
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_TooManyArgs();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode TooManyArgs
      static void _set_TooManyArgs(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode Other
      static constexpr const int Other = 5;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode Other
      static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_Other();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode Other
      static void _set_Other(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode
    #pragma pack(pop)
    static check_size<sizeof(EventProvider::WriteEventErrorCode), 0 + sizeof(int)> __System_Diagnostics_Tracing_EventProvider_WriteEventErrorCodeSizeCheck;
    static_assert(sizeof(EventProvider::WriteEventErrorCode) == 0x4);
    public:
    // private Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EtwEnableCallback m_etwCallback
    // Size: 0x8
    // Offset: 0x10
    ::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EtwEnableCallback* m_etwCallback;
    // Field size check
    static_assert(sizeof(::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EtwEnableCallback*) == 0x8);
    // private System.Runtime.InteropServices.GCHandle m_thisGCHandle
    // Size: 0x4
    // Offset: 0x18
    ::System::Runtime::InteropServices::GCHandle m_thisGCHandle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x4);
    // Padding between fields: m_thisGCHandle and: m_regHandle
    char __padding1[0x4] = {};
    // private System.Int64 m_regHandle
    // Size: 0x8
    // Offset: 0x20
    int64_t m_regHandle;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Byte m_level
    // Size: 0x1
    // Offset: 0x28
    uint8_t m_level;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_level and: m_anyKeywordMask
    char __padding3[0x7] = {};
    // private System.Int64 m_anyKeywordMask
    // Size: 0x8
    // Offset: 0x30
    int64_t m_anyKeywordMask;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_allKeywordMask
    // Size: 0x8
    // Offset: 0x38
    int64_t m_allKeywordMask;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo> m_liveSessions
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>* m_liveSessions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>*) == 0x8);
    // private System.Boolean m_enabled
    // Size: 0x1
    // Offset: 0x48
    bool m_enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_enabled and: m_providerId
    char __padding7[0x3] = {};
    // private System.Guid m_providerId
    // Size: 0x10
    // Offset: 0x4C
    ::System::Guid m_providerId;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // System.Boolean m_disposed
    // Size: 0x1
    // Offset: 0x5C
    bool m_disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Boolean m_setInformationMissing
    static bool _get_m_setInformationMissing();
    // Set static field: static private System.Boolean m_setInformationMissing
    static void _set_m_setInformationMissing(bool value);
    // Get static field: static private System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode s_returnCode
    static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_s_returnCode();
    // Set static field: static private System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode s_returnCode
    static void _set_s_returnCode(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
    // Get static field: static private System.Int32[] nibblebits
    static ::ArrayW<int> _get_nibblebits();
    // Set static field: static private System.Int32[] nibblebits
    static void _set_nibblebits(::ArrayW<int> value);
    // Get instance field reference: private Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EtwEnableCallback m_etwCallback
    [[deprecated("Use field access instead!")]] ::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EtwEnableCallback*& dyn_m_etwCallback();
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle m_thisGCHandle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn_m_thisGCHandle();
    // Get instance field reference: private System.Int64 m_regHandle
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_regHandle();
    // Get instance field reference: private System.Byte m_level
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_level();
    // Get instance field reference: private System.Int64 m_anyKeywordMask
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_anyKeywordMask();
    // Get instance field reference: private System.Int64 m_allKeywordMask
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_allKeywordMask();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo> m_liveSessions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>*& dyn_m_liveSessions();
    // Get instance field reference: private System.Boolean m_enabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_enabled();
    // Get instance field reference: private System.Guid m_providerId
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_m_providerId();
    // Get instance field reference: System.Boolean m_disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_disposed();
    // protected System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0xD46230
    ::System::Diagnostics::Tracing::EventLevel get_Level();
    // protected System.Diagnostics.Tracing.EventKeywords get_MatchAnyKeyword()
    // Offset: 0xD46238
    ::System::Diagnostics::Tracing::EventKeywords get_MatchAnyKeyword();
    // static private System.Void .cctor()
    // Offset: 0xD47E14
    static void _cctor();
    // System.Void Register(System.Guid providerGuid)
    // Offset: 0xD4527C
    void Register(::System::Guid providerGuid);
    // System.Int32 SetInformation(Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EVENT_INFO_CLASS eventInfoClass, System.Void* data, System.Int32 dataSize)
    // Offset: 0xD45444
    int SetInformation(::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_INFO_CLASS eventInfoClass, void* data, int dataSize);
    // public System.Void Dispose()
    // Offset: 0xD45588
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0xD45604
    void Dispose(bool disposing);
    // private System.Void Deregister()
    // Offset: 0xD45748
    void Deregister();
    // static private System.Void EtwEnableCallBack(in System.Guid sourceId, in System.Int32 controlCode, in System.Byte setLevel, in System.Int64 anyKeyword, in System.Int64 allKeyword, in Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EVENT_FILTER_DESCRIPTOR* filterData, in System.Void* callbackContext)
    // Offset: 0xD45194
    static void EtwEnableCallBack(ByRef<::System::Guid> sourceId, ByRef<int> controlCode, ByRef<uint8_t> setLevel, ByRef<int64_t> anyKeyword, ByRef<int64_t> allKeyword, ByRef<::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR*> filterData, ByRef<void*> callbackContext);
    // private System.Void EtwEnableCallBackImpl(in System.Int32 controlCode, in System.Byte setLevel, in System.Int64 anyKeyword, in System.Int64 allKeyword, in Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EVENT_FILTER_DESCRIPTOR* filterData)
    // Offset: 0xD4582C
    void EtwEnableCallBackImpl(ByRef<int> controlCode, ByRef<uint8_t> setLevel, ByRef<int64_t> anyKeyword, ByRef<int64_t> allKeyword, ByRef<::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR*> filterData);
    // protected System.Void OnControllerCommand(System.Diagnostics.Tracing.ControllerCommand command, System.Collections.Generic.IDictionary`2<System.String,System.String> arguments, System.Int32 sessionId, System.Int32 etwSessionId)
    // Offset: 0xD4622C
    void OnControllerCommand(::System::Diagnostics::Tracing::ControllerCommand command, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* arguments, int sessionId, int etwSessionId);
    // static private System.Int32 FindNull(System.Byte[] buffer, System.Int32 idx)
    // Offset: 0xD461D8
    static int FindNull(::ArrayW<uint8_t> buffer, int idx);
    // private System.Collections.Generic.List`1<System.Tuple`2<System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo,System.Boolean>> GetSessions()
    // Offset: 0xD45D2C
    ::System::Collections::Generic::List_1<::System::Tuple_2<::System::Diagnostics::Tracing::EventProvider::SessionInfo, bool>*>* GetSessions();
    // static private System.Void GetSessionInfoCallback(System.Int32 etwSessionId, System.Int64 matchAllKeywords, ref System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo> sessionList)
    // Offset: 0xD464B8
    static void GetSessionInfoCallback(int etwSessionId, int64_t matchAllKeywords, ByRef<::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>*> sessionList);
    // private System.Void GetSessionInfo(System.Action`2<System.Int32,System.Int64> action)
    // Offset: 0xD46248
    void GetSessionInfo(::System::Action_2<int, int64_t>* action);
    // static private System.Int32 IndexOfSessionInList(System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.SessionInfo> sessions, System.Int32 etwSessionId)
    // Offset: 0xD4641C
    static int IndexOfSessionInList(::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>* sessions, int etwSessionId);
    // private System.Boolean GetDataFromController(System.Int32 etwSessionId, Microsoft.Win32.UnsafeNativeMethods/Microsoft.Win32.ManifestEtw/Microsoft.Win32.EVENT_FILTER_DESCRIPTOR* filterData, out System.Diagnostics.Tracing.ControllerCommand command, out System.Byte[] data, out System.Int32 dataStart)
    // Offset: 0xD460D8
    bool GetDataFromController(int etwSessionId, ::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR* filterData, ByRef<::System::Diagnostics::Tracing::ControllerCommand> command, ByRef<::ArrayW<uint8_t>> data, ByRef<int> dataStart);
    // public System.Boolean IsEnabled()
    // Offset: 0xD46748
    bool IsEnabled();
    // public System.Boolean IsEnabled(System.Byte level, System.Int64 keywords)
    // Offset: 0xD46750
    bool IsEnabled(uint8_t level, int64_t keywords);
    // static public System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.WriteEventErrorCode GetLastWriteEventError()
    // Offset: 0xD46794
    static ::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode GetLastWriteEventError();
    // static private System.Void SetLastError(System.Int32 error)
    // Offset: 0xD467FC
    static void SetLastError(int error);
    // static private System.Object EncodeObject(ref System.Object data, ref System.Diagnostics.Tracing.EventProvider/System.Diagnostics.Tracing.EventData* dataDescriptor, ref System.Byte* dataBuffer, ref System.UInt32 totalEventSize)
    // Offset: 0xD468B0
    static ::Il2CppObject* EncodeObject(ByRef<::Il2CppObject*> data, ByRef<::System::Diagnostics::Tracing::EventProvider_EventData*> dataDescriptor, ByRef<uint8_t*> dataBuffer, ByRef<uint> totalEventSize);
    // System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] eventPayload)
    // Offset: 0xD47194
    bool WriteEvent(ByRef<::System::Diagnostics::Tracing::EventDescriptor> eventDescriptor, ::System::Guid* activityID, ::System::Guid* childActivityID, ::ArrayW<::Il2CppObject*> eventPayload);
    // protected internal System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0xD47C64
    bool WriteEvent(ByRef<::System::Diagnostics::Tracing::EventDescriptor> eventDescriptor, ::System::Guid* activityID, ::System::Guid* childActivityID, int dataCount, ::System::IntPtr data);
    // System.Boolean WriteEventRaw(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* relatedActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0xD47D3C
    bool WriteEventRaw(ByRef<::System::Diagnostics::Tracing::EventDescriptor> eventDescriptor, ::System::Guid* activityID, ::System::Guid* relatedActivityID, int dataCount, ::System::IntPtr data);
    // private System.UInt32 EventUnregister()
    // Offset: 0xD45800
    uint EventUnregister();
    // static private System.Int32 bitcount(System.UInt32 n)
    // Offset: 0xD46660
    static int bitcount(uint n);
    // static private System.Int32 bitindex(System.UInt32 n)
    // Offset: 0xD46720
    static int bitindex(uint n);
    // System.Void .ctor()
    // Offset: 0xD45274
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EventProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventProvider*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0xD4578C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Diagnostics.Tracing.EventProvider
  #pragma pack(pop)
  static check_size<sizeof(EventProvider), 92 + sizeof(bool)> __System_Diagnostics_Tracing_EventProviderSizeCheck;
  static_assert(sizeof(EventProvider) == 0x5D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode, "System.Diagnostics.Tracing", "EventProvider/WriteEventErrorCode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventProvider::SessionInfo, "System.Diagnostics.Tracing", "EventProvider/SessionInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::get_Level
// Il2CppName: get_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventLevel (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::get_Level)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "get_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::get_MatchAnyKeyword
// Il2CppName: get_MatchAnyKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventKeywords (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::get_MatchAnyKeyword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "get_MatchAnyKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Diagnostics::Tracing::EventProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)(::System::Guid)>(&System::Diagnostics::Tracing::EventProvider::Register)> {
  static const MethodInfo* get() {
    static auto* providerGuid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{providerGuid});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::SetInformation
// Il2CppName: SetInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventProvider::*)(::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_INFO_CLASS, void*, int)>(&System::Diagnostics::Tracing::EventProvider::SetInformation)> {
  static const MethodInfo* get() {
    static auto* eventInfoClass = &::il2cpp_utils::GetClassFromName("Microsoft.Win32", "UnsafeNativeMethods/ManifestEtw/EVENT_INFO_CLASS")->byval_arg;
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "SetInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventInfoClass, data, dataSize});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)(bool)>(&System::Diagnostics::Tracing::EventProvider::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::Deregister
// Il2CppName: Deregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::Deregister)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "Deregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::EtwEnableCallBack
// Il2CppName: EtwEnableCallBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Guid>, ByRef<int>, ByRef<uint8_t>, ByRef<int64_t>, ByRef<int64_t>, ByRef<::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR*>, ByRef<void*>)>(&System::Diagnostics::Tracing::EventProvider::EtwEnableCallBack)> {
  static const MethodInfo* get() {
    static auto* sourceId = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* controlCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* setLevel = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* anyKeyword = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* allKeyword = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* filterData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Microsoft.Win32", "UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR"))->this_arg;
    static auto* callbackContext = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "EtwEnableCallBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceId, controlCode, setLevel, anyKeyword, allKeyword, filterData, callbackContext});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::EtwEnableCallBackImpl
// Il2CppName: EtwEnableCallBackImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)(ByRef<int>, ByRef<uint8_t>, ByRef<int64_t>, ByRef<int64_t>, ByRef<::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR*>)>(&System::Diagnostics::Tracing::EventProvider::EtwEnableCallBackImpl)> {
  static const MethodInfo* get() {
    static auto* controlCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* setLevel = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    static auto* anyKeyword = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* allKeyword = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* filterData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Microsoft.Win32", "UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "EtwEnableCallBackImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlCode, setLevel, anyKeyword, allKeyword, filterData});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::OnControllerCommand
// Il2CppName: OnControllerCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)(::System::Diagnostics::Tracing::ControllerCommand, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*, int, int)>(&System::Diagnostics::Tracing::EventProvider::OnControllerCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ControllerCommand")->byval_arg;
    static auto* arguments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "OnControllerCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, arguments, sessionId, etwSessionId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::FindNull
// Il2CppName: FindNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, int)>(&System::Diagnostics::Tracing::EventProvider::FindNull)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "FindNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, idx});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::GetSessions
// Il2CppName: GetSessions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Tuple_2<::System::Diagnostics::Tracing::EventProvider::SessionInfo, bool>*>* (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::GetSessions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "GetSessions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::GetSessionInfoCallback
// Il2CppName: GetSessionInfoCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int64_t, ByRef<::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>*>)>(&System::Diagnostics::Tracing::EventProvider::GetSessionInfoCallback)> {
  static const MethodInfo* get() {
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matchAllKeywords = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventProvider/SessionInfo")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "GetSessionInfoCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{etwSessionId, matchAllKeywords, sessionList});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::GetSessionInfo
// Il2CppName: GetSessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)(::System::Action_2<int, int64_t>*)>(&System::Diagnostics::Tracing::EventProvider::GetSessionInfo)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "GetSessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::IndexOfSessionInList
// Il2CppName: IndexOfSessionInList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Collections::Generic::List_1<::System::Diagnostics::Tracing::EventProvider::SessionInfo>*, int)>(&System::Diagnostics::Tracing::EventProvider::IndexOfSessionInList)> {
  static const MethodInfo* get() {
    static auto* sessions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventProvider/SessionInfo")})->byval_arg;
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "IndexOfSessionInList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessions, etwSessionId});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::GetDataFromController
// Il2CppName: GetDataFromController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)(int, ::Microsoft::Win32::UnsafeNativeMethods_ManifestEtw::EVENT_FILTER_DESCRIPTOR*, ByRef<::System::Diagnostics::Tracing::ControllerCommand>, ByRef<::ArrayW<uint8_t>>, ByRef<int>)>(&System::Diagnostics::Tracing::EventProvider::GetDataFromController)> {
  static const MethodInfo* get() {
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* filterData = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Microsoft.Win32", "UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR"))->byval_arg;
    static auto* command = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "ControllerCommand")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* dataStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "GetDataFromController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{etwSessionId, filterData, command, data, dataStart});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::IsEnabled
// Il2CppName: IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)(uint8_t, int64_t)>(&System::Diagnostics::Tracing::EventProvider::IsEnabled)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* keywords = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, keywords});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::GetLastWriteEventError
// Il2CppName: GetLastWriteEventError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode (*)()>(&System::Diagnostics::Tracing::EventProvider::GetLastWriteEventError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "GetLastWriteEventError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::SetLastError
// Il2CppName: SetLastError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Diagnostics::Tracing::EventProvider::SetLastError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "SetLastError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::EncodeObject
// Il2CppName: EncodeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(ByRef<::Il2CppObject*>, ByRef<::System::Diagnostics::Tracing::EventProvider_EventData*>, ByRef<uint8_t*>, ByRef<uint>)>(&System::Diagnostics::Tracing::EventProvider::EncodeObject)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    static auto* dataDescriptor = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventProvider/EventData"))->this_arg;
    static auto* dataBuffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->this_arg;
    static auto* totalEventSize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "EncodeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataDescriptor, dataBuffer, totalEventSize});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)(ByRef<::System::Diagnostics::Tracing::EventDescriptor>, ::System::Guid*, ::System::Guid*, ::ArrayW<::Il2CppObject*>)>(&System::Diagnostics::Tracing::EventProvider::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventDescriptor = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->this_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* eventPayload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDescriptor, activityID, childActivityID, eventPayload});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::WriteEvent
// Il2CppName: WriteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)(ByRef<::System::Diagnostics::Tracing::EventDescriptor>, ::System::Guid*, ::System::Guid*, int, ::System::IntPtr)>(&System::Diagnostics::Tracing::EventProvider::WriteEvent)> {
  static const MethodInfo* get() {
    static auto* eventDescriptor = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->this_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* childActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* dataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "WriteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDescriptor, activityID, childActivityID, dataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::WriteEventRaw
// Il2CppName: WriteEventRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventProvider::*)(ByRef<::System::Diagnostics::Tracing::EventDescriptor>, ::System::Guid*, ::System::Guid*, int, ::System::IntPtr)>(&System::Diagnostics::Tracing::EventProvider::WriteEventRaw)> {
  static const MethodInfo* get() {
    static auto* eventDescriptor = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->this_arg;
    static auto* activityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* relatedActivityID = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Guid"))->byval_arg;
    static auto* dataCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "WriteEventRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDescriptor, activityID, relatedActivityID, dataCount, data});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::EventUnregister
// Il2CppName: EventUnregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::EventUnregister)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "EventUnregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::bitcount
// Il2CppName: bitcount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Diagnostics::Tracing::EventProvider::bitcount)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "bitcount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::bitindex
// Il2CppName: bitindex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::Diagnostics::Tracing::EventProvider::bitindex)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "bitindex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventProvider::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::EventProvider::*)()>(&System::Diagnostics::Tracing::EventProvider::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventProvider*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
