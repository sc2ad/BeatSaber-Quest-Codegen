// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Tracing.EventFieldTags
#include "System/Diagnostics/Tracing/EventFieldTags.hpp"
// Including type: System.Diagnostics.Tracing.TraceLoggingDataType
#include "System/Diagnostics/Tracing/TraceLoggingDataType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: FieldMetadata
  class FieldMetadata;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::FieldMetadata);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::FieldMetadata*, "System.Diagnostics.Tracing", "FieldMetadata");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.FieldMetadata
  // [TokenAttribute] Offset: FFFFFFFF
  class FieldMetadata : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Int32 nameSize
    // Size: 0x4
    // Offset: 0x18
    int nameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Diagnostics.Tracing.EventFieldTags tags
    // Size: 0x4
    // Offset: 0x1C
    ::System::Diagnostics::Tracing::EventFieldTags tags;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::EventFieldTags) == 0x4);
    // private readonly System.Byte[] custom
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> custom;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.UInt16 fixedCount
    // Size: 0x2
    // Offset: 0x28
    uint16_t fixedCount;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.Byte inType
    // Size: 0x1
    // Offset: 0x2A
    uint8_t inType;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte outType
    // Size: 0x1
    // Offset: 0x2B
    uint8_t outType;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: private readonly System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private readonly System.Int32 nameSize
    [[deprecated("Use field access instead!")]] int& dyn_nameSize();
    // Get instance field reference: private readonly System.Diagnostics.Tracing.EventFieldTags tags
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::EventFieldTags& dyn_tags();
    // Get instance field reference: private readonly System.Byte[] custom
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_custom();
    // Get instance field reference: private readonly System.UInt16 fixedCount
    [[deprecated("Use field access instead!")]] uint16_t& dyn_fixedCount();
    // Get instance field reference: private System.Byte inType
    [[deprecated("Use field access instead!")]] uint8_t& dyn_inType();
    // Get instance field reference: private System.Byte outType
    [[deprecated("Use field access instead!")]] uint8_t& dyn_outType();
    // public System.Void .ctor(System.String name, System.Diagnostics.Tracing.TraceLoggingDataType type, System.Diagnostics.Tracing.EventFieldTags tags, System.Boolean variableCount)
    // Offset: 0xDDD1C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FieldMetadata* New_ctor(::StringW name, ::System::Diagnostics::Tracing::TraceLoggingDataType type, ::System::Diagnostics::Tracing::EventFieldTags tags, bool variableCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::FieldMetadata::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FieldMetadata*, creationType>(name, type, tags, variableCount)));
    }
    // private System.Void .ctor(System.String name, System.Diagnostics.Tracing.TraceLoggingDataType dataType, System.Diagnostics.Tracing.EventFieldTags tags, System.Byte countFlags, System.UInt16 fixedCount, System.Byte[] custom)
    // Offset: 0xDDD1EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FieldMetadata* New_ctor(::StringW name, ::System::Diagnostics::Tracing::TraceLoggingDataType dataType, ::System::Diagnostics::Tracing::EventFieldTags tags, uint8_t countFlags, uint16_t fixedCount, ::ArrayW<uint8_t> custom) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::FieldMetadata::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FieldMetadata*, creationType>(name, dataType, tags, countFlags, fixedCount, custom)));
    }
    // public System.Void IncrementStructFieldCount()
    // Offset: 0xDDD454
    void IncrementStructFieldCount();
    // public System.Void Encode(ref System.Int32 pos, System.Byte[] metadata)
    // Offset: 0xDDD4F4
    void Encode(ByRef<int> pos, ::ArrayW<uint8_t> metadata);
  }; // System.Diagnostics.Tracing.FieldMetadata
  #pragma pack(pop)
  static check_size<sizeof(FieldMetadata), 43 + sizeof(uint8_t)> __System_Diagnostics_Tracing_FieldMetadataSizeCheck;
  static_assert(sizeof(FieldMetadata) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::FieldMetadata::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::FieldMetadata::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::FieldMetadata::IncrementStructFieldCount
// Il2CppName: IncrementStructFieldCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::FieldMetadata::*)()>(&System::Diagnostics::Tracing::FieldMetadata::IncrementStructFieldCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::FieldMetadata*), "IncrementStructFieldCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::FieldMetadata::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Diagnostics::Tracing::FieldMetadata::*)(ByRef<int>, ::ArrayW<uint8_t>)>(&System::Diagnostics::Tracing::FieldMetadata::Encode)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* metadata = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::FieldMetadata*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, metadata});
  }
};
