// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ActivityFilter
  class ActivityFilter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: WeakReference`1<T>
  template<typename T>
  class WeakReference_1;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EtwSession
  class EtwSession;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Diagnostics::Tracing::EtwSession);
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EtwSession*, "System.Diagnostics.Tracing", "EtwSession");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EtwSession
  // [TokenAttribute] Offset: FFFFFFFF
  class EtwSession : public ::Il2CppObject {
    public:
    // Nested type: ::System::Diagnostics::Tracing::EtwSession::$$c__DisplayClass1_0
    class $$c__DisplayClass1_0;
    // Nested type: ::System::Diagnostics::Tracing::EtwSession::$$c
    class $$c;
    public:
    // public readonly System.Int32 m_etwSessionId
    // Size: 0x4
    // Offset: 0x10
    int m_etwSessionId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_etwSessionId and: m_activityFilter
    char __padding0[0x4] = {};
    // public System.Diagnostics.Tracing.ActivityFilter m_activityFilter
    // Size: 0x8
    // Offset: 0x18
    ::System::Diagnostics::Tracing::ActivityFilter* m_activityFilter;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Tracing::ActivityFilter*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.List`1<System.WeakReference`1<System.Diagnostics.Tracing.EtwSession>> s_etwSessions
    static ::System::Collections::Generic::List_1<::System::WeakReference_1<::System::Diagnostics::Tracing::EtwSession*>*>* _get_s_etwSessions();
    // Set static field: static private System.Collections.Generic.List`1<System.WeakReference`1<System.Diagnostics.Tracing.EtwSession>> s_etwSessions
    static void _set_s_etwSessions(::System::Collections::Generic::List_1<::System::WeakReference_1<::System::Diagnostics::Tracing::EtwSession*>*>* value);
    // Get instance field reference: public readonly System.Int32 m_etwSessionId
    [[deprecated("Use field access instead!")]] int& dyn_m_etwSessionId();
    // Get instance field reference: public System.Diagnostics.Tracing.ActivityFilter m_activityFilter
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Tracing::ActivityFilter*& dyn_m_activityFilter();
    // private System.Void .ctor(System.Int32 etwSessionId)
    // Offset: 0xD42F50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EtwSession* New_ctor(int etwSessionId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Diagnostics::Tracing::EtwSession::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EtwSession*, creationType>(etwSessionId)));
    }
    // static private System.Void .cctor()
    // Offset: 0xD4322C
    static void _cctor();
    // static public System.Diagnostics.Tracing.EtwSession GetEtwSession(System.Int32 etwSessionId, System.Boolean bCreateIfNeeded)
    // Offset: 0xD42C84
    static ::System::Diagnostics::Tracing::EtwSession* GetEtwSession(int etwSessionId, bool bCreateIfNeeded);
    // static public System.Void RemoveEtwSession(System.Diagnostics.Tracing.EtwSession etwSession)
    // Offset: 0xD430CC
    static void RemoveEtwSession(::System::Diagnostics::Tracing::EtwSession* etwSession);
    // static private System.Void TrimGlobalList()
    // Offset: 0xD42F7C
    static void TrimGlobalList();
  }; // System.Diagnostics.Tracing.EtwSession
  #pragma pack(pop)
  static check_size<sizeof(EtwSession), 24 + sizeof(::System::Diagnostics::Tracing::ActivityFilter*)> __System_Diagnostics_Tracing_EtwSessionSizeCheck;
  static_assert(sizeof(EtwSession) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EtwSession::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EtwSession::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Diagnostics::Tracing::EtwSession::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EtwSession*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EtwSession::GetEtwSession
// Il2CppName: GetEtwSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Diagnostics::Tracing::EtwSession* (*)(int, bool)>(&System::Diagnostics::Tracing::EtwSession::GetEtwSession)> {
  static const MethodInfo* get() {
    static auto* etwSessionId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bCreateIfNeeded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EtwSession*), "GetEtwSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{etwSessionId, bCreateIfNeeded});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EtwSession::RemoveEtwSession
// Il2CppName: RemoveEtwSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Diagnostics::Tracing::EtwSession*)>(&System::Diagnostics::Tracing::EtwSession::RemoveEtwSession)> {
  static const MethodInfo* get() {
    static auto* etwSession = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EtwSession")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EtwSession*), "RemoveEtwSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{etwSession});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EtwSession::TrimGlobalList
// Il2CppName: TrimGlobalList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Diagnostics::Tracing::EtwSession::TrimGlobalList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EtwSession*), "TrimGlobalList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
