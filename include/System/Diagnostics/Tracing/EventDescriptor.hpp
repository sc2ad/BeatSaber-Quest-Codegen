// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventDescriptor
  struct EventDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventDescriptor, "System.Diagnostics.Tracing", "EventDescriptor");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.EventDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventDescriptor/*, public ::System::ValueType*/ {
    public:
    public:
    // Creating union for fields at offset: 0x0
    union {
      // private System.Int32 m_traceloggingId
      // Size: 0x4
      // Offset: 0x0
      int m_traceloggingId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.UInt16 m_id
      // Size: 0x2
      // Offset: 0x0
      uint16_t m_id;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
    };
    // private System.Byte m_version
    // Size: 0x1
    // Offset: 0x2
    uint8_t m_version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_channel
    // Size: 0x1
    // Offset: 0x3
    uint8_t m_channel;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_level
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_level;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_opcode
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_opcode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.UInt16 m_task
    // Size: 0x2
    // Offset: 0x6
    uint16_t m_task;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.Int64 m_keywords
    // Size: 0x8
    // Offset: 0x8
    int64_t m_keywords;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating value type constructor for type: EventDescriptor
    constexpr EventDescriptor(int m_traceloggingId_ = {}, uint8_t m_version_ = {}, uint8_t m_channel_ = {}, uint8_t m_level_ = {}, uint8_t m_opcode_ = {}, uint16_t m_task_ = {}, int64_t m_keywords_ = {}) noexcept : m_traceloggingId{m_traceloggingId_}, m_version{m_version_}, m_channel{m_channel_}, m_level{m_level_}, m_opcode{m_opcode_}, m_task{m_task_}, m_keywords{m_keywords_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_traceloggingId
    [[deprecated("Use field access instead!")]] int& dyn_m_traceloggingId();
    // Get instance field reference: private System.UInt16 m_id
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_id();
    // Get instance field reference: private System.Byte m_version
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_version();
    // Get instance field reference: private System.Byte m_channel
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_channel();
    // Get instance field reference: private System.Byte m_level
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_level();
    // Get instance field reference: private System.Byte m_opcode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_opcode();
    // Get instance field reference: private System.UInt16 m_task
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_task();
    // Get instance field reference: private System.Int64 m_keywords
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_keywords();
    // public System.Int32 get_EventId()
    // Offset: 0xA3D1E4
    int get_EventId();
    // public System.Byte get_Version()
    // Offset: 0xA3D1EC
    uint8_t get_Version();
    // public System.Byte get_Channel()
    // Offset: 0xA3D1F4
    uint8_t get_Channel();
    // public System.Byte get_Level()
    // Offset: 0xA3D1FC
    uint8_t get_Level();
    // public System.Byte get_Opcode()
    // Offset: 0xA3D204
    uint8_t get_Opcode();
    // public System.Int32 get_Task()
    // Offset: 0xA3D20C
    int get_Task();
    // public System.Int64 get_Keywords()
    // Offset: 0xA3D214
    int64_t get_Keywords();
    // public System.Void .ctor(System.Int32 traceloggingId, System.Byte level, System.Byte opcode, System.Int64 keywords)
    // Offset: 0xA3D1C4
    EventDescriptor(int traceloggingId, uint8_t level, uint8_t opcode, int64_t keywords);
    // public System.Void .ctor(System.Int32 id, System.Byte version, System.Byte channel, System.Byte level, System.Byte opcode, System.Int32 task, System.Int64 keywords)
    // Offset: 0xA3D1DC
    EventDescriptor(int id, uint8_t version, uint8_t channel, uint8_t level, uint8_t opcode, int task, int64_t keywords);
    // public System.Boolean Equals(System.Diagnostics.Tracing.EventDescriptor other)
    // Offset: 0xA3D25C
    bool Equals(::System::Diagnostics::Tracing::EventDescriptor other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA3D21C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA3D224
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Diagnostics.Tracing.EventDescriptor
  #pragma pack(pop)
  static check_size<sizeof(EventDescriptor), 8 + sizeof(int64_t)> __System_Diagnostics_Tracing_EventDescriptorSizeCheck;
  static_assert(sizeof(EventDescriptor) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_EventId
// Il2CppName: get_EventId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_EventId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_EventId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Channel
// Il2CppName: get_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Channel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Level
// Il2CppName: get_Level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Level)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Opcode
// Il2CppName: get_Opcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Opcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Opcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Task
// Il2CppName: get_Task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Task)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::get_Keywords
// Il2CppName: get_Keywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::get_Keywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "get_Keywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::EventDescriptor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::EventDescriptor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventDescriptor::*)(::System::Diagnostics::Tracing::EventDescriptor)>(&System::Diagnostics::Tracing::EventDescriptor::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System.Diagnostics.Tracing", "EventDescriptor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Diagnostics::Tracing::EventDescriptor::*)(::Il2CppObject*)>(&System::Diagnostics::Tracing::EventDescriptor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Diagnostics::Tracing::EventDescriptor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Diagnostics::Tracing::EventDescriptor::*)()>(&System::Diagnostics::Tracing::EventDescriptor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Diagnostics::Tracing::EventDescriptor), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
