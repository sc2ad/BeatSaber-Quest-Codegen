// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventChannel
  struct EventChannel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Tracing::EventChannel, "System.Diagnostics.Tracing", "EventChannel");
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventChannel
  // [TokenAttribute] Offset: FFFFFFFF
  // [FriendAccessAllowedAttribute] Offset: FFFFFFFF
  struct EventChannel/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: EventChannel
    constexpr EventChannel(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public System.Diagnostics.Tracing.EventChannel None
    static constexpr const uint8_t None = 0u;
    // Get static field: static public System.Diagnostics.Tracing.EventChannel None
    static ::System::Diagnostics::Tracing::EventChannel _get_None();
    // Set static field: static public System.Diagnostics.Tracing.EventChannel None
    static void _set_None(::System::Diagnostics::Tracing::EventChannel value);
    // static field const value: static public System.Diagnostics.Tracing.EventChannel Admin
    static constexpr const uint8_t Admin = 16u;
    // Get static field: static public System.Diagnostics.Tracing.EventChannel Admin
    static ::System::Diagnostics::Tracing::EventChannel _get_Admin();
    // Set static field: static public System.Diagnostics.Tracing.EventChannel Admin
    static void _set_Admin(::System::Diagnostics::Tracing::EventChannel value);
    // static field const value: static public System.Diagnostics.Tracing.EventChannel Operational
    static constexpr const uint8_t Operational = 17u;
    // Get static field: static public System.Diagnostics.Tracing.EventChannel Operational
    static ::System::Diagnostics::Tracing::EventChannel _get_Operational();
    // Set static field: static public System.Diagnostics.Tracing.EventChannel Operational
    static void _set_Operational(::System::Diagnostics::Tracing::EventChannel value);
    // static field const value: static public System.Diagnostics.Tracing.EventChannel Analytic
    static constexpr const uint8_t Analytic = 18u;
    // Get static field: static public System.Diagnostics.Tracing.EventChannel Analytic
    static ::System::Diagnostics::Tracing::EventChannel _get_Analytic();
    // Set static field: static public System.Diagnostics.Tracing.EventChannel Analytic
    static void _set_Analytic(::System::Diagnostics::Tracing::EventChannel value);
    // static field const value: static public System.Diagnostics.Tracing.EventChannel Debug
    static constexpr const uint8_t Debug = 19u;
    // Get static field: static public System.Diagnostics.Tracing.EventChannel Debug
    static ::System::Diagnostics::Tracing::EventChannel _get_Debug();
    // Set static field: static public System.Diagnostics.Tracing.EventChannel Debug
    static void _set_Debug(::System::Diagnostics::Tracing::EventChannel value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // System.Diagnostics.Tracing.EventChannel
  #pragma pack(pop)
  static check_size<sizeof(EventChannel), 0 + sizeof(uint8_t)> __System_Diagnostics_Tracing_EventChannelSizeCheck;
  static_assert(sizeof(EventChannel) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
