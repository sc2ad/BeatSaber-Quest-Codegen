// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.LicenseManager
#include "System/ComponentModel/LicenseManager.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LicenseContext
  class LicenseContext;
}
// Forward declaring namespace: System::ComponentModel::Design
namespace System::ComponentModel::Design {
  // Forward declaring type: DesigntimeLicenseContext
  class DesigntimeLicenseContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: RuntimeTypeHandle
  struct RuntimeTypeHandle;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LicenseManager::LicenseInteropHelper);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LicenseManager::LicenseInteropHelper*, "System.ComponentModel", "LicenseManager/LicenseInteropHelper");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LicenseManager/System.ComponentModel.LicenseInteropHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class LicenseManager::LicenseInteropHelper : public ::Il2CppObject {
    public:
    // Nested type: ::System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext
    class CLRLicenseContext;
    public:
    // private System.ComponentModel.Design.DesigntimeLicenseContext helperContext
    // Size: 0x8
    // Offset: 0x10
    ::System::ComponentModel::Design::DesigntimeLicenseContext* helperContext;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::Design::DesigntimeLicenseContext*) == 0x8);
    // private System.ComponentModel.LicenseContext savedLicenseContext
    // Size: 0x8
    // Offset: 0x18
    ::System::ComponentModel::LicenseContext* savedLicenseContext;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::LicenseContext*) == 0x8);
    // private System.Type savedType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* savedType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // static field const value: static private System.Int32 S_OK
    static constexpr const int S_OK = 0;
    // Get static field: static private System.Int32 S_OK
    static int _get_S_OK();
    // Set static field: static private System.Int32 S_OK
    static void _set_S_OK(int value);
    // static field const value: static private System.Int32 E_NOTIMPL
    static constexpr const int E_NOTIMPL = -2147467263;
    // Get static field: static private System.Int32 E_NOTIMPL
    static int _get_E_NOTIMPL();
    // Set static field: static private System.Int32 E_NOTIMPL
    static void _set_E_NOTIMPL(int value);
    // static field const value: static private System.Int32 CLASS_E_NOTLICENSED
    static constexpr const int CLASS_E_NOTLICENSED = -2147221230;
    // Get static field: static private System.Int32 CLASS_E_NOTLICENSED
    static int _get_CLASS_E_NOTLICENSED();
    // Set static field: static private System.Int32 CLASS_E_NOTLICENSED
    static void _set_CLASS_E_NOTLICENSED(int value);
    // static field const value: static private System.Int32 E_FAIL
    static constexpr const int E_FAIL = -2147483640;
    // Get static field: static private System.Int32 E_FAIL
    static int _get_E_FAIL();
    // Set static field: static private System.Int32 E_FAIL
    static void _set_E_FAIL(int value);
    // Get instance field reference: private System.ComponentModel.Design.DesigntimeLicenseContext helperContext
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::Design::DesigntimeLicenseContext*& dyn_helperContext();
    // Get instance field reference: private System.ComponentModel.LicenseContext savedLicenseContext
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::LicenseContext*& dyn_savedLicenseContext();
    // Get instance field reference: private System.Type savedType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_savedType();
    // public System.Void .ctor()
    // Offset: 0x121BD1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseManager::LicenseInteropHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseManager::LicenseInteropHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseManager::LicenseInteropHelper*, creationType>()));
    }
    // static private System.Object AllocateAndValidateLicense(System.RuntimeTypeHandle rth, System.IntPtr bstrKey, System.Int32 fDesignTime)
    // Offset: 0x121B5E4
    static ::Il2CppObject* AllocateAndValidateLicense(::System::RuntimeTypeHandle rth, ::System::IntPtr bstrKey, int fDesignTime);
    // static private System.Int32 RequestLicKey(System.RuntimeTypeHandle rth, ref System.IntPtr pbstrKey)
    // Offset: 0x121B83C
    static int RequestLicKey(::System::RuntimeTypeHandle rth, ByRef<::System::IntPtr> pbstrKey);
    // private System.Void GetLicInfo(System.RuntimeTypeHandle rth, ref System.Int32 pRuntimeKeyAvail, ref System.Int32 pLicVerified)
    // Offset: 0x121B974
    void GetLicInfo(::System::RuntimeTypeHandle rth, ByRef<int> pRuntimeKeyAvail, ByRef<int> pLicVerified);
    // private System.Void GetCurrentContextInfo(ref System.Int32 fDesignTime, ref System.IntPtr bstrKey, System.RuntimeTypeHandle rth)
    // Offset: 0x121BB0C
    void GetCurrentContextInfo(ByRef<int> fDesignTime, ByRef<::System::IntPtr> bstrKey, ::System::RuntimeTypeHandle rth);
    // private System.Void SaveKeyInCurrentContext(System.IntPtr bstrKey)
    // Offset: 0x121BC54
    void SaveKeyInCurrentContext(::System::IntPtr bstrKey);
  }; // System.ComponentModel.LicenseManager/System.ComponentModel.LicenseInteropHelper
  #pragma pack(pop)
  static check_size<sizeof(LicenseManager::LicenseInteropHelper), 32 + sizeof(::System::Type*)> __System_ComponentModel_LicenseManager_LicenseInteropHelperSizeCheck;
  static_assert(sizeof(LicenseManager::LicenseInteropHelper) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::AllocateAndValidateLicense
// Il2CppName: AllocateAndValidateLicense
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::RuntimeTypeHandle, ::System::IntPtr, int)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::AllocateAndValidateLicense)> {
  static const MethodInfo* get() {
    static auto* rth = &::il2cpp_utils::GetClassFromName("System", "RuntimeTypeHandle")->byval_arg;
    static auto* bstrKey = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* fDesignTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper*), "AllocateAndValidateLicense", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rth, bstrKey, fDesignTime});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::RequestLicKey
// Il2CppName: RequestLicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::RuntimeTypeHandle, ByRef<::System::IntPtr>)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::RequestLicKey)> {
  static const MethodInfo* get() {
    static auto* rth = &::il2cpp_utils::GetClassFromName("System", "RuntimeTypeHandle")->byval_arg;
    static auto* pbstrKey = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper*), "RequestLicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rth, pbstrKey});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::GetLicInfo
// Il2CppName: GetLicInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::LicenseManager::LicenseInteropHelper::*)(::System::RuntimeTypeHandle, ByRef<int>, ByRef<int>)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::GetLicInfo)> {
  static const MethodInfo* get() {
    static auto* rth = &::il2cpp_utils::GetClassFromName("System", "RuntimeTypeHandle")->byval_arg;
    static auto* pRuntimeKeyAvail = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* pLicVerified = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper*), "GetLicInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rth, pRuntimeKeyAvail, pLicVerified});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::GetCurrentContextInfo
// Il2CppName: GetCurrentContextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::LicenseManager::LicenseInteropHelper::*)(ByRef<int>, ByRef<::System::IntPtr>, ::System::RuntimeTypeHandle)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::GetCurrentContextInfo)> {
  static const MethodInfo* get() {
    static auto* fDesignTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bstrKey = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* rth = &::il2cpp_utils::GetClassFromName("System", "RuntimeTypeHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper*), "GetCurrentContextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fDesignTime, bstrKey, rth});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::SaveKeyInCurrentContext
// Il2CppName: SaveKeyInCurrentContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::LicenseManager::LicenseInteropHelper::*)(::System::IntPtr)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::SaveKeyInCurrentContext)> {
  static const MethodInfo* get() {
    static auto* bstrKey = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper*), "SaveKeyInCurrentContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bstrKey});
  }
};
