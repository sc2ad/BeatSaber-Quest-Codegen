// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.IContainer
#include "System/ComponentModel/IContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ISite
  class ISite;
  // Forward declaring type: ComponentCollection
  class ComponentCollection;
  // Forward declaring type: ContainerFilterService
  class ContainerFilterService;
  // Forward declaring type: IComponent
  class IComponent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: Container
  class Container;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::Container);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::Container*, "System.ComponentModel", "Container");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.Container
  // [TokenAttribute] Offset: FFFFFFFF
  class Container : public ::Il2CppObject/*, public ::System::ComponentModel::IContainer*/ {
    public:
    // Nested type: ::System::ComponentModel::Container::Site
    class Site;
    public:
    // private System.ComponentModel.ISite[] sites
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::System::ComponentModel::ISite*> sites;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::ComponentModel::ISite*>) == 0x8);
    // private System.Int32 siteCount
    // Size: 0x4
    // Offset: 0x18
    int siteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: siteCount and: components
    char __padding1[0x4] = {};
    // private System.ComponentModel.ComponentCollection components
    // Size: 0x8
    // Offset: 0x20
    ::System::ComponentModel::ComponentCollection* components;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::ComponentCollection*) == 0x8);
    // private System.ComponentModel.ContainerFilterService filter
    // Size: 0x8
    // Offset: 0x28
    ::System::ComponentModel::ContainerFilterService* filter;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::ContainerFilterService*) == 0x8);
    // private System.Boolean checkedFilter
    // Size: 0x1
    // Offset: 0x30
    bool checkedFilter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkedFilter and: syncObj
    char __padding4[0x7] = {};
    // private System.Object syncObj
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* syncObj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::ComponentModel::IContainer
    operator ::System::ComponentModel::IContainer() noexcept {
      return *reinterpret_cast<::System::ComponentModel::IContainer*>(this);
    }
    // Get instance field reference: private System.ComponentModel.ISite[] sites
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::ComponentModel::ISite*>& dyn_sites();
    // Get instance field reference: private System.Int32 siteCount
    [[deprecated("Use field access instead!")]] int& dyn_siteCount();
    // Get instance field reference: private System.ComponentModel.ComponentCollection components
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::ComponentCollection*& dyn_components();
    // Get instance field reference: private System.ComponentModel.ContainerFilterService filter
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::ContainerFilterService*& dyn_filter();
    // Get instance field reference: private System.Boolean checkedFilter
    [[deprecated("Use field access instead!")]] bool& dyn_checkedFilter();
    // Get instance field reference: private System.Object syncObj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_syncObj();
    // public System.ComponentModel.ComponentCollection get_Components()
    // Offset: 0x11DC5A4
    ::System::ComponentModel::ComponentCollection* get_Components();
    // public System.Void .ctor()
    // Offset: 0x11DD01C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Container* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::Container::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Container*, creationType>()));
    }
    // public System.Void Add(System.ComponentModel.IComponent component)
    // Offset: 0x11DBC4C
    void Add(::System::ComponentModel::IComponent* component);
    // public System.Void Add(System.ComponentModel.IComponent component, System.String name)
    // Offset: 0x11DBC5C
    void Add(::System::ComponentModel::IComponent* component, ::StringW name);
    // protected System.ComponentModel.ISite CreateSite(System.ComponentModel.IComponent component, System.String name)
    // Offset: 0x11DC0E0
    ::System::ComponentModel::ISite* CreateSite(::System::ComponentModel::IComponent* component, ::StringW name);
    // public System.Void Dispose()
    // Offset: 0x11DC198
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x11DC214
    void Dispose(bool disposing);
    // protected System.Object GetService(System.Type service)
    // Offset: 0x11DC508
    ::Il2CppObject* GetService(::System::Type* service);
    // public System.Void Remove(System.ComponentModel.IComponent component)
    // Offset: 0x11DC8D0
    void Remove(::System::ComponentModel::IComponent* component);
    // private System.Void Remove(System.ComponentModel.IComponent component, System.Boolean preserveSite)
    // Offset: 0x11DC8D8
    void Remove(::System::ComponentModel::IComponent* component, bool preserveSite);
    // protected System.Void RemoveWithoutUnsiting(System.ComponentModel.IComponent component)
    // Offset: 0x11DCBF4
    void RemoveWithoutUnsiting(::System::ComponentModel::IComponent* component);
    // protected System.Void ValidateName(System.ComponentModel.IComponent component, System.String name)
    // Offset: 0x11DCBFC
    void ValidateName(::System::ComponentModel::IComponent* component, ::StringW name);
    // protected override System.Void Finalize()
    // Offset: 0x11DBBD8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.ComponentModel.Container
  #pragma pack(pop)
  static check_size<sizeof(Container), 56 + sizeof(::Il2CppObject*)> __System_ComponentModel_ContainerSizeCheck;
  static_assert(sizeof(Container) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::Container::get_Components
// Il2CppName: get_Components
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ComponentCollection* (System::ComponentModel::Container::*)()>(&System::ComponentModel::Container::get_Components)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "get_Components", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::Container::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*)>(&System::ComponentModel::Container::Add)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*, ::StringW)>(&System::ComponentModel::Container::Add)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, name});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::CreateSite
// Il2CppName: CreateSite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ISite* (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*, ::StringW)>(&System::ComponentModel::Container::CreateSite)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "CreateSite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, name});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)()>(&System::ComponentModel::Container::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(bool)>(&System::ComponentModel::Container::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::GetService
// Il2CppName: GetService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::ComponentModel::Container::*)(::System::Type*)>(&System::ComponentModel::Container::GetService)> {
  static const MethodInfo* get() {
    static auto* service = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "GetService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{service});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*)>(&System::ComponentModel::Container::Remove)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*, bool)>(&System::ComponentModel::Container::Remove)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    static auto* preserveSite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, preserveSite});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::RemoveWithoutUnsiting
// Il2CppName: RemoveWithoutUnsiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*)>(&System::ComponentModel::Container::RemoveWithoutUnsiting)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "RemoveWithoutUnsiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::ValidateName
// Il2CppName: ValidateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)(::System::ComponentModel::IComponent*, ::StringW)>(&System::ComponentModel::Container::ValidateName)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "ValidateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, name});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Container::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Container::*)()>(&System::ComponentModel::Container::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Container*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
