// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.WeakHashtable
#include "System/ComponentModel/WeakHashtable.hpp"
// Including type: System.WeakReference
#include "System/WeakReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::WeakHashtable::EqualityWeakReference);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::WeakHashtable::EqualityWeakReference*, "System.ComponentModel", "WeakHashtable/EqualityWeakReference");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.WeakHashtable/System.ComponentModel.EqualityWeakReference
  // [TokenAttribute] Offset: FFFFFFFF
  class WeakHashtable::EqualityWeakReference : public ::System::WeakReference {
    public:
    public:
    // private System.Int32 _hashCode
    // Size: 0x4
    // Offset: 0x18
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return hashCode;
    }
    // Get instance field reference: private System.Int32 _hashCode
    [[deprecated("Use field access instead!")]] int& dyn__hashCode();
    // System.Void .ctor(System.Object o)
    // Offset: 0x1581F64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WeakHashtable::EqualityWeakReference* New_ctor(::Il2CppObject* o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WeakHashtable::EqualityWeakReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WeakHashtable::EqualityWeakReference*, creationType>(o)));
    }
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x158201C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x158209C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.ComponentModel.WeakHashtable/System.ComponentModel.EqualityWeakReference
  #pragma pack(pop)
  static check_size<sizeof(WeakHashtable::EqualityWeakReference), 24 + sizeof(int)> __System_ComponentModel_WeakHashtable_EqualityWeakReferenceSizeCheck;
  static_assert(sizeof(WeakHashtable::EqualityWeakReference) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::EqualityWeakReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::EqualityWeakReference::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::WeakHashtable::EqualityWeakReference::*)(::Il2CppObject*)>(&System::ComponentModel::WeakHashtable::EqualityWeakReference::Equals)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable::EqualityWeakReference*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WeakHashtable::EqualityWeakReference::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::WeakHashtable::EqualityWeakReference::*)()>(&System::ComponentModel::WeakHashtable::EqualityWeakReference::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WeakHashtable::EqualityWeakReference*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
