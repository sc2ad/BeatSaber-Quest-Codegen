// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: RecommendedAsConfigurableAttribute
  class RecommendedAsConfigurableAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::RecommendedAsConfigurableAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::RecommendedAsConfigurableAttribute*, "System.ComponentModel", "RecommendedAsConfigurableAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.RecommendedAsConfigurableAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: 8FF43C
  // [AttributeUsageAttribute] Offset: 8FF43C
  class RecommendedAsConfigurableAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean recommendedAsConfigurable
    // Size: 0x1
    // Offset: 0x10
    bool recommendedAsConfigurable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return recommendedAsConfigurable;
    }
    // Get static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute No
    static ::System::ComponentModel::RecommendedAsConfigurableAttribute* _get_No();
    // Set static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute No
    static void _set_No(::System::ComponentModel::RecommendedAsConfigurableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute Yes
    static ::System::ComponentModel::RecommendedAsConfigurableAttribute* _get_Yes();
    // Set static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute Yes
    static void _set_Yes(::System::ComponentModel::RecommendedAsConfigurableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute Default
    static ::System::ComponentModel::RecommendedAsConfigurableAttribute* _get_Default();
    // Set static field: static public readonly System.ComponentModel.RecommendedAsConfigurableAttribute Default
    static void _set_Default(::System::ComponentModel::RecommendedAsConfigurableAttribute* value);
    // Get instance field reference: private System.Boolean recommendedAsConfigurable
    [[deprecated("Use field access instead!")]] bool& dyn_recommendedAsConfigurable();
    // public System.Boolean get_RecommendedAsConfigurable()
    // Offset: 0x12BB02C
    bool get_RecommendedAsConfigurable();
    // public System.Void .ctor(System.Boolean recommendedAsConfigurable)
    // Offset: 0x12BAFFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecommendedAsConfigurableAttribute* New_ctor(bool recommendedAsConfigurable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::RecommendedAsConfigurableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecommendedAsConfigurableAttribute*, creationType>(recommendedAsConfigurable)));
    }
    // static private System.Void .cctor()
    // Offset: 0x12BB110
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x12BB034
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x12BB0F8
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
    // public override System.Boolean IsDefaultAttribute()
    // Offset: 0x12BB100
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::IsDefaultAttribute()
    bool IsDefaultAttribute();
  }; // System.ComponentModel.RecommendedAsConfigurableAttribute
  #pragma pack(pop)
  static check_size<sizeof(RecommendedAsConfigurableAttribute), 16 + sizeof(bool)> __System_ComponentModel_RecommendedAsConfigurableAttributeSizeCheck;
  static_assert(sizeof(RecommendedAsConfigurableAttribute) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::get_RecommendedAsConfigurable
// Il2CppName: get_RecommendedAsConfigurable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::RecommendedAsConfigurableAttribute::*)()>(&System::ComponentModel::RecommendedAsConfigurableAttribute::get_RecommendedAsConfigurable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::RecommendedAsConfigurableAttribute*), "get_RecommendedAsConfigurable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::RecommendedAsConfigurableAttribute::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::RecommendedAsConfigurableAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::RecommendedAsConfigurableAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::RecommendedAsConfigurableAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::RecommendedAsConfigurableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::RecommendedAsConfigurableAttribute::*)()>(&System::ComponentModel::RecommendedAsConfigurableAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::RecommendedAsConfigurableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::RecommendedAsConfigurableAttribute::IsDefaultAttribute
// Il2CppName: IsDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::RecommendedAsConfigurableAttribute::*)()>(&System::ComponentModel::RecommendedAsConfigurableAttribute::IsDefaultAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::RecommendedAsConfigurableAttribute*), "IsDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
