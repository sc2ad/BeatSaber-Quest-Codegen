// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LicenseException
  class LicenseException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LicenseException);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LicenseException*, "System.ComponentModel", "LicenseException");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LicenseException
  // [TokenAttribute] Offset: FFFFFFFF
  class LicenseException : public ::System::SystemException {
    public:
    public:
    // private System.Type type
    // Size: 0x8
    // Offset: 0x88
    ::System::Type* type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Object instance
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* instance;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Type type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_type();
    // Get instance field reference: private System.Object instance
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_instance();
    // public System.Type get_LicensedType()
    // Offset: 0x1219C4C
    ::System::Type* get_LicensedType();
    // public System.Void .ctor(System.Type type)
    // Offset: 0x1219828
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseException* New_ctor(::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseException*, creationType>(type)));
    }
    // public System.Void .ctor(System.Type type, System.Object instance)
    // Offset: 0x121996C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseException* New_ctor(::System::Type* type, ::Il2CppObject* instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseException*, creationType>(type, instance)));
    }
    // public System.Void .ctor(System.Type type, System.Object instance, System.String message)
    // Offset: 0x1219924
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseException* New_ctor(::System::Type* type, ::Il2CppObject* instance, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseException*, creationType>(type, instance, message)));
    }
    // public System.Void .ctor(System.Type type, System.Object instance, System.String message, System.Exception innerException)
    // Offset: 0x1219AC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseException* New_ctor(::System::Type* type, ::Il2CppObject* instance, ::StringW message, ::System::Exception* innerException) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseException*, creationType>(type, instance, message, innerException)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1219B10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseException* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseException*, creationType>(info, context)));
    }
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1219C54
    // Implemented from: System.Exception
    // Base method: System.Void Exception::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
  }; // System.ComponentModel.LicenseException
  #pragma pack(pop)
  static check_size<sizeof(LicenseException), 144 + sizeof(::Il2CppObject*)> __System_ComponentModel_LicenseExceptionSizeCheck;
  static_assert(sizeof(LicenseException) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::get_LicensedType
// Il2CppName: get_LicensedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::ComponentModel::LicenseException::*)()>(&System::ComponentModel::LicenseException::get_LicensedType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseException*), "get_LicensedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::LicenseException::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::ComponentModel::LicenseException::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
