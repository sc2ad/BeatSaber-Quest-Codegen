// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LicenseProviderAttribute
  class LicenseProviderAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LicenseProviderAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LicenseProviderAttribute*, "System.ComponentModel", "LicenseProviderAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LicenseProviderAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FF194
  class LicenseProviderAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Type licenseProviderType
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* licenseProviderType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String licenseProviderName
    // Size: 0x8
    // Offset: 0x18
    ::StringW licenseProviderName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static public readonly System.ComponentModel.LicenseProviderAttribute Default
    static ::System::ComponentModel::LicenseProviderAttribute* _get_Default();
    // Set static field: static public readonly System.ComponentModel.LicenseProviderAttribute Default
    static void _set_Default(::System::ComponentModel::LicenseProviderAttribute* value);
    // Get instance field reference: private System.Type licenseProviderType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_licenseProviderType();
    // Get instance field reference: private System.String licenseProviderName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_licenseProviderName();
    // public System.Type get_LicenseProvider()
    // Offset: 0x121B2E4
    ::System::Type* get_LicenseProvider();
    // public System.Void .ctor()
    // Offset: 0x121BE48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseProviderAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseProviderAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseProviderAttribute*, creationType>()));
    }
    // public System.Void .ctor(System.String typeName)
    // Offset: 0x121BE70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseProviderAttribute* New_ctor(::StringW typeName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseProviderAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseProviderAttribute*, creationType>(typeName)));
    }
    // public System.Void .ctor(System.Type type)
    // Offset: 0x121BE9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseProviderAttribute* New_ctor(::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseProviderAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseProviderAttribute*, creationType>(type)));
    }
    // static private System.Void .cctor()
    // Offset: 0x121C0BC
    static void _cctor();
    // public override System.Object get_TypeId()
    // Offset: 0x121BEC8
    // Implemented from: System.Attribute
    // Base method: System.Object Attribute::get_TypeId()
    ::Il2CppObject* get_TypeId();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x121BF94
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x121C0B4
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
  }; // System.ComponentModel.LicenseProviderAttribute
  #pragma pack(pop)
  static check_size<sizeof(LicenseProviderAttribute), 24 + sizeof(::StringW)> __System_ComponentModel_LicenseProviderAttributeSizeCheck;
  static_assert(sizeof(LicenseProviderAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::get_LicenseProvider
// Il2CppName: get_LicenseProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::ComponentModel::LicenseProviderAttribute::*)()>(&System::ComponentModel::LicenseProviderAttribute::get_LicenseProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseProviderAttribute*), "get_LicenseProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::LicenseProviderAttribute::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseProviderAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::get_TypeId
// Il2CppName: get_TypeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::ComponentModel::LicenseProviderAttribute::*)()>(&System::ComponentModel::LicenseProviderAttribute::get_TypeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseProviderAttribute*), "get_TypeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::LicenseProviderAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::LicenseProviderAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseProviderAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseProviderAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::LicenseProviderAttribute::*)()>(&System::ComponentModel::LicenseProviderAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseProviderAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
