// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.ComponentModel.BindingDirection
#include "System/ComponentModel/BindingDirection.hpp"
// Including type: System.ComponentModel.BindableSupport
#include "System/ComponentModel/BindableSupport.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: BindableAttribute
  class BindableAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::BindableAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::BindableAttribute*, "System.ComponentModel", "BindableAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.BindableAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FEB34
  class BindableAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean bindable
    // Size: 0x1
    // Offset: 0x10
    bool bindable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isDefault
    // Size: 0x1
    // Offset: 0x11
    bool isDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDefault and: direction
    char __padding1[0x2] = {};
    // private System.ComponentModel.BindingDirection direction
    // Size: 0x4
    // Offset: 0x14
    ::System::ComponentModel::BindingDirection direction;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::BindingDirection) == 0x4);
    public:
    // Get static field: static public readonly System.ComponentModel.BindableAttribute Yes
    static ::System::ComponentModel::BindableAttribute* _get_Yes();
    // Set static field: static public readonly System.ComponentModel.BindableAttribute Yes
    static void _set_Yes(::System::ComponentModel::BindableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.BindableAttribute No
    static ::System::ComponentModel::BindableAttribute* _get_No();
    // Set static field: static public readonly System.ComponentModel.BindableAttribute No
    static void _set_No(::System::ComponentModel::BindableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.BindableAttribute Default
    static ::System::ComponentModel::BindableAttribute* _get_Default();
    // Set static field: static public readonly System.ComponentModel.BindableAttribute Default
    static void _set_Default(::System::ComponentModel::BindableAttribute* value);
    // Get instance field reference: private System.Boolean bindable
    [[deprecated("Use field access instead!")]] bool& dyn_bindable();
    // Get instance field reference: private System.Boolean isDefault
    [[deprecated("Use field access instead!")]] bool& dyn_isDefault();
    // Get instance field reference: private System.ComponentModel.BindingDirection direction
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::BindingDirection& dyn_direction();
    // public System.Boolean get_Bindable()
    // Offset: 0x11D6F58
    bool get_Bindable();
    // public System.ComponentModel.BindingDirection get_Direction()
    // Offset: 0x11D6F60
    ::System::ComponentModel::BindingDirection get_Direction();
    // public System.Void .ctor(System.Boolean bindable)
    // Offset: 0x11D6E50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableAttribute* New_ctor(bool bindable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::BindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableAttribute*, creationType>(bindable)));
    }
    // public System.Void .ctor(System.Boolean bindable, System.ComponentModel.BindingDirection direction)
    // Offset: 0x11D6E84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableAttribute* New_ctor(bool bindable, ::System::ComponentModel::BindingDirection direction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::BindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableAttribute*, creationType>(bindable, direction)));
    }
    // public System.Void .ctor(System.ComponentModel.BindableSupport flags)
    // Offset: 0x11D6EC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableAttribute* New_ctor(::System::ComponentModel::BindableSupport flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::BindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableAttribute*, creationType>(flags)));
    }
    // public System.Void .ctor(System.ComponentModel.BindableSupport flags, System.ComponentModel.BindingDirection direction)
    // Offset: 0x11D6F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindableAttribute* New_ctor(::System::ComponentModel::BindableSupport flags, ::System::ComponentModel::BindingDirection direction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::BindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindableAttribute*, creationType>(flags, direction)));
    }
    // static private System.Void .cctor()
    // Offset: 0x11D70A4
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x11D6F68
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x11D7004
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
    // public override System.Boolean IsDefaultAttribute()
    // Offset: 0x11D7010
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::IsDefaultAttribute()
    bool IsDefaultAttribute();
  }; // System.ComponentModel.BindableAttribute
  #pragma pack(pop)
  static check_size<sizeof(BindableAttribute), 20 + sizeof(::System::ComponentModel::BindingDirection)> __System_ComponentModel_BindableAttributeSizeCheck;
  static_assert(sizeof(BindableAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::get_Bindable
// Il2CppName: get_Bindable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BindableAttribute::*)()>(&System::ComponentModel::BindableAttribute::get_Bindable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), "get_Bindable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::get_Direction
// Il2CppName: get_Direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::BindingDirection (System::ComponentModel::BindableAttribute::*)()>(&System::ComponentModel::BindableAttribute::get_Direction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), "get_Direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::BindableAttribute::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BindableAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::BindableAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::BindableAttribute::*)()>(&System::ComponentModel::BindableAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BindableAttribute::IsDefaultAttribute
// Il2CppName: IsDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BindableAttribute::*)()>(&System::ComponentModel::BindableAttribute::IsDefaultAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BindableAttribute*), "IsDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
