// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.ComponentModel.BindableSupport
#include "System/ComponentModel/BindableSupport.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ListBindableAttribute
  class ListBindableAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::ListBindableAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::ListBindableAttribute*, "System.ComponentModel", "ListBindableAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x12
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.ListBindableAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FF1C8
  class ListBindableAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean listBindable
    // Size: 0x1
    // Offset: 0x10
    bool listBindable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isDefault
    // Size: 0x1
    // Offset: 0x11
    bool isDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public readonly System.ComponentModel.ListBindableAttribute Yes
    static ::System::ComponentModel::ListBindableAttribute* _get_Yes();
    // Set static field: static public readonly System.ComponentModel.ListBindableAttribute Yes
    static void _set_Yes(::System::ComponentModel::ListBindableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.ListBindableAttribute No
    static ::System::ComponentModel::ListBindableAttribute* _get_No();
    // Set static field: static public readonly System.ComponentModel.ListBindableAttribute No
    static void _set_No(::System::ComponentModel::ListBindableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.ListBindableAttribute Default
    static ::System::ComponentModel::ListBindableAttribute* _get_Default();
    // Set static field: static public readonly System.ComponentModel.ListBindableAttribute Default
    static void _set_Default(::System::ComponentModel::ListBindableAttribute* value);
    // Get instance field reference: private System.Boolean listBindable
    [[deprecated("Use field access instead!")]] bool& dyn_listBindable();
    // Get instance field reference: private System.Boolean isDefault
    [[deprecated("Use field access instead!")]] bool& dyn_isDefault();
    // public System.Boolean get_ListBindable()
    // Offset: 0x121C194
    bool get_ListBindable();
    // public System.Void .ctor(System.Boolean listBindable)
    // Offset: 0x121C124
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListBindableAttribute* New_ctor(bool listBindable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::ListBindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListBindableAttribute*, creationType>(listBindable)));
    }
    // public System.Void .ctor(System.ComponentModel.BindableSupport flags)
    // Offset: 0x121C154
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListBindableAttribute* New_ctor(::System::ComponentModel::BindableSupport flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::ListBindableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListBindableAttribute*, creationType>(flags)));
    }
    // static private System.Void .cctor()
    // Offset: 0x121C2E0
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x121C19C
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x121C244
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
    // public override System.Boolean IsDefaultAttribute()
    // Offset: 0x121C24C
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::IsDefaultAttribute()
    bool IsDefaultAttribute();
  }; // System.ComponentModel.ListBindableAttribute
  #pragma pack(pop)
  static check_size<sizeof(ListBindableAttribute), 17 + sizeof(bool)> __System_ComponentModel_ListBindableAttributeSizeCheck;
  static_assert(sizeof(ListBindableAttribute) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::get_ListBindable
// Il2CppName: get_ListBindable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::ListBindableAttribute::*)()>(&System::ComponentModel::ListBindableAttribute::get_ListBindable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ListBindableAttribute*), "get_ListBindable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::ListBindableAttribute::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ListBindableAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::ListBindableAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::ListBindableAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ListBindableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::ListBindableAttribute::*)()>(&System::ComponentModel::ListBindableAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ListBindableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ListBindableAttribute::IsDefaultAttribute
// Il2CppName: IsDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::ListBindableAttribute::*)()>(&System::ComponentModel::ListBindableAttribute::IsDefaultAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ListBindableAttribute*), "IsDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
