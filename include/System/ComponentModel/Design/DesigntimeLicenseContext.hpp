// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.LicenseContext
#include "System/ComponentModel/LicenseContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LicenseUsageMode
  struct LicenseUsageMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Completed forward declares
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Forward declaring type: DesigntimeLicenseContext
  class DesigntimeLicenseContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::Design::DesigntimeLicenseContext);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::Design::DesigntimeLicenseContext*, "System.ComponentModel.Design", "DesigntimeLicenseContext");
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.Design.DesigntimeLicenseContext
  // [TokenAttribute] Offset: FFFFFFFF
  class DesigntimeLicenseContext : public ::System::ComponentModel::LicenseContext {
    public:
    public:
    // System.Collections.Hashtable savedLicenseKeys
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* savedLicenseKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Hashtable*
    constexpr operator ::System::Collections::Hashtable*() const noexcept {
      return savedLicenseKeys;
    }
    // Get instance field reference: System.Collections.Hashtable savedLicenseKeys
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_savedLicenseKeys();
    // public override System.ComponentModel.LicenseUsageMode get_UsageMode()
    // Offset: 0x120FBCC
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.ComponentModel.LicenseUsageMode LicenseContext::get_UsageMode()
    ::System::ComponentModel::LicenseUsageMode get_UsageMode();
    // public System.Void .ctor()
    // Offset: 0x120FC38
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.Void LicenseContext::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DesigntimeLicenseContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::Design::DesigntimeLicenseContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DesigntimeLicenseContext*, creationType>()));
    }
    // public override System.String GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    // Offset: 0x120FBD4
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.String LicenseContext::GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    ::StringW GetSavedLicenseKey(::System::Type* type, ::System::Reflection::Assembly* resourceAssembly);
    // public override System.Void SetSavedLicenseKey(System.Type type, System.String key)
    // Offset: 0x120FBDC
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.Void LicenseContext::SetSavedLicenseKey(System.Type type, System.String key)
    void SetSavedLicenseKey(::System::Type* type, ::StringW key);
  }; // System.ComponentModel.Design.DesigntimeLicenseContext
  #pragma pack(pop)
  static check_size<sizeof(DesigntimeLicenseContext), 16 + sizeof(::System::Collections::Hashtable*)> __System_ComponentModel_Design_DesigntimeLicenseContextSizeCheck;
  static_assert(sizeof(DesigntimeLicenseContext) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::Design::DesigntimeLicenseContext::get_UsageMode
// Il2CppName: get_UsageMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::LicenseUsageMode (System::ComponentModel::Design::DesigntimeLicenseContext::*)()>(&System::ComponentModel::Design::DesigntimeLicenseContext::get_UsageMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::DesigntimeLicenseContext*), "get_UsageMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::DesigntimeLicenseContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::Design::DesigntimeLicenseContext::GetSavedLicenseKey
// Il2CppName: GetSavedLicenseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::Design::DesigntimeLicenseContext::*)(::System::Type*, ::System::Reflection::Assembly*)>(&System::ComponentModel::Design::DesigntimeLicenseContext::GetSavedLicenseKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* resourceAssembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::DesigntimeLicenseContext*), "GetSavedLicenseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, resourceAssembly});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::DesigntimeLicenseContext::SetSavedLicenseKey
// Il2CppName: SetSavedLicenseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::Design::DesigntimeLicenseContext::*)(::System::Type*, ::StringW)>(&System::ComponentModel::Design::DesigntimeLicenseContext::SetSavedLicenseKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::DesigntimeLicenseContext*), "SetSavedLicenseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, key});
  }
};
