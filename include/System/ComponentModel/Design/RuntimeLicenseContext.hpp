// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.LicenseContext
#include "System/ComponentModel/LicenseContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: TraceSwitch
  class TraceSwitch;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Forward declaring type: RuntimeLicenseContext
  class RuntimeLicenseContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::Design::RuntimeLicenseContext);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::Design::RuntimeLicenseContext*, "System.ComponentModel.Design", "RuntimeLicenseContext");
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.Design.RuntimeLicenseContext
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeLicenseContext : public ::System::ComponentModel::LicenseContext {
    public:
    public:
    // System.Collections.Hashtable savedLicenseKeys
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Hashtable* savedLicenseKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Hashtable*
    constexpr operator ::System::Collections::Hashtable*() const noexcept {
      return savedLicenseKeys;
    }
    // Get static field: static private System.Diagnostics.TraceSwitch RuntimeLicenseContextSwitch
    static ::System::Diagnostics::TraceSwitch* _get_RuntimeLicenseContextSwitch();
    // Set static field: static private System.Diagnostics.TraceSwitch RuntimeLicenseContextSwitch
    static void _set_RuntimeLicenseContextSwitch(::System::Diagnostics::TraceSwitch* value);
    // Get instance field reference: System.Collections.Hashtable savedLicenseKeys
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_savedLicenseKeys();
    // static private System.Void .cctor()
    // Offset: 0x1210938
    static void _cctor();
    // private System.String GetLocalPath(System.String fileName)
    // Offset: 0x120FE68
    ::StringW GetLocalPath(::StringW fileName);
    // private System.IO.Stream CaseInsensitiveManifestResourceStreamLookup(System.Reflection.Assembly satellite, System.String name)
    // Offset: 0x1210600
    ::System::IO::Stream* CaseInsensitiveManifestResourceStreamLookup(::System::Reflection::Assembly* satellite, ::StringW name);
    // static private System.IO.Stream OpenRead(System.Uri resourceUri)
    // Offset: 0x12107C4
    static ::System::IO::Stream* OpenRead(::System::Uri* resourceUri);
    // public System.Void .ctor()
    // Offset: 0x1210930
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.Void LicenseContext::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeLicenseContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::Design::RuntimeLicenseContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeLicenseContext*, creationType>()));
    }
    // public override System.String GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    // Offset: 0x120FEF8
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.String LicenseContext::GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    ::StringW GetSavedLicenseKey(::System::Type* type, ::System::Reflection::Assembly* resourceAssembly);
  }; // System.ComponentModel.Design.RuntimeLicenseContext
  #pragma pack(pop)
  static check_size<sizeof(RuntimeLicenseContext), 16 + sizeof(::System::Collections::Hashtable*)> __System_ComponentModel_Design_RuntimeLicenseContextSizeCheck;
  static_assert(sizeof(RuntimeLicenseContext) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::Design::RuntimeLicenseContext::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::RuntimeLicenseContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::GetLocalPath
// Il2CppName: GetLocalPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::Design::RuntimeLicenseContext::*)(::StringW)>(&System::ComponentModel::Design::RuntimeLicenseContext::GetLocalPath)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::RuntimeLicenseContext*), "GetLocalPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::CaseInsensitiveManifestResourceStreamLookup
// Il2CppName: CaseInsensitiveManifestResourceStreamLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::ComponentModel::Design::RuntimeLicenseContext::*)(::System::Reflection::Assembly*, ::StringW)>(&System::ComponentModel::Design::RuntimeLicenseContext::CaseInsensitiveManifestResourceStreamLookup)> {
  static const MethodInfo* get() {
    static auto* satellite = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::RuntimeLicenseContext*), "CaseInsensitiveManifestResourceStreamLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{satellite, name});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::OpenRead
// Il2CppName: OpenRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (*)(::System::Uri*)>(&System::ComponentModel::Design::RuntimeLicenseContext::OpenRead)> {
  static const MethodInfo* get() {
    static auto* resourceUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::RuntimeLicenseContext*), "OpenRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resourceUri});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::Design::RuntimeLicenseContext::GetSavedLicenseKey
// Il2CppName: GetSavedLicenseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::Design::RuntimeLicenseContext::*)(::System::Type*, ::System::Reflection::Assembly*)>(&System::ComponentModel::Design::RuntimeLicenseContext::GetSavedLicenseKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* resourceAssembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::RuntimeLicenseContext*), "GetSavedLicenseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, resourceAssembly});
  }
};
