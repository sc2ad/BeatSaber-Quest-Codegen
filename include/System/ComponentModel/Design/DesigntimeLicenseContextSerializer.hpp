// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::ComponentModel::Design
namespace System::ComponentModel::Design {
  // Forward declaring type: RuntimeLicenseContext
  class RuntimeLicenseContext;
}
// Completed forward declares
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Forward declaring type: DesigntimeLicenseContextSerializer
  class DesigntimeLicenseContextSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::Design::DesigntimeLicenseContextSerializer);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::Design::DesigntimeLicenseContextSerializer*, "System.ComponentModel.Design", "DesigntimeLicenseContextSerializer");
// Type namespace: System.ComponentModel.Design
namespace System::ComponentModel::Design {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.Design.DesigntimeLicenseContextSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  class DesigntimeLicenseContextSerializer : public ::Il2CppObject {
    public:
    // static System.Void Deserialize(System.IO.Stream o, System.String cryptoKey, System.ComponentModel.Design.RuntimeLicenseContext context)
    // Offset: 0x120FCA8
    static void Deserialize(::System::IO::Stream* o, ::StringW cryptoKey, ::System::ComponentModel::Design::RuntimeLicenseContext* context);
  }; // System.ComponentModel.Design.DesigntimeLicenseContextSerializer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::Design::DesigntimeLicenseContextSerializer::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, ::StringW, ::System::ComponentModel::Design::RuntimeLicenseContext*)>(&System::ComponentModel::Design::DesigntimeLicenseContextSerializer::Deserialize)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* cryptoKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.ComponentModel.Design", "RuntimeLicenseContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::Design::DesigntimeLicenseContextSerializer*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, cryptoKey, context});
  }
};
