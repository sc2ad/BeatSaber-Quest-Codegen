// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.LicenseManager/System.ComponentModel.LicenseInteropHelper
#include "System/ComponentModel/LicenseManager_LicenseInteropHelper.hpp"
// Including type: System.ComponentModel.LicenseContext
#include "System/ComponentModel/LicenseContext.hpp"
// Including type: System.ComponentModel.LicenseUsageMode
#include "System/ComponentModel/LicenseUsageMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext*, "System.ComponentModel", "LicenseManager/LicenseInteropHelper/CLRLicenseContext");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LicenseManager/System.ComponentModel.LicenseInteropHelper/System.ComponentModel.CLRLicenseContext
  // [TokenAttribute] Offset: FFFFFFFF
  class LicenseManager::LicenseInteropHelper::CLRLicenseContext : public ::System::ComponentModel::LicenseContext {
    public:
    public:
    // private System.ComponentModel.LicenseUsageMode usageMode
    // Size: 0x4
    // Offset: 0x10
    ::System::ComponentModel::LicenseUsageMode usageMode;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::LicenseUsageMode) == 0x4);
    // Padding between fields: usageMode and: type
    char __padding0[0x4] = {};
    // private System.Type type
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.String key
    // Size: 0x8
    // Offset: 0x20
    ::StringW key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.ComponentModel.LicenseUsageMode usageMode
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::LicenseUsageMode& dyn_usageMode();
    // Get instance field reference: private System.Type type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_type();
    // Get instance field reference: private System.String key
    [[deprecated("Use field access instead!")]] ::StringW& dyn_key();
    // public System.Void .ctor(System.ComponentModel.LicenseUsageMode usageMode, System.Type type)
    // Offset: 0x121B800
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicenseManager::LicenseInteropHelper::CLRLicenseContext* New_ctor(::System::ComponentModel::LicenseUsageMode usageMode, ::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicenseManager::LicenseInteropHelper::CLRLicenseContext*, creationType>(usageMode, type)));
    }
    // public override System.ComponentModel.LicenseUsageMode get_UsageMode()
    // Offset: 0x121BD24
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.ComponentModel.LicenseUsageMode LicenseContext::get_UsageMode()
    ::System::ComponentModel::LicenseUsageMode get_UsageMode();
    // public override System.String GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    // Offset: 0x121BD2C
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.String LicenseContext::GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly)
    ::StringW GetSavedLicenseKey(::System::Type* type, ::System::Reflection::Assembly* resourceAssembly);
    // public override System.Void SetSavedLicenseKey(System.Type type, System.String key)
    // Offset: 0x121BDBC
    // Implemented from: System.ComponentModel.LicenseContext
    // Base method: System.Void LicenseContext::SetSavedLicenseKey(System.Type type, System.String key)
    void SetSavedLicenseKey(::System::Type* type, ::StringW key);
  }; // System.ComponentModel.LicenseManager/System.ComponentModel.LicenseInteropHelper/System.ComponentModel.CLRLicenseContext
  #pragma pack(pop)
  static check_size<sizeof(LicenseManager::LicenseInteropHelper::CLRLicenseContext), 32 + sizeof(::StringW)> __System_ComponentModel_LicenseManager_LicenseInteropHelper_CLRLicenseContextSizeCheck;
  static_assert(sizeof(LicenseManager::LicenseInteropHelper::CLRLicenseContext) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::get_UsageMode
// Il2CppName: get_UsageMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::LicenseUsageMode (System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::*)()>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::get_UsageMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext*), "get_UsageMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::GetSavedLicenseKey
// Il2CppName: GetSavedLicenseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::*)(::System::Type*, ::System::Reflection::Assembly*)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::GetSavedLicenseKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* resourceAssembly = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext*), "GetSavedLicenseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, resourceAssembly});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::SetSavedLicenseKey
// Il2CppName: SetSavedLicenseKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::*)(::System::Type*, ::StringW)>(&System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext::SetSavedLicenseKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicenseManager::LicenseInteropHelper::CLRLicenseContext*), "SetSavedLicenseKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, key});
  }
};
