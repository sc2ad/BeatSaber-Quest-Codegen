// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.CustomTypeDescriptor
#include "System/ComponentModel/CustomTypeDescriptor.hpp"
// Including type: System.ComponentModel.TypeDescriptor/System.ComponentModel.AttributeProvider
#include "System/ComponentModel/TypeDescriptor_AttributeProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Skipping declaration: ICustomTypeDescriptor because it is already included!
  // Forward declaring type: AttributeCollection
  class AttributeCollection;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor*, "System.ComponentModel", "TypeDescriptor/AttributeProvider/AttributeTypeDescriptor");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.TypeDescriptor/System.ComponentModel.AttributeProvider/System.ComponentModel.AttributeTypeDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeDescriptor::AttributeProvider::AttributeTypeDescriptor : public ::System::ComponentModel::CustomTypeDescriptor {
    public:
    public:
    // private System.Attribute[] _attributeArray
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Attribute*> attributeArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Attribute*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::ComponentModel::ICustomTypeDescriptor*
    constexpr operator ::System::ComponentModel::ICustomTypeDescriptor*() const noexcept = delete;
    // Get instance field reference: private System.Attribute[] _attributeArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Attribute*>& dyn__attributeArray();
    // System.Void .ctor(System.Attribute[] attrs, System.ComponentModel.ICustomTypeDescriptor parent)
    // Offset: 0x157A67C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeDescriptor::AttributeProvider::AttributeTypeDescriptor* New_ctor(::ArrayW<::System::Attribute*> attrs, ::System::ComponentModel::ICustomTypeDescriptor* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeDescriptor::AttributeProvider::AttributeTypeDescriptor*, creationType>(attrs, parent)));
    }
    // public override System.ComponentModel.AttributeCollection GetAttributes()
    // Offset: 0x157A6AC
    // Implemented from: System.ComponentModel.CustomTypeDescriptor
    // Base method: System.ComponentModel.AttributeCollection CustomTypeDescriptor::GetAttributes()
    ::System::ComponentModel::AttributeCollection* GetAttributes();
  }; // System.ComponentModel.TypeDescriptor/System.ComponentModel.AttributeProvider/System.ComponentModel.AttributeTypeDescriptor
  #pragma pack(pop)
  static check_size<sizeof(TypeDescriptor::AttributeProvider::AttributeTypeDescriptor), 24 + sizeof(::ArrayW<::System::Attribute*>)> __System_ComponentModel_TypeDescriptor_AttributeProvider_AttributeTypeDescriptorSizeCheck;
  static_assert(sizeof(TypeDescriptor::AttributeProvider::AttributeTypeDescriptor) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::AttributeCollection* (System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor::*)()>(&System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor::GetAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::TypeDescriptor::AttributeProvider::AttributeTypeDescriptor*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
