// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.LicenseProvider
#include "System/ComponentModel/LicenseProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: License
  class License;
  // Forward declaring type: LicenseContext
  class LicenseContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LicFileLicenseProvider
  class LicFileLicenseProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LicFileLicenseProvider);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LicFileLicenseProvider*, "System.ComponentModel", "LicFileLicenseProvider");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LicFileLicenseProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class LicFileLicenseProvider : public ::System::ComponentModel::LicenseProvider {
    public:
    // Nested type: ::System::ComponentModel::LicFileLicenseProvider::LicFileLicense
    class LicFileLicense;
    // protected System.Boolean IsKeyValid(System.String key, System.Type type)
    // Offset: 0x12192BC
    bool IsKeyValid(::StringW key, ::System::Type* type);
    // protected System.String GetKey(System.Type type)
    // Offset: 0x1219304
    ::StringW GetKey(::System::Type* type);
    // public System.Void .ctor()
    // Offset: 0x1219784
    // Implemented from: System.ComponentModel.LicenseProvider
    // Base method: System.Void LicenseProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LicFileLicenseProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LicFileLicenseProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LicFileLicenseProvider*, creationType>()));
    }
    // public override System.ComponentModel.License GetLicense(System.ComponentModel.LicenseContext context, System.Type type, System.Object instance, System.Boolean allowExceptions)
    // Offset: 0x12193A4
    // Implemented from: System.ComponentModel.LicenseProvider
    // Base method: System.ComponentModel.License LicenseProvider::GetLicense(System.ComponentModel.LicenseContext context, System.Type type, System.Object instance, System.Boolean allowExceptions)
    ::System::ComponentModel::License* GetLicense(::System::ComponentModel::LicenseContext* context, ::System::Type* type, ::Il2CppObject* instance, bool allowExceptions);
  }; // System.ComponentModel.LicFileLicenseProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LicFileLicenseProvider::IsKeyValid
// Il2CppName: IsKeyValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::LicFileLicenseProvider::*)(::StringW, ::System::Type*)>(&System::ComponentModel::LicFileLicenseProvider::IsKeyValid)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicFileLicenseProvider*), "IsKeyValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, type});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicFileLicenseProvider::GetKey
// Il2CppName: GetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::LicFileLicenseProvider::*)(::System::Type*)>(&System::ComponentModel::LicFileLicenseProvider::GetKey)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicFileLicenseProvider*), "GetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LicFileLicenseProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LicFileLicenseProvider::GetLicense
// Il2CppName: GetLicense
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::License* (System::ComponentModel::LicFileLicenseProvider::*)(::System::ComponentModel::LicenseContext*, ::System::Type*, ::Il2CppObject*, bool)>(&System::ComponentModel::LicFileLicenseProvider::GetLicense)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "LicenseContext")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* allowExceptions = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LicFileLicenseProvider*), "GetLicense", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, type, instance, allowExceptions});
  }
};
