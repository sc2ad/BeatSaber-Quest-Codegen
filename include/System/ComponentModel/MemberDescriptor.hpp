// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: AttributeCollection
  class AttributeCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: MemberDescriptor
  class MemberDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::MemberDescriptor);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::MemberDescriptor*, "System.ComponentModel", "MemberDescriptor");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.MemberDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1084F4C
  class MemberDescriptor : public ::Il2CppObject {
    public:
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String displayName
    // Size: 0x8
    // Offset: 0x18
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 nameHash
    // Size: 0x4
    // Offset: 0x20
    int nameHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nameHash and: attributeCollection
    char __padding2[0x4] = {};
    // private System.ComponentModel.AttributeCollection attributeCollection
    // Size: 0x8
    // Offset: 0x28
    ::System::ComponentModel::AttributeCollection* attributeCollection;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::AttributeCollection*) == 0x8);
    // private System.Attribute[] attributes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::System::Attribute*> attributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Attribute*>) == 0x8);
    // private System.Attribute[] originalAttributes
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::System::Attribute*> originalAttributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Attribute*>) == 0x8);
    // private System.Boolean attributesFiltered
    // Size: 0x1
    // Offset: 0x40
    bool attributesFiltered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean attributesFilled
    // Size: 0x1
    // Offset: 0x41
    bool attributesFilled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attributesFilled and: metadataVersion
    char __padding7[0x2] = {};
    // private System.Int32 metadataVersion
    // Size: 0x4
    // Offset: 0x44
    int metadataVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String category
    // Size: 0x8
    // Offset: 0x48
    ::StringW category;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String description
    // Size: 0x8
    // Offset: 0x50
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Object lockCookie
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppObject* lockCookie;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: private System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: private System.Int32 nameHash
    [[deprecated("Use field access instead!")]] int& dyn_nameHash();
    // Get instance field reference: private System.ComponentModel.AttributeCollection attributeCollection
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::AttributeCollection*& dyn_attributeCollection();
    // Get instance field reference: private System.Attribute[] attributes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Attribute*>& dyn_attributes();
    // Get instance field reference: private System.Attribute[] originalAttributes
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Attribute*>& dyn_originalAttributes();
    // Get instance field reference: private System.Boolean attributesFiltered
    [[deprecated("Use field access instead!")]] bool& dyn_attributesFiltered();
    // Get instance field reference: private System.Boolean attributesFilled
    [[deprecated("Use field access instead!")]] bool& dyn_attributesFilled();
    // Get instance field reference: private System.Int32 metadataVersion
    [[deprecated("Use field access instead!")]] int& dyn_metadataVersion();
    // Get instance field reference: private System.String category
    [[deprecated("Use field access instead!")]] ::StringW& dyn_category();
    // Get instance field reference: private System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // Get instance field reference: private System.Object lockCookie
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockCookie();
    // protected System.Attribute[] get_AttributeArray()
    // Offset: 0x1E53054
    ::ArrayW<::System::Attribute*> get_AttributeArray();
    // public System.ComponentModel.AttributeCollection get_Attributes()
    // Offset: 0x1E53844
    ::System::ComponentModel::AttributeCollection* get_Attributes();
    // public System.String get_Name()
    // Offset: 0x1E53900
    ::StringW get_Name();
    // protected System.Int32 get_NameHashCode()
    // Offset: 0x1E53958
    int get_NameHashCode();
    // protected System.Void .ctor(System.String name, System.Attribute[] attributes)
    // Offset: 0x1E52ED8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MemberDescriptor* New_ctor(::StringW name, ::ArrayW<::System::Attribute*> attributes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::MemberDescriptor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MemberDescriptor*, creationType>(name, attributes)));
    }
    // private System.Void CheckAttributesValid()
    // Offset: 0x1E53080
    void CheckAttributesValid();
    // protected System.ComponentModel.AttributeCollection CreateAttributeCollection()
    // Offset: 0x1E53960
    ::System::ComponentModel::AttributeCollection* CreateAttributeCollection();
    // protected System.Void FillAttributes(System.Collections.IList attributeList)
    // Offset: 0x1E53C3C
    void FillAttributes(::System::Collections::IList* attributeList);
    // private System.Void FilterAttributesIfNeeded()
    // Offset: 0x1E5314C
    void FilterAttributesIfNeeded();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1E539D8
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1E53D50
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.ComponentModel.MemberDescriptor
  #pragma pack(pop)
  static check_size<sizeof(MemberDescriptor), 88 + sizeof(::Il2CppObject*)> __System_ComponentModel_MemberDescriptorSizeCheck;
  static_assert(sizeof(MemberDescriptor) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::get_AttributeArray
// Il2CppName: get_AttributeArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Attribute*> (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::get_AttributeArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "get_AttributeArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::AttributeCollection* (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::get_Attributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::get_NameHashCode
// Il2CppName: get_NameHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::get_NameHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "get_NameHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::CheckAttributesValid
// Il2CppName: CheckAttributesValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::CheckAttributesValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "CheckAttributesValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::CreateAttributeCollection
// Il2CppName: CreateAttributeCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::AttributeCollection* (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::CreateAttributeCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "CreateAttributeCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::FillAttributes
// Il2CppName: FillAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::MemberDescriptor::*)(::System::Collections::IList*)>(&System::ComponentModel::MemberDescriptor::FillAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeList = &::il2cpp_utils::GetClassFromName("System.Collections", "IList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "FillAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeList});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::FilterAttributesIfNeeded
// Il2CppName: FilterAttributesIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::FilterAttributesIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "FilterAttributesIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::MemberDescriptor::*)(::Il2CppObject*)>(&System::ComponentModel::MemberDescriptor::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::MemberDescriptor::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::MemberDescriptor::*)()>(&System::ComponentModel::MemberDescriptor::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::MemberDescriptor*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
