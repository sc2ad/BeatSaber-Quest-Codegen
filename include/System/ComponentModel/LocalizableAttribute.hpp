// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: LocalizableAttribute
  class LocalizableAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::LocalizableAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::LocalizableAttribute*, "System.ComponentModel", "LocalizableAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.LocalizableAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FF214
  class LocalizableAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean isLocalizable
    // Size: 0x1
    // Offset: 0x10
    bool isLocalizable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return isLocalizable;
    }
    // Get static field: static public readonly System.ComponentModel.LocalizableAttribute Yes
    static ::System::ComponentModel::LocalizableAttribute* _get_Yes();
    // Set static field: static public readonly System.ComponentModel.LocalizableAttribute Yes
    static void _set_Yes(::System::ComponentModel::LocalizableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.LocalizableAttribute No
    static ::System::ComponentModel::LocalizableAttribute* _get_No();
    // Set static field: static public readonly System.ComponentModel.LocalizableAttribute No
    static void _set_No(::System::ComponentModel::LocalizableAttribute* value);
    // Get static field: static public readonly System.ComponentModel.LocalizableAttribute Default
    static ::System::ComponentModel::LocalizableAttribute* _get_Default();
    // Set static field: static public readonly System.ComponentModel.LocalizableAttribute Default
    static void _set_Default(::System::ComponentModel::LocalizableAttribute* value);
    // Get instance field reference: private System.Boolean isLocalizable
    [[deprecated("Use field access instead!")]] bool& dyn_isLocalizable();
    // public System.Boolean get_IsLocalizable()
    // Offset: 0x121D14C
    bool get_IsLocalizable();
    // public System.Void .ctor(System.Boolean isLocalizable)
    // Offset: 0x121D11C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalizableAttribute* New_ctor(bool isLocalizable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::LocalizableAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalizableAttribute*, creationType>(isLocalizable)));
    }
    // static private System.Void .cctor()
    // Offset: 0x121D284
    static void _cctor();
    // public override System.Boolean IsDefaultAttribute()
    // Offset: 0x121D154
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::IsDefaultAttribute()
    bool IsDefaultAttribute();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x121D1E4
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x121D27C
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
  }; // System.ComponentModel.LocalizableAttribute
  #pragma pack(pop)
  static check_size<sizeof(LocalizableAttribute), 16 + sizeof(bool)> __System_ComponentModel_LocalizableAttributeSizeCheck;
  static_assert(sizeof(LocalizableAttribute) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::get_IsLocalizable
// Il2CppName: get_IsLocalizable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::LocalizableAttribute::*)()>(&System::ComponentModel::LocalizableAttribute::get_IsLocalizable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LocalizableAttribute*), "get_IsLocalizable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::LocalizableAttribute::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LocalizableAttribute*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::IsDefaultAttribute
// Il2CppName: IsDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::LocalizableAttribute::*)()>(&System::ComponentModel::LocalizableAttribute::IsDefaultAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LocalizableAttribute*), "IsDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::LocalizableAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::LocalizableAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LocalizableAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::LocalizableAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::LocalizableAttribute::*)()>(&System::ComponentModel::LocalizableAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::LocalizableAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
