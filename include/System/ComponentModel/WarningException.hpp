// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: WarningException
  class WarningException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::WarningException);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::WarningException*, "System.ComponentModel", "WarningException");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.WarningException
  // [TokenAttribute] Offset: FFFFFFFF
  class WarningException : public ::System::SystemException {
    public:
    public:
    // private readonly System.String helpUrl
    // Size: 0x8
    // Offset: 0x88
    ::StringW helpUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String helpTopic
    // Size: 0x8
    // Offset: 0x90
    ::StringW helpTopic;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.String helpUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_helpUrl();
    // Get instance field reference: private readonly System.String helpTopic
    [[deprecated("Use field access instead!")]] ::StringW& dyn_helpTopic();
    // public System.String get_HelpUrl()
    // Offset: 0x1581794
    ::StringW get_HelpUrl();
    // public System.String get_HelpTopic()
    // Offset: 0x158179C
    ::StringW get_HelpTopic();
    // public System.Void .ctor()
    // Offset: 0x15815A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>()));
    }
    // public System.Void .ctor(System.String message)
    // Offset: 0x1581604
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor(::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>(message)));
    }
    // public System.Void .ctor(System.String message, System.String helpUrl)
    // Offset: 0x158162C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor(::StringW message, ::StringW helpUrl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>(message, helpUrl)));
    }
    // public System.Void .ctor(System.String message, System.Exception innerException)
    // Offset: 0x1581658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor(::StringW message, ::System::Exception* innerException) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>(message, innerException)));
    }
    // public System.Void .ctor(System.String message, System.String helpUrl, System.String helpTopic)
    // Offset: 0x15815CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor(::StringW message, ::StringW helpUrl, ::StringW helpTopic) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>(message, helpUrl, helpTopic)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1581660
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WarningException* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::WarningException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WarningException*, creationType>(info, context)));
    }
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x15817A4
    // Implemented from: System.Exception
    // Base method: System.Void Exception::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
  }; // System.ComponentModel.WarningException
  #pragma pack(pop)
  static check_size<sizeof(WarningException), 144 + sizeof(::StringW)> __System_ComponentModel_WarningExceptionSizeCheck;
  static_assert(sizeof(WarningException) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::WarningException::get_HelpUrl
// Il2CppName: get_HelpUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::WarningException::*)()>(&System::ComponentModel::WarningException::get_HelpUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WarningException*), "get_HelpUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WarningException::get_HelpTopic
// Il2CppName: get_HelpTopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::WarningException::*)()>(&System::ComponentModel::WarningException::get_HelpTopic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WarningException*), "get_HelpTopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::WarningException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::WarningException::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::ComponentModel::WarningException::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::WarningException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
