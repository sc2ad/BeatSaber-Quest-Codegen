// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: InitializationEventAttribute
  class InitializationEventAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::InitializationEventAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::InitializationEventAttribute*, "System.ComponentModel", "InitializationEventAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.InitializationEventAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 8FF16C
  class InitializationEventAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String eventName
    // Size: 0x8
    // Offset: 0x10
    ::StringW eventName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return eventName;
    }
    // Get instance field reference: private System.String eventName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_eventName();
    // public System.String get_EventName()
    // Offset: 0x121865C
    ::StringW get_EventName();
    // public System.Void .ctor(System.String eventName)
    // Offset: 0x1218630
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InitializationEventAttribute* New_ctor(::StringW eventName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::InitializationEventAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InitializationEventAttribute*, creationType>(eventName)));
    }
  }; // System.ComponentModel.InitializationEventAttribute
  #pragma pack(pop)
  static check_size<sizeof(InitializationEventAttribute), 16 + sizeof(::StringW)> __System_ComponentModel_InitializationEventAttributeSizeCheck;
  static_assert(sizeof(InitializationEventAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::InitializationEventAttribute::get_EventName
// Il2CppName: get_EventName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::InitializationEventAttribute::*)()>(&System::ComponentModel::InitializationEventAttribute::get_EventName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::InitializationEventAttribute*), "get_EventName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::InitializationEventAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
