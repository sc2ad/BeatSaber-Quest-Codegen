// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ProgressChangedEventArgs
  class ProgressChangedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::ProgressChangedEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::ProgressChangedEventArgs*, "System.ComponentModel", "ProgressChangedEventArgs");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.ProgressChangedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ProgressChangedEventArgs : public ::System::EventArgs {
    public:
    public:
    // private readonly System.Int32 progressPercentage
    // Size: 0x4
    // Offset: 0x10
    int progressPercentage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: progressPercentage and: userState
    char __padding0[0x4] = {};
    // private readonly System.Object userState
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* userState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Int32 progressPercentage
    [[deprecated("Use field access instead!")]] int& dyn_progressPercentage();
    // Get instance field reference: private readonly System.Object userState
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_userState();
    // public System.Int32 get_ProgressPercentage()
    // Offset: 0x12264F8
    int get_ProgressPercentage();
    // public System.Object get_UserState()
    // Offset: 0x1226500
    ::Il2CppObject* get_UserState();
    // public System.Void .ctor(System.Int32 progressPercentage, System.Object userState)
    // Offset: 0x1226474
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgressChangedEventArgs* New_ctor(int progressPercentage, ::Il2CppObject* userState) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::ProgressChangedEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgressChangedEventArgs*, creationType>(progressPercentage, userState)));
    }
  }; // System.ComponentModel.ProgressChangedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ProgressChangedEventArgs), 24 + sizeof(::Il2CppObject*)> __System_ComponentModel_ProgressChangedEventArgsSizeCheck;
  static_assert(sizeof(ProgressChangedEventArgs) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::ProgressChangedEventArgs::get_ProgressPercentage
// Il2CppName: get_ProgressPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::ProgressChangedEventArgs::*)()>(&System::ComponentModel::ProgressChangedEventArgs::get_ProgressPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ProgressChangedEventArgs*), "get_ProgressPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ProgressChangedEventArgs::get_UserState
// Il2CppName: get_UserState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::ComponentModel::ProgressChangedEventArgs::*)()>(&System::ComponentModel::ProgressChangedEventArgs::get_UserState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ProgressChangedEventArgs*), "get_UserState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ProgressChangedEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
