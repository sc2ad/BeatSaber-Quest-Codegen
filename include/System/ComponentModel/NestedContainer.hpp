// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.Container
#include "System/ComponentModel/Container.hpp"
// Including type: System.ComponentModel.INestedContainer
#include "System/ComponentModel/INestedContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: IComponent
  class IComponent;
  // Forward declaring type: ISite
  class ISite;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventArgs
  class EventArgs;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: NestedContainer
  class NestedContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::NestedContainer);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::NestedContainer*, "System.ComponentModel", "NestedContainer");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.NestedContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class NestedContainer : public ::System::ComponentModel::Container/*, public ::System::ComponentModel::INestedContainer*/ {
    public:
    // Nested type: ::System::ComponentModel::NestedContainer::Site
    class Site;
    public:
    // private System.ComponentModel.IComponent _owner
    // Size: 0x8
    // Offset: 0x40
    ::System::ComponentModel::IComponent* owner;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::IComponent*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::ComponentModel::INestedContainer
    operator ::System::ComponentModel::INestedContainer() noexcept {
      return *reinterpret_cast<::System::ComponentModel::INestedContainer*>(this);
    }
    // Creating conversion operator: operator ::System::ComponentModel::IComponent*
    constexpr operator ::System::ComponentModel::IComponent*() const noexcept {
      return owner;
    }
    // Get instance field reference: private System.ComponentModel.IComponent _owner
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::IComponent*& dyn__owner();
    // public System.ComponentModel.IComponent get_Owner()
    // Offset: 0x12249B4
    ::System::ComponentModel::IComponent* get_Owner();
    // protected System.String get_OwnerName()
    // Offset: 0x12249BC
    ::StringW get_OwnerName();
    // public System.Void .ctor(System.ComponentModel.IComponent owner)
    // Offset: 0x1224880
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NestedContainer* New_ctor(::System::ComponentModel::IComponent* owner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::NestedContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NestedContainer*, creationType>(owner)));
    }
    // private System.Void OnOwnerDisposed(System.Object sender, System.EventArgs e)
    // Offset: 0x1224EFC
    void OnOwnerDisposed(::Il2CppObject* sender, ::System::EventArgs* e);
    // protected override System.ComponentModel.ISite CreateSite(System.ComponentModel.IComponent component, System.String name)
    // Offset: 0x1224C48
    // Implemented from: System.ComponentModel.Container
    // Base method: System.ComponentModel.ISite Container::CreateSite(System.ComponentModel.IComponent component, System.String name)
    ::System::ComponentModel::ISite* CreateSite(::System::ComponentModel::IComponent* component, ::StringW name);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1224D40
    // Implemented from: System.ComponentModel.Container
    // Base method: System.Void Container::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected override System.Object GetService(System.Type service)
    // Offset: 0x1224E44
    // Implemented from: System.ComponentModel.Container
    // Base method: System.Object Container::GetService(System.Type service)
    ::Il2CppObject* GetService(::System::Type* service);
  }; // System.ComponentModel.NestedContainer
  #pragma pack(pop)
  static check_size<sizeof(NestedContainer), 64 + sizeof(::System::ComponentModel::IComponent*)> __System_ComponentModel_NestedContainerSizeCheck;
  static_assert(sizeof(NestedContainer) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::get_Owner
// Il2CppName: get_Owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::IComponent* (System::ComponentModel::NestedContainer::*)()>(&System::ComponentModel::NestedContainer::get_Owner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "get_Owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::get_OwnerName
// Il2CppName: get_OwnerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::ComponentModel::NestedContainer::*)()>(&System::ComponentModel::NestedContainer::get_OwnerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "get_OwnerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::OnOwnerDisposed
// Il2CppName: OnOwnerDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::NestedContainer::*)(::Il2CppObject*, ::System::EventArgs*)>(&System::ComponentModel::NestedContainer::OnOwnerDisposed)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "OnOwnerDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::CreateSite
// Il2CppName: CreateSite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ISite* (System::ComponentModel::NestedContainer::*)(::System::ComponentModel::IComponent*, ::StringW)>(&System::ComponentModel::NestedContainer::CreateSite)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IComponent")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "CreateSite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, name});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::NestedContainer::*)(bool)>(&System::ComponentModel::NestedContainer::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::NestedContainer::GetService
// Il2CppName: GetService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::ComponentModel::NestedContainer::*)(::System::Type*)>(&System::ComponentModel::NestedContainer::GetService)> {
  static const MethodInfo* get() {
    static auto* service = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::NestedContainer*), "GetService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{service});
  }
};
