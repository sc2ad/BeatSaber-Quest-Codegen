// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.Component
#include "System/ComponentModel/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
  // Forward declaring type: DoWorkEventHandler
  class DoWorkEventHandler;
  // Forward declaring type: ProgressChangedEventHandler
  class ProgressChangedEventHandler;
  // Forward declaring type: RunWorkerCompletedEventHandler
  class RunWorkerCompletedEventHandler;
  // Forward declaring type: DoWorkEventArgs
  class DoWorkEventArgs;
  // Forward declaring type: RunWorkerCompletedEventArgs
  class RunWorkerCompletedEventArgs;
  // Forward declaring type: ProgressChangedEventArgs
  class ProgressChangedEventArgs;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SendOrPostCallback
  class SendOrPostCallback;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: BackgroundWorker
  class BackgroundWorker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::BackgroundWorker);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::BackgroundWorker*, "System.ComponentModel", "BackgroundWorker");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.BackgroundWorker
  // [TokenAttribute] Offset: FFFFFFFF
  // [SRDescriptionAttribute] Offset: 8FEAD4
  // [DefaultEventAttribute] Offset: 8FEAD4
  class BackgroundWorker : public ::System::ComponentModel::Component {
    public:
    // Nested type: ::System::ComponentModel::BackgroundWorker::WorkerThreadStartDelegate
    class WorkerThreadStartDelegate;
    public:
    // private System.Boolean canCancelWorker
    // Size: 0x1
    // Offset: 0x28
    bool canCancelWorker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean workerReportsProgress
    // Size: 0x1
    // Offset: 0x29
    bool workerReportsProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean cancellationPending
    // Size: 0x1
    // Offset: 0x2A
    bool cancellationPending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isRunning
    // Size: 0x1
    // Offset: 0x2B
    bool isRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRunning and: asyncOperation
    char __padding3[0x4] = {};
    // private System.ComponentModel.AsyncOperation asyncOperation
    // Size: 0x8
    // Offset: 0x30
    ::System::ComponentModel::AsyncOperation* asyncOperation;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::AsyncOperation*) == 0x8);
    // private readonly System.ComponentModel.BackgroundWorker/System.ComponentModel.WorkerThreadStartDelegate threadStart
    // Size: 0x8
    // Offset: 0x38
    ::System::ComponentModel::BackgroundWorker::WorkerThreadStartDelegate* threadStart;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::BackgroundWorker::WorkerThreadStartDelegate*) == 0x8);
    // private readonly System.Threading.SendOrPostCallback operationCompleted
    // Size: 0x8
    // Offset: 0x40
    ::System::Threading::SendOrPostCallback* operationCompleted;
    // Field size check
    static_assert(sizeof(::System::Threading::SendOrPostCallback*) == 0x8);
    // private readonly System.Threading.SendOrPostCallback progressReporter
    // Size: 0x8
    // Offset: 0x48
    ::System::Threading::SendOrPostCallback* progressReporter;
    // Field size check
    static_assert(sizeof(::System::Threading::SendOrPostCallback*) == 0x8);
    public:
    // Get static field: static private readonly System.Object doWorkKey
    static ::Il2CppObject* _get_doWorkKey();
    // Set static field: static private readonly System.Object doWorkKey
    static void _set_doWorkKey(::Il2CppObject* value);
    // Get static field: static private readonly System.Object runWorkerCompletedKey
    static ::Il2CppObject* _get_runWorkerCompletedKey();
    // Set static field: static private readonly System.Object runWorkerCompletedKey
    static void _set_runWorkerCompletedKey(::Il2CppObject* value);
    // Get static field: static private readonly System.Object progressChangedKey
    static ::Il2CppObject* _get_progressChangedKey();
    // Set static field: static private readonly System.Object progressChangedKey
    static void _set_progressChangedKey(::Il2CppObject* value);
    // Get instance field reference: private System.Boolean canCancelWorker
    [[deprecated("Use field access instead!")]] bool& dyn_canCancelWorker();
    // Get instance field reference: private System.Boolean workerReportsProgress
    [[deprecated("Use field access instead!")]] bool& dyn_workerReportsProgress();
    // Get instance field reference: private System.Boolean cancellationPending
    [[deprecated("Use field access instead!")]] bool& dyn_cancellationPending();
    // Get instance field reference: private System.Boolean isRunning
    [[deprecated("Use field access instead!")]] bool& dyn_isRunning();
    // Get instance field reference: private System.ComponentModel.AsyncOperation asyncOperation
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::AsyncOperation*& dyn_asyncOperation();
    // Get instance field reference: private readonly System.ComponentModel.BackgroundWorker/System.ComponentModel.WorkerThreadStartDelegate threadStart
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::BackgroundWorker::WorkerThreadStartDelegate*& dyn_threadStart();
    // Get instance field reference: private readonly System.Threading.SendOrPostCallback operationCompleted
    [[deprecated("Use field access instead!")]] ::System::Threading::SendOrPostCallback*& dyn_operationCompleted();
    // Get instance field reference: private readonly System.Threading.SendOrPostCallback progressReporter
    [[deprecated("Use field access instead!")]] ::System::Threading::SendOrPostCallback*& dyn_progressReporter();
    // public System.Boolean get_CancellationPending()
    // Offset: 0x11D556C
    bool get_CancellationPending();
    // public System.Boolean get_IsBusy()
    // Offset: 0x11D57AC
    bool get_IsBusy();
    // public System.Boolean get_WorkerReportsProgress()
    // Offset: 0x11D5F4C
    bool get_WorkerReportsProgress();
    // public System.Void set_WorkerReportsProgress(System.Boolean value)
    // Offset: 0x11D5F54
    void set_WorkerReportsProgress(bool value);
    // public System.Boolean get_WorkerSupportsCancellation()
    // Offset: 0x11D5F60
    bool get_WorkerSupportsCancellation();
    // public System.Void set_WorkerSupportsCancellation(System.Boolean value)
    // Offset: 0x11D5F68
    void set_WorkerSupportsCancellation(bool value);
    // public System.Void add_DoWork(System.ComponentModel.DoWorkEventHandler value)
    // Offset: 0x11D5604
    void add_DoWork(::System::ComponentModel::DoWorkEventHandler* value);
    // public System.Void remove_DoWork(System.ComponentModel.DoWorkEventHandler value)
    // Offset: 0x11D5710
    void remove_DoWork(::System::ComponentModel::DoWorkEventHandler* value);
    // public System.Void add_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler value)
    // Offset: 0x11D5A3C
    void add_ProgressChanged(::System::ComponentModel::ProgressChangedEventHandler* value);
    // public System.Void remove_ProgressChanged(System.ComponentModel.ProgressChangedEventHandler value)
    // Offset: 0x11D5AD8
    void remove_ProgressChanged(::System::ComponentModel::ProgressChangedEventHandler* value);
    // public System.Void add_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler value)
    // Offset: 0x11D5E14
    void add_RunWorkerCompleted(::System::ComponentModel::RunWorkerCompletedEventHandler* value);
    // public System.Void remove_RunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventHandler value)
    // Offset: 0x11D5EB0
    void remove_RunWorkerCompleted(::System::ComponentModel::RunWorkerCompletedEventHandler* value);
    // private System.Void AsyncOperationCompleted(System.Object arg)
    // Offset: 0x11D54C8
    void AsyncOperationCompleted(::Il2CppObject* arg);
    // public System.Void CancelAsync()
    // Offset: 0x11D5574
    void CancelAsync();
    // protected System.Void OnDoWork(System.ComponentModel.DoWorkEventArgs e)
    // Offset: 0x11D57B4
    void OnDoWork(::System::ComponentModel::DoWorkEventArgs* e);
    // protected System.Void OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs e)
    // Offset: 0x11D588C
    void OnRunWorkerCompleted(::System::ComponentModel::RunWorkerCompletedEventArgs* e);
    // protected System.Void OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs e)
    // Offset: 0x11D5964
    void OnProgressChanged(::System::ComponentModel::ProgressChangedEventArgs* e);
    // private System.Void ProgressReporter(System.Object arg)
    // Offset: 0x11D5B74
    void ProgressReporter(::Il2CppObject* arg);
    // public System.Void ReportProgress(System.Int32 percentProgress)
    // Offset: 0x11D5C14
    void ReportProgress(int percentProgress);
    // public System.Void ReportProgress(System.Int32 percentProgress, System.Object userState)
    // Offset: 0x11D5C1C
    void ReportProgress(int percentProgress, ::Il2CppObject* userState);
    // public System.Void RunWorkerAsync()
    // Offset: 0x11D5D0C
    void RunWorkerAsync();
    // public System.Void RunWorkerAsync(System.Object argument)
    // Offset: 0x11D5D14
    void RunWorkerAsync(::Il2CppObject* argument);
    // private System.Void WorkerThreadStart(System.Object argument)
    // Offset: 0x11D5F74
    void WorkerThreadStart(::Il2CppObject* argument);
    // public System.Void .ctor()
    // Offset: 0x11D53B8
    // Implemented from: System.ComponentModel.Component
    // Base method: System.Void Component::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BackgroundWorker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::BackgroundWorker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BackgroundWorker*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x11D60F4
    // Implemented from: System.ComponentModel.Component
    // Base method: System.Void Component::.cctor()
    static void _cctor();
  }; // System.ComponentModel.BackgroundWorker
  #pragma pack(pop)
  static check_size<sizeof(BackgroundWorker), 72 + sizeof(::System::Threading::SendOrPostCallback*)> __System_ComponentModel_BackgroundWorkerSizeCheck;
  static_assert(sizeof(BackgroundWorker) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::get_CancellationPending
// Il2CppName: get_CancellationPending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::get_CancellationPending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "get_CancellationPending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::get_IsBusy
// Il2CppName: get_IsBusy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::get_IsBusy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "get_IsBusy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::get_WorkerReportsProgress
// Il2CppName: get_WorkerReportsProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::get_WorkerReportsProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "get_WorkerReportsProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::set_WorkerReportsProgress
// Il2CppName: set_WorkerReportsProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(bool)>(&System::ComponentModel::BackgroundWorker::set_WorkerReportsProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "set_WorkerReportsProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::get_WorkerSupportsCancellation
// Il2CppName: get_WorkerSupportsCancellation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::get_WorkerSupportsCancellation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "get_WorkerSupportsCancellation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::set_WorkerSupportsCancellation
// Il2CppName: set_WorkerSupportsCancellation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(bool)>(&System::ComponentModel::BackgroundWorker::set_WorkerSupportsCancellation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "set_WorkerSupportsCancellation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::add_DoWork
// Il2CppName: add_DoWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::DoWorkEventHandler*)>(&System::ComponentModel::BackgroundWorker::add_DoWork)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "DoWorkEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "add_DoWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::remove_DoWork
// Il2CppName: remove_DoWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::DoWorkEventHandler*)>(&System::ComponentModel::BackgroundWorker::remove_DoWork)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "DoWorkEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "remove_DoWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::add_ProgressChanged
// Il2CppName: add_ProgressChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::ProgressChangedEventHandler*)>(&System::ComponentModel::BackgroundWorker::add_ProgressChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ProgressChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "add_ProgressChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::remove_ProgressChanged
// Il2CppName: remove_ProgressChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::ProgressChangedEventHandler*)>(&System::ComponentModel::BackgroundWorker::remove_ProgressChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ProgressChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "remove_ProgressChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::add_RunWorkerCompleted
// Il2CppName: add_RunWorkerCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::RunWorkerCompletedEventHandler*)>(&System::ComponentModel::BackgroundWorker::add_RunWorkerCompleted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "RunWorkerCompletedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "add_RunWorkerCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::remove_RunWorkerCompleted
// Il2CppName: remove_RunWorkerCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::RunWorkerCompletedEventHandler*)>(&System::ComponentModel::BackgroundWorker::remove_RunWorkerCompleted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "RunWorkerCompletedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "remove_RunWorkerCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::AsyncOperationCompleted
// Il2CppName: AsyncOperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::Il2CppObject*)>(&System::ComponentModel::BackgroundWorker::AsyncOperationCompleted)> {
  static const MethodInfo* get() {
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "AsyncOperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::CancelAsync
// Il2CppName: CancelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::CancelAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "CancelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::OnDoWork
// Il2CppName: OnDoWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::DoWorkEventArgs*)>(&System::ComponentModel::BackgroundWorker::OnDoWork)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "DoWorkEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "OnDoWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::OnRunWorkerCompleted
// Il2CppName: OnRunWorkerCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::RunWorkerCompletedEventArgs*)>(&System::ComponentModel::BackgroundWorker::OnRunWorkerCompleted)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "RunWorkerCompletedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "OnRunWorkerCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::OnProgressChanged
// Il2CppName: OnProgressChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::System::ComponentModel::ProgressChangedEventArgs*)>(&System::ComponentModel::BackgroundWorker::OnProgressChanged)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ProgressChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "OnProgressChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::ProgressReporter
// Il2CppName: ProgressReporter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::Il2CppObject*)>(&System::ComponentModel::BackgroundWorker::ProgressReporter)> {
  static const MethodInfo* get() {
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "ProgressReporter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::ReportProgress
// Il2CppName: ReportProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(int)>(&System::ComponentModel::BackgroundWorker::ReportProgress)> {
  static const MethodInfo* get() {
    static auto* percentProgress = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "ReportProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percentProgress});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::ReportProgress
// Il2CppName: ReportProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(int, ::Il2CppObject*)>(&System::ComponentModel::BackgroundWorker::ReportProgress)> {
  static const MethodInfo* get() {
    static auto* percentProgress = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* userState = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "ReportProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percentProgress, userState});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::RunWorkerAsync
// Il2CppName: RunWorkerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)()>(&System::ComponentModel::BackgroundWorker::RunWorkerAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "RunWorkerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::RunWorkerAsync
// Il2CppName: RunWorkerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::Il2CppObject*)>(&System::ComponentModel::BackgroundWorker::RunWorkerAsync)> {
  static const MethodInfo* get() {
    static auto* argument = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "RunWorkerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argument});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::WorkerThreadStart
// Il2CppName: WorkerThreadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::ComponentModel::BackgroundWorker::*)(::Il2CppObject*)>(&System::ComponentModel::BackgroundWorker::WorkerThreadStart)> {
  static const MethodInfo* get() {
    static auto* argument = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), "WorkerThreadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argument});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::BackgroundWorker::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::ComponentModel::BackgroundWorker::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::BackgroundWorker*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
