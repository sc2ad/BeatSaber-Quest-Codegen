// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Text.RegularExpressions.RegexOptions
#include "System/Text/RegularExpressions/RegexOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexNode
  class RegexNode;
  // Forward declaring type: RegexTree
  class RegexTree;
  // Forward declaring type: RegexReplacement
  class RegexReplacement;
  // Forward declaring type: RegexCharClass
  class RegexCharClass;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArgumentException
  class ArgumentException;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexParser
  class RegexParser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Text::RegularExpressions::RegexParser);
DEFINE_IL2CPP_ARG_TYPE(::System::Text::RegularExpressions::RegexParser*, "System.Text.RegularExpressions", "RegexParser");
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.RegexParser
  // [TokenAttribute] Offset: FFFFFFFF
  class RegexParser : public ::Il2CppObject {
    public:
    public:
    // System.Text.RegularExpressions.RegexNode _stack
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::RegularExpressions::RegexNode* stack;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _group
    // Size: 0x8
    // Offset: 0x18
    ::System::Text::RegularExpressions::RegexNode* group;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _alternation
    // Size: 0x8
    // Offset: 0x20
    ::System::Text::RegularExpressions::RegexNode* alternation;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _concatenation
    // Size: 0x8
    // Offset: 0x28
    ::System::Text::RegularExpressions::RegexNode* concatenation;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _unit
    // Size: 0x8
    // Offset: 0x30
    ::System::Text::RegularExpressions::RegexNode* unit;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.String _pattern
    // Size: 0x8
    // Offset: 0x38
    ::StringW pattern;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Int32 _currentPos
    // Size: 0x4
    // Offset: 0x40
    int currentPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentPos and: culture
    char __padding6[0x4] = {};
    // System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0x48
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // System.Int32 _autocap
    // Size: 0x4
    // Offset: 0x50
    int autocap;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _capcount
    // Size: 0x4
    // Offset: 0x54
    int capcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _captop
    // Size: 0x4
    // Offset: 0x58
    int captop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _capsize
    // Size: 0x4
    // Offset: 0x5C
    int capsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Collections.Hashtable _caps
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Hashtable* caps;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // System.Collections.Hashtable _capnames
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Hashtable* capnames;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // System.Int32[] _capnumlist
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<int> capnumlist;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Collections.Generic.List`1<System.String> _capnamelist
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::StringW>* capnamelist;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // System.Text.RegularExpressions.RegexOptions _options
    // Size: 0x4
    // Offset: 0x80
    ::System::Text::RegularExpressions::RegexOptions options;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::RegexOptions) == 0x4);
    // Padding between fields: options and: optionsStack
    char __padding16[0x4] = {};
    // System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexOptions> _optionsStack
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexOptions>* optionsStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexOptions>*) == 0x8);
    // System.Boolean _ignoreNextParen
    // Size: 0x1
    // Offset: 0x90
    bool ignoreNextParen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static readonly System.Byte[] _category
    static ::ArrayW<uint8_t> _get__category();
    // Set static field: static readonly System.Byte[] _category
    static void _set__category(::ArrayW<uint8_t> value);
    // Get instance field reference: System.Text.RegularExpressions.RegexNode _stack
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn__stack();
    // Get instance field reference: System.Text.RegularExpressions.RegexNode _group
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn__group();
    // Get instance field reference: System.Text.RegularExpressions.RegexNode _alternation
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn__alternation();
    // Get instance field reference: System.Text.RegularExpressions.RegexNode _concatenation
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn__concatenation();
    // Get instance field reference: System.Text.RegularExpressions.RegexNode _unit
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexNode*& dyn__unit();
    // Get instance field reference: System.String _pattern
    [[deprecated("Use field access instead!")]] ::StringW& dyn__pattern();
    // Get instance field reference: System.Int32 _currentPos
    [[deprecated("Use field access instead!")]] int& dyn__currentPos();
    // Get instance field reference: System.Globalization.CultureInfo _culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn__culture();
    // Get instance field reference: System.Int32 _autocap
    [[deprecated("Use field access instead!")]] int& dyn__autocap();
    // Get instance field reference: System.Int32 _capcount
    [[deprecated("Use field access instead!")]] int& dyn__capcount();
    // Get instance field reference: System.Int32 _captop
    [[deprecated("Use field access instead!")]] int& dyn__captop();
    // Get instance field reference: System.Int32 _capsize
    [[deprecated("Use field access instead!")]] int& dyn__capsize();
    // Get instance field reference: System.Collections.Hashtable _caps
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__caps();
    // Get instance field reference: System.Collections.Hashtable _capnames
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__capnames();
    // Get instance field reference: System.Int32[] _capnumlist
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__capnumlist();
    // Get instance field reference: System.Collections.Generic.List`1<System.String> _capnamelist
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__capnamelist();
    // Get instance field reference: System.Text.RegularExpressions.RegexOptions _options
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::RegexOptions& dyn__options();
    // Get instance field reference: System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexOptions> _optionsStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Text::RegularExpressions::RegexOptions>*& dyn__optionsStack();
    // Get instance field reference: System.Boolean _ignoreNextParen
    [[deprecated("Use field access instead!")]] bool& dyn__ignoreNextParen();
    // private System.Void .ctor(System.Globalization.CultureInfo culture)
    // Offset: 0x1E7E240
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexParser* New_ctor(::System::Globalization::CultureInfo* culture) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Text::RegularExpressions::RegexParser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexParser*, creationType>(culture)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1E84044
    static void _cctor();
    // static System.Text.RegularExpressions.RegexTree Parse(System.String re, System.Text.RegularExpressions.RegexOptions op)
    // Offset: 0x1E7E0A8
    static ::System::Text::RegularExpressions::RegexTree* Parse(::StringW re, ::System::Text::RegularExpressions::RegexOptions op);
    // static System.Text.RegularExpressions.RegexReplacement ParseReplacement(System.String rep, System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames, System.Text.RegularExpressions.RegexOptions op)
    // Offset: 0x1E7EF44
    static ::System::Text::RegularExpressions::RegexReplacement* ParseReplacement(::StringW rep, ::System::Collections::Hashtable* caps, int capsize, ::System::Collections::Hashtable* capnames, ::System::Text::RegularExpressions::RegexOptions op);
    // static System.String Escape(System.String input)
    // Offset: 0x1E7F53C
    static ::StringW Escape(::StringW input);
    // System.Void SetPattern(System.String Re)
    // Offset: 0x1E7E2E4
    void SetPattern(::StringW Re);
    // System.Void Reset(System.Text.RegularExpressions.RegexOptions topopts)
    // Offset: 0x1E7E6A4
    void Reset(::System::Text::RegularExpressions::RegexOptions topopts);
    // System.Text.RegularExpressions.RegexNode ScanRegex()
    // Offset: 0x1E7E734
    ::System::Text::RegularExpressions::RegexNode* ScanRegex();
    // System.Text.RegularExpressions.RegexNode ScanReplacement()
    // Offset: 0x1E7F0B4
    ::System::Text::RegularExpressions::RegexNode* ScanReplacement();
    // System.Text.RegularExpressions.RegexCharClass ScanCharClass(System.Boolean caseInsensitive)
    // Offset: 0x1E80320
    ::System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive);
    // System.Text.RegularExpressions.RegexCharClass ScanCharClass(System.Boolean caseInsensitive, System.Boolean scanOnly)
    // Offset: 0x1E81FC4
    ::System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive, bool scanOnly);
    // System.Text.RegularExpressions.RegexNode ScanGroupOpen()
    // Offset: 0x1E80408
    ::System::Text::RegularExpressions::RegexNode* ScanGroupOpen();
    // System.Void ScanBlank()
    // Offset: 0x1E7F8C0
    void ScanBlank();
    // System.Text.RegularExpressions.RegexNode ScanBackslash()
    // Offset: 0x1E813C8
    ::System::Text::RegularExpressions::RegexNode* ScanBackslash();
    // System.Text.RegularExpressions.RegexNode ScanBasicBackslash()
    // Offset: 0x1E82E20
    ::System::Text::RegularExpressions::RegexNode* ScanBasicBackslash();
    // System.Text.RegularExpressions.RegexNode ScanDollar()
    // Offset: 0x1E81BC0
    ::System::Text::RegularExpressions::RegexNode* ScanDollar();
    // System.String ScanCapname()
    // Offset: 0x1E8295C
    ::StringW ScanCapname();
    // System.Char ScanOctal()
    // Offset: 0x1E83450
    ::Il2CppChar ScanOctal();
    // System.Int32 ScanDecimal()
    // Offset: 0x1E81A88
    int ScanDecimal();
    // System.Char ScanHex(System.Int32 c)
    // Offset: 0x1E83510
    ::Il2CppChar ScanHex(int c);
    // static System.Int32 HexDigit(System.Char ch)
    // Offset: 0x1E8365C
    static int HexDigit(::Il2CppChar ch);
    // System.Char ScanControl()
    // Offset: 0x1E83694
    ::Il2CppChar ScanControl();
    // System.Boolean IsOnlyTopOption(System.Text.RegularExpressions.RegexOptions option)
    // Offset: 0x1E8375C
    bool IsOnlyTopOption(::System::Text::RegularExpressions::RegexOptions option);
    // System.Void ScanOptions()
    // Offset: 0x1E82BC8
    void ScanOptions();
    // System.Char ScanCharEscape()
    // Offset: 0x1E827A0
    ::Il2CppChar ScanCharEscape();
    // System.String ParseProperty()
    // Offset: 0x1E82624
    ::StringW ParseProperty();
    // System.Int32 TypeFromCode(System.Char ch)
    // Offset: 0x1E82D8C
    int TypeFromCode(::Il2CppChar ch);
    // static System.Text.RegularExpressions.RegexOptions OptionFromCode(System.Char ch)
    // Offset: 0x1E83784
    static ::System::Text::RegularExpressions::RegexOptions OptionFromCode(::Il2CppChar ch);
    // System.Void CountCaptures()
    // Offset: 0x1E7E350
    void CountCaptures();
    // System.Void NoteCaptureSlot(System.Int32 i, System.Int32 pos)
    // Offset: 0x1E837E4
    void NoteCaptureSlot(int i, int pos);
    // System.Void NoteCaptureName(System.String name, System.Int32 pos)
    // Offset: 0x1E8394C
    void NoteCaptureName(::StringW name, int pos);
    // System.Void NoteCaptures(System.Collections.Hashtable caps, System.Int32 capsize, System.Collections.Hashtable capnames)
    // Offset: 0x1E7F0A8
    void NoteCaptures(::System::Collections::Hashtable* caps, int capsize, ::System::Collections::Hashtable* capnames);
    // System.Void AssignNameSlots()
    // Offset: 0x1E83A70
    void AssignNameSlots();
    // System.Int32 CaptureSlotFromName(System.String capname)
    // Offset: 0x1E82B2C
    int CaptureSlotFromName(::StringW capname);
    // System.Boolean IsCaptureSlot(System.Int32 i)
    // Offset: 0x1E82A6C
    bool IsCaptureSlot(int i);
    // System.Boolean IsCaptureName(System.String capname)
    // Offset: 0x1E82B10
    bool IsCaptureName(::StringW capname);
    // System.Boolean UseOptionN()
    // Offset: 0x1E82A60
    bool UseOptionN();
    // System.Boolean UseOptionI()
    // Offset: 0x1E80314
    bool UseOptionI();
    // System.Boolean UseOptionM()
    // Offset: 0x1E818C8
    bool UseOptionM();
    // System.Boolean UseOptionS()
    // Offset: 0x1E8194C
    bool UseOptionS();
    // System.Boolean UseOptionX()
    // Offset: 0x1E7FBBC
    bool UseOptionX();
    // System.Boolean UseOptionE()
    // Offset: 0x1E82618
    bool UseOptionE();
    // static System.Boolean IsSpecial(System.Char ch)
    // Offset: 0x1E7FE98
    static bool IsSpecial(::Il2CppChar ch);
    // static System.Boolean IsStopperX(System.Char ch)
    // Offset: 0x1E7FC20
    static bool IsStopperX(::Il2CppChar ch);
    // static System.Boolean IsQuantifier(System.Char ch)
    // Offset: 0x1E7FF4C
    static bool IsQuantifier(::Il2CppChar ch);
    // System.Boolean IsTrueQuantifier()
    // Offset: 0x1E7FCD4
    bool IsTrueQuantifier();
    // static System.Boolean IsSpace(System.Char ch)
    // Offset: 0x1E82CD8
    static bool IsSpace(::Il2CppChar ch);
    // static System.Boolean IsMetachar(System.Char ch)
    // Offset: 0x1E7F764
    static bool IsMetachar(::Il2CppChar ch);
    // System.Void AddConcatenate(System.Int32 pos, System.Int32 cch, System.Boolean isReplacement)
    // Offset: 0x1E80000
    void AddConcatenate(int pos, int cch, bool isReplacement);
    // System.Void PushGroup()
    // Offset: 0x1E80E70
    void PushGroup();
    // System.Void PopGroup()
    // Offset: 0x1E81234
    void PopGroup();
    // System.Boolean EmptyStack()
    // Offset: 0x1E80F94
    bool EmptyStack();
    // System.Void StartGroup(System.Text.RegularExpressions.RegexNode openGroup)
    // Offset: 0x1E7F818
    void StartGroup(::System::Text::RegularExpressions::RegexNode* openGroup);
    // System.Void AddAlternate()
    // Offset: 0x1E80EBC
    void AddAlternate();
    // System.Void AddConcatenate()
    // Offset: 0x1E81A28
    void AddConcatenate();
    // System.Void AddConcatenate(System.Boolean lazy, System.Int32 min, System.Int32 max)
    // Offset: 0x1E81B78
    void AddConcatenate(bool lazy, int min, int max);
    // System.Text.RegularExpressions.RegexNode Unit()
    // Offset: 0x1E84024
    ::System::Text::RegularExpressions::RegexNode* Unit();
    // System.Void AddUnitOne(System.Char ch)
    // Offset: 0x1E80254
    void AddUnitOne(::Il2CppChar ch);
    // System.Void AddUnitNotone(System.Char ch)
    // Offset: 0x1E81958
    void AddUnitNotone(::Il2CppChar ch);
    // System.Void AddUnitSet(System.String cc)
    // Offset: 0x1E8032C
    void AddUnitSet(::StringW cc);
    // System.Void AddUnitNode(System.Text.RegularExpressions.RegexNode node)
    // Offset: 0x1E8402C
    void AddUnitNode(::System::Text::RegularExpressions::RegexNode* node);
    // System.Void AddUnitType(System.Int32 type)
    // Offset: 0x1E818D4
    void AddUnitType(int type);
    // System.Void AddGroup()
    // Offset: 0x1E810BC
    void AddGroup();
    // System.Void PushOptions()
    // Offset: 0x1E803AC
    void PushOptions();
    // System.Void PopOptions()
    // Offset: 0x1E81330
    void PopOptions();
    // System.Boolean EmptyOptionsStack()
    // Offset: 0x1E838F4
    bool EmptyOptionsStack();
    // System.Void PopKeepOptions()
    // Offset: 0x1E80E10
    void PopKeepOptions();
    // System.ArgumentException MakeException(System.String message)
    // Offset: 0x1E80FA4
    ::System::ArgumentException* MakeException(::StringW message);
    // System.Int32 Textpos()
    // Offset: 0x1E84034
    int Textpos();
    // System.Void Textto(System.Int32 pos)
    // Offset: 0x1E8403C
    void Textto(int pos);
    // System.Char MoveRightGetChar()
    // Offset: 0x1E81A5C
    ::Il2CppChar MoveRightGetChar();
    // System.Void MoveRight()
    // Offset: 0x1E7FBC8
    void MoveRight();
    // System.Void MoveRight(System.Int32 i)
    // Offset: 0x1E82A50
    void MoveRight(int i);
    // System.Void MoveLeft()
    // Offset: 0x1E81A18
    void MoveLeft();
    // System.Char CharAt(System.Int32 i)
    // Offset: 0x1E80238
    ::Il2CppChar CharAt(int i);
    // System.Char RightChar()
    // Offset: 0x1E7FBFC
    ::Il2CppChar RightChar();
    // System.Char RightChar(System.Int32 i)
    // Offset: 0x1E82A28
    ::Il2CppChar RightChar(int i);
    // System.Int32 CharsRight()
    // Offset: 0x1E7FBD8
    int CharsRight();
  }; // System.Text.RegularExpressions.RegexParser
  #pragma pack(pop)
  static check_size<sizeof(RegexParser), 144 + sizeof(bool)> __System_Text_RegularExpressions_RegexParserSizeCheck;
  static_assert(sizeof(RegexParser) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Text::RegularExpressions::RegexParser::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexTree* (*)(::StringW, ::System::Text::RegularExpressions::RegexOptions)>(&System::Text::RegularExpressions::RegexParser::Parse)> {
  static const MethodInfo* get() {
    static auto* re = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{re, op});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ParseReplacement
// Il2CppName: ParseReplacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexReplacement* (*)(::StringW, ::System::Collections::Hashtable*, int, ::System::Collections::Hashtable*, ::System::Text::RegularExpressions::RegexOptions)>(&System::Text::RegularExpressions::RegexParser::ParseReplacement)> {
  static const MethodInfo* get() {
    static auto* rep = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* caps = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* capsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* capnames = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ParseReplacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rep, caps, capsize, capnames, op});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Escape
// Il2CppName: Escape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::Escape)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Escape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::SetPattern
// Il2CppName: SetPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::SetPattern)> {
  static const MethodInfo* get() {
    static auto* Re = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "SetPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Re});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::System::Text::RegularExpressions::RegexOptions)>(&System::Text::RegularExpressions::RegexParser::Reset)> {
  static const MethodInfo* get() {
    static auto* topopts = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topopts});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanRegex
// Il2CppName: ScanRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanRegex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanReplacement
// Il2CppName: ScanReplacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanReplacement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanReplacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharClass
// Il2CppName: ScanCharClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexCharClass* (System::Text::RegularExpressions::RegexParser::*)(bool)>(&System::Text::RegularExpressions::RegexParser::ScanCharClass)> {
  static const MethodInfo* get() {
    static auto* caseInsensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanCharClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caseInsensitive});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharClass
// Il2CppName: ScanCharClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexCharClass* (System::Text::RegularExpressions::RegexParser::*)(bool, bool)>(&System::Text::RegularExpressions::RegexParser::ScanCharClass)> {
  static const MethodInfo* get() {
    static auto* caseInsensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* scanOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanCharClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caseInsensitive, scanOnly});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanGroupOpen
// Il2CppName: ScanGroupOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanGroupOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanGroupOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBlank
// Il2CppName: ScanBlank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanBlank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanBlank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBackslash
// Il2CppName: ScanBackslash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanBackslash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanBackslash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBasicBackslash
// Il2CppName: ScanBasicBackslash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanBasicBackslash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanBasicBackslash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanDollar
// Il2CppName: ScanDollar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanDollar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanDollar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCapname
// Il2CppName: ScanCapname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanCapname)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanCapname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanOctal
// Il2CppName: ScanOctal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanOctal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanOctal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanDecimal
// Il2CppName: ScanDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanHex
// Il2CppName: ScanHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::ScanHex)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::HexDigit
// Il2CppName: HexDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::HexDigit)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "HexDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanControl
// Il2CppName: ScanControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanControl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsOnlyTopOption
// Il2CppName: IsOnlyTopOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)(::System::Text::RegularExpressions::RegexOptions)>(&System::Text::RegularExpressions::RegexParser::IsOnlyTopOption)> {
  static const MethodInfo* get() {
    static auto* option = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsOnlyTopOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{option});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanOptions
// Il2CppName: ScanOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharEscape
// Il2CppName: ScanCharEscape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ScanCharEscape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ScanCharEscape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ParseProperty
// Il2CppName: ParseProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::ParseProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "ParseProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::TypeFromCode
// Il2CppName: TypeFromCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexParser::*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::TypeFromCode)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "TypeFromCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::OptionFromCode
// Il2CppName: OptionFromCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexOptions (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::OptionFromCode)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "OptionFromCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CountCaptures
// Il2CppName: CountCaptures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::CountCaptures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "CountCaptures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::NoteCaptureSlot
// Il2CppName: NoteCaptureSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(int, int)>(&System::Text::RegularExpressions::RegexParser::NoteCaptureSlot)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "NoteCaptureSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, pos});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::NoteCaptureName
// Il2CppName: NoteCaptureName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::StringW, int)>(&System::Text::RegularExpressions::RegexParser::NoteCaptureName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "NoteCaptureName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, pos});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::NoteCaptures
// Il2CppName: NoteCaptures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::System::Collections::Hashtable*, int, ::System::Collections::Hashtable*)>(&System::Text::RegularExpressions::RegexParser::NoteCaptures)> {
  static const MethodInfo* get() {
    static auto* caps = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* capsize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* capnames = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "NoteCaptures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caps, capsize, capnames});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AssignNameSlots
// Il2CppName: AssignNameSlots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::AssignNameSlots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AssignNameSlots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CaptureSlotFromName
// Il2CppName: CaptureSlotFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexParser::*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::CaptureSlotFromName)> {
  static const MethodInfo* get() {
    static auto* capname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "CaptureSlotFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capname});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsCaptureSlot
// Il2CppName: IsCaptureSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::IsCaptureSlot)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsCaptureSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsCaptureName
// Il2CppName: IsCaptureName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::IsCaptureName)> {
  static const MethodInfo* get() {
    static auto* capname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsCaptureName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capname});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionN
// Il2CppName: UseOptionN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionI
// Il2CppName: UseOptionI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionM
// Il2CppName: UseOptionM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionS
// Il2CppName: UseOptionS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionX
// Il2CppName: UseOptionX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionE
// Il2CppName: UseOptionE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::UseOptionE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "UseOptionE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsSpecial
// Il2CppName: IsSpecial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::IsSpecial)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsSpecial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsStopperX
// Il2CppName: IsStopperX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::IsStopperX)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsStopperX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsQuantifier
// Il2CppName: IsQuantifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::IsQuantifier)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsQuantifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsTrueQuantifier
// Il2CppName: IsTrueQuantifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::IsTrueQuantifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsTrueQuantifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsSpace
// Il2CppName: IsSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::IsSpace)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsMetachar
// Il2CppName: IsMetachar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::IsMetachar)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "IsMetachar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(int, int, bool)>(&System::Text::RegularExpressions::RegexParser::AddConcatenate)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cch = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isReplacement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddConcatenate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, cch, isReplacement});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PushGroup
// Il2CppName: PushGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::PushGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "PushGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopGroup
// Il2CppName: PopGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::PopGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "PopGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::EmptyStack
// Il2CppName: EmptyStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::EmptyStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "EmptyStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::StartGroup
// Il2CppName: StartGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::System::Text::RegularExpressions::RegexNode*)>(&System::Text::RegularExpressions::RegexParser::StartGroup)> {
  static const MethodInfo* get() {
    static auto* openGroup = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "StartGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openGroup});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddAlternate
// Il2CppName: AddAlternate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::AddAlternate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddAlternate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::AddConcatenate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddConcatenate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(bool, int, int)>(&System::Text::RegularExpressions::RegexParser::AddConcatenate)> {
  static const MethodInfo* get() {
    static auto* lazy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddConcatenate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lazy, min, max});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Unit
// Il2CppName: Unit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::RegularExpressions::RegexNode* (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::Unit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Unit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitOne
// Il2CppName: AddUnitOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::AddUnitOne)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddUnitOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitNotone
// Il2CppName: AddUnitNotone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::Il2CppChar)>(&System::Text::RegularExpressions::RegexParser::AddUnitNotone)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddUnitNotone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitSet
// Il2CppName: AddUnitSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::AddUnitSet)> {
  static const MethodInfo* get() {
    static auto* cc = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddUnitSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cc});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitNode
// Il2CppName: AddUnitNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(::System::Text::RegularExpressions::RegexNode*)>(&System::Text::RegularExpressions::RegexParser::AddUnitNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "RegexNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddUnitNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitType
// Il2CppName: AddUnitType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::AddUnitType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddUnitType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddGroup
// Il2CppName: AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::AddGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PushOptions
// Il2CppName: PushOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::PushOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "PushOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopOptions
// Il2CppName: PopOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::PopOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "PopOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::EmptyOptionsStack
// Il2CppName: EmptyOptionsStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::EmptyOptionsStack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "EmptyOptionsStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopKeepOptions
// Il2CppName: PopKeepOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::PopKeepOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "PopKeepOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MakeException
// Il2CppName: MakeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArgumentException* (System::Text::RegularExpressions::RegexParser::*)(::StringW)>(&System::Text::RegularExpressions::RegexParser::MakeException)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "MakeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Textpos
// Il2CppName: Textpos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::Textpos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Textpos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Textto
// Il2CppName: Textto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::Textto)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "Textto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRightGetChar
// Il2CppName: MoveRightGetChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::MoveRightGetChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "MoveRightGetChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRight
// Il2CppName: MoveRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::MoveRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "MoveRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRight
// Il2CppName: MoveRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::MoveRight)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "MoveRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveLeft
// Il2CppName: MoveLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::MoveLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "MoveLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CharAt
// Il2CppName: CharAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::CharAt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "CharAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::RightChar
// Il2CppName: RightChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::RightChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "RightChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::RightChar
// Il2CppName: RightChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Text::RegularExpressions::RegexParser::*)(int)>(&System::Text::RegularExpressions::RegexParser::RightChar)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "RightChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CharsRight
// Il2CppName: CharsRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::RegexParser::*)()>(&System::Text::RegularExpressions::RegexParser::CharsRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::RegexParser*), "CharsRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
