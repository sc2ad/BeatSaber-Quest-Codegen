// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: EventArgs
  class EventArgs;
  // Forward declaring type: AggregateException
  class AggregateException;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskExceptionHolder
  class TaskExceptionHolder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::Tasks::TaskExceptionHolder);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::Tasks::TaskExceptionHolder*, "System.Threading.Tasks", "TaskExceptionHolder");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.TaskExceptionHolder
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskExceptionHolder : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Threading.Tasks.Task m_task
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::Tasks::Task* m_task;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    // private System.Collections.Generic.List`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* m_faultExceptions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*) == 0x8);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException
    // Size: 0x8
    // Offset: 0x20
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* m_cancellationException;
    // Field size check
    static_assert(sizeof(::System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    // private System.Boolean m_isHandled
    // Size: 0x1
    // Offset: 0x28
    bool m_isHandled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Boolean s_failFastOnUnobservedException
    static bool _get_s_failFastOnUnobservedException();
    // Set static field: static private readonly System.Boolean s_failFastOnUnobservedException
    static void _set_s_failFastOnUnobservedException(bool value);
    // Get static field: static private System.Boolean s_domainUnloadStarted
    static bool _get_s_domainUnloadStarted();
    // Set static field: static private System.Boolean s_domainUnloadStarted
    static void _set_s_domainUnloadStarted(bool value);
    // Get static field: static private System.EventHandler s_adUnloadEventHandler
    static ::System::EventHandler* _get_s_adUnloadEventHandler();
    // Set static field: static private System.EventHandler s_adUnloadEventHandler
    static void _set_s_adUnloadEventHandler(::System::EventHandler* value);
    // Get instance field reference: private readonly System.Threading.Tasks.Task m_task
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn_m_task();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*& dyn_m_faultExceptions();
    // Get instance field reference: private System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException
    [[deprecated("Use field access instead!")]] ::System::Runtime::ExceptionServices::ExceptionDispatchInfo*& dyn_m_cancellationException();
    // Get instance field reference: private System.Boolean m_isHandled
    [[deprecated("Use field access instead!")]] bool& dyn_m_isHandled();
    // System.Boolean get_ContainsFaultList()
    // Offset: 0x1DEE0F0
    bool get_ContainsFaultList();
    // System.Void .ctor(System.Threading.Tasks.Task task)
    // Offset: 0x1DEE908
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskExceptionHolder* New_ctor(::System::Threading::Tasks::Task* task) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::Tasks::TaskExceptionHolder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskExceptionHolder*, creationType>(task)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1DF50A8
    static void _cctor();
    // static private System.Boolean ShouldFailFastOnUnobservedException()
    // Offset: 0x1DF4210
    static bool ShouldFailFastOnUnobservedException();
    // static private System.Void EnsureADUnloadCallbackRegistered()
    // Offset: 0x1DF40EC
    static void EnsureADUnloadCallbackRegistered();
    // static private System.Void AppDomainUnloadCallback(System.Object sender, System.EventArgs e)
    // Offset: 0x1DF4218
    static void AppDomainUnloadCallback(::Il2CppObject* sender, ::System::EventArgs* e);
    // System.Void Add(System.Object exceptionObject, System.Boolean representsCancellation)
    // Offset: 0x1DEE984
    void Add(::Il2CppObject* exceptionObject, bool representsCancellation);
    // private System.Void SetCancellationException(System.Object exceptionObject)
    // Offset: 0x1DF4A34
    void SetCancellationException(::Il2CppObject* exceptionObject);
    // private System.Void AddFaultException(System.Object exceptionObject)
    // Offset: 0x1DF4AF0
    void AddFaultException(::Il2CppObject* exceptionObject);
    // private System.Void MarkAsUnhandled()
    // Offset: 0x1DF5020
    void MarkAsUnhandled();
    // System.Void MarkAsHandled(System.Boolean calledFromFinalizer)
    // Offset: 0x1DEE708
    void MarkAsHandled(bool calledFromFinalizer);
    // System.AggregateException CreateExceptionObject(System.Boolean calledFromFinalizer, System.Exception includeThisException)
    // Offset: 0x1DEEA30
    ::System::AggregateException* CreateExceptionObject(bool calledFromFinalizer, ::System::Exception* includeThisException);
    // System.Collections.ObjectModel.ReadOnlyCollection`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos()
    // Offset: 0x1DEECA0
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* GetExceptionDispatchInfos();
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo()
    // Offset: 0x1DF50A0
    ::System::Runtime::ExceptionServices::ExceptionDispatchInfo* GetCancellationExceptionDispatchInfo();
    // protected override System.Void Finalize()
    // Offset: 0x1DF4288
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Threading.Tasks.TaskExceptionHolder
  #pragma pack(pop)
  static check_size<sizeof(TaskExceptionHolder), 40 + sizeof(bool)> __System_Threading_Tasks_TaskExceptionHolderSizeCheck;
  static_assert(sizeof(TaskExceptionHolder) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList
// Il2CppName: get_ContainsFaultList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::Tasks::TaskExceptionHolder::*)()>(&System::Threading::Tasks::TaskExceptionHolder::get_ContainsFaultList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "get_ContainsFaultList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Tasks::TaskExceptionHolder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException
// Il2CppName: ShouldFailFastOnUnobservedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Threading::Tasks::TaskExceptionHolder::ShouldFailFastOnUnobservedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "ShouldFailFastOnUnobservedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered
// Il2CppName: EnsureADUnloadCallbackRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::Tasks::TaskExceptionHolder::EnsureADUnloadCallbackRegistered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "EnsureADUnloadCallbackRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback
// Il2CppName: AppDomainUnloadCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::System::EventArgs*)>(&System::Threading::Tasks::TaskExceptionHolder::AppDomainUnloadCallback)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "AppDomainUnloadCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)(::Il2CppObject*, bool)>(&System::Threading::Tasks::TaskExceptionHolder::Add)> {
  static const MethodInfo* get() {
    static auto* exceptionObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* representsCancellation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exceptionObject, representsCancellation});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::SetCancellationException
// Il2CppName: SetCancellationException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)(::Il2CppObject*)>(&System::Threading::Tasks::TaskExceptionHolder::SetCancellationException)> {
  static const MethodInfo* get() {
    static auto* exceptionObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "SetCancellationException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exceptionObject});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::AddFaultException
// Il2CppName: AddFaultException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)(::Il2CppObject*)>(&System::Threading::Tasks::TaskExceptionHolder::AddFaultException)> {
  static const MethodInfo* get() {
    static auto* exceptionObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "AddFaultException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exceptionObject});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled
// Il2CppName: MarkAsUnhandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)()>(&System::Threading::Tasks::TaskExceptionHolder::MarkAsUnhandled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "MarkAsUnhandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled
// Il2CppName: MarkAsHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)(bool)>(&System::Threading::Tasks::TaskExceptionHolder::MarkAsHandled)> {
  static const MethodInfo* get() {
    static auto* calledFromFinalizer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "MarkAsHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{calledFromFinalizer});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject
// Il2CppName: CreateExceptionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::AggregateException* (System::Threading::Tasks::TaskExceptionHolder::*)(bool, ::System::Exception*)>(&System::Threading::Tasks::TaskExceptionHolder::CreateExceptionObject)> {
  static const MethodInfo* get() {
    static auto* calledFromFinalizer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* includeThisException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "CreateExceptionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{calledFromFinalizer, includeThisException});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos
// Il2CppName: GetExceptionDispatchInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* (System::Threading::Tasks::TaskExceptionHolder::*)()>(&System::Threading::Tasks::TaskExceptionHolder::GetExceptionDispatchInfos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "GetExceptionDispatchInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo
// Il2CppName: GetCancellationExceptionDispatchInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::ExceptionServices::ExceptionDispatchInfo* (System::Threading::Tasks::TaskExceptionHolder::*)()>(&System::Threading::Tasks::TaskExceptionHolder::GetCancellationExceptionDispatchInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "GetCancellationExceptionDispatchInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::Tasks::TaskExceptionHolder::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::Tasks::TaskExceptionHolder::*)()>(&System::Threading::Tasks::TaskExceptionHolder::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::Tasks::TaskExceptionHolder*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
