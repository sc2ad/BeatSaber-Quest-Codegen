// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLock
  class ReaderWriterLock;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: LockQueue
  class LockQueue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::LockQueue);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::LockQueue*, "System.Threading", "LockQueue");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.LockQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class LockQueue : public ::Il2CppObject {
    public:
    public:
    // private System.Threading.ReaderWriterLock rwlock
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::ReaderWriterLock* rwlock;
    // Field size check
    static_assert(sizeof(::System::Threading::ReaderWriterLock*) == 0x8);
    // private System.Int32 lockCount
    // Size: 0x4
    // Offset: 0x18
    int lockCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Threading.ReaderWriterLock rwlock
    [[deprecated("Use field access instead!")]] ::System::Threading::ReaderWriterLock*& dyn_rwlock();
    // Get instance field reference: private System.Int32 lockCount
    [[deprecated("Use field access instead!")]] int& dyn_lockCount();
    // public System.Boolean get_IsEmpty()
    // Offset: 0x2242454
    bool get_IsEmpty();
    // public System.Void .ctor(System.Threading.ReaderWriterLock rwlock)
    // Offset: 0x22422C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LockQueue* New_ctor(::System::Threading::ReaderWriterLock* rwlock) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::LockQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LockQueue*, creationType>(rwlock)));
    }
    // public System.Boolean Wait(System.Int32 timeout)
    // Offset: 0x22422EC
    bool Wait(int timeout);
    // public System.Void Pulse()
    // Offset: 0x22424D8
    void Pulse();
  }; // System.Threading.LockQueue
  #pragma pack(pop)
  static check_size<sizeof(LockQueue), 24 + sizeof(int)> __System_Threading_LockQueueSizeCheck;
  static_assert(sizeof(LockQueue) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::LockQueue::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::LockQueue::*)()>(&System::Threading::LockQueue::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::LockQueue*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::LockQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::LockQueue::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::LockQueue::*)(int)>(&System::Threading::LockQueue::Wait)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::LockQueue*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Threading::LockQueue::Pulse
// Il2CppName: Pulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::LockQueue::*)()>(&System::Threading::LockQueue::Pulse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::LockQueue*), "Pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
