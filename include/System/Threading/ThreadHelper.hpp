// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Delegate
  class Delegate;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
  // Forward declaring type: ContextCallback
  class ContextCallback;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: ThreadHelper
  class ThreadHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::ThreadHelper);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::ThreadHelper*, "System.Threading", "ThreadHelper");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.ThreadHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class ThreadHelper : public ::Il2CppObject {
    public:
    public:
    // private System.Delegate _start
    // Size: 0x8
    // Offset: 0x10
    ::System::Delegate* start;
    // Field size check
    static_assert(sizeof(::System::Delegate*) == 0x8);
    // private System.Object _startArg
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* startArg;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Threading.ExecutionContext _executionContext
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::ExecutionContext* executionContext;
    // Field size check
    static_assert(sizeof(::System::Threading::ExecutionContext*) == 0x8);
    public:
    // Get static field: static System.Threading.ContextCallback _ccb
    static ::System::Threading::ContextCallback* _get__ccb();
    // Set static field: static System.Threading.ContextCallback _ccb
    static void _set__ccb(::System::Threading::ContextCallback* value);
    // Get instance field reference: private System.Delegate _start
    [[deprecated("Use field access instead!")]] ::System::Delegate*& dyn__start();
    // Get instance field reference: private System.Object _startArg
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__startArg();
    // Get instance field reference: private System.Threading.ExecutionContext _executionContext
    [[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext*& dyn__executionContext();
    // static private System.Void .cctor()
    // Offset: 0x1DF7B34
    static void _cctor();
    // System.Void .ctor(System.Delegate start)
    // Offset: 0x1DF7008
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadHelper* New_ctor(::System::Delegate* start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ThreadHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadHelper*, creationType>(start)));
    }
    // System.Void SetExecutionContextHelper(System.Threading.ExecutionContext ec)
    // Offset: 0x1DF7BB0
    void SetExecutionContextHelper(::System::Threading::ExecutionContext* ec);
    // static private System.Void ThreadStart_Context(System.Object state)
    // Offset: 0x1DF7BB8
    static void ThreadStart_Context(::Il2CppObject* state);
    // System.Void ThreadStart(System.Object obj)
    // Offset: 0x1DF7EA4
    void ThreadStart(::Il2CppObject* obj);
    // System.Void ThreadStart()
    // Offset: 0x1DF7F98
    void ThreadStart();
  }; // System.Threading.ThreadHelper
  #pragma pack(pop)
  static check_size<sizeof(ThreadHelper), 32 + sizeof(::System::Threading::ExecutionContext*)> __System_Threading_ThreadHelperSizeCheck;
  static_assert(sizeof(ThreadHelper) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::ThreadHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::ThreadHelper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ThreadHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ThreadHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ThreadHelper::SetExecutionContextHelper
// Il2CppName: SetExecutionContextHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ThreadHelper::*)(::System::Threading::ExecutionContext*)>(&System::Threading::ThreadHelper::SetExecutionContextHelper)> {
  static const MethodInfo* get() {
    static auto* ec = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ThreadHelper*), "SetExecutionContextHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ec});
  }
};
// Writing MetadataGetter for method: System::Threading::ThreadHelper::ThreadStart_Context
// Il2CppName: ThreadStart_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&System::Threading::ThreadHelper::ThreadStart_Context)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ThreadHelper*), "ThreadStart_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: System::Threading::ThreadHelper::ThreadStart
// Il2CppName: ThreadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ThreadHelper::*)(::Il2CppObject*)>(&System::Threading::ThreadHelper::ThreadStart)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ThreadHelper*), "ThreadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Threading::ThreadHelper::ThreadStart
// Il2CppName: ThreadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ThreadHelper::*)()>(&System::Threading::ThreadHelper::ThreadStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ThreadHelper*), "ThreadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
