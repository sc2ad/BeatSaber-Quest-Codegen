// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SynchronizationContext
  class SynchronizationContext;
  // Forward declaring type: IAsyncLocal
  class IAsyncLocal;
  // Forward declaring type: ContextCallback
  class ContextCallback;
  // Forward declaring type: ExecutionContextSwitcher
  struct ExecutionContextSwitcher;
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
}
// Forward declaring namespace: System::Runtime::Remoting::Messaging
namespace System::Runtime::Remoting::Messaging {
  // Forward declaring type: LogicalCallContext
  class LogicalCallContext;
  // Forward declaring type: IllogicalCallContext
  class IllogicalCallContext;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::ExecutionContext);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::ExecutionContext*, "System.Threading", "ExecutionContext");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.ExecutionContext
  // [TokenAttribute] Offset: FFFFFFFF
  class ExecutionContext : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: ::System::Threading::ExecutionContext::Flags
    struct Flags;
    // Nested type: ::System::Threading::ExecutionContext::Reader
    struct Reader;
    // Nested type: ::System::Threading::ExecutionContext::CaptureOptions
    struct CaptureOptions;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Threading.ExecutionContext/System.Threading.Flags
    // [TokenAttribute] Offset: FFFFFFFF
    struct Flags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Flags
      constexpr Flags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Threading.ExecutionContext/System.Threading.Flags None
      static constexpr const int None = 0;
      // Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags None
      static ::System::Threading::ExecutionContext::Flags _get_None();
      // Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags None
      static void _set_None(::System::Threading::ExecutionContext::Flags value);
      // static field const value: static public System.Threading.ExecutionContext/System.Threading.Flags IsNewCapture
      static constexpr const int IsNewCapture = 1;
      // Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsNewCapture
      static ::System::Threading::ExecutionContext::Flags _get_IsNewCapture();
      // Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsNewCapture
      static void _set_IsNewCapture(::System::Threading::ExecutionContext::Flags value);
      // static field const value: static public System.Threading.ExecutionContext/System.Threading.Flags IsFlowSuppressed
      static constexpr const int IsFlowSuppressed = 2;
      // Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsFlowSuppressed
      static ::System::Threading::ExecutionContext::Flags _get_IsFlowSuppressed();
      // Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsFlowSuppressed
      static void _set_IsFlowSuppressed(::System::Threading::ExecutionContext::Flags value);
      // static field const value: static public System.Threading.ExecutionContext/System.Threading.Flags IsPreAllocatedDefault
      static constexpr const int IsPreAllocatedDefault = 4;
      // Get static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsPreAllocatedDefault
      static ::System::Threading::ExecutionContext::Flags _get_IsPreAllocatedDefault();
      // Set static field: static public System.Threading.ExecutionContext/System.Threading.Flags IsPreAllocatedDefault
      static void _set_IsPreAllocatedDefault(::System::Threading::ExecutionContext::Flags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.Threading.ExecutionContext/System.Threading.Flags
    #pragma pack(pop)
    static check_size<sizeof(ExecutionContext::Flags), 0 + sizeof(int)> __System_Threading_ExecutionContext_FlagsSizeCheck;
    static_assert(sizeof(ExecutionContext::Flags) == 0x4);
    public:
    // private System.Threading.SynchronizationContext _syncContext
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::SynchronizationContext* syncContext;
    // Field size check
    static_assert(sizeof(::System::Threading::SynchronizationContext*) == 0x8);
    // private System.Threading.SynchronizationContext _syncContextNoFlow
    // Size: 0x8
    // Offset: 0x18
    ::System::Threading::SynchronizationContext* syncContextNoFlow;
    // Field size check
    static_assert(sizeof(::System::Threading::SynchronizationContext*) == 0x8);
    // private System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext
    // Size: 0x8
    // Offset: 0x20
    ::System::Runtime::Remoting::Messaging::LogicalCallContext* logicalCallContext;
    // Field size check
    static_assert(sizeof(::System::Runtime::Remoting::Messaging::LogicalCallContext*) == 0x8);
    // private System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext
    // Size: 0x8
    // Offset: 0x28
    ::System::Runtime::Remoting::Messaging::IllogicalCallContext* illogicalCallContext;
    // Field size check
    static_assert(sizeof(::System::Runtime::Remoting::Messaging::IllogicalCallContext*) == 0x8);
    // private System.Threading.ExecutionContext/System.Threading.Flags _flags
    // Size: 0x4
    // Offset: 0x30
    ::System::Threading::ExecutionContext::Flags flags;
    // Field size check
    static_assert(sizeof(::System::Threading::ExecutionContext::Flags) == 0x4);
    // Padding between fields: flags and: localValues
    char __padding4[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.Threading.IAsyncLocal,System.Object> _localValues
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>* localValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Threading.IAsyncLocal> _localChangeNotifications
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>* localChangeNotifications;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: i_ISerializable
    inline ::System::Runtime::Serialization::ISerializable* i_ISerializable() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
    static ::System::Threading::ExecutionContext* _get_s_dummyDefaultEC();
    // Set static field: static private readonly System.Threading.ExecutionContext s_dummyDefaultEC
    static void _set_s_dummyDefaultEC(::System::Threading::ExecutionContext* value);
    // Get instance field reference: private System.Threading.SynchronizationContext _syncContext
    [[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& dyn__syncContext();
    // Get instance field reference: private System.Threading.SynchronizationContext _syncContextNoFlow
    [[deprecated("Use field access instead!")]] ::System::Threading::SynchronizationContext*& dyn__syncContextNoFlow();
    // Get instance field reference: private System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext
    [[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::LogicalCallContext*& dyn__logicalCallContext();
    // Get instance field reference: private System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext
    [[deprecated("Use field access instead!")]] ::System::Runtime::Remoting::Messaging::IllogicalCallContext*& dyn__illogicalCallContext();
    // Get instance field reference: private System.Threading.ExecutionContext/System.Threading.Flags _flags
    [[deprecated("Use field access instead!")]] ::System::Threading::ExecutionContext::Flags& dyn__flags();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Threading.IAsyncLocal,System.Object> _localValues
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Threading::IAsyncLocal*, ::Il2CppObject*>*& dyn__localValues();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Threading.IAsyncLocal> _localChangeNotifications
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>*& dyn__localChangeNotifications();
    // System.Boolean get_isNewCapture()
    // Offset: 0x2240C40
    bool get_isNewCapture();
    // System.Void set_isNewCapture(System.Boolean value)
    // Offset: 0x2240C54
    void set_isNewCapture(bool value);
    // System.Boolean get_isFlowSuppressed()
    // Offset: 0x2240C70
    bool get_isFlowSuppressed();
    // System.Void set_isFlowSuppressed(System.Boolean value)
    // Offset: 0x2240C7C
    void set_isFlowSuppressed(bool value);
    // static System.Threading.ExecutionContext get_PreAllocatedDefault()
    // Offset: 0x2240C98
    static ::System::Threading::ExecutionContext* get_PreAllocatedDefault();
    // System.Boolean get_IsPreAllocatedDefault()
    // Offset: 0x2240D00
    bool get_IsPreAllocatedDefault();
    // System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
    // Offset: 0x22413B4
    ::System::Runtime::Remoting::Messaging::LogicalCallContext* get_LogicalCallContext();
    // System.Void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value)
    // Offset: 0x2241420
    void set_LogicalCallContext(::System::Runtime::Remoting::Messaging::LogicalCallContext* value);
    // System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext()
    // Offset: 0x2241428
    ::System::Runtime::Remoting::Messaging::IllogicalCallContext* get_IllogicalCallContext();
    // System.Void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value)
    // Offset: 0x2241494
    void set_IllogicalCallContext(::System::Runtime::Remoting::Messaging::IllogicalCallContext* value);
    // System.Threading.SynchronizationContext get_SynchronizationContext()
    // Offset: 0x224149C
    ::System::Threading::SynchronizationContext* get_SynchronizationContext();
    // System.Void set_SynchronizationContext(System.Threading.SynchronizationContext value)
    // Offset: 0x22414A4
    void set_SynchronizationContext(::System::Threading::SynchronizationContext* value);
    // System.Threading.SynchronizationContext get_SynchronizationContextNoFlow()
    // Offset: 0x22414AC
    ::System::Threading::SynchronizationContext* get_SynchronizationContextNoFlow();
    // System.Void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value)
    // Offset: 0x22414B4
    void set_SynchronizationContextNoFlow(::System::Threading::SynchronizationContext* value);
    // System.Void .ctor(System.Boolean isPreAllocatedDefault)
    // Offset: 0x2240D14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExecutionContext* New_ctor(bool isPreAllocatedDefault) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExecutionContext*, creationType>(isPreAllocatedDefault)));
    }
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x2242068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExecutionContext* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExecutionContext*, creationType>(info, context)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2242150
    static void _cctor();
    // static System.Void SetLocalValue(System.Threading.IAsyncLocal local, System.Object newValue, System.Boolean needChangeNotifications)
    // Offset: 0x2240D48
    static void SetLocalValue(::System::Threading::IAsyncLocal* local, ::Il2CppObject* newValue, bool needChangeNotifications);
    // static System.Void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current)
    // Offset: 0x2240F6C
    static void OnAsyncLocalContextChanged(::System::Threading::ExecutionContext* previous, ::System::Threading::ExecutionContext* current);
    // public System.Void Dispose()
    // Offset: 0x22414BC
    void Dispose();
    // static public System.Void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state)
    // Offset: 0x223D904
    static void Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state);
    // static System.Void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx)
    // Offset: 0x22414C0
    static void Run(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx);
    // static System.Void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, System.Boolean preserveSyncCtx)
    // Offset: 0x224154C
    static void RunInternal(::System::Threading::ExecutionContext* executionContext, ::System::Threading::ContextCallback* callback, ::Il2CppObject* state, bool preserveSyncCtx);
    // static System.Void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw)
    // Offset: 0x2241AB4
    static void EstablishCopyOnWriteScope(ByRef<::System::Threading::ExecutionContextSwitcher> ecsw);
    // static private System.Void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, System.Boolean knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw)
    // Offset: 0x22417F0
    static void EstablishCopyOnWriteScope(::System::Threading::Thread* currentThread, bool knownNullWindowsIdentity, ByRef<::System::Threading::ExecutionContextSwitcher> ecsw);
    // static System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, System.Boolean preserveSyncCtx)
    // Offset: 0x224184C
    static ::System::Threading::ExecutionContextSwitcher SetExecutionContext(::System::Threading::ExecutionContext* executionContext, bool preserveSyncCtx);
    // public System.Threading.ExecutionContext CreateCopy()
    // Offset: 0x2241C20
    ::System::Threading::ExecutionContext* CreateCopy();
    // System.Threading.ExecutionContext CreateMutableCopy()
    // Offset: 0x2241D5C
    ::System::Threading::ExecutionContext* CreateMutableCopy();
    // static public System.Boolean IsFlowSuppressed()
    // Offset: 0x2241E60
    static bool IsFlowSuppressed();
    // static public System.Threading.ExecutionContext Capture()
    // Offset: 0x2241E94
    static ::System::Threading::ExecutionContext* Capture();
    // static System.Threading.ExecutionContext FastCapture()
    // Offset: 0x2241EF4
    static ::System::Threading::ExecutionContext* FastCapture();
    // static System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext/System.Threading.CaptureOptions options)
    // Offset: 0x223DEC0
    static ::System::Threading::ExecutionContext* Capture(ByRef<::System::Threading::StackCrawlMark> stackMark, ::System::Threading::ExecutionContext::CaptureOptions options);
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x2241F70
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // System.Boolean IsDefaultFTContext(System.Boolean ignoreSyncCtx)
    // Offset: 0x224176C
    bool IsDefaultFTContext(bool ignoreSyncCtx);
    // System.Void .ctor()
    // Offset: 0x2240D0C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExecutionContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ExecutionContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExecutionContext*, creationType>()));
    }
  }; // System.Threading.ExecutionContext
  #pragma pack(pop)
  static check_size<sizeof(ExecutionContext), 64 + sizeof(::System::Collections::Generic::List_1<::System::Threading::IAsyncLocal*>*)> __System_Threading_ExecutionContextSizeCheck;
  static_assert(sizeof(ExecutionContext) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::ExecutionContext::Flags, "System.Threading", "ExecutionContext/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_isNewCapture
// Il2CppName: get_isNewCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_isNewCapture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_isNewCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_isNewCapture
// Il2CppName: set_isNewCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(bool)>(&System::Threading::ExecutionContext::set_isNewCapture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_isNewCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_isFlowSuppressed
// Il2CppName: get_isFlowSuppressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_isFlowSuppressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_isFlowSuppressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_isFlowSuppressed
// Il2CppName: set_isFlowSuppressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(bool)>(&System::Threading::ExecutionContext::set_isFlowSuppressed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_isFlowSuppressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_PreAllocatedDefault
// Il2CppName: get_PreAllocatedDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (*)()>(&System::Threading::ExecutionContext::get_PreAllocatedDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_PreAllocatedDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_IsPreAllocatedDefault
// Il2CppName: get_IsPreAllocatedDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_IsPreAllocatedDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_IsPreAllocatedDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_LogicalCallContext
// Il2CppName: get_LogicalCallContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::Messaging::LogicalCallContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_LogicalCallContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_LogicalCallContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_LogicalCallContext
// Il2CppName: set_LogicalCallContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(::System::Runtime::Remoting::Messaging::LogicalCallContext*)>(&System::Threading::ExecutionContext::set_LogicalCallContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting.Messaging", "LogicalCallContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_LogicalCallContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_IllogicalCallContext
// Il2CppName: get_IllogicalCallContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Remoting::Messaging::IllogicalCallContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_IllogicalCallContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_IllogicalCallContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_IllogicalCallContext
// Il2CppName: set_IllogicalCallContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(::System::Runtime::Remoting::Messaging::IllogicalCallContext*)>(&System::Threading::ExecutionContext::set_IllogicalCallContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Remoting.Messaging", "IllogicalCallContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_IllogicalCallContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_SynchronizationContext
// Il2CppName: get_SynchronizationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::SynchronizationContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_SynchronizationContext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_SynchronizationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_SynchronizationContext
// Il2CppName: set_SynchronizationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(::System::Threading::SynchronizationContext*)>(&System::Threading::ExecutionContext::set_SynchronizationContext)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Threading", "SynchronizationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_SynchronizationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::get_SynchronizationContextNoFlow
// Il2CppName: get_SynchronizationContextNoFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::SynchronizationContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::get_SynchronizationContextNoFlow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "get_SynchronizationContextNoFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::set_SynchronizationContextNoFlow
// Il2CppName: set_SynchronizationContextNoFlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(::System::Threading::SynchronizationContext*)>(&System::Threading::ExecutionContext::set_SynchronizationContextNoFlow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Threading", "SynchronizationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "set_SynchronizationContextNoFlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ExecutionContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ExecutionContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Threading::ExecutionContext::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::SetLocalValue
// Il2CppName: SetLocalValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::IAsyncLocal*, ::Il2CppObject*, bool)>(&System::Threading::ExecutionContext::SetLocalValue)> {
  static const MethodInfo* get() {
    static auto* local = &::il2cpp_utils::GetClassFromName("System.Threading", "IAsyncLocal")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* needChangeNotifications = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "SetLocalValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{local, newValue, needChangeNotifications});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::OnAsyncLocalContextChanged
// Il2CppName: OnAsyncLocalContextChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::ExecutionContext*, ::System::Threading::ExecutionContext*)>(&System::Threading::ExecutionContext::OnAsyncLocalContextChanged)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* current = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "OnAsyncLocalContextChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, current});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::ExecutionContext*, ::System::Threading::ContextCallback*, ::Il2CppObject*)>(&System::Threading::ExecutionContext::Run)> {
  static const MethodInfo* get() {
    static auto* executionContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Threading", "ContextCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executionContext, callback, state});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::ExecutionContext*, ::System::Threading::ContextCallback*, ::Il2CppObject*, bool)>(&System::Threading::ExecutionContext::Run)> {
  static const MethodInfo* get() {
    static auto* executionContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Threading", "ContextCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* preserveSyncCtx = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executionContext, callback, state, preserveSyncCtx});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::RunInternal
// Il2CppName: RunInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::ExecutionContext*, ::System::Threading::ContextCallback*, ::Il2CppObject*, bool)>(&System::Threading::ExecutionContext::RunInternal)> {
  static const MethodInfo* get() {
    static auto* executionContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System.Threading", "ContextCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* preserveSyncCtx = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "RunInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executionContext, callback, state, preserveSyncCtx});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::EstablishCopyOnWriteScope
// Il2CppName: EstablishCopyOnWriteScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Threading::ExecutionContextSwitcher>)>(&System::Threading::ExecutionContext::EstablishCopyOnWriteScope)> {
  static const MethodInfo* get() {
    static auto* ecsw = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContextSwitcher")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ecsw});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::EstablishCopyOnWriteScope
// Il2CppName: EstablishCopyOnWriteScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Thread*, bool, ByRef<::System::Threading::ExecutionContextSwitcher>)>(&System::Threading::ExecutionContext::EstablishCopyOnWriteScope)> {
  static const MethodInfo* get() {
    static auto* currentThread = &::il2cpp_utils::GetClassFromName("System.Threading", "Thread")->byval_arg;
    static auto* knownNullWindowsIdentity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ecsw = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContextSwitcher")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "EstablishCopyOnWriteScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentThread, knownNullWindowsIdentity, ecsw});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::SetExecutionContext
// Il2CppName: SetExecutionContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContextSwitcher (*)(::System::Threading::ExecutionContext*, bool)>(&System::Threading::ExecutionContext::SetExecutionContext)> {
  static const MethodInfo* get() {
    static auto* executionContext = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext")->byval_arg;
    static auto* preserveSyncCtx = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "SetExecutionContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{executionContext, preserveSyncCtx});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::CreateCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::CreateMutableCopy
// Il2CppName: CreateMutableCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (System::Threading::ExecutionContext::*)()>(&System::Threading::ExecutionContext::CreateMutableCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "CreateMutableCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::IsFlowSuppressed
// Il2CppName: IsFlowSuppressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Threading::ExecutionContext::IsFlowSuppressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "IsFlowSuppressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::Capture
// Il2CppName: Capture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (*)()>(&System::Threading::ExecutionContext::Capture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "Capture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::FastCapture
// Il2CppName: FastCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (*)()>(&System::Threading::ExecutionContext::FastCapture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "FastCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::Capture
// Il2CppName: Capture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ExecutionContext* (*)(ByRef<::System::Threading::StackCrawlMark>, ::System::Threading::ExecutionContext::CaptureOptions)>(&System::Threading::ExecutionContext::Capture)> {
  static const MethodInfo* get() {
    static auto* stackMark = &::il2cpp_utils::GetClassFromName("System.Threading", "StackCrawlMark")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Threading", "ExecutionContext/CaptureOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "Capture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stackMark, options});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ExecutionContext::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Threading::ExecutionContext::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::IsDefaultFTContext
// Il2CppName: IsDefaultFTContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ExecutionContext::*)(bool)>(&System::Threading::ExecutionContext::IsDefaultFTContext)> {
  static const MethodInfo* get() {
    static auto* ignoreSyncCtx = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ExecutionContext*), "IsDefaultFTContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ignoreSyncCtx});
  }
};
// Writing MetadataGetter for method: System::Threading::ExecutionContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
