// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
#include "System/Runtime/ConstrainedExecution/CriticalFinalizerObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: LockQueue
  class LockQueue;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLock
  class ReaderWriterLock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::ReaderWriterLock);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::ReaderWriterLock*, "System.Threading", "ReaderWriterLock");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.ReaderWriterLock
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1078A9C
  class ReaderWriterLock : public ::System::Runtime::ConstrainedExecution::CriticalFinalizerObject {
    public:
    public:
    // private System.Int32 seq_num
    // Size: 0x4
    // Offset: 0x10
    int seq_num;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 state
    // Size: 0x4
    // Offset: 0x14
    int state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 readers
    // Size: 0x4
    // Offset: 0x18
    int readers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 writer_lock_owner
    // Size: 0x4
    // Offset: 0x1C
    int writer_lock_owner;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.LockQueue writer_queue
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::LockQueue* writer_queue;
    // Field size check
    static_assert(sizeof(::System::Threading::LockQueue*) == 0x8);
    // private System.Collections.Hashtable reader_locks
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Hashtable* reader_locks;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 seq_num
    [[deprecated("Use field access instead!")]] int& dyn_seq_num();
    // Get instance field reference: private System.Int32 state
    [[deprecated("Use field access instead!")]] int& dyn_state();
    // Get instance field reference: private System.Int32 readers
    [[deprecated("Use field access instead!")]] int& dyn_readers();
    // Get instance field reference: private System.Int32 writer_lock_owner
    [[deprecated("Use field access instead!")]] int& dyn_writer_lock_owner();
    // Get instance field reference: private System.Threading.LockQueue writer_queue
    [[deprecated("Use field access instead!")]] ::System::Threading::LockQueue*& dyn_writer_queue();
    // Get instance field reference: private System.Collections.Hashtable reader_locks
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn_reader_locks();
    // public System.Boolean get_IsReaderLockHeld()
    // Offset: 0x1DE5E28
    bool get_IsReaderLockHeld();
    // public System.Boolean get_IsWriterLockHeld()
    // Offset: 0x1DE5F4C
    bool get_IsWriterLockHeld();
    // public System.Void AcquireReaderLock(System.Int32 millisecondsTimeout)
    // Offset: 0x1DE5FF0
    void AcquireReaderLock(int millisecondsTimeout);
    // private System.Void AcquireReaderLock(System.Int32 millisecondsTimeout, System.Int32 initialLockCount)
    // Offset: 0x1DE5FF8
    void AcquireReaderLock(int millisecondsTimeout, int initialLockCount);
    // public System.Void AcquireWriterLock(System.Int32 millisecondsTimeout)
    // Offset: 0x1DE64EC
    void AcquireWriterLock(int millisecondsTimeout);
    // private System.Void AcquireWriterLock(System.Int32 millisecondsTimeout, System.Int32 initialLockCount)
    // Offset: 0x1DE635C
    void AcquireWriterLock(int millisecondsTimeout, int initialLockCount);
    // public System.Void ReleaseReaderLock()
    // Offset: 0x1DE64F4
    void ReleaseReaderLock();
    // private System.Void ReleaseReaderLock(System.Int32 currentCount, System.Int32 releaseCount)
    // Offset: 0x1DE67A0
    void ReleaseReaderLock(int currentCount, int releaseCount);
    // public System.Void ReleaseWriterLock()
    // Offset: 0x1DE6694
    void ReleaseWriterLock();
    // private System.Void ReleaseWriterLock(System.Int32 releaseCount)
    // Offset: 0x1DE68D4
    void ReleaseWriterLock(int releaseCount);
    // private System.Boolean HasWriterLock()
    // Offset: 0x1DE6320
    bool HasWriterLock();
    // public System.Void .ctor()
    // Offset: 0x1DE5D60
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReaderWriterLock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReaderWriterLock*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1DE5E20
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::Finalize()
    void Finalize();
  }; // System.Threading.ReaderWriterLock
  #pragma pack(pop)
  static check_size<sizeof(ReaderWriterLock), 40 + sizeof(::System::Collections::Hashtable*)> __System_Threading_ReaderWriterLockSizeCheck;
  static_assert(sizeof(ReaderWriterLock) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::get_IsReaderLockHeld
// Il2CppName: get_IsReaderLockHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::get_IsReaderLockHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "get_IsReaderLockHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::get_IsWriterLockHeld
// Il2CppName: get_IsWriterLockHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::get_IsWriterLockHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "get_IsWriterLockHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::AcquireReaderLock
// Il2CppName: AcquireReaderLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int)>(&System::Threading::ReaderWriterLock::AcquireReaderLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "AcquireReaderLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::AcquireReaderLock
// Il2CppName: AcquireReaderLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int, int)>(&System::Threading::ReaderWriterLock::AcquireReaderLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* initialLockCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "AcquireReaderLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout, initialLockCount});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::AcquireWriterLock
// Il2CppName: AcquireWriterLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int)>(&System::Threading::ReaderWriterLock::AcquireWriterLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "AcquireWriterLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::AcquireWriterLock
// Il2CppName: AcquireWriterLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int, int)>(&System::Threading::ReaderWriterLock::AcquireWriterLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* initialLockCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "AcquireWriterLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout, initialLockCount});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::ReleaseReaderLock
// Il2CppName: ReleaseReaderLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::ReleaseReaderLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "ReleaseReaderLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::ReleaseReaderLock
// Il2CppName: ReleaseReaderLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int, int)>(&System::Threading::ReaderWriterLock::ReleaseReaderLock)> {
  static const MethodInfo* get() {
    static auto* currentCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* releaseCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "ReleaseReaderLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentCount, releaseCount});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::ReleaseWriterLock
// Il2CppName: ReleaseWriterLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::ReleaseWriterLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "ReleaseWriterLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::ReleaseWriterLock
// Il2CppName: ReleaseWriterLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)(int)>(&System::Threading::ReaderWriterLock::ReleaseWriterLock)> {
  static const MethodInfo* get() {
    static auto* releaseCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "ReleaseWriterLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{releaseCount});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::HasWriterLock
// Il2CppName: HasWriterLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::HasWriterLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "HasWriterLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ReaderWriterLock::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLock::*)()>(&System::Threading::ReaderWriterLock::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLock*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
