// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Mutex
  class Mutex;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: AbandonedMutexException
  class AbandonedMutexException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::AbandonedMutexException);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::AbandonedMutexException*, "System.Threading", "AbandonedMutexException");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.AbandonedMutexException
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 107879C
  class AbandonedMutexException : public ::System::SystemException {
    public:
    public:
    // private System.Int32 m_MutexIndex
    // Size: 0x4
    // Offset: 0x88
    int m_MutexIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_MutexIndex and: m_Mutex
    char __padding0[0x4] = {};
    // private System.Threading.Mutex m_Mutex
    // Size: 0x8
    // Offset: 0x90
    ::System::Threading::Mutex* m_Mutex;
    // Field size check
    static_assert(sizeof(::System::Threading::Mutex*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 m_MutexIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_MutexIndex();
    // Get instance field reference: private System.Threading.Mutex m_Mutex
    [[deprecated("Use field access instead!")]] ::System::Threading::Mutex*& dyn_m_Mutex();
    // public System.Void .ctor(System.Int32 location, System.Threading.WaitHandle handle)
    // Offset: 0x223D50C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AbandonedMutexException* New_ctor(int location, ::System::Threading::WaitHandle* handle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AbandonedMutexException*, creationType>(location, handle)));
    }
    // private System.Void SetupException(System.Int32 location, System.Threading.WaitHandle handle)
    // Offset: 0x223D5E4
    void SetupException(int location, ::System::Threading::WaitHandle* handle);
    // public System.Void .ctor()
    // Offset: 0x223D490
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor()
    // Base method: System.Void Exception::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AbandonedMutexException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AbandonedMutexException*, creationType>()));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x223D658
    // Implemented from: System.SystemException
    // Base method: System.Void SystemException::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Base method: System.Void Exception::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AbandonedMutexException* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::AbandonedMutexException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AbandonedMutexException*, creationType>(info, context)));
    }
  }; // System.Threading.AbandonedMutexException
  #pragma pack(pop)
  static check_size<sizeof(AbandonedMutexException), 144 + sizeof(::System::Threading::Mutex*)> __System_Threading_AbandonedMutexExceptionSizeCheck;
  static_assert(sizeof(AbandonedMutexException) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::AbandonedMutexException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::AbandonedMutexException::SetupException
// Il2CppName: SetupException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::AbandonedMutexException::*)(int, ::System::Threading::WaitHandle*)>(&System::Threading::AbandonedMutexException::SetupException)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System.Threading", "WaitHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::AbandonedMutexException*), "SetupException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location, handle});
  }
};
// Writing MetadataGetter for method: System::Threading::AbandonedMutexException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::AbandonedMutexException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
