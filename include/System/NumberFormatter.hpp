// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: NumberFormatter
  class NumberFormatter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::NumberFormatter);
DEFINE_IL2CPP_ARG_TYPE(::System::NumberFormatter*, "System", "NumberFormatter");
// Type namespace: System
namespace System {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.NumberFormatter
  // [TokenAttribute] Offset: FFFFFFFF
  class NumberFormatter : public ::Il2CppObject {
    public:
    // Nested type: ::System::NumberFormatter::CustomInfo
    class CustomInfo;
    public:
    // private System.Globalization.NumberFormatInfo _nfi
    // Size: 0x8
    // Offset: 0x10
    ::System::Globalization::NumberFormatInfo* nfi;
    // Field size check
    static_assert(sizeof(::System::Globalization::NumberFormatInfo*) == 0x8);
    // private System.Char[] _cbuf
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Il2CppChar> cbuf;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Boolean _NaN
    // Size: 0x1
    // Offset: 0x20
    bool NaN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _infinity
    // Size: 0x1
    // Offset: 0x21
    bool infinity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isCustomFormat
    // Size: 0x1
    // Offset: 0x22
    bool isCustomFormat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _specifierIsUpper
    // Size: 0x1
    // Offset: 0x23
    bool specifierIsUpper;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _positive
    // Size: 0x1
    // Offset: 0x24
    bool positive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: positive and: specifier
    char __padding6[0x1] = {};
    // private System.Char _specifier
    // Size: 0x2
    // Offset: 0x26
    ::Il2CppChar specifier;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // private System.Int32 _precision
    // Size: 0x4
    // Offset: 0x28
    int precision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _defPrecision
    // Size: 0x4
    // Offset: 0x2C
    int defPrecision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _digitsLen
    // Size: 0x4
    // Offset: 0x30
    int digitsLen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _offset
    // Size: 0x4
    // Offset: 0x34
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _decPointPos
    // Size: 0x4
    // Offset: 0x38
    int decPointPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 _val1
    // Size: 0x4
    // Offset: 0x3C
    uint val1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _val2
    // Size: 0x4
    // Offset: 0x40
    uint val2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _val3
    // Size: 0x4
    // Offset: 0x44
    uint val3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _val4
    // Size: 0x4
    // Offset: 0x48
    uint val4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 _ind
    // Size: 0x4
    // Offset: 0x4C
    int ind;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.UInt64* MantissaBitsTable
    static uint64_t* _get_MantissaBitsTable();
    // Set static field: static private readonly System.UInt64* MantissaBitsTable
    static void _set_MantissaBitsTable(uint64_t* value);
    // Get static field: static private readonly System.Int32* TensExponentTable
    static int* _get_TensExponentTable();
    // Set static field: static private readonly System.Int32* TensExponentTable
    static void _set_TensExponentTable(int* value);
    // Get static field: static private readonly System.Char* DigitLowerTable
    static ::Il2CppChar* _get_DigitLowerTable();
    // Set static field: static private readonly System.Char* DigitLowerTable
    static void _set_DigitLowerTable(::Il2CppChar* value);
    // Get static field: static private readonly System.Char* DigitUpperTable
    static ::Il2CppChar* _get_DigitUpperTable();
    // Set static field: static private readonly System.Char* DigitUpperTable
    static void _set_DigitUpperTable(::Il2CppChar* value);
    // Get static field: static private readonly System.Int64* TenPowersList
    static int64_t* _get_TenPowersList();
    // Set static field: static private readonly System.Int64* TenPowersList
    static void _set_TenPowersList(int64_t* value);
    // Get static field: static private readonly System.Int32* DecHexDigits
    static int* _get_DecHexDigits();
    // Set static field: static private readonly System.Int32* DecHexDigits
    static void _set_DecHexDigits(int* value);
    // Get static field: static private System.NumberFormatter threadNumberFormatter
    static ::System::NumberFormatter* _get_threadNumberFormatter();
    // Set static field: static private System.NumberFormatter threadNumberFormatter
    static void _set_threadNumberFormatter(::System::NumberFormatter* value);
    // Get static field: static private System.NumberFormatter userFormatProvider
    static ::System::NumberFormatter* _get_userFormatProvider();
    // Set static field: static private System.NumberFormatter userFormatProvider
    static void _set_userFormatProvider(::System::NumberFormatter* value);
    // Get instance field reference: private System.Globalization.NumberFormatInfo _nfi
    [[deprecated("Use field access instead!")]] ::System::Globalization::NumberFormatInfo*& dyn__nfi();
    // Get instance field reference: private System.Char[] _cbuf
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__cbuf();
    // Get instance field reference: private System.Boolean _NaN
    [[deprecated("Use field access instead!")]] bool& dyn__NaN();
    // Get instance field reference: private System.Boolean _infinity
    [[deprecated("Use field access instead!")]] bool& dyn__infinity();
    // Get instance field reference: private System.Boolean _isCustomFormat
    [[deprecated("Use field access instead!")]] bool& dyn__isCustomFormat();
    // Get instance field reference: private System.Boolean _specifierIsUpper
    [[deprecated("Use field access instead!")]] bool& dyn__specifierIsUpper();
    // Get instance field reference: private System.Boolean _positive
    [[deprecated("Use field access instead!")]] bool& dyn__positive();
    // Get instance field reference: private System.Char _specifier
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__specifier();
    // Get instance field reference: private System.Int32 _precision
    [[deprecated("Use field access instead!")]] int& dyn__precision();
    // Get instance field reference: private System.Int32 _defPrecision
    [[deprecated("Use field access instead!")]] int& dyn__defPrecision();
    // Get instance field reference: private System.Int32 _digitsLen
    [[deprecated("Use field access instead!")]] int& dyn__digitsLen();
    // Get instance field reference: private System.Int32 _offset
    [[deprecated("Use field access instead!")]] int& dyn__offset();
    // Get instance field reference: private System.Int32 _decPointPos
    [[deprecated("Use field access instead!")]] int& dyn__decPointPos();
    // Get instance field reference: private System.UInt32 _val1
    [[deprecated("Use field access instead!")]] uint& dyn__val1();
    // Get instance field reference: private System.UInt32 _val2
    [[deprecated("Use field access instead!")]] uint& dyn__val2();
    // Get instance field reference: private System.UInt32 _val3
    [[deprecated("Use field access instead!")]] uint& dyn__val3();
    // Get instance field reference: private System.UInt32 _val4
    [[deprecated("Use field access instead!")]] uint& dyn__val4();
    // Get instance field reference: private System.Int32 _ind
    [[deprecated("Use field access instead!")]] int& dyn__ind();
    // private System.Void set_CurrentCulture(System.Globalization.CultureInfo value)
    // Offset: 0x2274910
    void set_CurrentCulture(::System::Globalization::CultureInfo* value);
    // private System.Int32 get_IntegerDigits()
    // Offset: 0x2275568
    int get_IntegerDigits();
    // private System.Int32 get_DecimalDigits()
    // Offset: 0x2275578
    int get_DecimalDigits();
    // private System.Boolean get_IsFloatingSource()
    // Offset: 0x227558C
    bool get_IsFloatingSource();
    // private System.Boolean get_IsZero()
    // Offset: 0x22755A0
    bool get_IsZero();
    // private System.Boolean get_IsZeroInteger()
    // Offset: 0x22755B0
    bool get_IsZeroInteger();
    // static private System.Void .cctor()
    // Offset: 0x2273E1C
    static void _cctor();
    // private System.Void .ctor(System.Threading.Thread current)
    // Offset: 0x2274858
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberFormatter* New_ctor(::System::Threading::Thread* current) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::NumberFormatter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberFormatter*, creationType>(current)));
    }
    // static private System.Void GetFormatterTables(out System.UInt64* MantissaBitsTable, out System.Int32* TensExponentTable, out System.Char* DigitLowerTable, out System.Char* DigitUpperTable, out System.Int64* TenPowersList, out System.Int32* DecHexDigits)
    // Offset: 0x2273E18
    static void GetFormatterTables(ByRef<uint64_t*> MantissaBitsTable, ByRef<int*> TensExponentTable, ByRef<::Il2CppChar*> DigitLowerTable, ByRef<::Il2CppChar*> DigitUpperTable, ByRef<int64_t*> TenPowersList, ByRef<int*> DecHexDigits);
    // static private System.Int64 GetTenPowerOf(System.Int32 i)
    // Offset: 0x2273E7C
    static int64_t GetTenPowerOf(int i);
    // private System.Void InitDecHexDigits(System.UInt32 value)
    // Offset: 0x2273EEC
    void InitDecHexDigits(uint value);
    // private System.Void InitDecHexDigits(System.UInt64 value)
    // Offset: 0x2274148
    void InitDecHexDigits(uint64_t value);
    // private System.Void InitDecHexDigits(System.UInt32 hi, System.UInt64 lo)
    // Offset: 0x227426C
    void InitDecHexDigits(uint hi, uint64_t lo);
    // static private System.UInt32 FastToDecHex(System.Int32 val)
    // Offset: 0x2273FB4
    static uint FastToDecHex(int val);
    // static private System.UInt32 ToDecHex(System.Int32 val)
    // Offset: 0x2274084
    static uint ToDecHex(int val);
    // static private System.Int32 FastDecHexLen(System.Int32 val)
    // Offset: 0x2274438
    static int FastDecHexLen(int val);
    // static private System.Int32 DecHexLen(System.UInt32 val)
    // Offset: 0x2274460
    static int DecHexLen(uint val);
    // private System.Int32 DecHexLen()
    // Offset: 0x2274528
    int DecHexLen();
    // static private System.Int32 ScaleOrder(System.Int64 hi)
    // Offset: 0x227464C
    static int ScaleOrder(int64_t hi);
    // private System.Int32 InitialFloatingPrecision()
    // Offset: 0x22746E0
    int InitialFloatingPrecision();
    // static private System.Int32 ParsePrecision(System.String format)
    // Offset: 0x22747BC
    static int ParsePrecision(::StringW format);
    // private System.Void Init(System.String format)
    // Offset: 0x227495C
    void Init(::StringW format);
    // private System.Void InitHex(System.UInt64 value)
    // Offset: 0x2274A84
    void InitHex(uint64_t value);
    // private System.Void Init(System.String format, System.Int32 value, System.Int32 defPrecision)
    // Offset: 0x2274ACC
    void Init(::StringW format, int value, int defPrecision);
    // private System.Void Init(System.String format, System.UInt32 value, System.Int32 defPrecision)
    // Offset: 0x2274B70
    void Init(::StringW format, uint value, int defPrecision);
    // private System.Void Init(System.String format, System.Int64 value)
    // Offset: 0x2274BF8
    void Init(::StringW format, int64_t value);
    // private System.Void Init(System.String format, System.UInt64 value)
    // Offset: 0x2274C84
    void Init(::StringW format, uint64_t value);
    // private System.Void Init(System.String format, System.Double value, System.Int32 defPrecision)
    // Offset: 0x2274D08
    void Init(::StringW format, double value, int defPrecision);
    // private System.Void Init(System.String format, System.Decimal value)
    // Offset: 0x2275110
    void Init(::StringW format, ::System::Decimal value);
    // private System.Void ResetCharBuf(System.Int32 size)
    // Offset: 0x2275284
    void ResetCharBuf(int size);
    // private System.Void Resize(System.Int32 len)
    // Offset: 0x2275304
    void Resize(int len);
    // private System.Void Append(System.Char c)
    // Offset: 0x2275364
    void Append(::Il2CppChar c);
    // private System.Void Append(System.Char c, System.Int32 cnt)
    // Offset: 0x22753E8
    void Append(::Il2CppChar c, int cnt);
    // private System.Void Append(System.String s)
    // Offset: 0x227548C
    void Append(::StringW s);
    // private System.Globalization.NumberFormatInfo GetNumberFormatInstance(System.IFormatProvider fp)
    // Offset: 0x227554C
    ::System::Globalization::NumberFormatInfo* GetNumberFormatInstance(::System::IFormatProvider* fp);
    // private System.Void RoundPos(System.Int32 pos)
    // Offset: 0x22755D0
    void RoundPos(int pos);
    // private System.Boolean RoundDecimal(System.Int32 decimals)
    // Offset: 0x2275748
    bool RoundDecimal(int decimals);
    // private System.Boolean RoundBits(System.Int32 shift)
    // Offset: 0x22755DC
    bool RoundBits(int shift);
    // private System.Void RemoveTrailingZeros()
    // Offset: 0x2275890
    void RemoveTrailingZeros();
    // private System.Void AddOneToDecHex()
    // Offset: 0x227575C
    void AddOneToDecHex();
    // static private System.UInt32 AddOneToDecHex(System.UInt32 val)
    // Offset: 0x22758D4
    static uint AddOneToDecHex(uint val);
    // private System.Int32 CountTrailingZeros()
    // Offset: 0x2274FEC
    int CountTrailingZeros();
    // static private System.Int32 CountTrailingZeros(System.UInt32 val)
    // Offset: 0x227597C
    static int CountTrailingZeros(uint val);
    // static private System.NumberFormatter GetInstance(System.IFormatProvider fp)
    // Offset: 0x22759D0
    static ::System::NumberFormatter* GetInstance(::System::IFormatProvider* fp);
    // private System.Void Release()
    // Offset: 0x2275B48
    void Release();
    // static public System.String NumberToString(System.String format, System.UInt32 value, System.IFormatProvider fp)
    // Offset: 0x2275BE0
    static ::StringW NumberToString(::StringW format, uint value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.Int32 value, System.IFormatProvider fp)
    // Offset: 0x2275E7C
    static ::StringW NumberToString(::StringW format, int value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.UInt64 value, System.IFormatProvider fp)
    // Offset: 0x2275F30
    static ::StringW NumberToString(::StringW format, uint64_t value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.Int64 value, System.IFormatProvider fp)
    // Offset: 0x2275FE0
    static ::StringW NumberToString(::StringW format, int64_t value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.Single value, System.IFormatProvider fp)
    // Offset: 0x2276090
    static ::StringW NumberToString(::StringW format, float value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.Double value, System.IFormatProvider fp)
    // Offset: 0x22763EC
    static ::StringW NumberToString(::StringW format, double value, ::System::IFormatProvider* fp);
    // static public System.String NumberToString(System.String format, System.Decimal value, System.IFormatProvider fp)
    // Offset: 0x2276618
    static ::StringW NumberToString(::StringW format, ::System::Decimal value, ::System::IFormatProvider* fp);
    // private System.String IntegerToString(System.String format, System.IFormatProvider fp)
    // Offset: 0x2275C94
    ::StringW IntegerToString(::StringW format, ::System::IFormatProvider* fp);
    // private System.String NumberToString(System.String format, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x227624C
    ::StringW NumberToString(::StringW format, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatCurrency(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x22766F0
    ::StringW FormatCurrency(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatDecimal(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276958
    ::StringW FormatDecimal(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatHexadecimal(System.Int32 precision)
    // Offset: 0x2276F88
    ::StringW FormatHexadecimal(int precision);
    // private System.String FormatFixedPoint(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276A74
    ::StringW FormatFixedPoint(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatRoundtrip(System.Double origval, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276514
    ::StringW FormatRoundtrip(double origval, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatRoundtrip(System.Single origval, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x22761B8
    ::StringW FormatRoundtrip(float origval, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatGeneral(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276B5C
    ::StringW FormatGeneral(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatNumber(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276CAC
    ::StringW FormatNumber(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatPercent(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276E20
    ::StringW FormatPercent(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatExponential(System.Int32 precision, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x2276A20
    ::StringW FormatExponential(int precision, ::System::Globalization::NumberFormatInfo* nfi);
    // private System.String FormatExponential(System.Int32 precision, System.Globalization.NumberFormatInfo nfi, System.Int32 expDigits)
    // Offset: 0x2277BC4
    ::StringW FormatExponential(int precision, ::System::Globalization::NumberFormatInfo* nfi, int expDigits);
    // private System.String FormatCustom(System.String format, System.Globalization.NumberFormatInfo nfi)
    // Offset: 0x22770F0
    ::StringW FormatCustom(::StringW format, ::System::Globalization::NumberFormatInfo* nfi);
    // static private System.Void ZeroTrimEnd(System.Text.StringBuilder sb, System.Boolean canEmpty)
    // Offset: 0x2278928
    static void ZeroTrimEnd(::System::Text::StringBuilder* sb, bool canEmpty);
    // static private System.Boolean IsZeroOnly(System.Text.StringBuilder sb)
    // Offset: 0x2278838
    static bool IsZeroOnly(::System::Text::StringBuilder* sb);
    // static private System.Void AppendNonNegativeNumber(System.Text.StringBuilder sb, System.Int32 v)
    // Offset: 0x227868C
    static void AppendNonNegativeNumber(::System::Text::StringBuilder* sb, int v);
    // private System.Void AppendIntegerString(System.Int32 minLength, System.Text.StringBuilder sb)
    // Offset: 0x2278794
    void AppendIntegerString(int minLength, ::System::Text::StringBuilder* sb);
    // private System.Void AppendIntegerString(System.Int32 minLength)
    // Offset: 0x2277AF4
    void AppendIntegerString(int minLength);
    // private System.Void AppendDecimalString(System.Int32 precision, System.Text.StringBuilder sb)
    // Offset: 0x2278818
    void AppendDecimalString(int precision, ::System::Text::StringBuilder* sb);
    // private System.Void AppendDecimalString(System.Int32 precision)
    // Offset: 0x2277868
    void AppendDecimalString(int precision);
    // private System.Void AppendIntegerStringWithGroupSeparator(System.Int32[] groups, System.String groupSeparator)
    // Offset: 0x2277620
    void AppendIntegerStringWithGroupSeparator(::ArrayW<int> groups, ::StringW groupSeparator);
    // private System.Void AppendExponent(System.Globalization.NumberFormatInfo nfi, System.Int32 exponent, System.Int32 minDigits)
    // Offset: 0x2277D90
    void AppendExponent(::System::Globalization::NumberFormatInfo* nfi, int exponent, int minDigits);
    // private System.Void AppendOneDigit(System.Int32 start)
    // Offset: 0x2277CB4
    void AppendOneDigit(int start);
    // private System.Void AppendDigits(System.Int32 start, System.Int32 end)
    // Offset: 0x2277880
    void AppendDigits(int start, int end);
    // private System.Void AppendDigits(System.Int32 start, System.Int32 end, System.Text.StringBuilder sb)
    // Offset: 0x2279164
    void AppendDigits(int start, int end, ::System::Text::StringBuilder* sb);
    // private System.Void Multiply10(System.Int32 count)
    // Offset: 0x2277C94
    void Multiply10(int count);
    // private System.Void Divide10(System.Int32 count)
    // Offset: 0x227866C
    void Divide10(int count);
    // private System.NumberFormatter GetClone()
    // Offset: 0x2277B5C
    ::System::NumberFormatter* GetClone();
  }; // System.NumberFormatter
  #pragma pack(pop)
  static check_size<sizeof(NumberFormatter), 76 + sizeof(int)> __System_NumberFormatterSizeCheck;
  static_assert(sizeof(NumberFormatter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::NumberFormatter::set_CurrentCulture
// Il2CppName: set_CurrentCulture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::System::Globalization::CultureInfo*)>(&System::NumberFormatter::set_CurrentCulture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "set_CurrentCulture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::get_IntegerDigits
// Il2CppName: get_IntegerDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::NumberFormatter::*)()>(&System::NumberFormatter::get_IntegerDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "get_IntegerDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::get_DecimalDigits
// Il2CppName: get_DecimalDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::NumberFormatter::*)()>(&System::NumberFormatter::get_DecimalDigits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "get_DecimalDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::get_IsFloatingSource
// Il2CppName: get_IsFloatingSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::NumberFormatter::*)()>(&System::NumberFormatter::get_IsFloatingSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "get_IsFloatingSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::get_IsZero
// Il2CppName: get_IsZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::NumberFormatter::*)()>(&System::NumberFormatter::get_IsZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "get_IsZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::get_IsZeroInteger
// Il2CppName: get_IsZeroInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::NumberFormatter::*)()>(&System::NumberFormatter::get_IsZeroInteger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "get_IsZeroInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::NumberFormatter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::NumberFormatter::GetFormatterTables
// Il2CppName: GetFormatterTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<uint64_t*>, ByRef<int*>, ByRef<::Il2CppChar*>, ByRef<::Il2CppChar*>, ByRef<int64_t*>, ByRef<int*>)>(&System::NumberFormatter::GetFormatterTables)> {
  static const MethodInfo* get() {
    static auto* MantissaBitsTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt64"))->this_arg;
    static auto* TensExponentTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    static auto* DigitLowerTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->this_arg;
    static auto* DigitUpperTable = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->this_arg;
    static auto* TenPowersList = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int64"))->this_arg;
    static auto* DecHexDigits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Int32"))->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "GetFormatterTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MantissaBitsTable, TensExponentTable, DigitLowerTable, DigitUpperTable, TenPowersList, DecHexDigits});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::GetTenPowerOf
// Il2CppName: GetTenPowerOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int)>(&System::NumberFormatter::GetTenPowerOf)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "GetTenPowerOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::InitDecHexDigits
// Il2CppName: InitDecHexDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(uint)>(&System::NumberFormatter::InitDecHexDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "InitDecHexDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::InitDecHexDigits
// Il2CppName: InitDecHexDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(uint64_t)>(&System::NumberFormatter::InitDecHexDigits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "InitDecHexDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::InitDecHexDigits
// Il2CppName: InitDecHexDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(uint, uint64_t)>(&System::NumberFormatter::InitDecHexDigits)> {
  static const MethodInfo* get() {
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "InitDecHexDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hi, lo});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FastToDecHex
// Il2CppName: FastToDecHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int)>(&System::NumberFormatter::FastToDecHex)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FastToDecHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::ToDecHex
// Il2CppName: ToDecHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(int)>(&System::NumberFormatter::ToDecHex)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "ToDecHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FastDecHexLen
// Il2CppName: FastDecHexLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::NumberFormatter::FastDecHexLen)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FastDecHexLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::DecHexLen
// Il2CppName: DecHexLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::NumberFormatter::DecHexLen)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "DecHexLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::DecHexLen
// Il2CppName: DecHexLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::NumberFormatter::*)()>(&System::NumberFormatter::DecHexLen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "DecHexLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::ScaleOrder
// Il2CppName: ScaleOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&System::NumberFormatter::ScaleOrder)> {
  static const MethodInfo* get() {
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "ScaleOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::InitialFloatingPrecision
// Il2CppName: InitialFloatingPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::NumberFormatter::*)()>(&System::NumberFormatter::InitialFloatingPrecision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "InitialFloatingPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::ParsePrecision
// Il2CppName: ParsePrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&System::NumberFormatter::ParsePrecision)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "ParsePrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::InitHex
// Il2CppName: InitHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(uint64_t)>(&System::NumberFormatter::InitHex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "InitHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, int, int)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* defPrecision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, defPrecision});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, uint, int)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* defPrecision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, defPrecision});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, int64_t)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, uint64_t)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, double, int)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* defPrecision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, defPrecision});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW, ::System::Decimal)>(&System::NumberFormatter::Init)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::ResetCharBuf
// Il2CppName: ResetCharBuf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::ResetCharBuf)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "ResetCharBuf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::Resize)> {
  static const MethodInfo* get() {
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{len});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::Il2CppChar)>(&System::NumberFormatter::Append)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::Il2CppChar, int)>(&System::NumberFormatter::Append)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* cnt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, cnt});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::StringW)>(&System::NumberFormatter::Append)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::GetNumberFormatInstance
// Il2CppName: GetNumberFormatInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::NumberFormatInfo* (System::NumberFormatter::*)(::System::IFormatProvider*)>(&System::NumberFormatter::GetNumberFormatInstance)> {
  static const MethodInfo* get() {
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "GetNumberFormatInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::RoundPos
// Il2CppName: RoundPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::RoundPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "RoundPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::RoundDecimal
// Il2CppName: RoundDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::NumberFormatter::*)(int)>(&System::NumberFormatter::RoundDecimal)> {
  static const MethodInfo* get() {
    static auto* decimals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "RoundDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decimals});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::RoundBits
// Il2CppName: RoundBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::NumberFormatter::*)(int)>(&System::NumberFormatter::RoundBits)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "RoundBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::RemoveTrailingZeros
// Il2CppName: RemoveTrailingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)()>(&System::NumberFormatter::RemoveTrailingZeros)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "RemoveTrailingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AddOneToDecHex
// Il2CppName: AddOneToDecHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)()>(&System::NumberFormatter::AddOneToDecHex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AddOneToDecHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AddOneToDecHex
// Il2CppName: AddOneToDecHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&System::NumberFormatter::AddOneToDecHex)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AddOneToDecHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::CountTrailingZeros
// Il2CppName: CountTrailingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::NumberFormatter::*)()>(&System::NumberFormatter::CountTrailingZeros)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "CountTrailingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::CountTrailingZeros
// Il2CppName: CountTrailingZeros
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&System::NumberFormatter::CountTrailingZeros)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "CountTrailingZeros", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::NumberFormatter* (*)(::System::IFormatProvider*)>(&System::NumberFormatter::GetInstance)> {
  static const MethodInfo* get() {
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)()>(&System::NumberFormatter::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, uint, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, uint64_t, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, int64_t, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, float, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, double, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::Decimal, ::System::IFormatProvider*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, value, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::IntegerToString
// Il2CppName: IntegerToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(::StringW, ::System::IFormatProvider*)>(&System::NumberFormatter::IntegerToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fp = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "IntegerToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, fp});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::NumberToString
// Il2CppName: NumberToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::NumberToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "NumberToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatCurrency
// Il2CppName: FormatCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatCurrency)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatDecimal
// Il2CppName: FormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatDecimal)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatHexadecimal
// Il2CppName: FormatHexadecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int)>(&System::NumberFormatter::FormatHexadecimal)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatHexadecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatFixedPoint
// Il2CppName: FormatFixedPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatFixedPoint)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatFixedPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatRoundtrip
// Il2CppName: FormatRoundtrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(double, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatRoundtrip)> {
  static const MethodInfo* get() {
    static auto* origval = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatRoundtrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origval, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatRoundtrip
// Il2CppName: FormatRoundtrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(float, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatRoundtrip)> {
  static const MethodInfo* get() {
    static auto* origval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatRoundtrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origval, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatGeneral
// Il2CppName: FormatGeneral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatGeneral)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatGeneral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatNumber
// Il2CppName: FormatNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatNumber)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatPercent
// Il2CppName: FormatPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatPercent)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatExponential
// Il2CppName: FormatExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatExponential)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatExponential
// Il2CppName: FormatExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(int, ::System::Globalization::NumberFormatInfo*, int)>(&System::NumberFormatter::FormatExponential)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* expDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, nfi, expDigits});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::FormatCustom
// Il2CppName: FormatCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::NumberFormatter::*)(::StringW, ::System::Globalization::NumberFormatInfo*)>(&System::NumberFormatter::FormatCustom)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "FormatCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, nfi});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::ZeroTrimEnd
// Il2CppName: ZeroTrimEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, bool)>(&System::NumberFormatter::ZeroTrimEnd)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* canEmpty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "ZeroTrimEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, canEmpty});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::IsZeroOnly
// Il2CppName: IsZeroOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Text::StringBuilder*)>(&System::NumberFormatter::IsZeroOnly)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "IsZeroOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendNonNegativeNumber
// Il2CppName: AppendNonNegativeNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Text::StringBuilder*, int)>(&System::NumberFormatter::AppendNonNegativeNumber)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendNonNegativeNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb, v});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendIntegerString
// Il2CppName: AppendIntegerString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int, ::System::Text::StringBuilder*)>(&System::NumberFormatter::AppendIntegerString)> {
  static const MethodInfo* get() {
    static auto* minLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendIntegerString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minLength, sb});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendIntegerString
// Il2CppName: AppendIntegerString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::AppendIntegerString)> {
  static const MethodInfo* get() {
    static auto* minLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendIntegerString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minLength});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendDecimalString
// Il2CppName: AppendDecimalString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int, ::System::Text::StringBuilder*)>(&System::NumberFormatter::AppendDecimalString)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendDecimalString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision, sb});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendDecimalString
// Il2CppName: AppendDecimalString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::AppendDecimalString)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendDecimalString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendIntegerStringWithGroupSeparator
// Il2CppName: AppendIntegerStringWithGroupSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::ArrayW<int>, ::StringW)>(&System::NumberFormatter::AppendIntegerStringWithGroupSeparator)> {
  static const MethodInfo* get() {
    static auto* groups = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* groupSeparator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendIntegerStringWithGroupSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groups, groupSeparator});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendExponent
// Il2CppName: AppendExponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(::System::Globalization::NumberFormatInfo*, int, int)>(&System::NumberFormatter::AppendExponent)> {
  static const MethodInfo* get() {
    static auto* nfi = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberFormatInfo")->byval_arg;
    static auto* exponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minDigits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendExponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nfi, exponent, minDigits});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendOneDigit
// Il2CppName: AppendOneDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::AppendOneDigit)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendOneDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendDigits
// Il2CppName: AppendDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int, int)>(&System::NumberFormatter::AppendDigits)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::AppendDigits
// Il2CppName: AppendDigits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int, int, ::System::Text::StringBuilder*)>(&System::NumberFormatter::AppendDigits)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "AppendDigits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, sb});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Multiply10
// Il2CppName: Multiply10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::Multiply10)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Multiply10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::Divide10
// Il2CppName: Divide10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::NumberFormatter::*)(int)>(&System::NumberFormatter::Divide10)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "Divide10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::NumberFormatter::GetClone
// Il2CppName: GetClone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::NumberFormatter* (System::NumberFormatter::*)()>(&System::NumberFormatter::GetClone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::NumberFormatter*), "GetClone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
