// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Buffers.ArrayPoolEventSource
#include "System/Buffers/ArrayPoolEventSource.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason, "System.Buffers", "ArrayPoolEventSource/BufferAllocatedReason");
// Type namespace: System.Buffers
namespace System::Buffers {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason
  // [TokenAttribute] Offset: FFFFFFFF
  struct ArrayPoolEventSource::BufferAllocatedReason/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BufferAllocatedReason
    constexpr BufferAllocatedReason(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason Pooled
    static constexpr const int Pooled = 0;
    // Get static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason Pooled
    static ::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason _get_Pooled();
    // Set static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason Pooled
    static void _set_Pooled(::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason value);
    // static field const value: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason OverMaximumSize
    static constexpr const int OverMaximumSize = 1;
    // Get static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason OverMaximumSize
    static ::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason _get_OverMaximumSize();
    // Set static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason OverMaximumSize
    static void _set_OverMaximumSize(::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason value);
    // static field const value: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason PoolExhausted
    static constexpr const int PoolExhausted = 2;
    // Get static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason PoolExhausted
    static ::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason _get_PoolExhausted();
    // Set static field: static public System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason PoolExhausted
    static void _set_PoolExhausted(::System::Buffers::ArrayPoolEventSource::BufferAllocatedReason value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Buffers.ArrayPoolEventSource/System.Buffers.BufferAllocatedReason
  #pragma pack(pop)
  static check_size<sizeof(ArrayPoolEventSource::BufferAllocatedReason), 0 + sizeof(int)> __System_Buffers_ArrayPoolEventSource_BufferAllocatedReasonSizeCheck;
  static_assert(sizeof(ArrayPoolEventSource::BufferAllocatedReason) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
