// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Collections.IStructuralEquatable
#include "System/Collections/IStructuralEquatable.hpp"
// Including type: System.Collections.IStructuralComparable
#include "System/Collections/IStructuralComparable.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Converter`2<TInput, TOutput>
  template<typename TInput, typename TOutput>
  class Converter_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IComparer
  class IComparer;
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Array);
DEFINE_IL2CPP_ARG_TYPE(::System::Array*, "System", "Array");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Array
  // [TokenAttribute] Offset: FFFFFFFF
  class Array : public ::Il2CppObject/*, public ::System::ICloneable, public ::System::Collections::IStructuralEquatable, public ::System::Collections::IStructuralComparable, public ::System::Collections::IList*/ {
    public:
    // Nested type: ::System::Array::ArrayEnumerator
    class ArrayEnumerator;
    // Nested type: ::System::Array::InternalEnumerator_1<T>
    template<typename T>
    struct InternalEnumerator_1;
    // Nested type: ::System::Array::EmptyInternalEnumerator_1<T>
    template<typename T>
    class EmptyInternalEnumerator_1;
    // Nested type: ::System::Array::SorterObjectArray
    struct SorterObjectArray;
    // Nested type: ::System::Array::SorterGenericArray
    struct SorterGenericArray;
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: i_ICloneable
    inline ::System::ICloneable* i_ICloneable() noexcept {
      return reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IStructuralEquatable
    operator ::System::Collections::IStructuralEquatable() noexcept {
      return *reinterpret_cast<::System::Collections::IStructuralEquatable*>(this);
    }
    // Creating interface conversion operator: i_IStructuralEquatable
    inline ::System::Collections::IStructuralEquatable* i_IStructuralEquatable() noexcept {
      return reinterpret_cast<::System::Collections::IStructuralEquatable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IStructuralComparable
    operator ::System::Collections::IStructuralComparable() noexcept {
      return *reinterpret_cast<::System::Collections::IStructuralComparable*>(this);
    }
    // Creating interface conversion operator: i_IStructuralComparable
    inline ::System::Collections::IStructuralComparable* i_IStructuralComparable() noexcept {
      return reinterpret_cast<::System::Collections::IStructuralComparable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::IList
    operator ::System::Collections::IList() noexcept {
      return *reinterpret_cast<::System::Collections::IList*>(this);
    }
    // Creating interface conversion operator: i_IList
    inline ::System::Collections::IList* i_IList() noexcept {
      return reinterpret_cast<::System::Collections::IList*>(this);
    }
    // private System.Int32 System.Collections.ICollection.get_Count()
    // Offset: 0x1EB76F8
    int System_Collections_ICollection_get_Count();
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0x1EB7768
    bool System_Collections_IList_get_IsReadOnly();
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x1EB7770
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x1EB7904
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // public System.Int64 get_LongLength()
    // Offset: 0x1EB91C0
    int64_t get_LongLength();
    // public System.Boolean get_IsFixedSize()
    // Offset: 0x1EB9794
    bool get_IsFixedSize();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1EB979C
    bool get_IsReadOnly();
    // public System.Boolean get_IsSynchronized()
    // Offset: 0x1EB97A4
    bool get_IsSynchronized();
    // public System.Object get_SyncRoot()
    // Offset: 0x1EB97AC
    ::Il2CppObject* get_SyncRoot();
    // public System.Int32 get_Length()
    // Offset: 0x1EB76FC
    int get_Length();
    // public System.Int32 get_Rank()
    // Offset: 0x1EB7F68
    int get_Rank();
    // static public System.Array CreateInstance(System.Type elementType, System.Int64[] lengths)
    // Offset: 0x1EB7314
    static ::System::Array* CreateInstance(::System::Type* elementType, ::ArrayW<int64_t> lengths);
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<T> AsReadOnly(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Collections::ObjectModel::ReadOnlyCollection_1<T>* AsReadOnly(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::AsReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "AsReadOnly", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::ObjectModel::ReadOnlyCollection_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Resize(ref T[] array, System.Int32 newSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Resize(ByRef<::ArrayW<T>> array, int newSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Resize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(newSize)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), newSize);
    }
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x1EB7AB4
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x1EB7B20
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x1EB7BEC
    void System_Collections_IList_Clear();
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x1EB7D58
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x1EB7D5C
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x1EB7DC8
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x1EB7E34
    void System_Collections_IList_RemoveAt(int index);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1EB7EA0
    void CopyTo(::System::Array* array, int index);
    // public System.Object Clone()
    // Offset: 0x1EB846C
    ::Il2CppObject* Clone();
    // private System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)
    // Offset: 0x1EB8474
    int System_Collections_IStructuralComparable_CompareTo(::Il2CppObject* other, ::System::Collections::IComparer* comparer);
    // private System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    // Offset: 0x1EB8648
    bool System_Collections_IStructuralEquatable_Equals(::Il2CppObject* other, ::System::Collections::IEqualityComparer* comparer);
    // static System.Int32 CombineHashCodes(System.Int32 h1, System.Int32 h2)
    // Offset: 0x1EB87E4
    static int CombineHashCodes(int h1, int h2);
    // private System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)
    // Offset: 0x1EB87F0
    int System_Collections_IStructuralEquatable_GetHashCode(::System::Collections::IEqualityComparer* comparer);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value)
    // Offset: 0x1EB8960
    static int BinarySearch(::System::Array* array, ::Il2CppObject* value);
    // static public TOutput[] ConvertAll(TInput[] array, System.Converter`2<TInput,TOutput> converter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TInput, class TOutput>
    static ::ArrayW<TOutput> ConvertAll(::ArrayW<TInput> array, ::System::Converter_2<TInput, TOutput>* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::ConvertAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "ConvertAll", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(converter)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TOutput>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, converter);
    }
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int64 length)
    // Offset: 0x1EB8E78
    static void Copy(::System::Array* sourceArray, ::System::Array* destinationArray, int64_t length);
    // static public System.Void Copy(System.Array sourceArray, System.Int64 sourceIndex, System.Array destinationArray, System.Int64 destinationIndex, System.Int64 length)
    // Offset: 0x1EB9000
    static void Copy(::System::Array* sourceArray, int64_t sourceIndex, ::System::Array* destinationArray, int64_t destinationIndex, int64_t length);
    // public System.Void CopyTo(System.Array array, System.Int64 index)
    // Offset: 0x1EB9114
    void CopyTo(::System::Array* array, int64_t index);
    // static public System.Void ForEach(T[] array, System.Action`1<T> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ForEach(::ArrayW<T> array, ::System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::ForEach");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "ForEach", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, action);
    }
    // public System.Int64 GetLongLength(System.Int32 dimension)
    // Offset: 0x1EB9234
    int64_t GetLongLength(int dimension);
    // public System.Object GetValue(System.Int64 index)
    // Offset: 0x1EB924C
    ::Il2CppObject* GetValue(int64_t index);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2)
    // Offset: 0x1EB92F0
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x1EB945C
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2, int64_t index3);
    // public System.Object GetValue(System.Int64[] indices)
    // Offset: 0x1EB9618
    ::Il2CppObject* GetValue(::ArrayW<int64_t> indices);
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value)
    // Offset: 0x1EB97B0
    static int BinarySearch(::System::Array* array, int index, int length, ::Il2CppObject* value);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x1EB97B8
    static int BinarySearch(::System::Array* array, ::Il2CppObject* value, ::System::Collections::IComparer* comparer);
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x1EB8A14
    static int BinarySearch(::System::Array* array, int index, int length, ::Il2CppObject* value, ::System::Collections::IComparer* comparer);
    // static private System.Int32 GetMedian(System.Int32 low, System.Int32 hi)
    // Offset: 0x1EB9870
    static int GetMedian(int low, int hi);
    // static public System.Int32 BinarySearch(T[] array, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int BinarySearch(::ArrayW<T> array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 BinarySearch(T[] array, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int BinarySearch(::ArrayW<T> array, T value, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, comparer);
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int BinarySearch(::ArrayW<T> array, int index, int length, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, length, value);
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int BinarySearch(::ArrayW<T> array, int index, int length, T value, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, length, value, comparer);
    }
    // static public System.Int32 IndexOf(System.Array array, System.Object value)
    // Offset: 0x1EB7B3C
    static int IndexOf(::System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x1EB9AE4
    static int IndexOf(::System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1EB987C
    static int IndexOf(::System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 IndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(::ArrayW<T> array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(::ArrayW<T> array, T value, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex);
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOf(::ArrayW<T> array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value)
    // Offset: 0x1EB9B9C
    static int LastIndexOf(::System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x1EB9EB4
    static int LastIndexOf(::System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1EB9C48
    static int LastIndexOf(::System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 LastIndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int LastIndexOf(::ArrayW<T> array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int LastIndexOf(::ArrayW<T> array, T value, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex);
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int LastIndexOf(::ArrayW<T> array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Void Reverse(System.Array array)
    // Offset: 0x1EB9F50
    static void Reverse(::System::Array* array);
    // static public System.Void Reverse(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x1EB9FF0
    static void Reverse(::System::Array* array, int index, int length);
    // static public System.Void Reverse(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Reverse(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Reverse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Reverse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Reverse(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Reverse(::ArrayW<T> array, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Reverse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Reverse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, length);
    }
    // public System.Void SetValue(System.Object value, System.Int64 index)
    // Offset: 0x1EBA2A0
    void SetValue(::Il2CppObject* value, int64_t index);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2)
    // Offset: 0x1EBA34C
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x1EBA4D8
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2, int64_t index3);
    // public System.Void SetValue(System.Object value, System.Int64[] indices)
    // Offset: 0x1EBA6A4
    void SetValue(::Il2CppObject* value, ::ArrayW<int64_t> indices);
    // static public System.Void Sort(System.Array array)
    // Offset: 0x1EBA828
    static void Sort(::System::Array* array);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x1EBAB00
    static void Sort(::System::Array* array, int index, int length);
    // static public System.Void Sort(System.Array array, System.Collections.IComparer comparer)
    // Offset: 0x1EBAB14
    static void Sort(::System::Array* array, ::System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x1EBABC8
    static void Sort(::System::Array* array, int index, int length, ::System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items)
    // Offset: 0x1EBABDC
    static void Sort(::System::Array* keys, ::System::Array* items);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer)
    // Offset: 0x1EBAC90
    static void Sort(::System::Array* keys, ::System::Array* items, ::System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length)
    // Offset: 0x1EBAD48
    static void Sort(::System::Array* keys, ::System::Array* items, int index, int length);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x1EBA8D0
    static void Sort(::System::Array* keys, ::System::Array* items, int index, int length, ::System::Collections::IComparer* comparer);
    // static public System.Void Sort(T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Sort(::ArrayW<T> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Sort(::ArrayW<T> array, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, length);
    }
    // static public System.Void Sort(T[] array, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Sort(::ArrayW<T> array, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, comparer);
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Sort(::ArrayW<T> array, int index, int length, ::System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, length, comparer);
    }
    // static public System.Void Sort(T[] array, System.Comparison`1<T> comparison)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Sort(::ArrayW<T> array, ::System::Comparison_1<T>* comparison) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(comparison)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, comparison);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::ArrayW<TKey> keys, ::ArrayW<TValue> items) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys), ::il2cpp_utils::ExtractType(items)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, keys, items);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::ArrayW<TKey> keys, ::ArrayW<TValue> items, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys), ::il2cpp_utils::ExtractType(items), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, keys, items, index, length);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::ArrayW<TKey> keys, ::ArrayW<TValue> items, ::System::Collections::Generic::IComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys), ::il2cpp_utils::ExtractType(items), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, keys, items, comparer);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::ArrayW<TKey> keys, ::ArrayW<TValue> items, int index, int length, ::System::Collections::Generic::IComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keys), ::il2cpp_utils::ExtractType(items), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, keys, items, index, length, comparer);
    }
    // static public System.Boolean Exists(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool Exists(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Exists");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Exists", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Void Fill(T[] array, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Fill(::ArrayW<T> array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Fill");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Fill", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Void Fill(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Fill(::ArrayW<T> array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Fill");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Fill", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public T Find(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Find(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Find");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Find", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public T[] FindAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> FindAll(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindAll", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindIndex(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindIndex(::ArrayW<T> array, int startIndex, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindIndex(::ArrayW<T> array, int startIndex, int count, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, count, match);
    }
    // static public T FindLast(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T FindLast(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindLast");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindLast", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindLastIndex(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindLastIndex(::ArrayW<T> array, int startIndex, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int FindLastIndex(::ArrayW<T> array, int startIndex, int count, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, startIndex, count, match);
    }
    // static public System.Boolean TrueForAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool TrueForAll(::ArrayW<T> array, ::System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::TrueForAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "TrueForAll", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(match)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, match);
    }
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1EBAE4C
    ::System::Collections::IEnumerator* GetEnumerator();
    // System.Int32 InternalArray__ICollection_get_Count()
    // Offset: 0x1EBAEFC
    int InternalArray__ICollection_get_Count();
    // System.Boolean InternalArray__ICollection_get_IsReadOnly()
    // Offset: 0x1EBAF00
    bool InternalArray__ICollection_get_IsReadOnly();
    // System.Collections.Generic.IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::IEnumerator_1<T>* InternalArray__IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__IEnumerable_GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__IEnumerable_GetEnumerator", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___generic__method);
    }
    // System.Void InternalArray__ICollection_Clear()
    // Offset: 0x1EBAF08
    void InternalArray__ICollection_Clear();
    // System.Void InternalArray__ICollection_Add(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void InternalArray__ICollection_Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__ICollection_Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Add", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, item);
    }
    // System.Boolean InternalArray__ICollection_Remove(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__ICollection_Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Remove", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, item);
    }
    // System.Boolean InternalArray__ICollection_Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__ICollection_Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, item);
    }
    // System.Void InternalArray__ICollection_CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void InternalArray__ICollection_CopyTo(::ArrayW<T> array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__ICollection_CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_CopyTo", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(arrayIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, array, arrayIndex);
    }
    // T InternalArray__IReadOnlyList_get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T InternalArray__IReadOnlyList_get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__IReadOnlyList_get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__IReadOnlyList_get_Item", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, index);
    }
    // System.Int32 InternalArray__IReadOnlyCollection_get_Count()
    // Offset: 0x1EBAF74
    int InternalArray__IReadOnlyCollection_get_Count();
    // System.Void InternalArray__Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void InternalArray__Insert(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__Insert", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, index, item);
    }
    // System.Void InternalArray__RemoveAt(System.Int32 index)
    // Offset: 0x1EBAF78
    void InternalArray__RemoveAt(int index);
    // System.Int32 InternalArray__IndexOf(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    int InternalArray__IndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, item);
    }
    // T InternalArray__get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T InternalArray__get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__get_Item", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, index);
    }
    // System.Void InternalArray__set_Item(System.Int32 index, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void InternalArray__set_Item(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::InternalArray__set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalArray__set_Item", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, index, item);
    }
    // System.Void GetGenericValueImpl(System.Int32 pos, out T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void GetGenericValueImpl(int pos, ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::GetGenericValueImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericValueImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, pos, byref(value));
    }
    // System.Void SetGenericValueImpl(System.Int32 pos, ref T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetGenericValueImpl(int pos, ByRef<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::SetGenericValueImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGenericValueImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, pos, byref(value));
    }
    // private System.Int32 GetRank()
    // Offset: 0x1EBAFE4
    int GetRank();
    // public System.Int32 GetLength(System.Int32 dimension)
    // Offset: 0x1EB9230
    int GetLength(int dimension);
    // public System.Int32 GetLowerBound(System.Int32 dimension)
    // Offset: 0x1EB7C28
    int GetLowerBound(int dimension);
    // public System.Object GetValue(System.Int32[] indices)
    // Offset: 0x1EB9790
    ::Il2CppObject* GetValue(::ArrayW<int> indices);
    // public System.Void SetValue(System.Object value, System.Int32[] indices)
    // Offset: 0x1EBA824
    void SetValue(::Il2CppObject* value, ::ArrayW<int> indices);
    // System.Object GetValueImpl(System.Int32 pos)
    // Offset: 0x1EBAFE8
    ::Il2CppObject* GetValueImpl(int pos);
    // System.Void SetValueImpl(System.Object value, System.Int32 pos)
    // Offset: 0x1EBAFEC
    void SetValueImpl(::Il2CppObject* value, int pos);
    // static System.Boolean FastCopy(System.Array source, System.Int32 source_idx, System.Array dest, System.Int32 dest_idx, System.Int32 length)
    // Offset: 0x1EBAFF0
    static bool FastCopy(::System::Array* source, int source_idx, ::System::Array* dest, int dest_idx, int length);
    // static System.Array CreateInstanceImpl(System.Type elementType, System.Int32[] lengths, System.Int32[] bounds)
    // Offset: 0x1EBAFF4
    static ::System::Array* CreateInstanceImpl(::System::Type* elementType, ::ArrayW<int> lengths, ::ArrayW<int> bounds);
    // public System.Int32 GetUpperBound(System.Int32 dimension)
    // Offset: 0x1EBAFF8
    int GetUpperBound(int dimension);
    // public System.Object GetValue(System.Int32 index)
    // Offset: 0x1EB7774
    ::Il2CppObject* GetValue(int index);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2)
    // Offset: 0x1EB93C4
    ::Il2CppObject* GetValue(int index1, int index2);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x1EB9568
    ::Il2CppObject* GetValue(int index1, int index2, int index3);
    // public System.Void SetValue(System.Object value, System.Int32 index)
    // Offset: 0x1EB7914
    void SetValue(::Il2CppObject* value, int index);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2)
    // Offset: 0x1EBA430
    void SetValue(::Il2CppObject* value, int index1, int index2);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x1EBA5EC
    void SetValue(::Il2CppObject* value, int index1, int index2, int index3);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x1EBB03C
    static ::System::Array* UnsafeCreateInstance(::System::Type* elementType, ::ArrayW<int> lengths, ::ArrayW<int> lowerBounds);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x1EBB3E8
    static ::System::Array* UnsafeCreateInstance(::System::Type* elementType, int length1, int length2);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths)
    // Offset: 0x1EBB484
    static ::System::Array* UnsafeCreateInstance(::System::Type* elementType, ::ArrayW<int> lengths);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length)
    // Offset: 0x1EBB488
    static ::System::Array* CreateInstance(::System::Type* elementType, int length);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x1EBB3EC
    static ::System::Array* CreateInstance(::System::Type* elementType, int length1, int length2);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2, System.Int32 length3)
    // Offset: 0x1EBB510
    static ::System::Array* CreateInstance(::System::Type* elementType, int length1, int length2, int length3);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32[] lengths)
    // Offset: 0x1EB747C
    static ::System::Array* CreateInstance(::System::Type* elementType, ::ArrayW<int> lengths);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x1EBB040
    static ::System::Array* CreateInstance(::System::Type* elementType, ::ArrayW<int> lengths, ::ArrayW<int> lowerBounds);
    // static public System.Void Clear(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x1EB7C2C
    static void Clear(::System::Array* array, int index, int length);
    // static private System.Void ClearInternal(System.Array a, System.Int32 index, System.Int32 count)
    // Offset: 0x1EBB5C0
    static void ClearInternal(::System::Array* a, int index, int count);
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int32 length)
    // Offset: 0x1EB8F24
    static void Copy(::System::Array* sourceArray, ::System::Array* destinationArray, int length);
    // static public System.Void Copy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x1EB7F6C
    static void Copy(::System::Array* sourceArray, int sourceIndex, ::System::Array* destinationArray, int destinationIndex, int length);
    // static private System.Exception CreateArrayTypeMismatchException()
    // Offset: 0x1EBB5C4
    static ::System::Exception* CreateArrayTypeMismatchException();
    // static private System.Boolean CanAssignArrayElement(System.Type source, System.Type target)
    // Offset: 0x1EBB61C
    static bool CanAssignArrayElement(::System::Type* source, ::System::Type* target);
    // static public System.Void ConstrainedCopy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x1EBB758
    static void ConstrainedCopy(::System::Array* sourceArray, int sourceIndex, ::System::Array* destinationArray, int destinationIndex, int length);
    // static public T[] Empty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> Empty() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::Empty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Empty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // public System.Void Initialize()
    // Offset: 0x1EBB75C
    void Initialize();
    // static private System.Int32 IndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOfImpl(::ArrayW<T> array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::IndexOfImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "IndexOfImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static private System.Int32 LastIndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int LastIndexOfImpl(::ArrayW<T> array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::LastIndexOfImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "LastIndexOfImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static private System.Void SortImpl(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x1EBAD50
    static void SortImpl(::System::Array* keys, ::System::Array* items, int index, int length, ::System::Collections::IComparer* comparer);
    // static T UnsafeLoad(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T UnsafeLoad(::ArrayW<T> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::UnsafeLoad");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "UnsafeLoad", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index);
    }
    // static System.Void UnsafeStore(T[] array, System.Int32 index, T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void UnsafeStore(::ArrayW<T> array, int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::UnsafeStore");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "UnsafeStore", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index, value);
    }
    // static R UnsafeMov(S instance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class S, class R>
    static R UnsafeMov(S instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::UnsafeMov");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "UnsafeMov", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<S>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<R>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<S>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<R>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<R, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, instance);
    }
    // private System.Void .ctor()
    // Offset: 0x1EBAEF4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Array* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Array::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Array*, creationType>()));
    }
  }; // System.Array
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Array::System_Collections_ICollection_get_Count
// Il2CppName: System.Collections.ICollection.get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::System_Collections_ICollection_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.ICollection.get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_get_IsReadOnly
// Il2CppName: System.Collections.IList.get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)()>(&System::Array::System_Collections_IList_get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_get_Item
// Il2CppName: System.Collections.IList.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int)>(&System::Array::System_Collections_IList_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_set_Item
// Il2CppName: System.Collections.IList.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(int, ::Il2CppObject*)>(&System::Array::System_Collections_IList_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Array::get_LongLength
// Il2CppName: get_LongLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Array::*)()>(&System::Array::get_LongLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_LongLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_IsFixedSize
// Il2CppName: get_IsFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)()>(&System::Array::get_IsFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_IsFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)()>(&System::Array::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_IsSynchronized
// Il2CppName: get_IsSynchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)()>(&System::Array::get_IsSynchronized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_IsSynchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)()>(&System::Array::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::get_Rank
// Il2CppName: get_Rank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::get_Rank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "get_Rank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int64_t>)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths});
  }
};
// Writing MetadataGetter for method: System::Array::AsReadOnly
// Il2CppName: AsReadOnly
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::System_Collections_IList_Add
// Il2CppName: System.Collections.IList.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(::Il2CppObject*)>(&System::Array::System_Collections_IList_Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_Contains
// Il2CppName: System.Collections.IList.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)(::Il2CppObject*)>(&System::Array::System_Collections_IList_Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_Clear
// Il2CppName: System.Collections.IList.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)()>(&System::Array::System_Collections_IList_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_IndexOf
// Il2CppName: System.Collections.IList.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(::Il2CppObject*)>(&System::Array::System_Collections_IList_IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_Insert
// Il2CppName: System.Collections.IList.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(int, ::Il2CppObject*)>(&System::Array::System_Collections_IList_Insert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_Remove
// Il2CppName: System.Collections.IList.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*)>(&System::Array::System_Collections_IList_Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IList_RemoveAt
// Il2CppName: System.Collections.IList.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(int)>(&System::Array::System_Collections_IList_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IList.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Array::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::System::Array*, int)>(&System::Array::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Array::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)()>(&System::Array::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IStructuralComparable_CompareTo
// Il2CppName: System.Collections.IStructuralComparable.CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(::Il2CppObject*, ::System::Collections::IComparer*)>(&System::Array::System_Collections_IStructuralComparable_CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IStructuralComparable.CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IStructuralEquatable_Equals
// Il2CppName: System.Collections.IStructuralEquatable.Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)(::Il2CppObject*, ::System::Collections::IEqualityComparer*)>(&System::Array::System_Collections_IStructuralEquatable_Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IEqualityComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IStructuralEquatable.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::CombineHashCodes
// Il2CppName: CombineHashCodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&System::Array::CombineHashCodes)> {
  static const MethodInfo* get() {
    static auto* h1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CombineHashCodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{h1, h2});
  }
};
// Writing MetadataGetter for method: System::Array::System_Collections_IStructuralEquatable_GetHashCode
// Il2CppName: System.Collections.IStructuralEquatable.GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(::System::Collections::IEqualityComparer*)>(&System::Array::System_Collections_IStructuralEquatable_GetHashCode)> {
  static const MethodInfo* get() {
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IEqualityComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "System.Collections.IStructuralEquatable.GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparer});
  }
};
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*)>(&System::Array::BinarySearch)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "BinarySearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value});
  }
};
// Writing MetadataGetter for method: System::Array::ConvertAll
// Il2CppName: ConvertAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, int64_t)>(&System::Array::Copy)> {
  static const MethodInfo* get() {
    static auto* sourceArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* destinationArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceArray, destinationArray, length});
  }
};
// Writing MetadataGetter for method: System::Array::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int64_t, ::System::Array*, int64_t, int64_t)>(&System::Array::Copy)> {
  static const MethodInfo* get() {
    static auto* sourceArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* destinationArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* destinationIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceArray, sourceIndex, destinationArray, destinationIndex, length});
  }
};
// Writing MetadataGetter for method: System::Array::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::System::Array*, int64_t)>(&System::Array::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Array::ForEach
// Il2CppName: ForEach
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::GetLongLength
// Il2CppName: GetLongLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Array::*)(int)>(&System::Array::GetLongLength)> {
  static const MethodInfo* get() {
    static auto* dimension = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetLongLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimension});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int64_t)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int64_t, int64_t)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index1, index2});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int64_t, int64_t, int64_t)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index3 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index1, index2, index3});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(::ArrayW<int64_t>)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, int, int, ::Il2CppObject*)>(&System::Array::BinarySearch)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "BinarySearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length, value});
  }
};
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*, ::System::Collections::IComparer*)>(&System::Array::BinarySearch)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "BinarySearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, int, int, ::Il2CppObject*, ::System::Collections::IComparer*)>(&System::Array::BinarySearch)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "BinarySearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length, value, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::GetMedian
// Il2CppName: GetMedian
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&System::Array::GetMedian)> {
  static const MethodInfo* get() {
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetMedian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{low, hi});
  }
};
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::BinarySearch
// Il2CppName: BinarySearch
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*)>(&System::Array::IndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value});
  }
};
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*, int)>(&System::Array::IndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value, startIndex});
  }
};
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*, int, int)>(&System::Array::IndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*)>(&System::Array::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value});
  }
};
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*, int)>(&System::Array::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value, startIndex});
  }
};
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Array*, ::Il2CppObject*, int, int)>(&System::Array::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::LastIndexOf
// Il2CppName: LastIndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Reverse
// Il2CppName: Reverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*)>(&System::Array::Reverse)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Reverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: System::Array::Reverse
// Il2CppName: Reverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, int)>(&System::Array::Reverse)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Reverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length});
  }
};
// Writing MetadataGetter for method: System::Array::Reverse
// Il2CppName: Reverse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Reverse
// Il2CppName: Reverse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int64_t)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int64_t, int64_t)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index1, index2});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int64_t, int64_t, int64_t)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* index3 = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index1, index2, index3});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, ::ArrayW<int64_t>)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, indices});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, int)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Collections::IComparer*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, int, ::System::Collections::IComparer*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* items = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys, items});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, ::System::Collections::IComparer*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* items = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys, items, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, int, int)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* items = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys, items, index, length});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, int, int, ::System::Collections::IComparer*)>(&System::Array::Sort)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* items = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Sort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys, items, index, length, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Sort
// Il2CppName: Sort
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Exists
// Il2CppName: Exists
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Fill
// Il2CppName: Fill
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Fill
// Il2CppName: Fill
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Find
// Il2CppName: Find
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindAll
// Il2CppName: FindAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindIndex
// Il2CppName: FindIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindIndex
// Il2CppName: FindIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindIndex
// Il2CppName: FindIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindLast
// Il2CppName: FindLast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindLastIndex
// Il2CppName: FindLastIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindLastIndex
// Il2CppName: FindLastIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::FindLastIndex
// Il2CppName: FindLastIndex
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::TrueForAll
// Il2CppName: TrueForAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Array::*)()>(&System::Array::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_get_Count
// Il2CppName: InternalArray__ICollection_get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::InternalArray__ICollection_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "InternalArray__ICollection_get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_get_IsReadOnly
// Il2CppName: InternalArray__ICollection_get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Array::*)()>(&System::Array::InternalArray__ICollection_get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "InternalArray__ICollection_get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__IEnumerable_GetEnumerator
// Il2CppName: InternalArray__IEnumerable_GetEnumerator
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_Clear
// Il2CppName: InternalArray__ICollection_Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)()>(&System::Array::InternalArray__ICollection_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "InternalArray__ICollection_Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_Add
// Il2CppName: InternalArray__ICollection_Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_Remove
// Il2CppName: InternalArray__ICollection_Remove
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_Contains
// Il2CppName: InternalArray__ICollection_Contains
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__ICollection_CopyTo
// Il2CppName: InternalArray__ICollection_CopyTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__IReadOnlyList_get_Item
// Il2CppName: InternalArray__IReadOnlyList_get_Item
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__IReadOnlyCollection_get_Count
// Il2CppName: InternalArray__IReadOnlyCollection_get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::InternalArray__IReadOnlyCollection_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "InternalArray__IReadOnlyCollection_get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__Insert
// Il2CppName: InternalArray__Insert
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__RemoveAt
// Il2CppName: InternalArray__RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(int)>(&System::Array::InternalArray__RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "InternalArray__RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Array::InternalArray__IndexOf
// Il2CppName: InternalArray__IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__get_Item
// Il2CppName: InternalArray__get_Item
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::InternalArray__set_Item
// Il2CppName: InternalArray__set_Item
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::GetGenericValueImpl
// Il2CppName: GetGenericValueImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::SetGenericValueImpl
// Il2CppName: SetGenericValueImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::GetRank
// Il2CppName: GetRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)()>(&System::Array::GetRank)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(int)>(&System::Array::GetLength)> {
  static const MethodInfo* get() {
    static auto* dimension = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimension});
  }
};
// Writing MetadataGetter for method: System::Array::GetLowerBound
// Il2CppName: GetLowerBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(int)>(&System::Array::GetLowerBound)> {
  static const MethodInfo* get() {
    static auto* dimension = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetLowerBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimension});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(::ArrayW<int>)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, ::ArrayW<int>)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, indices});
  }
};
// Writing MetadataGetter for method: System::Array::GetValueImpl
// Il2CppName: GetValueImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int)>(&System::Array::GetValueImpl)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValueImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: System::Array::SetValueImpl
// Il2CppName: SetValueImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int)>(&System::Array::SetValueImpl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValueImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, pos});
  }
};
// Writing MetadataGetter for method: System::Array::FastCopy
// Il2CppName: FastCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Array*, int, ::System::Array*, int, int)>(&System::Array::FastCopy)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* source_idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* dest_idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "FastCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, source_idx, dest, dest_idx, length});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstanceImpl
// Il2CppName: CreateInstanceImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int>, ::ArrayW<int>)>(&System::Array::CreateInstanceImpl)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* bounds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstanceImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths, bounds});
  }
};
// Writing MetadataGetter for method: System::Array::GetUpperBound
// Il2CppName: GetUpperBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Array::*)(int)>(&System::Array::GetUpperBound)> {
  static const MethodInfo* get() {
    static auto* dimension = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetUpperBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimension});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int, int)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index1, index2});
  }
};
// Writing MetadataGetter for method: System::Array::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Array::*)(int, int, int)>(&System::Array::GetValue)> {
  static const MethodInfo* get() {
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index1, index2, index3});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int, int)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index1, index2});
  }
};
// Writing MetadataGetter for method: System::Array::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)(::Il2CppObject*, int, int, int)>(&System::Array::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* index1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, index1, index2, index3});
  }
};
// Writing MetadataGetter for method: System::Array::UnsafeCreateInstance
// Il2CppName: UnsafeCreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int>, ::ArrayW<int>)>(&System::Array::UnsafeCreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lowerBounds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "UnsafeCreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths, lowerBounds});
  }
};
// Writing MetadataGetter for method: System::Array::UnsafeCreateInstance
// Il2CppName: UnsafeCreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, int, int)>(&System::Array::UnsafeCreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* length1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "UnsafeCreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, length1, length2});
  }
};
// Writing MetadataGetter for method: System::Array::UnsafeCreateInstance
// Il2CppName: UnsafeCreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int>)>(&System::Array::UnsafeCreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "UnsafeCreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, int)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, length});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, int, int)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* length1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, length1, length2});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, int, int, int)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* length1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, length1, length2, length3});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int>)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths});
  }
};
// Writing MetadataGetter for method: System::Array::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Array* (*)(::System::Type*, ::ArrayW<int>, ::ArrayW<int>)>(&System::Array::CreateInstance)> {
  static const MethodInfo* get() {
    static auto* elementType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* lengths = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lowerBounds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementType, lengths, lowerBounds});
  }
};
// Writing MetadataGetter for method: System::Array::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, int)>(&System::Array::Clear)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index, length});
  }
};
// Writing MetadataGetter for method: System::Array::ClearInternal
// Il2CppName: ClearInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, int)>(&System::Array::ClearInternal)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "ClearInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, index, count});
  }
};
// Writing MetadataGetter for method: System::Array::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, int)>(&System::Array::Copy)> {
  static const MethodInfo* get() {
    static auto* sourceArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* destinationArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceArray, destinationArray, length});
  }
};
// Writing MetadataGetter for method: System::Array::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, ::System::Array*, int, int)>(&System::Array::Copy)> {
  static const MethodInfo* get() {
    static auto* sourceArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destinationArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* destinationIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceArray, sourceIndex, destinationArray, destinationIndex, length});
  }
};
// Writing MetadataGetter for method: System::Array::CreateArrayTypeMismatchException
// Il2CppName: CreateArrayTypeMismatchException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Array::CreateArrayTypeMismatchException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CreateArrayTypeMismatchException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::CanAssignArrayElement
// Il2CppName: CanAssignArrayElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&System::Array::CanAssignArrayElement)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "CanAssignArrayElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, target});
  }
};
// Writing MetadataGetter for method: System::Array::ConstrainedCopy
// Il2CppName: ConstrainedCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, int, ::System::Array*, int, int)>(&System::Array::ConstrainedCopy)> {
  static const MethodInfo* get() {
    static auto* sourceArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destinationArray = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* destinationIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "ConstrainedCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceArray, sourceIndex, destinationArray, destinationIndex, length});
  }
};
// Writing MetadataGetter for method: System::Array::Empty
// Il2CppName: Empty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Array::*)()>(&System::Array::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Array::IndexOfImpl
// Il2CppName: IndexOfImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::LastIndexOfImpl
// Il2CppName: LastIndexOfImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::SortImpl
// Il2CppName: SortImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Array*, ::System::Array*, int, int, ::System::Collections::IComparer*)>(&System::Array::SortImpl)> {
  static const MethodInfo* get() {
    static auto* keys = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* items = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Collections", "IComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Array*), "SortImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys, items, index, length, comparer});
  }
};
// Writing MetadataGetter for method: System::Array::UnsafeLoad
// Il2CppName: UnsafeLoad
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::UnsafeStore
// Il2CppName: UnsafeStore
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::UnsafeMov
// Il2CppName: UnsafeMov
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Array::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
