// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ConsoleKey
#include "System/ConsoleKey.hpp"
// Including type: System.ConsoleModifiers
#include "System/ConsoleModifiers.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Forward declaring type: ConsoleKeyInfo
  struct ConsoleKeyInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::ConsoleKeyInfo, "System", "ConsoleKeyInfo");
// Type namespace: System
namespace System {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.ConsoleKeyInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct ConsoleKeyInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Char _keyChar
    // Size: 0x2
    // Offset: 0x0
    ::Il2CppChar keyChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: keyChar and: key
    char __padding0[0x2] = {};
    // private System.ConsoleKey _key
    // Size: 0x4
    // Offset: 0x4
    ::System::ConsoleKey key;
    // Field size check
    static_assert(sizeof(::System::ConsoleKey) == 0x4);
    // private System.ConsoleModifiers _mods
    // Size: 0x4
    // Offset: 0x8
    ::System::ConsoleModifiers mods;
    // Field size check
    static_assert(sizeof(::System::ConsoleModifiers) == 0x4);
    public:
    // Creating value type constructor for type: ConsoleKeyInfo
    constexpr ConsoleKeyInfo(::Il2CppChar keyChar_ = {}, ::System::ConsoleKey key_ = {}, ::System::ConsoleModifiers mods_ = {}) noexcept : keyChar{keyChar_}, key{key_}, mods{mods_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Char _keyChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__keyChar();
    // Get instance field reference: private System.ConsoleKey _key
    [[deprecated("Use field access instead!")]] ::System::ConsoleKey& dyn__key();
    // Get instance field reference: private System.ConsoleModifiers _mods
    [[deprecated("Use field access instead!")]] ::System::ConsoleModifiers& dyn__mods();
    // public System.Char get_KeyChar()
    // Offset: 0x1DBE3AC
    ::Il2CppChar get_KeyChar();
    // public System.ConsoleKey get_Key()
    // Offset: 0x1DBE3B4
    ::System::ConsoleKey get_Key();
    // public System.Void .ctor(System.Char keyChar, System.ConsoleKey key, System.Boolean shift, System.Boolean alt, System.Boolean control)
    // Offset: 0x1DBE2B0
    ConsoleKeyInfo(::Il2CppChar keyChar, ::System::ConsoleKey key, bool shift, bool alt, bool control);
    // public System.Boolean Equals(System.ConsoleKeyInfo obj)
    // Offset: 0x1DBE464
    bool Equals(::System::ConsoleKeyInfo obj);
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x1DBE3BC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1DBE498
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.ConsoleKeyInfo
  #pragma pack(pop)
  static check_size<sizeof(ConsoleKeyInfo), 8 + sizeof(::System::ConsoleModifiers)> __System_ConsoleKeyInfoSizeCheck;
  static_assert(sizeof(ConsoleKeyInfo) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ConsoleKeyInfo::get_KeyChar
// Il2CppName: get_KeyChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::ConsoleKeyInfo::*)()>(&System::ConsoleKeyInfo::get_KeyChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ConsoleKeyInfo), "get_KeyChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ConsoleKeyInfo::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ConsoleKey (System::ConsoleKeyInfo::*)()>(&System::ConsoleKeyInfo::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ConsoleKeyInfo), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ConsoleKeyInfo::ConsoleKeyInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ConsoleKeyInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ConsoleKeyInfo::*)(::System::ConsoleKeyInfo)>(&System::ConsoleKeyInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "ConsoleKeyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ConsoleKeyInfo), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ConsoleKeyInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ConsoleKeyInfo::*)(::Il2CppObject*)>(&System::ConsoleKeyInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ConsoleKeyInfo), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::ConsoleKeyInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ConsoleKeyInfo::*)()>(&System::ConsoleKeyInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ConsoleKeyInfo), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
