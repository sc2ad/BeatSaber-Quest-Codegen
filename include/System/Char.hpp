// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: UnicodeCategory
  struct UnicodeCategory;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Char
  struct Char;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Char, "System", "Char");
// Type namespace: System
namespace System {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Char
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1037F4C
  struct Char/*, public ::System::ValueType, public ::System::IComparable_1<::Il2CppChar>, public ::System::IEquatable_1<::Il2CppChar>, public ::System::IComparable, public ::System::IConvertible*/ {
    public:
    public:
    // System.Char m_value
    // Size: 0x2
    // Offset: 0x0
    ::Il2CppChar m_value;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    public:
    // Creating value type constructor for type: Char
    constexpr Char(::Il2CppChar m_value_ = {}) noexcept : m_value{m_value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::Il2CppChar>
    operator ::System::IComparable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: i_Il2CppChar
    inline ::System::IComparable_1<::Il2CppChar>* i_Il2CppChar() noexcept {
      return reinterpret_cast<::System::IComparable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Il2CppChar>
    operator ::System::IEquatable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: i_IComparable
    inline ::System::IComparable* i_IComparable() noexcept {
      return reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IConvertible
    operator ::System::IConvertible() noexcept {
      return *reinterpret_cast<::System::IConvertible*>(this);
    }
    // Creating interface conversion operator: i_IConvertible
    inline ::System::IConvertible* i_IConvertible() noexcept {
      return reinterpret_cast<::System::IConvertible*>(this);
    }
    // Creating conversion operator: operator ::Il2CppChar
    constexpr operator ::Il2CppChar() const noexcept {
      return m_value;
    }
    // static field const value: static public System.Char MaxValue
    static constexpr const ::Il2CppChar MaxValue = u'\uffff';
    // Get static field: static public System.Char MaxValue
    static ::Il2CppChar _get_MaxValue();
    // Set static field: static public System.Char MaxValue
    static void _set_MaxValue(::Il2CppChar value);
    // static field const value: static public System.Char MinValue
    static constexpr const ::Il2CppChar MinValue = u'\u0000';
    // Get static field: static public System.Char MinValue
    static ::Il2CppChar _get_MinValue();
    // Set static field: static public System.Char MinValue
    static void _set_MinValue(::Il2CppChar value);
    // Get static field: static private readonly System.Byte[] categoryForLatin1
    static ::ArrayW<uint8_t> _get_categoryForLatin1();
    // Set static field: static private readonly System.Byte[] categoryForLatin1
    static void _set_categoryForLatin1(::ArrayW<uint8_t> value);
    // static field const value: static System.Int32 UNICODE_PLANE00_END
    static constexpr const int UNICODE_PLANE00_END = 65535;
    // Get static field: static System.Int32 UNICODE_PLANE00_END
    static int _get_UNICODE_PLANE00_END();
    // Set static field: static System.Int32 UNICODE_PLANE00_END
    static void _set_UNICODE_PLANE00_END(int value);
    // static field const value: static System.Int32 UNICODE_PLANE01_START
    static constexpr const int UNICODE_PLANE01_START = 65536;
    // Get static field: static System.Int32 UNICODE_PLANE01_START
    static int _get_UNICODE_PLANE01_START();
    // Set static field: static System.Int32 UNICODE_PLANE01_START
    static void _set_UNICODE_PLANE01_START(int value);
    // static field const value: static System.Int32 UNICODE_PLANE16_END
    static constexpr const int UNICODE_PLANE16_END = 1114111;
    // Get static field: static System.Int32 UNICODE_PLANE16_END
    static int _get_UNICODE_PLANE16_END();
    // Set static field: static System.Int32 UNICODE_PLANE16_END
    static void _set_UNICODE_PLANE16_END(int value);
    // static field const value: static System.Int32 HIGH_SURROGATE_START
    static constexpr const int HIGH_SURROGATE_START = 55296;
    // Get static field: static System.Int32 HIGH_SURROGATE_START
    static int _get_HIGH_SURROGATE_START();
    // Set static field: static System.Int32 HIGH_SURROGATE_START
    static void _set_HIGH_SURROGATE_START(int value);
    // static field const value: static System.Int32 LOW_SURROGATE_END
    static constexpr const int LOW_SURROGATE_END = 57343;
    // Get static field: static System.Int32 LOW_SURROGATE_END
    static int _get_LOW_SURROGATE_END();
    // Set static field: static System.Int32 LOW_SURROGATE_END
    static void _set_LOW_SURROGATE_END(int value);
    // Get instance field reference: System.Char m_value
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_m_value();
    // static private System.Void .cctor()
    // Offset: 0x1EC6200
    static void _cctor();
    // static private System.Boolean IsLatin1(System.Char ch)
    // Offset: 0x1EC3C00
    static bool IsLatin1(::Il2CppChar ch);
    // static private System.Boolean IsAscii(System.Char ch)
    // Offset: 0x1EC3C10
    static bool IsAscii(::Il2CppChar ch);
    // static private System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(System.Char ch)
    // Offset: 0x1EC3C20
    static ::System::Globalization::UnicodeCategory GetLatin1UnicodeCategory(::Il2CppChar ch);
    // public System.Boolean Equals(System.Char obj)
    // Offset: 0x1EC3D4C
    bool Equals(::Il2CppChar obj);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x1EC3D5C
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Char value)
    // Offset: 0x1EC3E2C
    int CompareTo(::Il2CppChar value);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0x1EC3EC0
    ::StringW ToString(::System::IFormatProvider* provider);
    // static public System.String ToString(System.Char c)
    // Offset: 0x1EC3EAC
    static ::StringW ToString(::Il2CppChar c);
    // static public System.Char Parse(System.String s)
    // Offset: 0x1EC3F34
    static ::Il2CppChar Parse(::StringW s);
    // static public System.Boolean TryParse(System.String s, out System.Char result)
    // Offset: 0x1EC4018
    static bool TryParse(::StringW s, ByRef<::Il2CppChar> result);
    // static public System.Boolean IsDigit(System.Char c)
    // Offset: 0x1EC4064
    static bool IsDigit(::Il2CppChar c);
    // static System.Boolean CheckLetter(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1EC4118
    static bool CheckLetter(::System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetter(System.Char c)
    // Offset: 0x1EC4124
    static bool IsLetter(::Il2CppChar c);
    // static private System.Boolean IsWhiteSpaceLatin1(System.Char c)
    // Offset: 0x1EC4244
    static bool IsWhiteSpaceLatin1(::Il2CppChar c);
    // static public System.Boolean IsWhiteSpace(System.Char c)
    // Offset: 0x1EC19AC
    static bool IsWhiteSpace(::Il2CppChar c);
    // static public System.Boolean IsUpper(System.Char c)
    // Offset: 0x1EC428C
    static bool IsUpper(::Il2CppChar c);
    // static public System.Boolean IsLower(System.Char c)
    // Offset: 0x1EC4388
    static bool IsLower(::Il2CppChar c);
    // static System.Boolean CheckPunctuation(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1EC4484
    static bool CheckPunctuation(::System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsPunctuation(System.Char c)
    // Offset: 0x1EC4494
    static bool IsPunctuation(::Il2CppChar c);
    // static System.Boolean CheckLetterOrDigit(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1EC4580
    static bool CheckLetterOrDigit(::System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetterOrDigit(System.Char c)
    // Offset: 0x1EC459C
    static bool IsLetterOrDigit(::Il2CppChar c);
    // static public System.Char ToUpper(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x1EC4698
    static ::Il2CppChar ToUpper(::Il2CppChar c, ::System::Globalization::CultureInfo* culture);
    // static public System.Char ToUpper(System.Char c)
    // Offset: 0x1EC4744
    static ::Il2CppChar ToUpper(::Il2CppChar c);
    // static public System.Char ToUpperInvariant(System.Char c)
    // Offset: 0x1EC47DC
    static ::Il2CppChar ToUpperInvariant(::Il2CppChar c);
    // static public System.Char ToLower(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x1EC4874
    static ::Il2CppChar ToLower(::Il2CppChar c, ::System::Globalization::CultureInfo* culture);
    // static public System.Char ToLower(System.Char c)
    // Offset: 0x1EC4920
    static ::Il2CppChar ToLower(::Il2CppChar c);
    // static public System.Char ToLowerInvariant(System.Char c)
    // Offset: 0x1EC49B8
    static ::Il2CppChar ToLowerInvariant(::Il2CppChar c);
    // public System.TypeCode GetTypeCode()
    // Offset: 0x1EC4A50
    ::System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x1EC4A58
    bool System_IConvertible_ToBoolean(::System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x1EC4B48
    ::Il2CppChar System_IConvertible_ToChar(::System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x1EC4B50
    int8_t System_IConvertible_ToSByte(::System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x1EC4BBC
    uint8_t System_IConvertible_ToByte(::System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x1EC4C28
    int16_t System_IConvertible_ToInt16(::System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x1EC4C94
    uint16_t System_IConvertible_ToUInt16(::System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x1EC4D00
    int System_IConvertible_ToInt32(::System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x1EC4D6C
    uint System_IConvertible_ToUInt32(::System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x1EC4DD8
    int64_t System_IConvertible_ToInt64(::System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x1EC4E44
    uint64_t System_IConvertible_ToUInt64(::System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x1EC4EB0
    float System_IConvertible_ToSingle(::System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x1EC4FA0
    double System_IConvertible_ToDouble(::System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x1EC5090
    ::System::Decimal System_IConvertible_ToDecimal(::System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x1EC5180
    ::System::DateTime System_IConvertible_ToDateTime(::System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x1EC5270
    ::Il2CppObject* System_IConvertible_ToType(::System::Type* type, ::System::IFormatProvider* provider);
    // static public System.Boolean IsControl(System.Char c)
    // Offset: 0x1EC5320
    static bool IsControl(::Il2CppChar c);
    // static public System.Boolean IsLetterOrDigit(System.String s, System.Int32 index)
    // Offset: 0x1EC53E4
    static bool IsLetterOrDigit(::StringW s, int index);
    // static System.Boolean CheckNumber(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1EC5578
    static bool CheckNumber(::System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsNumber(System.Char c)
    // Offset: 0x1EC5588
    static bool IsNumber(::Il2CppChar c);
    // static public System.Boolean IsNumber(System.String s, System.Int32 index)
    // Offset: 0x1EC56A8
    static bool IsNumber(::StringW s, int index);
    // static System.Boolean CheckSeparator(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1EC5860
    static bool CheckSeparator(::System::Globalization::UnicodeCategory uc);
    // static private System.Boolean IsSeparatorLatin1(System.Char c)
    // Offset: 0x1EC5870
    static bool IsSeparatorLatin1(::Il2CppChar c);
    // static public System.Boolean IsSeparator(System.Char c)
    // Offset: 0x1EC5884
    static bool IsSeparator(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.Char c)
    // Offset: 0x1EC5974
    static bool IsSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.String s, System.Int32 index)
    // Offset: 0x1EC5984
    static bool IsSurrogate(::StringW s, int index);
    // static public System.Boolean IsWhiteSpace(System.String s, System.Int32 index)
    // Offset: 0x1EC5A84
    static bool IsWhiteSpace(::StringW s, int index);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.Char c)
    // Offset: 0x1EC5BF4
    static ::System::Globalization::UnicodeCategory GetUnicodeCategory(::Il2CppChar c);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.String s, System.Int32 index)
    // Offset: 0x1EC5CB0
    static ::System::Globalization::UnicodeCategory GetUnicodeCategory(::StringW s, int index);
    // static public System.Boolean IsHighSurrogate(System.Char c)
    // Offset: 0x1EC5E20
    static bool IsHighSurrogate(::Il2CppChar c);
    // static public System.Boolean IsHighSurrogate(System.String s, System.Int32 index)
    // Offset: 0x1EC5E30
    static bool IsHighSurrogate(::StringW s, int index);
    // static public System.Boolean IsLowSurrogate(System.Char c)
    // Offset: 0x1EC5F34
    static bool IsLowSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogatePair(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x1EC5F44
    static bool IsSurrogatePair(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // static public System.String ConvertFromUtf32(System.Int32 utf32)
    // Offset: 0x1EC5F68
    static ::StringW ConvertFromUtf32(int utf32);
    // static public System.Int32 ConvertToUtf32(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x1EC60BC
    static int ConvertToUtf32(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1EC3CB8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1EC3CC4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0x1EC3E38
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Char
  #pragma pack(pop)
  static check_size<sizeof(Char), 0 + sizeof(::Il2CppChar)> __System_CharSizeCheck;
  static_assert(sizeof(Char) == 0x2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Char::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Char::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Char), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Char::IsLatin1
// Il2CppName: IsLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsLatin1)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Char::IsAscii
// Il2CppName: IsAscii
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsAscii)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Char::GetLatin1UnicodeCategory
// Il2CppName: GetLatin1UnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::UnicodeCategory (*)(::Il2CppChar)>(&System::Char::GetLatin1UnicodeCategory)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "GetLatin1UnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Char::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Char::*)(::Il2CppChar)>(&System::Char::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Char::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Char::*)(::Il2CppObject*)>(&System::Char::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Char::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Char::*)(::Il2CppChar)>(&System::Char::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Char::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Char::*)(::System::IFormatProvider*)>(&System::Char::ToString)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppChar)>(&System::Char::ToString)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::StringW)>(&System::Char::Parse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::Char::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::Il2CppChar>)>(&System::Char::TryParse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, result});
  }
};
// Writing MetadataGetter for method: System::Char::IsDigit
// Il2CppName: IsDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsDigit)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::CheckLetter
// Il2CppName: CheckLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Char::CheckLetter)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CheckLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Char::IsLetter
// Il2CppName: IsLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsLetter)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsWhiteSpaceLatin1
// Il2CppName: IsWhiteSpaceLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsWhiteSpaceLatin1)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsWhiteSpaceLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsWhiteSpace)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsUpper
// Il2CppName: IsUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsUpper)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsLower
// Il2CppName: IsLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsLower)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::CheckPunctuation
// Il2CppName: CheckPunctuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Char::CheckPunctuation)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CheckPunctuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Char::IsPunctuation
// Il2CppName: IsPunctuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsPunctuation)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsPunctuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::CheckLetterOrDigit
// Il2CppName: CheckLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Char::CheckLetterOrDigit)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CheckLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Char::IsLetterOrDigit
// Il2CppName: IsLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsLetterOrDigit)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar, ::System::Globalization::CultureInfo*)>(&System::Char::ToUpper)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, culture});
  }
};
// Writing MetadataGetter for method: System::Char::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Char::ToUpper)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::ToUpperInvariant
// Il2CppName: ToUpperInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Char::ToUpperInvariant)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToUpperInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar, ::System::Globalization::CultureInfo*)>(&System::Char::ToLower)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, culture});
  }
};
// Writing MetadataGetter for method: System::Char::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Char::ToLower)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::ToLowerInvariant
// Il2CppName: ToLowerInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&System::Char::ToLowerInvariant)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToLowerInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (System::Char::*)()>(&System::Char::GetTypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Char), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToBoolean)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToChar)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToSByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToUInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToUInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToUInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToSingle)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToDouble)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToDecimal)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Char::*)(::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToDateTime)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Char::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Char::*)(::System::Type*, ::System::IFormatProvider*)>(&System::Char::System_IConvertible_ToType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, provider});
  }
};
// Writing MetadataGetter for method: System::Char::IsControl
// Il2CppName: IsControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsControl)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsLetterOrDigit
// Il2CppName: IsLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&System::Char::IsLetterOrDigit)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::CheckNumber
// Il2CppName: CheckNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Char::CheckNumber)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CheckNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Char::IsNumber
// Il2CppName: IsNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsNumber)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsNumber
// Il2CppName: IsNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&System::Char::IsNumber)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::CheckSeparator
// Il2CppName: CheckSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Globalization::UnicodeCategory)>(&System::Char::CheckSeparator)> {
  static const MethodInfo* get() {
    static auto* uc = &::il2cpp_utils::GetClassFromName("System.Globalization", "UnicodeCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "CheckSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uc});
  }
};
// Writing MetadataGetter for method: System::Char::IsSeparatorLatin1
// Il2CppName: IsSeparatorLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsSeparatorLatin1)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsSeparatorLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsSeparator
// Il2CppName: IsSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsSeparator)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsSurrogate)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&System::Char::IsSurrogate)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&System::Char::IsWhiteSpace)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::GetUnicodeCategory
// Il2CppName: GetUnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::UnicodeCategory (*)(::Il2CppChar)>(&System::Char::GetUnicodeCategory)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "GetUnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::GetUnicodeCategory
// Il2CppName: GetUnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::UnicodeCategory (*)(::StringW, int)>(&System::Char::GetUnicodeCategory)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "GetUnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsHighSurrogate)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&System::Char::IsHighSurrogate)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, index});
  }
};
// Writing MetadataGetter for method: System::Char::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Char::IsLowSurrogate)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Char::IsSurrogatePair
// Il2CppName: IsSurrogatePair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar, ::Il2CppChar)>(&System::Char::IsSurrogatePair)> {
  static const MethodInfo* get() {
    static auto* highSurrogate = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* lowSurrogate = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "IsSurrogatePair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highSurrogate, lowSurrogate});
  }
};
// Writing MetadataGetter for method: System::Char::ConvertFromUtf32
// Il2CppName: ConvertFromUtf32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&System::Char::ConvertFromUtf32)> {
  static const MethodInfo* get() {
    static auto* utf32 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ConvertFromUtf32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{utf32});
  }
};
// Writing MetadataGetter for method: System::Char::ConvertToUtf32
// Il2CppName: ConvertToUtf32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar, ::Il2CppChar)>(&System::Char::ConvertToUtf32)> {
  static const MethodInfo* get() {
    static auto* highSurrogate = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* lowSurrogate = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ConvertToUtf32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highSurrogate, lowSurrogate});
  }
};
// Writing MetadataGetter for method: System::Char::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Char::*)()>(&System::Char::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Char), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Char::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Char::*)(::Il2CppObject*)>(&System::Char::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Char), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Char::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Char::*)()>(&System::Char::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Char), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
