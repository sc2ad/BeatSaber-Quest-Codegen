// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabAuthenticationContext);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabAuthenticationContext*, "PlayFab", "PlayFabAuthenticationContext");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabAuthenticationContext
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabAuthenticationContext : public ::Il2CppObject {
    public:
    public:
    // public System.String ClientSessionTicket
    // Size: 0x8
    // Offset: 0x10
    ::StringW ClientSessionTicket;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String PlayFabId
    // Size: 0x8
    // Offset: 0x18
    ::StringW PlayFabId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String EntityToken
    // Size: 0x8
    // Offset: 0x20
    ::StringW EntityToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String EntityId
    // Size: 0x8
    // Offset: 0x28
    ::StringW EntityId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String EntityType
    // Size: 0x8
    // Offset: 0x30
    ::StringW EntityType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String ClientSessionTicket
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ClientSessionTicket();
    // Get instance field reference: public System.String PlayFabId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PlayFabId();
    // Get instance field reference: public System.String EntityToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_EntityToken();
    // Get instance field reference: public System.String EntityId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_EntityId();
    // Get instance field reference: public System.String EntityType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_EntityType();
    // public System.Void .ctor()
    // Offset: 0xBCDA04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabAuthenticationContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabAuthenticationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabAuthenticationContext*, creationType>()));
    }
    // public System.Void .ctor(System.String clientSessionTicket, System.String entityToken, System.String playFabId, System.String entityId, System.String entityType)
    // Offset: 0xBB9570
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabAuthenticationContext* New_ctor(::StringW clientSessionTicket, ::StringW entityToken, ::StringW playFabId, ::StringW entityId, ::StringW entityType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabAuthenticationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabAuthenticationContext*, creationType>(clientSessionTicket, entityToken, playFabId, entityId, entityType)));
    }
    // public System.Void CopyFrom(PlayFab.PlayFabAuthenticationContext other)
    // Offset: 0xBB95C4
    void CopyFrom(::PlayFab::PlayFabAuthenticationContext* other);
    // public System.Boolean IsClientLoggedIn()
    // Offset: 0xBCD848
    bool IsClientLoggedIn();
    // public System.Boolean IsEntityLoggedIn()
    // Offset: 0xBCD618
    bool IsEntityLoggedIn();
    // public System.Void ForgetAllCredentials()
    // Offset: 0xBCD6B8
    void ForgetAllCredentials();
  }; // PlayFab.PlayFabAuthenticationContext
  #pragma pack(pop)
  static check_size<sizeof(PlayFabAuthenticationContext), 48 + sizeof(::StringW)> __PlayFab_PlayFabAuthenticationContextSizeCheck;
  static_assert(sizeof(PlayFabAuthenticationContext) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabAuthenticationContext::*)(::PlayFab::PlayFabAuthenticationContext*)>(&PlayFab::PlayFabAuthenticationContext::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabAuthenticationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabAuthenticationContext*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::IsClientLoggedIn
// Il2CppName: IsClientLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PlayFabAuthenticationContext::*)()>(&PlayFab::PlayFabAuthenticationContext::IsClientLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabAuthenticationContext*), "IsClientLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::IsEntityLoggedIn
// Il2CppName: IsEntityLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PlayFabAuthenticationContext::*)()>(&PlayFab::PlayFabAuthenticationContext::IsEntityLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabAuthenticationContext*), "IsEntityLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabAuthenticationContext::ForgetAllCredentials
// Il2CppName: ForgetAllCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabAuthenticationContext::*)()>(&PlayFab::PlayFabAuthenticationContext::ForgetAllCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabAuthenticationContext*), "ForgetAllCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
