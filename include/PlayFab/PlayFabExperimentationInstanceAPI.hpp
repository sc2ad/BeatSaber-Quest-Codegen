// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.IPlayFabInstanceApi
#include "PlayFab/SharedModels/IPlayFabInstanceApi.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: CreateExperimentRequest
  class CreateExperimentRequest;
  // Forward declaring type: CreateExperimentResult
  class CreateExperimentResult;
  // Forward declaring type: DeleteExperimentRequest
  class DeleteExperimentRequest;
  // Forward declaring type: EmptyResponse
  class EmptyResponse;
  // Forward declaring type: GetExperimentsRequest
  class GetExperimentsRequest;
  // Forward declaring type: GetExperimentsResult
  class GetExperimentsResult;
  // Forward declaring type: GetLatestScorecardRequest
  class GetLatestScorecardRequest;
  // Forward declaring type: GetLatestScorecardResult
  class GetLatestScorecardResult;
  // Forward declaring type: GetTreatmentAssignmentRequest
  class GetTreatmentAssignmentRequest;
  // Forward declaring type: GetTreatmentAssignmentResult
  class GetTreatmentAssignmentResult;
  // Forward declaring type: StartExperimentRequest
  class StartExperimentRequest;
  // Forward declaring type: StopExperimentRequest
  class StopExperimentRequest;
  // Forward declaring type: UpdateExperimentRequest
  class UpdateExperimentRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabExperimentationInstanceAPI
  class PlayFabExperimentationInstanceAPI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabExperimentationInstanceAPI);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabExperimentationInstanceAPI*, "PlayFab", "PlayFabExperimentationInstanceAPI");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabExperimentationInstanceAPI
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabExperimentationInstanceAPI : public ::Il2CppObject/*, public ::PlayFab::SharedModels::IPlayFabInstanceApi*/ {
    public:
    public:
    // public readonly PlayFab.PlayFabApiSettings apiSettings
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::PlayFabApiSettings* apiSettings;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabApiSettings*) == 0x8);
    // public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    // Size: 0x8
    // Offset: 0x18
    ::PlayFab::PlayFabAuthenticationContext* authenticationContext;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabAuthenticationContext*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::PlayFab::SharedModels::IPlayFabInstanceApi
    operator ::PlayFab::SharedModels::IPlayFabInstanceApi() noexcept {
      return *reinterpret_cast<::PlayFab::SharedModels::IPlayFabInstanceApi*>(this);
    }
    // Get instance field reference: public readonly PlayFab.PlayFabApiSettings apiSettings
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabApiSettings*& dyn_apiSettings();
    // Get instance field reference: public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabAuthenticationContext*& dyn_authenticationContext();
    // public System.Void .ctor(PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x163D2DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabExperimentationInstanceAPI* New_ctor(::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabExperimentationInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabExperimentationInstanceAPI*, creationType>(context)));
    }
    // public System.Void .ctor(PlayFab.PlayFabApiSettings settings, PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x163D378
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabExperimentationInstanceAPI* New_ctor(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabExperimentationInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabExperimentationInstanceAPI*, creationType>(settings, context)));
    }
    // public System.Boolean IsEntityLoggedIn()
    // Offset: 0x163D418
    bool IsEntityLoggedIn();
    // public System.Void ForgetAllCredentials()
    // Offset: 0x163D42C
    void ForgetAllCredentials();
    // public System.Void CreateExperiment(PlayFab.ExperimentationModels.CreateExperimentRequest request, System.Action`1<PlayFab.ExperimentationModels.CreateExperimentResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163D440
    void CreateExperiment(::PlayFab::ExperimentationModels::CreateExperimentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::CreateExperimentResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteExperiment(PlayFab.ExperimentationModels.DeleteExperimentRequest request, System.Action`1<PlayFab.ExperimentationModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163D5AC
    void DeleteExperiment(::PlayFab::ExperimentationModels::DeleteExperimentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetExperiments(PlayFab.ExperimentationModels.GetExperimentsRequest request, System.Action`1<PlayFab.ExperimentationModels.GetExperimentsResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163D718
    void GetExperiments(::PlayFab::ExperimentationModels::GetExperimentsRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::GetExperimentsResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetLatestScorecard(PlayFab.ExperimentationModels.GetLatestScorecardRequest request, System.Action`1<PlayFab.ExperimentationModels.GetLatestScorecardResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163D884
    void GetLatestScorecard(::PlayFab::ExperimentationModels::GetLatestScorecardRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::GetLatestScorecardResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetTreatmentAssignment(PlayFab.ExperimentationModels.GetTreatmentAssignmentRequest request, System.Action`1<PlayFab.ExperimentationModels.GetTreatmentAssignmentResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163D9F0
    void GetTreatmentAssignment(::PlayFab::ExperimentationModels::GetTreatmentAssignmentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::GetTreatmentAssignmentResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void StartExperiment(PlayFab.ExperimentationModels.StartExperimentRequest request, System.Action`1<PlayFab.ExperimentationModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163DB5C
    void StartExperiment(::PlayFab::ExperimentationModels::StartExperimentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void StopExperiment(PlayFab.ExperimentationModels.StopExperimentRequest request, System.Action`1<PlayFab.ExperimentationModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163DCC8
    void StopExperiment(::PlayFab::ExperimentationModels::StopExperimentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UpdateExperiment(PlayFab.ExperimentationModels.UpdateExperimentRequest request, System.Action`1<PlayFab.ExperimentationModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x163DE34
    void UpdateExperiment(::PlayFab::ExperimentationModels::UpdateExperimentRequest* request, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
  }; // PlayFab.PlayFabExperimentationInstanceAPI
  #pragma pack(pop)
  static check_size<sizeof(PlayFabExperimentationInstanceAPI), 24 + sizeof(::PlayFab::PlayFabAuthenticationContext*)> __PlayFab_PlayFabExperimentationInstanceAPISizeCheck;
  static_assert(sizeof(PlayFabExperimentationInstanceAPI) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::IsEntityLoggedIn
// Il2CppName: IsEntityLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PlayFabExperimentationInstanceAPI::*)()>(&PlayFab::PlayFabExperimentationInstanceAPI::IsEntityLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "IsEntityLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::ForgetAllCredentials
// Il2CppName: ForgetAllCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)()>(&PlayFab::PlayFabExperimentationInstanceAPI::ForgetAllCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "ForgetAllCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::CreateExperiment
// Il2CppName: CreateExperiment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::CreateExperimentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::CreateExperimentResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::CreateExperiment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "CreateExperimentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "CreateExperimentResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "CreateExperiment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::DeleteExperiment
// Il2CppName: DeleteExperiment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::DeleteExperimentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::DeleteExperiment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "DeleteExperimentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "DeleteExperiment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::GetExperiments
// Il2CppName: GetExperiments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::GetExperimentsRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::GetExperimentsResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::GetExperiments)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetExperimentsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetExperimentsResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "GetExperiments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::GetLatestScorecard
// Il2CppName: GetLatestScorecard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::GetLatestScorecardRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::GetLatestScorecardResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::GetLatestScorecard)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetLatestScorecardRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetLatestScorecardResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "GetLatestScorecard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::GetTreatmentAssignment
// Il2CppName: GetTreatmentAssignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::GetTreatmentAssignmentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::GetTreatmentAssignmentResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::GetTreatmentAssignment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetTreatmentAssignmentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "GetTreatmentAssignmentResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "GetTreatmentAssignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::StartExperiment
// Il2CppName: StartExperiment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::StartExperimentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::StartExperiment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "StartExperimentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "StartExperiment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::StopExperiment
// Il2CppName: StopExperiment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::StopExperimentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::StopExperiment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "StopExperimentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "StopExperiment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabExperimentationInstanceAPI::UpdateExperiment
// Il2CppName: UpdateExperiment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabExperimentationInstanceAPI::*)(::PlayFab::ExperimentationModels::UpdateExperimentRequest*, ::System::Action_1<::PlayFab::ExperimentationModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabExperimentationInstanceAPI::UpdateExperiment)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "UpdateExperimentRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.ExperimentationModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabExperimentationInstanceAPI*), "UpdateExperiment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
