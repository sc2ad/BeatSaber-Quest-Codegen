// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabResultCommon
#include "PlayFab/SharedModels/PlayFabResultCommon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: TreatmentAssignment
  class TreatmentAssignment;
}
// Completed forward declares
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: GetTreatmentAssignmentResult
  class GetTreatmentAssignmentResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ExperimentationModels::GetTreatmentAssignmentResult);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ExperimentationModels::GetTreatmentAssignmentResult*, "PlayFab.ExperimentationModels", "GetTreatmentAssignmentResult");
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ExperimentationModels.GetTreatmentAssignmentResult
  // [TokenAttribute] Offset: FFFFFFFF
  class GetTreatmentAssignmentResult : public ::PlayFab::SharedModels::PlayFabResultCommon {
    public:
    public:
    // public PlayFab.ExperimentationModels.TreatmentAssignment TreatmentAssignment
    // Size: 0x8
    // Offset: 0x20
    ::PlayFab::ExperimentationModels::TreatmentAssignment* TreatmentAssignment;
    // Field size check
    static_assert(sizeof(::PlayFab::ExperimentationModels::TreatmentAssignment*) == 0x8);
    public:
    // Creating conversion operator: operator ::PlayFab::ExperimentationModels::TreatmentAssignment*
    constexpr operator ::PlayFab::ExperimentationModels::TreatmentAssignment*() const noexcept {
      return TreatmentAssignment;
    }
    // Get instance field reference: public PlayFab.ExperimentationModels.TreatmentAssignment TreatmentAssignment
    [[deprecated("Use field access instead!")]] ::PlayFab::ExperimentationModels::TreatmentAssignment*& dyn_TreatmentAssignment();
    // public System.Void .ctor()
    // Offset: 0xBB70A0
    // Implemented from: PlayFab.SharedModels.PlayFabResultCommon
    // Base method: System.Void PlayFabResultCommon::.ctor()
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GetTreatmentAssignmentResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ExperimentationModels::GetTreatmentAssignmentResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GetTreatmentAssignmentResult*, creationType>()));
    }
  }; // PlayFab.ExperimentationModels.GetTreatmentAssignmentResult
  #pragma pack(pop)
  static check_size<sizeof(GetTreatmentAssignmentResult), 32 + sizeof(::PlayFab::ExperimentationModels::TreatmentAssignment*)> __PlayFab_ExperimentationModels_GetTreatmentAssignmentResultSizeCheck;
  static_assert(sizeof(GetTreatmentAssignmentResult) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ExperimentationModels::GetTreatmentAssignmentResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
