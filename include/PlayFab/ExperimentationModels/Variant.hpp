// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: Variable
  class Variable;
}
// Completed forward declares
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: Variant
  class Variant;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ExperimentationModels::Variant);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ExperimentationModels::Variant*, "PlayFab.ExperimentationModels", "Variant");
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ExperimentationModels.Variant
  // [TokenAttribute] Offset: FFFFFFFF
  class Variant : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.String Description
    // Size: 0x8
    // Offset: 0x10
    ::StringW Description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Id
    // Size: 0x8
    // Offset: 0x18
    ::StringW Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean IsControl
    // Size: 0x1
    // Offset: 0x20
    bool IsControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsControl and: Name
    char __padding2[0x7] = {};
    // public System.String Name
    // Size: 0x8
    // Offset: 0x28
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String TitleDataOverrideId
    // Size: 0x8
    // Offset: 0x30
    ::StringW TitleDataOverrideId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt32 TrafficPercentage
    // Size: 0x4
    // Offset: 0x38
    uint TrafficPercentage;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: TrafficPercentage and: Variables
    char __padding5[0x4] = {};
    // public System.Collections.Generic.List`1<PlayFab.ExperimentationModels.Variable> Variables
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variable*>* Variables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variable*>*) == 0x8);
    public:
    // Get instance field reference: public System.String Description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Description();
    // Get instance field reference: public System.String Id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Id();
    // Get instance field reference: public System.Boolean IsControl
    [[deprecated("Use field access instead!")]] bool& dyn_IsControl();
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.String TitleDataOverrideId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TitleDataOverrideId();
    // Get instance field reference: public System.UInt32 TrafficPercentage
    [[deprecated("Use field access instead!")]] uint& dyn_TrafficPercentage();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ExperimentationModels.Variable> Variables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variable*>*& dyn_Variables();
    // public System.Void .ctor()
    // Offset: 0xBB70E8
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Variant* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ExperimentationModels::Variant::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Variant*, creationType>()));
    }
  }; // PlayFab.ExperimentationModels.Variant
  #pragma pack(pop)
  static check_size<sizeof(Variant), 64 + sizeof(::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variable*>*)> __PlayFab_ExperimentationModels_VariantSizeCheck;
  static_assert(sizeof(Variant) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ExperimentationModels::Variant::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
