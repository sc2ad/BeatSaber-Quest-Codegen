// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: AnalysisTaskState
  struct AnalysisTaskState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ExperimentationModels::AnalysisTaskState, "PlayFab.ExperimentationModels", "AnalysisTaskState");
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ExperimentationModels.AnalysisTaskState
  // [TokenAttribute] Offset: FFFFFFFF
  struct AnalysisTaskState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AnalysisTaskState
    constexpr AnalysisTaskState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState Waiting
    static constexpr const int Waiting = 0;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Waiting
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_Waiting();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Waiting
    static void _set_Waiting(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState ReadyForSubmission
    static constexpr const int ReadyForSubmission = 1;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState ReadyForSubmission
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_ReadyForSubmission();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState ReadyForSubmission
    static void _set_ReadyForSubmission(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState SubmittingToPipeline
    static constexpr const int SubmittingToPipeline = 2;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState SubmittingToPipeline
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_SubmittingToPipeline();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState SubmittingToPipeline
    static void _set_SubmittingToPipeline(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState Running
    static constexpr const int Running = 3;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Running
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_Running();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Running
    static void _set_Running(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState Completed
    static constexpr const int Completed = 4;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Completed
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_Completed();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Completed
    static void _set_Completed(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState Failed
    static constexpr const int Failed = 5;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Failed
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_Failed();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Failed
    static void _set_Failed(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // static field const value: static public PlayFab.ExperimentationModels.AnalysisTaskState Canceled
    static constexpr const int Canceled = 6;
    // Get static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Canceled
    static ::PlayFab::ExperimentationModels::AnalysisTaskState _get_Canceled();
    // Set static field: static public PlayFab.ExperimentationModels.AnalysisTaskState Canceled
    static void _set_Canceled(::PlayFab::ExperimentationModels::AnalysisTaskState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // PlayFab.ExperimentationModels.AnalysisTaskState
  #pragma pack(pop)
  static check_size<sizeof(AnalysisTaskState), 0 + sizeof(int)> __PlayFab_ExperimentationModels_AnalysisTaskStateSizeCheck;
  static_assert(sizeof(AnalysisTaskState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
