// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabRequestCommon
#include "PlayFab/SharedModels/PlayFabRequestCommon.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: PlayFab.ExperimentationModels.ExperimentType
#include "PlayFab/ExperimentationModels/ExperimentType.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: Variant
  class Variant;
}
// Completed forward declares
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: UpdateExperimentRequest
  class UpdateExperimentRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ExperimentationModels::UpdateExperimentRequest);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ExperimentationModels::UpdateExperimentRequest*, "PlayFab.ExperimentationModels", "UpdateExperimentRequest");
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.ExperimentationModels.UpdateExperimentRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class UpdateExperimentRequest : public ::PlayFab::SharedModels::PlayFabRequestCommon {
    public:
    public:
    // public System.String Description
    // Size: 0x8
    // Offset: 0x18
    ::StringW Description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt32 Duration
    // Size: 0x4
    // Offset: 0x20
    uint Duration;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Nullable`1<PlayFab.ExperimentationModels.ExperimentType> ExperimentType
    // Size: 0xFFFFFFFF
    // Offset: 0x24
    ::System::Nullable_1<::PlayFab::ExperimentationModels::ExperimentType> ExperimentType;
    // public System.String Id
    // Size: 0x8
    // Offset: 0x30
    ::StringW Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Name
    // Size: 0x8
    // Offset: 0x38
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SegmentId
    // Size: 0x8
    // Offset: 0x40
    ::StringW SegmentId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.DateTime StartDate
    // Size: 0x8
    // Offset: 0x48
    ::System::DateTime StartDate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public System.Collections.Generic.List`1<System.String> TitlePlayerAccountTestIds
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::StringW>* TitlePlayerAccountTestIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.ExperimentationModels.Variant> Variants
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variant*>* Variants;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variant*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::PlayFab::PlayFabAuthenticationContext*
    constexpr operator ::PlayFab::PlayFabAuthenticationContext*() const noexcept = delete;
    // Get instance field reference: public System.String Description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Description();
    // Get instance field reference: public System.UInt32 Duration
    [[deprecated("Use field access instead!")]] uint& dyn_Duration();
    // Get instance field reference: public System.Nullable`1<PlayFab.ExperimentationModels.ExperimentType> ExperimentType
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::PlayFab::ExperimentationModels::ExperimentType>& dyn_ExperimentType();
    // Get instance field reference: public System.String Id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Id();
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.String SegmentId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SegmentId();
    // Get instance field reference: public System.DateTime StartDate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_StartDate();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> TitlePlayerAccountTestIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_TitlePlayerAccountTestIds();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ExperimentationModels.Variant> Variants
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ExperimentationModels::Variant*>*& dyn_Variants();
    // public System.Void .ctor()
    // Offset: 0xBB70D8
    // Implemented from: PlayFab.SharedModels.PlayFabRequestCommon
    // Base method: System.Void PlayFabRequestCommon::.ctor()
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UpdateExperimentRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ExperimentationModels::UpdateExperimentRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UpdateExperimentRequest*, creationType>()));
    }
  }; // PlayFab.ExperimentationModels.UpdateExperimentRequest
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ExperimentationModels::UpdateExperimentRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
