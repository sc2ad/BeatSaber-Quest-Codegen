// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: PlayFab::ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: MetricData
  class MetricData;
}
// Completed forward declares
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Forward declaring type: ScorecardDataRow
  class ScorecardDataRow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ExperimentationModels::ScorecardDataRow);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ExperimentationModels::ScorecardDataRow*, "PlayFab.ExperimentationModels", "ScorecardDataRow");
// Type namespace: PlayFab.ExperimentationModels
namespace PlayFab::ExperimentationModels {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ExperimentationModels.ScorecardDataRow
  // [TokenAttribute] Offset: FFFFFFFF
  class ScorecardDataRow : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.Boolean IsControl
    // Size: 0x1
    // Offset: 0x10
    bool IsControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsControl and: MetricDataRows
    char __padding0[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ExperimentationModels.MetricData> MetricDataRows
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ExperimentationModels::MetricData*>* MetricDataRows;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ExperimentationModels::MetricData*>*) == 0x8);
    // public System.UInt32 PlayerCount
    // Size: 0x4
    // Offset: 0x20
    uint PlayerCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: PlayerCount and: VariantName
    char __padding2[0x4] = {};
    // public System.String VariantName
    // Size: 0x8
    // Offset: 0x28
    ::StringW VariantName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Boolean IsControl
    [[deprecated("Use field access instead!")]] bool& dyn_IsControl();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ExperimentationModels.MetricData> MetricDataRows
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ExperimentationModels::MetricData*>*& dyn_MetricDataRows();
    // Get instance field reference: public System.UInt32 PlayerCount
    [[deprecated("Use field access instead!")]] uint& dyn_PlayerCount();
    // Get instance field reference: public System.String VariantName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_VariantName();
    // public System.Void .ctor()
    // Offset: 0xBB70B8
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScorecardDataRow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ExperimentationModels::ScorecardDataRow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScorecardDataRow*, creationType>()));
    }
  }; // PlayFab.ExperimentationModels.ScorecardDataRow
  #pragma pack(pop)
  static check_size<sizeof(ScorecardDataRow), 40 + sizeof(::StringW)> __PlayFab_ExperimentationModels_ScorecardDataRowSizeCheck;
  static_assert(sizeof(ScorecardDataRow) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ExperimentationModels::ScorecardDataRow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
