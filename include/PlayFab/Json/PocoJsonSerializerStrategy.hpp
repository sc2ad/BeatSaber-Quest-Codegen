// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Json.IJsonSerializerStrategy
#include "PlayFab/Json/IJsonSerializerStrategy.hpp"
// Including type: PlayFab.Json.ReflectionUtils
#include "PlayFab/Json/ReflectionUtils.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Enum
  class Enum;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Forward declaring namespace: PlayFab::Json
namespace PlayFab::Json {
  // Forward declaring type: JsonProperty
  class JsonProperty;
}
// Completed forward declares
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Forward declaring type: PocoJsonSerializerStrategy
  class PocoJsonSerializerStrategy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Json::PocoJsonSerializerStrategy);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Json::PocoJsonSerializerStrategy*, "PlayFab.Json", "PocoJsonSerializerStrategy");
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Json.PocoJsonSerializerStrategy
  // [TokenAttribute] Offset: FFFFFFFF
  // [GeneratedCodeAttribute] Offset: 973E04
  class PocoJsonSerializerStrategy : public ::Il2CppObject/*, public ::PlayFab::Json::IJsonSerializerStrategy*/ {
    public:
    public:
    // System.Collections.Generic.IDictionary`2<System.Type,PlayFab.Json.ReflectionUtils/PlayFab.Json.ConstructorDelegate> ConstructorCache
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IDictionary_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::ConstructorDelegate*>* ConstructorCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::ConstructorDelegate*>*) == 0x8);
    // System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Reflection.MemberInfo,PlayFab.Json.ReflectionUtils/PlayFab.Json.GetDelegate>> GetCache
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Reflection::MemberInfo*, ::PlayFab::Json::ReflectionUtils::GetDelegate*>*>* GetCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Reflection::MemberInfo*, ::PlayFab::Json::ReflectionUtils::GetDelegate*>*>*) == 0x8);
    // System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.String,System.Collections.Generic.KeyValuePair`2<System.Type,PlayFab.Json.ReflectionUtils/PlayFab.Json.SetDelegate>>> SetCache
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>*>* SetCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::PlayFab::Json::IJsonSerializerStrategy
    operator ::PlayFab::Json::IJsonSerializerStrategy() noexcept {
      return *reinterpret_cast<::PlayFab::Json::IJsonSerializerStrategy*>(this);
    }
    // Get static field: static readonly System.Type[] EmptyTypes
    static ::ArrayW<::System::Type*> _get_EmptyTypes();
    // Set static field: static readonly System.Type[] EmptyTypes
    static void _set_EmptyTypes(::ArrayW<::System::Type*> value);
    // Get static field: static readonly System.Type[] ArrayConstructorParameterTypes
    static ::ArrayW<::System::Type*> _get_ArrayConstructorParameterTypes();
    // Set static field: static readonly System.Type[] ArrayConstructorParameterTypes
    static void _set_ArrayConstructorParameterTypes(::ArrayW<::System::Type*> value);
    // Get static field: static private readonly System.String[] Iso8601Format
    static ::ArrayW<::StringW> _get_Iso8601Format();
    // Set static field: static private readonly System.String[] Iso8601Format
    static void _set_Iso8601Format(::ArrayW<::StringW> value);
    // Get instance field reference: System.Collections.Generic.IDictionary`2<System.Type,PlayFab.Json.ReflectionUtils/PlayFab.Json.ConstructorDelegate> ConstructorCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::ConstructorDelegate*>*& dyn_ConstructorCache();
    // Get instance field reference: System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.Reflection.MemberInfo,PlayFab.Json.ReflectionUtils/PlayFab.Json.GetDelegate>> GetCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::System::Reflection::MemberInfo*, ::PlayFab::Json::ReflectionUtils::GetDelegate*>*>*& dyn_GetCache();
    // Get instance field reference: System.Collections.Generic.IDictionary`2<System.Type,System.Collections.Generic.IDictionary`2<System.String,System.Collections.Generic.KeyValuePair`2<System.Type,PlayFab.Json.ReflectionUtils/PlayFab.Json.SetDelegate>>> SetCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>*>*& dyn_SetCache();
    // public System.Void .ctor()
    // Offset: 0xBC5CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PocoJsonSerializerStrategy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::PocoJsonSerializerStrategy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PocoJsonSerializerStrategy*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xBCB444
    static void _cctor();
    // protected System.String MapClrMemberNameToJsonFieldName(System.Reflection.MemberInfo memberInfo)
    // Offset: 0xBC5E34
    ::StringW MapClrMemberNameToJsonFieldName(::System::Reflection::MemberInfo* memberInfo);
    // protected System.Void MapClrMemberNameToJsonFieldName(System.Reflection.MemberInfo memberInfo, out System.String jsonName, out PlayFab.Json.JsonProperty jsonProp)
    // Offset: 0xBC5F94
    void MapClrMemberNameToJsonFieldName(::System::Reflection::MemberInfo* memberInfo, ByRef<::StringW> jsonName, ByRef<::PlayFab::Json::JsonProperty*> jsonProp);
    // PlayFab.Json.ReflectionUtils/PlayFab.Json.ConstructorDelegate ContructorDelegateFactory(System.Type key)
    // Offset: 0xBC6104
    ::PlayFab::Json::ReflectionUtils::ConstructorDelegate* ContructorDelegateFactory(::System::Type* key);
    // System.Collections.Generic.IDictionary`2<System.Reflection.MemberInfo,PlayFab.Json.ReflectionUtils/PlayFab.Json.GetDelegate> GetterValueFactory(System.Type type)
    // Offset: 0xBC624C
    ::System::Collections::Generic::IDictionary_2<::System::Reflection::MemberInfo*, ::PlayFab::Json::ReflectionUtils::GetDelegate*>* GetterValueFactory(::System::Type* type);
    // System.Collections.Generic.IDictionary`2<System.String,System.Collections.Generic.KeyValuePair`2<System.Type,PlayFab.Json.ReflectionUtils/PlayFab.Json.SetDelegate>> SetterValueFactory(System.Type type)
    // Offset: 0xBC6B04
    ::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>* SetterValueFactory(::System::Type* type);
    // public System.Boolean TrySerializeNonPrimitiveObject(System.Object input, out System.Object output)
    // Offset: 0xBC7474
    bool TrySerializeNonPrimitiveObject(::Il2CppObject* input, ByRef<::Il2CppObject*> output);
    // public System.Object DeserializeObject(System.Object value, System.Type type)
    // Offset: 0xBC74E0
    ::Il2CppObject* DeserializeObject(::Il2CppObject* value, ::System::Type* type);
    // protected System.Object SerializeEnum(System.Enum p)
    // Offset: 0xBCA7A0
    ::Il2CppObject* SerializeEnum(::System::Enum* p);
    // protected System.Boolean TrySerializeKnownTypes(System.Object input, out System.Object output)
    // Offset: 0xBCA860
    bool TrySerializeKnownTypes(::Il2CppObject* input, ByRef<::Il2CppObject*> output);
    // protected System.Boolean TrySerializeUnknownTypes(System.Object input, out System.Object output)
    // Offset: 0xBCAB20
    bool TrySerializeUnknownTypes(::Il2CppObject* input, ByRef<::Il2CppObject*> output);
  }; // PlayFab.Json.PocoJsonSerializerStrategy
  #pragma pack(pop)
  static check_size<sizeof(PocoJsonSerializerStrategy), 32 + sizeof(::System::Collections::Generic::IDictionary_2<::System::Type*, ::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>*>*)> __PlayFab_Json_PocoJsonSerializerStrategySizeCheck;
  static_assert(sizeof(PocoJsonSerializerStrategy) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Json::PocoJsonSerializerStrategy::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::MapClrMemberNameToJsonFieldName
// Il2CppName: MapClrMemberNameToJsonFieldName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Reflection::MemberInfo*)>(&PlayFab::Json::PocoJsonSerializerStrategy::MapClrMemberNameToJsonFieldName)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "MapClrMemberNameToJsonFieldName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::MapClrMemberNameToJsonFieldName
// Il2CppName: MapClrMemberNameToJsonFieldName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Reflection::MemberInfo*, ByRef<::StringW>, ByRef<::PlayFab::Json::JsonProperty*>)>(&PlayFab::Json::PocoJsonSerializerStrategy::MapClrMemberNameToJsonFieldName)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* jsonName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* jsonProp = &::il2cpp_utils::GetClassFromName("PlayFab.Json", "JsonProperty")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "MapClrMemberNameToJsonFieldName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo, jsonName, jsonProp});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::ContructorDelegateFactory
// Il2CppName: ContructorDelegateFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PlayFab::Json::ReflectionUtils::ConstructorDelegate* (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Type*)>(&PlayFab::Json::PocoJsonSerializerStrategy::ContructorDelegateFactory)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "ContructorDelegateFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::GetterValueFactory
// Il2CppName: GetterValueFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::System::Reflection::MemberInfo*, ::PlayFab::Json::ReflectionUtils::GetDelegate*>* (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Type*)>(&PlayFab::Json::PocoJsonSerializerStrategy::GetterValueFactory)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "GetterValueFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::SetterValueFactory
// Il2CppName: SetterValueFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::System::Collections::Generic::KeyValuePair_2<::System::Type*, ::PlayFab::Json::ReflectionUtils::SetDelegate*>>* (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Type*)>(&PlayFab::Json::PocoJsonSerializerStrategy::SetterValueFactory)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "SetterValueFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeNonPrimitiveObject
// Il2CppName: TrySerializeNonPrimitiveObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Json::PocoJsonSerializerStrategy::*)(::Il2CppObject*, ByRef<::Il2CppObject*>)>(&PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeNonPrimitiveObject)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "TrySerializeNonPrimitiveObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::DeserializeObject
// Il2CppName: DeserializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::PocoJsonSerializerStrategy::*)(::Il2CppObject*, ::System::Type*)>(&PlayFab::Json::PocoJsonSerializerStrategy::DeserializeObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "DeserializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::SerializeEnum
// Il2CppName: SerializeEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::PocoJsonSerializerStrategy::*)(::System::Enum*)>(&PlayFab::Json::PocoJsonSerializerStrategy::SerializeEnum)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "SerializeEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeKnownTypes
// Il2CppName: TrySerializeKnownTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Json::PocoJsonSerializerStrategy::*)(::Il2CppObject*, ByRef<::Il2CppObject*>)>(&PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeKnownTypes)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "TrySerializeKnownTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeUnknownTypes
// Il2CppName: TrySerializeUnknownTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Json::PocoJsonSerializerStrategy::*)(::Il2CppObject*, ByRef<::Il2CppObject*>)>(&PlayFab::Json::PocoJsonSerializerStrategy::TrySerializeUnknownTypes)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::PocoJsonSerializerStrategy*), "TrySerializeUnknownTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
