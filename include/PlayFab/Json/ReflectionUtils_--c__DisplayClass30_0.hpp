// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Json.ReflectionUtils
#include "PlayFab/Json/ReflectionUtils.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0*, "PlayFab.Json", "ReflectionUtils/<>c__DisplayClass30_0");
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Json.ReflectionUtils/PlayFab.Json.<>c__DisplayClass30_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class ReflectionUtils::$$c__DisplayClass30_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Reflection.MethodInfo methodInfo
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MethodInfo* methodInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Reflection::MethodInfo*
    constexpr operator ::System::Reflection::MethodInfo*() const noexcept {
      return methodInfo;
    }
    // Get instance field reference: public System.Reflection.MethodInfo methodInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_methodInfo();
    // public System.Void .ctor()
    // Offset: 0xBCC038
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionUtils::$$c__DisplayClass30_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionUtils::$$c__DisplayClass30_0*, creationType>()));
    }
    // System.Object <GetGetMethodByReflection>b__0(System.Object source)
    // Offset: 0xBCC25C
    ::Il2CppObject* $GetGetMethodByReflection$b__0(::Il2CppObject* source);
  }; // PlayFab.Json.ReflectionUtils/PlayFab.Json.<>c__DisplayClass30_0
  #pragma pack(pop)
  static check_size<sizeof(ReflectionUtils::$$c__DisplayClass30_0), 16 + sizeof(::System::Reflection::MethodInfo*)> __PlayFab_Json_ReflectionUtils_$$c__DisplayClass30_0SizeCheck;
  static_assert(sizeof(ReflectionUtils::$$c__DisplayClass30_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0::$GetGetMethodByReflection$b__0
// Il2CppName: <GetGetMethodByReflection>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0::*)(::Il2CppObject*)>(&PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0::$GetGetMethodByReflection$b__0)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::ReflectionUtils::$$c__DisplayClass30_0*), "<GetGetMethodByReflection>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
