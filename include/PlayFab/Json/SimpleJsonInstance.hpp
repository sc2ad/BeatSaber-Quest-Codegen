// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.ISerializerPlugin
#include "PlayFab/ISerializerPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::Json
namespace PlayFab::Json {
}
// Completed forward declares
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Forward declaring type: SimpleJsonInstance
  class SimpleJsonInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Json::SimpleJsonInstance);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Json::SimpleJsonInstance*, "PlayFab.Json", "SimpleJsonInstance");
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Json.SimpleJsonInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class SimpleJsonInstance : public ::Il2CppObject/*, public ::PlayFab::ISerializerPlugin*/ {
    public:
    // Nested type: ::PlayFab::Json::SimpleJsonInstance::PlayFabSimpleJsonCuztomization
    class PlayFabSimpleJsonCuztomization;
    // Creating interface conversion operator: operator ::PlayFab::ISerializerPlugin
    operator ::PlayFab::ISerializerPlugin() noexcept {
      return *reinterpret_cast<::PlayFab::ISerializerPlugin*>(this);
    }
    // Get static field: static public PlayFab.Json.SimpleJsonInstance/PlayFab.Json.PlayFabSimpleJsonCuztomization ApiSerializerStrategy
    static ::PlayFab::Json::SimpleJsonInstance::PlayFabSimpleJsonCuztomization* _get_ApiSerializerStrategy();
    // Set static field: static public PlayFab.Json.SimpleJsonInstance/PlayFab.Json.PlayFabSimpleJsonCuztomization ApiSerializerStrategy
    static void _set_ApiSerializerStrategy(::PlayFab::Json::SimpleJsonInstance::PlayFabSimpleJsonCuztomization* value);
    // public System.Void .ctor()
    // Offset: 0xBCC73C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleJsonInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::SimpleJsonInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleJsonInstance*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xBCC744
    static void _cctor();
    // public T DeserializeObject(System.String json)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T DeserializeObject(::StringW json) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::SimpleJsonInstance::DeserializeObject");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayFab::Json::SimpleJsonInstance*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, json);
    }
    // public T DeserializeObject(System.String json, System.Object jsonSerializerStrategy)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T DeserializeObject(::StringW json, ::Il2CppObject* jsonSerializerStrategy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::SimpleJsonInstance::DeserializeObject");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayFab::Json::SimpleJsonInstance*), -1));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, json, jsonSerializerStrategy);
    }
    // public System.Object DeserializeObject(System.String json)
    // Offset: 0xBCC51C
    ::Il2CppObject* DeserializeObject(::StringW json);
    // public System.String SerializeObject(System.Object json)
    // Offset: 0xBCC5FC
    ::StringW SerializeObject(::Il2CppObject* json);
    // public System.String SerializeObject(System.Object json, System.Object jsonSerializerStrategy)
    // Offset: 0xBCC694
    ::StringW SerializeObject(::Il2CppObject* json, ::Il2CppObject* jsonSerializerStrategy);
  }; // PlayFab.Json.SimpleJsonInstance
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Json::SimpleJsonInstance::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::SimpleJsonInstance*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::DeserializeObject
// Il2CppName: DeserializeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::DeserializeObject
// Il2CppName: DeserializeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::DeserializeObject
// Il2CppName: DeserializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::SimpleJsonInstance::*)(::StringW)>(&PlayFab::Json::SimpleJsonInstance::DeserializeObject)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::SimpleJsonInstance*), "DeserializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::SerializeObject
// Il2CppName: SerializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::Json::SimpleJsonInstance::*)(::Il2CppObject*)>(&PlayFab::Json::SimpleJsonInstance::SerializeObject)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::SimpleJsonInstance*), "SerializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::SimpleJsonInstance::SerializeObject
// Il2CppName: SerializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::Json::SimpleJsonInstance::*)(::Il2CppObject*, ::Il2CppObject*)>(&PlayFab::Json::SimpleJsonInstance::SerializeObject)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* jsonSerializerStrategy = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::SimpleJsonInstance*), "SerializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json, jsonSerializerStrategy});
  }
};
