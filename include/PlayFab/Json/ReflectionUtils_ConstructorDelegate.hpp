// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Json.ReflectionUtils
#include "PlayFab/Json/ReflectionUtils.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Json::ReflectionUtils::ConstructorDelegate);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Json::ReflectionUtils::ConstructorDelegate*, "PlayFab.Json", "ReflectionUtils/ConstructorDelegate");
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Json.ReflectionUtils/PlayFab.Json.ConstructorDelegate
  // [TokenAttribute] Offset: FFFFFFFF
  class ReflectionUtils::ConstructorDelegate : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0xBCBECC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionUtils::ConstructorDelegate* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Json::ReflectionUtils::ConstructorDelegate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionUtils::ConstructorDelegate*, creationType>(object, method)));
    }
    // public System.Object Invoke(params System.Object[] args)
    // Offset: 0xBC98F8
    ::Il2CppObject* Invoke(::ArrayW<::Il2CppObject*> args);
    // public System.IAsyncResult BeginInvoke(System.Object[] args, System.AsyncCallback callback, System.Object object)
    // Offset: 0xBCC480
    ::System::IAsyncResult* BeginInvoke(::ArrayW<::Il2CppObject*> args, ::System::AsyncCallback* callback, ::Il2CppObject* object);
    // public System.Object EndInvoke(System.IAsyncResult result)
    // Offset: 0xBCC4A4
    ::Il2CppObject* EndInvoke(::System::IAsyncResult* result);
  }; // PlayFab.Json.ReflectionUtils/PlayFab.Json.ConstructorDelegate
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::ConstructorDelegate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::ConstructorDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::ReflectionUtils::ConstructorDelegate::*)(::ArrayW<::Il2CppObject*>)>(&PlayFab::Json::ReflectionUtils::ConstructorDelegate::Invoke)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::ReflectionUtils::ConstructorDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::ConstructorDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (PlayFab::Json::ReflectionUtils::ConstructorDelegate::*)(::ArrayW<::Il2CppObject*>, ::System::AsyncCallback*, ::Il2CppObject*)>(&PlayFab::Json::ReflectionUtils::ConstructorDelegate::BeginInvoke)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* object = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::ReflectionUtils::ConstructorDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, callback, object});
  }
};
// Writing MetadataGetter for method: PlayFab::Json::ReflectionUtils::ConstructorDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Json::ReflectionUtils::ConstructorDelegate::*)(::System::IAsyncResult*)>(&PlayFab::Json::ReflectionUtils::ConstructorDelegate::EndInvoke)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Json::ReflectionUtils::ConstructorDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
