// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Json.PlayFabSimpleJson
#include "PlayFab/Json/PlayFabSimpleJson.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Json::PlayFabSimpleJson::TokenType, "PlayFab.Json", "PlayFabSimpleJson/TokenType");
// Type namespace: PlayFab.Json
namespace PlayFab::Json {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType
  // [TokenAttribute] Offset: FFFFFFFF
  struct PlayFabSimpleJson::TokenType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: TokenType
    constexpr TokenType(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NONE
    static constexpr const uint8_t NONE = 0u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NONE
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_NONE();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NONE
    static void _set_NONE(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_OPEN
    static constexpr const uint8_t CURLY_OPEN = 1u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_OPEN
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_CURLY_OPEN();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_OPEN
    static void _set_CURLY_OPEN(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_CLOSE
    static constexpr const uint8_t CURLY_CLOSE = 2u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_CLOSE
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_CURLY_CLOSE();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType CURLY_CLOSE
    static void _set_CURLY_CLOSE(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_OPEN
    static constexpr const uint8_t SQUARED_OPEN = 3u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_OPEN
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_SQUARED_OPEN();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_OPEN
    static void _set_SQUARED_OPEN(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_CLOSE
    static constexpr const uint8_t SQUARED_CLOSE = 4u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_CLOSE
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_SQUARED_CLOSE();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType SQUARED_CLOSE
    static void _set_SQUARED_CLOSE(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COLON
    static constexpr const uint8_t COLON = 5u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COLON
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_COLON();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COLON
    static void _set_COLON(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COMMA
    static constexpr const uint8_t COMMA = 6u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COMMA
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_COMMA();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType COMMA
    static void _set_COMMA(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType STRING
    static constexpr const uint8_t STRING = 7u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType STRING
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_STRING();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType STRING
    static void _set_STRING(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NUMBER
    static constexpr const uint8_t NUMBER = 8u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NUMBER
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_NUMBER();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NUMBER
    static void _set_NUMBER(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType TRUE
    static constexpr const uint8_t TRUE = 9u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType TRUE
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_TRUE();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType TRUE
    static void _set_TRUE(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType FALSE
    static constexpr const uint8_t FALSE = 10u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType FALSE
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_FALSE();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType FALSE
    static void _set_FALSE(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // static field const value: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NULL
    static constexpr const uint8_t _NULL = 11u;
    // Get static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NULL
    static ::PlayFab::Json::PlayFabSimpleJson::TokenType _get_NULL();
    // Set static field: static public PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType NULL
    static void _set_NULL(::PlayFab::Json::PlayFabSimpleJson::TokenType value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // PlayFab.Json.PlayFabSimpleJson/PlayFab.Json.TokenType
  #pragma pack(pop)
  static check_size<sizeof(PlayFabSimpleJson::TokenType), 0 + sizeof(uint8_t)> __PlayFab_Json_PlayFabSimpleJson_TokenTypeSizeCheck;
  static_assert(sizeof(PlayFabSimpleJson::TokenType) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
