// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.IPlayFabInstanceApi
#include "PlayFab/SharedModels/IPlayFabInstanceApi.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::LocalizationModels
namespace PlayFab::LocalizationModels {
  // Forward declaring type: GetLanguageListRequest
  class GetLanguageListRequest;
  // Forward declaring type: GetLanguageListResponse
  class GetLanguageListResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabLocalizationInstanceAPI
  class PlayFabLocalizationInstanceAPI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabLocalizationInstanceAPI);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabLocalizationInstanceAPI*, "PlayFab", "PlayFabLocalizationInstanceAPI");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabLocalizationInstanceAPI
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabLocalizationInstanceAPI : public ::Il2CppObject/*, public ::PlayFab::SharedModels::IPlayFabInstanceApi*/ {
    public:
    public:
    // public readonly PlayFab.PlayFabApiSettings apiSettings
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::PlayFabApiSettings* apiSettings;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabApiSettings*) == 0x8);
    // public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    // Size: 0x8
    // Offset: 0x18
    ::PlayFab::PlayFabAuthenticationContext* authenticationContext;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabAuthenticationContext*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::PlayFab::SharedModels::IPlayFabInstanceApi
    operator ::PlayFab::SharedModels::IPlayFabInstanceApi() noexcept {
      return *reinterpret_cast<::PlayFab::SharedModels::IPlayFabInstanceApi*>(this);
    }
    // Get instance field reference: public readonly PlayFab.PlayFabApiSettings apiSettings
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabApiSettings*& dyn_apiSettings();
    // Get instance field reference: public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabAuthenticationContext*& dyn_authenticationContext();
    // public System.Void .ctor(PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x16443C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabLocalizationInstanceAPI* New_ctor(::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabLocalizationInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabLocalizationInstanceAPI*, creationType>(context)));
    }
    // public System.Void .ctor(PlayFab.PlayFabApiSettings settings, PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x164445C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabLocalizationInstanceAPI* New_ctor(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabLocalizationInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabLocalizationInstanceAPI*, creationType>(settings, context)));
    }
    // public System.Boolean IsEntityLoggedIn()
    // Offset: 0x16444FC
    bool IsEntityLoggedIn();
    // public System.Void ForgetAllCredentials()
    // Offset: 0x1644510
    void ForgetAllCredentials();
    // public System.Void GetLanguageList(PlayFab.LocalizationModels.GetLanguageListRequest request, System.Action`1<PlayFab.LocalizationModels.GetLanguageListResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1644524
    void GetLanguageList(::PlayFab::LocalizationModels::GetLanguageListRequest* request, ::System::Action_1<::PlayFab::LocalizationModels::GetLanguageListResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
  }; // PlayFab.PlayFabLocalizationInstanceAPI
  #pragma pack(pop)
  static check_size<sizeof(PlayFabLocalizationInstanceAPI), 24 + sizeof(::PlayFab::PlayFabAuthenticationContext*)> __PlayFab_PlayFabLocalizationInstanceAPISizeCheck;
  static_assert(sizeof(PlayFabLocalizationInstanceAPI) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabLocalizationInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabLocalizationInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabLocalizationInstanceAPI::IsEntityLoggedIn
// Il2CppName: IsEntityLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PlayFabLocalizationInstanceAPI::*)()>(&PlayFab::PlayFabLocalizationInstanceAPI::IsEntityLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabLocalizationInstanceAPI*), "IsEntityLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabLocalizationInstanceAPI::ForgetAllCredentials
// Il2CppName: ForgetAllCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabLocalizationInstanceAPI::*)()>(&PlayFab::PlayFabLocalizationInstanceAPI::ForgetAllCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabLocalizationInstanceAPI*), "ForgetAllCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabLocalizationInstanceAPI::GetLanguageList
// Il2CppName: GetLanguageList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabLocalizationInstanceAPI::*)(::PlayFab::LocalizationModels::GetLanguageListRequest*, ::System::Action_1<::PlayFab::LocalizationModels::GetLanguageListResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabLocalizationInstanceAPI::GetLanguageList)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.LocalizationModels", "GetLanguageListRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.LocalizationModels", "GetLanguageListResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabLocalizationInstanceAPI*), "GetLanguageList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
