// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: BuildAliasParams
  class BuildAliasParams;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::MultiplayerModels::BuildAliasParams);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::MultiplayerModels::BuildAliasParams*, "PlayFab.MultiplayerModels", "BuildAliasParams");
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.MultiplayerModels.BuildAliasParams
  // [TokenAttribute] Offset: FFFFFFFF
  class BuildAliasParams : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.String AliasId
    // Size: 0x8
    // Offset: 0x10
    ::StringW AliasId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return AliasId;
    }
    // Get instance field reference: public System.String AliasId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AliasId();
    // public System.Void .ctor()
    // Offset: 0xBCCEF0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BuildAliasParams* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::MultiplayerModels::BuildAliasParams::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BuildAliasParams*, creationType>()));
    }
  }; // PlayFab.MultiplayerModels.BuildAliasParams
  #pragma pack(pop)
  static check_size<sizeof(BuildAliasParams), 16 + sizeof(::StringW)> __PlayFab_MultiplayerModels_BuildAliasParamsSizeCheck;
  static_assert(sizeof(BuildAliasParams) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::MultiplayerModels::BuildAliasParams::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
