// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabRequestCommon
#include "PlayFab/SharedModels/PlayFabRequestCommon.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: PlayFab.MultiplayerModels.ContainerFlavor
#include "PlayFab/MultiplayerModels/ContainerFlavor.hpp"
// Including type: PlayFab.MultiplayerModels.AzureVmSize
#include "PlayFab/MultiplayerModels/AzureVmSize.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: ContainerImageReference
  class ContainerImageReference;
  // Forward declaring type: AssetReferenceParams
  class AssetReferenceParams;
  // Forward declaring type: GameCertificateReferenceParams
  class GameCertificateReferenceParams;
  // Forward declaring type: Port
  class Port;
  // Forward declaring type: BuildRegionParams
  class BuildRegionParams;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: CreateBuildWithCustomContainerRequest
  class CreateBuildWithCustomContainerRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest*, "PlayFab.MultiplayerModels", "CreateBuildWithCustomContainerRequest");
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.MultiplayerModels.CreateBuildWithCustomContainerRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class CreateBuildWithCustomContainerRequest : public ::PlayFab::SharedModels::PlayFabRequestCommon {
    public:
    public:
    // public System.String BuildName
    // Size: 0x8
    // Offset: 0x18
    ::StringW BuildName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Nullable`1<PlayFab.MultiplayerModels.ContainerFlavor> ContainerFlavor
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::System::Nullable_1<::PlayFab::MultiplayerModels::ContainerFlavor> ContainerFlavor;
    // public PlayFab.MultiplayerModels.ContainerImageReference ContainerImageReference
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::MultiplayerModels::ContainerImageReference* ContainerImageReference;
    // Field size check
    static_assert(sizeof(::PlayFab::MultiplayerModels::ContainerImageReference*) == 0x8);
    // public System.String ContainerRunCommand
    // Size: 0x8
    // Offset: 0x30
    ::StringW ContainerRunCommand;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.AssetReferenceParams> GameAssetReferences
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::AssetReferenceParams*>* GameAssetReferences;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::AssetReferenceParams*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.GameCertificateReferenceParams> GameCertificateReferences
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::GameCertificateReferenceParams*>* GameCertificateReferences;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::GameCertificateReferenceParams*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> Metadata
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Metadata;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // public System.Int32 MultiplayerServerCountPerVm
    // Size: 0x4
    // Offset: 0x50
    int MultiplayerServerCountPerVm;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.Port> Ports
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::Port*>* Ports;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::Port*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.BuildRegionParams> RegionConfigurations
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::BuildRegionParams*>* RegionConfigurations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::BuildRegionParams*>*) == 0x8);
    // public System.Nullable`1<PlayFab.MultiplayerModels.AzureVmSize> VmSize
    // Size: 0xFFFFFFFF
    // Offset: 0x68
    ::System::Nullable_1<::PlayFab::MultiplayerModels::AzureVmSize> VmSize;
    public:
    // Deleting conversion operator: operator ::PlayFab::PlayFabAuthenticationContext*
    constexpr operator ::PlayFab::PlayFabAuthenticationContext*() const noexcept = delete;
    // Get instance field reference: public System.String BuildName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_BuildName();
    // Get instance field reference: public System.Nullable`1<PlayFab.MultiplayerModels.ContainerFlavor> ContainerFlavor
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::PlayFab::MultiplayerModels::ContainerFlavor>& dyn_ContainerFlavor();
    // Get instance field reference: public PlayFab.MultiplayerModels.ContainerImageReference ContainerImageReference
    [[deprecated("Use field access instead!")]] ::PlayFab::MultiplayerModels::ContainerImageReference*& dyn_ContainerImageReference();
    // Get instance field reference: public System.String ContainerRunCommand
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ContainerRunCommand();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.AssetReferenceParams> GameAssetReferences
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::AssetReferenceParams*>*& dyn_GameAssetReferences();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.GameCertificateReferenceParams> GameCertificateReferences
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::GameCertificateReferenceParams*>*& dyn_GameCertificateReferences();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> Metadata
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_Metadata();
    // Get instance field reference: public System.Int32 MultiplayerServerCountPerVm
    [[deprecated("Use field access instead!")]] int& dyn_MultiplayerServerCountPerVm();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.Port> Ports
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::Port*>*& dyn_Ports();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.BuildRegionParams> RegionConfigurations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::BuildRegionParams*>*& dyn_RegionConfigurations();
    // Get instance field reference: public System.Nullable`1<PlayFab.MultiplayerModels.AzureVmSize> VmSize
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::PlayFab::MultiplayerModels::AzureVmSize>& dyn_VmSize();
    // public System.Void .ctor()
    // Offset: 0xBCCF88
    // Implemented from: PlayFab.SharedModels.PlayFabRequestCommon
    // Base method: System.Void PlayFabRequestCommon::.ctor()
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreateBuildWithCustomContainerRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreateBuildWithCustomContainerRequest*, creationType>()));
    }
  }; // PlayFab.MultiplayerModels.CreateBuildWithCustomContainerRequest
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
