// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: DifferenceRule
  class DifferenceRule;
  // Forward declaring type: MatchTotalRule
  class MatchTotalRule;
  // Forward declaring type: RegionSelectionRule
  class RegionSelectionRule;
  // Forward declaring type: SetIntersectionRule
  class SetIntersectionRule;
  // Forward declaring type: StatisticsVisibilityToPlayers
  class StatisticsVisibilityToPlayers;
  // Forward declaring type: StringEqualityRule
  class StringEqualityRule;
  // Forward declaring type: TeamDifferenceRule
  class TeamDifferenceRule;
  // Forward declaring type: MatchmakingQueueTeam
  class MatchmakingQueueTeam;
  // Forward declaring type: TeamSizeBalanceRule
  class TeamSizeBalanceRule;
  // Forward declaring type: TeamTicketSizeSimilarityRule
  class TeamTicketSizeSimilarityRule;
}
// Completed forward declares
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: MatchmakingQueueConfig
  class MatchmakingQueueConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::MultiplayerModels::MatchmakingQueueConfig);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::MultiplayerModels::MatchmakingQueueConfig*, "PlayFab.MultiplayerModels", "MatchmakingQueueConfig");
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.MultiplayerModels.MatchmakingQueueConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class MatchmakingQueueConfig : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.String BuildId
    // Size: 0x8
    // Offset: 0x10
    ::StringW BuildId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.DifferenceRule> DifferenceRules
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::DifferenceRule*>* DifferenceRules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::DifferenceRule*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.MatchTotalRule> MatchTotalRules
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchTotalRule*>* MatchTotalRules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchTotalRule*>*) == 0x8);
    // public System.UInt32 MaxMatchSize
    // Size: 0x4
    // Offset: 0x28
    uint MaxMatchSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Nullable`1<System.UInt32> MaxTicketSize
    // Size: 0xFFFFFFFF
    // Offset: 0x2C
    ::System::Nullable_1<uint> MaxTicketSize;
    // public System.UInt32 MinMatchSize
    // Size: 0x4
    // Offset: 0x34
    uint MinMatchSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.String Name
    // Size: 0x8
    // Offset: 0x38
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.MultiplayerModels.RegionSelectionRule RegionSelectionRule
    // Size: 0x8
    // Offset: 0x40
    ::PlayFab::MultiplayerModels::RegionSelectionRule* RegionSelectionRule;
    // Field size check
    static_assert(sizeof(::PlayFab::MultiplayerModels::RegionSelectionRule*) == 0x8);
    // public System.Boolean ServerAllocationEnabled
    // Size: 0x1
    // Offset: 0x48
    bool ServerAllocationEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.SetIntersectionRule> SetIntersectionRules
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::SetIntersectionRule*>* SetIntersectionRules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::SetIntersectionRule*>*) == 0x8);
    // public PlayFab.MultiplayerModels.StatisticsVisibilityToPlayers StatisticsVisibilityToPlayers
    // Size: 0x8
    // Offset: 0x58
    ::PlayFab::MultiplayerModels::StatisticsVisibilityToPlayers* StatisticsVisibilityToPlayers;
    // Field size check
    static_assert(sizeof(::PlayFab::MultiplayerModels::StatisticsVisibilityToPlayers*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.StringEqualityRule> StringEqualityRules
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::StringEqualityRule*>* StringEqualityRules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::StringEqualityRule*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.TeamDifferenceRule> TeamDifferenceRules
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::TeamDifferenceRule*>* TeamDifferenceRules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::TeamDifferenceRule*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.MatchmakingQueueTeam> Teams
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchmakingQueueTeam*>* Teams;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchmakingQueueTeam*>*) == 0x8);
    // public PlayFab.MultiplayerModels.TeamSizeBalanceRule TeamSizeBalanceRule
    // Size: 0x8
    // Offset: 0x78
    ::PlayFab::MultiplayerModels::TeamSizeBalanceRule* TeamSizeBalanceRule;
    // Field size check
    static_assert(sizeof(::PlayFab::MultiplayerModels::TeamSizeBalanceRule*) == 0x8);
    // public PlayFab.MultiplayerModels.TeamTicketSizeSimilarityRule TeamTicketSizeSimilarityRule
    // Size: 0x8
    // Offset: 0x80
    ::PlayFab::MultiplayerModels::TeamTicketSizeSimilarityRule* TeamTicketSizeSimilarityRule;
    // Field size check
    static_assert(sizeof(::PlayFab::MultiplayerModels::TeamTicketSizeSimilarityRule*) == 0x8);
    public:
    // Get instance field reference: public System.String BuildId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_BuildId();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.DifferenceRule> DifferenceRules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::DifferenceRule*>*& dyn_DifferenceRules();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.MatchTotalRule> MatchTotalRules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchTotalRule*>*& dyn_MatchTotalRules();
    // Get instance field reference: public System.UInt32 MaxMatchSize
    [[deprecated("Use field access instead!")]] uint& dyn_MaxMatchSize();
    // Get instance field reference: public System.Nullable`1<System.UInt32> MaxTicketSize
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<uint>& dyn_MaxTicketSize();
    // Get instance field reference: public System.UInt32 MinMatchSize
    [[deprecated("Use field access instead!")]] uint& dyn_MinMatchSize();
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public PlayFab.MultiplayerModels.RegionSelectionRule RegionSelectionRule
    [[deprecated("Use field access instead!")]] ::PlayFab::MultiplayerModels::RegionSelectionRule*& dyn_RegionSelectionRule();
    // Get instance field reference: public System.Boolean ServerAllocationEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_ServerAllocationEnabled();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.SetIntersectionRule> SetIntersectionRules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::SetIntersectionRule*>*& dyn_SetIntersectionRules();
    // Get instance field reference: public PlayFab.MultiplayerModels.StatisticsVisibilityToPlayers StatisticsVisibilityToPlayers
    [[deprecated("Use field access instead!")]] ::PlayFab::MultiplayerModels::StatisticsVisibilityToPlayers*& dyn_StatisticsVisibilityToPlayers();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.StringEqualityRule> StringEqualityRules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::StringEqualityRule*>*& dyn_StringEqualityRules();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.TeamDifferenceRule> TeamDifferenceRules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::TeamDifferenceRule*>*& dyn_TeamDifferenceRules();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.MatchmakingQueueTeam> Teams
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::MatchmakingQueueTeam*>*& dyn_Teams();
    // Get instance field reference: public PlayFab.MultiplayerModels.TeamSizeBalanceRule TeamSizeBalanceRule
    [[deprecated("Use field access instead!")]] ::PlayFab::MultiplayerModels::TeamSizeBalanceRule*& dyn_TeamSizeBalanceRule();
    // Get instance field reference: public PlayFab.MultiplayerModels.TeamTicketSizeSimilarityRule TeamTicketSizeSimilarityRule
    [[deprecated("Use field access instead!")]] ::PlayFab::MultiplayerModels::TeamTicketSizeSimilarityRule*& dyn_TeamTicketSizeSimilarityRule();
    // public System.Void .ctor()
    // Offset: 0xBCD2B0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchmakingQueueConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::MultiplayerModels::MatchmakingQueueConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchmakingQueueConfig*, creationType>()));
    }
  }; // PlayFab.MultiplayerModels.MatchmakingQueueConfig
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::MultiplayerModels::MatchmakingQueueConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
