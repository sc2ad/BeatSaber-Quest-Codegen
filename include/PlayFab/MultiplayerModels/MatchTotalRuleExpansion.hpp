// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: OverrideDouble
  class OverrideDouble;
}
// Completed forward declares
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: MatchTotalRuleExpansion
  class MatchTotalRuleExpansion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::MultiplayerModels::MatchTotalRuleExpansion);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::MultiplayerModels::MatchTotalRuleExpansion*, "PlayFab.MultiplayerModels", "MatchTotalRuleExpansion");
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.MultiplayerModels.MatchTotalRuleExpansion
  // [TokenAttribute] Offset: FFFFFFFF
  class MatchTotalRuleExpansion : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideDouble> MaxOverrides
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>* MaxOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideDouble> MinOverrides
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>* MinOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>*) == 0x8);
    // public System.UInt32 SecondsBetweenExpansions
    // Size: 0x4
    // Offset: 0x20
    uint SecondsBetweenExpansions;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideDouble> MaxOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>*& dyn_MaxOverrides();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideDouble> MinOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideDouble*>*& dyn_MinOverrides();
    // Get instance field reference: public System.UInt32 SecondsBetweenExpansions
    [[deprecated("Use field access instead!")]] uint& dyn_SecondsBetweenExpansions();
    // public System.Void .ctor()
    // Offset: 0xBCD290
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchTotalRuleExpansion* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::MultiplayerModels::MatchTotalRuleExpansion::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchTotalRuleExpansion*, creationType>()));
    }
  }; // PlayFab.MultiplayerModels.MatchTotalRuleExpansion
  #pragma pack(pop)
  static check_size<sizeof(MatchTotalRuleExpansion), 32 + sizeof(uint)> __PlayFab_MultiplayerModels_MatchTotalRuleExpansionSizeCheck;
  static_assert(sizeof(MatchTotalRuleExpansion) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::MultiplayerModels::MatchTotalRuleExpansion::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
