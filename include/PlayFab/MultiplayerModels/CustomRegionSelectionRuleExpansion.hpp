// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: OverrideUnsignedInt
  class OverrideUnsignedInt;
}
// Completed forward declares
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: CustomRegionSelectionRuleExpansion
  class CustomRegionSelectionRuleExpansion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::MultiplayerModels::CustomRegionSelectionRuleExpansion);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::MultiplayerModels::CustomRegionSelectionRuleExpansion*, "PlayFab.MultiplayerModels", "CustomRegionSelectionRuleExpansion");
// Type namespace: PlayFab.MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.MultiplayerModels.CustomRegionSelectionRuleExpansion
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomRegionSelectionRuleExpansion : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideUnsignedInt> MaxLatencyOverrides
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideUnsignedInt*>* MaxLatencyOverrides;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideUnsignedInt*>*) == 0x8);
    // public System.UInt32 SecondsBetweenExpansions
    // Size: 0x4
    // Offset: 0x18
    uint SecondsBetweenExpansions;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.MultiplayerModels.OverrideUnsignedInt> MaxLatencyOverrides
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::MultiplayerModels::OverrideUnsignedInt*>*& dyn_MaxLatencyOverrides();
    // Get instance field reference: public System.UInt32 SecondsBetweenExpansions
    [[deprecated("Use field access instead!")]] uint& dyn_SecondsBetweenExpansions();
    // public System.Void .ctor()
    // Offset: 0xBCCFF0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomRegionSelectionRuleExpansion* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::MultiplayerModels::CustomRegionSelectionRuleExpansion::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomRegionSelectionRuleExpansion*, creationType>()));
    }
  }; // PlayFab.MultiplayerModels.CustomRegionSelectionRuleExpansion
  #pragma pack(pop)
  static check_size<sizeof(CustomRegionSelectionRuleExpansion), 24 + sizeof(uint)> __PlayFab_MultiplayerModels_CustomRegionSelectionRuleExpansionSizeCheck;
  static_assert(sizeof(CustomRegionSelectionRuleExpansion) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::MultiplayerModels::CustomRegionSelectionRuleExpansion::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
