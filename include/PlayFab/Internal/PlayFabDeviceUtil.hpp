// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::Internal
namespace PlayFab::Internal {
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::SharedModels
namespace PlayFab::SharedModels {
  // Forward declaring type: IPlayFabInstanceApi
  class IPlayFabInstanceApi;
  // Forward declaring type: PlayFabResultCommon
  class PlayFabResultCommon;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: AttributeInstallResult
  class AttributeInstallResult;
  // Forward declaring type: UserSettings
  class UserSettings;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: PlayFabDeviceUtil
  class PlayFabDeviceUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabDeviceUtil);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabDeviceUtil*, "PlayFab.Internal", "PlayFabDeviceUtil");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabDeviceUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabDeviceUtil : public ::Il2CppObject {
    public:
    // Nested type: ::PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0
    class $$c__DisplayClass9_0;
    // Get static field: static private System.Boolean _needsAttribution
    static bool _get__needsAttribution();
    // Set static field: static private System.Boolean _needsAttribution
    static void _set__needsAttribution(bool value);
    // Get static field: static private System.Boolean _gatherDeviceInfo
    static bool _get__gatherDeviceInfo();
    // Set static field: static private System.Boolean _gatherDeviceInfo
    static void _set__gatherDeviceInfo(bool value);
    // Get static field: static private System.Boolean _gatherScreenTime
    static bool _get__gatherScreenTime();
    // Set static field: static private System.Boolean _gatherScreenTime
    static void _set__gatherScreenTime(bool value);
    // static private System.Void DoAttributeInstall(PlayFab.PlayFabApiSettings settings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xBB77F0
    static void DoAttributeInstall(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi);
    // static private System.Void OnAttributeInstall(PlayFab.ClientModels.AttributeInstallResult result)
    // Offset: 0xBB7B98
    static void OnAttributeInstall(::PlayFab::ClientModels::AttributeInstallResult* result);
    // static private System.Void SendDeviceInfoToPlayFab(PlayFab.PlayFabApiSettings settings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xBB7C58
    static void SendDeviceInfoToPlayFab(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi);
    // static private System.Void OnGatherFail(PlayFab.PlayFabError error)
    // Offset: 0xBB80F0
    static void OnGatherFail(::PlayFab::PlayFabError* error);
    // static public System.Void OnPlayFabLogin(PlayFab.SharedModels.PlayFabResultCommon result, PlayFab.PlayFabApiSettings settings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xBB8190
    static void OnPlayFabLogin(::PlayFab::SharedModels::PlayFabResultCommon* result, ::PlayFab::PlayFabApiSettings* settings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi);
    // static private System.Void _OnPlayFabLogin(PlayFab.ClientModels.UserSettings settingsForUser, System.String playFabId, System.String entityId, System.String entityType, PlayFab.PlayFabApiSettings settings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xBB82B4
    static void _OnPlayFabLogin(::PlayFab::ClientModels::UserSettings* settingsForUser, ::StringW playFabId, ::StringW entityId, ::StringW entityType, ::PlayFab::PlayFabApiSettings* settings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi);
    // static private System.Void GetAdvertIdFromUnity(PlayFab.PlayFabApiSettings settings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xBB8464
    static void GetAdvertIdFromUnity(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi);
  }; // PlayFab.Internal.PlayFabDeviceUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::DoAttributeInstall
// Il2CppName: DoAttributeInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabApiSettings*, ::PlayFab::SharedModels::IPlayFabInstanceApi*)>(&PlayFab::Internal::PlayFabDeviceUtil::DoAttributeInstall)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabApiSettings")->byval_arg;
    static auto* instanceApi = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "IPlayFabInstanceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "DoAttributeInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, instanceApi});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::OnAttributeInstall
// Il2CppName: OnAttributeInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::ClientModels::AttributeInstallResult*)>(&PlayFab::Internal::PlayFabDeviceUtil::OnAttributeInstall)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "AttributeInstallResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "OnAttributeInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::SendDeviceInfoToPlayFab
// Il2CppName: SendDeviceInfoToPlayFab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabApiSettings*, ::PlayFab::SharedModels::IPlayFabInstanceApi*)>(&PlayFab::Internal::PlayFabDeviceUtil::SendDeviceInfoToPlayFab)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabApiSettings")->byval_arg;
    static auto* instanceApi = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "IPlayFabInstanceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "SendDeviceInfoToPlayFab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, instanceApi});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::OnGatherFail
// Il2CppName: OnGatherFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabError*)>(&PlayFab::Internal::PlayFabDeviceUtil::OnGatherFail)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "OnGatherFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::OnPlayFabLogin
// Il2CppName: OnPlayFabLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::SharedModels::PlayFabResultCommon*, ::PlayFab::PlayFabApiSettings*, ::PlayFab::SharedModels::IPlayFabInstanceApi*)>(&PlayFab::Internal::PlayFabDeviceUtil::OnPlayFabLogin)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "PlayFabResultCommon")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabApiSettings")->byval_arg;
    static auto* instanceApi = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "IPlayFabInstanceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "OnPlayFabLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, settings, instanceApi});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::_OnPlayFabLogin
// Il2CppName: _OnPlayFabLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::ClientModels::UserSettings*, ::StringW, ::StringW, ::StringW, ::PlayFab::PlayFabApiSettings*, ::PlayFab::SharedModels::IPlayFabInstanceApi*)>(&PlayFab::Internal::PlayFabDeviceUtil::_OnPlayFabLogin)> {
  static const MethodInfo* get() {
    static auto* settingsForUser = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "UserSettings")->byval_arg;
    static auto* playFabId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* entityId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabApiSettings")->byval_arg;
    static auto* instanceApi = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "IPlayFabInstanceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "_OnPlayFabLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsForUser, playFabId, entityId, entityType, settings, instanceApi});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::GetAdvertIdFromUnity
// Il2CppName: GetAdvertIdFromUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::PlayFabApiSettings*, ::PlayFab::SharedModels::IPlayFabInstanceApi*)>(&PlayFab::Internal::PlayFabDeviceUtil::GetAdvertIdFromUnity)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabApiSettings")->byval_arg;
    static auto* instanceApi = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "IPlayFabInstanceApi")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil*), "GetAdvertIdFromUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings, instanceApi});
  }
};
