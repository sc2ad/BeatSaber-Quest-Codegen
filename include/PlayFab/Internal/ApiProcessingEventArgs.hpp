// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.ApiProcessingEventType
#include "PlayFab/Internal/ApiProcessingEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::SharedModels
namespace PlayFab::SharedModels {
  // Forward declaring type: PlayFabRequestCommon
  class PlayFabRequestCommon;
  // Forward declaring type: PlayFabResultCommon
  class PlayFabResultCommon;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: ApiProcessingEventArgs
  class ApiProcessingEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::ApiProcessingEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::ApiProcessingEventArgs*, "PlayFab.Internal", "ApiProcessingEventArgs");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.ApiProcessingEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ApiProcessingEventArgs : public ::Il2CppObject {
    public:
    public:
    // public System.String ApiEndpoint
    // Size: 0x8
    // Offset: 0x10
    ::StringW ApiEndpoint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.Internal.ApiProcessingEventType EventType
    // Size: 0x4
    // Offset: 0x18
    ::PlayFab::Internal::ApiProcessingEventType EventType;
    // Field size check
    static_assert(sizeof(::PlayFab::Internal::ApiProcessingEventType) == 0x4);
    // Padding between fields: EventType and: Request
    char __padding1[0x4] = {};
    // public PlayFab.SharedModels.PlayFabRequestCommon Request
    // Size: 0x8
    // Offset: 0x20
    ::PlayFab::SharedModels::PlayFabRequestCommon* Request;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::PlayFabRequestCommon*) == 0x8);
    // public PlayFab.SharedModels.PlayFabResultCommon Result
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::SharedModels::PlayFabResultCommon* Result;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::PlayFabResultCommon*) == 0x8);
    public:
    // Get instance field reference: public System.String ApiEndpoint
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ApiEndpoint();
    // Get instance field reference: public PlayFab.Internal.ApiProcessingEventType EventType
    [[deprecated("Use field access instead!")]] ::PlayFab::Internal::ApiProcessingEventType& dyn_EventType();
    // Get instance field reference: public PlayFab.SharedModels.PlayFabRequestCommon Request
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::PlayFabRequestCommon*& dyn_Request();
    // Get instance field reference: public PlayFab.SharedModels.PlayFabResultCommon Result
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::PlayFabResultCommon*& dyn_Result();
    // public System.Void .ctor()
    // Offset: 0xBB72C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ApiProcessingEventArgs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::ApiProcessingEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ApiProcessingEventArgs*, creationType>()));
    }
    // public TRequest GetRequest()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TRequest>
    TRequest GetRequest() {
      static_assert(std::is_convertible_v<TRequest, ::PlayFab::SharedModels::PlayFabRequestCommon*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::ApiProcessingEventArgs::GetRequest");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRequest", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TRequest, false>(this, ___generic__method);
    }
  }; // PlayFab.Internal.ApiProcessingEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ApiProcessingEventArgs), 40 + sizeof(::PlayFab::SharedModels::PlayFabResultCommon*)> __PlayFab_Internal_ApiProcessingEventArgsSizeCheck;
  static_assert(sizeof(ApiProcessingEventArgs) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::ApiProcessingEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::ApiProcessingEventArgs::GetRequest
// Il2CppName: GetRequest
// Cannot write MetadataGetter for generic methods!
