// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.PlayFabUnityHttp
#include "PlayFab/Internal/PlayFabUnityHttp.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*, "PlayFab.Internal", "PlayFabUnityHttp/<SimpleCallCoroutine>d__10");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabUnityHttp/PlayFab.Internal.<SimpleCallCoroutine>d__10
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlayFabUnityHttp::$SimpleCallCoroutine$d__10 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Byte[] payload
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> payload;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.String fullUrl
    // Size: 0x8
    // Offset: 0x28
    ::StringW fullUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<System.String> errorCallback
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::StringW>* errorCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.Byte[]> successCallback
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::ArrayW<uint8_t>>* successCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ArrayW<uint8_t>>*) == 0x8);
    // public System.String method
    // Size: 0x8
    // Offset: 0x40
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Networking.UnityWebRequest <www>5__2
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Networking::UnityWebRequest* $www$5__2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::UnityWebRequest*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public System.Byte[] payload
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_payload();
    // Get instance field reference: public System.String fullUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fullUrl();
    // Get instance field reference: public System.Action`1<System.String> errorCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_errorCallback();
    // Get instance field reference: public System.Action`1<System.Byte[]> successCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ArrayW<uint8_t>>*& dyn_successCallback();
    // Get instance field reference: public System.String method
    [[deprecated("Use field access instead!")]] ::StringW& dyn_method();
    // Get instance field reference: private UnityEngine.Networking.UnityWebRequest <www>5__2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& dyn_$www$5__2();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0xBBCE4C
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xBBCEB4
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xBBB688
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabUnityHttp::$SimpleCallCoroutine$d__10* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabUnityHttp::$SimpleCallCoroutine$d__10*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xBBC95C
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0xBBCA38
    bool MoveNext();
    // private System.Void <>m__Finally1()
    // Offset: 0xBBC978
    void $$m__Finally1();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xBBCE54
    void System_Collections_IEnumerator_Reset();
  }; // PlayFab.Internal.PlayFabUnityHttp/PlayFab.Internal.<SimpleCallCoroutine>d__10
  #pragma pack(pop)
  static check_size<sizeof(PlayFabUnityHttp::$SimpleCallCoroutine$d__10), 72 + sizeof(::UnityEngine::Networking::UnityWebRequest*)> __PlayFab_Internal_PlayFabUnityHttp_$SimpleCallCoroutine$d__10SizeCheck;
  static_assert(sizeof(PlayFabUnityHttp::$SimpleCallCoroutine$d__10) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::$$m__Finally1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::*)()>(&PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
