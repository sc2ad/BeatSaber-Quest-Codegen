// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.ITransportPlugin
#include "PlayFab/ITransportPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::Internal
namespace PlayFab::Internal {
  // Forward declaring type: CallRequestContainer
  class CallRequestContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: PlayFabUnityHttp
  class PlayFabUnityHttp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabUnityHttp);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabUnityHttp*, "PlayFab.Internal", "PlayFabUnityHttp");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabUnityHttp
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabUnityHttp : public ::Il2CppObject/*, public ::PlayFab::ITransportPlugin*/ {
    public:
    // Nested type: ::PlayFab::Internal::PlayFabUnityHttp::$SimpleCallCoroutine$d__10
    class $SimpleCallCoroutine$d__10;
    // Nested type: ::PlayFab::Internal::PlayFabUnityHttp::$Post$d__12
    class $Post$d__12;
    public:
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x10
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: pendingWwwMessages
    char __padding0[0x3] = {};
    // private readonly System.Int32 _pendingWwwMessages
    // Size: 0x4
    // Offset: 0x14
    int pendingWwwMessages;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::PlayFab::ITransportPlugin
    operator ::PlayFab::ITransportPlugin() noexcept {
      return *reinterpret_cast<::PlayFab::ITransportPlugin*>(this);
    }
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private readonly System.Int32 _pendingWwwMessages
    [[deprecated("Use field access instead!")]] int& dyn__pendingWwwMessages();
    // public System.Boolean get_IsInitialized()
    // Offset: 0xBBB3E8
    bool get_IsInitialized();
    // public System.Void .ctor()
    // Offset: 0xBBC114
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabUnityHttp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabUnityHttp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabUnityHttp*, creationType>()));
    }
    // public System.Void Initialize()
    // Offset: 0xBBB3F0
    void Initialize();
    // public System.Void Update()
    // Offset: 0xBBB3FC
    void Update();
    // public System.Void OnDestroy()
    // Offset: 0xBBB400
    void OnDestroy();
    // public System.Void SimpleGetCall(System.String fullUrl, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBB404
    void SimpleGetCall(::StringW fullUrl, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void SimplePutCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBB538
    void SimplePutCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void SimplePostCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBB5E0
    void SimplePostCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // static private System.Collections.IEnumerator SimpleCallCoroutine(System.String method, System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBB4A0
    static ::System::Collections::IEnumerator* SimpleCallCoroutine(::StringW method, ::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void MakeApiCall(System.Object reqContainerObj)
    // Offset: 0xBBB6B4
    void MakeApiCall(::Il2CppObject* reqContainerObj);
    // private System.Collections.IEnumerator Post(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBBBA6C
    ::System::Collections::IEnumerator* Post(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // public System.Int32 GetPendingMessages()
    // Offset: 0xBBBB14
    int GetPendingMessages();
    // public System.Void OnResponse(System.String response, PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBBBB1C
    void OnResponse(::StringW response, ::PlayFab::Internal::CallRequestContainer* reqContainer);
    // public System.Void OnError(System.String error, PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBBC040
    void OnError(::StringW error, ::PlayFab::Internal::CallRequestContainer* reqContainer);
  }; // PlayFab.Internal.PlayFabUnityHttp
  #pragma pack(pop)
  static check_size<sizeof(PlayFabUnityHttp), 20 + sizeof(int)> __PlayFab_Internal_PlayFabUnityHttpSizeCheck;
  static_assert(sizeof(PlayFabUnityHttp) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Internal::PlayFabUnityHttp::*)()>(&PlayFab::Internal::PlayFabUnityHttp::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)()>(&PlayFab::Internal::PlayFabUnityHttp::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)()>(&PlayFab::Internal::PlayFabUnityHttp::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)()>(&PlayFab::Internal::PlayFabUnityHttp::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::SimpleGetCall
// Il2CppName: SimpleGetCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::StringW, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabUnityHttp::SimpleGetCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "SimpleGetCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::SimplePutCall
// Il2CppName: SimplePutCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabUnityHttp::SimplePutCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "SimplePutCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::SimplePostCall
// Il2CppName: SimplePostCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabUnityHttp::SimplePostCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "SimplePostCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::SimpleCallCoroutine
// Il2CppName: SimpleCallCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::StringW, ::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabUnityHttp::SimpleCallCoroutine)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "SimpleCallCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::MakeApiCall
// Il2CppName: MakeApiCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::Il2CppObject*)>(&PlayFab::Internal::PlayFabUnityHttp::MakeApiCall)> {
  static const MethodInfo* get() {
    static auto* reqContainerObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "MakeApiCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainerObj});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (PlayFab::Internal::PlayFabUnityHttp::*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabUnityHttp::Post)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::GetPendingMessages
// Il2CppName: GetPendingMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayFab::Internal::PlayFabUnityHttp::*)()>(&PlayFab::Internal::PlayFabUnityHttp::GetPendingMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "GetPendingMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::OnResponse
// Il2CppName: OnResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::StringW, ::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabUnityHttp::OnResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "OnResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabUnityHttp::OnError
// Il2CppName: OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabUnityHttp::*)(::StringW, ::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabUnityHttp::OnError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabUnityHttp*), "OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, reqContainer});
  }
};
