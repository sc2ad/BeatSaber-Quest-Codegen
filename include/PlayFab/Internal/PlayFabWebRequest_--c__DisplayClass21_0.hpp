// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.PlayFabWebRequest
#include "PlayFab/Internal/PlayFabWebRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0*, "PlayFab.Internal", "PlayFabWebRequest/<>c__DisplayClass21_0");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabWebRequest/PlayFab.Internal.<>c__DisplayClass21_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlayFabWebRequest::$$c__DisplayClass21_0 : public ::Il2CppObject {
    public:
    public:
    // public PlayFab.Internal.PlayFabWebRequest <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::Internal::PlayFabWebRequest* $$4__this;
    // Field size check
    static_assert(sizeof(::PlayFab::Internal::PlayFabWebRequest*) == 0x8);
    // public System.String fullUrl
    // Size: 0x8
    // Offset: 0x18
    ::StringW fullUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<System.Byte[]> successCallback
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::ArrayW<uint8_t>>* successCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ArrayW<uint8_t>>*) == 0x8);
    // public System.Action`1<System.String> errorCallback
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::StringW>* errorCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.Internal.PlayFabWebRequest <>4__this
    [[deprecated("Use field access instead!")]] ::PlayFab::Internal::PlayFabWebRequest*& dyn_$$4__this();
    // Get instance field reference: public System.String fullUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fullUrl();
    // Get instance field reference: public System.Action`1<System.Byte[]> successCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ArrayW<uint8_t>>*& dyn_successCallback();
    // Get instance field reference: public System.Action`1<System.String> errorCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_errorCallback();
    // public System.Void .ctor()
    // Offset: 0xBBE11C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabWebRequest::$$c__DisplayClass21_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabWebRequest::$$c__DisplayClass21_0*, creationType>()));
    }
    // System.Void <SimpleGetCall>b__0()
    // Offset: 0xBC158C
    void $SimpleGetCall$b__0();
  }; // PlayFab.Internal.PlayFabWebRequest/PlayFab.Internal.<>c__DisplayClass21_0
  #pragma pack(pop)
  static check_size<sizeof(PlayFabWebRequest::$$c__DisplayClass21_0), 40 + sizeof(::System::Action_1<::StringW>*)> __PlayFab_Internal_PlayFabWebRequest_$$c__DisplayClass21_0SizeCheck;
  static_assert(sizeof(PlayFabWebRequest::$$c__DisplayClass21_0) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0::$SimpleGetCall$b__0
// Il2CppName: <SimpleGetCall>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0::*)()>(&PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0::$SimpleGetCall$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0*), "<SimpleGetCall>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
