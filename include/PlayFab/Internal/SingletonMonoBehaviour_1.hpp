// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: SingletonMonoBehaviour`1<T>
  template<typename T>
  class SingletonMonoBehaviour_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::PlayFab::Internal::SingletonMonoBehaviour_1, "PlayFab.Internal", "SingletonMonoBehaviour`1");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.Internal.SingletonMonoBehaviour`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class SingletonMonoBehaviour_1 : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected System.Boolean initialized
    // Size: 0x1
    // Offset: 0x0
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Autogenerated static field getter
    // Get static field: static private T _instance
    static T _get__instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::_get__instance");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<T>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SingletonMonoBehaviour_1<T>*>::get(), "_instance"));
    }
    // Autogenerated static field setter
    // Set static field: static private T _instance
    static void _set__instance(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::_set__instance");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SingletonMonoBehaviour_1<T>*>::get(), "_instance", value));
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::dyn_initialized");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initialized"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // static public T get_instance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T get_instance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::get_instance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SingletonMonoBehaviour_1<T>*>::get(), "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SingletonMonoBehaviour_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SingletonMonoBehaviour_1<T>*, creationType>()));
    }
    // static public System.Void CreateInstance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static void CreateInstance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::CreateInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SingletonMonoBehaviour_1<T>*>::get(), "CreateInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
    // public System.Void Awake()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Awake() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::Awake");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayFab::Internal::SingletonMonoBehaviour_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Initialize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::SingletonMonoBehaviour_1::Initialize");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::PlayFab::Internal::SingletonMonoBehaviour_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // PlayFab.Internal.SingletonMonoBehaviour`1
  // Could not write size check! Type: PlayFab.Internal.SingletonMonoBehaviour`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
