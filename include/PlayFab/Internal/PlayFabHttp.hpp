// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.SingletonMonoBehaviour`1
#include "PlayFab/Internal/SingletonMonoBehaviour_1.hpp"
// Including type: PlayFab.Internal.AuthType
#include "PlayFab/Internal/AuthType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::Internal
namespace PlayFab::Internal {
  // Forward declaring type: CallRequestContainer
  class CallRequestContainer;
  // Forward declaring type: ApiProcessingEventArgs
  class ApiProcessingEventArgs;
  // Forward declaring type: ApiProcessingEventType
  struct ApiProcessingEventType;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: PlayFab::Public
namespace PlayFab::Public {
  // Forward declaring type: IPlayFabLogger
  class IPlayFabLogger;
  // Forward declaring type: IScreenTimeTracker
  class IScreenTimeTracker;
}
// Forward declaring namespace: PlayFab::SharedModels
namespace PlayFab::SharedModels {
  // Forward declaring type: PlayFabResultCommon
  class PlayFabResultCommon;
  // Forward declaring type: PlayFabRequestCommon
  class PlayFabRequestCommon;
  // Forward declaring type: IPlayFabInstanceApi
  class IPlayFabInstanceApi;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: PlayFabHttp
  class PlayFabHttp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabHttp);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabHttp*, "PlayFab.Internal", "PlayFabHttp");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.Internal.PlayFabHttp
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabHttp : public ::PlayFab::Internal::SingletonMonoBehaviour_1<::PlayFab::Internal::PlayFabHttp*> {
    public:
    // Nested type: ::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<TEventArgs>
    template<typename TEventArgs>
    class ApiProcessingEvent_1;
    // Nested type: ::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent
    class ApiProcessErrorEvent;
    // Nested type: ::PlayFab::Internal::PlayFabHttp::$SendScreenTimeEvents$d__17
    class $SendScreenTimeEvents$d__17;
    // Nested type: ::PlayFab::Internal::PlayFabHttp::$$c__DisplayClass23_0_1<TResult>
    template<typename TResult>
    class $$c__DisplayClass23_0_1;
    public:
    // private readonly System.Collections.Generic.Queue`1<System.Collections.IEnumerator> _injectedCoroutines
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>* injectedCoroutines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<System.Action> _injectedAction
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Queue_1<::System::Action*>* injectedAction;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::Action*>*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.List`1<PlayFab.Internal.CallRequestContainer> _apiCallQueue
    static ::System::Collections::Generic::List_1<::PlayFab::Internal::CallRequestContainer*>* _get__apiCallQueue();
    // Set static field: static private System.Collections.Generic.List`1<PlayFab.Internal.CallRequestContainer> _apiCallQueue
    static void _set__apiCallQueue(::System::Collections::Generic::List_1<::PlayFab::Internal::CallRequestContainer*>* value);
    // Get static field: static private PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessingEvent`1<PlayFab.Internal.ApiProcessingEventArgs> ApiProcessingEventHandler
    static ::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>* _get_ApiProcessingEventHandler();
    // Set static field: static private PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessingEvent`1<PlayFab.Internal.ApiProcessingEventArgs> ApiProcessingEventHandler
    static void _set_ApiProcessingEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>* value);
    // Get static field: static private PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessErrorEvent ApiProcessingErrorEventHandler
    static ::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent* _get_ApiProcessingErrorEventHandler();
    // Set static field: static private PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessErrorEvent ApiProcessingErrorEventHandler
    static void _set_ApiProcessingErrorEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent* value);
    // Get static field: static public readonly System.Collections.Generic.Dictionary`2<System.String,System.String> GlobalHeaderInjection
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* _get_GlobalHeaderInjection();
    // Set static field: static public readonly System.Collections.Generic.Dictionary`2<System.String,System.String> GlobalHeaderInjection
    static void _set_GlobalHeaderInjection(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // Get static field: static private PlayFab.Public.IPlayFabLogger _logger
    static ::PlayFab::Public::IPlayFabLogger* _get__logger();
    // Set static field: static private PlayFab.Public.IPlayFabLogger _logger
    static void _set__logger(::PlayFab::Public::IPlayFabLogger* value);
    // Get static field: static private PlayFab.Public.IScreenTimeTracker screenTimeTracker
    static ::PlayFab::Public::IScreenTimeTracker* _get_screenTimeTracker();
    // Set static field: static private PlayFab.Public.IScreenTimeTracker screenTimeTracker
    static void _set_screenTimeTracker(::PlayFab::Public::IScreenTimeTracker* value);
    // static field const value: static private System.Single delayBetweenBatches
    static constexpr const float delayBetweenBatches = 5;
    // Get static field: static private System.Single delayBetweenBatches
    static float _get_delayBetweenBatches();
    // Set static field: static private System.Single delayBetweenBatches
    static void _set_delayBetweenBatches(float value);
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<System.Collections.IEnumerator> _injectedCoroutines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>*& dyn__injectedCoroutines();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<System.Action> _injectedAction
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::Action*>*& dyn__injectedAction();
    // static public System.Void add_ApiProcessingEventHandler(PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessingEvent`1<PlayFab.Internal.ApiProcessingEventArgs> value)
    // Offset: 0xBB8704
    static void add_ApiProcessingEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>* value);
    // static public System.Void remove_ApiProcessingEventHandler(PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessingEvent`1<PlayFab.Internal.ApiProcessingEventArgs> value)
    // Offset: 0xBB87F4
    static void remove_ApiProcessingEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>* value);
    // static public System.Void add_ApiProcessingErrorEventHandler(PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessErrorEvent value)
    // Offset: 0xBB88E4
    static void add_ApiProcessingErrorEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent* value);
    // static public System.Void remove_ApiProcessingErrorEventHandler(PlayFab.Internal.PlayFabHttp/PlayFab.Internal.ApiProcessErrorEvent value)
    // Offset: 0xBB89D4
    static void remove_ApiProcessingErrorEventHandler(::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent* value);
    // static private System.Void .cctor()
    // Offset: 0xBBB0E4
    static void _cctor();
    // static public System.Int32 GetPendingMessages()
    // Offset: 0xBB8AC4
    static int GetPendingMessages();
    // static public System.Void InitializeHttp()
    // Offset: 0xBB8C28
    static void InitializeHttp();
    // static public System.Void InitializeLogger(PlayFab.Public.IPlayFabLogger setLogger)
    // Offset: 0xBB8E0C
    static void InitializeLogger(::PlayFab::Public::IPlayFabLogger* setLogger);
    // static public System.Void InitializeScreenTimeTracker(System.String entityId, System.String entityType, System.String playFabUserId)
    // Offset: 0xBB850C
    static void InitializeScreenTimeTracker(::StringW entityId, ::StringW entityType, ::StringW playFabUserId);
    // static private System.Collections.IEnumerator SendScreenTimeEvents(System.Single secondsBetweenBatches)
    // Offset: 0xBB8EFC
    static ::System::Collections::IEnumerator* SendScreenTimeEvents(float secondsBetweenBatches);
    // static public System.Void SimpleGetCall(System.String fullUrl, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBB8FA0
    static void SimpleGetCall(::StringW fullUrl, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // static public System.Void SimplePutCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBB90D4
    static void SimplePutCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // static public System.Void SimplePostCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBB9218
    static void SimplePostCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // static protected internal System.Void MakeApiCall(System.String apiEndpoint, PlayFab.SharedModels.PlayFabRequestCommon request, PlayFab.Internal.AuthType authType, System.Action`1<TResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders, PlayFab.PlayFabAuthenticationContext authenticationContext, PlayFab.PlayFabApiSettings apiSettings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static void MakeApiCall(::StringW apiEndpoint, ::PlayFab::SharedModels::PlayFabRequestCommon* request, ::PlayFab::Internal::AuthType authType, ::System::Action_1<TResult>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders, ::PlayFab::PlayFabAuthenticationContext* authenticationContext, ::PlayFab::PlayFabApiSettings* apiSettings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi) {
      static_assert(std::is_convertible_v<TResult, ::PlayFab::SharedModels::PlayFabResultCommon*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabHttp::MakeApiCall");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PlayFab.Internal", "PlayFabHttp", "MakeApiCall", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(apiEndpoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(authType), ::il2cpp_utils::ExtractType(resultCallback), ::il2cpp_utils::ExtractType(errorCallback), ::il2cpp_utils::ExtractType(customData), ::il2cpp_utils::ExtractType(extraHeaders), ::il2cpp_utils::ExtractType(authenticationContext), ::il2cpp_utils::ExtractType(apiSettings), ::il2cpp_utils::ExtractType(instanceApi)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, apiEndpoint, request, authType, resultCallback, errorCallback, customData, extraHeaders, authenticationContext, apiSettings, instanceApi);
    }
    // static protected internal System.Void MakeApiCallWithFullUri(System.String fullUri, PlayFab.SharedModels.PlayFabRequestCommon request, PlayFab.Internal.AuthType authType, System.Action`1<TResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders, PlayFab.PlayFabAuthenticationContext authenticationContext, PlayFab.PlayFabApiSettings apiSettings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static void MakeApiCallWithFullUri(::StringW fullUri, ::PlayFab::SharedModels::PlayFabRequestCommon* request, ::PlayFab::Internal::AuthType authType, ::System::Action_1<TResult>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders, ::PlayFab::PlayFabAuthenticationContext* authenticationContext, ::PlayFab::PlayFabApiSettings* apiSettings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi) {
      static_assert(std::is_convertible_v<TResult, ::PlayFab::SharedModels::PlayFabResultCommon*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabHttp::MakeApiCallWithFullUri");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PlayFab.Internal", "PlayFabHttp", "MakeApiCallWithFullUri", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fullUri), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(authType), ::il2cpp_utils::ExtractType(resultCallback), ::il2cpp_utils::ExtractType(errorCallback), ::il2cpp_utils::ExtractType(customData), ::il2cpp_utils::ExtractType(extraHeaders), ::il2cpp_utils::ExtractType(authenticationContext), ::il2cpp_utils::ExtractType(apiSettings), ::il2cpp_utils::ExtractType(instanceApi)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, fullUri, request, authType, resultCallback, errorCallback, customData, extraHeaders, authenticationContext, apiSettings, instanceApi);
    }
    // static private System.Void _MakeApiCall(System.String apiEndpoint, System.String fullUrl, PlayFab.SharedModels.PlayFabRequestCommon request, PlayFab.Internal.AuthType authType, System.Action`1<TResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders, System.Boolean allowQueueing, PlayFab.PlayFabAuthenticationContext authenticationContext, PlayFab.PlayFabApiSettings apiSettings, PlayFab.SharedModels.IPlayFabInstanceApi instanceApi)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static void _MakeApiCall(::StringW apiEndpoint, ::StringW fullUrl, ::PlayFab::SharedModels::PlayFabRequestCommon* request, ::PlayFab::Internal::AuthType authType, ::System::Action_1<TResult>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders, bool allowQueueing, ::PlayFab::PlayFabAuthenticationContext* authenticationContext, ::PlayFab::PlayFabApiSettings* apiSettings, ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi) {
      static_assert(std::is_convertible_v<TResult, ::PlayFab::SharedModels::PlayFabResultCommon*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabHttp::_MakeApiCall");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("PlayFab.Internal", "PlayFabHttp", "_MakeApiCall", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(apiEndpoint), ::il2cpp_utils::ExtractType(fullUrl), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(authType), ::il2cpp_utils::ExtractType(resultCallback), ::il2cpp_utils::ExtractType(errorCallback), ::il2cpp_utils::ExtractType(customData), ::il2cpp_utils::ExtractType(extraHeaders), ::il2cpp_utils::ExtractType(allowQueueing), ::il2cpp_utils::ExtractType(authenticationContext), ::il2cpp_utils::ExtractType(apiSettings), ::il2cpp_utils::ExtractType(instanceApi)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, apiEndpoint, fullUrl, request, authType, resultCallback, errorCallback, customData, extraHeaders, allowQueueing, authenticationContext, apiSettings, instanceApi);
    }
    // System.Void OnPlayFabApiResult(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBB935C
    void OnPlayFabApiResult(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // private System.Void OnEnable()
    // Offset: 0xBB9600
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xBB97EC
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0xBB99DC
    void OnDestroy();
    // public System.Void OnApplicationFocus(System.Boolean isFocused)
    // Offset: 0xBB9CE4
    void OnApplicationFocus(bool isFocused);
    // public System.Void OnApplicationQuit()
    // Offset: 0xBB9E24
    void OnApplicationQuit();
    // private System.Void Update()
    // Offset: 0xBB9F5C
    void Update();
    // static protected internal PlayFab.PlayFabError GeneratePlayFabError(System.String apiEndpoint, System.String json, System.Object customData)
    // Offset: 0xBBA2CC
    static ::PlayFab::PlayFabError* GeneratePlayFabError(::StringW apiEndpoint, ::StringW json, ::Il2CppObject* customData);
    // static protected internal System.Void SendErrorEvent(PlayFab.SharedModels.PlayFabRequestCommon request, PlayFab.PlayFabError error)
    // Offset: 0xBBA7F4
    static void SendErrorEvent(::PlayFab::SharedModels::PlayFabRequestCommon* request, ::PlayFab::PlayFabError* error);
    // static protected internal System.Void SendEvent(System.String apiEndpoint, PlayFab.SharedModels.PlayFabRequestCommon request, PlayFab.SharedModels.PlayFabResultCommon result, PlayFab.Internal.ApiProcessingEventType eventType)
    // Offset: 0xBBAD54
    static void SendEvent(::StringW apiEndpoint, ::PlayFab::SharedModels::PlayFabRequestCommon* request, ::PlayFab::SharedModels::PlayFabResultCommon* result, ::PlayFab::Internal::ApiProcessingEventType eventType);
    // static public System.Void ClearAllEvents()
    // Offset: 0xBBAF04
    static void ClearAllEvents();
    // public System.Void InjectInUnityThread(System.Collections.IEnumerator x)
    // Offset: 0xBBAF74
    void InjectInUnityThread(::System::Collections::IEnumerator* x);
    // public System.Void InjectInUnityThread(System.Action action)
    // Offset: 0xBBAFDC
    void InjectInUnityThread(::System::Action* action);
    // public System.Void .ctor()
    // Offset: 0xBBB044
    // Implemented from: PlayFab.Internal.SingletonMonoBehaviour`1
    // Base method: System.Void SingletonMonoBehaviour_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabHttp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabHttp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabHttp*, creationType>()));
    }
  }; // PlayFab.Internal.PlayFabHttp
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::add_ApiProcessingEventHandler
// Il2CppName: add_ApiProcessingEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>*)>(&PlayFab::Internal::PlayFabHttp::add_ApiProcessingEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("PlayFab.Internal", "PlayFabHttp/ApiProcessingEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.Internal", "ApiProcessingEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "add_ApiProcessingEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::remove_ApiProcessingEventHandler
// Il2CppName: remove_ApiProcessingEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::PlayFabHttp::ApiProcessingEvent_1<::PlayFab::Internal::ApiProcessingEventArgs*>*)>(&PlayFab::Internal::PlayFabHttp::remove_ApiProcessingEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("PlayFab.Internal", "PlayFabHttp/ApiProcessingEvent`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.Internal", "ApiProcessingEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "remove_ApiProcessingEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::add_ApiProcessingErrorEventHandler
// Il2CppName: add_ApiProcessingErrorEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent*)>(&PlayFab::Internal::PlayFabHttp::add_ApiProcessingErrorEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "PlayFabHttp/ApiProcessErrorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "add_ApiProcessingErrorEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::remove_ApiProcessingErrorEventHandler
// Il2CppName: remove_ApiProcessingErrorEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::PlayFabHttp::ApiProcessErrorEvent*)>(&PlayFab::Internal::PlayFabHttp::remove_ApiProcessingErrorEventHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "PlayFabHttp/ApiProcessErrorEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "remove_ApiProcessingErrorEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabHttp::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::GetPendingMessages
// Il2CppName: GetPendingMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&PlayFab::Internal::PlayFabHttp::GetPendingMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "GetPendingMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::InitializeHttp
// Il2CppName: InitializeHttp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabHttp::InitializeHttp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "InitializeHttp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::InitializeLogger
// Il2CppName: InitializeLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Public::IPlayFabLogger*)>(&PlayFab::Internal::PlayFabHttp::InitializeLogger)> {
  static const MethodInfo* get() {
    static auto* setLogger = &::il2cpp_utils::GetClassFromName("PlayFab.Public", "IPlayFabLogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "InitializeLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setLogger});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::InitializeScreenTimeTracker
// Il2CppName: InitializeScreenTimeTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW, ::StringW)>(&PlayFab::Internal::PlayFabHttp::InitializeScreenTimeTracker)> {
  static const MethodInfo* get() {
    static auto* entityId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playFabUserId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "InitializeScreenTimeTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityId, entityType, playFabUserId});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SendScreenTimeEvents
// Il2CppName: SendScreenTimeEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(float)>(&PlayFab::Internal::PlayFabHttp::SendScreenTimeEvents)> {
  static const MethodInfo* get() {
    static auto* secondsBetweenBatches = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SendScreenTimeEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secondsBetweenBatches});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SimpleGetCall
// Il2CppName: SimpleGetCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabHttp::SimpleGetCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SimpleGetCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SimplePutCall
// Il2CppName: SimplePutCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabHttp::SimplePutCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SimplePutCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SimplePostCall
// Il2CppName: SimplePostCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabHttp::SimplePostCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SimplePostCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::MakeApiCall
// Il2CppName: MakeApiCall
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::MakeApiCallWithFullUri
// Il2CppName: MakeApiCallWithFullUri
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::_MakeApiCall
// Il2CppName: _MakeApiCall
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnPlayFabApiResult
// Il2CppName: OnPlayFabApiResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabHttp::OnPlayFabApiResult)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnPlayFabApiResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)()>(&PlayFab::Internal::PlayFabHttp::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)()>(&PlayFab::Internal::PlayFabHttp::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)()>(&PlayFab::Internal::PlayFabHttp::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)(bool)>(&PlayFab::Internal::PlayFabHttp::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* isFocused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isFocused});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)()>(&PlayFab::Internal::PlayFabHttp::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)()>(&PlayFab::Internal::PlayFabHttp::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::GeneratePlayFabError
// Il2CppName: GeneratePlayFabError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PlayFab::PlayFabError* (*)(::StringW, ::StringW, ::Il2CppObject*)>(&PlayFab::Internal::PlayFabHttp::GeneratePlayFabError)> {
  static const MethodInfo* get() {
    static auto* apiEndpoint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "GeneratePlayFabError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{apiEndpoint, json, customData});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SendErrorEvent
// Il2CppName: SendErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::SharedModels::PlayFabRequestCommon*, ::PlayFab::PlayFabError*)>(&PlayFab::Internal::PlayFabHttp::SendErrorEvent)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "PlayFabRequestCommon")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SendErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, error});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::PlayFab::SharedModels::PlayFabRequestCommon*, ::PlayFab::SharedModels::PlayFabResultCommon*, ::PlayFab::Internal::ApiProcessingEventType)>(&PlayFab::Internal::PlayFabHttp::SendEvent)> {
  static const MethodInfo* get() {
    static auto* apiEndpoint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "PlayFabRequestCommon")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.SharedModels", "PlayFabResultCommon")->byval_arg;
    static auto* eventType = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "ApiProcessingEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{apiEndpoint, request, result, eventType});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::ClearAllEvents
// Il2CppName: ClearAllEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabHttp::ClearAllEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "ClearAllEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::InjectInUnityThread
// Il2CppName: InjectInUnityThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)(::System::Collections::IEnumerator*)>(&PlayFab::Internal::PlayFabHttp::InjectInUnityThread)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "InjectInUnityThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::InjectInUnityThread
// Il2CppName: InjectInUnityThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabHttp::*)(::System::Action*)>(&PlayFab::Internal::PlayFabHttp::InjectInUnityThread)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabHttp*), "InjectInUnityThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabHttp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
