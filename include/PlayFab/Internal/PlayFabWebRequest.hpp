// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.ITransportPlugin
#include "PlayFab/ITransportPlugin.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::Internal
namespace PlayFab::Internal {
  // Forward declaring type: CallRequestContainer
  class CallRequestContainer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: RemoteCertificateValidationCallback
  class RemoteCertificateValidationCallback;
  // Forward declaring type: SslPolicyErrors
  struct SslPolicyErrors;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: PlayFabWebRequest
  class PlayFabWebRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabWebRequest);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabWebRequest*, "PlayFab.Internal", "PlayFabWebRequest");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabWebRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabWebRequest : public ::Il2CppObject/*, public ::PlayFab::ITransportPlugin*/ {
    public:
    // Nested type: ::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: ::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    // Nested type: ::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: ::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: ::PlayFab::Internal::PlayFabWebRequest::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    public:
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x10
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::PlayFab::ITransportPlugin
    operator ::PlayFab::ITransportPlugin() noexcept {
      return *reinterpret_cast<::PlayFab::ITransportPlugin*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return isInitialized;
    }
    // Get static field: static private readonly System.Collections.Generic.Queue`1<System.Action> ResultQueueTransferThread
    static ::System::Collections::Generic::Queue_1<::System::Action*>* _get_ResultQueueTransferThread();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<System.Action> ResultQueueTransferThread
    static void _set_ResultQueueTransferThread(::System::Collections::Generic::Queue_1<::System::Action*>* value);
    // Get static field: static private readonly System.Collections.Generic.Queue`1<System.Action> ResultQueueMainThread
    static ::System::Collections::Generic::Queue_1<::System::Action*>* _get_ResultQueueMainThread();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<System.Action> ResultQueueMainThread
    static void _set_ResultQueueMainThread(::System::Collections::Generic::Queue_1<::System::Action*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<PlayFab.Internal.CallRequestContainer> ActiveRequests
    static ::System::Collections::Generic::List_1<::PlayFab::Internal::CallRequestContainer*>* _get_ActiveRequests();
    // Set static field: static private readonly System.Collections.Generic.List`1<PlayFab.Internal.CallRequestContainer> ActiveRequests
    static void _set_ActiveRequests(::System::Collections::Generic::List_1<::PlayFab::Internal::CallRequestContainer*>* value);
    // Get static field: static private System.Boolean certValidationSet
    static bool _get_certValidationSet();
    // Set static field: static private System.Boolean certValidationSet
    static void _set_certValidationSet(bool value);
    // Get static field: static private System.Threading.Thread _requestQueueThread
    static ::System::Threading::Thread* _get__requestQueueThread();
    // Set static field: static private System.Threading.Thread _requestQueueThread
    static void _set__requestQueueThread(::System::Threading::Thread* value);
    // Get static field: static private readonly System.Object _ThreadLock
    static ::Il2CppObject* _get__ThreadLock();
    // Set static field: static private readonly System.Object _ThreadLock
    static void _set__ThreadLock(::Il2CppObject* value);
    // Get static field: static private readonly System.TimeSpan ThreadKillTimeout
    static ::System::TimeSpan _get_ThreadKillTimeout();
    // Set static field: static private readonly System.TimeSpan ThreadKillTimeout
    static void _set_ThreadKillTimeout(::System::TimeSpan value);
    // Get static field: static private System.DateTime _threadKillTime
    static ::System::DateTime _get__threadKillTime();
    // Set static field: static private System.DateTime _threadKillTime
    static void _set__threadKillTime(::System::DateTime value);
    // Get static field: static private System.Boolean _isApplicationPlaying
    static bool _get__isApplicationPlaying();
    // Set static field: static private System.Boolean _isApplicationPlaying
    static void _set__isApplicationPlaying(bool value);
    // Get static field: static private System.Int32 _activeCallCount
    static int _get__activeCallCount();
    // Set static field: static private System.Int32 _activeCallCount
    static void _set__activeCallCount(int value);
    // Get static field: static private System.String _unityVersion
    static ::StringW _get__unityVersion();
    // Set static field: static private System.String _unityVersion
    static void _set__unityVersion(::StringW value);
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // static public System.Void set_CustomCertValidationHook(System.Net.Security.RemoteCertificateValidationCallback value)
    // Offset: 0xBBDAF4
    static void set_CustomCertValidationHook(::System::Net::Security::RemoteCertificateValidationCallback* value);
    // public System.Boolean get_IsInitialized()
    // Offset: 0xBBDB90
    bool get_IsInitialized();
    // public System.Void .ctor()
    // Offset: 0xBC1404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabWebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabWebRequest*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xBC140C
    static void _cctor();
    // static public System.Void SkipCertificateValidation()
    // Offset: 0xBBDA30
    static void SkipCertificateValidation();
    // public System.Void Initialize()
    // Offset: 0xBBDB98
    void Initialize();
    // public System.Void OnDestroy()
    // Offset: 0xBBDD5C
    void OnDestroy();
    // private System.Void SetupCertificates()
    // Offset: 0xBBDC2C
    void SetupCertificates();
    // static private System.Boolean AcceptAllCertifications(System.Object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
    // Offset: 0xBBE034
    static bool AcceptAllCertifications(::Il2CppObject* sender, ::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::System::Security::Cryptography::X509Certificates::X509Chain* chain, ::System::Net::Security::SslPolicyErrors sslPolicyErrors);
    // public System.Void SimpleGetCall(System.String fullUrl, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBE03C
    void SimpleGetCall(::StringW fullUrl, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void SimplePutCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBE124
    void SimplePutCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void SimplePostCall(System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBE214
    void SimplePostCall(::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // private System.Void SimpleHttpsWorker(System.String httpMethod, System.String fullUrl, System.Byte[] payload, System.Action`1<System.Byte[]> successCallback, System.Action`1<System.String> errorCallback)
    // Offset: 0xBBE304
    void SimpleHttpsWorker(::StringW httpMethod, ::StringW fullUrl, ::ArrayW<uint8_t> payload, ::System::Action_1<::ArrayW<uint8_t>>* successCallback, ::System::Action_1<::StringW>* errorCallback);
    // public System.Void MakeApiCall(System.Object reqContainerObj)
    // Offset: 0xBBEB7C
    void MakeApiCall(::Il2CppObject* reqContainerObj);
    // static private System.Void ActivateThreadWorker()
    // Offset: 0xBBED14
    static void ActivateThreadWorker();
    // static private System.Void WorkerThreadMainLoop()
    // Offset: 0xBBEED8
    static void WorkerThreadMainLoop();
    // static private System.Void Post(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBBF708
    static void Post(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // static private System.Void ProcessHttpResponse(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBBFE54
    static void ProcessHttpResponse(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // static private System.Void QueueRequestError(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBC0DDC
    static void QueueRequestError(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // static private System.Void ProcessJsonResponse(PlayFab.Internal.CallRequestContainer reqContainer)
    // Offset: 0xBC0118
    static void ProcessJsonResponse(::PlayFab::Internal::CallRequestContainer* reqContainer);
    // public System.Void Update()
    // Offset: 0xBC0FC4
    void Update();
    // static private System.String ResponseToString(System.Net.WebResponse webResponse)
    // Offset: 0xBC077C
    static ::StringW ResponseToString(::System::Net::WebResponse* webResponse);
    // public System.Int32 GetPendingMessages()
    // Offset: 0xBC11E0
    int GetPendingMessages();
  }; // PlayFab.Internal.PlayFabWebRequest
  #pragma pack(pop)
  static check_size<sizeof(PlayFabWebRequest), 16 + sizeof(bool)> __PlayFab_Internal_PlayFabWebRequestSizeCheck;
  static_assert(sizeof(PlayFabWebRequest) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::set_CustomCertValidationHook
// Il2CppName: set_CustomCertValidationHook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Security::RemoteCertificateValidationCallback*)>(&PlayFab::Internal::PlayFabWebRequest::set_CustomCertValidationHook)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Security", "RemoteCertificateValidationCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "set_CustomCertValidationHook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabWebRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SkipCertificateValidation
// Il2CppName: SkipCertificateValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabWebRequest::SkipCertificateValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SkipCertificateValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SetupCertificates
// Il2CppName: SetupCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::SetupCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SetupCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::AcceptAllCertifications
// Il2CppName: AcceptAllCertifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::System::Security::Cryptography::X509Certificates::X509Chain*, ::System::Net::Security::SslPolicyErrors)>(&PlayFab::Internal::PlayFabWebRequest::AcceptAllCertifications)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* chain = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Chain")->byval_arg;
    static auto* sslPolicyErrors = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SslPolicyErrors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "AcceptAllCertifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, certificate, chain, sslPolicyErrors});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SimpleGetCall
// Il2CppName: SimpleGetCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)(::StringW, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabWebRequest::SimpleGetCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SimpleGetCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SimplePutCall
// Il2CppName: SimplePutCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabWebRequest::SimplePutCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SimplePutCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SimplePostCall
// Il2CppName: SimplePostCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)(::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabWebRequest::SimplePostCall)> {
  static const MethodInfo* get() {
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SimplePostCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::SimpleHttpsWorker
// Il2CppName: SimpleHttpsWorker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)(::StringW, ::StringW, ::ArrayW<uint8_t>, ::System::Action_1<::ArrayW<uint8_t>>*, ::System::Action_1<::StringW>*)>(&PlayFab::Internal::PlayFabWebRequest::SimpleHttpsWorker)> {
  static const MethodInfo* get() {
    static auto* httpMethod = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fullUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* payload = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* successCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "SimpleHttpsWorker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{httpMethod, fullUrl, payload, successCallback, errorCallback});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::MakeApiCall
// Il2CppName: MakeApiCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)(::Il2CppObject*)>(&PlayFab::Internal::PlayFabWebRequest::MakeApiCall)> {
  static const MethodInfo* get() {
    static auto* reqContainerObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "MakeApiCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainerObj});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::ActivateThreadWorker
// Il2CppName: ActivateThreadWorker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabWebRequest::ActivateThreadWorker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "ActivateThreadWorker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::WorkerThreadMainLoop
// Il2CppName: WorkerThreadMainLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayFab::Internal::PlayFabWebRequest::WorkerThreadMainLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "WorkerThreadMainLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabWebRequest::Post)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::ProcessHttpResponse
// Il2CppName: ProcessHttpResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabWebRequest::ProcessHttpResponse)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "ProcessHttpResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::QueueRequestError
// Il2CppName: QueueRequestError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabWebRequest::QueueRequestError)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "QueueRequestError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::ProcessJsonResponse
// Il2CppName: ProcessJsonResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PlayFab::Internal::CallRequestContainer*)>(&PlayFab::Internal::PlayFabWebRequest::ProcessJsonResponse)> {
  static const MethodInfo* get() {
    static auto* reqContainer = &::il2cpp_utils::GetClassFromName("PlayFab.Internal", "CallRequestContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "ProcessJsonResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reqContainer});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::ResponseToString
// Il2CppName: ResponseToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Net::WebResponse*)>(&PlayFab::Internal::PlayFabWebRequest::ResponseToString)> {
  static const MethodInfo* get() {
    static auto* webResponse = &::il2cpp_utils::GetClassFromName("System.Net", "WebResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "ResponseToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{webResponse});
  }
};
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabWebRequest::GetPendingMessages
// Il2CppName: GetPendingMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayFab::Internal::PlayFabWebRequest::*)()>(&PlayFab::Internal::PlayFabWebRequest::GetPendingMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabWebRequest*), "GetPendingMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
