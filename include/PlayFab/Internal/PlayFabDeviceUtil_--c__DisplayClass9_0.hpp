// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.PlayFabDeviceUtil
#include "PlayFab/Internal/PlayFabDeviceUtil.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
}
// Forward declaring namespace: PlayFab::SharedModels
namespace PlayFab::SharedModels {
  // Forward declaring type: IPlayFabInstanceApi
  class IPlayFabInstanceApi;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0*, "PlayFab.Internal", "PlayFabDeviceUtil/<>c__DisplayClass9_0");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.PlayFabDeviceUtil/PlayFab.Internal.<>c__DisplayClass9_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PlayFabDeviceUtil::$$c__DisplayClass9_0 : public ::Il2CppObject {
    public:
    public:
    // public PlayFab.PlayFabApiSettings settings
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::PlayFabApiSettings* settings;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabApiSettings*) == 0x8);
    // public PlayFab.SharedModels.IPlayFabInstanceApi instanceApi
    // Size: 0x8
    // Offset: 0x18
    ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::IPlayFabInstanceApi*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.PlayFabApiSettings settings
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabApiSettings*& dyn_settings();
    // Get instance field reference: public PlayFab.SharedModels.IPlayFabInstanceApi instanceApi
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::IPlayFabInstanceApi*& dyn_instanceApi();
    // public System.Void .ctor()
    // Offset: 0xBB8634
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabDeviceUtil::$$c__DisplayClass9_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabDeviceUtil::$$c__DisplayClass9_0*, creationType>()));
    }
    // System.Void <GetAdvertIdFromUnity>b__0(System.String advertisingId, System.Boolean trackingEnabled, System.String error)
    // Offset: 0xBB863C
    void $GetAdvertIdFromUnity$b__0(::StringW advertisingId, bool trackingEnabled, ::StringW error);
  }; // PlayFab.Internal.PlayFabDeviceUtil/PlayFab.Internal.<>c__DisplayClass9_0
  #pragma pack(pop)
  static check_size<sizeof(PlayFabDeviceUtil::$$c__DisplayClass9_0), 24 + sizeof(::PlayFab::SharedModels::IPlayFabInstanceApi*)> __PlayFab_Internal_PlayFabDeviceUtil_$$c__DisplayClass9_0SizeCheck;
  static_assert(sizeof(PlayFabDeviceUtil::$$c__DisplayClass9_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0::$GetAdvertIdFromUnity$b__0
// Il2CppName: <GetAdvertIdFromUnity>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0::*)(::StringW, bool, ::StringW)>(&PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0::$GetAdvertIdFromUnity$b__0)> {
  static const MethodInfo* get() {
    static auto* advertisingId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* trackingEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Internal::PlayFabDeviceUtil::$$c__DisplayClass9_0*), "<GetAdvertIdFromUnity>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{advertisingId, trackingEnabled, error});
  }
};
