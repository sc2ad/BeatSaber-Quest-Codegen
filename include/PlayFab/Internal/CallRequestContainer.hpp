// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.Internal.HttpRequestState
#include "PlayFab/Internal/HttpRequestState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
// Forward declaring namespace: PlayFab::SharedModels
namespace PlayFab::SharedModels {
  // Forward declaring type: PlayFabRequestCommon
  class PlayFabRequestCommon;
  // Forward declaring type: PlayFabResultCommon
  class PlayFabResultCommon;
  // Forward declaring type: IPlayFabInstanceApi
  class IPlayFabInstanceApi;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Forward declaring type: CallRequestContainer
  class CallRequestContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Internal::CallRequestContainer);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Internal::CallRequestContainer*, "PlayFab.Internal", "CallRequestContainer");
// Type namespace: PlayFab.Internal
namespace PlayFab::Internal {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Internal.CallRequestContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class CallRequestContainer : public ::Il2CppObject {
    public:
    public:
    // public PlayFab.Internal.HttpRequestState HttpState
    // Size: 0x4
    // Offset: 0x10
    ::PlayFab::Internal::HttpRequestState HttpState;
    // Field size check
    static_assert(sizeof(::PlayFab::Internal::HttpRequestState) == 0x4);
    // Padding between fields: HttpState and: HttpRequest
    char __padding0[0x4] = {};
    // public System.Net.HttpWebRequest HttpRequest
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::HttpWebRequest* HttpRequest;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // public System.String ApiEndpoint
    // Size: 0x8
    // Offset: 0x20
    ::StringW ApiEndpoint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String FullUrl
    // Size: 0x8
    // Offset: 0x28
    ::StringW FullUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte[] Payload
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> Payload;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.String JsonResponse
    // Size: 0x8
    // Offset: 0x38
    ::StringW JsonResponse;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.SharedModels.PlayFabRequestCommon ApiRequest
    // Size: 0x8
    // Offset: 0x40
    ::PlayFab::SharedModels::PlayFabRequestCommon* ApiRequest;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::PlayFabRequestCommon*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> RequestHeaders
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* RequestHeaders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // public PlayFab.SharedModels.PlayFabResultCommon ApiResult
    // Size: 0x8
    // Offset: 0x50
    ::PlayFab::SharedModels::PlayFabResultCommon* ApiResult;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::PlayFabResultCommon*) == 0x8);
    // public PlayFab.PlayFabError Error
    // Size: 0x8
    // Offset: 0x58
    ::PlayFab::PlayFabError* Error;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabError*) == 0x8);
    // public System.Action DeserializeResultJson
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* DeserializeResultJson;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action InvokeSuccessCallback
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* InvokeSuccessCallback;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action`1<PlayFab.PlayFabError> ErrorCallback
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::PlayFab::PlayFabError*>* ErrorCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::PlayFab::PlayFabError*>*) == 0x8);
    // public System.Object CustomData
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppObject* CustomData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public PlayFab.PlayFabApiSettings settings
    // Size: 0x8
    // Offset: 0x80
    ::PlayFab::PlayFabApiSettings* settings;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabApiSettings*) == 0x8);
    // public PlayFab.PlayFabAuthenticationContext context
    // Size: 0x8
    // Offset: 0x88
    ::PlayFab::PlayFabAuthenticationContext* context;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabAuthenticationContext*) == 0x8);
    // public PlayFab.SharedModels.IPlayFabInstanceApi instanceApi
    // Size: 0x8
    // Offset: 0x90
    ::PlayFab::SharedModels::IPlayFabInstanceApi* instanceApi;
    // Field size check
    static_assert(sizeof(::PlayFab::SharedModels::IPlayFabInstanceApi*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.Internal.HttpRequestState HttpState
    [[deprecated("Use field access instead!")]] ::PlayFab::Internal::HttpRequestState& dyn_HttpState();
    // Get instance field reference: public System.Net.HttpWebRequest HttpRequest
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn_HttpRequest();
    // Get instance field reference: public System.String ApiEndpoint
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ApiEndpoint();
    // Get instance field reference: public System.String FullUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FullUrl();
    // Get instance field reference: public System.Byte[] Payload
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Payload();
    // Get instance field reference: public System.String JsonResponse
    [[deprecated("Use field access instead!")]] ::StringW& dyn_JsonResponse();
    // Get instance field reference: public PlayFab.SharedModels.PlayFabRequestCommon ApiRequest
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::PlayFabRequestCommon*& dyn_ApiRequest();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> RequestHeaders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_RequestHeaders();
    // Get instance field reference: public PlayFab.SharedModels.PlayFabResultCommon ApiResult
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::PlayFabResultCommon*& dyn_ApiResult();
    // Get instance field reference: public PlayFab.PlayFabError Error
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabError*& dyn_Error();
    // Get instance field reference: public System.Action DeserializeResultJson
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_DeserializeResultJson();
    // Get instance field reference: public System.Action InvokeSuccessCallback
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_InvokeSuccessCallback();
    // Get instance field reference: public System.Action`1<PlayFab.PlayFabError> ErrorCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::PlayFab::PlayFabError*>*& dyn_ErrorCallback();
    // Get instance field reference: public System.Object CustomData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_CustomData();
    // Get instance field reference: public PlayFab.PlayFabApiSettings settings
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabApiSettings*& dyn_settings();
    // Get instance field reference: public PlayFab.PlayFabAuthenticationContext context
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabAuthenticationContext*& dyn_context();
    // Get instance field reference: public PlayFab.SharedModels.IPlayFabInstanceApi instanceApi
    [[deprecated("Use field access instead!")]] ::PlayFab::SharedModels::IPlayFabInstanceApi*& dyn_instanceApi();
    // public System.Void .ctor()
    // Offset: 0xBB72D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallRequestContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::Internal::CallRequestContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallRequestContainer*, creationType>()));
    }
  }; // PlayFab.Internal.CallRequestContainer
  #pragma pack(pop)
  static check_size<sizeof(CallRequestContainer), 144 + sizeof(::PlayFab::SharedModels::IPlayFabInstanceApi*)> __PlayFab_Internal_CallRequestContainerSizeCheck;
  static_assert(sizeof(CallRequestContainer) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Internal::CallRequestContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
