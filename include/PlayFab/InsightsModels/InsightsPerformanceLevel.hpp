// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PlayFab.InsightsModels
namespace PlayFab::InsightsModels {
  // Forward declaring type: InsightsPerformanceLevel
  class InsightsPerformanceLevel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::InsightsModels::InsightsPerformanceLevel);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::InsightsModels::InsightsPerformanceLevel*, "PlayFab.InsightsModels", "InsightsPerformanceLevel");
// Type namespace: PlayFab.InsightsModels
namespace PlayFab::InsightsModels {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.InsightsModels.InsightsPerformanceLevel
  // [TokenAttribute] Offset: FFFFFFFF
  class InsightsPerformanceLevel : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.Int32 ActiveEventExports
    // Size: 0x4
    // Offset: 0x10
    int ActiveEventExports;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 CacheSizeMB
    // Size: 0x4
    // Offset: 0x14
    int CacheSizeMB;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Concurrency
    // Size: 0x4
    // Offset: 0x18
    int Concurrency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Concurrency and: CreditsPerMinute
    char __padding2[0x4] = {};
    // public System.Double CreditsPerMinute
    // Size: 0x8
    // Offset: 0x20
    double CreditsPerMinute;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int32 EventsPerSecond
    // Size: 0x4
    // Offset: 0x28
    int EventsPerSecond;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Level
    // Size: 0x4
    // Offset: 0x2C
    int Level;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxMemoryPerQueryMB
    // Size: 0x4
    // Offset: 0x30
    int MaxMemoryPerQueryMB;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 VirtualCpuCores
    // Size: 0x4
    // Offset: 0x34
    int VirtualCpuCores;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 ActiveEventExports
    [[deprecated("Use field access instead!")]] int& dyn_ActiveEventExports();
    // Get instance field reference: public System.Int32 CacheSizeMB
    [[deprecated("Use field access instead!")]] int& dyn_CacheSizeMB();
    // Get instance field reference: public System.Int32 Concurrency
    [[deprecated("Use field access instead!")]] int& dyn_Concurrency();
    // Get instance field reference: public System.Double CreditsPerMinute
    [[deprecated("Use field access instead!")]] double& dyn_CreditsPerMinute();
    // Get instance field reference: public System.Int32 EventsPerSecond
    [[deprecated("Use field access instead!")]] int& dyn_EventsPerSecond();
    // Get instance field reference: public System.Int32 Level
    [[deprecated("Use field access instead!")]] int& dyn_Level();
    // Get instance field reference: public System.Int32 MaxMemoryPerQueryMB
    [[deprecated("Use field access instead!")]] int& dyn_MaxMemoryPerQueryMB();
    // Get instance field reference: public System.Int32 VirtualCpuCores
    [[deprecated("Use field access instead!")]] int& dyn_VirtualCpuCores();
    // public System.Void .ctor()
    // Offset: 0xBB72B0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InsightsPerformanceLevel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::InsightsModels::InsightsPerformanceLevel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InsightsPerformanceLevel*, creationType>()));
    }
  }; // PlayFab.InsightsModels.InsightsPerformanceLevel
  #pragma pack(pop)
  static check_size<sizeof(InsightsPerformanceLevel), 52 + sizeof(int)> __PlayFab_InsightsModels_InsightsPerformanceLevelSizeCheck;
  static_assert(sizeof(InsightsPerformanceLevel) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::InsightsModels::InsightsPerformanceLevel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
