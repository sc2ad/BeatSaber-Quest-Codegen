// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabExceptionCode
  struct PlayFabExceptionCode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabExceptionCode, "PlayFab", "PlayFabExceptionCode");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabExceptionCode
  // [TokenAttribute] Offset: FFFFFFFF
  struct PlayFabExceptionCode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PlayFabExceptionCode
    constexpr PlayFabExceptionCode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public PlayFab.PlayFabExceptionCode AuthContextRequired
    static constexpr const int AuthContextRequired = 0;
    // Get static field: static public PlayFab.PlayFabExceptionCode AuthContextRequired
    static ::PlayFab::PlayFabExceptionCode _get_AuthContextRequired();
    // Set static field: static public PlayFab.PlayFabExceptionCode AuthContextRequired
    static void _set_AuthContextRequired(::PlayFab::PlayFabExceptionCode value);
    // static field const value: static public PlayFab.PlayFabExceptionCode BuildError
    static constexpr const int BuildError = 1;
    // Get static field: static public PlayFab.PlayFabExceptionCode BuildError
    static ::PlayFab::PlayFabExceptionCode _get_BuildError();
    // Set static field: static public PlayFab.PlayFabExceptionCode BuildError
    static void _set_BuildError(::PlayFab::PlayFabExceptionCode value);
    // static field const value: static public PlayFab.PlayFabExceptionCode DeveloperKeyNotSet
    static constexpr const int DeveloperKeyNotSet = 2;
    // Get static field: static public PlayFab.PlayFabExceptionCode DeveloperKeyNotSet
    static ::PlayFab::PlayFabExceptionCode _get_DeveloperKeyNotSet();
    // Set static field: static public PlayFab.PlayFabExceptionCode DeveloperKeyNotSet
    static void _set_DeveloperKeyNotSet(::PlayFab::PlayFabExceptionCode value);
    // static field const value: static public PlayFab.PlayFabExceptionCode EntityTokenNotSet
    static constexpr const int EntityTokenNotSet = 3;
    // Get static field: static public PlayFab.PlayFabExceptionCode EntityTokenNotSet
    static ::PlayFab::PlayFabExceptionCode _get_EntityTokenNotSet();
    // Set static field: static public PlayFab.PlayFabExceptionCode EntityTokenNotSet
    static void _set_EntityTokenNotSet(::PlayFab::PlayFabExceptionCode value);
    // static field const value: static public PlayFab.PlayFabExceptionCode NotLoggedIn
    static constexpr const int NotLoggedIn = 4;
    // Get static field: static public PlayFab.PlayFabExceptionCode NotLoggedIn
    static ::PlayFab::PlayFabExceptionCode _get_NotLoggedIn();
    // Set static field: static public PlayFab.PlayFabExceptionCode NotLoggedIn
    static void _set_NotLoggedIn(::PlayFab::PlayFabExceptionCode value);
    // static field const value: static public PlayFab.PlayFabExceptionCode TitleNotSet
    static constexpr const int TitleNotSet = 5;
    // Get static field: static public PlayFab.PlayFabExceptionCode TitleNotSet
    static ::PlayFab::PlayFabExceptionCode _get_TitleNotSet();
    // Set static field: static public PlayFab.PlayFabExceptionCode TitleNotSet
    static void _set_TitleNotSet(::PlayFab::PlayFabExceptionCode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // PlayFab.PlayFabExceptionCode
  #pragma pack(pop)
  static check_size<sizeof(PlayFabExceptionCode), 0 + sizeof(int)> __PlayFab_PlayFabExceptionCodeSizeCheck;
  static_assert(sizeof(PlayFabExceptionCode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
