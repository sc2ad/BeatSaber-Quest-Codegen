// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.RuntimePlatform
#include "UnityEngine/RuntimePlatform.hpp"
// Including type: UnityEngine.Rendering.GraphicsDeviceType
#include "UnityEngine/Rendering/GraphicsDeviceType.hpp"
// Including type: UnityEngine.DeviceType
#include "UnityEngine/DeviceType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabDataGatherer
  class PlayFabDataGatherer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabDataGatherer);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabDataGatherer*, "PlayFab", "PlayFabDataGatherer");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0xC3
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabDataGatherer
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabDataGatherer : public ::Il2CppObject {
    public:
    public:
    // public System.String ProductName
    // Size: 0x8
    // Offset: 0x10
    ::StringW ProductName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ProductBundle
    // Size: 0x8
    // Offset: 0x18
    ::StringW ProductBundle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Version
    // Size: 0x8
    // Offset: 0x20
    ::StringW Version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Company
    // Size: 0x8
    // Offset: 0x28
    ::StringW Company;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.RuntimePlatform Platform
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::RuntimePlatform Platform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RuntimePlatform) == 0x4);
    // public System.Boolean GraphicsMultiThreaded
    // Size: 0x1
    // Offset: 0x34
    bool GraphicsMultiThreaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GraphicsMultiThreaded and: GraphicsType
    char __padding5[0x3] = {};
    // public UnityEngine.Rendering.GraphicsDeviceType GraphicsType
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Rendering::GraphicsDeviceType GraphicsType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::GraphicsDeviceType) == 0x4);
    // Padding between fields: GraphicsType and: DataPath
    char __padding6[0x4] = {};
    // public System.String DataPath
    // Size: 0x8
    // Offset: 0x40
    ::StringW DataPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String PersistentDataPath
    // Size: 0x8
    // Offset: 0x48
    ::StringW PersistentDataPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String StreamingAssetsPath
    // Size: 0x8
    // Offset: 0x50
    ::StringW StreamingAssetsPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 TargetFrameRate
    // Size: 0x4
    // Offset: 0x58
    int TargetFrameRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: TargetFrameRate and: UnityVersion
    char __padding10[0x4] = {};
    // public System.String UnityVersion
    // Size: 0x8
    // Offset: 0x60
    ::StringW UnityVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean RunInBackground
    // Size: 0x1
    // Offset: 0x68
    bool RunInBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RunInBackground and: DeviceModel
    char __padding12[0x7] = {};
    // public System.String DeviceModel
    // Size: 0x8
    // Offset: 0x70
    ::StringW DeviceModel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.DeviceType DeviceType
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::DeviceType DeviceType;
    // Field size check
    static_assert(sizeof(::UnityEngine::DeviceType) == 0x4);
    // Padding between fields: DeviceType and: DeviceUniqueId
    char __padding14[0x4] = {};
    // public System.String DeviceUniqueId
    // Size: 0x8
    // Offset: 0x80
    ::StringW DeviceUniqueId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String OperatingSystem
    // Size: 0x8
    // Offset: 0x88
    ::StringW OperatingSystem;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 GraphicsDeviceId
    // Size: 0x4
    // Offset: 0x90
    int GraphicsDeviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: GraphicsDeviceId and: GraphicsDeviceName
    char __padding17[0x4] = {};
    // public System.String GraphicsDeviceName
    // Size: 0x8
    // Offset: 0x98
    ::StringW GraphicsDeviceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 GraphicsMemorySize
    // Size: 0x4
    // Offset: 0xA0
    int GraphicsMemorySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 GraphicsShaderLevel
    // Size: 0x4
    // Offset: 0xA4
    int GraphicsShaderLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SystemMemorySize
    // Size: 0x4
    // Offset: 0xA8
    int SystemMemorySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ProcessorCount
    // Size: 0x4
    // Offset: 0xAC
    int ProcessorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ProcessorFrequency
    // Size: 0x4
    // Offset: 0xB0
    int ProcessorFrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ProcessorFrequency and: ProcessorType
    char __padding23[0x4] = {};
    // public System.String ProcessorType
    // Size: 0x8
    // Offset: 0xB8
    ::StringW ProcessorType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean SupportsAccelerometer
    // Size: 0x1
    // Offset: 0xC0
    bool SupportsAccelerometer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SupportsGyroscope
    // Size: 0x1
    // Offset: 0xC1
    bool SupportsGyroscope;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SupportsLocationService
    // Size: 0x1
    // Offset: 0xC2
    bool SupportsLocationService;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String ProductName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ProductName();
    // Get instance field reference: public System.String ProductBundle
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ProductBundle();
    // Get instance field reference: public System.String Version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Version();
    // Get instance field reference: public System.String Company
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Company();
    // Get instance field reference: public UnityEngine.RuntimePlatform Platform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RuntimePlatform& dyn_Platform();
    // Get instance field reference: public System.Boolean GraphicsMultiThreaded
    [[deprecated("Use field access instead!")]] bool& dyn_GraphicsMultiThreaded();
    // Get instance field reference: public UnityEngine.Rendering.GraphicsDeviceType GraphicsType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::GraphicsDeviceType& dyn_GraphicsType();
    // Get instance field reference: public System.String DataPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DataPath();
    // Get instance field reference: public System.String PersistentDataPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PersistentDataPath();
    // Get instance field reference: public System.String StreamingAssetsPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StreamingAssetsPath();
    // Get instance field reference: public System.Int32 TargetFrameRate
    [[deprecated("Use field access instead!")]] int& dyn_TargetFrameRate();
    // Get instance field reference: public System.String UnityVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_UnityVersion();
    // Get instance field reference: public System.Boolean RunInBackground
    [[deprecated("Use field access instead!")]] bool& dyn_RunInBackground();
    // Get instance field reference: public System.String DeviceModel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DeviceModel();
    // Get instance field reference: public UnityEngine.DeviceType DeviceType
    [[deprecated("Use field access instead!")]] ::UnityEngine::DeviceType& dyn_DeviceType();
    // Get instance field reference: public System.String DeviceUniqueId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DeviceUniqueId();
    // Get instance field reference: public System.String OperatingSystem
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OperatingSystem();
    // Get instance field reference: public System.Int32 GraphicsDeviceId
    [[deprecated("Use field access instead!")]] int& dyn_GraphicsDeviceId();
    // Get instance field reference: public System.String GraphicsDeviceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GraphicsDeviceName();
    // Get instance field reference: public System.Int32 GraphicsMemorySize
    [[deprecated("Use field access instead!")]] int& dyn_GraphicsMemorySize();
    // Get instance field reference: public System.Int32 GraphicsShaderLevel
    [[deprecated("Use field access instead!")]] int& dyn_GraphicsShaderLevel();
    // Get instance field reference: public System.Int32 SystemMemorySize
    [[deprecated("Use field access instead!")]] int& dyn_SystemMemorySize();
    // Get instance field reference: public System.Int32 ProcessorCount
    [[deprecated("Use field access instead!")]] int& dyn_ProcessorCount();
    // Get instance field reference: public System.Int32 ProcessorFrequency
    [[deprecated("Use field access instead!")]] int& dyn_ProcessorFrequency();
    // Get instance field reference: public System.String ProcessorType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ProcessorType();
    // Get instance field reference: public System.Boolean SupportsAccelerometer
    [[deprecated("Use field access instead!")]] bool& dyn_SupportsAccelerometer();
    // Get instance field reference: public System.Boolean SupportsGyroscope
    [[deprecated("Use field access instead!")]] bool& dyn_SupportsGyroscope();
    // Get instance field reference: public System.Boolean SupportsLocationService
    [[deprecated("Use field access instead!")]] bool& dyn_SupportsLocationService();
    // public System.Void .ctor()
    // Offset: 0x163AA10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabDataGatherer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabDataGatherer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabDataGatherer*, creationType>()));
    }
    // public System.String GenerateReport()
    // Offset: 0x163ABD0
    ::StringW GenerateReport();
  }; // PlayFab.PlayFabDataGatherer
  #pragma pack(pop)
  static check_size<sizeof(PlayFabDataGatherer), 194 + sizeof(bool)> __PlayFab_PlayFabDataGathererSizeCheck;
  static_assert(sizeof(PlayFabDataGatherer) == 0xC3);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabDataGatherer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabDataGatherer::GenerateReport
// Il2CppName: GenerateReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::PlayFabDataGatherer::*)()>(&PlayFab::PlayFabDataGatherer::GenerateReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabDataGatherer*), "GenerateReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
