// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab.Public
namespace PlayFab::Public {
  // Forward declaring type: IScreenTimeTracker
  class IScreenTimeTracker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Public::IScreenTimeTracker);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Public::IScreenTimeTracker*, "PlayFab.Public", "IScreenTimeTracker");
// Type namespace: PlayFab.Public
namespace PlayFab::Public {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Public.IScreenTimeTracker
  // [TokenAttribute] Offset: FFFFFFFF
  class IScreenTimeTracker {
    public:
    // public System.Void OnEnable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDisable();
    // public System.Void OnDestroy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDestroy();
    // public System.Void OnApplicationQuit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnApplicationQuit();
    // public System.Void OnApplicationFocus(System.Boolean isFocused)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnApplicationFocus(bool isFocused);
    // public System.Void ClientSessionStart(System.String entityId, System.String entityType, System.String playFabUserId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClientSessionStart(::StringW entityId, ::StringW entityType, ::StringW playFabUserId);
    // public System.Void Send()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Send();
  }; // PlayFab.Public.IScreenTimeTracker
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)()>(&PlayFab::Public::IScreenTimeTracker::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)()>(&PlayFab::Public::IScreenTimeTracker::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)()>(&PlayFab::Public::IScreenTimeTracker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)()>(&PlayFab::Public::IScreenTimeTracker::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)(bool)>(&PlayFab::Public::IScreenTimeTracker::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* isFocused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isFocused});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::ClientSessionStart
// Il2CppName: ClientSessionStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)(::StringW, ::StringW, ::StringW)>(&PlayFab::Public::IScreenTimeTracker::ClientSessionStart)> {
  static const MethodInfo* get() {
    static auto* entityId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* entityType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playFabUserId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "ClientSessionStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityId, entityType, playFabUserId});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IScreenTimeTracker::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IScreenTimeTracker::*)()>(&PlayFab::Public::IScreenTimeTracker::Send)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IScreenTimeTracker*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
