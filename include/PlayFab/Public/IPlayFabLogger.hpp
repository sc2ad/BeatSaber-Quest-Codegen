// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
// Type namespace: PlayFab.Public
namespace PlayFab::Public {
  // Forward declaring type: IPlayFabLogger
  class IPlayFabLogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::Public::IPlayFabLogger);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::Public::IPlayFabLogger*, "PlayFab.Public", "IPlayFabLogger");
// Type namespace: PlayFab.Public
namespace PlayFab::Public {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.Public.IPlayFabLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class IPlayFabLogger {
    public:
    // public System.Net.IPAddress get_ip()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Net::IPAddress* get_ip();
    // public System.Void set_ip(System.Net.IPAddress value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ip(::System::Net::IPAddress* value);
    // public System.Int32 get_port()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_port();
    // public System.Void set_port(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_port(int value);
    // public System.String get_url()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_url();
    // public System.Void set_url(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_url(::StringW value);
    // public System.Void OnEnable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDisable();
    // public System.Void OnDestroy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDestroy();
  }; // PlayFab.Public.IPlayFabLogger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::get_ip
// Il2CppName: get_ip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPAddress* (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::get_ip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "get_ip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::set_ip
// Il2CppName: set_ip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)(::System::Net::IPAddress*)>(&PlayFab::Public::IPlayFabLogger::set_ip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "set_ip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::get_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::set_port
// Il2CppName: set_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)(int)>(&PlayFab::Public::IPlayFabLogger::set_port)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "set_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::get_url
// Il2CppName: get_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::get_url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "get_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::set_url
// Il2CppName: set_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)(::StringW)>(&PlayFab::Public::IPlayFabLogger::set_url)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "set_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::Public::IPlayFabLogger::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::Public::IPlayFabLogger::*)()>(&PlayFab::Public::IPlayFabLogger::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::Public::IPlayFabLogger*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
