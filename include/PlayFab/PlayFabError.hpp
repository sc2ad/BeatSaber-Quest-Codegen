// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.PlayFabErrorCode
#include "PlayFab/PlayFabErrorCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabError);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabError*, "PlayFab", "PlayFabError");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabError
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabError : public ::Il2CppObject {
    public:
    public:
    // public System.String ApiEndpoint
    // Size: 0x8
    // Offset: 0x10
    ::StringW ApiEndpoint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 HttpCode
    // Size: 0x4
    // Offset: 0x18
    int HttpCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: HttpCode and: HttpStatus
    char __padding1[0x4] = {};
    // public System.String HttpStatus
    // Size: 0x8
    // Offset: 0x20
    ::StringW HttpStatus;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.PlayFabErrorCode Error
    // Size: 0x4
    // Offset: 0x28
    ::PlayFab::PlayFabErrorCode Error;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabErrorCode) == 0x4);
    // Padding between fields: Error and: ErrorMessage
    char __padding3[0x4] = {};
    // public System.String ErrorMessage
    // Size: 0x8
    // Offset: 0x30
    ::StringW ErrorMessage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<System.String>> ErrorDetails
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::StringW>*>* ErrorDetails;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::StringW>*>*) == 0x8);
    // public System.Object CustomData
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* CustomData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get static field: static private System.Text.StringBuilder _tempSb
    static ::System::Text::StringBuilder* _get__tempSb();
    // Set static field: static private System.Text.StringBuilder _tempSb
    static void _set__tempSb(::System::Text::StringBuilder* value);
    // Get instance field reference: public System.String ApiEndpoint
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ApiEndpoint();
    // Get instance field reference: public System.Int32 HttpCode
    [[deprecated("Use field access instead!")]] int& dyn_HttpCode();
    // Get instance field reference: public System.String HttpStatus
    [[deprecated("Use field access instead!")]] ::StringW& dyn_HttpStatus();
    // Get instance field reference: public PlayFab.PlayFabErrorCode Error
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabErrorCode& dyn_Error();
    // Get instance field reference: public System.String ErrorMessage
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ErrorMessage();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<System.String>> ErrorDetails
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::StringW>*>*& dyn_ErrorDetails();
    // Get instance field reference: public System.Object CustomData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_CustomData();
    // public System.Void .ctor()
    // Offset: 0x163BCF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabError* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabError::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabError*, creationType>()));
    }
    // public System.String GenerateErrorReport()
    // Offset: 0x163B890
    ::StringW GenerateErrorReport();
    // public override System.String ToString()
    // Offset: 0x163B88C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // PlayFab.PlayFabError
  #pragma pack(pop)
  static check_size<sizeof(PlayFabError), 64 + sizeof(::Il2CppObject*)> __PlayFab_PlayFabErrorSizeCheck;
  static_assert(sizeof(PlayFabError) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabError::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabError::GenerateErrorReport
// Il2CppName: GenerateErrorReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::PlayFabError::*)()>(&PlayFab::PlayFabError::GenerateErrorReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabError*), "GenerateErrorReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabError::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayFab::PlayFabError::*)()>(&PlayFab::PlayFabError::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabError*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
