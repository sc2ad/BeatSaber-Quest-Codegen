// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.IPlayFabInstanceApi
#include "PlayFab/SharedModels/IPlayFabInstanceApi.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabApiSettings
  class PlayFabApiSettings;
  // Forward declaring type: PlayFabAuthenticationContext
  class PlayFabAuthenticationContext;
  // Forward declaring type: PlayFabError
  class PlayFabError;
}
// Forward declaring namespace: PlayFab::MultiplayerModels
namespace PlayFab::MultiplayerModels {
  // Forward declaring type: CancelAllMatchmakingTicketsForPlayerRequest
  class CancelAllMatchmakingTicketsForPlayerRequest;
  // Forward declaring type: CancelAllMatchmakingTicketsForPlayerResult
  class CancelAllMatchmakingTicketsForPlayerResult;
  // Forward declaring type: CancelAllServerBackfillTicketsForPlayerRequest
  class CancelAllServerBackfillTicketsForPlayerRequest;
  // Forward declaring type: CancelAllServerBackfillTicketsForPlayerResult
  class CancelAllServerBackfillTicketsForPlayerResult;
  // Forward declaring type: CancelMatchmakingTicketRequest
  class CancelMatchmakingTicketRequest;
  // Forward declaring type: CancelMatchmakingTicketResult
  class CancelMatchmakingTicketResult;
  // Forward declaring type: CancelServerBackfillTicketRequest
  class CancelServerBackfillTicketRequest;
  // Forward declaring type: CancelServerBackfillTicketResult
  class CancelServerBackfillTicketResult;
  // Forward declaring type: CreateBuildAliasRequest
  class CreateBuildAliasRequest;
  // Forward declaring type: BuildAliasDetailsResponse
  class BuildAliasDetailsResponse;
  // Forward declaring type: CreateBuildWithCustomContainerRequest
  class CreateBuildWithCustomContainerRequest;
  // Forward declaring type: CreateBuildWithCustomContainerResponse
  class CreateBuildWithCustomContainerResponse;
  // Forward declaring type: CreateBuildWithManagedContainerRequest
  class CreateBuildWithManagedContainerRequest;
  // Forward declaring type: CreateBuildWithManagedContainerResponse
  class CreateBuildWithManagedContainerResponse;
  // Forward declaring type: CreateMatchmakingTicketRequest
  class CreateMatchmakingTicketRequest;
  // Forward declaring type: CreateMatchmakingTicketResult
  class CreateMatchmakingTicketResult;
  // Forward declaring type: CreateRemoteUserRequest
  class CreateRemoteUserRequest;
  // Forward declaring type: CreateRemoteUserResponse
  class CreateRemoteUserResponse;
  // Forward declaring type: CreateServerBackfillTicketRequest
  class CreateServerBackfillTicketRequest;
  // Forward declaring type: CreateServerBackfillTicketResult
  class CreateServerBackfillTicketResult;
  // Forward declaring type: CreateServerMatchmakingTicketRequest
  class CreateServerMatchmakingTicketRequest;
  // Forward declaring type: DeleteAssetRequest
  class DeleteAssetRequest;
  // Forward declaring type: EmptyResponse
  class EmptyResponse;
  // Forward declaring type: DeleteBuildRequest
  class DeleteBuildRequest;
  // Forward declaring type: DeleteBuildAliasRequest
  class DeleteBuildAliasRequest;
  // Forward declaring type: DeleteBuildRegionRequest
  class DeleteBuildRegionRequest;
  // Forward declaring type: DeleteCertificateRequest
  class DeleteCertificateRequest;
  // Forward declaring type: DeleteContainerImageRequest
  class DeleteContainerImageRequest;
  // Forward declaring type: DeleteRemoteUserRequest
  class DeleteRemoteUserRequest;
  // Forward declaring type: EnableMultiplayerServersForTitleRequest
  class EnableMultiplayerServersForTitleRequest;
  // Forward declaring type: EnableMultiplayerServersForTitleResponse
  class EnableMultiplayerServersForTitleResponse;
  // Forward declaring type: GetAssetUploadUrlRequest
  class GetAssetUploadUrlRequest;
  // Forward declaring type: GetAssetUploadUrlResponse
  class GetAssetUploadUrlResponse;
  // Forward declaring type: GetBuildRequest
  class GetBuildRequest;
  // Forward declaring type: GetBuildResponse
  class GetBuildResponse;
  // Forward declaring type: GetBuildAliasRequest
  class GetBuildAliasRequest;
  // Forward declaring type: GetContainerRegistryCredentialsRequest
  class GetContainerRegistryCredentialsRequest;
  // Forward declaring type: GetContainerRegistryCredentialsResponse
  class GetContainerRegistryCredentialsResponse;
  // Forward declaring type: GetMatchRequest
  class GetMatchRequest;
  // Forward declaring type: GetMatchResult
  class GetMatchResult;
  // Forward declaring type: GetMatchmakingQueueRequest
  class GetMatchmakingQueueRequest;
  // Forward declaring type: GetMatchmakingQueueResult
  class GetMatchmakingQueueResult;
  // Forward declaring type: GetMatchmakingTicketRequest
  class GetMatchmakingTicketRequest;
  // Forward declaring type: GetMatchmakingTicketResult
  class GetMatchmakingTicketResult;
  // Forward declaring type: GetMultiplayerServerDetailsRequest
  class GetMultiplayerServerDetailsRequest;
  // Forward declaring type: GetMultiplayerServerDetailsResponse
  class GetMultiplayerServerDetailsResponse;
  // Forward declaring type: GetMultiplayerServerLogsRequest
  class GetMultiplayerServerLogsRequest;
  // Forward declaring type: GetMultiplayerServerLogsResponse
  class GetMultiplayerServerLogsResponse;
  // Forward declaring type: GetMultiplayerSessionLogsBySessionIdRequest
  class GetMultiplayerSessionLogsBySessionIdRequest;
  // Forward declaring type: GetQueueStatisticsRequest
  class GetQueueStatisticsRequest;
  // Forward declaring type: GetQueueStatisticsResult
  class GetQueueStatisticsResult;
  // Forward declaring type: GetRemoteLoginEndpointRequest
  class GetRemoteLoginEndpointRequest;
  // Forward declaring type: GetRemoteLoginEndpointResponse
  class GetRemoteLoginEndpointResponse;
  // Forward declaring type: GetServerBackfillTicketRequest
  class GetServerBackfillTicketRequest;
  // Forward declaring type: GetServerBackfillTicketResult
  class GetServerBackfillTicketResult;
  // Forward declaring type: GetTitleEnabledForMultiplayerServersStatusRequest
  class GetTitleEnabledForMultiplayerServersStatusRequest;
  // Forward declaring type: GetTitleEnabledForMultiplayerServersStatusResponse
  class GetTitleEnabledForMultiplayerServersStatusResponse;
  // Forward declaring type: GetTitleMultiplayerServersQuotasRequest
  class GetTitleMultiplayerServersQuotasRequest;
  // Forward declaring type: GetTitleMultiplayerServersQuotasResponse
  class GetTitleMultiplayerServersQuotasResponse;
  // Forward declaring type: JoinMatchmakingTicketRequest
  class JoinMatchmakingTicketRequest;
  // Forward declaring type: JoinMatchmakingTicketResult
  class JoinMatchmakingTicketResult;
  // Forward declaring type: ListMultiplayerServersRequest
  class ListMultiplayerServersRequest;
  // Forward declaring type: ListMultiplayerServersResponse
  class ListMultiplayerServersResponse;
  // Forward declaring type: ListAssetSummariesRequest
  class ListAssetSummariesRequest;
  // Forward declaring type: ListAssetSummariesResponse
  class ListAssetSummariesResponse;
  // Forward declaring type: MultiplayerEmptyRequest
  class MultiplayerEmptyRequest;
  // Forward declaring type: ListBuildAliasesForTitleResponse
  class ListBuildAliasesForTitleResponse;
  // Forward declaring type: ListBuildSummariesRequest
  class ListBuildSummariesRequest;
  // Forward declaring type: ListBuildSummariesResponse
  class ListBuildSummariesResponse;
  // Forward declaring type: ListCertificateSummariesRequest
  class ListCertificateSummariesRequest;
  // Forward declaring type: ListCertificateSummariesResponse
  class ListCertificateSummariesResponse;
  // Forward declaring type: ListContainerImagesRequest
  class ListContainerImagesRequest;
  // Forward declaring type: ListContainerImagesResponse
  class ListContainerImagesResponse;
  // Forward declaring type: ListContainerImageTagsRequest
  class ListContainerImageTagsRequest;
  // Forward declaring type: ListContainerImageTagsResponse
  class ListContainerImageTagsResponse;
  // Forward declaring type: ListMatchmakingQueuesRequest
  class ListMatchmakingQueuesRequest;
  // Forward declaring type: ListMatchmakingQueuesResult
  class ListMatchmakingQueuesResult;
  // Forward declaring type: ListMatchmakingTicketsForPlayerRequest
  class ListMatchmakingTicketsForPlayerRequest;
  // Forward declaring type: ListMatchmakingTicketsForPlayerResult
  class ListMatchmakingTicketsForPlayerResult;
  // Forward declaring type: ListPartyQosServersRequest
  class ListPartyQosServersRequest;
  // Forward declaring type: ListPartyQosServersResponse
  class ListPartyQosServersResponse;
  // Forward declaring type: ListQosServersRequest
  class ListQosServersRequest;
  // Forward declaring type: ListQosServersResponse
  class ListQosServersResponse;
  // Forward declaring type: ListQosServersForTitleRequest
  class ListQosServersForTitleRequest;
  // Forward declaring type: ListQosServersForTitleResponse
  class ListQosServersForTitleResponse;
  // Forward declaring type: ListServerBackfillTicketsForPlayerRequest
  class ListServerBackfillTicketsForPlayerRequest;
  // Forward declaring type: ListServerBackfillTicketsForPlayerResult
  class ListServerBackfillTicketsForPlayerResult;
  // Forward declaring type: ListVirtualMachineSummariesRequest
  class ListVirtualMachineSummariesRequest;
  // Forward declaring type: ListVirtualMachineSummariesResponse
  class ListVirtualMachineSummariesResponse;
  // Forward declaring type: RemoveMatchmakingQueueRequest
  class RemoveMatchmakingQueueRequest;
  // Forward declaring type: RemoveMatchmakingQueueResult
  class RemoveMatchmakingQueueResult;
  // Forward declaring type: RequestMultiplayerServerRequest
  class RequestMultiplayerServerRequest;
  // Forward declaring type: RequestMultiplayerServerResponse
  class RequestMultiplayerServerResponse;
  // Forward declaring type: RolloverContainerRegistryCredentialsRequest
  class RolloverContainerRegistryCredentialsRequest;
  // Forward declaring type: RolloverContainerRegistryCredentialsResponse
  class RolloverContainerRegistryCredentialsResponse;
  // Forward declaring type: SetMatchmakingQueueRequest
  class SetMatchmakingQueueRequest;
  // Forward declaring type: SetMatchmakingQueueResult
  class SetMatchmakingQueueResult;
  // Forward declaring type: ShutdownMultiplayerServerRequest
  class ShutdownMultiplayerServerRequest;
  // Forward declaring type: UntagContainerImageRequest
  class UntagContainerImageRequest;
  // Forward declaring type: UpdateBuildAliasRequest
  class UpdateBuildAliasRequest;
  // Forward declaring type: UpdateBuildRegionRequest
  class UpdateBuildRegionRequest;
  // Forward declaring type: UpdateBuildRegionsRequest
  class UpdateBuildRegionsRequest;
  // Forward declaring type: UploadCertificateRequest
  class UploadCertificateRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PlayFabMultiplayerInstanceAPI
  class PlayFabMultiplayerInstanceAPI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PlayFabMultiplayerInstanceAPI);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PlayFabMultiplayerInstanceAPI*, "PlayFab", "PlayFabMultiplayerInstanceAPI");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.PlayFabMultiplayerInstanceAPI
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayFabMultiplayerInstanceAPI : public ::Il2CppObject/*, public ::PlayFab::SharedModels::IPlayFabInstanceApi*/ {
    public:
    public:
    // public readonly PlayFab.PlayFabApiSettings apiSettings
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::PlayFabApiSettings* apiSettings;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabApiSettings*) == 0x8);
    // public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    // Size: 0x8
    // Offset: 0x18
    ::PlayFab::PlayFabAuthenticationContext* authenticationContext;
    // Field size check
    static_assert(sizeof(::PlayFab::PlayFabAuthenticationContext*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::PlayFab::SharedModels::IPlayFabInstanceApi
    operator ::PlayFab::SharedModels::IPlayFabInstanceApi() noexcept {
      return *reinterpret_cast<::PlayFab::SharedModels::IPlayFabInstanceApi*>(this);
    }
    // Get instance field reference: public readonly PlayFab.PlayFabApiSettings apiSettings
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabApiSettings*& dyn_apiSettings();
    // Get instance field reference: public readonly PlayFab.PlayFabAuthenticationContext authenticationContext
    [[deprecated("Use field access instead!")]] ::PlayFab::PlayFabAuthenticationContext*& dyn_authenticationContext();
    // public System.Void .ctor(PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x1A4C6E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabMultiplayerInstanceAPI* New_ctor(::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabMultiplayerInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabMultiplayerInstanceAPI*, creationType>(context)));
    }
    // public System.Void .ctor(PlayFab.PlayFabApiSettings settings, PlayFab.PlayFabAuthenticationContext context)
    // Offset: 0x1A4C780
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayFabMultiplayerInstanceAPI* New_ctor(::PlayFab::PlayFabApiSettings* settings, ::PlayFab::PlayFabAuthenticationContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PlayFabMultiplayerInstanceAPI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayFabMultiplayerInstanceAPI*, creationType>(settings, context)));
    }
    // public System.Boolean IsEntityLoggedIn()
    // Offset: 0x1A4C824
    bool IsEntityLoggedIn();
    // public System.Void ForgetAllCredentials()
    // Offset: 0x1A4C838
    void ForgetAllCredentials();
    // public System.Void CancelAllMatchmakingTicketsForPlayer(PlayFab.MultiplayerModels.CancelAllMatchmakingTicketsForPlayerRequest request, System.Action`1<PlayFab.MultiplayerModels.CancelAllMatchmakingTicketsForPlayerResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4C84C
    void CancelAllMatchmakingTicketsForPlayer(::PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CancelAllServerBackfillTicketsForPlayer(PlayFab.MultiplayerModels.CancelAllServerBackfillTicketsForPlayerRequest request, System.Action`1<PlayFab.MultiplayerModels.CancelAllServerBackfillTicketsForPlayerResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4C9BC
    void CancelAllServerBackfillTicketsForPlayer(::PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CancelMatchmakingTicket(PlayFab.MultiplayerModels.CancelMatchmakingTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.CancelMatchmakingTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4CB2C
    void CancelMatchmakingTicket(::PlayFab::MultiplayerModels::CancelMatchmakingTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CancelMatchmakingTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CancelServerBackfillTicket(PlayFab.MultiplayerModels.CancelServerBackfillTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.CancelServerBackfillTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4CC9C
    void CancelServerBackfillTicket(::PlayFab::MultiplayerModels::CancelServerBackfillTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CancelServerBackfillTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateBuildAlias(PlayFab.MultiplayerModels.CreateBuildAliasRequest request, System.Action`1<PlayFab.MultiplayerModels.BuildAliasDetailsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4CE0C
    void CreateBuildAlias(::PlayFab::MultiplayerModels::CreateBuildAliasRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateBuildWithCustomContainer(PlayFab.MultiplayerModels.CreateBuildWithCustomContainerRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateBuildWithCustomContainerResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4CF7C
    void CreateBuildWithCustomContainer(::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateBuildWithManagedContainer(PlayFab.MultiplayerModels.CreateBuildWithManagedContainerRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateBuildWithManagedContainerResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D0EC
    void CreateBuildWithManagedContainer(::PlayFab::MultiplayerModels::CreateBuildWithManagedContainerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateBuildWithManagedContainerResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateMatchmakingTicket(PlayFab.MultiplayerModels.CreateMatchmakingTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateMatchmakingTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D25C
    void CreateMatchmakingTicket(::PlayFab::MultiplayerModels::CreateMatchmakingTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateMatchmakingTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateRemoteUser(PlayFab.MultiplayerModels.CreateRemoteUserRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateRemoteUserResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D3CC
    void CreateRemoteUser(::PlayFab::MultiplayerModels::CreateRemoteUserRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateRemoteUserResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateServerBackfillTicket(PlayFab.MultiplayerModels.CreateServerBackfillTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateServerBackfillTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D53C
    void CreateServerBackfillTicket(::PlayFab::MultiplayerModels::CreateServerBackfillTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateServerBackfillTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void CreateServerMatchmakingTicket(PlayFab.MultiplayerModels.CreateServerMatchmakingTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.CreateMatchmakingTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D6AC
    void CreateServerMatchmakingTicket(::PlayFab::MultiplayerModels::CreateServerMatchmakingTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::CreateMatchmakingTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteAsset(PlayFab.MultiplayerModels.DeleteAssetRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D81C
    void DeleteAsset(::PlayFab::MultiplayerModels::DeleteAssetRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteBuild(PlayFab.MultiplayerModels.DeleteBuildRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4D98C
    void DeleteBuild(::PlayFab::MultiplayerModels::DeleteBuildRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteBuildAlias(PlayFab.MultiplayerModels.DeleteBuildAliasRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4DAFC
    void DeleteBuildAlias(::PlayFab::MultiplayerModels::DeleteBuildAliasRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteBuildRegion(PlayFab.MultiplayerModels.DeleteBuildRegionRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4DC6C
    void DeleteBuildRegion(::PlayFab::MultiplayerModels::DeleteBuildRegionRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteCertificate(PlayFab.MultiplayerModels.DeleteCertificateRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4DDDC
    void DeleteCertificate(::PlayFab::MultiplayerModels::DeleteCertificateRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteContainerImageRepository(PlayFab.MultiplayerModels.DeleteContainerImageRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4DF4C
    void DeleteContainerImageRepository(::PlayFab::MultiplayerModels::DeleteContainerImageRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void DeleteRemoteUser(PlayFab.MultiplayerModels.DeleteRemoteUserRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E0BC
    void DeleteRemoteUser(::PlayFab::MultiplayerModels::DeleteRemoteUserRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void EnableMultiplayerServersForTitle(PlayFab.MultiplayerModels.EnableMultiplayerServersForTitleRequest request, System.Action`1<PlayFab.MultiplayerModels.EnableMultiplayerServersForTitleResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E22C
    void EnableMultiplayerServersForTitle(::PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetAssetUploadUrl(PlayFab.MultiplayerModels.GetAssetUploadUrlRequest request, System.Action`1<PlayFab.MultiplayerModels.GetAssetUploadUrlResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E39C
    void GetAssetUploadUrl(::PlayFab::MultiplayerModels::GetAssetUploadUrlRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetAssetUploadUrlResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetBuild(PlayFab.MultiplayerModels.GetBuildRequest request, System.Action`1<PlayFab.MultiplayerModels.GetBuildResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E50C
    void GetBuild(::PlayFab::MultiplayerModels::GetBuildRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetBuildResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetBuildAlias(PlayFab.MultiplayerModels.GetBuildAliasRequest request, System.Action`1<PlayFab.MultiplayerModels.BuildAliasDetailsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E67C
    void GetBuildAlias(::PlayFab::MultiplayerModels::GetBuildAliasRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetContainerRegistryCredentials(PlayFab.MultiplayerModels.GetContainerRegistryCredentialsRequest request, System.Action`1<PlayFab.MultiplayerModels.GetContainerRegistryCredentialsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E7EC
    void GetContainerRegistryCredentials(::PlayFab::MultiplayerModels::GetContainerRegistryCredentialsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetContainerRegistryCredentialsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMatch(PlayFab.MultiplayerModels.GetMatchRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMatchResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4E95C
    void GetMatch(::PlayFab::MultiplayerModels::GetMatchRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMatchmakingQueue(PlayFab.MultiplayerModels.GetMatchmakingQueueRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMatchmakingQueueResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4EACC
    void GetMatchmakingQueue(::PlayFab::MultiplayerModels::GetMatchmakingQueueRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchmakingQueueResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMatchmakingTicket(PlayFab.MultiplayerModels.GetMatchmakingTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMatchmakingTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4EC3C
    void GetMatchmakingTicket(::PlayFab::MultiplayerModels::GetMatchmakingTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchmakingTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMultiplayerServerDetails(PlayFab.MultiplayerModels.GetMultiplayerServerDetailsRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMultiplayerServerDetailsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4EDAC
    void GetMultiplayerServerDetails(::PlayFab::MultiplayerModels::GetMultiplayerServerDetailsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerDetailsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMultiplayerServerLogs(PlayFab.MultiplayerModels.GetMultiplayerServerLogsRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMultiplayerServerLogsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4EF1C
    void GetMultiplayerServerLogs(::PlayFab::MultiplayerModels::GetMultiplayerServerLogsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerLogsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetMultiplayerSessionLogsBySessionId(PlayFab.MultiplayerModels.GetMultiplayerSessionLogsBySessionIdRequest request, System.Action`1<PlayFab.MultiplayerModels.GetMultiplayerServerLogsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F08C
    void GetMultiplayerSessionLogsBySessionId(::PlayFab::MultiplayerModels::GetMultiplayerSessionLogsBySessionIdRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerLogsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetQueueStatistics(PlayFab.MultiplayerModels.GetQueueStatisticsRequest request, System.Action`1<PlayFab.MultiplayerModels.GetQueueStatisticsResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F1FC
    void GetQueueStatistics(::PlayFab::MultiplayerModels::GetQueueStatisticsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetQueueStatisticsResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetRemoteLoginEndpoint(PlayFab.MultiplayerModels.GetRemoteLoginEndpointRequest request, System.Action`1<PlayFab.MultiplayerModels.GetRemoteLoginEndpointResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F36C
    void GetRemoteLoginEndpoint(::PlayFab::MultiplayerModels::GetRemoteLoginEndpointRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetRemoteLoginEndpointResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetServerBackfillTicket(PlayFab.MultiplayerModels.GetServerBackfillTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.GetServerBackfillTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F4DC
    void GetServerBackfillTicket(::PlayFab::MultiplayerModels::GetServerBackfillTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetServerBackfillTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetTitleEnabledForMultiplayerServersStatus(PlayFab.MultiplayerModels.GetTitleEnabledForMultiplayerServersStatusRequest request, System.Action`1<PlayFab.MultiplayerModels.GetTitleEnabledForMultiplayerServersStatusResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F64C
    void GetTitleEnabledForMultiplayerServersStatus(::PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void GetTitleMultiplayerServersQuotas(PlayFab.MultiplayerModels.GetTitleMultiplayerServersQuotasRequest request, System.Action`1<PlayFab.MultiplayerModels.GetTitleMultiplayerServersQuotasResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F7BC
    void GetTitleMultiplayerServersQuotas(::PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void JoinMatchmakingTicket(PlayFab.MultiplayerModels.JoinMatchmakingTicketRequest request, System.Action`1<PlayFab.MultiplayerModels.JoinMatchmakingTicketResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4F92C
    void JoinMatchmakingTicket(::PlayFab::MultiplayerModels::JoinMatchmakingTicketRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::JoinMatchmakingTicketResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListArchivedMultiplayerServers(PlayFab.MultiplayerModels.ListMultiplayerServersRequest request, System.Action`1<PlayFab.MultiplayerModels.ListMultiplayerServersResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4FA9C
    void ListArchivedMultiplayerServers(::PlayFab::MultiplayerModels::ListMultiplayerServersRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListMultiplayerServersResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListAssetSummaries(PlayFab.MultiplayerModels.ListAssetSummariesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListAssetSummariesResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4FC0C
    void ListAssetSummaries(::PlayFab::MultiplayerModels::ListAssetSummariesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListAssetSummariesResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListBuildAliases(PlayFab.MultiplayerModels.MultiplayerEmptyRequest request, System.Action`1<PlayFab.MultiplayerModels.ListBuildAliasesForTitleResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4FD7C
    void ListBuildAliases(::PlayFab::MultiplayerModels::MultiplayerEmptyRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListBuildAliasesForTitleResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListBuildSummaries(PlayFab.MultiplayerModels.ListBuildSummariesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListBuildSummariesResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A4FEEC
    void ListBuildSummaries(::PlayFab::MultiplayerModels::ListBuildSummariesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListBuildSummariesResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListCertificateSummaries(PlayFab.MultiplayerModels.ListCertificateSummariesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListCertificateSummariesResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5005C
    void ListCertificateSummaries(::PlayFab::MultiplayerModels::ListCertificateSummariesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListCertificateSummariesResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListContainerImages(PlayFab.MultiplayerModels.ListContainerImagesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListContainerImagesResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A501CC
    void ListContainerImages(::PlayFab::MultiplayerModels::ListContainerImagesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListContainerImagesResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListContainerImageTags(PlayFab.MultiplayerModels.ListContainerImageTagsRequest request, System.Action`1<PlayFab.MultiplayerModels.ListContainerImageTagsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5033C
    void ListContainerImageTags(::PlayFab::MultiplayerModels::ListContainerImageTagsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListContainerImageTagsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListMatchmakingQueues(PlayFab.MultiplayerModels.ListMatchmakingQueuesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListMatchmakingQueuesResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A504AC
    void ListMatchmakingQueues(::PlayFab::MultiplayerModels::ListMatchmakingQueuesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListMatchmakingQueuesResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListMatchmakingTicketsForPlayer(PlayFab.MultiplayerModels.ListMatchmakingTicketsForPlayerRequest request, System.Action`1<PlayFab.MultiplayerModels.ListMatchmakingTicketsForPlayerResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5061C
    void ListMatchmakingTicketsForPlayer(::PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListMultiplayerServers(PlayFab.MultiplayerModels.ListMultiplayerServersRequest request, System.Action`1<PlayFab.MultiplayerModels.ListMultiplayerServersResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5078C
    void ListMultiplayerServers(::PlayFab::MultiplayerModels::ListMultiplayerServersRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListMultiplayerServersResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListPartyQosServers(PlayFab.MultiplayerModels.ListPartyQosServersRequest request, System.Action`1<PlayFab.MultiplayerModels.ListPartyQosServersResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A508FC
    void ListPartyQosServers(::PlayFab::MultiplayerModels::ListPartyQosServersRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListPartyQosServersResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListQosServers(PlayFab.MultiplayerModels.ListQosServersRequest request, System.Action`1<PlayFab.MultiplayerModels.ListQosServersResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A50A14
    void ListQosServers(::PlayFab::MultiplayerModels::ListQosServersRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListQosServersResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListQosServersForTitle(PlayFab.MultiplayerModels.ListQosServersForTitleRequest request, System.Action`1<PlayFab.MultiplayerModels.ListQosServersForTitleResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A50B2C
    void ListQosServersForTitle(::PlayFab::MultiplayerModels::ListQosServersForTitleRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListQosServersForTitleResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListServerBackfillTicketsForPlayer(PlayFab.MultiplayerModels.ListServerBackfillTicketsForPlayerRequest request, System.Action`1<PlayFab.MultiplayerModels.ListServerBackfillTicketsForPlayerResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A50C9C
    void ListServerBackfillTicketsForPlayer(::PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ListVirtualMachineSummaries(PlayFab.MultiplayerModels.ListVirtualMachineSummariesRequest request, System.Action`1<PlayFab.MultiplayerModels.ListVirtualMachineSummariesResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A50E0C
    void ListVirtualMachineSummaries(::PlayFab::MultiplayerModels::ListVirtualMachineSummariesRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::ListVirtualMachineSummariesResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void RemoveMatchmakingQueue(PlayFab.MultiplayerModels.RemoveMatchmakingQueueRequest request, System.Action`1<PlayFab.MultiplayerModels.RemoveMatchmakingQueueResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A50F7C
    void RemoveMatchmakingQueue(::PlayFab::MultiplayerModels::RemoveMatchmakingQueueRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::RemoveMatchmakingQueueResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void RequestMultiplayerServer(PlayFab.MultiplayerModels.RequestMultiplayerServerRequest request, System.Action`1<PlayFab.MultiplayerModels.RequestMultiplayerServerResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A510EC
    void RequestMultiplayerServer(::PlayFab::MultiplayerModels::RequestMultiplayerServerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::RequestMultiplayerServerResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void RolloverContainerRegistryCredentials(PlayFab.MultiplayerModels.RolloverContainerRegistryCredentialsRequest request, System.Action`1<PlayFab.MultiplayerModels.RolloverContainerRegistryCredentialsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5125C
    void RolloverContainerRegistryCredentials(::PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void SetMatchmakingQueue(PlayFab.MultiplayerModels.SetMatchmakingQueueRequest request, System.Action`1<PlayFab.MultiplayerModels.SetMatchmakingQueueResult> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A513CC
    void SetMatchmakingQueue(::PlayFab::MultiplayerModels::SetMatchmakingQueueRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::SetMatchmakingQueueResult*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void ShutdownMultiplayerServer(PlayFab.MultiplayerModels.ShutdownMultiplayerServerRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5153C
    void ShutdownMultiplayerServer(::PlayFab::MultiplayerModels::ShutdownMultiplayerServerRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UntagContainerImage(PlayFab.MultiplayerModels.UntagContainerImageRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A516AC
    void UntagContainerImage(::PlayFab::MultiplayerModels::UntagContainerImageRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UpdateBuildAlias(PlayFab.MultiplayerModels.UpdateBuildAliasRequest request, System.Action`1<PlayFab.MultiplayerModels.BuildAliasDetailsResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5181C
    void UpdateBuildAlias(::PlayFab::MultiplayerModels::UpdateBuildAliasRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UpdateBuildRegion(PlayFab.MultiplayerModels.UpdateBuildRegionRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A5198C
    void UpdateBuildRegion(::PlayFab::MultiplayerModels::UpdateBuildRegionRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UpdateBuildRegions(PlayFab.MultiplayerModels.UpdateBuildRegionsRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A51AFC
    void UpdateBuildRegions(::PlayFab::MultiplayerModels::UpdateBuildRegionsRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
    // public System.Void UploadCertificate(PlayFab.MultiplayerModels.UploadCertificateRequest request, System.Action`1<PlayFab.MultiplayerModels.EmptyResponse> resultCallback, System.Action`1<PlayFab.PlayFabError> errorCallback, System.Object customData, System.Collections.Generic.Dictionary`2<System.String,System.String> extraHeaders)
    // Offset: 0x1A51C6C
    void UploadCertificate(::PlayFab::MultiplayerModels::UploadCertificateRequest* request, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>* resultCallback, ::System::Action_1<::PlayFab::PlayFabError*>* errorCallback, ::Il2CppObject* customData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* extraHeaders);
  }; // PlayFab.PlayFabMultiplayerInstanceAPI
  #pragma pack(pop)
  static check_size<sizeof(PlayFabMultiplayerInstanceAPI), 24 + sizeof(::PlayFab::PlayFabAuthenticationContext*)> __PlayFab_PlayFabMultiplayerInstanceAPISizeCheck;
  static_assert(sizeof(PlayFabMultiplayerInstanceAPI) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::IsEntityLoggedIn
// Il2CppName: IsEntityLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PlayFabMultiplayerInstanceAPI::*)()>(&PlayFab::PlayFabMultiplayerInstanceAPI::IsEntityLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "IsEntityLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ForgetAllCredentials
// Il2CppName: ForgetAllCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)()>(&PlayFab::PlayFabMultiplayerInstanceAPI::ForgetAllCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ForgetAllCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CancelAllMatchmakingTicketsForPlayer
// Il2CppName: CancelAllMatchmakingTicketsForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CancelAllMatchmakingTicketsForPlayerResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CancelAllMatchmakingTicketsForPlayer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelAllMatchmakingTicketsForPlayerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelAllMatchmakingTicketsForPlayerResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CancelAllMatchmakingTicketsForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CancelAllServerBackfillTicketsForPlayer
// Il2CppName: CancelAllServerBackfillTicketsForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CancelAllServerBackfillTicketsForPlayerResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CancelAllServerBackfillTicketsForPlayer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelAllServerBackfillTicketsForPlayerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelAllServerBackfillTicketsForPlayerResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CancelAllServerBackfillTicketsForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CancelMatchmakingTicket
// Il2CppName: CancelMatchmakingTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CancelMatchmakingTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CancelMatchmakingTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CancelMatchmakingTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelMatchmakingTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelMatchmakingTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CancelMatchmakingTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CancelServerBackfillTicket
// Il2CppName: CancelServerBackfillTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CancelServerBackfillTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CancelServerBackfillTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CancelServerBackfillTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelServerBackfillTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CancelServerBackfillTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CancelServerBackfillTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildAlias
// Il2CppName: CreateBuildAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateBuildAliasRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildAlias)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateBuildAliasRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "BuildAliasDetailsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateBuildAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildWithCustomContainer
// Il2CppName: CreateBuildWithCustomContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateBuildWithCustomContainerResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildWithCustomContainer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateBuildWithCustomContainerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateBuildWithCustomContainerResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateBuildWithCustomContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildWithManagedContainer
// Il2CppName: CreateBuildWithManagedContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateBuildWithManagedContainerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateBuildWithManagedContainerResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateBuildWithManagedContainer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateBuildWithManagedContainerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateBuildWithManagedContainerResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateBuildWithManagedContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateMatchmakingTicket
// Il2CppName: CreateMatchmakingTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateMatchmakingTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateMatchmakingTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateMatchmakingTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateMatchmakingTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateMatchmakingTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateMatchmakingTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateRemoteUser
// Il2CppName: CreateRemoteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateRemoteUserRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateRemoteUserResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateRemoteUser)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateRemoteUserRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateRemoteUserResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateRemoteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateServerBackfillTicket
// Il2CppName: CreateServerBackfillTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateServerBackfillTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateServerBackfillTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateServerBackfillTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateServerBackfillTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateServerBackfillTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateServerBackfillTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::CreateServerMatchmakingTicket
// Il2CppName: CreateServerMatchmakingTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::CreateServerMatchmakingTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::CreateMatchmakingTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::CreateServerMatchmakingTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateServerMatchmakingTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "CreateMatchmakingTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "CreateServerMatchmakingTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteAsset
// Il2CppName: DeleteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteAssetRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteAsset)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteAssetRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuild
// Il2CppName: DeleteBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteBuildRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuild)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteBuildRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuildAlias
// Il2CppName: DeleteBuildAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteBuildAliasRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuildAlias)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteBuildAliasRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteBuildAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuildRegion
// Il2CppName: DeleteBuildRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteBuildRegionRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteBuildRegion)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteBuildRegionRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteBuildRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteCertificate
// Il2CppName: DeleteCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteCertificateRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteCertificate)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteCertificateRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteContainerImageRepository
// Il2CppName: DeleteContainerImageRepository
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteContainerImageRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteContainerImageRepository)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteContainerImageRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteContainerImageRepository", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::DeleteRemoteUser
// Il2CppName: DeleteRemoteUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::DeleteRemoteUserRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::DeleteRemoteUser)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "DeleteRemoteUserRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "DeleteRemoteUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::EnableMultiplayerServersForTitle
// Il2CppName: EnableMultiplayerServersForTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EnableMultiplayerServersForTitleResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::EnableMultiplayerServersForTitle)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EnableMultiplayerServersForTitleRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EnableMultiplayerServersForTitleResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "EnableMultiplayerServersForTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetAssetUploadUrl
// Il2CppName: GetAssetUploadUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetAssetUploadUrlRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetAssetUploadUrlResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetAssetUploadUrl)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetAssetUploadUrlRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetAssetUploadUrlResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetAssetUploadUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetBuild
// Il2CppName: GetBuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetBuildRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetBuildResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetBuild)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetBuildRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetBuildResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetBuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetBuildAlias
// Il2CppName: GetBuildAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetBuildAliasRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetBuildAlias)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetBuildAliasRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "BuildAliasDetailsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetBuildAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetContainerRegistryCredentials
// Il2CppName: GetContainerRegistryCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetContainerRegistryCredentialsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetContainerRegistryCredentialsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetContainerRegistryCredentials)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetContainerRegistryCredentialsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetContainerRegistryCredentialsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetContainerRegistryCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMatch
// Il2CppName: GetMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMatchRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMatch)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMatchmakingQueue
// Il2CppName: GetMatchmakingQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMatchmakingQueueRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchmakingQueueResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMatchmakingQueue)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchmakingQueueRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchmakingQueueResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMatchmakingQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMatchmakingTicket
// Il2CppName: GetMatchmakingTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMatchmakingTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMatchmakingTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMatchmakingTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchmakingTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMatchmakingTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMatchmakingTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerServerDetails
// Il2CppName: GetMultiplayerServerDetails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMultiplayerServerDetailsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerDetailsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerServerDetails)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerServerDetailsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerServerDetailsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMultiplayerServerDetails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerServerLogs
// Il2CppName: GetMultiplayerServerLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMultiplayerServerLogsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerLogsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerServerLogs)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerServerLogsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerServerLogsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMultiplayerServerLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerSessionLogsBySessionId
// Il2CppName: GetMultiplayerSessionLogsBySessionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetMultiplayerSessionLogsBySessionIdRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetMultiplayerServerLogsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetMultiplayerSessionLogsBySessionId)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerSessionLogsBySessionIdRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetMultiplayerServerLogsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetMultiplayerSessionLogsBySessionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetQueueStatistics
// Il2CppName: GetQueueStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetQueueStatisticsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetQueueStatisticsResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetQueueStatistics)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetQueueStatisticsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetQueueStatisticsResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetQueueStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetRemoteLoginEndpoint
// Il2CppName: GetRemoteLoginEndpoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetRemoteLoginEndpointRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetRemoteLoginEndpointResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetRemoteLoginEndpoint)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetRemoteLoginEndpointRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetRemoteLoginEndpointResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetRemoteLoginEndpoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetServerBackfillTicket
// Il2CppName: GetServerBackfillTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetServerBackfillTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetServerBackfillTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetServerBackfillTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetServerBackfillTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetServerBackfillTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetServerBackfillTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetTitleEnabledForMultiplayerServersStatus
// Il2CppName: GetTitleEnabledForMultiplayerServersStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetTitleEnabledForMultiplayerServersStatusResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetTitleEnabledForMultiplayerServersStatus)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetTitleEnabledForMultiplayerServersStatusRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetTitleEnabledForMultiplayerServersStatusResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetTitleEnabledForMultiplayerServersStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::GetTitleMultiplayerServersQuotas
// Il2CppName: GetTitleMultiplayerServersQuotas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::GetTitleMultiplayerServersQuotasResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::GetTitleMultiplayerServersQuotas)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetTitleMultiplayerServersQuotasRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "GetTitleMultiplayerServersQuotasResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "GetTitleMultiplayerServersQuotas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::JoinMatchmakingTicket
// Il2CppName: JoinMatchmakingTicket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::JoinMatchmakingTicketRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::JoinMatchmakingTicketResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::JoinMatchmakingTicket)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "JoinMatchmakingTicketRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "JoinMatchmakingTicketResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "JoinMatchmakingTicket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListArchivedMultiplayerServers
// Il2CppName: ListArchivedMultiplayerServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListMultiplayerServersRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListMultiplayerServersResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListArchivedMultiplayerServers)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMultiplayerServersRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMultiplayerServersResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListArchivedMultiplayerServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListAssetSummaries
// Il2CppName: ListAssetSummaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListAssetSummariesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListAssetSummariesResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListAssetSummaries)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListAssetSummariesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListAssetSummariesResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListAssetSummaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListBuildAliases
// Il2CppName: ListBuildAliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::MultiplayerEmptyRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListBuildAliasesForTitleResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListBuildAliases)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "MultiplayerEmptyRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListBuildAliasesForTitleResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListBuildAliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListBuildSummaries
// Il2CppName: ListBuildSummaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListBuildSummariesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListBuildSummariesResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListBuildSummaries)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListBuildSummariesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListBuildSummariesResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListBuildSummaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListCertificateSummaries
// Il2CppName: ListCertificateSummaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListCertificateSummariesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListCertificateSummariesResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListCertificateSummaries)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListCertificateSummariesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListCertificateSummariesResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListCertificateSummaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListContainerImages
// Il2CppName: ListContainerImages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListContainerImagesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListContainerImagesResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListContainerImages)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListContainerImagesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListContainerImagesResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListContainerImages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListContainerImageTags
// Il2CppName: ListContainerImageTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListContainerImageTagsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListContainerImageTagsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListContainerImageTags)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListContainerImageTagsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListContainerImageTagsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListContainerImageTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListMatchmakingQueues
// Il2CppName: ListMatchmakingQueues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListMatchmakingQueuesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListMatchmakingQueuesResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListMatchmakingQueues)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMatchmakingQueuesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMatchmakingQueuesResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListMatchmakingQueues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListMatchmakingTicketsForPlayer
// Il2CppName: ListMatchmakingTicketsForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListMatchmakingTicketsForPlayerResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListMatchmakingTicketsForPlayer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMatchmakingTicketsForPlayerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMatchmakingTicketsForPlayerResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListMatchmakingTicketsForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListMultiplayerServers
// Il2CppName: ListMultiplayerServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListMultiplayerServersRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListMultiplayerServersResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListMultiplayerServers)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMultiplayerServersRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListMultiplayerServersResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListMultiplayerServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListPartyQosServers
// Il2CppName: ListPartyQosServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListPartyQosServersRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListPartyQosServersResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListPartyQosServers)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListPartyQosServersRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListPartyQosServersResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListPartyQosServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListQosServers
// Il2CppName: ListQosServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListQosServersRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListQosServersResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListQosServers)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListQosServersRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListQosServersResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListQosServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListQosServersForTitle
// Il2CppName: ListQosServersForTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListQosServersForTitleRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListQosServersForTitleResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListQosServersForTitle)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListQosServersForTitleRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListQosServersForTitleResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListQosServersForTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListServerBackfillTicketsForPlayer
// Il2CppName: ListServerBackfillTicketsForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListServerBackfillTicketsForPlayerResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListServerBackfillTicketsForPlayer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListServerBackfillTicketsForPlayerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListServerBackfillTicketsForPlayerResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListServerBackfillTicketsForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ListVirtualMachineSummaries
// Il2CppName: ListVirtualMachineSummaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ListVirtualMachineSummariesRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::ListVirtualMachineSummariesResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ListVirtualMachineSummaries)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListVirtualMachineSummariesRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ListVirtualMachineSummariesResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ListVirtualMachineSummaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::RemoveMatchmakingQueue
// Il2CppName: RemoveMatchmakingQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::RemoveMatchmakingQueueRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::RemoveMatchmakingQueueResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::RemoveMatchmakingQueue)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RemoveMatchmakingQueueRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RemoveMatchmakingQueueResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "RemoveMatchmakingQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::RequestMultiplayerServer
// Il2CppName: RequestMultiplayerServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::RequestMultiplayerServerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::RequestMultiplayerServerResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::RequestMultiplayerServer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RequestMultiplayerServerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RequestMultiplayerServerResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "RequestMultiplayerServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::RolloverContainerRegistryCredentials
// Il2CppName: RolloverContainerRegistryCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::RolloverContainerRegistryCredentialsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::RolloverContainerRegistryCredentials)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RolloverContainerRegistryCredentialsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "RolloverContainerRegistryCredentialsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "RolloverContainerRegistryCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::SetMatchmakingQueue
// Il2CppName: SetMatchmakingQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::SetMatchmakingQueueRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::SetMatchmakingQueueResult*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::SetMatchmakingQueue)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "SetMatchmakingQueueRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "SetMatchmakingQueueResult")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "SetMatchmakingQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::ShutdownMultiplayerServer
// Il2CppName: ShutdownMultiplayerServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::ShutdownMultiplayerServerRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::ShutdownMultiplayerServer)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "ShutdownMultiplayerServerRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "ShutdownMultiplayerServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::UntagContainerImage
// Il2CppName: UntagContainerImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::UntagContainerImageRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::UntagContainerImage)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "UntagContainerImageRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "UntagContainerImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildAlias
// Il2CppName: UpdateBuildAlias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::UpdateBuildAliasRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::BuildAliasDetailsResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildAlias)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "UpdateBuildAliasRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "BuildAliasDetailsResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "UpdateBuildAlias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildRegion
// Il2CppName: UpdateBuildRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::UpdateBuildRegionRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildRegion)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "UpdateBuildRegionRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "UpdateBuildRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildRegions
// Il2CppName: UpdateBuildRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::UpdateBuildRegionsRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::UpdateBuildRegions)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "UpdateBuildRegionsRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "UpdateBuildRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
// Writing MetadataGetter for method: PlayFab::PlayFabMultiplayerInstanceAPI::UploadCertificate
// Il2CppName: UploadCertificate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayFab::PlayFabMultiplayerInstanceAPI::*)(::PlayFab::MultiplayerModels::UploadCertificateRequest*, ::System::Action_1<::PlayFab::MultiplayerModels::EmptyResponse*>*, ::System::Action_1<::PlayFab::PlayFabError*>*, ::Il2CppObject*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PlayFab::PlayFabMultiplayerInstanceAPI::UploadCertificate)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "UploadCertificateRequest")->byval_arg;
    static auto* resultCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab.MultiplayerModels", "EmptyResponse")})->byval_arg;
    static auto* errorCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PlayFab", "PlayFabError")})->byval_arg;
    static auto* customData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* extraHeaders = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PlayFabMultiplayerInstanceAPI*), "UploadCertificate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, resultCallback, errorCallback, customData, extraHeaders});
  }
};
