// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabResultCommon
#include "PlayFab/SharedModels/PlayFabResultCommon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::ProfilesModels
namespace PlayFab::ProfilesModels {
  // Forward declaring type: EntityPermissionStatement
  class EntityPermissionStatement;
}
// Completed forward declares
// Type namespace: PlayFab.ProfilesModels
namespace PlayFab::ProfilesModels {
  // Forward declaring type: SetEntityProfilePolicyResponse
  class SetEntityProfilePolicyResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ProfilesModels::SetEntityProfilePolicyResponse);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ProfilesModels::SetEntityProfilePolicyResponse*, "PlayFab.ProfilesModels", "SetEntityProfilePolicyResponse");
// Type namespace: PlayFab.ProfilesModels
namespace PlayFab::ProfilesModels {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ProfilesModels.SetEntityProfilePolicyResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class SetEntityProfilePolicyResponse : public ::PlayFab::SharedModels::PlayFabResultCommon {
    public:
    public:
    // public System.Collections.Generic.List`1<PlayFab.ProfilesModels.EntityPermissionStatement> Permissions
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>* Permissions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>*
    constexpr operator ::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>*() const noexcept {
      return Permissions;
    }
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ProfilesModels.EntityPermissionStatement> Permissions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>*& dyn_Permissions();
    // public System.Void .ctor()
    // Offset: 0x1A55E0C
    // Implemented from: PlayFab.SharedModels.PlayFabResultCommon
    // Base method: System.Void PlayFabResultCommon::.ctor()
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetEntityProfilePolicyResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ProfilesModels::SetEntityProfilePolicyResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetEntityProfilePolicyResponse*, creationType>()));
    }
  }; // PlayFab.ProfilesModels.SetEntityProfilePolicyResponse
  #pragma pack(pop)
  static check_size<sizeof(SetEntityProfilePolicyResponse), 32 + sizeof(::System::Collections::Generic::List_1<::PlayFab::ProfilesModels::EntityPermissionStatement*>*)> __PlayFab_ProfilesModels_SetEntityProfilePolicyResponseSizeCheck;
  static_assert(sizeof(SetEntityProfilePolicyResponse) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ProfilesModels::SetEntityProfilePolicyResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
