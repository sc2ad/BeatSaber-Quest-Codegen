// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: WsaReflectionExtensions
  class WsaReflectionExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::WsaReflectionExtensions);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::WsaReflectionExtensions*, "PlayFab", "WsaReflectionExtensions");
// Type namespace: PlayFab
namespace PlayFab {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.WsaReflectionExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class WsaReflectionExtensions : public ::Il2CppObject {
    public:
    // static public System.Delegate CreateDelegate(System.Reflection.MethodInfo methodInfo, System.Type delegateType, System.Object instance)
    // Offset: 0x1A57A3C
    static ::System::Delegate* CreateDelegate(::System::Reflection::MethodInfo* methodInfo, ::System::Type* delegateType, ::Il2CppObject* instance);
    // static public System.Type GetTypeInfo(System.Type type)
    // Offset: 0x1A57A54
    static ::System::Type* GetTypeInfo(::System::Type* type);
    // static public System.Type AsType(System.Type type)
    // Offset: 0x1A57A58
    static ::System::Type* AsType(::System::Type* type);
    // static public System.String GetDelegateName(System.Delegate delegateInstance)
    // Offset: 0x1A57A5C
    static ::StringW GetDelegateName(::System::Delegate* delegateInstance);
  }; // PlayFab.WsaReflectionExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::WsaReflectionExtensions::CreateDelegate
// Il2CppName: CreateDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Delegate* (*)(::System::Reflection::MethodInfo*, ::System::Type*, ::Il2CppObject*)>(&PlayFab::WsaReflectionExtensions::CreateDelegate)> {
  static const MethodInfo* get() {
    static auto* methodInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* delegateType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::WsaReflectionExtensions*), "CreateDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodInfo, delegateType, instance});
  }
};
// Writing MetadataGetter for method: PlayFab::WsaReflectionExtensions::GetTypeInfo
// Il2CppName: GetTypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&PlayFab::WsaReflectionExtensions::GetTypeInfo)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::WsaReflectionExtensions*), "GetTypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PlayFab::WsaReflectionExtensions::AsType
// Il2CppName: AsType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&PlayFab::WsaReflectionExtensions::AsType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::WsaReflectionExtensions*), "AsType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PlayFab::WsaReflectionExtensions::GetDelegateName
// Il2CppName: GetDelegateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Delegate*)>(&PlayFab::WsaReflectionExtensions::GetDelegateName)> {
  static const MethodInfo* get() {
    static auto* delegateInstance = &::il2cpp_utils::GetClassFromName("System", "Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::WsaReflectionExtensions*), "GetDelegateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delegateInstance});
  }
};
