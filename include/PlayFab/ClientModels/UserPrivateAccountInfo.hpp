// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: UserPrivateAccountInfo
  class UserPrivateAccountInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::UserPrivateAccountInfo);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::UserPrivateAccountInfo*, "PlayFab.ClientModels", "UserPrivateAccountInfo");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ClientModels.UserPrivateAccountInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class UserPrivateAccountInfo : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.String Email
    // Size: 0x8
    // Offset: 0x10
    ::StringW Email;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Email;
    }
    // Get instance field reference: public System.String Email
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Email();
    // public System.Void .ctor()
    // Offset: 0xB5DCE0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserPrivateAccountInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::UserPrivateAccountInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserPrivateAccountInfo*, creationType>()));
    }
  }; // PlayFab.ClientModels.UserPrivateAccountInfo
  #pragma pack(pop)
  static check_size<sizeof(UserPrivateAccountInfo), 16 + sizeof(::StringW)> __PlayFab_ClientModels_UserPrivateAccountInfoSizeCheck;
  static_assert(sizeof(UserPrivateAccountInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::UserPrivateAccountInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
