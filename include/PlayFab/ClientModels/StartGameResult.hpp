// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabResultCommon
#include "PlayFab/SharedModels/PlayFabResultCommon.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: StartGameResult
  class StartGameResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::StartGameResult);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::StartGameResult*, "PlayFab.ClientModels", "StartGameResult");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.ClientModels.StartGameResult
  // [TokenAttribute] Offset: FFFFFFFF
  class StartGameResult : public ::PlayFab::SharedModels::PlayFabResultCommon {
    public:
    public:
    // public System.String Expires
    // Size: 0x8
    // Offset: 0x20
    ::StringW Expires;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String LobbyID
    // Size: 0x8
    // Offset: 0x28
    ::StringW LobbyID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Password
    // Size: 0x8
    // Offset: 0x30
    ::StringW Password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ServerIPV4Address
    // Size: 0x8
    // Offset: 0x38
    ::StringW ServerIPV4Address;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ServerIPV6Address
    // Size: 0x8
    // Offset: 0x40
    ::StringW ServerIPV6Address;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Nullable`1<System.Int32> ServerPort
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::System::Nullable_1<int> ServerPort;
    // public System.String ServerPublicDNSName
    // Size: 0x8
    // Offset: 0x50
    ::StringW ServerPublicDNSName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Ticket
    // Size: 0x8
    // Offset: 0x58
    ::StringW Ticket;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String Expires
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Expires();
    // Get instance field reference: public System.String LobbyID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LobbyID();
    // Get instance field reference: public System.String Password
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Password();
    // Get instance field reference: public System.String ServerIPV4Address
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerIPV4Address();
    // Get instance field reference: public System.String ServerIPV6Address
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerIPV6Address();
    // Get instance field reference: public System.Nullable`1<System.Int32> ServerPort
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_ServerPort();
    // Get instance field reference: public System.String ServerPublicDNSName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerPublicDNSName();
    // Get instance field reference: public System.String Ticket
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Ticket();
    // public System.Void .ctor()
    // Offset: 0xB5DA70
    // Implemented from: PlayFab.SharedModels.PlayFabResultCommon
    // Base method: System.Void PlayFabResultCommon::.ctor()
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StartGameResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::StartGameResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StartGameResult*, creationType>()));
    }
  }; // PlayFab.ClientModels.StartGameResult
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::StartGameResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
