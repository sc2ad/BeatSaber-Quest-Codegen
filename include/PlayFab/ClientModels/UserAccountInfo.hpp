// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: UserAndroidDeviceInfo
  class UserAndroidDeviceInfo;
  // Forward declaring type: UserAppleIdInfo
  class UserAppleIdInfo;
  // Forward declaring type: UserCustomIdInfo
  class UserCustomIdInfo;
  // Forward declaring type: UserFacebookInfo
  class UserFacebookInfo;
  // Forward declaring type: UserFacebookInstantGamesIdInfo
  class UserFacebookInstantGamesIdInfo;
  // Forward declaring type: UserGameCenterInfo
  class UserGameCenterInfo;
  // Forward declaring type: UserGoogleInfo
  class UserGoogleInfo;
  // Forward declaring type: UserIosDeviceInfo
  class UserIosDeviceInfo;
  // Forward declaring type: UserKongregateInfo
  class UserKongregateInfo;
  // Forward declaring type: UserNintendoSwitchAccountIdInfo
  class UserNintendoSwitchAccountIdInfo;
  // Forward declaring type: UserNintendoSwitchDeviceIdInfo
  class UserNintendoSwitchDeviceIdInfo;
  // Forward declaring type: UserOpenIdInfo
  class UserOpenIdInfo;
  // Forward declaring type: UserPrivateAccountInfo
  class UserPrivateAccountInfo;
  // Forward declaring type: UserPsnInfo
  class UserPsnInfo;
  // Forward declaring type: UserSteamInfo
  class UserSteamInfo;
  // Forward declaring type: UserTitleInfo
  class UserTitleInfo;
  // Forward declaring type: UserTwitchInfo
  class UserTwitchInfo;
  // Forward declaring type: UserWindowsHelloInfo
  class UserWindowsHelloInfo;
  // Forward declaring type: UserXboxInfo
  class UserXboxInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: UserAccountInfo
  class UserAccountInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::UserAccountInfo);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::UserAccountInfo*, "PlayFab.ClientModels", "UserAccountInfo");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ClientModels.UserAccountInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class UserAccountInfo : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public PlayFab.ClientModels.UserAndroidDeviceInfo AndroidDeviceInfo
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::ClientModels::UserAndroidDeviceInfo* AndroidDeviceInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserAndroidDeviceInfo*) == 0x8);
    // public PlayFab.ClientModels.UserAppleIdInfo AppleAccountInfo
    // Size: 0x8
    // Offset: 0x18
    ::PlayFab::ClientModels::UserAppleIdInfo* AppleAccountInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserAppleIdInfo*) == 0x8);
    // public System.DateTime Created
    // Size: 0x8
    // Offset: 0x20
    ::System::DateTime Created;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public PlayFab.ClientModels.UserCustomIdInfo CustomIdInfo
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::ClientModels::UserCustomIdInfo* CustomIdInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserCustomIdInfo*) == 0x8);
    // public PlayFab.ClientModels.UserFacebookInfo FacebookInfo
    // Size: 0x8
    // Offset: 0x30
    ::PlayFab::ClientModels::UserFacebookInfo* FacebookInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserFacebookInfo*) == 0x8);
    // public PlayFab.ClientModels.UserFacebookInstantGamesIdInfo FacebookInstantGamesIdInfo
    // Size: 0x8
    // Offset: 0x38
    ::PlayFab::ClientModels::UserFacebookInstantGamesIdInfo* FacebookInstantGamesIdInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserFacebookInstantGamesIdInfo*) == 0x8);
    // public PlayFab.ClientModels.UserGameCenterInfo GameCenterInfo
    // Size: 0x8
    // Offset: 0x40
    ::PlayFab::ClientModels::UserGameCenterInfo* GameCenterInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserGameCenterInfo*) == 0x8);
    // public PlayFab.ClientModels.UserGoogleInfo GoogleInfo
    // Size: 0x8
    // Offset: 0x48
    ::PlayFab::ClientModels::UserGoogleInfo* GoogleInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserGoogleInfo*) == 0x8);
    // public PlayFab.ClientModels.UserIosDeviceInfo IosDeviceInfo
    // Size: 0x8
    // Offset: 0x50
    ::PlayFab::ClientModels::UserIosDeviceInfo* IosDeviceInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserIosDeviceInfo*) == 0x8);
    // public PlayFab.ClientModels.UserKongregateInfo KongregateInfo
    // Size: 0x8
    // Offset: 0x58
    ::PlayFab::ClientModels::UserKongregateInfo* KongregateInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserKongregateInfo*) == 0x8);
    // public PlayFab.ClientModels.UserNintendoSwitchAccountIdInfo NintendoSwitchAccountInfo
    // Size: 0x8
    // Offset: 0x60
    ::PlayFab::ClientModels::UserNintendoSwitchAccountIdInfo* NintendoSwitchAccountInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserNintendoSwitchAccountIdInfo*) == 0x8);
    // public PlayFab.ClientModels.UserNintendoSwitchDeviceIdInfo NintendoSwitchDeviceIdInfo
    // Size: 0x8
    // Offset: 0x68
    ::PlayFab::ClientModels::UserNintendoSwitchDeviceIdInfo* NintendoSwitchDeviceIdInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserNintendoSwitchDeviceIdInfo*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.ClientModels.UserOpenIdInfo> OpenIdInfo
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::PlayFab::ClientModels::UserOpenIdInfo*>* OpenIdInfo;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ClientModels::UserOpenIdInfo*>*) == 0x8);
    // public System.String PlayFabId
    // Size: 0x8
    // Offset: 0x78
    ::StringW PlayFabId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.ClientModels.UserPrivateAccountInfo PrivateInfo
    // Size: 0x8
    // Offset: 0x80
    ::PlayFab::ClientModels::UserPrivateAccountInfo* PrivateInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserPrivateAccountInfo*) == 0x8);
    // public PlayFab.ClientModels.UserPsnInfo PsnInfo
    // Size: 0x8
    // Offset: 0x88
    ::PlayFab::ClientModels::UserPsnInfo* PsnInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserPsnInfo*) == 0x8);
    // public PlayFab.ClientModels.UserSteamInfo SteamInfo
    // Size: 0x8
    // Offset: 0x90
    ::PlayFab::ClientModels::UserSteamInfo* SteamInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserSteamInfo*) == 0x8);
    // public PlayFab.ClientModels.UserTitleInfo TitleInfo
    // Size: 0x8
    // Offset: 0x98
    ::PlayFab::ClientModels::UserTitleInfo* TitleInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserTitleInfo*) == 0x8);
    // public PlayFab.ClientModels.UserTwitchInfo TwitchInfo
    // Size: 0x8
    // Offset: 0xA0
    ::PlayFab::ClientModels::UserTwitchInfo* TwitchInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserTwitchInfo*) == 0x8);
    // public System.String Username
    // Size: 0x8
    // Offset: 0xA8
    ::StringW Username;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.ClientModels.UserWindowsHelloInfo WindowsHelloInfo
    // Size: 0x8
    // Offset: 0xB0
    ::PlayFab::ClientModels::UserWindowsHelloInfo* WindowsHelloInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserWindowsHelloInfo*) == 0x8);
    // public PlayFab.ClientModels.UserXboxInfo XboxInfo
    // Size: 0x8
    // Offset: 0xB8
    ::PlayFab::ClientModels::UserXboxInfo* XboxInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserXboxInfo*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.ClientModels.UserAndroidDeviceInfo AndroidDeviceInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserAndroidDeviceInfo*& dyn_AndroidDeviceInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserAppleIdInfo AppleAccountInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserAppleIdInfo*& dyn_AppleAccountInfo();
    // Get instance field reference: public System.DateTime Created
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_Created();
    // Get instance field reference: public PlayFab.ClientModels.UserCustomIdInfo CustomIdInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserCustomIdInfo*& dyn_CustomIdInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserFacebookInfo FacebookInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserFacebookInfo*& dyn_FacebookInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserFacebookInstantGamesIdInfo FacebookInstantGamesIdInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserFacebookInstantGamesIdInfo*& dyn_FacebookInstantGamesIdInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserGameCenterInfo GameCenterInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserGameCenterInfo*& dyn_GameCenterInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserGoogleInfo GoogleInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserGoogleInfo*& dyn_GoogleInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserIosDeviceInfo IosDeviceInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserIosDeviceInfo*& dyn_IosDeviceInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserKongregateInfo KongregateInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserKongregateInfo*& dyn_KongregateInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserNintendoSwitchAccountIdInfo NintendoSwitchAccountInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserNintendoSwitchAccountIdInfo*& dyn_NintendoSwitchAccountInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserNintendoSwitchDeviceIdInfo NintendoSwitchDeviceIdInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserNintendoSwitchDeviceIdInfo*& dyn_NintendoSwitchDeviceIdInfo();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ClientModels.UserOpenIdInfo> OpenIdInfo
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ClientModels::UserOpenIdInfo*>*& dyn_OpenIdInfo();
    // Get instance field reference: public System.String PlayFabId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PlayFabId();
    // Get instance field reference: public PlayFab.ClientModels.UserPrivateAccountInfo PrivateInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserPrivateAccountInfo*& dyn_PrivateInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserPsnInfo PsnInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserPsnInfo*& dyn_PsnInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserSteamInfo SteamInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserSteamInfo*& dyn_SteamInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserTitleInfo TitleInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserTitleInfo*& dyn_TitleInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserTwitchInfo TwitchInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserTwitchInfo*& dyn_TwitchInfo();
    // Get instance field reference: public System.String Username
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Username();
    // Get instance field reference: public PlayFab.ClientModels.UserWindowsHelloInfo WindowsHelloInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserWindowsHelloInfo*& dyn_WindowsHelloInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserXboxInfo XboxInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserXboxInfo*& dyn_XboxInfo();
    // public System.Void .ctor()
    // Offset: 0xB5DC70
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserAccountInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::UserAccountInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserAccountInfo*, creationType>()));
    }
  }; // PlayFab.ClientModels.UserAccountInfo
  #pragma pack(pop)
  static check_size<sizeof(UserAccountInfo), 184 + sizeof(::PlayFab::ClientModels::UserXboxInfo*)> __PlayFab_ClientModels_UserAccountInfoSizeCheck;
  static_assert(sizeof(UserAccountInfo) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::UserAccountInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
