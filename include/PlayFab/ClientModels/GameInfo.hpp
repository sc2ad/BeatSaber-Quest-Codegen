// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: PlayFab.ClientModels.GameInstanceState
#include "PlayFab/ClientModels/GameInstanceState.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: PlayFab.ClientModels.Region
#include "PlayFab/ClientModels/Region.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GameInfo
  class GameInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::GameInfo);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::GameInfo*, "PlayFab.ClientModels", "GameInfo");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.ClientModels.GameInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class GameInfo : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.String BuildVersion
    // Size: 0x8
    // Offset: 0x10
    ::StringW BuildVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String GameMode
    // Size: 0x8
    // Offset: 0x18
    ::StringW GameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String GameServerData
    // Size: 0x8
    // Offset: 0x20
    ::StringW GameServerData;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Nullable`1<PlayFab.ClientModels.GameInstanceState> GameServerStateEnum
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::System::Nullable_1<::PlayFab::ClientModels::GameInstanceState> GameServerStateEnum;
    // public System.Nullable`1<System.DateTime> LastHeartbeat
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::System::Nullable_1<::System::DateTime> LastHeartbeat;
    // public System.String LobbyID
    // Size: 0x8
    // Offset: 0x40
    ::StringW LobbyID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Nullable`1<System.Int32> MaxPlayers
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::System::Nullable_1<int> MaxPlayers;
    // public System.Collections.Generic.List`1<System.String> PlayerUserIds
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::StringW>* PlayerUserIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Nullable`1<PlayFab.ClientModels.Region> Region
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::System::Nullable_1<::PlayFab::ClientModels::Region> Region;
    // public System.UInt32 RunTime
    // Size: 0x4
    // Offset: 0x60
    uint RunTime;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.String ServerIPV4Address
    // Size: 0x8
    // Offset: 0x68
    ::StringW ServerIPV4Address;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ServerIPV6Address
    // Size: 0x8
    // Offset: 0x70
    ::StringW ServerIPV6Address;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Nullable`1<System.Int32> ServerPort
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::System::Nullable_1<int> ServerPort;
    // public System.String ServerPublicDNSName
    // Size: 0x8
    // Offset: 0x80
    ::StringW ServerPublicDNSName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String StatisticName
    // Size: 0x8
    // Offset: 0x88
    ::StringW StatisticName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> Tags
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Tags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.String BuildVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_BuildVersion();
    // Get instance field reference: public System.String GameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GameMode();
    // Get instance field reference: public System.String GameServerData
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GameServerData();
    // Get instance field reference: public System.Nullable`1<PlayFab.ClientModels.GameInstanceState> GameServerStateEnum
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::PlayFab::ClientModels::GameInstanceState>& dyn_GameServerStateEnum();
    // Get instance field reference: public System.Nullable`1<System.DateTime> LastHeartbeat
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::DateTime>& dyn_LastHeartbeat();
    // Get instance field reference: public System.String LobbyID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LobbyID();
    // Get instance field reference: public System.Nullable`1<System.Int32> MaxPlayers
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_MaxPlayers();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> PlayerUserIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_PlayerUserIds();
    // Get instance field reference: public System.Nullable`1<PlayFab.ClientModels.Region> Region
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::PlayFab::ClientModels::Region>& dyn_Region();
    // Get instance field reference: public System.UInt32 RunTime
    [[deprecated("Use field access instead!")]] uint& dyn_RunTime();
    // Get instance field reference: public System.String ServerIPV4Address
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerIPV4Address();
    // Get instance field reference: public System.String ServerIPV6Address
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerIPV6Address();
    // Get instance field reference: public System.Nullable`1<System.Int32> ServerPort
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_ServerPort();
    // Get instance field reference: public System.String ServerPublicDNSName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerPublicDNSName();
    // Get instance field reference: public System.String StatisticName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_StatisticName();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> Tags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_Tags();
    // public System.Void .ctor()
    // Offset: 0xB5D3A8
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::GameInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameInfo*, creationType>()));
    }
  }; // PlayFab.ClientModels.GameInfo
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::GameInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
