// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: PlayerProfileViewConstraints
  class PlayerProfileViewConstraints;
}
// Completed forward declares
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetPlayerCombinedInfoRequestParams
  class GetPlayerCombinedInfoRequestParams;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::GetPlayerCombinedInfoRequestParams);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::GetPlayerCombinedInfoRequestParams*, "PlayFab.ClientModels", "GetPlayerCombinedInfoRequestParams");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ClientModels.GetPlayerCombinedInfoRequestParams
  // [TokenAttribute] Offset: FFFFFFFF
  class GetPlayerCombinedInfoRequestParams : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public System.Boolean GetCharacterInventories
    // Size: 0x1
    // Offset: 0x10
    bool GetCharacterInventories;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetCharacterList
    // Size: 0x1
    // Offset: 0x11
    bool GetCharacterList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetPlayerProfile
    // Size: 0x1
    // Offset: 0x12
    bool GetPlayerProfile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetPlayerStatistics
    // Size: 0x1
    // Offset: 0x13
    bool GetPlayerStatistics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetTitleData
    // Size: 0x1
    // Offset: 0x14
    bool GetTitleData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetUserAccountInfo
    // Size: 0x1
    // Offset: 0x15
    bool GetUserAccountInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetUserData
    // Size: 0x1
    // Offset: 0x16
    bool GetUserData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetUserInventory
    // Size: 0x1
    // Offset: 0x17
    bool GetUserInventory;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetUserReadOnlyData
    // Size: 0x1
    // Offset: 0x18
    bool GetUserReadOnlyData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GetUserVirtualCurrency
    // Size: 0x1
    // Offset: 0x19
    bool GetUserVirtualCurrency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GetUserVirtualCurrency and: PlayerStatisticNames
    char __padding9[0x6] = {};
    // public System.Collections.Generic.List`1<System.String> PlayerStatisticNames
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* PlayerStatisticNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public PlayFab.ClientModels.PlayerProfileViewConstraints ProfileConstraints
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::ClientModels::PlayerProfileViewConstraints* ProfileConstraints;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::PlayerProfileViewConstraints*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> TitleDataKeys
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::StringW>* TitleDataKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> UserDataKeys
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::StringW>* UserDataKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> UserReadOnlyDataKeys
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* UserReadOnlyDataKeys;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean GetCharacterInventories
    [[deprecated("Use field access instead!")]] bool& dyn_GetCharacterInventories();
    // Get instance field reference: public System.Boolean GetCharacterList
    [[deprecated("Use field access instead!")]] bool& dyn_GetCharacterList();
    // Get instance field reference: public System.Boolean GetPlayerProfile
    [[deprecated("Use field access instead!")]] bool& dyn_GetPlayerProfile();
    // Get instance field reference: public System.Boolean GetPlayerStatistics
    [[deprecated("Use field access instead!")]] bool& dyn_GetPlayerStatistics();
    // Get instance field reference: public System.Boolean GetTitleData
    [[deprecated("Use field access instead!")]] bool& dyn_GetTitleData();
    // Get instance field reference: public System.Boolean GetUserAccountInfo
    [[deprecated("Use field access instead!")]] bool& dyn_GetUserAccountInfo();
    // Get instance field reference: public System.Boolean GetUserData
    [[deprecated("Use field access instead!")]] bool& dyn_GetUserData();
    // Get instance field reference: public System.Boolean GetUserInventory
    [[deprecated("Use field access instead!")]] bool& dyn_GetUserInventory();
    // Get instance field reference: public System.Boolean GetUserReadOnlyData
    [[deprecated("Use field access instead!")]] bool& dyn_GetUserReadOnlyData();
    // Get instance field reference: public System.Boolean GetUserVirtualCurrency
    [[deprecated("Use field access instead!")]] bool& dyn_GetUserVirtualCurrency();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> PlayerStatisticNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_PlayerStatisticNames();
    // Get instance field reference: public PlayFab.ClientModels.PlayerProfileViewConstraints ProfileConstraints
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::PlayerProfileViewConstraints*& dyn_ProfileConstraints();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> TitleDataKeys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_TitleDataKeys();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> UserDataKeys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_UserDataKeys();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> UserReadOnlyDataKeys
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_UserReadOnlyDataKeys();
    // public System.Void .ctor()
    // Offset: 0xB5D590
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GetPlayerCombinedInfoRequestParams* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::GetPlayerCombinedInfoRequestParams::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GetPlayerCombinedInfoRequestParams*, creationType>()));
    }
  }; // PlayFab.ClientModels.GetPlayerCombinedInfoRequestParams
  #pragma pack(pop)
  static check_size<sizeof(GetPlayerCombinedInfoRequestParams), 64 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __PlayFab_ClientModels_GetPlayerCombinedInfoRequestParamsSizeCheck;
  static_assert(sizeof(GetPlayerCombinedInfoRequestParams) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::GetPlayerCombinedInfoRequestParams::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
