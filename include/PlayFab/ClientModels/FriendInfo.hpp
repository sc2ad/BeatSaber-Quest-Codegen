// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: UserFacebookInfo
  class UserFacebookInfo;
  // Forward declaring type: UserGameCenterInfo
  class UserGameCenterInfo;
  // Forward declaring type: PlayerProfileModel
  class PlayerProfileModel;
  // Forward declaring type: UserPsnInfo
  class UserPsnInfo;
  // Forward declaring type: UserSteamInfo
  class UserSteamInfo;
  // Forward declaring type: UserXboxInfo
  class UserXboxInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: FriendInfo
  class FriendInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::FriendInfo);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::FriendInfo*, "PlayFab.ClientModels", "FriendInfo");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ClientModels.FriendInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class FriendInfo : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public PlayFab.ClientModels.UserFacebookInfo FacebookInfo
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::ClientModels::UserFacebookInfo* FacebookInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserFacebookInfo*) == 0x8);
    // public System.String FriendPlayFabId
    // Size: 0x8
    // Offset: 0x18
    ::StringW FriendPlayFabId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.ClientModels.UserGameCenterInfo GameCenterInfo
    // Size: 0x8
    // Offset: 0x20
    ::PlayFab::ClientModels::UserGameCenterInfo* GameCenterInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserGameCenterInfo*) == 0x8);
    // public PlayFab.ClientModels.PlayerProfileModel Profile
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::ClientModels::PlayerProfileModel* Profile;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::PlayerProfileModel*) == 0x8);
    // public PlayFab.ClientModels.UserPsnInfo PSNInfo
    // Size: 0x8
    // Offset: 0x30
    ::PlayFab::ClientModels::UserPsnInfo* PSNInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserPsnInfo*) == 0x8);
    // public PlayFab.ClientModels.UserSteamInfo SteamInfo
    // Size: 0x8
    // Offset: 0x38
    ::PlayFab::ClientModels::UserSteamInfo* SteamInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserSteamInfo*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> Tags
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* Tags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.String TitleDisplayName
    // Size: 0x8
    // Offset: 0x48
    ::StringW TitleDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Username
    // Size: 0x8
    // Offset: 0x50
    ::StringW Username;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PlayFab.ClientModels.UserXboxInfo XboxInfo
    // Size: 0x8
    // Offset: 0x58
    ::PlayFab::ClientModels::UserXboxInfo* XboxInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserXboxInfo*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.ClientModels.UserFacebookInfo FacebookInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserFacebookInfo*& dyn_FacebookInfo();
    // Get instance field reference: public System.String FriendPlayFabId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FriendPlayFabId();
    // Get instance field reference: public PlayFab.ClientModels.UserGameCenterInfo GameCenterInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserGameCenterInfo*& dyn_GameCenterInfo();
    // Get instance field reference: public PlayFab.ClientModels.PlayerProfileModel Profile
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::PlayerProfileModel*& dyn_Profile();
    // Get instance field reference: public PlayFab.ClientModels.UserPsnInfo PSNInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserPsnInfo*& dyn_PSNInfo();
    // Get instance field reference: public PlayFab.ClientModels.UserSteamInfo SteamInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserSteamInfo*& dyn_SteamInfo();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> Tags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_Tags();
    // Get instance field reference: public System.String TitleDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TitleDisplayName();
    // Get instance field reference: public System.String Username
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Username();
    // Get instance field reference: public PlayFab.ClientModels.UserXboxInfo XboxInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserXboxInfo*& dyn_XboxInfo();
    // public System.Void .ctor()
    // Offset: 0xB5D398
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FriendInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::FriendInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FriendInfo*, creationType>()));
    }
  }; // PlayFab.ClientModels.FriendInfo
  #pragma pack(pop)
  static check_size<sizeof(FriendInfo), 88 + sizeof(::PlayFab::ClientModels::UserXboxInfo*)> __PlayFab_ClientModels_FriendInfoSizeCheck;
  static_assert(sizeof(FriendInfo) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::FriendInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
