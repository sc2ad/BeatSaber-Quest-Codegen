// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayFab.SharedModels.PlayFabBaseModel
#include "PlayFab/SharedModels/PlayFabBaseModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: UserAccountInfo
  class UserAccountInfo;
  // Forward declaring type: CharacterInventory
  class CharacterInventory;
  // Forward declaring type: CharacterResult
  class CharacterResult;
  // Forward declaring type: PlayerProfileModel
  class PlayerProfileModel;
  // Forward declaring type: StatisticValue
  class StatisticValue;
  // Forward declaring type: UserDataRecord
  class UserDataRecord;
  // Forward declaring type: ItemInstance
  class ItemInstance;
  // Forward declaring type: VirtualCurrencyRechargeTime
  class VirtualCurrencyRechargeTime;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetPlayerCombinedInfoResultPayload
  class GetPlayerCombinedInfoResultPayload;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::ClientModels::GetPlayerCombinedInfoResultPayload);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::ClientModels::GetPlayerCombinedInfoResultPayload*, "PlayFab.ClientModels", "GetPlayerCombinedInfoResultPayload");
// Type namespace: PlayFab.ClientModels
namespace PlayFab::ClientModels {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: PlayFab.ClientModels.GetPlayerCombinedInfoResultPayload
  // [TokenAttribute] Offset: FFFFFFFF
  class GetPlayerCombinedInfoResultPayload : public ::PlayFab::SharedModels::PlayFabBaseModel {
    public:
    public:
    // public PlayFab.ClientModels.UserAccountInfo AccountInfo
    // Size: 0x8
    // Offset: 0x10
    ::PlayFab::ClientModels::UserAccountInfo* AccountInfo;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::UserAccountInfo*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.ClientModels.CharacterInventory> CharacterInventories
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterInventory*>* CharacterInventories;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterInventory*>*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.ClientModels.CharacterResult> CharacterList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterResult*>* CharacterList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterResult*>*) == 0x8);
    // public PlayFab.ClientModels.PlayerProfileModel PlayerProfile
    // Size: 0x8
    // Offset: 0x28
    ::PlayFab::ClientModels::PlayerProfileModel* PlayerProfile;
    // Field size check
    static_assert(sizeof(::PlayFab::ClientModels::PlayerProfileModel*) == 0x8);
    // public System.Collections.Generic.List`1<PlayFab.ClientModels.StatisticValue> PlayerStatistics
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::PlayFab::ClientModels::StatisticValue*>* PlayerStatistics;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ClientModels::StatisticValue*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> TitleData
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* TitleData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.UserDataRecord> UserData
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>* UserData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>*) == 0x8);
    // public System.UInt32 UserDataVersion
    // Size: 0x4
    // Offset: 0x48
    uint UserDataVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: UserDataVersion and: UserInventory
    char __padding7[0x4] = {};
    // public System.Collections.Generic.List`1<PlayFab.ClientModels.ItemInstance> UserInventory
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::PlayFab::ClientModels::ItemInstance*>* UserInventory;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PlayFab::ClientModels::ItemInstance*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.UserDataRecord> UserReadOnlyData
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>* UserReadOnlyData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>*) == 0x8);
    // public System.UInt32 UserReadOnlyDataVersion
    // Size: 0x4
    // Offset: 0x60
    uint UserReadOnlyDataVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: UserReadOnlyDataVersion and: UserVirtualCurrency
    char __padding10[0x4] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,System.Int32> UserVirtualCurrency
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* UserVirtualCurrency;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.VirtualCurrencyRechargeTime> UserVirtualCurrencyRechargeTimes
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::VirtualCurrencyRechargeTime*>* UserVirtualCurrencyRechargeTimes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::VirtualCurrencyRechargeTime*>*) == 0x8);
    public:
    // Get instance field reference: public PlayFab.ClientModels.UserAccountInfo AccountInfo
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::UserAccountInfo*& dyn_AccountInfo();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ClientModels.CharacterInventory> CharacterInventories
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterInventory*>*& dyn_CharacterInventories();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ClientModels.CharacterResult> CharacterList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ClientModels::CharacterResult*>*& dyn_CharacterList();
    // Get instance field reference: public PlayFab.ClientModels.PlayerProfileModel PlayerProfile
    [[deprecated("Use field access instead!")]] ::PlayFab::ClientModels::PlayerProfileModel*& dyn_PlayerProfile();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ClientModels.StatisticValue> PlayerStatistics
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ClientModels::StatisticValue*>*& dyn_PlayerStatistics();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> TitleData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_TitleData();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.UserDataRecord> UserData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>*& dyn_UserData();
    // Get instance field reference: public System.UInt32 UserDataVersion
    [[deprecated("Use field access instead!")]] uint& dyn_UserDataVersion();
    // Get instance field reference: public System.Collections.Generic.List`1<PlayFab.ClientModels.ItemInstance> UserInventory
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PlayFab::ClientModels::ItemInstance*>*& dyn_UserInventory();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.UserDataRecord> UserReadOnlyData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::UserDataRecord*>*& dyn_UserReadOnlyData();
    // Get instance field reference: public System.UInt32 UserReadOnlyDataVersion
    [[deprecated("Use field access instead!")]] uint& dyn_UserReadOnlyDataVersion();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Int32> UserVirtualCurrency
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn_UserVirtualCurrency();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PlayFab.ClientModels.VirtualCurrencyRechargeTime> UserVirtualCurrencyRechargeTimes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::VirtualCurrencyRechargeTime*>*& dyn_UserVirtualCurrencyRechargeTimes();
    // public System.Void .ctor()
    // Offset: 0xB5D5A0
    // Implemented from: PlayFab.SharedModels.PlayFabBaseModel
    // Base method: System.Void PlayFabBaseModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GetPlayerCombinedInfoResultPayload* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::ClientModels::GetPlayerCombinedInfoResultPayload::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GetPlayerCombinedInfoResultPayload*, creationType>()));
    }
  }; // PlayFab.ClientModels.GetPlayerCombinedInfoResultPayload
  #pragma pack(pop)
  static check_size<sizeof(GetPlayerCombinedInfoResultPayload), 112 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PlayFab::ClientModels::VirtualCurrencyRechargeTime*>*)> __PlayFab_ClientModels_GetPlayerCombinedInfoResultPayloadSizeCheck;
  static_assert(sizeof(GetPlayerCombinedInfoResultPayload) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::ClientModels::GetPlayerCombinedInfoResultPayload::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
