// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.EqualityComparer`1
#include "System/Collections/Generic/EqualityComparer_1.hpp"
// Including type: PlayFab.PluginContractKey
#include "PlayFab/PluginContractKey.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PlayFab
namespace PlayFab {
  // Forward declaring type: PluginContractKeyComparator
  class PluginContractKeyComparator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayFab::PluginContractKeyComparator);
DEFINE_IL2CPP_ARG_TYPE(::PlayFab::PluginContractKeyComparator*, "PlayFab", "PluginContractKeyComparator");
// Type namespace: PlayFab
namespace PlayFab {
  // WARNING Size may be invalid!
  // Autogenerated type: PlayFab.PluginContractKeyComparator
  // [TokenAttribute] Offset: FFFFFFFF
  class PluginContractKeyComparator : public ::System::Collections::Generic::EqualityComparer_1<::PlayFab::PluginContractKey> {
    public:
    // public System.Void .ctor()
    // Offset: 0x1A558FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PluginContractKeyComparator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayFab::PluginContractKeyComparator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PluginContractKeyComparator*, creationType>()));
    }
    // public System.Boolean Equals(PlayFab.PluginContractKey x, PlayFab.PluginContractKey y)
    // Offset: 0x1A55894
    bool Equals(::PlayFab::PluginContractKey x, ::PlayFab::PluginContractKey y);
    // public System.Int32 GetHashCode(PlayFab.PluginContractKey obj)
    // Offset: 0x1A558C4
    int GetHashCode(::PlayFab::PluginContractKey obj);
  }; // PlayFab.PluginContractKeyComparator
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayFab::PluginContractKeyComparator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PlayFab::PluginContractKeyComparator::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayFab::PluginContractKeyComparator::*)(::PlayFab::PluginContractKey, ::PlayFab::PluginContractKey)>(&PlayFab::PluginContractKeyComparator::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("PlayFab", "PluginContractKey")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("PlayFab", "PluginContractKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PluginContractKeyComparator*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PlayFab::PluginContractKeyComparator::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayFab::PluginContractKeyComparator::*)(::PlayFab::PluginContractKey)>(&PlayFab::PluginContractKeyComparator::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("PlayFab", "PluginContractKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayFab::PluginContractKeyComparator*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
