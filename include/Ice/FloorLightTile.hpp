// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Ice
namespace Ice {
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockColorSetter
  class MaterialPropertyBlockColorSetter;
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
  // Forward declaring type: ColorTween
  class ColorTween;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: Ice
namespace Ice {
  // Forward declaring type: FloorLightTile
  class FloorLightTile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Ice::FloorLightTile);
DEFINE_IL2CPP_ARG_TYPE(::Ice::FloorLightTile*, "Ice", "FloorLightTile");
// Type namespace: Ice
namespace Ice {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Ice.FloorLightTile
  // [TokenAttribute] Offset: FFFFFFFF
  class FloorLightTile : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Ice::FloorLightTile::Pool
    class Pool;
    public:
    // private MaterialPropertyBlockColorSetter _colorSetter
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MaterialPropertyBlockColorSetter* colorSetter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockColorSetter*) == 0x8);
    // private TubeBloomPrePassLight _tubeBloomPrePassLight
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::TubeBloomPrePassLight* tubeBloomPrePassLight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TubeBloomPrePassLight*) == 0x8);
    // [InjectAttribute] Offset: 0x110C1A0
    // private readonly Tweening.SongTimeTweeningManager _songTimeTweeningManager
    // Size: 0x8
    // Offset: 0x28
    ::Tweening::SongTimeTweeningManager* songTimeTweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::SongTimeTweeningManager*) == 0x8);
    // public System.Action`1<Ice.FloorLightTile> didFinish
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::Ice::FloorLightTile*>* didFinish;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Ice::FloorLightTile*>*) == 0x8);
    // private Tweening.ColorTween _fadeInTween
    // Size: 0x8
    // Offset: 0x38
    ::Tweening::ColorTween* fadeInTween;
    // Field size check
    static_assert(sizeof(::Tweening::ColorTween*) == 0x8);
    // private Tweening.ColorTween _fadeOutTween
    // Size: 0x8
    // Offset: 0x40
    ::Tweening::ColorTween* fadeOutTween;
    // Field size check
    static_assert(sizeof(::Tweening::ColorTween*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MaterialPropertyBlockColorSetter _colorSetter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockColorSetter*& dyn__colorSetter();
    // Get instance field reference: private TubeBloomPrePassLight _tubeBloomPrePassLight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& dyn__tubeBloomPrePassLight();
    // Get instance field reference: private readonly Tweening.SongTimeTweeningManager _songTimeTweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& dyn__songTimeTweeningManager();
    // Get instance field reference: public System.Action`1<Ice.FloorLightTile> didFinish
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Ice::FloorLightTile*>*& dyn_didFinish();
    // Get instance field reference: private Tweening.ColorTween _fadeInTween
    [[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& dyn__fadeInTween();
    // Get instance field reference: private Tweening.ColorTween _fadeOutTween
    [[deprecated("Use field access instead!")]] ::Tweening::ColorTween*& dyn__fadeOutTween();
    // public System.Void .ctor()
    // Offset: 0x2AD6790
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloorLightTile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Ice::FloorLightTile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloorLightTile*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x2AD62A8
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x2AD64DC
    void OnDestroy();
    // public System.Void HighlightWithColor(UnityEngine.Color color, System.Single fadeInDuration, System.Single fadeOutDuration)
    // Offset: 0x2AD658C
    void HighlightWithColor(::UnityEngine::Color color, float fadeInDuration, float fadeOutDuration);
    // private System.Void HandleFadeInTweenOnCompleted()
    // Offset: 0x2AD6698
    void HandleFadeInTweenOnCompleted();
    // private System.Void HandleFadeOutTweenOnCompleted()
    // Offset: 0x2AD66BC
    void HandleFadeOutTweenOnCompleted();
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x2AD6720
    void SetColor(::UnityEngine::Color color);
  }; // Ice.FloorLightTile
  #pragma pack(pop)
  static check_size<sizeof(FloorLightTile), 64 + sizeof(::Tweening::ColorTween*)> __Ice_FloorLightTileSizeCheck;
  static_assert(sizeof(FloorLightTile) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Ice::FloorLightTile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Ice::FloorLightTile::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)()>(&Ice::FloorLightTile::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ice::FloorLightTile::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)()>(&Ice::FloorLightTile::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ice::FloorLightTile::HighlightWithColor
// Il2CppName: HighlightWithColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)(::UnityEngine::Color, float, float)>(&Ice::FloorLightTile::HighlightWithColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* fadeInDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeOutDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "HighlightWithColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, fadeInDuration, fadeOutDuration});
  }
};
// Writing MetadataGetter for method: Ice::FloorLightTile::HandleFadeInTweenOnCompleted
// Il2CppName: HandleFadeInTweenOnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)()>(&Ice::FloorLightTile::HandleFadeInTweenOnCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "HandleFadeInTweenOnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ice::FloorLightTile::HandleFadeOutTweenOnCompleted
// Il2CppName: HandleFadeOutTweenOnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)()>(&Ice::FloorLightTile::HandleFadeOutTweenOnCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "HandleFadeOutTweenOnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ice::FloorLightTile::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ice::FloorLightTile::*)(::UnityEngine::Color)>(&Ice::FloorLightTile::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Ice::FloorLightTile*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
