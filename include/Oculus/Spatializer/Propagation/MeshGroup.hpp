// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.UIntPtr
#include "System/UIntPtr.hpp"
// Including type: Oculus.Spatializer.Propagation.FaceType
#include "Oculus/Spatializer/Propagation/FaceType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: Oculus.Spatializer.Propagation
namespace Oculus::Spatializer::Propagation {
  // Forward declaring type: MeshGroup
  struct MeshGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Spatializer::Propagation::MeshGroup, "Oculus.Spatializer.Propagation", "MeshGroup");
// Type namespace: Oculus.Spatializer.Propagation
namespace Oculus::Spatializer::Propagation {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Spatializer.Propagation.MeshGroup
  // [TokenAttribute] Offset: FFFFFFFF
  struct MeshGroup/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UIntPtr indexOffset
    // Size: 0x8
    // Offset: 0x0
    ::System::UIntPtr indexOffset;
    // Field size check
    static_assert(sizeof(::System::UIntPtr) == 0x8);
    // public System.UIntPtr faceCount
    // Size: 0x8
    // Offset: 0x8
    ::System::UIntPtr faceCount;
    // Field size check
    static_assert(sizeof(::System::UIntPtr) == 0x8);
    // public Oculus.Spatializer.Propagation.FaceType faceType
    // Size: 0x4
    // Offset: 0x10
    ::Oculus::Spatializer::Propagation::FaceType faceType;
    // Field size check
    static_assert(sizeof(::Oculus::Spatializer::Propagation::FaceType) == 0x4);
    // public System.IntPtr material
    // Size: 0x8
    // Offset: 0x14
    ::System::IntPtr material;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: MeshGroup
    constexpr MeshGroup(::System::UIntPtr indexOffset_ = {}, ::System::UIntPtr faceCount_ = {}, ::Oculus::Spatializer::Propagation::FaceType faceType_ = {}, ::System::IntPtr material_ = {}) noexcept : indexOffset{indexOffset_}, faceCount{faceCount_}, faceType{faceType_}, material{material_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UIntPtr indexOffset
    [[deprecated("Use field access instead!")]] ::System::UIntPtr& dyn_indexOffset();
    // Get instance field reference: public System.UIntPtr faceCount
    [[deprecated("Use field access instead!")]] ::System::UIntPtr& dyn_faceCount();
    // Get instance field reference: public Oculus.Spatializer.Propagation.FaceType faceType
    [[deprecated("Use field access instead!")]] ::Oculus::Spatializer::Propagation::FaceType& dyn_faceType();
    // Get instance field reference: public System.IntPtr material
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_material();
  }; // Oculus.Spatializer.Propagation.MeshGroup
  #pragma pack(pop)
  static check_size<sizeof(MeshGroup), 20 + sizeof(::System::IntPtr)> __Oculus_Spatializer_Propagation_MeshGroupSizeCheck;
  static_assert(sizeof(MeshGroup) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
