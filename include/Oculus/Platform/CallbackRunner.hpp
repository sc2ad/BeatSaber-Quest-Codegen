// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.CallbackRunner
  // [TokenAttribute] Offset: FFFFFFFF
  class CallbackRunner : public UnityEngine::MonoBehaviour {
    public:
    // public System.Boolean IsPersistantBetweenSceneLoads
    // Size: 0x1
    // Offset: 0x18
    bool IsPersistantBetweenSceneLoads;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: CallbackRunner
    CallbackRunner(bool IsPersistantBetweenSceneLoads_ = {}) noexcept : IsPersistantBetweenSceneLoads{IsPersistantBetweenSceneLoads_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean IsPersistantBetweenSceneLoads
    bool& dyn_IsPersistantBetweenSceneLoads();
    // static private System.Void ovr_UnityResetTestPlatform()
    // Offset: 0x16A8E18
    static void ovr_UnityResetTestPlatform();
    // private System.Void Awake()
    // Offset: 0x16A8E88
    void Awake();
    // private System.Void Update()
    // Offset: 0x16A8F84
    void Update();
    // private System.Void OnDestroy()
    // Offset: 0x16A8F90
    void OnDestroy();
    // private System.Void OnApplicationQuit()
    // Offset: 0x16A8F94
    void OnApplicationQuit();
    // public System.Void .ctor()
    // Offset: 0x16A8FF0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallbackRunner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Oculus::Platform::CallbackRunner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallbackRunner*, creationType>()));
    }
  }; // Oculus.Platform.CallbackRunner
  #pragma pack(pop)
  static check_size<sizeof(CallbackRunner), 24 + sizeof(bool)> __Oculus_Platform_CallbackRunnerSizeCheck;
  static_assert(sizeof(CallbackRunner) == 0x19);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::CallbackRunner*, "Oculus.Platform", "CallbackRunner");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::ovr_UnityResetTestPlatform
// Il2CppName: ovr_UnityResetTestPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Platform::CallbackRunner::ovr_UnityResetTestPlatform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::CallbackRunner*), "ovr_UnityResetTestPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::CallbackRunner::*)()>(&Oculus::Platform::CallbackRunner::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::CallbackRunner*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::CallbackRunner::*)()>(&Oculus::Platform::CallbackRunner::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::CallbackRunner*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::CallbackRunner::*)()>(&Oculus::Platform::CallbackRunner::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::CallbackRunner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Platform::CallbackRunner::*)()>(&Oculus::Platform::CallbackRunner::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Platform::CallbackRunner*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Platform::CallbackRunner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
