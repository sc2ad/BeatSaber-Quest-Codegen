// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OculusSampleFramework.InteractableToolView
#include "OculusSampleFramework/InteractableToolView.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Gradient
  class Gradient;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: Interactable
  class Interactable;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: RayToolView
  class RayToolView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::RayToolView);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::RayToolView*, "OculusSampleFramework", "RayToolView");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.RayToolView
  // [TokenAttribute] Offset: FFFFFFFF
  class RayToolView : public ::UnityEngine::MonoBehaviour/*, public ::OculusSampleFramework::InteractableToolView*/ {
    public:
    public:
    // private UnityEngine.Transform _targetTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.LineRenderer _lineRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private System.Boolean _toolActivateState
    // Size: 0x1
    // Offset: 0x28
    bool toolActivateState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: toolActivateState and: focusedTransform
    char __padding2[0x7] = {};
    // private UnityEngine.Transform _focusedTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* focusedTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3[] linePositions
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector3> linePositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Gradient _oldColorGradient
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Gradient* oldColorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient _highLightColorGradient
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Gradient* highLightColorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private OculusSampleFramework.InteractableTool <InteractableTool>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::OculusSampleFramework::InteractableTool* InteractableTool;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableTool*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::OculusSampleFramework::InteractableToolView
    operator ::OculusSampleFramework::InteractableToolView() noexcept {
      return *reinterpret_cast<::OculusSampleFramework::InteractableToolView*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 NUM_RAY_LINE_POSITIONS
    static constexpr const int NUM_RAY_LINE_POSITIONS = 25;
    // Get static field: static private System.Int32 NUM_RAY_LINE_POSITIONS
    static int _get_NUM_RAY_LINE_POSITIONS();
    // Set static field: static private System.Int32 NUM_RAY_LINE_POSITIONS
    static void _set_NUM_RAY_LINE_POSITIONS(int value);
    // static field const value: static private System.Single DEFAULT_RAY_CAST_DISTANCE
    static constexpr const float DEFAULT_RAY_CAST_DISTANCE = 3;
    // Get static field: static private System.Single DEFAULT_RAY_CAST_DISTANCE
    static float _get_DEFAULT_RAY_CAST_DISTANCE();
    // Set static field: static private System.Single DEFAULT_RAY_CAST_DISTANCE
    static void _set_DEFAULT_RAY_CAST_DISTANCE(float value);
    // Get instance field reference: private UnityEngine.Transform _targetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__targetTransform();
    // Get instance field reference: private UnityEngine.LineRenderer _lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn__lineRenderer();
    // Get instance field reference: private System.Boolean _toolActivateState
    [[deprecated("Use field access instead!")]] bool& dyn__toolActivateState();
    // Get instance field reference: private UnityEngine.Transform _focusedTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__focusedTransform();
    // Get instance field reference: private UnityEngine.Vector3[] linePositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_linePositions();
    // Get instance field reference: private UnityEngine.Gradient _oldColorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn__oldColorGradient();
    // Get instance field reference: private UnityEngine.Gradient _highLightColorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn__highLightColorGradient();
    // Get instance field reference: private OculusSampleFramework.InteractableTool <InteractableTool>k__BackingField
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableTool*& dyn_$InteractableTool$k__BackingField();
    // public System.Boolean get_EnableState()
    // Offset: 0xCBAEE4
    bool get_EnableState();
    // public System.Void set_EnableState(System.Boolean value)
    // Offset: 0xCBAF1C
    void set_EnableState(bool value);
    // public System.Boolean get_ToolActivateState()
    // Offset: 0xCBC39C
    bool get_ToolActivateState();
    // public System.Void set_ToolActivateState(System.Boolean value)
    // Offset: 0xCBB32C
    void set_ToolActivateState(bool value);
    // public OculusSampleFramework.InteractableTool get_InteractableTool()
    // Offset: 0xCBC5CC
    ::OculusSampleFramework::InteractableTool* get_InteractableTool();
    // public System.Void set_InteractableTool(OculusSampleFramework.InteractableTool value)
    // Offset: 0xCBC5D4
    void set_InteractableTool(::OculusSampleFramework::InteractableTool* value);
    // public System.Void .ctor()
    // Offset: 0xCBCAF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RayToolView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::RayToolView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RayToolView*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xCBC3A4
    void Awake();
    // public System.Void SetFocusedInteractable(OculusSampleFramework.Interactable interactable)
    // Offset: 0xCBC210
    void SetFocusedInteractable(::OculusSampleFramework::Interactable* interactable);
    // private System.Void Update()
    // Offset: 0xCBC5DC
    void Update();
    // static public UnityEngine.Vector3 GetPointOnBezierCurve(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, System.Single t)
    // Offset: 0xCBC908
    static ::UnityEngine::Vector3 GetPointOnBezierCurve(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t);
  }; // OculusSampleFramework.RayToolView
  #pragma pack(pop)
  static check_size<sizeof(RayToolView), 80 + sizeof(::OculusSampleFramework::InteractableTool*)> __OculusSampleFramework_RayToolViewSizeCheck;
  static_assert(sizeof(RayToolView) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::get_EnableState
// Il2CppName: get_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::RayToolView::*)()>(&OculusSampleFramework::RayToolView::get_EnableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "get_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::set_EnableState
// Il2CppName: set_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)(bool)>(&OculusSampleFramework::RayToolView::set_EnableState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "set_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::get_ToolActivateState
// Il2CppName: get_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::RayToolView::*)()>(&OculusSampleFramework::RayToolView::get_ToolActivateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "get_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::set_ToolActivateState
// Il2CppName: set_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)(bool)>(&OculusSampleFramework::RayToolView::set_ToolActivateState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "set_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::get_InteractableTool
// Il2CppName: get_InteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableTool* (OculusSampleFramework::RayToolView::*)()>(&OculusSampleFramework::RayToolView::get_InteractableTool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "get_InteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::set_InteractableTool
// Il2CppName: set_InteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)(::OculusSampleFramework::InteractableTool*)>(&OculusSampleFramework::RayToolView::set_InteractableTool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "set_InteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)()>(&OculusSampleFramework::RayToolView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::SetFocusedInteractable
// Il2CppName: SetFocusedInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::RayToolView::SetFocusedInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "SetFocusedInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::RayToolView::*)()>(&OculusSampleFramework::RayToolView::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::RayToolView::GetPointOnBezierCurve
// Il2CppName: GetPointOnBezierCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&OculusSampleFramework::RayToolView::GetPointOnBezierCurve)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::RayToolView*), "GetPointOnBezierCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
