// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusSampleFramework.InteractableToolsCreator
#include "OculusSampleFramework/InteractableToolsCreator.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: HandsManager
  class HandsManager;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRSkeleton
  class OVRSkeleton;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*, "OculusSampleFramework", "InteractableToolsCreator/<AttachToolsToHands>d__3");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // WARNING Size may be invalid!
  // Autogenerated type: OculusSampleFramework.InteractableToolsCreator/OculusSampleFramework.<AttachToolsToHands>d__3
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class InteractableToolsCreator::$AttachToolsToHands$d__3 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public UnityEngine.Transform[] toolObjects
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> toolObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public System.Boolean isRightHand
    // Size: 0x1
    // Offset: 0x28
    bool isRightHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public OculusSampleFramework.InteractableToolsCreator <>4__this
    // Size: 0x8
    // Offset: 0x30
    ::OculusSampleFramework::InteractableToolsCreator* $$4__this;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableToolsCreator*) == 0x8);
    // private OculusSampleFramework.HandsManager <handsManagerObj>5__2
    // Size: 0x8
    // Offset: 0x38
    ::OculusSampleFramework::HandsManager* $handsManagerObj$5__2;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::HandsManager*) == 0x8);
    // private System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator<UnityEngine.Transform> <>7__wrap2
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    typename ::System::Collections::Generic::HashSet_1<::UnityEngine::Transform*>::Enumerator $$7__wrap2;
    // private UnityEngine.Transform <toolObject>5__4
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* $toolObject$5__4;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private OVRSkeleton <handSkeletonToAttachTo>5__5
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::OVRSkeleton* $handSkeletonToAttachTo$5__5;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRSkeleton*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public UnityEngine.Transform[] toolObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_toolObjects();
    // Get instance field reference: public System.Boolean isRightHand
    [[deprecated("Use field access instead!")]] bool& dyn_isRightHand();
    // Get instance field reference: public OculusSampleFramework.InteractableToolsCreator <>4__this
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableToolsCreator*& dyn_$$4__this();
    // Get instance field reference: private OculusSampleFramework.HandsManager <handsManagerObj>5__2
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::HandsManager*& dyn_$handsManagerObj$5__2();
    // Get instance field reference: private System.Collections.Generic.HashSet`1/System.Collections.Generic.Enumerator<UnityEngine.Transform> <>7__wrap2
    [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::HashSet_1<::UnityEngine::Transform*>::Enumerator& dyn_$$7__wrap2();
    // Get instance field reference: private UnityEngine.Transform <toolObject>5__4
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$toolObject$5__4();
    // Get instance field reference: private OVRSkeleton <handSkeletonToAttachTo>5__5
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRSkeleton*& dyn_$handSkeletonToAttachTo$5__5();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0xCBA19C
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xCBA204
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xCB9C60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableToolsCreator::$AttachToolsToHands$d__3* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableToolsCreator::$AttachToolsToHands$d__3*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xCB9D8C
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0xCB9E00
    bool MoveNext();
    // private System.Void <>m__Finally1()
    // Offset: 0xCB9DA8
    void $$m__Finally1();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xCBA1A4
    void System_Collections_IEnumerator_Reset();
  }; // OculusSampleFramework.InteractableToolsCreator/OculusSampleFramework.<AttachToolsToHands>d__3
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::$$m__Finally1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::*)()>(&OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsCreator::$AttachToolsToHands$d__3*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
