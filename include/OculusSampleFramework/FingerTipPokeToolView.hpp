// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OculusSampleFramework.InteractableToolView
#include "OculusSampleFramework/InteractableToolView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: Interactable
  class Interactable;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: FingerTipPokeToolView
  class FingerTipPokeToolView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::FingerTipPokeToolView);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::FingerTipPokeToolView*, "OculusSampleFramework", "FingerTipPokeToolView");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.FingerTipPokeToolView
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerTipPokeToolView : public ::UnityEngine::MonoBehaviour/*, public ::OculusSampleFramework::InteractableToolView*/ {
    public:
    public:
    // private UnityEngine.MeshRenderer _sphereMeshRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshRenderer* sphereMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private OculusSampleFramework.InteractableTool <InteractableTool>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::OculusSampleFramework::InteractableTool* InteractableTool;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableTool*) == 0x8);
    // private System.Boolean <ToolActivateState>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool ToolActivateState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ToolActivateState and: SphereRadius
    char __padding2[0x3] = {};
    // private System.Single <SphereRadius>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float SphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::OculusSampleFramework::InteractableToolView
    operator ::OculusSampleFramework::InteractableToolView() noexcept {
      return *reinterpret_cast<::OculusSampleFramework::InteractableToolView*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.MeshRenderer _sphereMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__sphereMeshRenderer();
    // Get instance field reference: private OculusSampleFramework.InteractableTool <InteractableTool>k__BackingField
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableTool*& dyn_$InteractableTool$k__BackingField();
    // Get instance field reference: private System.Boolean <ToolActivateState>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ToolActivateState$k__BackingField();
    // Get instance field reference: private System.Single <SphereRadius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$SphereRadius$k__BackingField();
    // public OculusSampleFramework.InteractableTool get_InteractableTool()
    // Offset: 0xCB7678
    ::OculusSampleFramework::InteractableTool* get_InteractableTool();
    // public System.Void set_InteractableTool(OculusSampleFramework.InteractableTool value)
    // Offset: 0xCB7680
    void set_InteractableTool(::OculusSampleFramework::InteractableTool* value);
    // public System.Boolean get_EnableState()
    // Offset: 0xCB7688
    bool get_EnableState();
    // public System.Void set_EnableState(System.Boolean value)
    // Offset: 0xCB76A4
    void set_EnableState(bool value);
    // public System.Boolean get_ToolActivateState()
    // Offset: 0xCB76C4
    bool get_ToolActivateState();
    // public System.Void set_ToolActivateState(System.Boolean value)
    // Offset: 0xCB76CC
    void set_ToolActivateState(bool value);
    // public System.Single get_SphereRadius()
    // Offset: 0xCB76D8
    float get_SphereRadius();
    // private System.Void set_SphereRadius(System.Single value)
    // Offset: 0xCB76E0
    void set_SphereRadius(float value);
    // public System.Void .ctor()
    // Offset: 0xCB7734
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerTipPokeToolView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::FingerTipPokeToolView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerTipPokeToolView*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xCB76E8
    void Awake();
    // public System.Void SetFocusedInteractable(OculusSampleFramework.Interactable interactable)
    // Offset: 0xCB7730
    void SetFocusedInteractable(::OculusSampleFramework::Interactable* interactable);
  }; // OculusSampleFramework.FingerTipPokeToolView
  #pragma pack(pop)
  static check_size<sizeof(FingerTipPokeToolView), 44 + sizeof(float)> __OculusSampleFramework_FingerTipPokeToolViewSizeCheck;
  static_assert(sizeof(FingerTipPokeToolView) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::get_InteractableTool
// Il2CppName: get_InteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableTool* (OculusSampleFramework::FingerTipPokeToolView::*)()>(&OculusSampleFramework::FingerTipPokeToolView::get_InteractableTool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "get_InteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::set_InteractableTool
// Il2CppName: set_InteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)(::OculusSampleFramework::InteractableTool*)>(&OculusSampleFramework::FingerTipPokeToolView::set_InteractableTool)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "set_InteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::get_EnableState
// Il2CppName: get_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::FingerTipPokeToolView::*)()>(&OculusSampleFramework::FingerTipPokeToolView::get_EnableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "get_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::set_EnableState
// Il2CppName: set_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)(bool)>(&OculusSampleFramework::FingerTipPokeToolView::set_EnableState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "set_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::get_ToolActivateState
// Il2CppName: get_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::FingerTipPokeToolView::*)()>(&OculusSampleFramework::FingerTipPokeToolView::get_ToolActivateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "get_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::set_ToolActivateState
// Il2CppName: set_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)(bool)>(&OculusSampleFramework::FingerTipPokeToolView::set_ToolActivateState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "set_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::get_SphereRadius
// Il2CppName: get_SphereRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OculusSampleFramework::FingerTipPokeToolView::*)()>(&OculusSampleFramework::FingerTipPokeToolView::get_SphereRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "get_SphereRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::set_SphereRadius
// Il2CppName: set_SphereRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)(float)>(&OculusSampleFramework::FingerTipPokeToolView::set_SphereRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "set_SphereRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)()>(&OculusSampleFramework::FingerTipPokeToolView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeToolView::SetFocusedInteractable
// Il2CppName: SetFocusedInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeToolView::*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::FingerTipPokeToolView::SetFocusedInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeToolView*), "SetFocusedInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
