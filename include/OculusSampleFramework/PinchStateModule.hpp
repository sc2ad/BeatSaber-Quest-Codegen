// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: Interactable
  class Interactable;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRHand
  class OVRHand;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: PinchStateModule
  class PinchStateModule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::PinchStateModule);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::PinchStateModule*, "OculusSampleFramework", "PinchStateModule");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.PinchStateModule
  // [TokenAttribute] Offset: FFFFFFFF
  class PinchStateModule : public ::Il2CppObject {
    public:
    // Nested type: ::OculusSampleFramework::PinchStateModule::PinchState
    struct PinchState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState
    // [TokenAttribute] Offset: FFFFFFFF
    struct PinchState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PinchState
      constexpr PinchState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState None
      static constexpr const int None = 0;
      // Get static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState None
      static ::OculusSampleFramework::PinchStateModule::PinchState _get_None();
      // Set static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState None
      static void _set_None(::OculusSampleFramework::PinchStateModule::PinchState value);
      // static field const value: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchDown
      static constexpr const int PinchDown = 1;
      // Get static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchDown
      static ::OculusSampleFramework::PinchStateModule::PinchState _get_PinchDown();
      // Set static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchDown
      static void _set_PinchDown(::OculusSampleFramework::PinchStateModule::PinchState value);
      // static field const value: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchStay
      static constexpr const int PinchStay = 2;
      // Get static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchStay
      static ::OculusSampleFramework::PinchStateModule::PinchState _get_PinchStay();
      // Set static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchStay
      static void _set_PinchStay(::OculusSampleFramework::PinchStateModule::PinchState value);
      // static field const value: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchUp
      static constexpr const int PinchUp = 3;
      // Get static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchUp
      static ::OculusSampleFramework::PinchStateModule::PinchState _get_PinchUp();
      // Set static field: static public OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState PinchUp
      static void _set_PinchUp(::OculusSampleFramework::PinchStateModule::PinchState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState
    #pragma pack(pop)
    static check_size<sizeof(PinchStateModule::PinchState), 0 + sizeof(int)> __OculusSampleFramework_PinchStateModule_PinchStateSizeCheck;
    static_assert(sizeof(PinchStateModule::PinchState) == 0x4);
    public:
    // private OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState _currPinchState
    // Size: 0x4
    // Offset: 0x10
    ::OculusSampleFramework::PinchStateModule::PinchState currPinchState;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::PinchStateModule::PinchState) == 0x4);
    // Padding between fields: currPinchState and: firstFocusedInteractable
    char __padding0[0x4] = {};
    // private OculusSampleFramework.Interactable _firstFocusedInteractable
    // Size: 0x8
    // Offset: 0x18
    ::OculusSampleFramework::Interactable* firstFocusedInteractable;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Interactable*) == 0x8);
    public:
    // static field const value: static private System.Single PINCH_STRENGTH_THRESHOLD
    static constexpr const float PINCH_STRENGTH_THRESHOLD = 1;
    // Get static field: static private System.Single PINCH_STRENGTH_THRESHOLD
    static float _get_PINCH_STRENGTH_THRESHOLD();
    // Set static field: static private System.Single PINCH_STRENGTH_THRESHOLD
    static void _set_PINCH_STRENGTH_THRESHOLD(float value);
    // Get instance field reference: private OculusSampleFramework.PinchStateModule/OculusSampleFramework.PinchState _currPinchState
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::PinchStateModule::PinchState& dyn__currPinchState();
    // Get instance field reference: private OculusSampleFramework.Interactable _firstFocusedInteractable
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Interactable*& dyn__firstFocusedInteractable();
    // public System.Boolean get_PinchUpAndDownOnFocusedObject()
    // Offset: 0xCBAAF0
    bool get_PinchUpAndDownOnFocusedObject();
    // public System.Boolean get_PinchSteadyOnFocusedObject()
    // Offset: 0xCBAB7C
    bool get_PinchSteadyOnFocusedObject();
    // public System.Boolean get_PinchDownOnFocusedObject()
    // Offset: 0xCBAC08
    bool get_PinchDownOnFocusedObject();
    // public System.Void .ctor()
    // Offset: 0xCBAC94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PinchStateModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::PinchStateModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PinchStateModule*, creationType>()));
    }
    // public System.Void UpdateState(OVRHand hand, OculusSampleFramework.Interactable currFocusedInteractable)
    // Offset: 0xCBACC0
    void UpdateState(::GlobalNamespace::OVRHand* hand, ::OculusSampleFramework::Interactable* currFocusedInteractable);
  }; // OculusSampleFramework.PinchStateModule
  #pragma pack(pop)
  static check_size<sizeof(PinchStateModule), 24 + sizeof(::OculusSampleFramework::Interactable*)> __OculusSampleFramework_PinchStateModuleSizeCheck;
  static_assert(sizeof(PinchStateModule) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::PinchStateModule::PinchState, "OculusSampleFramework", "PinchStateModule/PinchState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::PinchStateModule::get_PinchUpAndDownOnFocusedObject
// Il2CppName: get_PinchUpAndDownOnFocusedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::PinchStateModule::*)()>(&OculusSampleFramework::PinchStateModule::get_PinchUpAndDownOnFocusedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::PinchStateModule*), "get_PinchUpAndDownOnFocusedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::PinchStateModule::get_PinchSteadyOnFocusedObject
// Il2CppName: get_PinchSteadyOnFocusedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::PinchStateModule::*)()>(&OculusSampleFramework::PinchStateModule::get_PinchSteadyOnFocusedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::PinchStateModule*), "get_PinchSteadyOnFocusedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::PinchStateModule::get_PinchDownOnFocusedObject
// Il2CppName: get_PinchDownOnFocusedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::PinchStateModule::*)()>(&OculusSampleFramework::PinchStateModule::get_PinchDownOnFocusedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::PinchStateModule*), "get_PinchDownOnFocusedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::PinchStateModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::PinchStateModule::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::PinchStateModule::*)(::GlobalNamespace::OVRHand*, ::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::PinchStateModule::UpdateState)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRHand")->byval_arg;
    static auto* currFocusedInteractable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::PinchStateModule*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, currFocusedInteractable});
  }
};
