// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusSampleFramework.Interactable
#include "OculusSampleFramework/Interactable.hpp"
// Including type: OculusSampleFramework.InteractableToolTags
#include "OculusSampleFramework/InteractableToolTags.hpp"
// Including type: OculusSampleFramework.InteractableState
#include "OculusSampleFramework/InteractableState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: InteractableCollisionDepth
  struct InteractableCollisionDepth;
  // Forward declaring type: InteractionType
  struct InteractionType;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: ButtonController
  class ButtonController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::ButtonController);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::ButtonController*, "OculusSampleFramework", "ButtonController");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.ButtonController
  // [TokenAttribute] Offset: FFFFFFFF
  class ButtonController : public ::OculusSampleFramework::Interactable {
    public:
    // Nested type: ::OculusSampleFramework::ButtonController::ContactTest
    struct ContactTest;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest
    // [TokenAttribute] Offset: FFFFFFFF
    struct ContactTest/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ContactTest
      constexpr ContactTest(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest PerpenTest
      static constexpr const int PerpenTest = 0;
      // Get static field: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest PerpenTest
      static ::OculusSampleFramework::ButtonController::ContactTest _get_PerpenTest();
      // Set static field: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest PerpenTest
      static void _set_PerpenTest(::OculusSampleFramework::ButtonController::ContactTest value);
      // static field const value: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest BackwardsPress
      static constexpr const int BackwardsPress = 1;
      // Get static field: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest BackwardsPress
      static ::OculusSampleFramework::ButtonController::ContactTest _get_BackwardsPress();
      // Set static field: static public OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest BackwardsPress
      static void _set_BackwardsPress(::OculusSampleFramework::ButtonController::ContactTest value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest
    #pragma pack(pop)
    static check_size<sizeof(ButtonController::ContactTest), 0 + sizeof(int)> __OculusSampleFramework_ButtonController_ContactTestSizeCheck;
    static_assert(sizeof(ButtonController::ContactTest) == 0x4);
    public:
    // private UnityEngine.GameObject _proximityZone
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* proximityZone;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _contactZone
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* contactZone;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _actionZone
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* actionZone;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest[] _contactTests
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::OculusSampleFramework::ButtonController::ContactTest> contactTests;
    // Field size check
    static_assert(sizeof(::ArrayW<::OculusSampleFramework::ButtonController::ContactTest>) == 0x8);
    // private UnityEngine.Transform _buttonPlaneCenter
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* buttonPlaneCenter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _makeSureToolIsOnPositiveSide
    // Size: 0x1
    // Offset: 0x78
    bool makeSureToolIsOnPositiveSide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: makeSureToolIsOnPositiveSide and: localButtonDirection
    char __padding5[0x3] = {};
    // private UnityEngine.Vector3 _localButtonDirection
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 localButtonDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private OculusSampleFramework.InteractableToolTags[] _allValidToolsTags
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::OculusSampleFramework::InteractableToolTags> allValidToolsTags;
    // Field size check
    static_assert(sizeof(::ArrayW<::OculusSampleFramework::InteractableToolTags>) == 0x8);
    // private System.Int32 _toolTagsMask
    // Size: 0x4
    // Offset: 0x90
    int toolTagsMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private OculusSampleFramework.InteractableState _currentButtonState
    // Size: 0x4
    // Offset: 0x94
    ::OculusSampleFramework::InteractableState currentButtonState;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableState) == 0x4);
    // private System.Collections.Generic.Dictionary`2<OculusSampleFramework.InteractableTool,OculusSampleFramework.InteractableState> _toolToState
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::Dictionary_2<::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableState>* toolToState;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableState>*) == 0x8);
    public:
    // static field const value: static private System.Single ENTRY_DOT_THRESHOLD
    static constexpr const float ENTRY_DOT_THRESHOLD = 0.8;
    // Get static field: static private System.Single ENTRY_DOT_THRESHOLD
    static float _get_ENTRY_DOT_THRESHOLD();
    // Set static field: static private System.Single ENTRY_DOT_THRESHOLD
    static void _set_ENTRY_DOT_THRESHOLD(float value);
    // static field const value: static private System.Single PERP_DOT_THRESHOLD
    static constexpr const float PERP_DOT_THRESHOLD = 0.5;
    // Get static field: static private System.Single PERP_DOT_THRESHOLD
    static float _get_PERP_DOT_THRESHOLD();
    // Set static field: static private System.Single PERP_DOT_THRESHOLD
    static void _set_PERP_DOT_THRESHOLD(float value);
    // Get instance field reference: private UnityEngine.GameObject _proximityZone
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__proximityZone();
    // Get instance field reference: private UnityEngine.GameObject _contactZone
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__contactZone();
    // Get instance field reference: private UnityEngine.GameObject _actionZone
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__actionZone();
    // Get instance field reference: private OculusSampleFramework.ButtonController/OculusSampleFramework.ContactTest[] _contactTests
    [[deprecated("Use field access instead!")]] ::ArrayW<::OculusSampleFramework::ButtonController::ContactTest>& dyn__contactTests();
    // Get instance field reference: private UnityEngine.Transform _buttonPlaneCenter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__buttonPlaneCenter();
    // Get instance field reference: private System.Boolean _makeSureToolIsOnPositiveSide
    [[deprecated("Use field access instead!")]] bool& dyn__makeSureToolIsOnPositiveSide();
    // Get instance field reference: private UnityEngine.Vector3 _localButtonDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localButtonDirection();
    // Get instance field reference: private OculusSampleFramework.InteractableToolTags[] _allValidToolsTags
    [[deprecated("Use field access instead!")]] ::ArrayW<::OculusSampleFramework::InteractableToolTags>& dyn__allValidToolsTags();
    // Get instance field reference: private System.Int32 _toolTagsMask
    [[deprecated("Use field access instead!")]] int& dyn__toolTagsMask();
    // Get instance field reference: private OculusSampleFramework.InteractableState _currentButtonState
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableState& dyn__currentButtonState();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<OculusSampleFramework.InteractableTool,OculusSampleFramework.InteractableState> _toolToState
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableState>*& dyn__toolToState();
    // public UnityEngine.Vector3 get_LocalButtonDirection()
    // Offset: 0xCB2EB4
    ::UnityEngine::Vector3 get_LocalButtonDirection();
    // private System.Void FireInteractionEventsOnDepth(OculusSampleFramework.InteractableCollisionDepth oldDepth, OculusSampleFramework.InteractableTool collidingTool, OculusSampleFramework.InteractionType interactionType)
    // Offset: 0xCB3010
    void FireInteractionEventsOnDepth(::OculusSampleFramework::InteractableCollisionDepth oldDepth, ::OculusSampleFramework::InteractableTool* collidingTool, ::OculusSampleFramework::InteractionType interactionType);
    // private OculusSampleFramework.InteractableState GetUpcomingStateNearField(OculusSampleFramework.InteractableState oldState, OculusSampleFramework.InteractableCollisionDepth newCollisionDepth, System.Boolean toolIsInActionZone, System.Boolean toolIsInContactZone, System.Boolean toolIsInProximity, System.Boolean validContact, System.Boolean onPositiveSideOfInteractable)
    // Offset: 0xCB375C
    ::OculusSampleFramework::InteractableState GetUpcomingStateNearField(::OculusSampleFramework::InteractableState oldState, ::OculusSampleFramework::InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable);
    // private System.Boolean IsValidContact(OculusSampleFramework.InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
    // Offset: 0xCB3674
    bool IsValidContact(::OculusSampleFramework::InteractableTool* collidingTool, ::UnityEngine::Vector3 buttonDirection);
    // private System.Boolean PassEntryTest(OculusSampleFramework.InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
    // Offset: 0xCB38AC
    bool PassEntryTest(::OculusSampleFramework::InteractableTool* collidingTool, ::UnityEngine::Vector3 buttonDirection);
    // private System.Boolean PassPerpTest(OculusSampleFramework.InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
    // Offset: 0xCB39A0
    bool PassPerpTest(::OculusSampleFramework::InteractableTool* collidingTool, ::UnityEngine::Vector3 buttonDirection);
    // public override System.Int32 get_ValidToolTagsMask()
    // Offset: 0xCB2EAC
    // Implemented from: OculusSampleFramework.Interactable
    // Base method: System.Int32 Interactable::get_ValidToolTagsMask()
    int get_ValidToolTagsMask();
    // public System.Void .ctor()
    // Offset: 0xCB3ACC
    // Implemented from: OculusSampleFramework.Interactable
    // Base method: System.Void Interactable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButtonController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::ButtonController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButtonController*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xCB2EC0
    // Implemented from: OculusSampleFramework.Interactable
    // Base method: System.Void Interactable::Awake()
    void Awake();
    // public override System.Void UpdateCollisionDepth(OculusSampleFramework.InteractableTool interactableTool, OculusSampleFramework.InteractableCollisionDepth oldCollisionDepth, OculusSampleFramework.InteractableCollisionDepth newCollisionDepth)
    // Offset: 0xCB3218
    // Implemented from: OculusSampleFramework.Interactable
    // Base method: System.Void Interactable::UpdateCollisionDepth(OculusSampleFramework.InteractableTool interactableTool, OculusSampleFramework.InteractableCollisionDepth oldCollisionDepth, OculusSampleFramework.InteractableCollisionDepth newCollisionDepth)
    void UpdateCollisionDepth(::OculusSampleFramework::InteractableTool* interactableTool, ::OculusSampleFramework::InteractableCollisionDepth oldCollisionDepth, ::OculusSampleFramework::InteractableCollisionDepth newCollisionDepth);
  }; // OculusSampleFramework.ButtonController
  #pragma pack(pop)
  static check_size<sizeof(ButtonController), 152 + sizeof(::System::Collections::Generic::Dictionary_2<::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableState>*)> __OculusSampleFramework_ButtonControllerSizeCheck;
  static_assert(sizeof(ButtonController) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::ButtonController::ContactTest, "OculusSampleFramework", "ButtonController/ContactTest");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::get_LocalButtonDirection
// Il2CppName: get_LocalButtonDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (OculusSampleFramework::ButtonController::*)()>(&OculusSampleFramework::ButtonController::get_LocalButtonDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "get_LocalButtonDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::FireInteractionEventsOnDepth
// Il2CppName: FireInteractionEventsOnDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableCollisionDepth, ::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractionType)>(&OculusSampleFramework::ButtonController::FireInteractionEventsOnDepth)> {
  static const MethodInfo* get() {
    static auto* oldDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    static auto* collidingTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* interactionType = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "FireInteractionEventsOnDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldDepth, collidingTool, interactionType});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::GetUpcomingStateNearField
// Il2CppName: GetUpcomingStateNearField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableState (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableState, ::OculusSampleFramework::InteractableCollisionDepth, bool, bool, bool, bool, bool)>(&OculusSampleFramework::ButtonController::GetUpcomingStateNearField)> {
  static const MethodInfo* get() {
    static auto* oldState = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableState")->byval_arg;
    static auto* newCollisionDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    static auto* toolIsInActionZone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* toolIsInContactZone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* toolIsInProximity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* validContact = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* onPositiveSideOfInteractable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "GetUpcomingStateNearField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState, newCollisionDepth, toolIsInActionZone, toolIsInContactZone, toolIsInProximity, validContact, onPositiveSideOfInteractable});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::IsValidContact
// Il2CppName: IsValidContact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableTool*, ::UnityEngine::Vector3)>(&OculusSampleFramework::ButtonController::IsValidContact)> {
  static const MethodInfo* get() {
    static auto* collidingTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* buttonDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "IsValidContact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collidingTool, buttonDirection});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::PassEntryTest
// Il2CppName: PassEntryTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableTool*, ::UnityEngine::Vector3)>(&OculusSampleFramework::ButtonController::PassEntryTest)> {
  static const MethodInfo* get() {
    static auto* collidingTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* buttonDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "PassEntryTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collidingTool, buttonDirection});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::PassPerpTest
// Il2CppName: PassPerpTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableTool*, ::UnityEngine::Vector3)>(&OculusSampleFramework::ButtonController::PassPerpTest)> {
  static const MethodInfo* get() {
    static auto* collidingTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* buttonDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "PassPerpTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collidingTool, buttonDirection});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::get_ValidToolTagsMask
// Il2CppName: get_ValidToolTagsMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusSampleFramework::ButtonController::*)()>(&OculusSampleFramework::ButtonController::get_ValidToolTagsMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "get_ValidToolTagsMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonController::*)()>(&OculusSampleFramework::ButtonController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonController::UpdateCollisionDepth
// Il2CppName: UpdateCollisionDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonController::*)(::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableCollisionDepth, ::OculusSampleFramework::InteractableCollisionDepth)>(&OculusSampleFramework::ButtonController::UpdateCollisionDepth)> {
  static const MethodInfo* get() {
    static auto* interactableTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* oldCollisionDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    static auto* newCollisionDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonController*), "UpdateCollisionDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableTool, oldCollisionDepth, newCollisionDepth});
  }
};
