// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableTool
  class InteractableTool;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableToolsInputRouter
  class InteractableToolsInputRouter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::InteractableToolsInputRouter);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::InteractableToolsInputRouter*, "OculusSampleFramework", "InteractableToolsInputRouter");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.InteractableToolsInputRouter
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableToolsInputRouter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean _leftPinch
    // Size: 0x1
    // Offset: 0x18
    bool leftPinch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _rightPinch
    // Size: 0x1
    // Offset: 0x19
    bool rightPinch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightPinch and: leftHandNearTools
    char __padding1[0x6] = {};
    // private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _leftHandNearTools
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* leftHandNearTools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _leftHandFarTools
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* leftHandFarTools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _rightHandNearTools
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* rightHandNearTools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _rightHandFarTools
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* rightHandFarTools;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private OculusSampleFramework.InteractableToolsInputRouter _instance
    static ::OculusSampleFramework::InteractableToolsInputRouter* _get__instance();
    // Set static field: static private OculusSampleFramework.InteractableToolsInputRouter _instance
    static void _set__instance(::OculusSampleFramework::InteractableToolsInputRouter* value);
    // Get instance field reference: private System.Boolean _leftPinch
    [[deprecated("Use field access instead!")]] bool& dyn__leftPinch();
    // Get instance field reference: private System.Boolean _rightPinch
    [[deprecated("Use field access instead!")]] bool& dyn__rightPinch();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _leftHandNearTools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*& dyn__leftHandNearTools();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _leftHandFarTools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*& dyn__leftHandFarTools();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _rightHandNearTools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*& dyn__rightHandNearTools();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> _rightHandFarTools
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*& dyn__rightHandFarTools();
    // static public OculusSampleFramework.InteractableToolsInputRouter get_Instance()
    // Offset: 0xCB60B4
    static ::OculusSampleFramework::InteractableToolsInputRouter* get_Instance();
    // public System.Void .ctor()
    // Offset: 0xCBA944
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableToolsInputRouter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::InteractableToolsInputRouter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableToolsInputRouter*, creationType>()));
    }
    // public System.Void RegisterInteractableTool(OculusSampleFramework.InteractableTool interactableTool)
    // Offset: 0xCB621C
    void RegisterInteractableTool(::OculusSampleFramework::InteractableTool* interactableTool);
    // public System.Void UnregisterInteractableTool(OculusSampleFramework.InteractableTool interactableTool)
    // Offset: 0xCBA20C
    void UnregisterInteractableTool(::OculusSampleFramework::InteractableTool* interactableTool);
    // private System.Void Update()
    // Offset: 0xCBA2B8
    void Update();
    // private System.Boolean UpdateToolsAndEnableState(System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> tools, System.Boolean toolsAreEnabledThisFrame)
    // Offset: 0xCBA580
    bool UpdateToolsAndEnableState(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* tools, bool toolsAreEnabledThisFrame);
    // private System.Boolean UpdateTools(System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> tools, System.Boolean resetCollisionData)
    // Offset: 0xCBA5C8
    bool UpdateTools(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* tools, bool resetCollisionData);
    // private System.Void ToggleToolsEnableState(System.Collections.Generic.HashSet`1<OculusSampleFramework.InteractableTool> tools, System.Boolean enableState)
    // Offset: 0xCBA818
    void ToggleToolsEnableState(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>* tools, bool enableState);
  }; // OculusSampleFramework.InteractableToolsInputRouter
  #pragma pack(pop)
  static check_size<sizeof(InteractableToolsInputRouter), 56 + sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*)> __OculusSampleFramework_InteractableToolsInputRouterSizeCheck;
  static_assert(sizeof(InteractableToolsInputRouter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableToolsInputRouter* (*)()>(&OculusSampleFramework::InteractableToolsInputRouter::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::RegisterInteractableTool
// Il2CppName: RegisterInteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsInputRouter::*)(::OculusSampleFramework::InteractableTool*)>(&OculusSampleFramework::InteractableToolsInputRouter::RegisterInteractableTool)> {
  static const MethodInfo* get() {
    static auto* interactableTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "RegisterInteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableTool});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::UnregisterInteractableTool
// Il2CppName: UnregisterInteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsInputRouter::*)(::OculusSampleFramework::InteractableTool*)>(&OculusSampleFramework::InteractableToolsInputRouter::UnregisterInteractableTool)> {
  static const MethodInfo* get() {
    static auto* interactableTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "UnregisterInteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableTool});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsInputRouter::*)()>(&OculusSampleFramework::InteractableToolsInputRouter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::UpdateToolsAndEnableState
// Il2CppName: UpdateToolsAndEnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::InteractableToolsInputRouter::*)(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*, bool)>(&OculusSampleFramework::InteractableToolsInputRouter::UpdateToolsAndEnableState)> {
  static const MethodInfo* get() {
    static auto* tools = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")})->byval_arg;
    static auto* toolsAreEnabledThisFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "UpdateToolsAndEnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tools, toolsAreEnabledThisFrame});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::UpdateTools
// Il2CppName: UpdateTools
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::InteractableToolsInputRouter::*)(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*, bool)>(&OculusSampleFramework::InteractableToolsInputRouter::UpdateTools)> {
  static const MethodInfo* get() {
    static auto* tools = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")})->byval_arg;
    static auto* resetCollisionData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "UpdateTools", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tools, resetCollisionData});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolsInputRouter::ToggleToolsEnableState
// Il2CppName: ToggleToolsEnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolsInputRouter::*)(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::InteractableTool*>*, bool)>(&OculusSampleFramework::InteractableToolsInputRouter::ToggleToolsEnableState)> {
  static const MethodInfo* get() {
    static auto* tools = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")})->byval_arg;
    static auto* enableState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolsInputRouter*), "ToggleToolsEnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tools, enableState});
  }
};
