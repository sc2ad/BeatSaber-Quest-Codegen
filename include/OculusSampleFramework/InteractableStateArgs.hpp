// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: OculusSampleFramework.InteractableState
#include "OculusSampleFramework/InteractableState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: ColliderZoneArgs
  class ColliderZoneArgs;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableStateArgs
  class InteractableStateArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::InteractableStateArgs);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::InteractableStateArgs*, "OculusSampleFramework", "InteractableStateArgs");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.InteractableStateArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableStateArgs : public ::System::EventArgs {
    public:
    public:
    // public readonly OculusSampleFramework.Interactable Interactable
    // Size: 0x8
    // Offset: 0x10
    ::OculusSampleFramework::Interactable* Interactable;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Interactable*) == 0x8);
    // public readonly OculusSampleFramework.InteractableTool Tool
    // Size: 0x8
    // Offset: 0x18
    ::OculusSampleFramework::InteractableTool* Tool;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableTool*) == 0x8);
    // public readonly OculusSampleFramework.InteractableState OldInteractableState
    // Size: 0x4
    // Offset: 0x20
    ::OculusSampleFramework::InteractableState OldInteractableState;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableState) == 0x4);
    // public readonly OculusSampleFramework.InteractableState NewInteractableState
    // Size: 0x4
    // Offset: 0x24
    ::OculusSampleFramework::InteractableState NewInteractableState;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableState) == 0x4);
    // public readonly OculusSampleFramework.ColliderZoneArgs ColliderArgs
    // Size: 0x8
    // Offset: 0x28
    ::OculusSampleFramework::ColliderZoneArgs* ColliderArgs;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::ColliderZoneArgs*) == 0x8);
    public:
    // Get instance field reference: public readonly OculusSampleFramework.Interactable Interactable
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Interactable*& dyn_Interactable();
    // Get instance field reference: public readonly OculusSampleFramework.InteractableTool Tool
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableTool*& dyn_Tool();
    // Get instance field reference: public readonly OculusSampleFramework.InteractableState OldInteractableState
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableState& dyn_OldInteractableState();
    // Get instance field reference: public readonly OculusSampleFramework.InteractableState NewInteractableState
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableState& dyn_NewInteractableState();
    // Get instance field reference: public readonly OculusSampleFramework.ColliderZoneArgs ColliderArgs
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::ColliderZoneArgs*& dyn_ColliderArgs();
    // public System.Void .ctor(OculusSampleFramework.Interactable interactable, OculusSampleFramework.InteractableTool tool, OculusSampleFramework.InteractableState newInteractableState, OculusSampleFramework.InteractableState oldState, OculusSampleFramework.ColliderZoneArgs colliderArgs)
    // Offset: 0xCB3808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableStateArgs* New_ctor(::OculusSampleFramework::Interactable* interactable, ::OculusSampleFramework::InteractableTool* tool, ::OculusSampleFramework::InteractableState newInteractableState, ::OculusSampleFramework::InteractableState oldState, ::OculusSampleFramework::ColliderZoneArgs* colliderArgs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::InteractableStateArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableStateArgs*, creationType>(interactable, tool, newInteractableState, oldState, colliderArgs)));
    }
  }; // OculusSampleFramework.InteractableStateArgs
  #pragma pack(pop)
  static check_size<sizeof(InteractableStateArgs), 40 + sizeof(::OculusSampleFramework::ColliderZoneArgs*)> __OculusSampleFramework_InteractableStateArgsSizeCheck;
  static_assert(sizeof(InteractableStateArgs) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::InteractableStateArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
