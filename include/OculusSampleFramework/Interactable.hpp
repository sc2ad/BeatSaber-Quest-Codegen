// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: ColliderZone
  class ColliderZone;
  // Forward declaring type: ColliderZoneArgs
  class ColliderZoneArgs;
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: InteractableCollisionDepth
  struct InteractableCollisionDepth;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: Interactable
  class Interactable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::Interactable);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::Interactable*, "OculusSampleFramework", "Interactable");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.Interactable
  // [TokenAttribute] Offset: FFFFFFFF
  class Interactable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::OculusSampleFramework::Interactable::InteractableStateArgsEvent
    class InteractableStateArgsEvent;
    public:
    // protected OculusSampleFramework.ColliderZone _proximityZoneCollider
    // Size: 0x8
    // Offset: 0x18
    ::OculusSampleFramework::ColliderZone* proximityZoneCollider;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::ColliderZone*) == 0x8);
    // protected OculusSampleFramework.ColliderZone _contactZoneCollider
    // Size: 0x8
    // Offset: 0x20
    ::OculusSampleFramework::ColliderZone* contactZoneCollider;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::ColliderZone*) == 0x8);
    // protected OculusSampleFramework.ColliderZone _actionZoneCollider
    // Size: 0x8
    // Offset: 0x28
    ::OculusSampleFramework::ColliderZone* actionZoneCollider;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::ColliderZone*) == 0x8);
    // private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ProximityZoneEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* ProximityZoneEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*) == 0x8);
    // private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ContactZoneEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* ContactZoneEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*) == 0x8);
    // private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ActionZoneEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* ActionZoneEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*) == 0x8);
    // public OculusSampleFramework.Interactable/OculusSampleFramework.InteractableStateArgsEvent InteractableStateChanged
    // Size: 0x8
    // Offset: 0x48
    ::OculusSampleFramework::Interactable::InteractableStateArgsEvent* InteractableStateChanged;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Interactable::InteractableStateArgsEvent*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected OculusSampleFramework.ColliderZone _proximityZoneCollider
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::ColliderZone*& dyn__proximityZoneCollider();
    // Get instance field reference: protected OculusSampleFramework.ColliderZone _contactZoneCollider
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::ColliderZone*& dyn__contactZoneCollider();
    // Get instance field reference: protected OculusSampleFramework.ColliderZone _actionZoneCollider
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::ColliderZone*& dyn__actionZoneCollider();
    // Get instance field reference: private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ProximityZoneEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*& dyn_ProximityZoneEvent();
    // Get instance field reference: private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ContactZoneEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*& dyn_ContactZoneEvent();
    // Get instance field reference: private System.Action`1<OculusSampleFramework.ColliderZoneArgs> ActionZoneEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*& dyn_ActionZoneEvent();
    // Get instance field reference: public OculusSampleFramework.Interactable/OculusSampleFramework.InteractableStateArgsEvent InteractableStateChanged
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Interactable::InteractableStateArgsEvent*& dyn_InteractableStateChanged();
    // public OculusSampleFramework.ColliderZone get_ProximityCollider()
    // Offset: 0xCB899C
    ::OculusSampleFramework::ColliderZone* get_ProximityCollider();
    // public OculusSampleFramework.ColliderZone get_ContactCollider()
    // Offset: 0xCB89A4
    ::OculusSampleFramework::ColliderZone* get_ContactCollider();
    // public OculusSampleFramework.ColliderZone get_ActionCollider()
    // Offset: 0xCB89AC
    ::OculusSampleFramework::ColliderZone* get_ActionCollider();
    // public System.Int32 get_ValidToolTagsMask()
    // Offset: 0xCB89B4
    int get_ValidToolTagsMask();
    // public System.Void add_ProximityZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB89BC
    void add_ProximityZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // public System.Void remove_ProximityZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB8A60
    void remove_ProximityZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // public System.Void add_ContactZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB8B78
    void add_ContactZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // public System.Void remove_ContactZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB8C1C
    void remove_ContactZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // public System.Void add_ActionZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB8D34
    void add_ActionZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // public System.Void remove_ActionZoneEvent(System.Action`1<OculusSampleFramework.ColliderZoneArgs> value)
    // Offset: 0xCB8DD8
    void remove_ActionZoneEvent(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>* value);
    // protected System.Void .ctor()
    // Offset: 0xCB3BB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Interactable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::Interactable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Interactable*, creationType>()));
    }
    // protected System.Void OnProximityZoneEvent(OculusSampleFramework.ColliderZoneArgs args)
    // Offset: 0xCB8B04
    void OnProximityZoneEvent(::OculusSampleFramework::ColliderZoneArgs* args);
    // protected System.Void OnContactZoneEvent(OculusSampleFramework.ColliderZoneArgs args)
    // Offset: 0xCB8CC0
    void OnContactZoneEvent(::OculusSampleFramework::ColliderZoneArgs* args);
    // protected System.Void OnActionZoneEvent(OculusSampleFramework.ColliderZoneArgs args)
    // Offset: 0xCB8E7C
    void OnActionZoneEvent(::OculusSampleFramework::ColliderZoneArgs* args);
    // public System.Void UpdateCollisionDepth(OculusSampleFramework.InteractableTool interactableTool, OculusSampleFramework.InteractableCollisionDepth oldCollisionDepth, OculusSampleFramework.InteractableCollisionDepth newCollisionDepth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateCollisionDepth(::OculusSampleFramework::InteractableTool* interactableTool, ::OculusSampleFramework::InteractableCollisionDepth oldCollisionDepth, ::OculusSampleFramework::InteractableCollisionDepth newCollisionDepth);
    // protected System.Void Awake()
    // Offset: 0xCB2FAC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0xCB8FB8
    void OnDestroy();
  }; // OculusSampleFramework.Interactable
  #pragma pack(pop)
  static check_size<sizeof(Interactable), 72 + sizeof(::OculusSampleFramework::Interactable::InteractableStateArgsEvent*)> __OculusSampleFramework_InteractableSizeCheck;
  static_assert(sizeof(Interactable) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::get_ProximityCollider
// Il2CppName: get_ProximityCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::ColliderZone* (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::get_ProximityCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "get_ProximityCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::get_ContactCollider
// Il2CppName: get_ContactCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::ColliderZone* (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::get_ContactCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "get_ContactCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::get_ActionCollider
// Il2CppName: get_ActionCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::ColliderZone* (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::get_ActionCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "get_ActionCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::get_ValidToolTagsMask
// Il2CppName: get_ValidToolTagsMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::get_ValidToolTagsMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "get_ValidToolTagsMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::add_ProximityZoneEvent
// Il2CppName: add_ProximityZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::add_ProximityZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "add_ProximityZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::remove_ProximityZoneEvent
// Il2CppName: remove_ProximityZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::remove_ProximityZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "remove_ProximityZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::add_ContactZoneEvent
// Il2CppName: add_ContactZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::add_ContactZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "add_ContactZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::remove_ContactZoneEvent
// Il2CppName: remove_ContactZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::remove_ContactZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "remove_ContactZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::add_ActionZoneEvent
// Il2CppName: add_ActionZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::add_ActionZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "add_ActionZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::remove_ActionZoneEvent
// Il2CppName: remove_ActionZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::System::Action_1<::OculusSampleFramework::ColliderZoneArgs*>*)>(&OculusSampleFramework::Interactable::remove_ActionZoneEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "remove_ActionZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::OnProximityZoneEvent
// Il2CppName: OnProximityZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::OculusSampleFramework::ColliderZoneArgs*)>(&OculusSampleFramework::Interactable::OnProximityZoneEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "OnProximityZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::OnContactZoneEvent
// Il2CppName: OnContactZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::OculusSampleFramework::ColliderZoneArgs*)>(&OculusSampleFramework::Interactable::OnContactZoneEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "OnContactZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::OnActionZoneEvent
// Il2CppName: OnActionZoneEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::OculusSampleFramework::ColliderZoneArgs*)>(&OculusSampleFramework::Interactable::OnActionZoneEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "OnActionZoneEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::UpdateCollisionDepth
// Il2CppName: UpdateCollisionDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)(::OculusSampleFramework::InteractableTool*, ::OculusSampleFramework::InteractableCollisionDepth, ::OculusSampleFramework::InteractableCollisionDepth)>(&OculusSampleFramework::Interactable::UpdateCollisionDepth)> {
  static const MethodInfo* get() {
    static auto* interactableTool = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableTool")->byval_arg;
    static auto* oldCollisionDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    static auto* newCollisionDepth = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableCollisionDepth")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "UpdateCollisionDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableTool, oldCollisionDepth, newCollisionDepth});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::Interactable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::Interactable::*)()>(&OculusSampleFramework::Interactable::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::Interactable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
