// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OculusSampleFramework.InteractableToolTags
#include "OculusSampleFramework/InteractableToolTags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: ColliderZone
  class ColliderZone;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: BoneCapsuleTriggerLogic
  class BoneCapsuleTriggerLogic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::BoneCapsuleTriggerLogic);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::BoneCapsuleTriggerLogic*, "OculusSampleFramework", "BoneCapsuleTriggerLogic");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.BoneCapsuleTriggerLogic
  // [TokenAttribute] Offset: FFFFFFFF
  class BoneCapsuleTriggerLogic : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public OculusSampleFramework.InteractableToolTags ToolTags
    // Size: 0x4
    // Offset: 0x18
    ::OculusSampleFramework::InteractableToolTags ToolTags;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableToolTags) == 0x4);
    // Padding between fields: ToolTags and: CollidersTouchingUs
    char __padding0[0x4] = {};
    // public System.Collections.Generic.HashSet`1<OculusSampleFramework.ColliderZone> CollidersTouchingUs
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::ColliderZone*>* CollidersTouchingUs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::ColliderZone*>*) == 0x8);
    // private System.Collections.Generic.List`1<OculusSampleFramework.ColliderZone> _elementsToCleanUp
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::OculusSampleFramework::ColliderZone*>* elementsToCleanUp;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::OculusSampleFramework::ColliderZone*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public OculusSampleFramework.InteractableToolTags ToolTags
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableToolTags& dyn_ToolTags();
    // Get instance field reference: public System.Collections.Generic.HashSet`1<OculusSampleFramework.ColliderZone> CollidersTouchingUs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::ColliderZone*>*& dyn_CollidersTouchingUs();
    // Get instance field reference: private System.Collections.Generic.List`1<OculusSampleFramework.ColliderZone> _elementsToCleanUp
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::OculusSampleFramework::ColliderZone*>*& dyn__elementsToCleanUp();
    // public System.Void .ctor()
    // Offset: 0xCB2E14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoneCapsuleTriggerLogic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::BoneCapsuleTriggerLogic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoneCapsuleTriggerLogic*, creationType>()));
    }
    // private System.Void OnDisable()
    // Offset: 0xCB2938
    void OnDisable();
    // private System.Void Update()
    // Offset: 0xCB2990
    void Update();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0xCB2C34
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0xCB2D24
    void OnTriggerExit(::UnityEngine::Collider* other);
    // private System.Void CleanUpDeadColliders()
    // Offset: 0xCB2994
    void CleanUpDeadColliders();
  }; // OculusSampleFramework.BoneCapsuleTriggerLogic
  #pragma pack(pop)
  static check_size<sizeof(BoneCapsuleTriggerLogic), 40 + sizeof(::System::Collections::Generic::List_1<::OculusSampleFramework::ColliderZone*>*)> __OculusSampleFramework_BoneCapsuleTriggerLogicSizeCheck;
  static_assert(sizeof(BoneCapsuleTriggerLogic) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::BoneCapsuleTriggerLogic::*)()>(&OculusSampleFramework::BoneCapsuleTriggerLogic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::BoneCapsuleTriggerLogic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::BoneCapsuleTriggerLogic::*)()>(&OculusSampleFramework::BoneCapsuleTriggerLogic::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::BoneCapsuleTriggerLogic*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::BoneCapsuleTriggerLogic::*)(::UnityEngine::Collider*)>(&OculusSampleFramework::BoneCapsuleTriggerLogic::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::BoneCapsuleTriggerLogic*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::BoneCapsuleTriggerLogic::*)(::UnityEngine::Collider*)>(&OculusSampleFramework::BoneCapsuleTriggerLogic::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::BoneCapsuleTriggerLogic*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::BoneCapsuleTriggerLogic::CleanUpDeadColliders
// Il2CppName: CleanUpDeadColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::BoneCapsuleTriggerLogic::*)()>(&OculusSampleFramework::BoneCapsuleTriggerLogic::CleanUpDeadColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::BoneCapsuleTriggerLogic*), "CleanUpDeadColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
