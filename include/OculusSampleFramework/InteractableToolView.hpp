// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: Interactable
  class Interactable;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableToolView
  class InteractableToolView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::InteractableToolView);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::InteractableToolView*, "OculusSampleFramework", "InteractableToolView");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.InteractableToolView
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableToolView {
    public:
    // public OculusSampleFramework.InteractableTool get_InteractableTool()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::OculusSampleFramework::InteractableTool* get_InteractableTool();
    // public System.Boolean get_EnableState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_EnableState();
    // public System.Void set_EnableState(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_EnableState(bool value);
    // public System.Boolean get_ToolActivateState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ToolActivateState();
    // public System.Void set_ToolActivateState(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ToolActivateState(bool value);
    // public System.Void SetFocusedInteractable(OculusSampleFramework.Interactable interactable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetFocusedInteractable(::OculusSampleFramework::Interactable* interactable);
  }; // OculusSampleFramework.InteractableToolView
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::get_InteractableTool
// Il2CppName: get_InteractableTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableTool* (OculusSampleFramework::InteractableToolView::*)()>(&OculusSampleFramework::InteractableToolView::get_InteractableTool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "get_InteractableTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::get_EnableState
// Il2CppName: get_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::InteractableToolView::*)()>(&OculusSampleFramework::InteractableToolView::get_EnableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "get_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::set_EnableState
// Il2CppName: set_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolView::*)(bool)>(&OculusSampleFramework::InteractableToolView::set_EnableState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "set_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::get_ToolActivateState
// Il2CppName: get_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::InteractableToolView::*)()>(&OculusSampleFramework::InteractableToolView::get_ToolActivateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "get_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::set_ToolActivateState
// Il2CppName: set_ToolActivateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolView::*)(bool)>(&OculusSampleFramework::InteractableToolView::set_ToolActivateState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "set_ToolActivateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableToolView::SetFocusedInteractable
// Il2CppName: SetFocusedInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::InteractableToolView::*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::InteractableToolView::SetFocusedInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableToolView*), "SetFocusedInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
