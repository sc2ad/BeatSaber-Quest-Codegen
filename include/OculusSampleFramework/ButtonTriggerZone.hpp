// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OculusSampleFramework.ColliderZone
#include "OculusSampleFramework/ColliderZone.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: InteractableCollisionDepth
  struct InteractableCollisionDepth;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: ButtonTriggerZone
  class ButtonTriggerZone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::ButtonTriggerZone);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::ButtonTriggerZone*, "OculusSampleFramework", "ButtonTriggerZone");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.ButtonTriggerZone
  // [TokenAttribute] Offset: FFFFFFFF
  class ButtonTriggerZone : public ::UnityEngine::MonoBehaviour/*, public ::OculusSampleFramework::ColliderZone*/ {
    public:
    public:
    // private UnityEngine.GameObject _parentInteractableObj
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* parentInteractableObj;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Collider <Collider>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Collider* Collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private OculusSampleFramework.Interactable <ParentInteractable>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::OculusSampleFramework::Interactable* ParentInteractable;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Interactable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::OculusSampleFramework::ColliderZone
    operator ::OculusSampleFramework::ColliderZone() noexcept {
      return *reinterpret_cast<::OculusSampleFramework::ColliderZone*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject _parentInteractableObj
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__parentInteractableObj();
    // Get instance field reference: private UnityEngine.Collider <Collider>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_$Collider$k__BackingField();
    // Get instance field reference: private OculusSampleFramework.Interactable <ParentInteractable>k__BackingField
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Interactable*& dyn_$ParentInteractable$k__BackingField();
    // public UnityEngine.Collider get_Collider()
    // Offset: 0xCB3BB8
    ::UnityEngine::Collider* get_Collider();
    // private System.Void set_Collider(UnityEngine.Collider value)
    // Offset: 0xCB3BC0
    void set_Collider(::UnityEngine::Collider* value);
    // public OculusSampleFramework.Interactable get_ParentInteractable()
    // Offset: 0xCB3BC8
    ::OculusSampleFramework::Interactable* get_ParentInteractable();
    // private System.Void set_ParentInteractable(OculusSampleFramework.Interactable value)
    // Offset: 0xCB3BD0
    void set_ParentInteractable(::OculusSampleFramework::Interactable* value);
    // public OculusSampleFramework.InteractableCollisionDepth get_CollisionDepth()
    // Offset: 0xCB3BD8
    ::OculusSampleFramework::InteractableCollisionDepth get_CollisionDepth();
    // public System.Void .ctor()
    // Offset: 0xCB3CA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButtonTriggerZone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::ButtonTriggerZone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButtonTriggerZone*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xCB3C28
    void Awake();
  }; // OculusSampleFramework.ButtonTriggerZone
  #pragma pack(pop)
  static check_size<sizeof(ButtonTriggerZone), 40 + sizeof(::OculusSampleFramework::Interactable*)> __OculusSampleFramework_ButtonTriggerZoneSizeCheck;
  static_assert(sizeof(ButtonTriggerZone) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::get_Collider
// Il2CppName: get_Collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (OculusSampleFramework::ButtonTriggerZone::*)()>(&OculusSampleFramework::ButtonTriggerZone::get_Collider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "get_Collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::set_Collider
// Il2CppName: set_Collider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonTriggerZone::*)(::UnityEngine::Collider*)>(&OculusSampleFramework::ButtonTriggerZone::set_Collider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "set_Collider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::get_ParentInteractable
// Il2CppName: get_ParentInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::Interactable* (OculusSampleFramework::ButtonTriggerZone::*)()>(&OculusSampleFramework::ButtonTriggerZone::get_ParentInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "get_ParentInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::set_ParentInteractable
// Il2CppName: set_ParentInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonTriggerZone::*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::ButtonTriggerZone::set_ParentInteractable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "set_ParentInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::get_CollisionDepth
// Il2CppName: get_CollisionDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableCollisionDepth (OculusSampleFramework::ButtonTriggerZone::*)()>(&OculusSampleFramework::ButtonTriggerZone::get_CollisionDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "get_CollisionDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::ButtonTriggerZone::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::ButtonTriggerZone::*)()>(&OculusSampleFramework::ButtonTriggerZone::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::ButtonTriggerZone*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
