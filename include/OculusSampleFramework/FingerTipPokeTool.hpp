// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusSampleFramework.InteractableTool
#include "OculusSampleFramework/InteractableTool.hpp"
// Including type: OVRPlugin/HandFinger
#include "GlobalNamespace/OVRPlugin_HandFinger.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: FingerTipPokeToolView
  class FingerTipPokeToolView;
  // Forward declaring type: BoneCapsuleTriggerLogic
  class BoneCapsuleTriggerLogic;
  // Forward declaring type: InteractableToolTags
  struct InteractableToolTags;
  // Forward declaring type: ToolInputState
  struct ToolInputState;
  // Forward declaring type: InteractableCollisionInfo
  class InteractableCollisionInfo;
  // Forward declaring type: Interactable
  class Interactable;
  // Forward declaring type: ColliderZone
  class ColliderZone;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRBoneCapsule
  class OVRBoneCapsule;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: FingerTipPokeTool
  class FingerTipPokeTool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::FingerTipPokeTool);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::FingerTipPokeTool*, "OculusSampleFramework", "FingerTipPokeTool");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.FingerTipPokeTool
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerTipPokeTool : public ::OculusSampleFramework::InteractableTool {
    public:
    // Nested type: ::OculusSampleFramework::FingerTipPokeTool::$AttachTriggerLogic$d__21
    class $AttachTriggerLogic$d__21;
    public:
    // private OculusSampleFramework.FingerTipPokeToolView _fingerTipPokeToolView
    // Size: 0x8
    // Offset: 0x68
    ::OculusSampleFramework::FingerTipPokeToolView* fingerTipPokeToolView;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::FingerTipPokeToolView*) == 0x8);
    // private OVRPlugin/HandFinger _fingerToFollow
    // Size: 0x4
    // Offset: 0x70
    ::GlobalNamespace::OVRPlugin::HandFinger fingerToFollow;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRPlugin::HandFinger) == 0x4);
    // Padding between fields: fingerToFollow and: velocityFrames
    char __padding1[0x4] = {};
    // private UnityEngine.Vector3[] _velocityFrames
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Vector3> velocityFrames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 _currVelocityFrame
    // Size: 0x4
    // Offset: 0x80
    int currVelocityFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _sampledMaxFramesAlready
    // Size: 0x1
    // Offset: 0x84
    bool sampledMaxFramesAlready;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sampledMaxFramesAlready and: position
    char __padding4[0x3] = {};
    // private UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: position and: boneCapsuleTriggerLogic
    char __padding5[0x4] = {};
    // private OculusSampleFramework.BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::OculusSampleFramework::BoneCapsuleTriggerLogic*> boneCapsuleTriggerLogic;
    // Field size check
    static_assert(sizeof(::ArrayW<::OculusSampleFramework::BoneCapsuleTriggerLogic*>) == 0x8);
    // private System.Single _lastScale
    // Size: 0x4
    // Offset: 0xA0
    float lastScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0xA4
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: capsuleToTrack
    char __padding8[0x3] = {};
    // private OVRBoneCapsule _capsuleToTrack
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::OVRBoneCapsule* capsuleToTrack;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRBoneCapsule*) == 0x8);
    public:
    // static field const value: static private System.Int32 NUM_VELOCITY_FRAMES
    static constexpr const int NUM_VELOCITY_FRAMES = 10;
    // Get static field: static private System.Int32 NUM_VELOCITY_FRAMES
    static int _get_NUM_VELOCITY_FRAMES();
    // Set static field: static private System.Int32 NUM_VELOCITY_FRAMES
    static void _set_NUM_VELOCITY_FRAMES(int value);
    // Get instance field reference: private OculusSampleFramework.FingerTipPokeToolView _fingerTipPokeToolView
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::FingerTipPokeToolView*& dyn__fingerTipPokeToolView();
    // Get instance field reference: private OVRPlugin/HandFinger _fingerToFollow
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandFinger& dyn__fingerToFollow();
    // Get instance field reference: private UnityEngine.Vector3[] _velocityFrames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__velocityFrames();
    // Get instance field reference: private System.Int32 _currVelocityFrame
    [[deprecated("Use field access instead!")]] int& dyn__currVelocityFrame();
    // Get instance field reference: private System.Boolean _sampledMaxFramesAlready
    [[deprecated("Use field access instead!")]] bool& dyn__sampledMaxFramesAlready();
    // Get instance field reference: private UnityEngine.Vector3 _position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: private OculusSampleFramework.BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic
    [[deprecated("Use field access instead!")]] ::ArrayW<::OculusSampleFramework::BoneCapsuleTriggerLogic*>& dyn__boneCapsuleTriggerLogic();
    // Get instance field reference: private System.Single _lastScale
    [[deprecated("Use field access instead!")]] float& dyn__lastScale();
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private OVRBoneCapsule _capsuleToTrack
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRBoneCapsule*& dyn__capsuleToTrack();
    // private System.Collections.IEnumerator AttachTriggerLogic()
    // Offset: 0xCB62C8
    ::System::Collections::IEnumerator* AttachTriggerLogic();
    // private System.Void Update()
    // Offset: 0xCB6364
    void Update();
    // private System.Void UpdateAverageVelocity()
    // Offset: 0xCB6874
    void UpdateAverageVelocity();
    // private System.Void CheckAndUpdateScale()
    // Offset: 0xCB6AEC
    void CheckAndUpdateScale();
    // public override OculusSampleFramework.InteractableToolTags get_ToolTags()
    // Offset: 0xCB5F98
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: OculusSampleFramework.InteractableToolTags InteractableTool::get_ToolTags()
    ::OculusSampleFramework::InteractableToolTags get_ToolTags();
    // public override OculusSampleFramework.ToolInputState get_ToolInputState()
    // Offset: 0xCB5FA0
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: OculusSampleFramework.ToolInputState InteractableTool::get_ToolInputState()
    ::OculusSampleFramework::ToolInputState get_ToolInputState();
    // public override System.Boolean get_IsFarFieldTool()
    // Offset: 0xCB5FA8
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Boolean InteractableTool::get_IsFarFieldTool()
    bool get_IsFarFieldTool();
    // public override System.Boolean get_EnableState()
    // Offset: 0xCB5FB0
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Boolean InteractableTool::get_EnableState()
    bool get_EnableState();
    // public override System.Void set_EnableState(System.Boolean value)
    // Offset: 0xCB5FDC
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Void InteractableTool::set_EnableState(System.Boolean value)
    void set_EnableState(bool value);
    // public System.Void .ctor()
    // Offset: 0xCB6F00
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Void InteractableTool::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerTipPokeTool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::FingerTipPokeTool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerTipPokeTool*, creationType>()));
    }
    // public override System.Void Initialize()
    // Offset: 0xCB6018
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Void InteractableTool::Initialize()
    void Initialize();
    // public override System.Collections.Generic.List`1<OculusSampleFramework.InteractableCollisionInfo> GetNextIntersectingObjects()
    // Offset: 0xCB6C2C
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Collections.Generic.List`1<OculusSampleFramework.InteractableCollisionInfo> InteractableTool::GetNextIntersectingObjects()
    ::System::Collections::Generic::List_1<::OculusSampleFramework::InteractableCollisionInfo*>* GetNextIntersectingObjects();
    // public override System.Void FocusOnInteractable(OculusSampleFramework.Interactable focusedInteractable, OculusSampleFramework.ColliderZone colliderZone)
    // Offset: 0xCB6EF8
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Void InteractableTool::FocusOnInteractable(OculusSampleFramework.Interactable focusedInteractable, OculusSampleFramework.ColliderZone colliderZone)
    void FocusOnInteractable(::OculusSampleFramework::Interactable* focusedInteractable, ::OculusSampleFramework::ColliderZone* colliderZone);
    // public override System.Void DeFocus()
    // Offset: 0xCB6EFC
    // Implemented from: OculusSampleFramework.InteractableTool
    // Base method: System.Void InteractableTool::DeFocus()
    void DeFocus();
  }; // OculusSampleFramework.FingerTipPokeTool
  #pragma pack(pop)
  static check_size<sizeof(FingerTipPokeTool), 168 + sizeof(::GlobalNamespace::OVRBoneCapsule*)> __OculusSampleFramework_FingerTipPokeToolSizeCheck;
  static_assert(sizeof(FingerTipPokeTool) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::AttachTriggerLogic
// Il2CppName: AttachTriggerLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::AttachTriggerLogic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "AttachTriggerLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::UpdateAverageVelocity
// Il2CppName: UpdateAverageVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::UpdateAverageVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "UpdateAverageVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::CheckAndUpdateScale
// Il2CppName: CheckAndUpdateScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::CheckAndUpdateScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "CheckAndUpdateScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::get_ToolTags
// Il2CppName: get_ToolTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::InteractableToolTags (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::get_ToolTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "get_ToolTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::get_ToolInputState
// Il2CppName: get_ToolInputState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::ToolInputState (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::get_ToolInputState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "get_ToolInputState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::get_IsFarFieldTool
// Il2CppName: get_IsFarFieldTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::get_IsFarFieldTool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "get_IsFarFieldTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::get_EnableState
// Il2CppName: get_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::get_EnableState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "get_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::set_EnableState
// Il2CppName: set_EnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)(bool)>(&OculusSampleFramework::FingerTipPokeTool::set_EnableState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "set_EnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::GetNextIntersectingObjects
// Il2CppName: GetNextIntersectingObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::OculusSampleFramework::InteractableCollisionInfo*>* (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::GetNextIntersectingObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "GetNextIntersectingObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::FocusOnInteractable
// Il2CppName: FocusOnInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)(::OculusSampleFramework::Interactable*, ::OculusSampleFramework::ColliderZone*)>(&OculusSampleFramework::FingerTipPokeTool::FocusOnInteractable)> {
  static const MethodInfo* get() {
    static auto* focusedInteractable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    static auto* colliderZone = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "FocusOnInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focusedInteractable, colliderZone});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::FingerTipPokeTool::DeFocus
// Il2CppName: DeFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::FingerTipPokeTool::*)()>(&OculusSampleFramework::FingerTipPokeTool::DeFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::FingerTipPokeTool*), "DeFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
