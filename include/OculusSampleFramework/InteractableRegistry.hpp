// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: Interactable
  class Interactable;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: InteractableRegistry
  class InteractableRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::InteractableRegistry);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::InteractableRegistry*, "OculusSampleFramework", "InteractableRegistry");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.InteractableRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableRegistry : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public System.Collections.Generic.HashSet`1<OculusSampleFramework.Interactable> _interactables
    static ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::Interactable*>* _get__interactables();
    // Set static field: static public System.Collections.Generic.HashSet`1<OculusSampleFramework.Interactable> _interactables
    static void _set__interactables(::System::Collections::Generic::HashSet_1<::OculusSampleFramework::Interactable*>* value);
    // static public System.Collections.Generic.HashSet`1<OculusSampleFramework.Interactable> get_Interactables()
    // Offset: 0xCB9134
    static ::System::Collections::Generic::HashSet_1<::OculusSampleFramework::Interactable*>* get_Interactables();
    // public System.Void .ctor()
    // Offset: 0xCB919C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableRegistry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::InteractableRegistry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableRegistry*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xCB91A4
    static void _cctor();
    // static public System.Void RegisterInteractable(OculusSampleFramework.Interactable interactable)
    // Offset: 0xCB8EF0
    static void RegisterInteractable(::OculusSampleFramework::Interactable* interactable);
    // static public System.Void UnregisterInteractable(OculusSampleFramework.Interactable interactable)
    // Offset: 0xCB901C
    static void UnregisterInteractable(::OculusSampleFramework::Interactable* interactable);
  }; // OculusSampleFramework.InteractableRegistry
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::InteractableRegistry::get_Interactables
// Il2CppName: get_Interactables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::OculusSampleFramework::Interactable*>* (*)()>(&OculusSampleFramework::InteractableRegistry::get_Interactables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableRegistry*), "get_Interactables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableRegistry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::InteractableRegistry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OculusSampleFramework::InteractableRegistry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableRegistry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableRegistry::RegisterInteractable
// Il2CppName: RegisterInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::InteractableRegistry::RegisterInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableRegistry*), "RegisterInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::InteractableRegistry::UnregisterInteractable
// Il2CppName: UnregisterInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::OculusSampleFramework::Interactable*)>(&OculusSampleFramework::InteractableRegistry::UnregisterInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Interactable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::InteractableRegistry*), "UnregisterInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
