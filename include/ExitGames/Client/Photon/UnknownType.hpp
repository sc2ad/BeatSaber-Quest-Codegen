// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: UnknownType
  class UnknownType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::UnknownType);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::UnknownType*, "ExitGames.Client.Photon", "UnknownType");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.UnknownType
  // [TokenAttribute] Offset: FFFFFFFF
  class UnknownType : public ::Il2CppObject {
    public:
    public:
    // public System.Byte TypeCode
    // Size: 0x1
    // Offset: 0x10
    uint8_t TypeCode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: TypeCode and: Size
    char __padding0[0x3] = {};
    // public System.Int32 Size
    // Size: 0x4
    // Offset: 0x14
    int Size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Byte[] Data
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> Data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: public System.Byte TypeCode
    [[deprecated("Use field access instead!")]] uint8_t& dyn_TypeCode();
    // Get instance field reference: public System.Int32 Size
    [[deprecated("Use field access instead!")]] int& dyn_Size();
    // Get instance field reference: public System.Byte[] Data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Data();
    // public System.Void .ctor()
    // Offset: 0x1B72DAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnknownType* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::UnknownType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnknownType*, creationType>()));
    }
  }; // ExitGames.Client.Photon.UnknownType
  #pragma pack(pop)
  static check_size<sizeof(UnknownType), 24 + sizeof(::ArrayW<uint8_t>)> __ExitGames_Client_Photon_UnknownTypeSizeCheck;
  static_assert(sizeof(UnknownType) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::UnknownType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
