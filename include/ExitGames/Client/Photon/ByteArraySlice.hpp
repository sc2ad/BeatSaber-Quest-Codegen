// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: ByteArraySlicePool
  class ByteArraySlicePool;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: ByteArraySlice
  class ByteArraySlice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::ByteArraySlice);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::ByteArraySlice*, "ExitGames.Client.Photon", "ByteArraySlice");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.ByteArraySlice
  // [TokenAttribute] Offset: FFFFFFFF
  class ByteArraySlice : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // public System.Byte[] Buffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> Buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Int32 Offset
    // Size: 0x4
    // Offset: 0x18
    int Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Count
    // Size: 0x4
    // Offset: 0x1C
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly ExitGames.Client.Photon.ByteArraySlicePool returnPool
    // Size: 0x8
    // Offset: 0x20
    ::ExitGames::Client::Photon::ByteArraySlicePool* returnPool;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::ByteArraySlicePool*) == 0x8);
    // private readonly System.Int32 stackIndex
    // Size: 0x4
    // Offset: 0x28
    int stackIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public System.Byte[] Buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Buffer();
    // Get instance field reference: public System.Int32 Offset
    [[deprecated("Use field access instead!")]] int& dyn_Offset();
    // Get instance field reference: public System.Int32 Count
    [[deprecated("Use field access instead!")]] int& dyn_Count();
    // Get instance field reference: private readonly ExitGames.Client.Photon.ByteArraySlicePool returnPool
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ByteArraySlicePool*& dyn_returnPool();
    // Get instance field reference: private readonly System.Int32 stackIndex
    [[deprecated("Use field access instead!")]] int& dyn_stackIndex();
    // System.Void .ctor(ExitGames.Client.Photon.ByteArraySlicePool returnPool, System.Int32 stackIndex)
    // Offset: 0x1128E64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArraySlice* New_ctor(::ExitGames::Client::Photon::ByteArraySlicePool* returnPool, int stackIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArraySlice*, creationType>(returnPool, stackIndex)));
    }
    // public System.Void .ctor(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1128EF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArraySlice* New_ctor(::ArrayW<uint8_t> buffer, int offset, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArraySlice*, creationType>(buffer, offset, count)));
    }
    // public System.Void .ctor()
    // Offset: 0x1128F44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArraySlice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArraySlice*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x1128F74
    void Dispose();
    // public System.Boolean Release()
    // Offset: 0x1128F78
    bool Release();
    // public System.Void Reset()
    // Offset: 0x11291D8
    void Reset();
  }; // ExitGames.Client.Photon.ByteArraySlice
  #pragma pack(pop)
  static check_size<sizeof(ByteArraySlice), 40 + sizeof(int)> __ExitGames_Client_Photon_ByteArraySliceSizeCheck;
  static_assert(sizeof(ByteArraySlice) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::ByteArraySlice::*)()>(&ExitGames::Client::Photon::ByteArraySlice::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::ByteArraySlice::*)()>(&ExitGames::Client::Photon::ByteArraySlice::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlice*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlice::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::ByteArraySlice::*)()>(&ExitGames::Client::Photon::ByteArraySlice::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlice*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
