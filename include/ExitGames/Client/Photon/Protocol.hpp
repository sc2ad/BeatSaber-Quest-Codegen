// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: CustomType
  class CustomType;
  // Forward declaring type: IProtocol
  class IProtocol;
  // Forward declaring type: SerializeMethod
  class SerializeMethod;
  // Forward declaring type: DeserializeMethod
  class DeserializeMethod;
  // Forward declaring type: SerializeStreamMethod
  class SerializeStreamMethod;
  // Forward declaring type: DeserializeStreamMethod
  class DeserializeStreamMethod;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Protocol
  class Protocol;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::Protocol);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::Protocol*, "ExitGames.Client.Photon", "Protocol");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.Protocol
  // [TokenAttribute] Offset: FFFFFFFF
  class Protocol : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.Collections.Generic.Dictionary`2<System.Type,ExitGames.Client.Photon.CustomType> TypeDict
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::ExitGames::Client::Photon::CustomType*>* _get_TypeDict();
    // Set static field: static readonly System.Collections.Generic.Dictionary`2<System.Type,ExitGames.Client.Photon.CustomType> TypeDict
    static void _set_TypeDict(::System::Collections::Generic::Dictionary_2<::System::Type*, ::ExitGames::Client::Photon::CustomType*>* value);
    // Get static field: static readonly System.Collections.Generic.Dictionary`2<System.Byte,ExitGames.Client.Photon.CustomType> CodeDict
    static ::System::Collections::Generic::Dictionary_2<uint8_t, ::ExitGames::Client::Photon::CustomType*>* _get_CodeDict();
    // Set static field: static readonly System.Collections.Generic.Dictionary`2<System.Byte,ExitGames.Client.Photon.CustomType> CodeDict
    static void _set_CodeDict(::System::Collections::Generic::Dictionary_2<uint8_t, ::ExitGames::Client::Photon::CustomType*>* value);
    // Get static field: static private ExitGames.Client.Photon.IProtocol ProtocolDefault
    static ::ExitGames::Client::Photon::IProtocol* _get_ProtocolDefault();
    // Set static field: static private ExitGames.Client.Photon.IProtocol ProtocolDefault
    static void _set_ProtocolDefault(::ExitGames::Client::Photon::IProtocol* value);
    // Get static field: static private readonly System.Single[] memFloatBlock
    static ::ArrayW<float> _get_memFloatBlock();
    // Set static field: static private readonly System.Single[] memFloatBlock
    static void _set_memFloatBlock(::ArrayW<float> value);
    // Get static field: static private readonly System.Byte[] memDeserialize
    static ::ArrayW<uint8_t> _get_memDeserialize();
    // Set static field: static private readonly System.Byte[] memDeserialize
    static void _set_memDeserialize(::ArrayW<uint8_t> value);
    // public System.Void .ctor()
    // Offset: 0x16EC4E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Protocol* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::Protocol::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Protocol*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x16EC4E8
    static void _cctor();
    // static public System.Boolean TryRegisterType(System.Type type, System.Byte typeCode, ExitGames.Client.Photon.SerializeMethod serializeFunction, ExitGames.Client.Photon.DeserializeMethod deserializeFunction)
    // Offset: 0x16EB5E8
    static bool TryRegisterType(::System::Type* type, uint8_t typeCode, ::ExitGames::Client::Photon::SerializeMethod* serializeFunction, ::ExitGames::Client::Photon::DeserializeMethod* deserializeFunction);
    // static public System.Boolean TryRegisterType(System.Type type, System.Byte typeCode, ExitGames.Client.Photon.SerializeStreamMethod serializeFunction, ExitGames.Client.Photon.DeserializeStreamMethod deserializeFunction)
    // Offset: 0x16EB770
    static bool TryRegisterType(::System::Type* type, uint8_t typeCode, ::ExitGames::Client::Photon::SerializeStreamMethod* serializeFunction, ::ExitGames::Client::Photon::DeserializeStreamMethod* deserializeFunction);
    // static public System.Byte[] Serialize(System.Object obj)
    // Offset: 0x16EB8F8
    static ::ArrayW<uint8_t> Serialize(::Il2CppObject* obj);
    // static public System.Object Deserialize(System.Byte[] serializedData)
    // Offset: 0x16EBBC0
    static ::Il2CppObject* Deserialize(::ArrayW<uint8_t> serializedData);
    // static public System.Void Serialize(System.Int16 value, System.Byte[] target, ref System.Int32 targetOffset)
    // Offset: 0x16EBD54
    static void Serialize(int16_t value, ::ArrayW<uint8_t> target, ByRef<int> targetOffset);
    // static public System.Void Serialize(System.Int32 value, System.Byte[] target, ref System.Int32 targetOffset)
    // Offset: 0x16EBDBC
    static void Serialize(int value, ::ArrayW<uint8_t> target, ByRef<int> targetOffset);
    // static public System.Void Serialize(System.Single value, System.Byte[] target, ref System.Int32 targetOffset)
    // Offset: 0x16EBE6C
    static void Serialize(float value, ::ArrayW<uint8_t> target, ByRef<int> targetOffset);
    // static public System.Void Deserialize(out System.Int32 value, System.Byte[] source, ref System.Int32 offset)
    // Offset: 0x16EC0D4
    static void Deserialize(ByRef<int> value, ::ArrayW<uint8_t> source, ByRef<int> offset);
    // static public System.Void Deserialize(out System.Int16 value, System.Byte[] source, ref System.Int32 offset)
    // Offset: 0x16EC180
    static void Deserialize(ByRef<int16_t> value, ::ArrayW<uint8_t> source, ByRef<int> offset);
    // static public System.Void Deserialize(out System.Single value, System.Byte[] source, ref System.Int32 offset)
    // Offset: 0x16EC1E8
    static void Deserialize(ByRef<float> value, ::ArrayW<uint8_t> source, ByRef<int> offset);
  }; // ExitGames.Client.Photon.Protocol
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ExitGames::Client::Photon::Protocol::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::TryRegisterType
// Il2CppName: TryRegisterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, uint8_t, ::ExitGames::Client::Photon::SerializeMethod*, ::ExitGames::Client::Photon::DeserializeMethod*)>(&ExitGames::Client::Photon::Protocol::TryRegisterType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serializeFunction = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializeMethod")->byval_arg;
    static auto* deserializeFunction = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DeserializeMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "TryRegisterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, typeCode, serializeFunction, deserializeFunction});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::TryRegisterType
// Il2CppName: TryRegisterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, uint8_t, ::ExitGames::Client::Photon::SerializeStreamMethod*, ::ExitGames::Client::Photon::DeserializeStreamMethod*)>(&ExitGames::Client::Photon::Protocol::TryRegisterType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serializeFunction = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializeStreamMethod")->byval_arg;
    static auto* deserializeFunction = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DeserializeStreamMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "TryRegisterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, typeCode, serializeFunction, deserializeFunction});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Il2CppObject*)>(&ExitGames::Client::Photon::Protocol::Serialize)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ArrayW<uint8_t>)>(&ExitGames::Client::Photon::Protocol::Deserialize)> {
  static const MethodInfo* get() {
    static auto* serializedData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializedData});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int16_t, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Serialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, target, targetOffset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Serialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, target, targetOffset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Serialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* target = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* targetOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, target, targetOffset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Deserialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, source, offset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int16_t>, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Deserialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->this_arg;
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, source, offset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::Protocol::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<float>, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::Protocol::Deserialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::Protocol*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, source, offset});
  }
};
