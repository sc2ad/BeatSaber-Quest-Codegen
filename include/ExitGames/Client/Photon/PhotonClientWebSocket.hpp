// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.IPhotonSocket
#include "ExitGames/Client/Photon/IPhotonSocket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::WebSockets
namespace System::Net::WebSockets {
  // Forward declaring type: ClientWebSocket
  class ClientWebSocket;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PeerBase
  class PeerBase;
  // Forward declaring type: PhotonSocketError
  struct PhotonSocketError;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonClientWebSocket
  class PhotonClientWebSocket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::PhotonClientWebSocket);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::PhotonClientWebSocket*, "ExitGames.Client.Photon", "PhotonClientWebSocket");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.PhotonClientWebSocket
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonClientWebSocket : public ::ExitGames::Client::Photon::IPhotonSocket {
    public:
    public:
    // private System.Net.WebSockets.ClientWebSocket clientWebSocket
    // Size: 0x8
    // Offset: 0x50
    ::System::Net::WebSockets::ClientWebSocket* clientWebSocket;
    // Field size check
    static_assert(sizeof(::System::Net::WebSockets::ClientWebSocket*) == 0x8);
    // private System.Threading.Tasks.Task sendTask
    // Size: 0x8
    // Offset: 0x58
    ::System::Threading::Tasks::Task* sendTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    public:
    // Get instance field reference: private System.Net.WebSockets.ClientWebSocket clientWebSocket
    [[deprecated("Use field access instead!")]] ::System::Net::WebSockets::ClientWebSocket*& dyn_clientWebSocket();
    // Get instance field reference: private System.Threading.Tasks.Task sendTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn_sendTask();
    // private System.Void AsyncConnectAndReceive()
    // Offset: 0x113D0A4
    void AsyncConnectAndReceive();
    // public System.Void .ctor(ExitGames.Client.Photon.PeerBase peerBase)
    // Offset: 0x113CF3C
    // Implemented from: ExitGames.Client.Photon.IPhotonSocket
    // Base method: System.Void IPhotonSocket::.ctor(ExitGames.Client.Photon.PeerBase peerBase)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonClientWebSocket* New_ctor(::ExitGames::Client::Photon::PeerBase* peerBase) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonClientWebSocket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonClientWebSocket*, creationType>(peerBase)));
    }
    // public override System.Boolean Connect()
    // Offset: 0x113CFD0
    // Implemented from: ExitGames.Client.Photon.IPhotonSocket
    // Base method: System.Boolean IPhotonSocket::Connect()
    bool Connect();
    // public override System.Boolean Disconnect()
    // Offset: 0x113E0FC
    // Implemented from: ExitGames.Client.Photon.IPhotonSocket
    // Base method: System.Boolean IPhotonSocket::Disconnect()
    bool Disconnect();
    // public override ExitGames.Client.Photon.PhotonSocketError Send(System.Byte[] data, System.Int32 length)
    // Offset: 0x113E2BC
    // Implemented from: ExitGames.Client.Photon.IPhotonSocket
    // Base method: ExitGames.Client.Photon.PhotonSocketError IPhotonSocket::Send(System.Byte[] data, System.Int32 length)
    ::ExitGames::Client::Photon::PhotonSocketError Send(::ArrayW<uint8_t> data, int length);
    // public override ExitGames.Client.Photon.PhotonSocketError Receive(out System.Byte[] data)
    // Offset: 0x113E480
    // Implemented from: ExitGames.Client.Photon.IPhotonSocket
    // Base method: ExitGames.Client.Photon.PhotonSocketError IPhotonSocket::Receive(out System.Byte[] data)
    ::ExitGames::Client::Photon::PhotonSocketError Receive(ByRef<::ArrayW<uint8_t>> data);
  }; // ExitGames.Client.Photon.PhotonClientWebSocket
  #pragma pack(pop)
  static check_size<sizeof(PhotonClientWebSocket), 88 + sizeof(::System::Threading::Tasks::Task*)> __ExitGames_Client_Photon_PhotonClientWebSocketSizeCheck;
  static_assert(sizeof(PhotonClientWebSocket) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::AsyncConnectAndReceive
// Il2CppName: AsyncConnectAndReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonClientWebSocket::*)()>(&ExitGames::Client::Photon::PhotonClientWebSocket::AsyncConnectAndReceive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonClientWebSocket*), "AsyncConnectAndReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonClientWebSocket::*)()>(&ExitGames::Client::Photon::PhotonClientWebSocket::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonClientWebSocket*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonClientWebSocket::*)()>(&ExitGames::Client::Photon::PhotonClientWebSocket::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonClientWebSocket*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::PhotonSocketError (ExitGames::Client::Photon::PhotonClientWebSocket::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::PhotonClientWebSocket::Send)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonClientWebSocket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonClientWebSocket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::PhotonSocketError (ExitGames::Client::Photon::PhotonClientWebSocket::*)(ByRef<::ArrayW<uint8_t>>)>(&ExitGames::Client::Photon::PhotonClientWebSocket::Receive)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonClientWebSocket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
