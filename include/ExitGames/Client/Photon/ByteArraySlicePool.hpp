// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: ByteArraySlice
  class ByteArraySlice;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: ByteArraySlicePool
  class ByteArraySlicePool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::ByteArraySlicePool);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::ByteArraySlicePool*, "ExitGames.Client.Photon", "ByteArraySlicePool");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.ByteArraySlicePool
  // [TokenAttribute] Offset: FFFFFFFF
  class ByteArraySlicePool : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 minStackIndex
    // Size: 0x4
    // Offset: 0x10
    int minStackIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: minStackIndex and: poolTiers
    char __padding0[0x4] = {};
    // readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.ByteArraySlice>[] poolTiers
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*> poolTiers;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*>) == 0x8);
    // private System.Int32 allocationCounter
    // Size: 0x4
    // Offset: 0x20
    int allocationCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 minStackIndex
    [[deprecated("Use field access instead!")]] int& dyn_minStackIndex();
    // Get instance field reference: readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.ByteArraySlice>[] poolTiers
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*>& dyn_poolTiers();
    // Get instance field reference: private System.Int32 allocationCounter
    [[deprecated("Use field access instead!")]] int& dyn_allocationCounter();
    // public System.Int32 get_MinStackIndex()
    // Offset: 0x11291E0
    int get_MinStackIndex();
    // public System.Void set_MinStackIndex(System.Int32 value)
    // Offset: 0x11291E8
    void set_MinStackIndex(int value);
    // public System.Int32 get_AllocationCounter()
    // Offset: 0x1129214
    int get_AllocationCounter();
    // public System.Void .ctor()
    // Offset: 0x112921C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArraySlicePool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::ByteArraySlicePool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArraySlicePool*, creationType>()));
    }
    // public ExitGames.Client.Photon.ByteArraySlice Acquire(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1129374
    ::ExitGames::Client::Photon::ByteArraySlice* Acquire(::ArrayW<uint8_t> buffer, int offset, int count);
    // public ExitGames.Client.Photon.ByteArraySlice Acquire(System.Int32 minByteCount)
    // Offset: 0x11296D4
    ::ExitGames::Client::Photon::ByteArraySlice* Acquire(int minByteCount);
    // private ExitGames.Client.Photon.ByteArraySlice PopOrCreate(System.Collections.Generic.Stack`1<ExitGames.Client.Photon.ByteArraySlice> stack, System.Int32 stackIndex)
    // Offset: 0x1129564
    ::ExitGames::Client::Photon::ByteArraySlice* PopOrCreate(::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>* stack, int stackIndex);
    // System.Boolean Release(ExitGames.Client.Photon.ByteArraySlice slice, System.Int32 stackIndex)
    // Offset: 0x1128FA8
    bool Release(::ExitGames::Client::Photon::ByteArraySlice* slice, int stackIndex);
    // public System.Void ClearPools(System.Int32 lower, System.Int32 upper)
    // Offset: 0x11299CC
    void ClearPools(int lower, int upper);
  }; // ExitGames.Client.Photon.ByteArraySlicePool
  #pragma pack(pop)
  static check_size<sizeof(ByteArraySlicePool), 32 + sizeof(int)> __ExitGames_Client_Photon_ByteArraySlicePoolSizeCheck;
  static_assert(sizeof(ByteArraySlicePool) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::get_MinStackIndex
// Il2CppName: get_MinStackIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::ByteArraySlicePool::*)()>(&ExitGames::Client::Photon::ByteArraySlicePool::get_MinStackIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "get_MinStackIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::set_MinStackIndex
// Il2CppName: set_MinStackIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::ByteArraySlicePool::*)(int)>(&ExitGames::Client::Photon::ByteArraySlicePool::set_MinStackIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "set_MinStackIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::get_AllocationCounter
// Il2CppName: get_AllocationCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::ByteArraySlicePool::*)()>(&ExitGames::Client::Photon::ByteArraySlicePool::get_AllocationCounter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "get_AllocationCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ByteArraySlice* (ExitGames::Client::Photon::ByteArraySlicePool::*)(::ArrayW<uint8_t>, int, int)>(&ExitGames::Client::Photon::ByteArraySlicePool::Acquire)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ByteArraySlice* (ExitGames::Client::Photon::ByteArraySlicePool::*)(int)>(&ExitGames::Client::Photon::ByteArraySlicePool::Acquire)> {
  static const MethodInfo* get() {
    static auto* minByteCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minByteCount});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::PopOrCreate
// Il2CppName: PopOrCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ByteArraySlice* (ExitGames::Client::Photon::ByteArraySlicePool::*)(::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::ByteArraySlice*>*, int)>(&ExitGames::Client::Photon::ByteArraySlicePool::PopOrCreate)> {
  static const MethodInfo* get() {
    static auto* stack = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Stack`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ByteArraySlice")})->byval_arg;
    static auto* stackIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "PopOrCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stack, stackIndex});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::ByteArraySlicePool::*)(::ExitGames::Client::Photon::ByteArraySlice*, int)>(&ExitGames::Client::Photon::ByteArraySlicePool::Release)> {
  static const MethodInfo* get() {
    static auto* slice = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ByteArraySlice")->byval_arg;
    static auto* stackIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slice, stackIndex});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::ByteArraySlicePool::ClearPools
// Il2CppName: ClearPools
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::ByteArraySlicePool::*)(int, int)>(&ExitGames::Client::Photon::ByteArraySlicePool::ClearPools)> {
  static const MethodInfo* get() {
    static auto* lower = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* upper = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::ByteArraySlicePool*), "ClearPools", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lower, upper});
  }
};
