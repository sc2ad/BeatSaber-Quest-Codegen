// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonSocketError
  struct PhotonSocketError;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::PhotonSocketError, "ExitGames.Client.Photon", "PhotonSocketError");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.PhotonSocketError
  // [TokenAttribute] Offset: FFFFFFFF
  struct PhotonSocketError/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PhotonSocketError
    constexpr PhotonSocketError(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ExitGames.Client.Photon.PhotonSocketError Success
    static constexpr const int Success = 0;
    // Get static field: static public ExitGames.Client.Photon.PhotonSocketError Success
    static ::ExitGames::Client::Photon::PhotonSocketError _get_Success();
    // Set static field: static public ExitGames.Client.Photon.PhotonSocketError Success
    static void _set_Success(::ExitGames::Client::Photon::PhotonSocketError value);
    // static field const value: static public ExitGames.Client.Photon.PhotonSocketError Skipped
    static constexpr const int Skipped = 1;
    // Get static field: static public ExitGames.Client.Photon.PhotonSocketError Skipped
    static ::ExitGames::Client::Photon::PhotonSocketError _get_Skipped();
    // Set static field: static public ExitGames.Client.Photon.PhotonSocketError Skipped
    static void _set_Skipped(::ExitGames::Client::Photon::PhotonSocketError value);
    // static field const value: static public ExitGames.Client.Photon.PhotonSocketError NoData
    static constexpr const int NoData = 2;
    // Get static field: static public ExitGames.Client.Photon.PhotonSocketError NoData
    static ::ExitGames::Client::Photon::PhotonSocketError _get_NoData();
    // Set static field: static public ExitGames.Client.Photon.PhotonSocketError NoData
    static void _set_NoData(::ExitGames::Client::Photon::PhotonSocketError value);
    // static field const value: static public ExitGames.Client.Photon.PhotonSocketError Exception
    static constexpr const int Exception = 3;
    // Get static field: static public ExitGames.Client.Photon.PhotonSocketError Exception
    static ::ExitGames::Client::Photon::PhotonSocketError _get_Exception();
    // Set static field: static public ExitGames.Client.Photon.PhotonSocketError Exception
    static void _set_Exception(::ExitGames::Client::Photon::PhotonSocketError value);
    // static field const value: static public ExitGames.Client.Photon.PhotonSocketError Busy
    static constexpr const int Busy = 4;
    // Get static field: static public ExitGames.Client.Photon.PhotonSocketError Busy
    static ::ExitGames::Client::Photon::PhotonSocketError _get_Busy();
    // Set static field: static public ExitGames.Client.Photon.PhotonSocketError Busy
    static void _set_Busy(::ExitGames::Client::Photon::PhotonSocketError value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ExitGames.Client.Photon.PhotonSocketError
  #pragma pack(pop)
  static check_size<sizeof(PhotonSocketError), 0 + sizeof(int)> __ExitGames_Client_Photon_PhotonSocketErrorSizeCheck;
  static_assert(sizeof(PhotonSocketError) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
