// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.PeerBase
#include "ExitGames/Client/Photon/PeerBase.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Int16
#include "System/Int16.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: NCommandPool
  class NCommandPool;
  // Forward declaring type: NCommand
  class NCommand;
  // Forward declaring type: StreamBuffer
  class StreamBuffer;
  // Forward declaring type: EnetChannel
  class EnetChannel;
  // Forward declaring type: SendOptions
  struct SendOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EnetPeer
  class EnetPeer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::EnetPeer);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::EnetPeer*, "ExitGames.Client.Photon", "EnetPeer");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x1A8
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.EnetPeer
  // [TokenAttribute] Offset: FFFFFFFF
  class EnetPeer : public ::ExitGames::Client::Photon::PeerBase {
    public:
    // Writing base type padding for base size: 0x11C to desired offset: 0x120
    char ___base_padding[0x4] = {};
    public:
    // ExitGames.Client.Photon.NCommandPool nCommandPool
    // Size: 0x8
    // Offset: 0x120
    ::ExitGames::Client::Photon::NCommandPool* nCommandPool;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::NCommandPool*) == 0x8);
    // private System.Collections.Generic.List`1<ExitGames.Client.Photon.NCommand> sentReliableCommands
    // Size: 0x8
    // Offset: 0x128
    ::System::Collections::Generic::List_1<::ExitGames::Client::Photon::NCommand*>* sentReliableCommands;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ExitGames::Client::Photon::NCommand*>*) == 0x8);
    // private ExitGames.Client.Photon.StreamBuffer outgoingAcknowledgementsPool
    // Size: 0x8
    // Offset: 0x130
    ::ExitGames::Client::Photon::StreamBuffer* outgoingAcknowledgementsPool;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::StreamBuffer*) == 0x8);
    // readonly System.Int32[] unsequencedWindow
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<int> unsequencedWindow;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 outgoingUnsequencedGroupNumber
    // Size: 0x4
    // Offset: 0x140
    int outgoingUnsequencedGroupNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 incomingUnsequencedGroupNumber
    // Size: 0x4
    // Offset: 0x144
    int incomingUnsequencedGroupNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte udpCommandCount
    // Size: 0x1
    // Offset: 0x148
    uint8_t udpCommandCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: udpCommandCount and: udpBuffer
    char __padding6[0x7] = {};
    // private System.Byte[] udpBuffer
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<uint8_t> udpBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 udpBufferIndex
    // Size: 0x4
    // Offset: 0x158
    int udpBufferIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: udpBufferIndex and: bufferForEncryption
    char __padding8[0x4] = {};
    // private System.Byte[] bufferForEncryption
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<uint8_t> bufferForEncryption;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 commandBufferSize
    // Size: 0x4
    // Offset: 0x168
    int commandBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 challenge
    // Size: 0x4
    // Offset: 0x16C
    int challenge;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 reliableCommandsRepeated
    // Size: 0x4
    // Offset: 0x170
    int reliableCommandsRepeated;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 reliableCommandsSent
    // Size: 0x4
    // Offset: 0x174
    int reliableCommandsSent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 serverSentTime
    // Size: 0x4
    // Offset: 0x178
    int serverSentTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean datagramEncryptedConnection
    // Size: 0x1
    // Offset: 0x17C
    bool datagramEncryptedConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: datagramEncryptedConnection and: channelArray
    char __padding15[0x3] = {};
    // private ExitGames.Client.Photon.EnetChannel[] channelArray
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::ExitGames::Client::Photon::EnetChannel*> channelArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::ExitGames::Client::Photon::EnetChannel*>) == 0x8);
    // private System.Collections.Generic.Queue`1<System.Int32> commandsToRemove
    // Size: 0x8
    // Offset: 0x188
    ::System::Collections::Generic::Queue_1<int>* commandsToRemove;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<int>*) == 0x8);
    // private System.Int32 fragmentLength
    // Size: 0x4
    // Offset: 0x190
    int fragmentLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 fragmentLengthDatagramEncrypt
    // Size: 0x4
    // Offset: 0x194
    int fragmentLengthDatagramEncrypt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 fragmentLengthMtuValue
    // Size: 0x4
    // Offset: 0x198
    int fragmentLengthMtuValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: fragmentLengthMtuValue and: CommandQueue
    char __padding20[0x4] = {};
    // private System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> CommandQueue
    // Size: 0x8
    // Offset: 0x1A0
    ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>* CommandQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*) == 0x8);
    public:
    // static field const value: static private System.Int32 CRC_LENGTH
    static constexpr const int CRC_LENGTH = 4;
    // Get static field: static private System.Int32 CRC_LENGTH
    static int _get_CRC_LENGTH();
    // Set static field: static private System.Int32 CRC_LENGTH
    static void _set_CRC_LENGTH(int value);
    // static field const value: static private System.Int32 EncryptedDataGramHeaderSize
    static constexpr const int EncryptedDataGramHeaderSize = 7;
    // Get static field: static private System.Int32 EncryptedDataGramHeaderSize
    static int _get_EncryptedDataGramHeaderSize();
    // Set static field: static private System.Int32 EncryptedDataGramHeaderSize
    static void _set_EncryptedDataGramHeaderSize(int value);
    // static field const value: static private System.Int32 EncryptedHeaderSize
    static constexpr const int EncryptedHeaderSize = 5;
    // Get static field: static private System.Int32 EncryptedHeaderSize
    static int _get_EncryptedHeaderSize();
    // Set static field: static private System.Int32 EncryptedHeaderSize
    static void _set_EncryptedHeaderSize(int value);
    // static field const value: static private System.Int32 QUICK_RESEND_QUEUELIMIT
    static constexpr const int QUICK_RESEND_QUEUELIMIT = 25;
    // Get static field: static private System.Int32 QUICK_RESEND_QUEUELIMIT
    static int _get_QUICK_RESEND_QUEUELIMIT();
    // Set static field: static private System.Int32 QUICK_RESEND_QUEUELIMIT
    static void _set_QUICK_RESEND_QUEUELIMIT(int value);
    // static field const value: static System.Int32 UnsequencedWindowSize
    static constexpr const int UnsequencedWindowSize = 128;
    // Get static field: static System.Int32 UnsequencedWindowSize
    static int _get_UnsequencedWindowSize();
    // Set static field: static System.Int32 UnsequencedWindowSize
    static void _set_UnsequencedWindowSize(int value);
    // Get static field: static readonly System.Byte[] udpHeader0xF3
    static ::ArrayW<uint8_t> _get_udpHeader0xF3();
    // Set static field: static readonly System.Byte[] udpHeader0xF3
    static void _set_udpHeader0xF3(::ArrayW<uint8_t> value);
    // static field const value: static private System.Byte ControlChannelNumber
    static constexpr const uint8_t ControlChannelNumber = 255u;
    // Get static field: static private System.Byte ControlChannelNumber
    static uint8_t _get_ControlChannelNumber();
    // Set static field: static private System.Byte ControlChannelNumber
    static void _set_ControlChannelNumber(uint8_t value);
    // static field const value: static protected internal System.Int16 PeerIdForConnect
    static constexpr const int16_t PeerIdForConnect = -1;
    // Get static field: static protected internal System.Int16 PeerIdForConnect
    static int16_t _get_PeerIdForConnect();
    // Set static field: static protected internal System.Int16 PeerIdForConnect
    static void _set_PeerIdForConnect(int16_t value);
    // static field const value: static protected internal System.Int16 PeerIdForConnectTrace
    static constexpr const int16_t PeerIdForConnectTrace = -2;
    // Get static field: static protected internal System.Int16 PeerIdForConnectTrace
    static int16_t _get_PeerIdForConnectTrace();
    // Set static field: static protected internal System.Int16 PeerIdForConnectTrace
    static void _set_PeerIdForConnectTrace(int16_t value);
    // Get instance field reference: ExitGames.Client.Photon.NCommandPool nCommandPool
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NCommandPool*& dyn_nCommandPool();
    // Get instance field reference: private System.Collections.Generic.List`1<ExitGames.Client.Photon.NCommand> sentReliableCommands
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ExitGames::Client::Photon::NCommand*>*& dyn_sentReliableCommands();
    // Get instance field reference: private ExitGames.Client.Photon.StreamBuffer outgoingAcknowledgementsPool
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::StreamBuffer*& dyn_outgoingAcknowledgementsPool();
    // Get instance field reference: readonly System.Int32[] unsequencedWindow
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_unsequencedWindow();
    // Get instance field reference: System.Int32 outgoingUnsequencedGroupNumber
    [[deprecated("Use field access instead!")]] int& dyn_outgoingUnsequencedGroupNumber();
    // Get instance field reference: System.Int32 incomingUnsequencedGroupNumber
    [[deprecated("Use field access instead!")]] int& dyn_incomingUnsequencedGroupNumber();
    // Get instance field reference: private System.Byte udpCommandCount
    [[deprecated("Use field access instead!")]] uint8_t& dyn_udpCommandCount();
    // Get instance field reference: private System.Byte[] udpBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_udpBuffer();
    // Get instance field reference: private System.Int32 udpBufferIndex
    [[deprecated("Use field access instead!")]] int& dyn_udpBufferIndex();
    // Get instance field reference: private System.Byte[] bufferForEncryption
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_bufferForEncryption();
    // Get instance field reference: private System.Int32 commandBufferSize
    [[deprecated("Use field access instead!")]] int& dyn_commandBufferSize();
    // Get instance field reference: System.Int32 challenge
    [[deprecated("Use field access instead!")]] int& dyn_challenge();
    // Get instance field reference: System.Int32 reliableCommandsRepeated
    [[deprecated("Use field access instead!")]] int& dyn_reliableCommandsRepeated();
    // Get instance field reference: System.Int32 reliableCommandsSent
    [[deprecated("Use field access instead!")]] int& dyn_reliableCommandsSent();
    // Get instance field reference: System.Int32 serverSentTime
    [[deprecated("Use field access instead!")]] int& dyn_serverSentTime();
    // Get instance field reference: protected System.Boolean datagramEncryptedConnection
    [[deprecated("Use field access instead!")]] bool& dyn_datagramEncryptedConnection();
    // Get instance field reference: private ExitGames.Client.Photon.EnetChannel[] channelArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::ExitGames::Client::Photon::EnetChannel*>& dyn_channelArray();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Int32> commandsToRemove
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<int>*& dyn_commandsToRemove();
    // Get instance field reference: private System.Int32 fragmentLength
    [[deprecated("Use field access instead!")]] int& dyn_fragmentLength();
    // Get instance field reference: private System.Int32 fragmentLengthDatagramEncrypt
    [[deprecated("Use field access instead!")]] int& dyn_fragmentLengthDatagramEncrypt();
    // Get instance field reference: private System.Int32 fragmentLengthMtuValue
    [[deprecated("Use field access instead!")]] int& dyn_fragmentLengthMtuValue();
    // Get instance field reference: private System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> CommandQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*& dyn_CommandQueue();
    // System.Void ApplyRandomizedSequenceNumbers()
    // Offset: 0x112BEA4
    void ApplyRandomizedSequenceNumbers();
    // private ExitGames.Client.Photon.EnetChannel GetChannel(System.Byte channelNumber)
    // Offset: 0x112C044
    ::ExitGames::Client::Photon::EnetChannel* GetChannel(uint8_t channelNumber);
    // private System.Int32 GetFragmentLength()
    // Offset: 0x112ED90
    int GetFragmentLength();
    // private System.Int32 CalculatePacketSize(System.Int32 inSize)
    // Offset: 0x112EEAC
    int CalculatePacketSize(int inSize);
    // private System.Int32 CalculateInitialOffset()
    // Offset: 0x112EF98
    int CalculateInitialOffset();
    // System.Boolean CreateAndEnqueueCommand(System.Byte commandType, ExitGames.Client.Photon.StreamBuffer payload, System.Byte channelNumber)
    // Offset: 0x112D238
    bool CreateAndEnqueueCommand(uint8_t commandType, ::ExitGames::Client::Photon::StreamBuffer* payload, uint8_t channelNumber);
    // System.Int32 SerializeAckToBuffer()
    // Offset: 0x112F904
    int SerializeAckToBuffer();
    // System.Int32 SerializeToBuffer(System.Collections.Generic.Queue`1<ExitGames.Client.Photon.NCommand> commandList)
    // Offset: 0x1131110
    int SerializeToBuffer(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>* commandList);
    // private System.Boolean SerializeCommandToBuffer(ExitGames.Client.Photon.NCommand command, System.Boolean commandIsInSentQueue)
    // Offset: 0x112FB84
    bool SerializeCommandToBuffer(::ExitGames::Client::Photon::NCommand* command, bool commandIsInSentQueue);
    // System.Void SendData(System.Byte[] data, System.Int32 length)
    // Offset: 0x112FCCC
    void SendData(::ArrayW<uint8_t> data, int length);
    // private System.Void SendToSocket(System.Byte[] data, System.Int32 length)
    // Offset: 0x1131E44
    void SendToSocket(::ArrayW<uint8_t> data, int length);
    // private System.Void SendDataEncrypted(System.Byte[] data, System.Int32 length)
    // Offset: 0x1131C1C
    void SendDataEncrypted(::ArrayW<uint8_t> data, int length);
    // System.Void QueueSentCommand(ExitGames.Client.Photon.NCommand command, System.Boolean commandIsAlreadyInSentQueue)
    // Offset: 0x1131A20
    void QueueSentCommand(::ExitGames::Client::Photon::NCommand* command, bool commandIsAlreadyInSentQueue);
    // System.Void QueueOutgoingReliableCommand(ExitGames.Client.Photon.NCommand command)
    // Offset: 0x112C338
    void QueueOutgoingReliableCommand(::ExitGames::Client::Photon::NCommand* command);
    // System.Void QueueOutgoingUnreliableCommand(ExitGames.Client.Photon.NCommand command)
    // Offset: 0x1131324
    void QueueOutgoingUnreliableCommand(::ExitGames::Client::Photon::NCommand* command);
    // System.Void QueueOutgoingAcknowledgement(ExitGames.Client.Photon.NCommand readCommand, System.Int32 sendTime)
    // Offset: 0x1132364
    void QueueOutgoingAcknowledgement(::ExitGames::Client::Photon::NCommand* readCommand, int sendTime);
    // System.Void ExecuteCommand(ExitGames.Client.Photon.NCommand command)
    // Offset: 0x112DE70
    void ExecuteCommand(::ExitGames::Client::Photon::NCommand* command);
    // System.Boolean QueueIncomingCommand(ExitGames.Client.Photon.NCommand command)
    // Offset: 0x113363C
    bool QueueIncomingCommand(::ExitGames::Client::Photon::NCommand* command);
    // ExitGames.Client.Photon.NCommand RemoveSentReliableCommand(System.Int32 ackReceivedReliableSequenceNumber, System.Int32 ackReceivedChannel, System.Boolean isUnsequenced)
    // Offset: 0x11331C8
    ::ExitGames::Client::Photon::NCommand* RemoveSentReliableCommand(int ackReceivedReliableSequenceNumber, int ackReceivedChannel, bool isUnsequenced);
    // System.String CommandListToString(ExitGames.Client.Photon.NCommand[] list)
    // Offset: 0x11344F4
    ::StringW CommandListToString(::ArrayW<::ExitGames::Client::Photon::NCommand*> list);
    // private System.Void <ExecuteCommand>b__66_0()
    // Offset: 0x11346EC
    void $ExecuteCommand$b__66_0();
    // override System.Int32 get_QueuedIncomingCommandsCount()
    // Offset: 0x112B0BC
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Int32 PeerBase::get_QueuedIncomingCommandsCount()
    int get_QueuedIncomingCommandsCount();
    // override System.Int32 get_QueuedOutgoingCommandsCount()
    // Offset: 0x112B238
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Int32 PeerBase::get_QueuedOutgoingCommandsCount()
    int get_QueuedOutgoingCommandsCount();
    // override System.Int32 get_SentReliableCommandsCount()
    // Offset: 0x112B46C
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Int32 PeerBase::get_SentReliableCommandsCount()
    int get_SentReliableCommandsCount();
    // System.Void .ctor()
    // Offset: 0x112B4BC
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnetPeer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::EnetPeer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnetPeer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1134654
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::.cctor()
    static void _cctor();
    // override System.Boolean IsTransportEncrypted()
    // Offset: 0x112B810
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::IsTransportEncrypted()
    bool IsTransportEncrypted();
    // override System.Void Reset()
    // Offset: 0x112B818
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::Reset()
    void Reset();
    // override System.Boolean Connect(System.String ipport, System.String proxyServerAddress, System.String appID, System.Object photonToken)
    // Offset: 0x112C0B0
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::Connect(System.String ipport, System.String proxyServerAddress, System.String appID, System.Object photonToken)
    bool Connect(::StringW ipport, ::StringW proxyServerAddress, ::StringW appID, ::Il2CppObject* photonToken);
    // public override System.Void OnConnect()
    // Offset: 0x112C170
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::OnConnect()
    void OnConnect();
    // override System.Void Disconnect()
    // Offset: 0x112C47C
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::Disconnect()
    void Disconnect();
    // override System.Void StopConnection()
    // Offset: 0x112CED0
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::StopConnection()
    void StopConnection();
    // override System.Void FetchServerTimestamp()
    // Offset: 0x112CFD0
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::FetchServerTimestamp()
    void FetchServerTimestamp();
    // override System.Boolean DispatchIncomingCommands()
    // Offset: 0x112D5CC
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::DispatchIncomingCommands()
    bool DispatchIncomingCommands();
    // override System.Boolean SendAcksOnly()
    // Offset: 0x112EFDC
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::SendAcksOnly()
    bool SendAcksOnly();
    // override System.Boolean SendOutgoingCommands()
    // Offset: 0x1130058
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::SendOutgoingCommands()
    bool SendOutgoingCommands();
    // override System.Boolean EnqueuePhotonMessage(ExitGames.Client.Photon.StreamBuffer opBytes, ExitGames.Client.Photon.SendOptions sendParams)
    // Offset: 0x11312AC
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Boolean PeerBase::EnqueuePhotonMessage(ExitGames.Client.Photon.StreamBuffer opBytes, ExitGames.Client.Photon.SendOptions sendParams)
    bool EnqueuePhotonMessage(::ExitGames::Client::Photon::StreamBuffer* opBytes, ::ExitGames::Client::Photon::SendOptions sendParams);
    // override System.Void ReceiveIncomingCommands(System.Byte[] inBuff, System.Int32 inDataLength)
    // Offset: 0x11325B0
    // Implemented from: ExitGames.Client.Photon.PeerBase
    // Base method: System.Void PeerBase::ReceiveIncomingCommands(System.Byte[] inBuff, System.Int32 inDataLength)
    void ReceiveIncomingCommands(::ArrayW<uint8_t> inBuff, int inDataLength);
  }; // ExitGames.Client.Photon.EnetPeer
  #pragma pack(pop)
  static check_size<sizeof(EnetPeer), 416 + sizeof(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*)> __ExitGames_Client_Photon_EnetPeerSizeCheck;
  static_assert(sizeof(EnetPeer) == 0x1A8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::ApplyRandomizedSequenceNumbers
// Il2CppName: ApplyRandomizedSequenceNumbers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::ApplyRandomizedSequenceNumbers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "ApplyRandomizedSequenceNumbers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::GetChannel
// Il2CppName: GetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::EnetChannel* (ExitGames::Client::Photon::EnetPeer::*)(uint8_t)>(&ExitGames::Client::Photon::EnetPeer::GetChannel)> {
  static const MethodInfo* get() {
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "GetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelNumber});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::GetFragmentLength
// Il2CppName: GetFragmentLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::GetFragmentLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "GetFragmentLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::CalculatePacketSize
// Il2CppName: CalculatePacketSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)(int)>(&ExitGames::Client::Photon::EnetPeer::CalculatePacketSize)> {
  static const MethodInfo* get() {
    static auto* inSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "CalculatePacketSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inSize});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::CalculateInitialOffset
// Il2CppName: CalculateInitialOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::CalculateInitialOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "CalculateInitialOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::CreateAndEnqueueCommand
// Il2CppName: CreateAndEnqueueCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)(uint8_t, ::ExitGames::Client::Photon::StreamBuffer*, uint8_t)>(&ExitGames::Client::Photon::EnetPeer::CreateAndEnqueueCommand)> {
  static const MethodInfo* get() {
    static auto* commandType = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* payload = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "CreateAndEnqueueCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandType, payload, channelNumber});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SerializeAckToBuffer
// Il2CppName: SerializeAckToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::SerializeAckToBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SerializeAckToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SerializeToBuffer
// Il2CppName: SerializeToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::NCommand*>*)>(&ExitGames::Client::Photon::EnetPeer::SerializeToBuffer)> {
  static const MethodInfo* get() {
    static auto* commandList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Queue`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SerializeToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandList});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SerializeCommandToBuffer
// Il2CppName: SerializeCommandToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*, bool)>(&ExitGames::Client::Photon::EnetPeer::SerializeCommandToBuffer)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    static auto* commandIsInSentQueue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SerializeCommandToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, commandIsInSentQueue});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SendData
// Il2CppName: SendData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::EnetPeer::SendData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SendData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SendToSocket
// Il2CppName: SendToSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::EnetPeer::SendToSocket)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SendToSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SendDataEncrypted
// Il2CppName: SendDataEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::EnetPeer::SendDataEncrypted)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SendDataEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::QueueSentCommand
// Il2CppName: QueueSentCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*, bool)>(&ExitGames::Client::Photon::EnetPeer::QueueSentCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    static auto* commandIsAlreadyInSentQueue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "QueueSentCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command, commandIsAlreadyInSentQueue});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::QueueOutgoingReliableCommand
// Il2CppName: QueueOutgoingReliableCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*)>(&ExitGames::Client::Photon::EnetPeer::QueueOutgoingReliableCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "QueueOutgoingReliableCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::QueueOutgoingUnreliableCommand
// Il2CppName: QueueOutgoingUnreliableCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*)>(&ExitGames::Client::Photon::EnetPeer::QueueOutgoingUnreliableCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "QueueOutgoingUnreliableCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::QueueOutgoingAcknowledgement
// Il2CppName: QueueOutgoingAcknowledgement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*, int)>(&ExitGames::Client::Photon::EnetPeer::QueueOutgoingAcknowledgement)> {
  static const MethodInfo* get() {
    static auto* readCommand = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    static auto* sendTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "QueueOutgoingAcknowledgement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readCommand, sendTime});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::ExecuteCommand
// Il2CppName: ExecuteCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*)>(&ExitGames::Client::Photon::EnetPeer::ExecuteCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "ExecuteCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::QueueIncomingCommand
// Il2CppName: QueueIncomingCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::NCommand*)>(&ExitGames::Client::Photon::EnetPeer::QueueIncomingCommand)> {
  static const MethodInfo* get() {
    static auto* command = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "QueueIncomingCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{command});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::RemoveSentReliableCommand
// Il2CppName: RemoveSentReliableCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::NCommand* (ExitGames::Client::Photon::EnetPeer::*)(int, int, bool)>(&ExitGames::Client::Photon::EnetPeer::RemoveSentReliableCommand)> {
  static const MethodInfo* get() {
    static auto* ackReceivedReliableSequenceNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ackReceivedChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isUnsequenced = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "RemoveSentReliableCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ackReceivedReliableSequenceNumber, ackReceivedChannel, isUnsequenced});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::CommandListToString
// Il2CppName: CommandListToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::EnetPeer::*)(::ArrayW<::ExitGames::Client::Photon::NCommand*>)>(&ExitGames::Client::Photon::EnetPeer::CommandListToString)> {
  static const MethodInfo* get() {
    static auto* list = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "CommandListToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::$ExecuteCommand$b__66_0
// Il2CppName: <ExecuteCommand>b__66_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::$ExecuteCommand$b__66_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "<ExecuteCommand>b__66_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::get_QueuedIncomingCommandsCount
// Il2CppName: get_QueuedIncomingCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::get_QueuedIncomingCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "get_QueuedIncomingCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::get_QueuedOutgoingCommandsCount
// Il2CppName: get_QueuedOutgoingCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::get_QueuedOutgoingCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "get_QueuedOutgoingCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::get_SentReliableCommandsCount
// Il2CppName: get_SentReliableCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::get_SentReliableCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "get_SentReliableCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ExitGames::Client::Photon::EnetPeer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::IsTransportEncrypted
// Il2CppName: IsTransportEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::IsTransportEncrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "IsTransportEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)(::StringW, ::StringW, ::StringW, ::Il2CppObject*)>(&ExitGames::Client::Photon::EnetPeer::Connect)> {
  static const MethodInfo* get() {
    static auto* ipport = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* proxyServerAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonToken = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ipport, proxyServerAddress, appID, photonToken});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::OnConnect
// Il2CppName: OnConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::OnConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "OnConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::StopConnection
// Il2CppName: StopConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::StopConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "StopConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::FetchServerTimestamp
// Il2CppName: FetchServerTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::FetchServerTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "FetchServerTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::DispatchIncomingCommands
// Il2CppName: DispatchIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::DispatchIncomingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "DispatchIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SendAcksOnly
// Il2CppName: SendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::SendAcksOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::SendOutgoingCommands
// Il2CppName: SendOutgoingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)()>(&ExitGames::Client::Photon::EnetPeer::SendOutgoingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "SendOutgoingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::EnqueuePhotonMessage
// Il2CppName: EnqueuePhotonMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::EnetPeer::*)(::ExitGames::Client::Photon::StreamBuffer*, ::ExitGames::Client::Photon::SendOptions)>(&ExitGames::Client::Photon::EnetPeer::EnqueuePhotonMessage)> {
  static const MethodInfo* get() {
    static auto* opBytes = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* sendParams = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "EnqueuePhotonMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opBytes, sendParams});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::EnetPeer::ReceiveIncomingCommands
// Il2CppName: ReceiveIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::EnetPeer::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::EnetPeer::ReceiveIncomingCommands)> {
  static const MethodInfo* get() {
    static auto* inBuff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* inDataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::EnetPeer*), "ReceiveIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inBuff, inDataLength});
  }
};
