// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: DebugLevel
  struct DebugLevel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::DebugLevel, "ExitGames.Client.Photon", "DebugLevel");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.DebugLevel
  // [TokenAttribute] Offset: FFFFFFFF
  struct DebugLevel/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: DebugLevel
    constexpr DebugLevel(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public ExitGames.Client.Photon.DebugLevel OFF
    static constexpr const uint8_t OFF = 0u;
    // Get static field: static public ExitGames.Client.Photon.DebugLevel OFF
    static ::ExitGames::Client::Photon::DebugLevel _get_OFF();
    // Set static field: static public ExitGames.Client.Photon.DebugLevel OFF
    static void _set_OFF(::ExitGames::Client::Photon::DebugLevel value);
    // static field const value: static public ExitGames.Client.Photon.DebugLevel ERROR
    static constexpr const uint8_t ERROR = 1u;
    // Get static field: static public ExitGames.Client.Photon.DebugLevel ERROR
    static ::ExitGames::Client::Photon::DebugLevel _get_ERROR();
    // Set static field: static public ExitGames.Client.Photon.DebugLevel ERROR
    static void _set_ERROR(::ExitGames::Client::Photon::DebugLevel value);
    // static field const value: static public ExitGames.Client.Photon.DebugLevel WARNING
    static constexpr const uint8_t WARNING = 2u;
    // Get static field: static public ExitGames.Client.Photon.DebugLevel WARNING
    static ::ExitGames::Client::Photon::DebugLevel _get_WARNING();
    // Set static field: static public ExitGames.Client.Photon.DebugLevel WARNING
    static void _set_WARNING(::ExitGames::Client::Photon::DebugLevel value);
    // static field const value: static public ExitGames.Client.Photon.DebugLevel INFO
    static constexpr const uint8_t INFO = 3u;
    // Get static field: static public ExitGames.Client.Photon.DebugLevel INFO
    static ::ExitGames::Client::Photon::DebugLevel _get_INFO();
    // Set static field: static public ExitGames.Client.Photon.DebugLevel INFO
    static void _set_INFO(::ExitGames::Client::Photon::DebugLevel value);
    // static field const value: static public ExitGames.Client.Photon.DebugLevel ALL
    static constexpr const uint8_t ALL = 5u;
    // Get static field: static public ExitGames.Client.Photon.DebugLevel ALL
    static ::ExitGames::Client::Photon::DebugLevel _get_ALL();
    // Set static field: static public ExitGames.Client.Photon.DebugLevel ALL
    static void _set_ALL(::ExitGames::Client::Photon::DebugLevel value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // ExitGames.Client.Photon.DebugLevel
  #pragma pack(pop)
  static check_size<sizeof(DebugLevel), 0 + sizeof(uint8_t)> __ExitGames_Client_Photon_DebugLevelSizeCheck;
  static_assert(sizeof(DebugLevel) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
