// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: SerializeMethod
  class SerializeMethod;
  // Forward declaring type: DeserializeMethod
  class DeserializeMethod;
  // Forward declaring type: SerializeStreamMethod
  class SerializeStreamMethod;
  // Forward declaring type: DeserializeStreamMethod
  class DeserializeStreamMethod;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: CustomType
  class CustomType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::CustomType);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::CustomType*, "ExitGames.Client.Photon", "CustomType");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.CustomType
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomType : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Byte Code
    // Size: 0x1
    // Offset: 0x10
    uint8_t Code;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Code and: Type
    char __padding0[0x7] = {};
    // public readonly System.Type Type
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public readonly ExitGames.Client.Photon.SerializeMethod SerializeFunction
    // Size: 0x8
    // Offset: 0x20
    ::ExitGames::Client::Photon::SerializeMethod* SerializeFunction;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::SerializeMethod*) == 0x8);
    // public readonly ExitGames.Client.Photon.DeserializeMethod DeserializeFunction
    // Size: 0x8
    // Offset: 0x28
    ::ExitGames::Client::Photon::DeserializeMethod* DeserializeFunction;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DeserializeMethod*) == 0x8);
    // public readonly ExitGames.Client.Photon.SerializeStreamMethod SerializeStreamFunction
    // Size: 0x8
    // Offset: 0x30
    ::ExitGames::Client::Photon::SerializeStreamMethod* SerializeStreamFunction;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::SerializeStreamMethod*) == 0x8);
    // public readonly ExitGames.Client.Photon.DeserializeStreamMethod DeserializeStreamFunction
    // Size: 0x8
    // Offset: 0x38
    ::ExitGames::Client::Photon::DeserializeStreamMethod* DeserializeStreamFunction;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DeserializeStreamMethod*) == 0x8);
    public:
    // Get instance field reference: public readonly System.Byte Code
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Code();
    // Get instance field reference: public readonly System.Type Type
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_Type();
    // Get instance field reference: public readonly ExitGames.Client.Photon.SerializeMethod SerializeFunction
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::SerializeMethod*& dyn_SerializeFunction();
    // Get instance field reference: public readonly ExitGames.Client.Photon.DeserializeMethod DeserializeFunction
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DeserializeMethod*& dyn_DeserializeFunction();
    // Get instance field reference: public readonly ExitGames.Client.Photon.SerializeStreamMethod SerializeStreamFunction
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::SerializeStreamMethod*& dyn_SerializeStreamFunction();
    // Get instance field reference: public readonly ExitGames.Client.Photon.DeserializeStreamMethod DeserializeStreamFunction
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DeserializeStreamMethod*& dyn_DeserializeStreamFunction();
    // public System.Void .ctor(System.Type type, System.Byte code, ExitGames.Client.Photon.SerializeMethod serializeFunction, ExitGames.Client.Photon.DeserializeMethod deserializeFunction)
    // Offset: 0x1129C30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomType* New_ctor(::System::Type* type, uint8_t code, ::ExitGames::Client::Photon::SerializeMethod* serializeFunction, ::ExitGames::Client::Photon::DeserializeMethod* deserializeFunction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::CustomType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomType*, creationType>(type, code, serializeFunction, deserializeFunction)));
    }
    // public System.Void .ctor(System.Type type, System.Byte code, ExitGames.Client.Photon.SerializeStreamMethod serializeFunction, ExitGames.Client.Photon.DeserializeStreamMethod deserializeFunction)
    // Offset: 0x1129C80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomType* New_ctor(::System::Type* type, uint8_t code, ::ExitGames::Client::Photon::SerializeStreamMethod* serializeFunction, ::ExitGames::Client::Photon::DeserializeStreamMethod* deserializeFunction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::CustomType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomType*, creationType>(type, code, serializeFunction, deserializeFunction)));
    }
  }; // ExitGames.Client.Photon.CustomType
  #pragma pack(pop)
  static check_size<sizeof(CustomType), 56 + sizeof(::ExitGames::Client::Photon::DeserializeStreamMethod*)> __ExitGames_Client_Photon_CustomTypeSizeCheck;
  static_assert(sizeof(CustomType) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::CustomType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::CustomType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
