// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
// Including type: System.Collections.Generic.Dictionary`2/System.Collections.Generic.Enumerator
#include "System/Collections/Generic/Dictionary_2.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: DictionaryEntryEnumerator
  struct DictionaryEntryEnumerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::DictionaryEntryEnumerator, "ExitGames.Client.Photon", "DictionaryEntryEnumerator");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ExitGames.Client.Photon.DictionaryEntryEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct DictionaryEntryEnumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::System::Collections::DictionaryEntry>*/ {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2/System.Collections.Generic.Enumerator<System.Object,System.Object> enumerator
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator enumerator;
    public:
    // Creating value type constructor for type: DictionaryEntryEnumerator
    constexpr DictionaryEntryEnumerator(typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator enumerator_ = {}) noexcept : enumerator{enumerator_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::DictionaryEntry>
    operator ::System::Collections::Generic::IEnumerator_1<::System::Collections::DictionaryEntry>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::DictionaryEntry>*>(this);
    }
    // Creating conversion operator: operator typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator
    constexpr operator typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator() const noexcept {
      return enumerator;
    }
    // Get instance field reference: private System.Collections.Generic.Dictionary`2/System.Collections.Generic.Enumerator<System.Object,System.Object> enumerator
    [[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator& dyn_enumerator();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xA53BCC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Collections.DictionaryEntry get_Current()
    // Offset: 0xA53BD4
    ::System::Collections::DictionaryEntry get_Current();
    // public System.Object get_Key()
    // Offset: 0xA53BDC
    ::Il2CppObject* get_Key();
    // public System.Object get_Value()
    // Offset: 0xA53C20
    ::Il2CppObject* get_Value();
    // public System.Void .ctor(System.Collections.Generic.Dictionary`2/System.Collections.Generic.Enumerator<System.Object,System.Object> original)
    // Offset: 0xA53BB8
    // ABORTED: conflicts with another method.  DictionaryEntryEnumerator(typename ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>::Enumerator original);
    // public System.Boolean MoveNext()
    // Offset: 0xA53C64
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xA53C6C
    void Reset();
    // public System.Void Dispose()
    // Offset: 0xA53C74
    void Dispose();
  }; // ExitGames.Client.Photon.DictionaryEntryEnumerator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::DictionaryEntry (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::DictionaryEntryEnumerator
// Il2CppName: .ctor
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::DictionaryEntryEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::DictionaryEntryEnumerator::*)()>(&ExitGames::Client::Photon::DictionaryEntryEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::DictionaryEntryEnumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
