// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: ExitGames.Client.Photon.DeliveryMode
#include "ExitGames/Client/Photon/DeliveryMode.hpp"
// Completed includes
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: SendOptions
  struct SendOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::SendOptions, "ExitGames.Client.Photon", "SendOptions");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x6
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ExitGames.Client.Photon.SendOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct SendOptions/*, public ::System::ValueType*/ {
    public:
    public:
    // public ExitGames.Client.Photon.DeliveryMode DeliveryMode
    // Size: 0x4
    // Offset: 0x0
    ::ExitGames::Client::Photon::DeliveryMode DeliveryMode;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DeliveryMode) == 0x4);
    // public System.Boolean Encrypt
    // Size: 0x1
    // Offset: 0x4
    bool Encrypt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Byte Channel
    // Size: 0x1
    // Offset: 0x5
    uint8_t Channel;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: SendOptions
    constexpr SendOptions(::ExitGames::Client::Photon::DeliveryMode DeliveryMode_ = {}, bool Encrypt_ = {}, uint8_t Channel_ = {}) noexcept : DeliveryMode{DeliveryMode_}, Encrypt{Encrypt_}, Channel{Channel_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly ExitGames.Client.Photon.SendOptions SendReliable
    static ::ExitGames::Client::Photon::SendOptions _get_SendReliable();
    // Set static field: static public readonly ExitGames.Client.Photon.SendOptions SendReliable
    static void _set_SendReliable(::ExitGames::Client::Photon::SendOptions value);
    // Get static field: static public readonly ExitGames.Client.Photon.SendOptions SendUnreliable
    static ::ExitGames::Client::Photon::SendOptions _get_SendUnreliable();
    // Set static field: static public readonly ExitGames.Client.Photon.SendOptions SendUnreliable
    static void _set_SendUnreliable(::ExitGames::Client::Photon::SendOptions value);
    // Get instance field reference: public ExitGames.Client.Photon.DeliveryMode DeliveryMode
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DeliveryMode& dyn_DeliveryMode();
    // Get instance field reference: public System.Boolean Encrypt
    [[deprecated("Use field access instead!")]] bool& dyn_Encrypt();
    // Get instance field reference: public System.Byte Channel
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Channel();
    // public System.Boolean get_Reliability()
    // Offset: 0xA6982C
    bool get_Reliability();
    // public System.Void set_Reliability(System.Boolean value)
    // Offset: 0xA6983C
    void set_Reliability(bool value);
    // static private System.Void .cctor()
    // Offset: 0x16FB63C
    static void _cctor();
  }; // ExitGames.Client.Photon.SendOptions
  #pragma pack(pop)
  static check_size<sizeof(SendOptions), 5 + sizeof(uint8_t)> __ExitGames_Client_Photon_SendOptionsSizeCheck;
  static_assert(sizeof(SendOptions) == 0x6);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::SendOptions::get_Reliability
// Il2CppName: get_Reliability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::SendOptions::*)()>(&ExitGames::Client::Photon::SendOptions::get_Reliability)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::SendOptions), "get_Reliability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::SendOptions::set_Reliability
// Il2CppName: set_Reliability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::SendOptions::*)(bool)>(&ExitGames::Client::Photon::SendOptions::set_Reliability)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::SendOptions), "set_Reliability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::SendOptions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ExitGames::Client::Photon::SendOptions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::SendOptions), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
