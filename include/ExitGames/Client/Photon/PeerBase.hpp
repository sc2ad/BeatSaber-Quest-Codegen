// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.ConnectionProtocol
#include "ExitGames/Client/Photon/ConnectionProtocol.hpp"
// Including type: ExitGames.Client.Photon.ConnectionStateValue
#include "ExitGames/Client/Photon/ConnectionStateValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonPeer
  class PhotonPeer;
  // Forward declaring type: IProtocol
  class IProtocol;
  // Forward declaring type: IPhotonSocket
  class IPhotonSocket;
  // Forward declaring type: NCommand
  class NCommand;
  // Forward declaring type: EventData
  class EventData;
  // Forward declaring type: SimulationItem
  class SimulationItem;
  // Forward declaring type: NetworkSimulationSet
  class NetworkSimulationSet;
  // Forward declaring type: StreamBuffer
  class StreamBuffer;
  // Forward declaring type: IPhotonPeerListener
  class IPhotonPeerListener;
  // Forward declaring type: DebugLevel
  struct DebugLevel;
  // Forward declaring type: TrafficStats
  class TrafficStats;
  // Forward declaring type: TrafficStatsGameLevel
  class TrafficStatsGameLevel;
  // Forward declaring type: SendOptions
  struct SendOptions;
  // Forward declaring type: EgMessageType
  struct EgMessageType;
  // Forward declaring type: ParameterDictionary
  class ParameterDictionary;
  // Forward declaring type: OperationResponse
  class OperationResponse;
  // Forward declaring type: StatusCode
  struct StatusCode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Forward declaring namespace: Photon::SocketServer::Security
namespace Photon::SocketServer::Security {
  // Forward declaring type: ICryptoProvider
  class ICryptoProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PeerBase
  class PeerBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::PeerBase);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::PeerBase*, "ExitGames.Client.Photon", "PeerBase");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x11C
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.PeerBase
  // [TokenAttribute] Offset: FFFFFFFF
  class PeerBase : public ::Il2CppObject {
    public:
    // Nested type: ::ExitGames::Client::Photon::PeerBase::MyAction
    class MyAction;
    // Nested type: ::ExitGames::Client::Photon::PeerBase::GpBinaryV3Parameters
    class GpBinaryV3Parameters;
    // Nested type: ::ExitGames::Client::Photon::PeerBase::$$c__DisplayClass108_0
    class $$c__DisplayClass108_0;
    // Nested type: ::ExitGames::Client::Photon::PeerBase::$$c__DisplayClass109_0
    class $$c__DisplayClass109_0;
    public:
    // ExitGames.Client.Photon.PhotonPeer photonPeer
    // Size: 0x8
    // Offset: 0x10
    ::ExitGames::Client::Photon::PhotonPeer* photonPeer;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::PhotonPeer*) == 0x8);
    // public ExitGames.Client.Photon.IProtocol SerializationProtocol
    // Size: 0x8
    // Offset: 0x18
    ::ExitGames::Client::Photon::IProtocol* SerializationProtocol;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::IProtocol*) == 0x8);
    // ExitGames.Client.Photon.ConnectionProtocol usedTransportProtocol
    // Size: 0x1
    // Offset: 0x20
    ::ExitGames::Client::Photon::ConnectionProtocol usedTransportProtocol;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::ConnectionProtocol) == 0x1);
    // Padding between fields: usedTransportProtocol and: PhotonSocket
    char __padding2[0x7] = {};
    // ExitGames.Client.Photon.IPhotonSocket PhotonSocket
    // Size: 0x8
    // Offset: 0x28
    ::ExitGames::Client::Photon::IPhotonSocket* PhotonSocket;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::IPhotonSocket*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94C9AC
    // private System.String <ServerAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW ServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94C9E8
    // private System.String <ProxyServerAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW ProxyServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // ExitGames.Client.Photon.ConnectionStateValue peerConnectionState
    // Size: 0x1
    // Offset: 0x40
    ::ExitGames::Client::Photon::ConnectionStateValue peerConnectionState;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::ConnectionStateValue) == 0x1);
    // Padding between fields: peerConnectionState and: ByteCountLastOperation
    char __padding6[0x3] = {};
    // System.Int32 ByteCountLastOperation
    // Size: 0x4
    // Offset: 0x44
    int ByteCountLastOperation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 ByteCountCurrentDispatch
    // Size: 0x4
    // Offset: 0x48
    int ByteCountCurrentDispatch;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ByteCountCurrentDispatch and: CommandInCurrentDispatch
    char __padding8[0x4] = {};
    // ExitGames.Client.Photon.NCommand CommandInCurrentDispatch
    // Size: 0x8
    // Offset: 0x50
    ::ExitGames::Client::Photon::NCommand* CommandInCurrentDispatch;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::NCommand*) == 0x8);
    // System.Int32 packetLossByCrc
    // Size: 0x4
    // Offset: 0x58
    int packetLossByCrc;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 packetLossByChallenge
    // Size: 0x4
    // Offset: 0x5C
    int packetLossByChallenge;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Collections.Generic.Queue`1<ExitGames.Client.Photon.PeerBase/ExitGames.Client.Photon.MyAction> ActionQueue
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::PeerBase::MyAction*>* ActionQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::PeerBase::MyAction*>*) == 0x8);
    // System.Int16 peerID
    // Size: 0x2
    // Offset: 0x68
    int16_t peerID;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: peerID and: serverTimeOffset
    char __padding13[0x2] = {};
    // System.Int32 serverTimeOffset
    // Size: 0x4
    // Offset: 0x6C
    int serverTimeOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean serverTimeOffsetIsAvailable
    // Size: 0x1
    // Offset: 0x70
    bool serverTimeOffsetIsAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: serverTimeOffsetIsAvailable and: roundTripTime
    char __padding15[0x3] = {};
    // System.Int32 roundTripTime
    // Size: 0x4
    // Offset: 0x74
    int roundTripTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 roundTripTimeVariance
    // Size: 0x4
    // Offset: 0x78
    int roundTripTimeVariance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lastRoundTripTime
    // Size: 0x4
    // Offset: 0x7C
    int lastRoundTripTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lowestRoundTripTime
    // Size: 0x4
    // Offset: 0x80
    int lowestRoundTripTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 highestRoundTripTimeVariance
    // Size: 0x4
    // Offset: 0x84
    int highestRoundTripTimeVariance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 timestampOfLastReceive
    // Size: 0x4
    // Offset: 0x88
    int timestampOfLastReceive;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: timestampOfLastReceive and: bytesOut
    char __padding21[0x4] = {};
    // System.Int64 bytesOut
    // Size: 0x8
    // Offset: 0x90
    int64_t bytesOut;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 bytesIn
    // Size: 0x8
    // Offset: 0x98
    int64_t bytesIn;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Object PhotonToken
    // Size: 0x8
    // Offset: 0xA0
    ::Il2CppObject* PhotonToken;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Object CustomInitData
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppObject* CustomInitData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.String AppId
    // Size: 0x8
    // Offset: 0xB0
    ::StringW AppId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // ExitGames.Client.Photon.EventData reusableEventData
    // Size: 0x8
    // Offset: 0xB8
    ::ExitGames::Client::Photon::EventData* reusableEventData;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::EventData*) == 0x8);
    // private System.Diagnostics.Stopwatch watch
    // Size: 0x8
    // Offset: 0xC0
    ::System::Diagnostics::Stopwatch* watch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // System.Int32 timeoutInt
    // Size: 0x4
    // Offset: 0xC8
    int timeoutInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 timeLastAckReceive
    // Size: 0x4
    // Offset: 0xCC
    int timeLastAckReceive;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 longestSentCall
    // Size: 0x4
    // Offset: 0xD0
    int longestSentCall;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 timeLastSendAck
    // Size: 0x4
    // Offset: 0xD4
    int timeLastSendAck;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 timeLastSendOutgoing
    // Size: 0x4
    // Offset: 0xD8
    int timeLastSendOutgoing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean ApplicationIsInitialized
    // Size: 0x1
    // Offset: 0xDC
    bool ApplicationIsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isEncryptionAvailable
    // Size: 0x1
    // Offset: 0xDD
    bool isEncryptionAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isEncryptionAvailable and: outgoingCommandsInStream
    char __padding35[0x2] = {};
    // System.Int32 outgoingCommandsInStream
    // Size: 0x4
    // Offset: 0xE0
    int outgoingCommandsInStream;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: outgoingCommandsInStream and: messageHeader
    char __padding36[0x4] = {};
    // System.Byte[] messageHeader
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<uint8_t> messageHeader;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // Photon.SocketServer.Security.ICryptoProvider CryptoProvider
    // Size: 0x8
    // Offset: 0xF0
    ::Photon::SocketServer::Security::ICryptoProvider* CryptoProvider;
    // Field size check
    static_assert(sizeof(::Photon::SocketServer::Security::ICryptoProvider*) == 0x8);
    // private readonly System.Random lagRandomizer
    // Size: 0x8
    // Offset: 0xF8
    ::System::Random* lagRandomizer;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // readonly System.Collections.Generic.LinkedList`1<ExitGames.Client.Photon.SimulationItem> NetSimListOutgoing
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>* NetSimListOutgoing;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>*) == 0x8);
    // readonly System.Collections.Generic.LinkedList`1<ExitGames.Client.Photon.SimulationItem> NetSimListIncoming
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>* NetSimListIncoming;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>*) == 0x8);
    // private readonly ExitGames.Client.Photon.NetworkSimulationSet networkSimulationSettings
    // Size: 0x8
    // Offset: 0x110
    ::ExitGames::Client::Photon::NetworkSimulationSet* networkSimulationSettings;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::NetworkSimulationSet*) == 0x8);
    // System.Int32 TrafficPackageHeaderSize
    // Size: 0x4
    // Offset: 0x118
    int TrafficPackageHeaderSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static System.Int16 peerCount
    static int16_t _get_peerCount();
    // Set static field: static System.Int16 peerCount
    static void _set_peerCount(int16_t value);
    // Get static field: static protected internal System.Collections.Generic.Queue`1<ExitGames.Client.Photon.StreamBuffer> MessageBufferPool
    static ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::StreamBuffer*>* _get_MessageBufferPool();
    // Set static field: static protected internal System.Collections.Generic.Queue`1<ExitGames.Client.Photon.StreamBuffer> MessageBufferPool
    static void _set_MessageBufferPool(::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::StreamBuffer*>* value);
    // Get instance field reference: ExitGames.Client.Photon.PhotonPeer photonPeer
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PhotonPeer*& dyn_photonPeer();
    // Get instance field reference: public ExitGames.Client.Photon.IProtocol SerializationProtocol
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::IProtocol*& dyn_SerializationProtocol();
    // Get instance field reference: ExitGames.Client.Photon.ConnectionProtocol usedTransportProtocol
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ConnectionProtocol& dyn_usedTransportProtocol();
    // Get instance field reference: ExitGames.Client.Photon.IPhotonSocket PhotonSocket
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::IPhotonSocket*& dyn_PhotonSocket();
    // Get instance field reference: private System.String <ServerAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ServerAddress$k__BackingField();
    // Get instance field reference: private System.String <ProxyServerAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ProxyServerAddress$k__BackingField();
    // Get instance field reference: ExitGames.Client.Photon.ConnectionStateValue peerConnectionState
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ConnectionStateValue& dyn_peerConnectionState();
    // Get instance field reference: System.Int32 ByteCountLastOperation
    [[deprecated("Use field access instead!")]] int& dyn_ByteCountLastOperation();
    // Get instance field reference: System.Int32 ByteCountCurrentDispatch
    [[deprecated("Use field access instead!")]] int& dyn_ByteCountCurrentDispatch();
    // Get instance field reference: ExitGames.Client.Photon.NCommand CommandInCurrentDispatch
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NCommand*& dyn_CommandInCurrentDispatch();
    // Get instance field reference: System.Int32 packetLossByCrc
    [[deprecated("Use field access instead!")]] int& dyn_packetLossByCrc();
    // Get instance field reference: System.Int32 packetLossByChallenge
    [[deprecated("Use field access instead!")]] int& dyn_packetLossByChallenge();
    // Get instance field reference: readonly System.Collections.Generic.Queue`1<ExitGames.Client.Photon.PeerBase/ExitGames.Client.Photon.MyAction> ActionQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ExitGames::Client::Photon::PeerBase::MyAction*>*& dyn_ActionQueue();
    // Get instance field reference: System.Int16 peerID
    [[deprecated("Use field access instead!")]] int16_t& dyn_peerID();
    // Get instance field reference: System.Int32 serverTimeOffset
    [[deprecated("Use field access instead!")]] int& dyn_serverTimeOffset();
    // Get instance field reference: System.Boolean serverTimeOffsetIsAvailable
    [[deprecated("Use field access instead!")]] bool& dyn_serverTimeOffsetIsAvailable();
    // Get instance field reference: System.Int32 roundTripTime
    [[deprecated("Use field access instead!")]] int& dyn_roundTripTime();
    // Get instance field reference: System.Int32 roundTripTimeVariance
    [[deprecated("Use field access instead!")]] int& dyn_roundTripTimeVariance();
    // Get instance field reference: System.Int32 lastRoundTripTime
    [[deprecated("Use field access instead!")]] int& dyn_lastRoundTripTime();
    // Get instance field reference: System.Int32 lowestRoundTripTime
    [[deprecated("Use field access instead!")]] int& dyn_lowestRoundTripTime();
    // Get instance field reference: System.Int32 highestRoundTripTimeVariance
    [[deprecated("Use field access instead!")]] int& dyn_highestRoundTripTimeVariance();
    // Get instance field reference: System.Int32 timestampOfLastReceive
    [[deprecated("Use field access instead!")]] int& dyn_timestampOfLastReceive();
    // Get instance field reference: System.Int64 bytesOut
    [[deprecated("Use field access instead!")]] int64_t& dyn_bytesOut();
    // Get instance field reference: System.Int64 bytesIn
    [[deprecated("Use field access instead!")]] int64_t& dyn_bytesIn();
    // Get instance field reference: System.Object PhotonToken
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_PhotonToken();
    // Get instance field reference: System.Object CustomInitData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_CustomInitData();
    // Get instance field reference: public System.String AppId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AppId();
    // Get instance field reference: ExitGames.Client.Photon.EventData reusableEventData
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::EventData*& dyn_reusableEventData();
    // Get instance field reference: private System.Diagnostics.Stopwatch watch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_watch();
    // Get instance field reference: System.Int32 timeoutInt
    [[deprecated("Use field access instead!")]] int& dyn_timeoutInt();
    // Get instance field reference: System.Int32 timeLastAckReceive
    [[deprecated("Use field access instead!")]] int& dyn_timeLastAckReceive();
    // Get instance field reference: System.Int32 longestSentCall
    [[deprecated("Use field access instead!")]] int& dyn_longestSentCall();
    // Get instance field reference: System.Int32 timeLastSendAck
    [[deprecated("Use field access instead!")]] int& dyn_timeLastSendAck();
    // Get instance field reference: System.Int32 timeLastSendOutgoing
    [[deprecated("Use field access instead!")]] int& dyn_timeLastSendOutgoing();
    // Get instance field reference: System.Boolean ApplicationIsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_ApplicationIsInitialized();
    // Get instance field reference: System.Boolean isEncryptionAvailable
    [[deprecated("Use field access instead!")]] bool& dyn_isEncryptionAvailable();
    // Get instance field reference: System.Int32 outgoingCommandsInStream
    [[deprecated("Use field access instead!")]] int& dyn_outgoingCommandsInStream();
    // Get instance field reference: System.Byte[] messageHeader
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_messageHeader();
    // Get instance field reference: Photon.SocketServer.Security.ICryptoProvider CryptoProvider
    [[deprecated("Use field access instead!")]] ::Photon::SocketServer::Security::ICryptoProvider*& dyn_CryptoProvider();
    // Get instance field reference: private readonly System.Random lagRandomizer
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_lagRandomizer();
    // Get instance field reference: readonly System.Collections.Generic.LinkedList`1<ExitGames.Client.Photon.SimulationItem> NetSimListOutgoing
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>*& dyn_NetSimListOutgoing();
    // Get instance field reference: readonly System.Collections.Generic.LinkedList`1<ExitGames.Client.Photon.SimulationItem> NetSimListIncoming
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedList_1<::ExitGames::Client::Photon::SimulationItem*>*& dyn_NetSimListIncoming();
    // Get instance field reference: private readonly ExitGames.Client.Photon.NetworkSimulationSet networkSimulationSettings
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::NetworkSimulationSet*& dyn_networkSimulationSettings();
    // Get instance field reference: System.Int32 TrafficPackageHeaderSize
    [[deprecated("Use field access instead!")]] int& dyn_TrafficPackageHeaderSize();
    // public System.String get_ServerAddress()
    // Offset: 0x11399D0
    ::StringW get_ServerAddress();
    // System.Void set_ServerAddress(System.String value)
    // Offset: 0x11399D8
    void set_ServerAddress(::StringW value);
    // public System.String get_ProxyServerAddress()
    // Offset: 0x11399E0
    ::StringW get_ProxyServerAddress();
    // System.Void set_ProxyServerAddress(System.String value)
    // Offset: 0x11399E8
    void set_ProxyServerAddress(::StringW value);
    // ExitGames.Client.Photon.IPhotonPeerListener get_Listener()
    // Offset: 0x112CFB4
    ::ExitGames::Client::Photon::IPhotonPeerListener* get_Listener();
    // public ExitGames.Client.Photon.DebugLevel get_debugOut()
    // Offset: 0x112D0D4
    ::ExitGames::Client::Photon::DebugLevel get_debugOut();
    // System.Int32 get_DisconnectTimeout()
    // Offset: 0x1132334
    int get_DisconnectTimeout();
    // System.Int32 get_timePingInterval()
    // Offset: 0x11310F4
    int get_timePingInterval();
    // System.Byte get_ChannelCount()
    // Offset: 0x112BE88
    uint8_t get_ChannelCount();
    // System.Int64 get_BytesOut()
    // Offset: 0x11399F8
    int64_t get_BytesOut();
    // System.Int64 get_BytesIn()
    // Offset: 0x1139A00
    int64_t get_BytesIn();
    // System.Int32 get_QueuedIncomingCommandsCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_QueuedIncomingCommandsCount();
    // System.Int32 get_QueuedOutgoingCommandsCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_QueuedOutgoingCommandsCount();
    // System.Int32 get_SentReliableCommandsCount()
    // Offset: 0x1139A08
    int get_SentReliableCommandsCount();
    // public System.String get_PeerID()
    // Offset: 0x1139A10
    ::StringW get_PeerID();
    // System.Int32 get_timeInt()
    // Offset: 0x112FB60
    int get_timeInt();
    // static System.Int32 get_outgoingStreamBufferSize()
    // Offset: 0x1139A3C
    static int get_outgoingStreamBufferSize();
    // System.Int32 get_mtu()
    // Offset: 0x112BE6C
    int get_mtu();
    // protected internal System.Boolean get_IsIpv6()
    // Offset: 0x1139AAC
    bool get_IsIpv6();
    // public ExitGames.Client.Photon.NetworkSimulationSet get_NetworkSimulationSettings()
    // Offset: 0x112C738
    ::ExitGames::Client::Photon::NetworkSimulationSet* get_NetworkSimulationSettings();
    // System.Boolean get_TrafficStatsEnabled()
    // Offset: 0x112C138
    bool get_TrafficStatsEnabled();
    // ExitGames.Client.Photon.TrafficStats get_TrafficStatsIncoming()
    // Offset: 0x1133034
    ::ExitGames::Client::Photon::TrafficStats* get_TrafficStatsIncoming();
    // ExitGames.Client.Photon.TrafficStats get_TrafficStatsOutgoing()
    // Offset: 0x112C154
    ::ExitGames::Client::Photon::TrafficStats* get_TrafficStatsOutgoing();
    // ExitGames.Client.Photon.TrafficStatsGameLevel get_TrafficStatsGameLevel()
    // Offset: 0x1131308
    ::ExitGames::Client::Photon::TrafficStatsGameLevel* get_TrafficStatsGameLevel();
    // protected System.Void .ctor()
    // Offset: 0x112B69C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PeerBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PeerBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PeerBase*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x113CCE8
    static void _cctor();
    // static public ExitGames.Client.Photon.StreamBuffer MessageBufferPoolGet()
    // Offset: 0x11314B0
    static ::ExitGames::Client::Photon::StreamBuffer* MessageBufferPoolGet();
    // static public System.Void MessageBufferPoolPut(ExitGames.Client.Photon.StreamBuffer buff)
    // Offset: 0x1131678
    static void MessageBufferPoolPut(::ExitGames::Client::Photon::StreamBuffer* buff);
    // System.Void Reset()
    // Offset: 0x112BC40
    void Reset();
    // System.Boolean Connect(System.String serverAddress, System.String proxyServerAddress, System.String appID, System.Object photonToken)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Connect(::StringW serverAddress, ::StringW proxyServerAddress, ::StringW appID, ::Il2CppObject* photonToken);
    // private System.String GetHttpKeyValueString(System.Collections.Generic.Dictionary`2<System.String,System.String> dic)
    // Offset: 0x1139BF0
    ::StringW GetHttpKeyValueString(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* dic);
    // System.Byte[] WriteInitRequest()
    // Offset: 0x1134010
    ::ArrayW<uint8_t> WriteInitRequest();
    // private System.Byte[] WriteInitV3()
    // Offset: 0x1139DA4
    ::ArrayW<uint8_t> WriteInitV3();
    // System.String PepareWebSocketUrl(System.String serverAddress, System.String appId, System.Object photonToken)
    // Offset: 0x113A44C
    ::StringW PepareWebSocketUrl(::StringW serverAddress, ::StringW appId, ::Il2CppObject* photonToken);
    // public System.Void OnConnect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnConnect();
    // System.Void InitCallback()
    // Offset: 0x113A5B8
    void InitCallback();
    // System.Void Disconnect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Disconnect();
    // System.Void StopConnection()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void StopConnection();
    // System.Void FetchServerTimestamp()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FetchServerTimestamp();
    // System.Boolean IsTransportEncrypted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTransportEncrypted();
    // System.Boolean EnqueuePhotonMessage(ExitGames.Client.Photon.StreamBuffer opBytes, ExitGames.Client.Photon.SendOptions sendParams)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool EnqueuePhotonMessage(::ExitGames::Client::Photon::StreamBuffer* opBytes, ::ExitGames::Client::Photon::SendOptions sendParams);
    // ExitGames.Client.Photon.StreamBuffer SerializeOperationToMessage(System.Byte opCode, System.Collections.Generic.Dictionary`2<System.Byte,System.Object> parameters, ExitGames.Client.Photon.EgMessageType messageType, System.Boolean encrypt)
    // Offset: 0x113A6A8
    ::ExitGames::Client::Photon::StreamBuffer* SerializeOperationToMessage(uint8_t opCode, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>* parameters, ::ExitGames::Client::Photon::EgMessageType messageType, bool encrypt);
    // ExitGames.Client.Photon.StreamBuffer SerializeOperationToMessage(System.Byte opCode, ExitGames.Client.Photon.ParameterDictionary parameters, ExitGames.Client.Photon.EgMessageType messageType, System.Boolean encrypt)
    // Offset: 0x113A940
    ::ExitGames::Client::Photon::StreamBuffer* SerializeOperationToMessage(uint8_t opCode, ::ExitGames::Client::Photon::ParameterDictionary* parameters, ::ExitGames::Client::Photon::EgMessageType messageType, bool encrypt);
    // ExitGames.Client.Photon.StreamBuffer SerializeMessageToMessage(System.Object message, System.Boolean encrypt)
    // Offset: 0x113ABD8
    ::ExitGames::Client::Photon::StreamBuffer* SerializeMessageToMessage(::Il2CppObject* message, bool encrypt);
    // System.Boolean SendOutgoingCommands()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool SendOutgoingCommands();
    // System.Boolean SendAcksOnly()
    // Offset: 0x113AEB4
    bool SendAcksOnly();
    // System.Void ReceiveIncomingCommands(System.Byte[] inBuff, System.Int32 dataLength)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ReceiveIncomingCommands(::ArrayW<uint8_t> inBuff, int dataLength);
    // System.Boolean DispatchIncomingCommands()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool DispatchIncomingCommands();
    // System.Boolean DeserializeMessageAndCallback(ExitGames.Client.Photon.StreamBuffer stream)
    // Offset: 0x113AEBC
    bool DeserializeMessageAndCallback(::ExitGames::Client::Photon::StreamBuffer* stream);
    // System.Void UpdateRoundTripTimeAndVariance(System.Int32 lastRoundtripTime)
    // Offset: 0x11334DC
    void UpdateRoundTripTimeAndVariance(int lastRoundtripTime);
    // System.Boolean ExchangeKeysForEncryption(System.Object lockObject)
    // Offset: 0x113BFAC
    bool ExchangeKeysForEncryption(::Il2CppObject* lockObject);
    // System.Void DeriveSharedKey(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x113BDFC
    void DeriveSharedKey(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // System.Void InitEncryption(System.Byte[] secret)
    // Offset: 0x113C584
    void InitEncryption(::ArrayW<uint8_t> secret);
    // System.Void EnqueueActionForDispatch(ExitGames.Client.Photon.PeerBase/ExitGames.Client.Photon.MyAction action)
    // Offset: 0x1133560
    void EnqueueActionForDispatch(::ExitGames::Client::Photon::PeerBase::MyAction* action);
    // System.Void EnqueueDebugReturn(ExitGames.Client.Photon.DebugLevel level, System.String debugReturn)
    // Offset: 0x112D0F0
    void EnqueueDebugReturn(::ExitGames::Client::Photon::DebugLevel level, ::StringW debugReturn);
    // System.Void EnqueueStatusCallback(ExitGames.Client.Photon.StatusCode statusValue)
    // Offset: 0x112CD98
    void EnqueueStatusCallback(::ExitGames::Client::Photon::StatusCode statusValue);
    // System.Void SendNetworkSimulated(System.Byte[] dataToSend)
    // Offset: 0x1132060
    void SendNetworkSimulated(::ArrayW<uint8_t> dataToSend);
    // System.Void ReceiveNetworkSimulated(System.Byte[] dataReceived)
    // Offset: 0x1136680
    void ReceiveNetworkSimulated(::ArrayW<uint8_t> dataReceived);
    // protected internal System.Void NetworkSimRun()
    // Offset: 0x113C928
    void NetworkSimRun();
  }; // ExitGames.Client.Photon.PeerBase
  #pragma pack(pop)
  static check_size<sizeof(PeerBase), 280 + sizeof(int)> __ExitGames_Client_Photon_PeerBaseSizeCheck;
  static_assert(sizeof(PeerBase) == 0x11C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_ServerAddress
// Il2CppName: get_ServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_ServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_ServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::set_ServerAddress
// Il2CppName: set_ServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::StringW)>(&ExitGames::Client::Photon::PeerBase::set_ServerAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "set_ServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_ProxyServerAddress
// Il2CppName: get_ProxyServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_ProxyServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_ProxyServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::set_ProxyServerAddress
// Il2CppName: set_ProxyServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::StringW)>(&ExitGames::Client::Photon::PeerBase::set_ProxyServerAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "set_ProxyServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_Listener
// Il2CppName: get_Listener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::IPhotonPeerListener* (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_Listener)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_Listener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_debugOut
// Il2CppName: get_debugOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_debugOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_debugOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_DisconnectTimeout
// Il2CppName: get_DisconnectTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_DisconnectTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_DisconnectTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_timePingInterval
// Il2CppName: get_timePingInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_timePingInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_timePingInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_ChannelCount
// Il2CppName: get_ChannelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_ChannelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_ChannelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_BytesOut
// Il2CppName: get_BytesOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_BytesOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_BytesOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_BytesIn
// Il2CppName: get_BytesIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_BytesIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_BytesIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_QueuedIncomingCommandsCount
// Il2CppName: get_QueuedIncomingCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_QueuedIncomingCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_QueuedIncomingCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_QueuedOutgoingCommandsCount
// Il2CppName: get_QueuedOutgoingCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_QueuedOutgoingCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_QueuedOutgoingCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_SentReliableCommandsCount
// Il2CppName: get_SentReliableCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_SentReliableCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_SentReliableCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_PeerID
// Il2CppName: get_PeerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_PeerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_PeerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_timeInt
// Il2CppName: get_timeInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_timeInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_timeInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_outgoingStreamBufferSize
// Il2CppName: get_outgoingStreamBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&ExitGames::Client::Photon::PeerBase::get_outgoingStreamBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_outgoingStreamBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_mtu
// Il2CppName: get_mtu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_mtu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_mtu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_IsIpv6
// Il2CppName: get_IsIpv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_IsIpv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_IsIpv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_NetworkSimulationSettings
// Il2CppName: get_NetworkSimulationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::NetworkSimulationSet* (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_NetworkSimulationSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_NetworkSimulationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_TrafficStatsEnabled
// Il2CppName: get_TrafficStatsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_TrafficStatsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_TrafficStatsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_TrafficStatsIncoming
// Il2CppName: get_TrafficStatsIncoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStats* (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_TrafficStatsIncoming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_TrafficStatsIncoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_TrafficStatsOutgoing
// Il2CppName: get_TrafficStatsOutgoing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStats* (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_TrafficStatsOutgoing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_TrafficStatsOutgoing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::get_TrafficStatsGameLevel
// Il2CppName: get_TrafficStatsGameLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStatsGameLevel* (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::get_TrafficStatsGameLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "get_TrafficStatsGameLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ExitGames::Client::Photon::PeerBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::MessageBufferPoolGet
// Il2CppName: MessageBufferPoolGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::StreamBuffer* (*)()>(&ExitGames::Client::Photon::PeerBase::MessageBufferPoolGet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "MessageBufferPoolGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::MessageBufferPoolPut
// Il2CppName: MessageBufferPoolPut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ExitGames::Client::Photon::StreamBuffer*)>(&ExitGames::Client::Photon::PeerBase::MessageBufferPoolPut)> {
  static const MethodInfo* get() {
    static auto* buff = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "MessageBufferPoolPut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buff});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)(::StringW, ::StringW, ::StringW, ::Il2CppObject*)>(&ExitGames::Client::Photon::PeerBase::Connect)> {
  static const MethodInfo* get() {
    static auto* serverAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* proxyServerAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonToken = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAddress, proxyServerAddress, appID, photonToken});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::GetHttpKeyValueString
// Il2CppName: GetHttpKeyValueString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PeerBase::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&ExitGames::Client::Photon::PeerBase::GetHttpKeyValueString)> {
  static const MethodInfo* get() {
    static auto* dic = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "GetHttpKeyValueString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dic});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::WriteInitRequest
// Il2CppName: WriteInitRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::WriteInitRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "WriteInitRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::WriteInitV3
// Il2CppName: WriteInitV3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::WriteInitV3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "WriteInitV3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::PepareWebSocketUrl
// Il2CppName: PepareWebSocketUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PeerBase::*)(::StringW, ::StringW, ::Il2CppObject*)>(&ExitGames::Client::Photon::PeerBase::PepareWebSocketUrl)> {
  static const MethodInfo* get() {
    static auto* serverAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonToken = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "PepareWebSocketUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAddress, appId, photonToken});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::OnConnect
// Il2CppName: OnConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::OnConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "OnConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::InitCallback
// Il2CppName: InitCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::InitCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "InitCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::StopConnection
// Il2CppName: StopConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::StopConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "StopConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::FetchServerTimestamp
// Il2CppName: FetchServerTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::FetchServerTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "FetchServerTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::IsTransportEncrypted
// Il2CppName: IsTransportEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::IsTransportEncrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "IsTransportEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::EnqueuePhotonMessage
// Il2CppName: EnqueuePhotonMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::StreamBuffer*, ::ExitGames::Client::Photon::SendOptions)>(&ExitGames::Client::Photon::PeerBase::EnqueuePhotonMessage)> {
  static const MethodInfo* get() {
    static auto* opBytes = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* sendParams = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "EnqueuePhotonMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opBytes, sendParams});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SerializeOperationToMessage
// Il2CppName: SerializeOperationToMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::StreamBuffer* (ExitGames::Client::Photon::PeerBase::*)(uint8_t, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>*, ::ExitGames::Client::Photon::EgMessageType, bool)>(&ExitGames::Client::Photon::PeerBase::SerializeOperationToMessage)> {
  static const MethodInfo* get() {
    static auto* opCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* parameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EgMessageType")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SerializeOperationToMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opCode, parameters, messageType, encrypt});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SerializeOperationToMessage
// Il2CppName: SerializeOperationToMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::StreamBuffer* (ExitGames::Client::Photon::PeerBase::*)(uint8_t, ::ExitGames::Client::Photon::ParameterDictionary*, ::ExitGames::Client::Photon::EgMessageType, bool)>(&ExitGames::Client::Photon::PeerBase::SerializeOperationToMessage)> {
  static const MethodInfo* get() {
    static auto* opCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ParameterDictionary")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EgMessageType")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SerializeOperationToMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opCode, parameters, messageType, encrypt});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SerializeMessageToMessage
// Il2CppName: SerializeMessageToMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::StreamBuffer* (ExitGames::Client::Photon::PeerBase::*)(::Il2CppObject*, bool)>(&ExitGames::Client::Photon::PeerBase::SerializeMessageToMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SerializeMessageToMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, encrypt});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SendOutgoingCommands
// Il2CppName: SendOutgoingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::SendOutgoingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SendOutgoingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SendAcksOnly
// Il2CppName: SendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::SendAcksOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::ReceiveIncomingCommands
// Il2CppName: ReceiveIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ArrayW<uint8_t>, int)>(&ExitGames::Client::Photon::PeerBase::ReceiveIncomingCommands)> {
  static const MethodInfo* get() {
    static auto* inBuff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dataLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "ReceiveIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inBuff, dataLength});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::DispatchIncomingCommands
// Il2CppName: DispatchIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::DispatchIncomingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "DispatchIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::DeserializeMessageAndCallback
// Il2CppName: DeserializeMessageAndCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::StreamBuffer*)>(&ExitGames::Client::Photon::PeerBase::DeserializeMessageAndCallback)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "DeserializeMessageAndCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::UpdateRoundTripTimeAndVariance
// Il2CppName: UpdateRoundTripTimeAndVariance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(int)>(&ExitGames::Client::Photon::PeerBase::UpdateRoundTripTimeAndVariance)> {
  static const MethodInfo* get() {
    static auto* lastRoundtripTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "UpdateRoundTripTimeAndVariance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastRoundtripTime});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::ExchangeKeysForEncryption
// Il2CppName: ExchangeKeysForEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PeerBase::*)(::Il2CppObject*)>(&ExitGames::Client::Photon::PeerBase::ExchangeKeysForEncryption)> {
  static const MethodInfo* get() {
    static auto* lockObject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "ExchangeKeysForEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lockObject});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::DeriveSharedKey
// Il2CppName: DeriveSharedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::OperationResponse*)>(&ExitGames::Client::Photon::PeerBase::DeriveSharedKey)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "DeriveSharedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::InitEncryption
// Il2CppName: InitEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ArrayW<uint8_t>)>(&ExitGames::Client::Photon::PeerBase::InitEncryption)> {
  static const MethodInfo* get() {
    static auto* secret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "InitEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secret});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::EnqueueActionForDispatch
// Il2CppName: EnqueueActionForDispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::PeerBase::MyAction*)>(&ExitGames::Client::Photon::PeerBase::EnqueueActionForDispatch)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "PeerBase/MyAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "EnqueueActionForDispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::EnqueueDebugReturn
// Il2CppName: EnqueueDebugReturn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::DebugLevel, ::StringW)>(&ExitGames::Client::Photon::PeerBase::EnqueueDebugReturn)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    static auto* debugReturn = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "EnqueueDebugReturn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, debugReturn});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::EnqueueStatusCallback
// Il2CppName: EnqueueStatusCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ExitGames::Client::Photon::StatusCode)>(&ExitGames::Client::Photon::PeerBase::EnqueueStatusCallback)> {
  static const MethodInfo* get() {
    static auto* statusValue = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "EnqueueStatusCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusValue});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::SendNetworkSimulated
// Il2CppName: SendNetworkSimulated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ArrayW<uint8_t>)>(&ExitGames::Client::Photon::PeerBase::SendNetworkSimulated)> {
  static const MethodInfo* get() {
    static auto* dataToSend = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "SendNetworkSimulated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataToSend});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::ReceiveNetworkSimulated
// Il2CppName: ReceiveNetworkSimulated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)(::ArrayW<uint8_t>)>(&ExitGames::Client::Photon::PeerBase::ReceiveNetworkSimulated)> {
  static const MethodInfo* get() {
    static auto* dataReceived = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "ReceiveNetworkSimulated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataReceived});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PeerBase::NetworkSimRun
// Il2CppName: NetworkSimRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PeerBase::*)()>(&ExitGames::Client::Photon::PeerBase::NetworkSimRun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PeerBase*), "NetworkSimRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
