// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: ExitGames.Client.Photon.StructWrapping.WrappedType
#include "ExitGames/Client/Photon/StructWrapping/WrappedType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon.StructWrapping
namespace ExitGames::Client::Photon::StructWrapping {
  // Forward declaring type: StructWrapper
  class StructWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::StructWrapping::StructWrapper);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::StructWrapping::StructWrapper*, "ExitGames.Client.Photon.StructWrapping", "StructWrapper");
// Type namespace: ExitGames.Client.Photon.StructWrapping
namespace ExitGames::Client::Photon::StructWrapping {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.StructWrapping.StructWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class StructWrapper : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // public readonly ExitGames.Client.Photon.StructWrapping.WrappedType wrappedType
    // Size: 0x4
    // Offset: 0x10
    ::ExitGames::Client::Photon::StructWrapping::WrappedType wrappedType;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::StructWrapping::WrappedType) == 0x4);
    // Padding between fields: wrappedType and: ttype
    char __padding0[0x4] = {};
    // public readonly System.Type ttype
    // Size: 0x8
    // Offset: 0x18
    ::System::Type* ttype;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public readonly ExitGames.Client.Photon.StructWrapping.WrappedType wrappedType
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::StructWrapping::WrappedType& dyn_wrappedType();
    // Get instance field reference: public readonly System.Type ttype
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_ttype();
    // public System.Void .ctor(System.Type ttype, ExitGames.Client.Photon.StructWrapping.WrappedType wrappedType)
    // Offset: 0x1B6896C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StructWrapper* New_ctor(::System::Type* ttype, ::ExitGames::Client::Photon::StructWrapping::WrappedType wrappedType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::StructWrapping::StructWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StructWrapper*, creationType>(ttype, wrappedType)));
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose();
    // public System.String ToString(System.Boolean writeType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW ToString(bool writeType);
  }; // ExitGames.Client.Photon.StructWrapping.StructWrapper
  #pragma pack(pop)
  static check_size<sizeof(StructWrapper), 24 + sizeof(::System::Type*)> __ExitGames_Client_Photon_StructWrapping_StructWrapperSizeCheck;
  static_assert(sizeof(StructWrapper) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::StructWrapping::StructWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::StructWrapping::StructWrapper::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::StructWrapping::StructWrapper::*)()>(&ExitGames::Client::Photon::StructWrapping::StructWrapper::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::StructWrapping::StructWrapper*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::StructWrapping::StructWrapper::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::StructWrapping::StructWrapper::*)(bool)>(&ExitGames::Client::Photon::StructWrapping::StructWrapper::ToString)> {
  static const MethodInfo* get() {
    static auto* writeType = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::StructWrapping::StructWrapper*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writeType});
  }
};
