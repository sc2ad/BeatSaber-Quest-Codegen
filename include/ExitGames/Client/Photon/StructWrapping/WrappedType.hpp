// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: ExitGames.Client.Photon.StructWrapping
namespace ExitGames::Client::Photon::StructWrapping {
  // Forward declaring type: WrappedType
  struct WrappedType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::StructWrapping::WrappedType, "ExitGames.Client.Photon.StructWrapping", "WrappedType");
// Type namespace: ExitGames.Client.Photon.StructWrapping
namespace ExitGames::Client::Photon::StructWrapping {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.StructWrapping.WrappedType
  // [TokenAttribute] Offset: FFFFFFFF
  struct WrappedType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: WrappedType
    constexpr WrappedType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Unknown
    static constexpr const int Unknown = 0;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Unknown
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Unknown();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Unknown
    static void _set_Unknown(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Bool
    static constexpr const int Bool = 1;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Bool
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Bool();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Bool
    static void _set_Bool(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Byte
    static constexpr const int Byte = 2;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Byte
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Byte();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Byte
    static void _set_Byte(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int16
    static constexpr const int Int16 = 3;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int16
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Int16();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int16
    static void _set_Int16(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int32
    static constexpr const int Int32 = 4;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int32
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Int32();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int32
    static void _set_Int32(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int64
    static constexpr const int Int64 = 5;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int64
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Int64();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Int64
    static void _set_Int64(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Single
    static constexpr const int Single = 6;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Single
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Single();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Single
    static void _set_Single(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // static field const value: static public ExitGames.Client.Photon.StructWrapping.WrappedType Double
    static constexpr const int Double = 7;
    // Get static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Double
    static ::ExitGames::Client::Photon::StructWrapping::WrappedType _get_Double();
    // Set static field: static public ExitGames.Client.Photon.StructWrapping.WrappedType Double
    static void _set_Double(::ExitGames::Client::Photon::StructWrapping::WrappedType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ExitGames.Client.Photon.StructWrapping.WrappedType
  #pragma pack(pop)
  static check_size<sizeof(WrappedType), 0 + sizeof(int)> __ExitGames_Client_Photon_StructWrapping_WrappedTypeSizeCheck;
  static_assert(sizeof(WrappedType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
