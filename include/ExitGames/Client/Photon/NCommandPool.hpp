// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: NCommand
  class NCommand;
  // Forward declaring type: EnetPeer
  class EnetPeer;
  // Forward declaring type: StreamBuffer
  class StreamBuffer;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: NCommandPool
  class NCommandPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::NCommandPool);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::NCommandPool*, "ExitGames.Client.Photon", "NCommandPool");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.NCommandPool
  // [TokenAttribute] Offset: FFFFFFFF
  class NCommandPool : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.NCommand> pool
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>* pool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*
    constexpr operator ::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*() const noexcept {
      return pool;
    }
    // Get instance field reference: private readonly System.Collections.Generic.Stack`1<ExitGames.Client.Photon.NCommand> pool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*& dyn_pool();
    // public System.Void .ctor()
    // Offset: 0x112B62C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NCommandPool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::NCommandPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NCommandPool*, creationType>()));
    }
    // public ExitGames.Client.Photon.NCommand Acquire(ExitGames.Client.Photon.EnetPeer peer, System.Byte[] inBuff, ref System.Int32 readingOffset)
    // Offset: 0x1133050
    ::ExitGames::Client::Photon::NCommand* Acquire(::ExitGames::Client::Photon::EnetPeer* peer, ::ArrayW<uint8_t> inBuff, ByRef<int> readingOffset);
    // public ExitGames.Client.Photon.NCommand Acquire(ExitGames.Client.Photon.EnetPeer peer, System.Byte commandType, ExitGames.Client.Photon.StreamBuffer payload, System.Byte channel)
    // Offset: 0x112C1B4
    ::ExitGames::Client::Photon::NCommand* Acquire(::ExitGames::Client::Photon::EnetPeer* peer, uint8_t commandType, ::ExitGames::Client::Photon::StreamBuffer* payload, uint8_t channel);
    // public System.Void Release(ExitGames.Client.Photon.NCommand nCommand)
    // Offset: 0x113815C
    void Release(::ExitGames::Client::Photon::NCommand* nCommand);
  }; // ExitGames.Client.Photon.NCommandPool
  #pragma pack(pop)
  static check_size<sizeof(NCommandPool), 16 + sizeof(::System::Collections::Generic::Stack_1<::ExitGames::Client::Photon::NCommand*>*)> __ExitGames_Client_Photon_NCommandPoolSizeCheck;
  static_assert(sizeof(NCommandPool) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::NCommandPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::NCommandPool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::NCommand* (ExitGames::Client::Photon::NCommandPool::*)(::ExitGames::Client::Photon::EnetPeer*, ::ArrayW<uint8_t>, ByRef<int>)>(&ExitGames::Client::Photon::NCommandPool::Acquire)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EnetPeer")->byval_arg;
    static auto* inBuff = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* readingOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::NCommandPool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, inBuff, readingOffset});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::NCommandPool::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::NCommand* (ExitGames::Client::Photon::NCommandPool::*)(::ExitGames::Client::Photon::EnetPeer*, uint8_t, ::ExitGames::Client::Photon::StreamBuffer*, uint8_t)>(&ExitGames::Client::Photon::NCommandPool::Acquire)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EnetPeer")->byval_arg;
    static auto* commandType = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* payload = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::NCommandPool*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, commandType, payload, channel});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::NCommandPool::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::NCommandPool::*)(::ExitGames::Client::Photon::NCommand*)>(&ExitGames::Client::Photon::NCommandPool::Release)> {
  static const MethodInfo* get() {
    static auto* nCommand = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "NCommand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::NCommandPool*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nCommand});
  }
};
