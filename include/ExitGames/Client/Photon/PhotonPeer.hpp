// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.TargetFrameworks
#include "ExitGames/Client/Photon/TargetFrameworks.hpp"
// Including type: ExitGames.Client.Photon.SerializationProtocol
#include "ExitGames/Client/Photon/SerializationProtocol.hpp"
// Including type: ExitGames.Client.Photon.ConnectionProtocol
#include "ExitGames/Client/Photon/ConnectionProtocol.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: ExitGames.Client.Photon.SupportClass
#include "ExitGames/Client/Photon/SupportClass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: IPhotonPeerListener
  class IPhotonPeerListener;
  // Forward declaring type: DisconnectMessage
  class DisconnectMessage;
  // Forward declaring type: ITrafficRecorder
  class ITrafficRecorder;
  // Forward declaring type: TrafficStats
  class TrafficStats;
  // Forward declaring type: TrafficStatsGameLevel
  class TrafficStatsGameLevel;
  // Forward declaring type: PeerBase
  class PeerBase;
  // Forward declaring type: ByteArraySlicePool
  class ByteArraySlicePool;
  // Forward declaring type: PeerStateValue
  struct PeerStateValue;
  // Forward declaring type: NetworkSimulationSet
  class NetworkSimulationSet;
  // Forward declaring type: SendOptions
  struct SendOptions;
  // Forward declaring type: ParameterDictionary
  class ParameterDictionary;
  // Forward declaring type: SerializeMethod
  class SerializeMethod;
  // Forward declaring type: DeserializeMethod
  class DeserializeMethod;
  // Forward declaring type: SerializeStreamMethod
  class SerializeStreamMethod;
  // Forward declaring type: DeserializeStreamMethod
  class DeserializeStreamMethod;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Forward declaring namespace: ExitGames::Client::Photon::Encryption
namespace ExitGames::Client::Photon::Encryption {
  // Forward declaring type: IPhotonEncryptor
  class IPhotonEncryptor;
}
// Completed forward declares
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonPeer
  class PhotonPeer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExitGames::Client::Photon::PhotonPeer);
DEFINE_IL2CPP_ARG_TYPE(::ExitGames::Client::Photon::PhotonPeer*, "ExitGames.Client.Photon", "PhotonPeer");
// Type namespace: ExitGames.Client.Photon
namespace ExitGames::Client::Photon {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: ExitGames.Client.Photon.PhotonPeer
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonPeer : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x94CA24
    // private System.Int32 <CommandBufferSize>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int CommandBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94CA60
    // private System.Int32 <LimitOfUnreliableCommands>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int LimitOfUnreliableCommands;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [ObsoleteAttribute] Offset: 0x94CA9C
    // public System.Int32 WarningSize
    // Size: 0x4
    // Offset: 0x18
    int WarningSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [ObsoleteAttribute] Offset: 0x94CB0C
    // public System.Int32 CommandLogSize
    // Size: 0x4
    // Offset: 0x1C
    int CommandLogSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public ExitGames.Client.Photon.TargetFrameworks TargetFramework
    // Size: 0x4
    // Offset: 0x20
    ::ExitGames::Client::Photon::TargetFrameworks TargetFramework;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::TargetFrameworks) == 0x4);
    // public System.Boolean RemoveAppIdFromWebSocketPath
    // Size: 0x1
    // Offset: 0x24
    bool RemoveAppIdFromWebSocketPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected internal System.Byte ClientSdkId
    // Size: 0x1
    // Offset: 0x25
    uint8_t ClientSdkId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Boolean UseInitV3
    // Size: 0x1
    // Offset: 0x26
    bool UseInitV3;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseInitV3 and: SerializationProtocolType
    char __padding7[0x1] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x94CBEC
    // private ExitGames.Client.Photon.SerializationProtocol <SerializationProtocolType>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::ExitGames::Client::Photon::SerializationProtocol SerializationProtocolType;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::SerializationProtocol) == 0x4);
    // Padding between fields: SerializationProtocolType and: SocketImplementationConfig
    char __padding8[0x4] = {};
    // public System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Type> SocketImplementationConfig
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, ::System::Type*>* SocketImplementationConfig;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, ::System::Type*>*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CC28
    // private System.Type <SocketImplementation>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* SocketImplementation;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // public ExitGames.Client.Photon.DebugLevel DebugOut
    // Size: 0x1
    // Offset: 0x40
    ::ExitGames::Client::Photon::DebugLevel DebugOut;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // Padding between fields: DebugOut and: Listener
    char __padding11[0x7] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x94CC64
    // private ExitGames.Client.Photon.IPhotonPeerListener <Listener>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ExitGames::Client::Photon::IPhotonPeerListener* Listener;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::IPhotonPeerListener*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CCA0
    // private System.Action`1<ExitGames.Client.Photon.DisconnectMessage> OnDisconnectMessage
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>* OnDisconnectMessage;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>*) == 0x8);
    // private System.Boolean reuseEventInstance
    // Size: 0x1
    // Offset: 0x58
    bool reuseEventInstance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useByteArraySlicePoolForEvents
    // Size: 0x1
    // Offset: 0x59
    bool useByteArraySlicePoolForEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wrapIncomingStructs
    // Size: 0x1
    // Offset: 0x5A
    bool wrapIncomingStructs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SendInCreationOrder
    // Size: 0x1
    // Offset: 0x5B
    bool SendInCreationOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 SequenceDeltaLimitResends
    // Size: 0x4
    // Offset: 0x5C
    int SequenceDeltaLimitResends;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SequenceDeltaLimitSends
    // Size: 0x4
    // Offset: 0x60
    int SequenceDeltaLimitSends;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: SequenceDeltaLimitSends and: TrafficRecorder
    char __padding19[0x4] = {};
    // public ExitGames.Client.Photon.ITrafficRecorder TrafficRecorder
    // Size: 0x8
    // Offset: 0x68
    ::ExitGames::Client::Photon::ITrafficRecorder* TrafficRecorder;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::ITrafficRecorder*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CCDC
    // private System.Boolean <EnableServerTracing>k__BackingField
    // Size: 0x1
    // Offset: 0x70
    bool EnableServerTracing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte quickResendAttempts
    // Size: 0x1
    // Offset: 0x71
    uint8_t quickResendAttempts;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte ChannelCount
    // Size: 0x1
    // Offset: 0x72
    uint8_t ChannelCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Boolean EnableEncryptedFlag
    // Size: 0x1
    // Offset: 0x73
    bool EnableEncryptedFlag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean crcEnabled
    // Size: 0x1
    // Offset: 0x74
    bool crcEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: crcEnabled and: SentCountAllowance
    char __padding25[0x3] = {};
    // public System.Int32 SentCountAllowance
    // Size: 0x4
    // Offset: 0x78
    int SentCountAllowance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 InitialResendTimeMax
    // Size: 0x4
    // Offset: 0x7C
    int InitialResendTimeMax;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 TimePingInterval
    // Size: 0x4
    // Offset: 0x80
    int TimePingInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 disconnectTimeout
    // Size: 0x4
    // Offset: 0x84
    int disconnectTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94CD18
    // private ExitGames.Client.Photon.ConnectionProtocol <TransportProtocol>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    ::ExitGames::Client::Photon::ConnectionProtocol TransportProtocol;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::ConnectionProtocol) == 0x1);
    // Padding between fields: TransportProtocol and: mtu
    char __padding30[0x3] = {};
    // private System.Int32 mtu
    // Size: 0x4
    // Offset: 0x8C
    int mtu;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94CD54
    // private System.Boolean <IsSendingOnlyAcks>k__BackingField
    // Size: 0x1
    // Offset: 0x90
    bool IsSendingOnlyAcks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean RandomizeSequenceNumbers
    // Size: 0x1
    // Offset: 0x91
    bool RandomizeSequenceNumbers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RandomizeSequenceNumbers and: RandomizedSequenceNumbers
    char __padding33[0x6] = {};
    // System.Byte[] RandomizedSequenceNumbers
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<uint8_t> RandomizedSequenceNumbers;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Boolean GcmDatagramEncryption
    // Size: 0x1
    // Offset: 0xA0
    bool GcmDatagramEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GcmDatagramEncryption and: TrafficStatsIncoming
    char __padding35[0x7] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x94CD90
    // private ExitGames.Client.Photon.TrafficStats <TrafficStatsIncoming>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::ExitGames::Client::Photon::TrafficStats* TrafficStatsIncoming;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::TrafficStats*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CDCC
    // private ExitGames.Client.Photon.TrafficStats <TrafficStatsOutgoing>k__BackingField
    // Size: 0x8
    // Offset: 0xB0
    ::ExitGames::Client::Photon::TrafficStats* TrafficStatsOutgoing;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::TrafficStats*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CE08
    // private ExitGames.Client.Photon.TrafficStatsGameLevel <TrafficStatsGameLevel>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::ExitGames::Client::Photon::TrafficStatsGameLevel* TrafficStatsGameLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::TrafficStatsGameLevel*) == 0x8);
    // private System.Diagnostics.Stopwatch trafficStatsStopwatch
    // Size: 0x8
    // Offset: 0xC0
    ::System::Diagnostics::Stopwatch* trafficStatsStopwatch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // private System.Boolean trafficStatsEnabled
    // Size: 0x1
    // Offset: 0xC8
    bool trafficStatsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trafficStatsEnabled and: peerBase
    char __padding40[0x7] = {};
    // ExitGames.Client.Photon.PeerBase peerBase
    // Size: 0x8
    // Offset: 0xD0
    ::ExitGames::Client::Photon::PeerBase* peerBase;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::PeerBase*) == 0x8);
    // private readonly System.Object SendOutgoingLockObject
    // Size: 0x8
    // Offset: 0xD8
    ::Il2CppObject* SendOutgoingLockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Object DispatchLockObject
    // Size: 0x8
    // Offset: 0xE0
    ::Il2CppObject* DispatchLockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Object EnqueueLock
    // Size: 0x8
    // Offset: 0xE8
    ::Il2CppObject* EnqueueLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Type payloadEncryptorType
    // Size: 0x8
    // Offset: 0xF0
    ::System::Type* payloadEncryptorType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // protected internal System.Byte[] PayloadEncryptionSecret
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<uint8_t> PayloadEncryptionSecret;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Type encryptorType
    // Size: 0x8
    // Offset: 0x100
    ::System::Type* encryptorType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // protected internal ExitGames.Client.Photon.Encryption.IPhotonEncryptor Encryptor
    // Size: 0x8
    // Offset: 0x108
    ::ExitGames::Client::Photon::Encryption::IPhotonEncryptor* Encryptor;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::Encryption::IPhotonEncryptor*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94CE44
    // private System.Int32 <CountDiscarded>k__BackingField
    // Size: 0x4
    // Offset: 0x110
    int CountDiscarded;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94CE80
    // private System.Int32 <DeltaUnreliableNumber>k__BackingField
    // Size: 0x4
    // Offset: 0x114
    int DeltaUnreliableNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // [ObsoleteAttribute] Offset: 0x94CAD4
    // static field const value: static public System.Boolean NativeDatagramEncrypt
    static constexpr const bool NativeDatagramEncrypt = true;
    // Get static field: static public System.Boolean NativeDatagramEncrypt
    static bool _get_NativeDatagramEncrypt();
    // Set static field: static public System.Boolean NativeDatagramEncrypt
    static void _set_NativeDatagramEncrypt(bool value);
    // static field const value: static public System.Boolean NoSocket
    static constexpr const bool NoSocket = false;
    // Get static field: static public System.Boolean NoSocket
    static bool _get_NoSocket();
    // Set static field: static public System.Boolean NoSocket
    static void _set_NoSocket(bool value);
    // static field const value: static public System.Boolean DebugBuild
    static constexpr const bool DebugBuild = true;
    // Get static field: static public System.Boolean DebugBuild
    static bool _get_DebugBuild();
    // Set static field: static public System.Boolean DebugBuild
    static void _set_DebugBuild(bool value);
    // static field const value: static public System.Int32 NativeEncryptorApiVersion
    static constexpr const int NativeEncryptorApiVersion = 2;
    // Get static field: static public System.Int32 NativeEncryptorApiVersion
    static int _get_NativeEncryptorApiVersion();
    // Set static field: static public System.Int32 NativeEncryptorApiVersion
    static void _set_NativeEncryptorApiVersion(int value);
    // Get static field: static public System.Boolean NoNativeCallbacks
    static bool _get_NoNativeCallbacks();
    // Set static field: static public System.Boolean NoNativeCallbacks
    static void _set_NoNativeCallbacks(bool value);
    // Get static field: static private System.String clientVersion
    static ::StringW _get_clientVersion();
    // Set static field: static private System.String clientVersion
    static void _set_clientVersion(::StringW value);
    // [ObsoleteAttribute] Offset: 0x94CB44
    // Get static field: static public readonly System.Boolean NativeSocketLibAvailable
    static bool _get_NativeSocketLibAvailable();
    // Set static field: static public readonly System.Boolean NativeSocketLibAvailable
    static void _set_NativeSocketLibAvailable(bool value);
    // [ObsoleteAttribute] Offset: 0x94CB7C
    // Get static field: static public readonly System.Boolean NativePayloadEncryptionLibAvailable
    static bool _get_NativePayloadEncryptionLibAvailable();
    // Set static field: static public readonly System.Boolean NativePayloadEncryptionLibAvailable
    static void _set_NativePayloadEncryptionLibAvailable(bool value);
    // [ObsoleteAttribute] Offset: 0x94CBB4
    // Get static field: static public readonly System.Boolean NativeDatagramEncryptionLibAvailable
    static bool _get_NativeDatagramEncryptionLibAvailable();
    // Set static field: static public readonly System.Boolean NativeDatagramEncryptionLibAvailable
    static void _set_NativeDatagramEncryptionLibAvailable(bool value);
    // Get static field: static public System.Int32 OutgoingStreamBufferSize
    static int _get_OutgoingStreamBufferSize();
    // Set static field: static public System.Int32 OutgoingStreamBufferSize
    static void _set_OutgoingStreamBufferSize(int value);
    // Get static field: static public System.Boolean AsyncKeyExchange
    static bool _get_AsyncKeyExchange();
    // Set static field: static public System.Boolean AsyncKeyExchange
    static void _set_AsyncKeyExchange(bool value);
    // Get instance field reference: private System.Int32 <CommandBufferSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CommandBufferSize$k__BackingField();
    // Get instance field reference: private System.Int32 <LimitOfUnreliableCommands>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LimitOfUnreliableCommands$k__BackingField();
    // Get instance field reference: public System.Int32 WarningSize
    [[deprecated("Use field access instead!")]] int& dyn_WarningSize();
    // Get instance field reference: public System.Int32 CommandLogSize
    [[deprecated("Use field access instead!")]] int& dyn_CommandLogSize();
    // Get instance field reference: public ExitGames.Client.Photon.TargetFrameworks TargetFramework
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::TargetFrameworks& dyn_TargetFramework();
    // Get instance field reference: public System.Boolean RemoveAppIdFromWebSocketPath
    [[deprecated("Use field access instead!")]] bool& dyn_RemoveAppIdFromWebSocketPath();
    // Get instance field reference: protected internal System.Byte ClientSdkId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ClientSdkId();
    // Get instance field reference: System.Boolean UseInitV3
    [[deprecated("Use field access instead!")]] bool& dyn_UseInitV3();
    // Get instance field reference: private ExitGames.Client.Photon.SerializationProtocol <SerializationProtocolType>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::SerializationProtocol& dyn_$SerializationProtocolType$k__BackingField();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Type> SocketImplementationConfig
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, ::System::Type*>*& dyn_SocketImplementationConfig();
    // Get instance field reference: private System.Type <SocketImplementation>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$SocketImplementation$k__BackingField();
    // Get instance field reference: public ExitGames.Client.Photon.DebugLevel DebugOut
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_DebugOut();
    // Get instance field reference: private ExitGames.Client.Photon.IPhotonPeerListener <Listener>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::IPhotonPeerListener*& dyn_$Listener$k__BackingField();
    // Get instance field reference: private System.Action`1<ExitGames.Client.Photon.DisconnectMessage> OnDisconnectMessage
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>*& dyn_OnDisconnectMessage();
    // Get instance field reference: private System.Boolean reuseEventInstance
    [[deprecated("Use field access instead!")]] bool& dyn_reuseEventInstance();
    // Get instance field reference: private System.Boolean useByteArraySlicePoolForEvents
    [[deprecated("Use field access instead!")]] bool& dyn_useByteArraySlicePoolForEvents();
    // Get instance field reference: private System.Boolean wrapIncomingStructs
    [[deprecated("Use field access instead!")]] bool& dyn_wrapIncomingStructs();
    // Get instance field reference: public System.Boolean SendInCreationOrder
    [[deprecated("Use field access instead!")]] bool& dyn_SendInCreationOrder();
    // Get instance field reference: public System.Int32 SequenceDeltaLimitResends
    [[deprecated("Use field access instead!")]] int& dyn_SequenceDeltaLimitResends();
    // Get instance field reference: public System.Int32 SequenceDeltaLimitSends
    [[deprecated("Use field access instead!")]] int& dyn_SequenceDeltaLimitSends();
    // Get instance field reference: public ExitGames.Client.Photon.ITrafficRecorder TrafficRecorder
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ITrafficRecorder*& dyn_TrafficRecorder();
    // Get instance field reference: private System.Boolean <EnableServerTracing>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EnableServerTracing$k__BackingField();
    // Get instance field reference: private System.Byte quickResendAttempts
    [[deprecated("Use field access instead!")]] uint8_t& dyn_quickResendAttempts();
    // Get instance field reference: public System.Byte ChannelCount
    [[deprecated("Use field access instead!")]] uint8_t& dyn_ChannelCount();
    // Get instance field reference: public System.Boolean EnableEncryptedFlag
    [[deprecated("Use field access instead!")]] bool& dyn_EnableEncryptedFlag();
    // Get instance field reference: private System.Boolean crcEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_crcEnabled();
    // Get instance field reference: public System.Int32 SentCountAllowance
    [[deprecated("Use field access instead!")]] int& dyn_SentCountAllowance();
    // Get instance field reference: public System.Int32 InitialResendTimeMax
    [[deprecated("Use field access instead!")]] int& dyn_InitialResendTimeMax();
    // Get instance field reference: public System.Int32 TimePingInterval
    [[deprecated("Use field access instead!")]] int& dyn_TimePingInterval();
    // Get instance field reference: private System.Int32 disconnectTimeout
    [[deprecated("Use field access instead!")]] int& dyn_disconnectTimeout();
    // Get instance field reference: private ExitGames.Client.Photon.ConnectionProtocol <TransportProtocol>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::ConnectionProtocol& dyn_$TransportProtocol$k__BackingField();
    // Get instance field reference: private System.Int32 mtu
    [[deprecated("Use field access instead!")]] int& dyn_mtu();
    // Get instance field reference: private System.Boolean <IsSendingOnlyAcks>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSendingOnlyAcks$k__BackingField();
    // Get instance field reference: System.Boolean RandomizeSequenceNumbers
    [[deprecated("Use field access instead!")]] bool& dyn_RandomizeSequenceNumbers();
    // Get instance field reference: System.Byte[] RandomizedSequenceNumbers
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_RandomizedSequenceNumbers();
    // Get instance field reference: System.Boolean GcmDatagramEncryption
    [[deprecated("Use field access instead!")]] bool& dyn_GcmDatagramEncryption();
    // Get instance field reference: private ExitGames.Client.Photon.TrafficStats <TrafficStatsIncoming>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::TrafficStats*& dyn_$TrafficStatsIncoming$k__BackingField();
    // Get instance field reference: private ExitGames.Client.Photon.TrafficStats <TrafficStatsOutgoing>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::TrafficStats*& dyn_$TrafficStatsOutgoing$k__BackingField();
    // Get instance field reference: private ExitGames.Client.Photon.TrafficStatsGameLevel <TrafficStatsGameLevel>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::TrafficStatsGameLevel*& dyn_$TrafficStatsGameLevel$k__BackingField();
    // Get instance field reference: private System.Diagnostics.Stopwatch trafficStatsStopwatch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_trafficStatsStopwatch();
    // Get instance field reference: private System.Boolean trafficStatsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_trafficStatsEnabled();
    // Get instance field reference: ExitGames.Client.Photon.PeerBase peerBase
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PeerBase*& dyn_peerBase();
    // Get instance field reference: private readonly System.Object SendOutgoingLockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_SendOutgoingLockObject();
    // Get instance field reference: private readonly System.Object DispatchLockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_DispatchLockObject();
    // Get instance field reference: private readonly System.Object EnqueueLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_EnqueueLock();
    // Get instance field reference: private System.Type payloadEncryptorType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_payloadEncryptorType();
    // Get instance field reference: protected internal System.Byte[] PayloadEncryptionSecret
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_PayloadEncryptionSecret();
    // Get instance field reference: private System.Type encryptorType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_encryptorType();
    // Get instance field reference: protected internal ExitGames.Client.Photon.Encryption.IPhotonEncryptor Encryptor
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::Encryption::IPhotonEncryptor*& dyn_Encryptor();
    // Get instance field reference: private System.Int32 <CountDiscarded>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CountDiscarded$k__BackingField();
    // Get instance field reference: private System.Int32 <DeltaUnreliableNumber>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$DeltaUnreliableNumber$k__BackingField();
    // public System.Int32 get_CommandBufferSize()
    // Offset: 0x113E568
    int get_CommandBufferSize();
    // public System.Void set_CommandBufferSize(System.Int32 value)
    // Offset: 0x113E570
    void set_CommandBufferSize(int value);
    // public System.Int32 get_LimitOfUnreliableCommands()
    // Offset: 0x113E578
    int get_LimitOfUnreliableCommands();
    // public System.Void set_LimitOfUnreliableCommands(System.Int32 value)
    // Offset: 0x113E580
    void set_LimitOfUnreliableCommands(int value);
    // public System.Int32 get_LocalTimeInMilliSeconds()
    // Offset: 0x113E588
    int get_LocalTimeInMilliSeconds();
    // protected internal System.Byte get_ClientSdkIdShifted()
    // Offset: 0x113A178
    uint8_t get_ClientSdkIdShifted();
    // public System.String get_ClientVersion()
    // Offset: 0x113A184
    ::StringW get_ClientVersion();
    // static public System.String get_Version()
    // Offset: 0x113E638
    static ::StringW get_Version();
    // public ExitGames.Client.Photon.SerializationProtocol get_SerializationProtocolType()
    // Offset: 0x113E900
    ::ExitGames::Client::Photon::SerializationProtocol get_SerializationProtocolType();
    // public System.Void set_SerializationProtocolType(ExitGames.Client.Photon.SerializationProtocol value)
    // Offset: 0x113E908
    void set_SerializationProtocolType(::ExitGames::Client::Photon::SerializationProtocol value);
    // public System.Type get_SocketImplementation()
    // Offset: 0x113E910
    ::System::Type* get_SocketImplementation();
    // System.Void set_SocketImplementation(System.Type value)
    // Offset: 0x113E918
    void set_SocketImplementation(::System::Type* value);
    // public ExitGames.Client.Photon.IPhotonPeerListener get_Listener()
    // Offset: 0x113E920
    ::ExitGames::Client::Photon::IPhotonPeerListener* get_Listener();
    // protected System.Void set_Listener(ExitGames.Client.Photon.IPhotonPeerListener value)
    // Offset: 0x113E928
    void set_Listener(::ExitGames::Client::Photon::IPhotonPeerListener* value);
    // public System.Boolean get_ReuseEventInstance()
    // Offset: 0x113BD80
    bool get_ReuseEventInstance();
    // public System.Void set_ReuseEventInstance(System.Boolean value)
    // Offset: 0x113EA78
    void set_ReuseEventInstance(bool value);
    // public System.Boolean get_UseByteArraySlicePoolForEvents()
    // Offset: 0x113BD70
    bool get_UseByteArraySlicePoolForEvents();
    // public System.Void set_UseByteArraySlicePoolForEvents(System.Boolean value)
    // Offset: 0x113EB38
    void set_UseByteArraySlicePoolForEvents(bool value);
    // public System.Boolean get_WrapIncomingStructs()
    // Offset: 0x113BD78
    bool get_WrapIncomingStructs();
    // public System.Void set_WrapIncomingStructs(System.Boolean value)
    // Offset: 0x113EB44
    void set_WrapIncomingStructs(bool value);
    // public ExitGames.Client.Photon.ByteArraySlicePool get_ByteArraySlicePool()
    // Offset: 0x113EB50
    ::ExitGames::Client::Photon::ByteArraySlicePool* get_ByteArraySlicePool();
    // public System.Int64 get_BytesIn()
    // Offset: 0x113EB78
    int64_t get_BytesIn();
    // public System.Int64 get_BytesOut()
    // Offset: 0x113EB94
    int64_t get_BytesOut();
    // public System.Int32 get_ByteCountCurrentDispatch()
    // Offset: 0x113EBB0
    int get_ByteCountCurrentDispatch();
    // public System.String get_CommandInfoCurrentDispatch()
    // Offset: 0x113EBCC
    ::StringW get_CommandInfoCurrentDispatch();
    // public System.Int32 get_ByteCountLastOperation()
    // Offset: 0x113EC48
    int get_ByteCountLastOperation();
    // public System.Boolean get_EnableServerTracing()
    // Offset: 0x113EC64
    bool get_EnableServerTracing();
    // public System.Void set_EnableServerTracing(System.Boolean value)
    // Offset: 0x113EC6C
    void set_EnableServerTracing(bool value);
    // public System.Byte get_QuickResendAttempts()
    // Offset: 0x1132350
    uint8_t get_QuickResendAttempts();
    // public System.Void set_QuickResendAttempts(System.Byte value)
    // Offset: 0x113EC78
    void set_QuickResendAttempts(uint8_t value);
    // public ExitGames.Client.Photon.PeerStateValue get_PeerState()
    // Offset: 0x113EC90
    ::ExitGames::Client::Photon::PeerStateValue get_PeerState();
    // public System.String get_PeerID()
    // Offset: 0x113ECC4
    ::StringW get_PeerID();
    // public System.Int32 get_QueuedIncomingCommands()
    // Offset: 0x113ECE4
    int get_QueuedIncomingCommands();
    // public System.Int32 get_QueuedOutgoingCommands()
    // Offset: 0x113ED04
    int get_QueuedOutgoingCommands();
    // public System.Boolean get_CrcEnabled()
    // Offset: 0x112EFD4
    bool get_CrcEnabled();
    // public System.Void set_CrcEnabled(System.Boolean value)
    // Offset: 0x113F004
    void set_CrcEnabled(bool value);
    // public System.Int32 get_PacketLossByCrc()
    // Offset: 0x113F0BC
    int get_PacketLossByCrc();
    // public System.Int32 get_PacketLossByChallenge()
    // Offset: 0x113F0D8
    int get_PacketLossByChallenge();
    // public System.Int32 get_SentReliableCommandsCount()
    // Offset: 0x113F0F4
    int get_SentReliableCommandsCount();
    // public System.Int32 get_ResentReliableCommands()
    // Offset: 0x113F114
    int get_ResentReliableCommands();
    // public System.Int32 get_DisconnectTimeout()
    // Offset: 0x11399F0
    int get_DisconnectTimeout();
    // public System.Void set_DisconnectTimeout(System.Int32 value)
    // Offset: 0x113F1C8
    void set_DisconnectTimeout(int value);
    // public System.Int32 get_ServerTimeInMilliSeconds()
    // Offset: 0x113F1F4
    int get_ServerTimeInMilliSeconds();
    // public System.Void set_LocalMsTimestampDelegate(ExitGames.Client.Photon.SupportClass/ExitGames.Client.Photon.IntegerMillisecondsDelegate value)
    // Offset: 0x113F260
    void set_LocalMsTimestampDelegate(::ExitGames::Client::Photon::SupportClass::IntegerMillisecondsDelegate* value);
    // public System.Int32 get_ConnectionTime()
    // Offset: 0x113F234
    int get_ConnectionTime();
    // public System.Int32 get_LastSendAckTime()
    // Offset: 0x113F394
    int get_LastSendAckTime();
    // public System.Int32 get_LastSendOutgoingTime()
    // Offset: 0x113F3B0
    int get_LastSendOutgoingTime();
    // public System.Int32 get_LongestSentCall()
    // Offset: 0x113F3CC
    int get_LongestSentCall();
    // public System.Void set_LongestSentCall(System.Int32 value)
    // Offset: 0x113F3E8
    void set_LongestSentCall(int value);
    // public System.Int32 get_RoundTripTime()
    // Offset: 0x113F404
    int get_RoundTripTime();
    // public System.Int32 get_RoundTripTimeVariance()
    // Offset: 0x113F420
    int get_RoundTripTimeVariance();
    // public System.Int32 get_LastRoundTripTime()
    // Offset: 0x113F43C
    int get_LastRoundTripTime();
    // public System.Int32 get_TimestampOfLastSocketReceive()
    // Offset: 0x113F458
    int get_TimestampOfLastSocketReceive();
    // public System.String get_ServerAddress()
    // Offset: 0x113F474
    ::StringW get_ServerAddress();
    // public System.String get_ServerIpAddress()
    // Offset: 0x113F490
    ::StringW get_ServerIpAddress();
    // public ExitGames.Client.Photon.ConnectionProtocol get_UsedProtocol()
    // Offset: 0x113F1AC
    ::ExitGames::Client::Photon::ConnectionProtocol get_UsedProtocol();
    // public ExitGames.Client.Photon.ConnectionProtocol get_TransportProtocol()
    // Offset: 0x113F4E0
    ::ExitGames::Client::Photon::ConnectionProtocol get_TransportProtocol();
    // public System.Void set_TransportProtocol(ExitGames.Client.Photon.ConnectionProtocol value)
    // Offset: 0x113F4E8
    void set_TransportProtocol(::ExitGames::Client::Photon::ConnectionProtocol value);
    // public System.Boolean get_IsSimulationEnabled()
    // Offset: 0x113F4F0
    bool get_IsSimulationEnabled();
    // public System.Void set_IsSimulationEnabled(System.Boolean value)
    // Offset: 0x113F534
    void set_IsSimulationEnabled(bool value);
    // public ExitGames.Client.Photon.NetworkSimulationSet get_NetworkSimulationSettings()
    // Offset: 0x113F518
    ::ExitGames::Client::Photon::NetworkSimulationSet* get_NetworkSimulationSettings();
    // public System.Int32 get_MaximumTransferUnit()
    // Offset: 0x1139AA4
    int get_MaximumTransferUnit();
    // public System.Void set_MaximumTransferUnit(System.Int32 value)
    // Offset: 0x113F61C
    void set_MaximumTransferUnit(int value);
    // public System.Boolean get_IsEncryptionAvailable()
    // Offset: 0x113F734
    bool get_IsEncryptionAvailable();
    // public System.Boolean get_IsSendingOnlyAcks()
    // Offset: 0x113F750
    bool get_IsSendingOnlyAcks();
    // public System.Void set_IsSendingOnlyAcks(System.Boolean value)
    // Offset: 0x113F758
    void set_IsSendingOnlyAcks(bool value);
    // public ExitGames.Client.Photon.TrafficStats get_TrafficStatsIncoming()
    // Offset: 0x113F764
    ::ExitGames::Client::Photon::TrafficStats* get_TrafficStatsIncoming();
    // System.Void set_TrafficStatsIncoming(ExitGames.Client.Photon.TrafficStats value)
    // Offset: 0x113F76C
    void set_TrafficStatsIncoming(::ExitGames::Client::Photon::TrafficStats* value);
    // public ExitGames.Client.Photon.TrafficStats get_TrafficStatsOutgoing()
    // Offset: 0x113F774
    ::ExitGames::Client::Photon::TrafficStats* get_TrafficStatsOutgoing();
    // System.Void set_TrafficStatsOutgoing(ExitGames.Client.Photon.TrafficStats value)
    // Offset: 0x113F77C
    void set_TrafficStatsOutgoing(::ExitGames::Client::Photon::TrafficStats* value);
    // public ExitGames.Client.Photon.TrafficStatsGameLevel get_TrafficStatsGameLevel()
    // Offset: 0x113F784
    ::ExitGames::Client::Photon::TrafficStatsGameLevel* get_TrafficStatsGameLevel();
    // System.Void set_TrafficStatsGameLevel(ExitGames.Client.Photon.TrafficStatsGameLevel value)
    // Offset: 0x113F78C
    void set_TrafficStatsGameLevel(::ExitGames::Client::Photon::TrafficStatsGameLevel* value);
    // public System.Int64 get_TrafficStatsElapsedMs()
    // Offset: 0x113F794
    int64_t get_TrafficStatsElapsedMs();
    // public System.Boolean get_TrafficStatsEnabled()
    // Offset: 0x113CCE0
    bool get_TrafficStatsEnabled();
    // public System.Void set_TrafficStatsEnabled(System.Boolean value)
    // Offset: 0x113F7A8
    void set_TrafficStatsEnabled(bool value);
    // public System.Type get_PayloadEncryptorType()
    // Offset: 0x113C57C
    ::System::Type* get_PayloadEncryptorType();
    // public System.Void set_PayloadEncryptorType(System.Type value)
    // Offset: 0x113FD5C
    void set_PayloadEncryptorType(::System::Type* value);
    // public System.Type get_EncryptorType()
    // Offset: 0x113FEC0
    ::System::Type* get_EncryptorType();
    // public System.Void set_EncryptorType(System.Type value)
    // Offset: 0x113FEC8
    void set_EncryptorType(::System::Type* value);
    // public System.Int32 get_CountDiscarded()
    // Offset: 0x114002C
    int get_CountDiscarded();
    // public System.Void set_CountDiscarded(System.Int32 value)
    // Offset: 0x1140034
    void set_CountDiscarded(int value);
    // public System.Int32 get_DeltaUnreliableNumber()
    // Offset: 0x114003C
    int get_DeltaUnreliableNumber();
    // public System.Void set_DeltaUnreliableNumber(System.Int32 value)
    // Offset: 0x1140044
    void set_DeltaUnreliableNumber(int value);
    // public System.Void add_OnDisconnectMessage(System.Action`1<ExitGames.Client.Photon.DisconnectMessage> value)
    // Offset: 0x113E930
    void add_OnDisconnectMessage(::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>* value);
    // public System.Void remove_OnDisconnectMessage(System.Action`1<ExitGames.Client.Photon.DisconnectMessage> value)
    // Offset: 0x113E9D4
    void remove_OnDisconnectMessage(::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>* value);
    // public System.Void .ctor(ExitGames.Client.Photon.ConnectionProtocol protocolType)
    // Offset: 0x114004C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonPeer* New_ctor(::ExitGames::Client::Photon::ConnectionProtocol protocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonPeer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonPeer*, creationType>(protocolType)));
    }
    // public System.Void .ctor(ExitGames.Client.Photon.IPhotonPeerListener listener, ExitGames.Client.Photon.ConnectionProtocol protocolType)
    // Offset: 0x1140388
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonPeer* New_ctor(::ExitGames::Client::Photon::IPhotonPeerListener* listener, ::ExitGames::Client::Photon::ConnectionProtocol protocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExitGames::Client::Photon::PhotonPeer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonPeer*, creationType>(listener, protocolType)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1142560
    static void _cctor();
    // public System.String CommandLogToString()
    // Offset: 0x113E5E8
    ::StringW CommandLogToString();
    // static public System.Void MessageBufferPoolTrim(System.Int32 countOfBuffers)
    // Offset: 0x113ED24
    static void MessageBufferPoolTrim(int countOfBuffers);
    // static public System.Int32 MessageBufferPoolSize()
    // Offset: 0x113EF90
    static int MessageBufferPoolSize();
    // public System.Void TrafficStatsReset()
    // Offset: 0x113F824
    void TrafficStatsReset();
    // System.Void InitializeTrafficStats()
    // Offset: 0x1139ACC
    void InitializeTrafficStats();
    // public System.String VitalStatsToString(System.Boolean all)
    // Offset: 0x113F86C
    ::StringW VitalStatsToString(bool all);
    // public System.Boolean Connect(System.String serverAddress, System.String appId, System.Object photonToken, System.Object customInitData)
    // Offset: 0x11403B4
    bool Connect(::StringW serverAddress, ::StringW appId, ::Il2CppObject* photonToken, ::Il2CppObject* customInitData);
    // public System.Boolean Connect(System.String serverAddress, System.String proxyServerAddress, System.String appId, System.Object photonToken, System.Object customInitData)
    // Offset: 0x11403D0
    bool Connect(::StringW serverAddress, ::StringW proxyServerAddress, ::StringW appId, ::Il2CppObject* photonToken, ::Il2CppObject* customInitData);
    // private System.Void CreatePeerBase()
    // Offset: 0x1140254
    void CreatePeerBase();
    // public System.Void Disconnect()
    // Offset: 0x1140CF8
    void Disconnect();
    // System.Void OnDisconnectMessageCall(ExitGames.Client.Photon.DisconnectMessage dm)
    // Offset: 0x113BD88
    void OnDisconnectMessageCall(::ExitGames::Client::Photon::DisconnectMessage* dm);
    // public System.Void StopThread()
    // Offset: 0x1140E64
    void StopThread();
    // public System.Void FetchServerTimestamp()
    // Offset: 0x1140FD0
    void FetchServerTimestamp();
    // public System.Boolean EstablishEncryption()
    // Offset: 0x1140FF4
    bool EstablishEncryption();
    // public System.Boolean InitDatagramEncryption(System.Byte[] encryptionSecret, System.Byte[] hmacSecret, System.Boolean randomizedSequenceNumbers, System.Boolean chainingModeGCM)
    // Offset: 0x11410F4
    bool InitDatagramEncryption(::ArrayW<uint8_t> encryptionSecret, ::ArrayW<uint8_t> hmacSecret, bool randomizedSequenceNumbers, bool chainingModeGCM);
    // public System.Void InitPayloadEncryption(System.Byte[] secret)
    // Offset: 0x1141654
    void InitPayloadEncryption(::ArrayW<uint8_t> secret);
    // public System.Void Service()
    // Offset: 0x114165C
    void Service();
    // public System.Boolean SendOutgoingCommands()
    // Offset: 0x11416A4
    bool SendOutgoingCommands();
    // public System.Boolean SendAcksOnly()
    // Offset: 0x114178C
    bool SendAcksOnly();
    // public System.Boolean DispatchIncomingCommands()
    // Offset: 0x1141874
    bool DispatchIncomingCommands();
    // public System.Boolean SendOperation(System.Byte operationCode, System.Collections.Generic.Dictionary`2<System.Byte,System.Object> operationParameters, ExitGames.Client.Photon.SendOptions sendOptions)
    // Offset: 0x1141970
    bool SendOperation(uint8_t operationCode, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>* operationParameters, ::ExitGames::Client::Photon::SendOptions sendOptions);
    // public System.Boolean SendOperation(System.Byte operationCode, ExitGames.Client.Photon.ParameterDictionary operationParameters, ExitGames.Client.Photon.SendOptions sendOptions)
    // Offset: 0x1141ED8
    bool SendOperation(uint8_t operationCode, ::ExitGames::Client::Photon::ParameterDictionary* operationParameters, ::ExitGames::Client::Photon::SendOptions sendOptions);
    // static public System.Boolean RegisterType(System.Type customType, System.Byte code, ExitGames.Client.Photon.SerializeMethod serializeMethod, ExitGames.Client.Photon.DeserializeMethod constructor)
    // Offset: 0x1142440
    static bool RegisterType(::System::Type* customType, uint8_t code, ::ExitGames::Client::Photon::SerializeMethod* serializeMethod, ::ExitGames::Client::Photon::DeserializeMethod* constructor);
    // static public System.Boolean RegisterType(System.Type customType, System.Byte code, ExitGames.Client.Photon.SerializeStreamMethod serializeMethod, ExitGames.Client.Photon.DeserializeStreamMethod constructor)
    // Offset: 0x11424D0
    static bool RegisterType(::System::Type* customType, uint8_t code, ::ExitGames::Client::Photon::SerializeStreamMethod* serializeMethod, ::ExitGames::Client::Photon::DeserializeStreamMethod* constructor);
    // private System.Boolean <EstablishEncryption>b__220_0()
    // Offset: 0x11425D4
    bool $EstablishEncryption$b__220_0();
  }; // ExitGames.Client.Photon.PhotonPeer
  #pragma pack(pop)
  static check_size<sizeof(PhotonPeer), 276 + sizeof(int)> __ExitGames_Client_Photon_PhotonPeerSizeCheck;
  static_assert(sizeof(PhotonPeer) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_CommandBufferSize
// Il2CppName: get_CommandBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_CommandBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_CommandBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_CommandBufferSize
// Il2CppName: set_CommandBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_CommandBufferSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_CommandBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LimitOfUnreliableCommands
// Il2CppName: get_LimitOfUnreliableCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LimitOfUnreliableCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LimitOfUnreliableCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_LimitOfUnreliableCommands
// Il2CppName: set_LimitOfUnreliableCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_LimitOfUnreliableCommands)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_LimitOfUnreliableCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LocalTimeInMilliSeconds
// Il2CppName: get_LocalTimeInMilliSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LocalTimeInMilliSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LocalTimeInMilliSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ClientSdkIdShifted
// Il2CppName: get_ClientSdkIdShifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ClientSdkIdShifted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ClientSdkIdShifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ClientVersion
// Il2CppName: get_ClientVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ClientVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ClientVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&ExitGames::Client::Photon::PhotonPeer::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_SerializationProtocolType
// Il2CppName: get_SerializationProtocolType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::SerializationProtocol (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_SerializationProtocolType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_SerializationProtocolType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_SerializationProtocolType
// Il2CppName: set_SerializationProtocolType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::SerializationProtocol)>(&ExitGames::Client::Photon::PhotonPeer::set_SerializationProtocolType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializationProtocol")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_SerializationProtocolType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_SocketImplementation
// Il2CppName: get_SocketImplementation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_SocketImplementation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_SocketImplementation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_SocketImplementation
// Il2CppName: set_SocketImplementation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::System::Type*)>(&ExitGames::Client::Photon::PhotonPeer::set_SocketImplementation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_SocketImplementation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_Listener
// Il2CppName: get_Listener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::IPhotonPeerListener* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_Listener)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_Listener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_Listener
// Il2CppName: set_Listener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::IPhotonPeerListener*)>(&ExitGames::Client::Photon::PhotonPeer::set_Listener)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "IPhotonPeerListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_Listener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ReuseEventInstance
// Il2CppName: get_ReuseEventInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ReuseEventInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ReuseEventInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_ReuseEventInstance
// Il2CppName: set_ReuseEventInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_ReuseEventInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_ReuseEventInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_UseByteArraySlicePoolForEvents
// Il2CppName: get_UseByteArraySlicePoolForEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_UseByteArraySlicePoolForEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_UseByteArraySlicePoolForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_UseByteArraySlicePoolForEvents
// Il2CppName: set_UseByteArraySlicePoolForEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_UseByteArraySlicePoolForEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_UseByteArraySlicePoolForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_WrapIncomingStructs
// Il2CppName: get_WrapIncomingStructs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_WrapIncomingStructs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_WrapIncomingStructs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_WrapIncomingStructs
// Il2CppName: set_WrapIncomingStructs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_WrapIncomingStructs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_WrapIncomingStructs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ByteArraySlicePool
// Il2CppName: get_ByteArraySlicePool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ByteArraySlicePool* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ByteArraySlicePool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ByteArraySlicePool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_BytesIn
// Il2CppName: get_BytesIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_BytesIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_BytesIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_BytesOut
// Il2CppName: get_BytesOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_BytesOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_BytesOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ByteCountCurrentDispatch
// Il2CppName: get_ByteCountCurrentDispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ByteCountCurrentDispatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ByteCountCurrentDispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_CommandInfoCurrentDispatch
// Il2CppName: get_CommandInfoCurrentDispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_CommandInfoCurrentDispatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_CommandInfoCurrentDispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ByteCountLastOperation
// Il2CppName: get_ByteCountLastOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ByteCountLastOperation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ByteCountLastOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_EnableServerTracing
// Il2CppName: get_EnableServerTracing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_EnableServerTracing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_EnableServerTracing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_EnableServerTracing
// Il2CppName: set_EnableServerTracing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_EnableServerTracing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_EnableServerTracing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_QuickResendAttempts
// Il2CppName: get_QuickResendAttempts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_QuickResendAttempts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_QuickResendAttempts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_QuickResendAttempts
// Il2CppName: set_QuickResendAttempts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(uint8_t)>(&ExitGames::Client::Photon::PhotonPeer::set_QuickResendAttempts)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_QuickResendAttempts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_PeerState
// Il2CppName: get_PeerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::PeerStateValue (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_PeerState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_PeerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_PeerID
// Il2CppName: get_PeerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_PeerID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_PeerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_QueuedIncomingCommands
// Il2CppName: get_QueuedIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_QueuedIncomingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_QueuedIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_QueuedOutgoingCommands
// Il2CppName: get_QueuedOutgoingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_QueuedOutgoingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_QueuedOutgoingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_CrcEnabled
// Il2CppName: get_CrcEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_CrcEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_CrcEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_CrcEnabled
// Il2CppName: set_CrcEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_CrcEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_CrcEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_PacketLossByCrc
// Il2CppName: get_PacketLossByCrc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_PacketLossByCrc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_PacketLossByCrc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_PacketLossByChallenge
// Il2CppName: get_PacketLossByChallenge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_PacketLossByChallenge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_PacketLossByChallenge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_SentReliableCommandsCount
// Il2CppName: get_SentReliableCommandsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_SentReliableCommandsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_SentReliableCommandsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ResentReliableCommands
// Il2CppName: get_ResentReliableCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ResentReliableCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ResentReliableCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_DisconnectTimeout
// Il2CppName: get_DisconnectTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_DisconnectTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_DisconnectTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_DisconnectTimeout
// Il2CppName: set_DisconnectTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_DisconnectTimeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_DisconnectTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ServerTimeInMilliSeconds
// Il2CppName: get_ServerTimeInMilliSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ServerTimeInMilliSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ServerTimeInMilliSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_LocalMsTimestampDelegate
// Il2CppName: set_LocalMsTimestampDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::SupportClass::IntegerMillisecondsDelegate*)>(&ExitGames::Client::Photon::PhotonPeer::set_LocalMsTimestampDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SupportClass/IntegerMillisecondsDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_LocalMsTimestampDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ConnectionTime
// Il2CppName: get_ConnectionTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ConnectionTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ConnectionTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LastSendAckTime
// Il2CppName: get_LastSendAckTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LastSendAckTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LastSendAckTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LastSendOutgoingTime
// Il2CppName: get_LastSendOutgoingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LastSendOutgoingTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LastSendOutgoingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LongestSentCall
// Il2CppName: get_LongestSentCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LongestSentCall)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LongestSentCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_LongestSentCall
// Il2CppName: set_LongestSentCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_LongestSentCall)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_LongestSentCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_RoundTripTime
// Il2CppName: get_RoundTripTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_RoundTripTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_RoundTripTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_RoundTripTimeVariance
// Il2CppName: get_RoundTripTimeVariance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_RoundTripTimeVariance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_RoundTripTimeVariance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_LastRoundTripTime
// Il2CppName: get_LastRoundTripTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_LastRoundTripTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_LastRoundTripTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TimestampOfLastSocketReceive
// Il2CppName: get_TimestampOfLastSocketReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TimestampOfLastSocketReceive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TimestampOfLastSocketReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ServerAddress
// Il2CppName: get_ServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_ServerIpAddress
// Il2CppName: get_ServerIpAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_ServerIpAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_ServerIpAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_UsedProtocol
// Il2CppName: get_UsedProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ConnectionProtocol (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_UsedProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_UsedProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TransportProtocol
// Il2CppName: get_TransportProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ConnectionProtocol (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TransportProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TransportProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_TransportProtocol
// Il2CppName: set_TransportProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::ConnectionProtocol)>(&ExitGames::Client::Photon::PhotonPeer::set_TransportProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ConnectionProtocol")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_TransportProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_IsSimulationEnabled
// Il2CppName: get_IsSimulationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_IsSimulationEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_IsSimulationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_IsSimulationEnabled
// Il2CppName: set_IsSimulationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_IsSimulationEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_IsSimulationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_NetworkSimulationSettings
// Il2CppName: get_NetworkSimulationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::NetworkSimulationSet* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_NetworkSimulationSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_NetworkSimulationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_MaximumTransferUnit
// Il2CppName: get_MaximumTransferUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_MaximumTransferUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_MaximumTransferUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_MaximumTransferUnit
// Il2CppName: set_MaximumTransferUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_MaximumTransferUnit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_MaximumTransferUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_IsEncryptionAvailable
// Il2CppName: get_IsEncryptionAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_IsEncryptionAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_IsEncryptionAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_IsSendingOnlyAcks
// Il2CppName: get_IsSendingOnlyAcks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_IsSendingOnlyAcks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_IsSendingOnlyAcks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_IsSendingOnlyAcks
// Il2CppName: set_IsSendingOnlyAcks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_IsSendingOnlyAcks)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_IsSendingOnlyAcks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsIncoming
// Il2CppName: get_TrafficStatsIncoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStats* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsIncoming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TrafficStatsIncoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsIncoming
// Il2CppName: set_TrafficStatsIncoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::TrafficStats*)>(&ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsIncoming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "TrafficStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_TrafficStatsIncoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsOutgoing
// Il2CppName: get_TrafficStatsOutgoing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStats* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsOutgoing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TrafficStatsOutgoing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsOutgoing
// Il2CppName: set_TrafficStatsOutgoing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::TrafficStats*)>(&ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsOutgoing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "TrafficStats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_TrafficStatsOutgoing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsGameLevel
// Il2CppName: get_TrafficStatsGameLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::TrafficStatsGameLevel* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsGameLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TrafficStatsGameLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsGameLevel
// Il2CppName: set_TrafficStatsGameLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::TrafficStatsGameLevel*)>(&ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsGameLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "TrafficStatsGameLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_TrafficStatsGameLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsElapsedMs
// Il2CppName: get_TrafficStatsElapsedMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsElapsedMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TrafficStatsElapsedMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsEnabled
// Il2CppName: get_TrafficStatsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_TrafficStatsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_TrafficStatsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsEnabled
// Il2CppName: set_TrafficStatsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::set_TrafficStatsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_TrafficStatsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_PayloadEncryptorType
// Il2CppName: get_PayloadEncryptorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_PayloadEncryptorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_PayloadEncryptorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_PayloadEncryptorType
// Il2CppName: set_PayloadEncryptorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::System::Type*)>(&ExitGames::Client::Photon::PhotonPeer::set_PayloadEncryptorType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_PayloadEncryptorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_EncryptorType
// Il2CppName: get_EncryptorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_EncryptorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_EncryptorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_EncryptorType
// Il2CppName: set_EncryptorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::System::Type*)>(&ExitGames::Client::Photon::PhotonPeer::set_EncryptorType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_EncryptorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_CountDiscarded
// Il2CppName: get_CountDiscarded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_CountDiscarded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_CountDiscarded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_CountDiscarded
// Il2CppName: set_CountDiscarded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_CountDiscarded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_CountDiscarded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::get_DeltaUnreliableNumber
// Il2CppName: get_DeltaUnreliableNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::get_DeltaUnreliableNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "get_DeltaUnreliableNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::set_DeltaUnreliableNumber
// Il2CppName: set_DeltaUnreliableNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(int)>(&ExitGames::Client::Photon::PhotonPeer::set_DeltaUnreliableNumber)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "set_DeltaUnreliableNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::add_OnDisconnectMessage
// Il2CppName: add_OnDisconnectMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>*)>(&ExitGames::Client::Photon::PhotonPeer::add_OnDisconnectMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DisconnectMessage")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "add_OnDisconnectMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::remove_OnDisconnectMessage
// Il2CppName: remove_OnDisconnectMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::System::Action_1<::ExitGames::Client::Photon::DisconnectMessage*>*)>(&ExitGames::Client::Photon::PhotonPeer::remove_OnDisconnectMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DisconnectMessage")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "remove_OnDisconnectMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ExitGames::Client::Photon::PhotonPeer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::CommandLogToString
// Il2CppName: CommandLogToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::CommandLogToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "CommandLogToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::MessageBufferPoolTrim
// Il2CppName: MessageBufferPoolTrim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&ExitGames::Client::Photon::PhotonPeer::MessageBufferPoolTrim)> {
  static const MethodInfo* get() {
    static auto* countOfBuffers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "MessageBufferPoolTrim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{countOfBuffers});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::MessageBufferPoolSize
// Il2CppName: MessageBufferPoolSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&ExitGames::Client::Photon::PhotonPeer::MessageBufferPoolSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "MessageBufferPoolSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::TrafficStatsReset
// Il2CppName: TrafficStatsReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::TrafficStatsReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "TrafficStatsReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::InitializeTrafficStats
// Il2CppName: InitializeTrafficStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::InitializeTrafficStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "InitializeTrafficStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::VitalStatsToString
// Il2CppName: VitalStatsToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExitGames::Client::Photon::PhotonPeer::*)(bool)>(&ExitGames::Client::Photon::PhotonPeer::VitalStatsToString)> {
  static const MethodInfo* get() {
    static auto* all = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "VitalStatsToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{all});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)(::StringW, ::StringW, ::Il2CppObject*, ::Il2CppObject*)>(&ExitGames::Client::Photon::PhotonPeer::Connect)> {
  static const MethodInfo* get() {
    static auto* serverAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonToken = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* customInitData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAddress, appId, photonToken, customInitData});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)(::StringW, ::StringW, ::StringW, ::Il2CppObject*, ::Il2CppObject*)>(&ExitGames::Client::Photon::PhotonPeer::Connect)> {
  static const MethodInfo* get() {
    static auto* serverAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* proxyServerAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonToken = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* customInitData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAddress, proxyServerAddress, appId, photonToken, customInitData});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::CreatePeerBase
// Il2CppName: CreatePeerBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::CreatePeerBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "CreatePeerBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::OnDisconnectMessageCall
// Il2CppName: OnDisconnectMessageCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ExitGames::Client::Photon::DisconnectMessage*)>(&ExitGames::Client::Photon::PhotonPeer::OnDisconnectMessageCall)> {
  static const MethodInfo* get() {
    static auto* dm = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DisconnectMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "OnDisconnectMessageCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dm});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::StopThread
// Il2CppName: StopThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::StopThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "StopThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::FetchServerTimestamp
// Il2CppName: FetchServerTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::FetchServerTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "FetchServerTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::EstablishEncryption
// Il2CppName: EstablishEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::EstablishEncryption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "EstablishEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::InitDatagramEncryption
// Il2CppName: InitDatagramEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>, bool, bool)>(&ExitGames::Client::Photon::PhotonPeer::InitDatagramEncryption)> {
  static const MethodInfo* get() {
    static auto* encryptionSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* hmacSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* randomizedSequenceNumbers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* chainingModeGCM = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "InitDatagramEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encryptionSecret, hmacSecret, randomizedSequenceNumbers, chainingModeGCM});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::InitPayloadEncryption
// Il2CppName: InitPayloadEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)(::ArrayW<uint8_t>)>(&ExitGames::Client::Photon::PhotonPeer::InitPayloadEncryption)> {
  static const MethodInfo* get() {
    static auto* secret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "InitPayloadEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secret});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::SendOutgoingCommands
// Il2CppName: SendOutgoingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::SendOutgoingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "SendOutgoingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::SendAcksOnly
// Il2CppName: SendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::SendAcksOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "SendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::DispatchIncomingCommands
// Il2CppName: DispatchIncomingCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::DispatchIncomingCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "DispatchIncomingCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::SendOperation
// Il2CppName: SendOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)(uint8_t, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>*, ::ExitGames::Client::Photon::SendOptions)>(&ExitGames::Client::Photon::PhotonPeer::SendOperation)> {
  static const MethodInfo* get() {
    static auto* operationCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* operationParameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* sendOptions = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "SendOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationCode, operationParameters, sendOptions});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::SendOperation
// Il2CppName: SendOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)(uint8_t, ::ExitGames::Client::Photon::ParameterDictionary*, ::ExitGames::Client::Photon::SendOptions)>(&ExitGames::Client::Photon::PhotonPeer::SendOperation)> {
  static const MethodInfo* get() {
    static auto* operationCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* operationParameters = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ParameterDictionary")->byval_arg;
    static auto* sendOptions = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "SendOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationCode, operationParameters, sendOptions});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::RegisterType
// Il2CppName: RegisterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, uint8_t, ::ExitGames::Client::Photon::SerializeMethod*, ::ExitGames::Client::Photon::DeserializeMethod*)>(&ExitGames::Client::Photon::PhotonPeer::RegisterType)> {
  static const MethodInfo* get() {
    static auto* customType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serializeMethod = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializeMethod")->byval_arg;
    static auto* constructor = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DeserializeMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "RegisterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customType, code, serializeMethod, constructor});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::RegisterType
// Il2CppName: RegisterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, uint8_t, ::ExitGames::Client::Photon::SerializeStreamMethod*, ::ExitGames::Client::Photon::DeserializeStreamMethod*)>(&ExitGames::Client::Photon::PhotonPeer::RegisterType)> {
  static const MethodInfo* get() {
    static auto* customType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serializeMethod = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializeStreamMethod")->byval_arg;
    static auto* constructor = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DeserializeStreamMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "RegisterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{customType, code, serializeMethod, constructor});
  }
};
// Writing MetadataGetter for method: ExitGames::Client::Photon::PhotonPeer::$EstablishEncryption$b__220_0
// Il2CppName: <EstablishEncryption>b__220_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExitGames::Client::Photon::PhotonPeer::*)()>(&ExitGames::Client::Photon::PhotonPeer::$EstablishEncryption$b__220_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExitGames::Client::Photon::PhotonPeer*), "<EstablishEncryption>b__220_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
