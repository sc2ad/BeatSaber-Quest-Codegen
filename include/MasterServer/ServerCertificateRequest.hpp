// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: MasterServer.IHandshakeServerToClientMessage
#include "MasterServer/IHandshakeServerToClientMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ByteArrayNetSerializable
  class ByteArrayNetSerializable;
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.ServerCertificateRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class ServerCertificateRequest : public GlobalNamespace::BaseMasterServerReliableResponse/*, public MasterServer::IHandshakeServerToClientMessage*/ {
    public:
    // Nested type: MasterServer::ServerCertificateRequest::$get_certificateList$d__5
    class $get_certificateList$d__5;
    // private readonly ByteArrayNetSerializable[] _certificateList
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::ByteArrayNetSerializable*>* certificateList;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::ByteArrayNetSerializable*>*) == 0x8);
    // private System.Int32 _certificateCount
    // Size: 0x4
    // Offset: 0x20
    int certificateCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ServerCertificateRequest
    ServerCertificateRequest(::Array<GlobalNamespace::ByteArrayNetSerializable*>* certificateList_ = {}, int certificateCount_ = {}) noexcept : certificateList{certificateList_}, certificateCount{certificateCount_} {}
    // Creating interface conversion operator: operator MasterServer::IHandshakeServerToClientMessage
    operator MasterServer::IHandshakeServerToClientMessage() noexcept {
      return *reinterpret_cast<MasterServer::IHandshakeServerToClientMessage*>(this);
    }
    // Get instance field reference: private readonly ByteArrayNetSerializable[] _certificateList
    ::Array<GlobalNamespace::ByteArrayNetSerializable*>*& dyn__certificateList();
    // Get instance field reference: private System.Int32 _certificateCount
    int& dyn__certificateCount();
    // static public PacketPool`1<MasterServer.ServerCertificateRequest> get_pool()
    // Offset: 0x12DD760
    static GlobalNamespace::PacketPool_1<MasterServer::ServerCertificateRequest*>* get_pool();
    // public System.Collections.Generic.IEnumerable`1<System.Byte[]> get_certificateList()
    // Offset: 0x12D81BC
    System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* get_certificateList();
    // public MasterServer.ServerCertificateRequest Init(System.Collections.Generic.IEnumerable`1<System.Byte[]> certificateList)
    // Offset: 0x12E3D0C
    MasterServer::ServerCertificateRequest* Init(System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* certificateList);
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x12E4050
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x12E40EC
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x12E4260
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x12E4310
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServerCertificateRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ServerCertificateRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServerCertificateRequest*, creationType>()));
    }
  }; // MasterServer.ServerCertificateRequest
  #pragma pack(pop)
  static check_size<sizeof(ServerCertificateRequest), 32 + sizeof(int)> __MasterServer_ServerCertificateRequestSizeCheck;
  static_assert(sizeof(ServerCertificateRequest) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::ServerCertificateRequest*, "MasterServer", "ServerCertificateRequest");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ServerCertificateRequest*>* (*)()>(&MasterServer::ServerCertificateRequest::get_pool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::get_certificateList
// Il2CppName: get_certificateList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>* (MasterServer::ServerCertificateRequest::*)()>(&MasterServer::ServerCertificateRequest::get_certificateList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "get_certificateList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ServerCertificateRequest* (MasterServer::ServerCertificateRequest::*)(System::Collections::Generic::IEnumerable_1<::Array<uint8_t>*>*)>(&MasterServer::ServerCertificateRequest::Init)> {
  static const MethodInfo* get() {
    static auto* certificateList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{certificateList});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ServerCertificateRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&MasterServer::ServerCertificateRequest::Serialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ServerCertificateRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&MasterServer::ServerCertificateRequest::Deserialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ServerCertificateRequest::*)()>(&MasterServer::ServerCertificateRequest::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ServerCertificateRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::ServerCertificateRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
