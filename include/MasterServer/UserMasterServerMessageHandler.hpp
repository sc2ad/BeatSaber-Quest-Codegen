// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BGNet.Core.Messages.BaseClientUnconnectedMessageHandler
#include "BGNet/Core/Messages/BaseClientUnconnectedMessageHandler.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: BaseConnectToServerRequest
  class BaseConnectToServerRequest;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Forward declaring type: IUnconnectedMessageSender
  class IUnconnectedMessageSender;
  // Forward declaring type: DnsEndPoint
  class DnsEndPoint;
  // Forward declaring type: ICertificateValidator
  class ICertificateValidator;
  // Forward declaring type: BeatmapLevelSelectionMask
  struct BeatmapLevelSelectionMask;
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
}
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Skipping declaration: CancellationToken because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: BGNet::Core::Messages
namespace BGNet::Core::Messages {
  // Forward declaring type: IUnconnectedMessage
  class IUnconnectedMessage;
  // Forward declaring type: IUnconnectedAuthenticateRequest
  class IUnconnectedAuthenticateRequest;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: UserMasterServerMessageHandler
  class UserMasterServerMessageHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MasterServer::UserMasterServerMessageHandler);
DEFINE_IL2CPP_ARG_TYPE(::MasterServer::UserMasterServerMessageHandler*, "MasterServer", "UserMasterServerMessageHandler");
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.UserMasterServerMessageHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class UserMasterServerMessageHandler : public ::BGNet::Core::Messages::BaseClientUnconnectedMessageHandler {
    public:
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::ConnectToServerDelegate
    class ConnectToServerDelegate;
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::$GetAuthenticationRequest$d__17
    struct $GetAuthenticationRequest$d__17;
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::$GetUserIdAndNameAsync$d__18
    struct $GetUserIdAndNameAsync$d__18;
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    // Nested type: ::MasterServer::UserMasterServerMessageHandler::$WithFailureHandler$d__23
    struct $WithFailureHandler$d__23;
    public:
    // private System.Int64 _lastKeepaliveTime
    // Size: 0x8
    // Offset: 0xB0
    int64_t lastKeepaliveTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.String _userId
    // Size: 0x8
    // Offset: 0xB8
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _userName
    // Size: 0x8
    // Offset: 0xC0
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> _authenticationTokenProviderTask
    // Size: 0x8
    // Offset: 0xC8
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* authenticationTokenProviderTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*) == 0x8);
    public:
    // static field const value: static private System.Int64 kKeepaliveRequestIntervalMs
    static constexpr const int64_t kKeepaliveRequestIntervalMs = 60000;
    // Get static field: static private System.Int64 kKeepaliveRequestIntervalMs
    static int64_t _get_kKeepaliveRequestIntervalMs();
    // Set static field: static private System.Int64 kKeepaliveRequestIntervalMs
    static void _set_kKeepaliveRequestIntervalMs(int64_t value);
    // Get instance field reference: private System.Int64 _lastKeepaliveTime
    [[deprecated("Use field access instead!")]] int64_t& dyn__lastKeepaliveTime();
    // Get instance field reference: private System.String _userId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userId();
    // Get instance field reference: private System.String _userName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userName();
    // Get instance field reference: private readonly System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> _authenticationTokenProviderTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*& dyn__authenticationTokenProviderTask();
    // public System.String get_userId()
    // Offset: 0x1733CF4
    ::StringW get_userId();
    // public System.String get_userName()
    // Offset: 0x1733CFC
    ::StringW get_userName();
    // public System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> get_authenticationTokenProviderTask()
    // Offset: 0x1733D04
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* get_authenticationTokenProviderTask();
    // public System.Void .ctor(IUnconnectedMessageSender sender, DnsEndPoint endPoint, System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> authenticationTokenProviderTask, BGNet.Core.ITimeProvider timeProvider, ICertificateValidator certificateValidator)
    // Offset: 0x1733D0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserMasterServerMessageHandler* New_ctor(::GlobalNamespace::IUnconnectedMessageSender* sender, ::GlobalNamespace::DnsEndPoint* endPoint, ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* authenticationTokenProviderTask, ::BGNet::Core::ITimeProvider* timeProvider, ::GlobalNamespace::ICertificateValidator* certificateValidator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::MasterServer::UserMasterServerMessageHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserMasterServerMessageHandler*, creationType>(sender, endPoint, authenticationTokenProviderTask, timeProvider, certificateValidator)));
    }
    // protected System.Void RegisterUserMessageHandlers()
    // Offset: 0x1733D48
    void RegisterUserMessageHandlers();
    // private System.Threading.Tasks.Task`1<System.ValueTuple`2<System.String,System.String>> GetUserIdAndNameAsync()
    // Offset: 0x1734A0C
    ::System::Threading::Tasks::Task_1<::System::ValueTuple_2<::StringW, ::StringW>>* GetUserIdAndNameAsync();
    // private System.Void UpdateKeepalive()
    // Offset: 0x17345AC
    void UpdateKeepalive();
    // public System.Void ConnectToServer(BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.String secret, System.String code, MasterServer.UserMasterServerMessageHandler/MasterServer.ConnectToServerDelegate onSuccess, System.Action`1<ConnectionFailedReason> onConnectionFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1734B0C
    void ConnectToServer(::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration, ::StringW secret, ::StringW code, ::MasterServer::UserMasterServerMessageHandler::ConnectToServerDelegate* onSuccess, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, ::System::Threading::CancellationToken cancellationToken);
    // private System.Void SendConnectToServerRequest(MasterServer.BaseConnectToServerRequest request, MasterServer.UserMasterServerMessageHandler/MasterServer.ConnectToServerDelegate onSuccess, System.Action`1<ConnectionFailedReason> onConnectionFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1734C80
    void SendConnectToServerRequest(::MasterServer::BaseConnectToServerRequest* request, ::MasterServer::UserMasterServerMessageHandler::ConnectToServerDelegate* onSuccess, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, ::System::Threading::CancellationToken cancellationToken);
    // public System.Void GetPublicServers(System.Int32 offset, System.Int32 count, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1734E18
    void GetPublicServers(int offset, int count, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration, ::System::Action_1<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>*>* onSuccess, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onFailure, ::System::Threading::CancellationToken cancellationToken);
    // private System.Void WithFailureHandler(System.Action`1<ConnectionFailedReason> onFailure, System.Func`1<System.Threading.Tasks.Task> performTask)
    // Offset: 0x1734D54
    void WithFailureHandler(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onFailure, ::System::Func_1<::System::Threading::Tasks::Task*>* performTask);
    // public override System.Void PollUpdate()
    // Offset: 0x1734584
    // Implemented from: BGNet.Core.Messages.UnconnectedMessageHandler
    // Base method: System.Void UnconnectedMessageHandler::PollUpdate()
    void PollUpdate();
    // protected override System.UInt32 GetMessageType(BGNet.Core.Messages.IUnconnectedMessage message)
    // Offset: 0x173473C
    // Implemented from: BGNet.Core.Messages.BaseClientUnconnectedMessageHandler
    // Base method: System.UInt32 BaseClientUnconnectedMessageHandler::GetMessageType(BGNet.Core.Messages.IUnconnectedMessage message)
    uint GetMessageType(::BGNet::Core::Messages::IUnconnectedMessage* message);
    // protected override System.Boolean ShouldHandleMessage(BGNet.Core.Messages.IUnconnectedMessage packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    // Offset: 0x17347C0
    // Implemented from: BGNet.Core.Messages.BaseClientUnconnectedMessageHandler
    // Base method: System.Boolean BaseClientUnconnectedMessageHandler::ShouldHandleMessage(BGNet.Core.Messages.IUnconnectedMessage packet, BGNet.Core.Messages.UnconnectedMessageHandler/BGNet.Core.Messages.MessageOrigin origin)
    bool ShouldHandleMessage(::BGNet::Core::Messages::IUnconnectedMessage* packet, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin origin);
    // protected override System.Threading.Tasks.Task`1<BGNet.Core.Messages.IUnconnectedAuthenticateRequest> GetAuthenticationRequest()
    // Offset: 0x17348EC
    // Implemented from: BGNet.Core.Messages.BaseClientUnconnectedMessageHandler
    // Base method: System.Threading.Tasks.Task`1<BGNet.Core.Messages.IUnconnectedAuthenticateRequest> BaseClientUnconnectedMessageHandler::GetAuthenticationRequest()
    ::System::Threading::Tasks::Task_1<::BGNet::Core::Messages::IUnconnectedAuthenticateRequest*>* GetAuthenticationRequest();
    // private System.Void HandshakeLog(System.String message)
    // Offset: 0x1734F28
    // Implemented from: BGNet.Core.Messages.BaseClientUnconnectedMessageHandler
    // Base method: System.Void BaseClientUnconnectedMessageHandler::HandshakeLog(System.String message)
    void HandshakeLog(::StringW message);
  }; // MasterServer.UserMasterServerMessageHandler
  #pragma pack(pop)
  static check_size<sizeof(UserMasterServerMessageHandler), 200 + sizeof(::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*)> __MasterServer_UserMasterServerMessageHandlerSizeCheck;
  static_assert(sizeof(UserMasterServerMessageHandler) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::get_authenticationTokenProviderTask
// Il2CppName: get_authenticationTokenProviderTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::get_authenticationTokenProviderTask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "get_authenticationTokenProviderTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::RegisterUserMessageHandlers
// Il2CppName: RegisterUserMessageHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::RegisterUserMessageHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "RegisterUserMessageHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::GetUserIdAndNameAsync
// Il2CppName: GetUserIdAndNameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::System::ValueTuple_2<::StringW, ::StringW>>* (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::GetUserIdAndNameAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "GetUserIdAndNameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::UpdateKeepalive
// Il2CppName: UpdateKeepalive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::UpdateKeepalive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "UpdateKeepalive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::ConnectToServer
// Il2CppName: ConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)(::GlobalNamespace::BeatmapLevelSelectionMask, ::GlobalNamespace::GameplayServerConfiguration, ::StringW, ::StringW, ::MasterServer::UserMasterServerMessageHandler::ConnectToServerDelegate*, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*, ::System::Threading::CancellationToken)>(&MasterServer::UserMasterServerMessageHandler::ConnectToServer)> {
  static const MethodInfo* get() {
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("MasterServer", "UserMasterServerMessageHandler/ConnectToServerDelegate")->byval_arg;
    static auto* onConnectionFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "ConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectionMask, configuration, secret, code, onSuccess, onConnectionFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::SendConnectToServerRequest
// Il2CppName: SendConnectToServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)(::MasterServer::BaseConnectToServerRequest*, ::MasterServer::UserMasterServerMessageHandler::ConnectToServerDelegate*, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*, ::System::Threading::CancellationToken)>(&MasterServer::UserMasterServerMessageHandler::SendConnectToServerRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "BaseConnectToServerRequest")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::GetClassFromName("MasterServer", "UserMasterServerMessageHandler/ConnectToServerDelegate")->byval_arg;
    static auto* onConnectionFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "SendConnectToServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, onSuccess, onConnectionFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::GetPublicServers
// Il2CppName: GetPublicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)(int, int, ::GlobalNamespace::BeatmapLevelSelectionMask, ::GlobalNamespace::GameplayServerConfiguration, ::System::Action_1<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>*>*, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*, ::System::Threading::CancellationToken)>(&MasterServer::UserMasterServerMessageHandler::GetPublicServers)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PublicServerInfo")})})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "GetPublicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, count, selectionMask, configuration, onSuccess, onFailure, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::WithFailureHandler
// Il2CppName: WithFailureHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*, ::System::Func_1<::System::Threading::Tasks::Task*>*)>(&MasterServer::UserMasterServerMessageHandler::WithFailureHandler)> {
  static const MethodInfo* get() {
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* performTask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "WithFailureHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onFailure, performTask});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::GetMessageType
// Il2CppName: GetMessageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (MasterServer::UserMasterServerMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*)>(&MasterServer::UserMasterServerMessageHandler::GetMessageType)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "GetMessageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::ShouldHandleMessage
// Il2CppName: ShouldHandleMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::UserMasterServerMessageHandler::*)(::BGNet::Core::Messages::IUnconnectedMessage*, ::BGNet::Core::Messages::UnconnectedMessageHandler::MessageOrigin)>(&MasterServer::UserMasterServerMessageHandler::ShouldHandleMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "IUnconnectedMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("BGNet.Core.Messages", "UnconnectedMessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "ShouldHandleMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::GetAuthenticationRequest
// Il2CppName: GetAuthenticationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::BGNet::Core::Messages::IUnconnectedAuthenticateRequest*>* (MasterServer::UserMasterServerMessageHandler::*)()>(&MasterServer::UserMasterServerMessageHandler::GetAuthenticationRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "GetAuthenticationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::UserMasterServerMessageHandler::HandshakeLog
// Il2CppName: HandshakeLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::UserMasterServerMessageHandler::*)(::StringW)>(&MasterServer::UserMasterServerMessageHandler::HandshakeLog)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::UserMasterServerMessageHandler*), "HandshakeLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
