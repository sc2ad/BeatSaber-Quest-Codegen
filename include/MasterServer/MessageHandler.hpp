// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: IAnalyticsManager
  class IAnalyticsManager;
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
  // Forward declaring type: IHandshakeMessage
  class IHandshakeMessage;
  // Skipping declaration: MessageOrigin because it is already included!
  // Forward declaring type: ClientHelloRequest
  class ClientHelloRequest;
  // Forward declaring type: HelloVerifyRequest
  class HelloVerifyRequest;
  // Forward declaring type: ClientHelloWithCookieRequest
  class ClientHelloWithCookieRequest;
  // Forward declaring type: IUserMessage
  class IUserMessage;
  // Forward declaring type: ConnectToServerRequest
  class ConnectToServerRequest;
  // Forward declaring type: GetPublicServersRequest
  class GetPublicServersRequest;
  // Forward declaring type: SessionKeepaliveMessage
  class SessionKeepaliveMessage;
  // Forward declaring type: IDedicatedServerMessage
  class IDedicatedServerMessage;
  // Forward declaring type: CreateDedicatedServerInstanceRequest
  class CreateDedicatedServerInstanceRequest;
  // Forward declaring type: DedicatedServerInstanceNoLongerOccupiedRequest
  class DedicatedServerInstanceNoLongerOccupiedRequest;
  // Forward declaring type: DedicatedServerHeartbeatRequest
  class DedicatedServerHeartbeatRequest;
  // Forward declaring type: DedicatedServerHeartbeatResponse
  class DedicatedServerHeartbeatResponse;
  // Forward declaring type: DedicatedServerInstanceStatusUpdateRequest
  class DedicatedServerInstanceStatusUpdateRequest;
  // Forward declaring type: DedicatedServerShutDownRequest
  class DedicatedServerShutDownRequest;
  // Forward declaring type: DedicatedServerPrepareForConnectionRequest
  class DedicatedServerPrepareForConnectionRequest;
  // Forward declaring type: IMasterServerMessage
  class IMasterServerMessage;
  // Forward declaring type: IMasterServerAcknowledgeMessage
  class IMasterServerAcknowledgeMessage;
  // Forward declaring type: IMasterServerReliableResponse
  class IMasterServerReliableResponse;
  // Forward declaring type: IMasterServerMultipartMessage
  class IMasterServerMultipartMessage;
  // Forward declaring type: IMasterServerReliableRequest
  class IMasterServerReliableRequest;
  // Forward declaring type: IMasterServerUnreliableMessage
  class IMasterServerUnreliableMessage;
  // Forward declaring type: IMasterServerResponse
  class IMasterServerResponse;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IUnconnectedSenderReceiver
  class IUnconnectedSenderReceiver;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: ExpiringDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ExpiringDictionary_2;
  // Forward declaring type: SmallBufferPool
  class SmallBufferPool;
  // Forward declaring type: PacketEncryptionLayer
  class PacketEncryptionLayer;
  // Forward declaring type: INetworkPacketSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSerializer_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Func`5<T1, T2, T3, T4, TResult>
  template<typename T1, typename T2, typename T3, typename T4, typename TResult>
  class Func_5;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.MessageHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class MessageHandler : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: MasterServer::MessageHandler::ConnectionState
    class ConnectionState;
    // Nested type: MasterServer::MessageHandler::RequestWaiterId
    struct RequestWaiterId;
    // Nested type: MasterServer::MessageHandler::RequestWaiter
    class RequestWaiter;
    // Nested type: MasterServer::MessageHandler::SentRequestWaiter
    class SentRequestWaiter;
    // Nested type: MasterServer::MessageHandler::RequestResponseWaiter
    class RequestResponseWaiter;
    // Nested type: MasterServer::MessageHandler::MultipartMessageWaiter
    class MultipartMessageWaiter;
    // Nested type: MasterServer::MessageHandler::MessageOrigin
    struct MessageOrigin;
    // Nested type: MasterServer::MessageHandler::HandshakeMessageType
    struct HandshakeMessageType;
    // Nested type: MasterServer::MessageHandler::UserMessageType
    struct UserMessageType;
    // Nested type: MasterServer::MessageHandler::DedicatedServerMessageType
    struct DedicatedServerMessageType;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass65_0_1<T>
    template<typename T>
    class $$c__DisplayClass65_0_1;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass70_0_1<T>
    template<typename T>
    class $$c__DisplayClass70_0_1;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass71_0_1<T>
    template<typename T>
    class $$c__DisplayClass71_0_1;
    // Nested type: MasterServer::MessageHandler::$GetAndSendResponse$d__76_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponse$d__76_2;
    // Nested type: MasterServer::MessageHandler::$GetAndSendResponseAsync$d__77_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponseAsync$d__77_2;
    // Nested type: MasterServer::MessageHandler::$GetAndSendUnreilableResponse$d__78_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendUnreilableResponse$d__78_2;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetry$d__91
    struct $SendMessageWithRetry$d__91;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass93_0
    class $$c__DisplayClass93_0;
    // Nested type: MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__93
    struct $SendMultipartMessageWithRetryAsync$d__93;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__94
    struct $SendMessageWithRetryAsyncInternal$d__94;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetryAwaitResponseAsync$d__95_1<T>
    template<typename T>
    struct $SendMessageWithRetryAwaitResponseAsync$d__95_1;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass96_0_1<T>
    template<typename T>
    class $$c__DisplayClass96_0_1;
    // Nested type: MasterServer::MessageHandler::$AwaitResponseAsync$d__97_1<T>
    template<typename T>
    struct $AwaitResponseAsync$d__97_1;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: MasterServer.MessageHandler/RequestWaiterId
    // [TokenAttribute] Offset: FFFFFFFF
    struct RequestWaiterId/*, public System::ValueType, public System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>*/ {
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Size: 0x8
      // Offset: 0x0
      System::Net::IPEndPoint* endPoint;
      // Field size check
      static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
      // public readonly System.UInt32 requestId
      // Size: 0x4
      // Offset: 0x8
      uint requestId;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Creating value type constructor for type: RequestWaiterId
      constexpr RequestWaiterId(System::Net::IPEndPoint* endPoint_ = {}, uint requestId_ = {}) noexcept : endPoint{endPoint_}, requestId{requestId_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>
      operator System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>() noexcept {
        return *reinterpret_cast<System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>*>(this);
      }
      // Get instance field reference: public readonly System.Net.IPEndPoint endPoint
      System::Net::IPEndPoint*& dyn_endPoint();
      // Get instance field reference: public readonly System.UInt32 requestId
      uint& dyn_requestId();
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
      // Offset: 0x12DF850
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  RequestWaiterId(System::Net::IPEndPoint* endPoint, uint requestId)
      // public System.Boolean Equals(MasterServer.MessageHandler/RequestWaiterId other)
      // Offset: 0x12E3AE4
      bool Equals(MasterServer::MessageHandler::RequestWaiterId other);
      // public override System.Boolean Equals(System.Object other)
      // Offset: 0x12E3B28
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object other)
      bool Equals(::Il2CppObject* other);
      // public override System.Int32 GetHashCode()
      // Offset: 0x12E3BC0
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
    }; // MasterServer.MessageHandler/RequestWaiterId
    #pragma pack(pop)
    static check_size<sizeof(MessageHandler::RequestWaiterId), 8 + sizeof(uint)> __MasterServer_MessageHandler_RequestWaiterIdSizeCheck;
    static_assert(sizeof(MessageHandler::RequestWaiterId) == 0xC);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: MasterServer.MessageHandler/MessageOrigin
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct MessageOrigin/*, public System::ValueType*/ {
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Size: 0x8
      // Offset: 0x0
      System::Net::IPEndPoint* endPoint;
      // Field size check
      static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
      // public readonly System.UInt32 protocolVersion
      // Size: 0x4
      // Offset: 0x8
      uint protocolVersion;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Creating value type constructor for type: MessageOrigin
      constexpr MessageOrigin(System::Net::IPEndPoint* endPoint_ = {}, uint protocolVersion_ = {}) noexcept : endPoint{endPoint_}, protocolVersion{protocolVersion_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.Net.IPEndPoint endPoint
      System::Net::IPEndPoint*& dyn_endPoint();
      // Get instance field reference: public readonly System.UInt32 protocolVersion
      uint& dyn_protocolVersion();
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 protocolVersion)
      // Offset: 0x12E0E10
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  MessageOrigin(System::Net::IPEndPoint* endPoint, uint protocolVersion)
    }; // MasterServer.MessageHandler/MessageOrigin
    #pragma pack(pop)
    static check_size<sizeof(MessageHandler::MessageOrigin), 8 + sizeof(uint)> __MasterServer_MessageHandler_MessageOriginSizeCheck;
    static_assert(sizeof(MessageHandler::MessageOrigin) == 0xC);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.MessageHandler/HandshakeMessageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandshakeMessageType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: HandshakeMessageType
      constexpr HandshakeMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static constexpr const int ClientHelloRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientHelloRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static void _set_ClientHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static constexpr const int HelloVerifyRequest = 1;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_HelloVerifyRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static void _set_HelloVerifyRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static constexpr const int ClientHelloWithCookieRequest = 2;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientHelloWithCookieRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static void _set_ClientHelloWithCookieRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static constexpr const int ServerHelloRequest = 3;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ServerHelloRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static void _set_ServerHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static constexpr const int ServerCertificateRequest = 4;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ServerCertificateRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static void _set_ServerCertificateRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static constexpr const int ClientKeyExchangeRequest = 6;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientKeyExchangeRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static void _set_ClientKeyExchangeRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static constexpr const int ChangeCipherSpecRequest = 7;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ChangeCipherSpecRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static void _set_ChangeCipherSpecRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 8;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::HandshakeMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static constexpr const int MultipartMessage = 9;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static MasterServer::MessageHandler::HandshakeMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::HandshakeMessageType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MasterServer.MessageHandler/HandshakeMessageType
    #pragma pack(pop)
    static check_size<sizeof(MessageHandler::HandshakeMessageType), 0 + sizeof(int)> __MasterServer_MessageHandler_HandshakeMessageTypeSizeCheck;
    static_assert(sizeof(MessageHandler::HandshakeMessageType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.MessageHandler/UserMessageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UserMessageType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: UserMessageType
      constexpr UserMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static constexpr const int AuthenticateUserRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static MasterServer::MessageHandler::UserMessageType _get_AuthenticateUserRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static void _set_AuthenticateUserRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static constexpr const int AuthenticateUserResponse = 1;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static MasterServer::MessageHandler::UserMessageType _get_AuthenticateUserResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static void _set_AuthenticateUserResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static constexpr const int ConnectToServerResponse = 8;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static MasterServer::MessageHandler::UserMessageType _get_ConnectToServerResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static void _set_ConnectToServerResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static constexpr const int ConnectToServerRequest = 9;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static MasterServer::MessageHandler::UserMessageType _get_ConnectToServerRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static void _set_ConnectToServerRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 13;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::UserMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static constexpr const int MultipartMessage = 14;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static MasterServer::MessageHandler::UserMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static constexpr const int SessionKeepaliveMessage = 15;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static MasterServer::MessageHandler::UserMessageType _get_SessionKeepaliveMessage();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static void _set_SessionKeepaliveMessage(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static constexpr const int GetPublicServersRequest = 16;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static MasterServer::MessageHandler::UserMessageType _get_GetPublicServersRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static void _set_GetPublicServersRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static constexpr const int GetPublicServersResponse = 17;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static MasterServer::MessageHandler::UserMessageType _get_GetPublicServersResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static void _set_GetPublicServersResponse(MasterServer::MessageHandler::UserMessageType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MasterServer.MessageHandler/UserMessageType
    #pragma pack(pop)
    static check_size<sizeof(MessageHandler::UserMessageType), 0 + sizeof(int)> __MasterServer_MessageHandler_UserMessageTypeSizeCheck;
    static_assert(sizeof(MessageHandler::UserMessageType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.MessageHandler/DedicatedServerMessageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DedicatedServerMessageType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: DedicatedServerMessageType
      constexpr DedicatedServerMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static constexpr const int AuthenticateDedicatedServerRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_AuthenticateDedicatedServerRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static void _set_AuthenticateDedicatedServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static constexpr const int AuthenticateDedicatedServerResponse = 1;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_AuthenticateDedicatedServerResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static void _set_AuthenticateDedicatedServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceRequest
      static constexpr const int CreateDedicatedServerInstanceRequest = 4;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_CreateDedicatedServerInstanceRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceRequest
      static void _set_CreateDedicatedServerInstanceRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceResponse
      static constexpr const int CreateDedicatedServerInstanceResponse = 5;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_CreateDedicatedServerInstanceResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType CreateDedicatedServerInstanceResponse
      static void _set_CreateDedicatedServerInstanceResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceNoLongerAvailableRequest
      static constexpr const int DedicatedServerInstanceNoLongerAvailableRequest = 6;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceNoLongerAvailableRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerInstanceNoLongerAvailableRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceNoLongerAvailableRequest
      static void _set_DedicatedServerInstanceNoLongerAvailableRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static constexpr const int DedicatedServerHeartbeatRequest = 7;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerHeartbeatRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static void _set_DedicatedServerHeartbeatRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static constexpr const int DedicatedServerHeartbeatResponse = 8;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerHeartbeatResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static void _set_DedicatedServerHeartbeatResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceStatusUpdateRequest
      static constexpr const int DedicatedServerInstanceStatusUpdateRequest = 10;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceStatusUpdateRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerInstanceStatusUpdateRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerInstanceStatusUpdateRequest
      static void _set_DedicatedServerInstanceStatusUpdateRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static constexpr const int DedicatedServerShutDownRequest = 11;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerShutDownRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static void _set_DedicatedServerShutDownRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static constexpr const int DedicatedServerPrepareForConnectionRequest = 12;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerPrepareForConnectionRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static void _set_DedicatedServerPrepareForConnectionRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 13;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static constexpr const int MultipartMessage = 14;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionResponse
      static constexpr const int DedicatedServerPrepareForConnectionResponse = 15;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerPrepareForConnectionResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionResponse
      static void _set_DedicatedServerPrepareForConnectionResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MasterServer.MessageHandler/DedicatedServerMessageType
    #pragma pack(pop)
    static check_size<sizeof(MessageHandler::DedicatedServerMessageType), 0 + sizeof(int)> __MasterServer_MessageHandler_DedicatedServerMessageTypeSizeCheck;
    static_assert(sizeof(MessageHandler::DedicatedServerMessageType) == 0x4);
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/HandshakeMessageType,MasterServer.MessageHandler/MessageOrigin> _handshakeMessageSerializer
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::HandshakeMessageType, MasterServer::MessageHandler::MessageOrigin>* handshakeMessageSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::HandshakeMessageType, MasterServer::MessageHandler::MessageOrigin>*) == 0x8);
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/UserMessageType,MasterServer.MessageHandler/MessageOrigin> _userMessageSerializer
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::UserMessageType, MasterServer::MessageHandler::MessageOrigin>* userMessageSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::UserMessageType, MasterServer::MessageHandler::MessageOrigin>*) == 0x8);
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/DedicatedServerMessageType,MasterServer.MessageHandler/MessageOrigin> _dedicatedServerMessageSerializer
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::DedicatedServerMessageType, MasterServer::MessageHandler::MessageOrigin>* dedicatedServerMessageSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::DedicatedServerMessageType, MasterServer::MessageHandler::MessageOrigin>*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _dataWriter
    // Size: 0x8
    // Offset: 0x28
    LiteNetLib::Utils::NetDataWriter* dataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataReader _multipartReader
    // Size: 0x8
    // Offset: 0x30
    LiteNetLib::Utils::NetDataReader* multipartReader;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataReader*) == 0x8);
    // private readonly IUnconnectedSenderReceiver _sender
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::IUnconnectedSenderReceiver* sender;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnconnectedSenderReceiver*) == 0x8);
    // protected readonly MasterServer.IAnalyticsManager analytics
    // Size: 0x8
    // Offset: 0x40
    MasterServer::IAnalyticsManager* analytics;
    // Field size check
    static_assert(sizeof(MasterServer::IAnalyticsManager*) == 0x8);
    // private readonly MasterServer.ITimeProvider _timeProvider
    // Size: 0x8
    // Offset: 0x48
    MasterServer::ITimeProvider* timeProvider;
    // Field size check
    static_assert(sizeof(MasterServer::ITimeProvider*) == 0x8);
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/SentRequestWaiter> _sentRequestWaiters
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::SentRequestWaiter*>* sentRequestWaiters;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::SentRequestWaiter*>*) == 0x8);
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/RequestResponseWaiter> _requestResponseWaiters
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::RequestResponseWaiter*>* requestResponseWaiters;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::RequestResponseWaiter*>*) == 0x8);
    // private readonly ExpiringDictionary`2<System.Net.IPEndPoint,MasterServer.MessageHandler/ConnectionState> _connectionStates
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, MasterServer::MessageHandler::ConnectionState*>* connectionStates;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, MasterServer::MessageHandler::ConnectionState*>*) == 0x8);
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/MultipartMessageWaiter> _multipartMessageBuffer
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::MultipartMessageWaiter*>* multipartMessageBuffer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::MultipartMessageWaiter*>*) == 0x8);
    // private readonly SmallBufferPool _bufferPool
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::SmallBufferPool* bufferPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SmallBufferPool*) == 0x8);
    // private readonly System.Threading.CancellationTokenSource _disposedTokenSource
    // Size: 0x8
    // Offset: 0x78
    System::Threading::CancellationTokenSource* disposedTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // Creating value type constructor for type: MessageHandler
    MessageHandler(GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::HandshakeMessageType, MasterServer::MessageHandler::MessageOrigin>* handshakeMessageSerializer_ = {}, GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::UserMessageType, MasterServer::MessageHandler::MessageOrigin>* userMessageSerializer_ = {}, GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::DedicatedServerMessageType, MasterServer::MessageHandler::MessageOrigin>* dedicatedServerMessageSerializer_ = {}, LiteNetLib::Utils::NetDataWriter* dataWriter_ = {}, LiteNetLib::Utils::NetDataReader* multipartReader_ = {}, GlobalNamespace::IUnconnectedSenderReceiver* sender_ = {}, MasterServer::IAnalyticsManager* analytics_ = {}, MasterServer::ITimeProvider* timeProvider_ = {}, GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::SentRequestWaiter*>* sentRequestWaiters_ = {}, GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::RequestResponseWaiter*>* requestResponseWaiters_ = {}, GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, MasterServer::MessageHandler::ConnectionState*>* connectionStates_ = {}, GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::MultipartMessageWaiter*>* multipartMessageBuffer_ = {}, GlobalNamespace::SmallBufferPool* bufferPool_ = {}, System::Threading::CancellationTokenSource* disposedTokenSource_ = {}) noexcept : handshakeMessageSerializer{handshakeMessageSerializer_}, userMessageSerializer{userMessageSerializer_}, dedicatedServerMessageSerializer{dedicatedServerMessageSerializer_}, dataWriter{dataWriter_}, multipartReader{multipartReader_}, sender{sender_}, analytics{analytics_}, timeProvider{timeProvider_}, sentRequestWaiters{sentRequestWaiters_}, requestResponseWaiters{requestResponseWaiters_}, connectionStates{connectionStates_}, multipartMessageBuffer{multipartMessageBuffer_}, bufferPool{bufferPool_}, disposedTokenSource{disposedTokenSource_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.UInt32 kHandshakeMessageType
    static constexpr const uint kHandshakeMessageType = 3192347326u;
    // Get static field: static private System.UInt32 kHandshakeMessageType
    static uint _get_kHandshakeMessageType();
    // Set static field: static private System.UInt32 kHandshakeMessageType
    static void _set_kHandshakeMessageType(uint value);
    // static field const value: static private System.UInt32 kUserMessageType
    static constexpr const uint kUserMessageType = 1u;
    // Get static field: static private System.UInt32 kUserMessageType
    static uint _get_kUserMessageType();
    // Set static field: static private System.UInt32 kUserMessageType
    static void _set_kUserMessageType(uint value);
    // static field const value: static private System.UInt32 kDedicatedServerMessageType
    static constexpr const uint kDedicatedServerMessageType = 2u;
    // Get static field: static private System.UInt32 kDedicatedServerMessageType
    static uint _get_kDedicatedServerMessageType();
    // Set static field: static private System.UInt32 kDedicatedServerMessageType
    static void _set_kDedicatedServerMessageType(uint value);
    // static field const value: static protected System.UInt32 kProtocolVersion
    static constexpr const uint kProtocolVersion = 5u;
    // Get static field: static protected System.UInt32 kProtocolVersion
    static uint _get_kProtocolVersion();
    // Set static field: static protected System.UInt32 kProtocolVersion
    static void _set_kProtocolVersion(uint value);
    // static field const value: static public System.Int32 kMinSignatureLength
    static constexpr const int kMinSignatureLength = 128;
    // Get static field: static public System.Int32 kMinSignatureLength
    static int _get_kMinSignatureLength();
    // Set static field: static public System.Int32 kMinSignatureLength
    static void _set_kMinSignatureLength(int value);
    // static field const value: static public System.Int32 kMaxSignatureLength
    static constexpr const int kMaxSignatureLength = 512;
    // Get static field: static public System.Int32 kMaxSignatureLength
    static int _get_kMaxSignatureLength();
    // Set static field: static public System.Int32 kMaxSignatureLength
    static void _set_kMaxSignatureLength(int value);
    // static field const value: static private System.Int32 kMaxPacketSize
    static constexpr const int kMaxPacketSize = 412;
    // Get static field: static private System.Int32 kMaxPacketSize
    static int _get_kMaxPacketSize();
    // Set static field: static private System.Int32 kMaxPacketSize
    static void _set_kMaxPacketSize(int value);
    // static field const value: static private System.Int32 kRetryCount
    static constexpr const int kRetryCount = 5;
    // Get static field: static private System.Int32 kRetryCount
    static int _get_kRetryCount();
    // Set static field: static private System.Int32 kRetryCount
    static void _set_kRetryCount(int value);
    // static field const value: static private System.Int32 kRetryDelay0Ms
    static constexpr const int kRetryDelay0Ms = 200;
    // Get static field: static private System.Int32 kRetryDelay0Ms
    static int _get_kRetryDelay0Ms();
    // Set static field: static private System.Int32 kRetryDelay0Ms
    static void _set_kRetryDelay0Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay1Ms
    static constexpr const int kRetryDelay1Ms = 300;
    // Get static field: static private System.Int32 kRetryDelay1Ms
    static int _get_kRetryDelay1Ms();
    // Set static field: static private System.Int32 kRetryDelay1Ms
    static void _set_kRetryDelay1Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay2Ms
    static constexpr const int kRetryDelay2Ms = 450;
    // Get static field: static private System.Int32 kRetryDelay2Ms
    static int _get_kRetryDelay2Ms();
    // Set static field: static private System.Int32 kRetryDelay2Ms
    static void _set_kRetryDelay2Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay3Ms
    static constexpr const int kRetryDelay3Ms = 600;
    // Get static field: static private System.Int32 kRetryDelay3Ms
    static int _get_kRetryDelay3Ms();
    // Set static field: static private System.Int32 kRetryDelay3Ms
    static void _set_kRetryDelay3Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay4Ms
    static constexpr const int kRetryDelay4Ms = 1000;
    // Get static field: static private System.Int32 kRetryDelay4Ms
    static int _get_kRetryDelay4Ms();
    // Set static field: static private System.Int32 kRetryDelay4Ms
    static void _set_kRetryDelay4Ms(int value);
    // static field const value: static private System.Int64 kConnectionStateTimeoutMs
    static constexpr const int64_t kConnectionStateTimeoutMs = 300000;
    // Get static field: static private System.Int64 kConnectionStateTimeoutMs
    static int64_t _get_kConnectionStateTimeoutMs();
    // Set static field: static private System.Int64 kConnectionStateTimeoutMs
    static void _set_kConnectionStateTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kSentRequestTimeoutMs
    static constexpr const int64_t kSentRequestTimeoutMs = 5000;
    // Get static field: static private System.Int64 kSentRequestTimeoutMs
    static int64_t _get_kSentRequestTimeoutMs();
    // Set static field: static private System.Int64 kSentRequestTimeoutMs
    static void _set_kSentRequestTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static constexpr const int64_t kSentRequestWithResponseTimeoutMs = 15000;
    // Get static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static int64_t _get_kSentRequestWithResponseTimeoutMs();
    // Set static field: static private System.Int64 kSentRequestWithResponseTimeoutMs
    static void _set_kSentRequestWithResponseTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kMultipartMessageTimeoutMs
    static constexpr const int64_t kMultipartMessageTimeoutMs = 10000;
    // Get static field: static private System.Int64 kMultipartMessageTimeoutMs
    static int64_t _get_kMultipartMessageTimeoutMs();
    // Set static field: static private System.Int64 kMultipartMessageTimeoutMs
    static void _set_kMultipartMessageTimeoutMs(int64_t value);
    // Get instance field reference: private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/HandshakeMessageType,MasterServer.MessageHandler/MessageOrigin> _handshakeMessageSerializer
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::HandshakeMessageType, MasterServer::MessageHandler::MessageOrigin>*& dyn__handshakeMessageSerializer();
    // Get instance field reference: private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/UserMessageType,MasterServer.MessageHandler/MessageOrigin> _userMessageSerializer
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::UserMessageType, MasterServer::MessageHandler::MessageOrigin>*& dyn__userMessageSerializer();
    // Get instance field reference: private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/DedicatedServerMessageType,MasterServer.MessageHandler/MessageOrigin> _dedicatedServerMessageSerializer
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::DedicatedServerMessageType, MasterServer::MessageHandler::MessageOrigin>*& dyn__dedicatedServerMessageSerializer();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _dataWriter
    LiteNetLib::Utils::NetDataWriter*& dyn__dataWriter();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataReader _multipartReader
    LiteNetLib::Utils::NetDataReader*& dyn__multipartReader();
    // Get instance field reference: private readonly IUnconnectedSenderReceiver _sender
    GlobalNamespace::IUnconnectedSenderReceiver*& dyn__sender();
    // Get instance field reference: protected readonly MasterServer.IAnalyticsManager analytics
    MasterServer::IAnalyticsManager*& dyn_analytics();
    // Get instance field reference: private readonly MasterServer.ITimeProvider _timeProvider
    MasterServer::ITimeProvider*& dyn__timeProvider();
    // Get instance field reference: private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/SentRequestWaiter> _sentRequestWaiters
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::SentRequestWaiter*>*& dyn__sentRequestWaiters();
    // Get instance field reference: private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/RequestResponseWaiter> _requestResponseWaiters
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::RequestResponseWaiter*>*& dyn__requestResponseWaiters();
    // Get instance field reference: private readonly ExpiringDictionary`2<System.Net.IPEndPoint,MasterServer.MessageHandler/ConnectionState> _connectionStates
    GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, MasterServer::MessageHandler::ConnectionState*>*& dyn__connectionStates();
    // Get instance field reference: private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/MultipartMessageWaiter> _multipartMessageBuffer
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::MultipartMessageWaiter*>*& dyn__multipartMessageBuffer();
    // Get instance field reference: private readonly SmallBufferPool _bufferPool
    GlobalNamespace::SmallBufferPool*& dyn__bufferPool();
    // Get instance field reference: private readonly System.Threading.CancellationTokenSource _disposedTokenSource
    System::Threading::CancellationTokenSource*& dyn__disposedTokenSource();
    // protected PacketEncryptionLayer get_encryptionLayer()
    // Offset: 0x12D82B8
    GlobalNamespace::PacketEncryptionLayer* get_encryptionLayer();
    // protected MasterServer.ITimeProvider get_timeProvider()
    // Offset: 0x12DCCC0
    MasterServer::ITimeProvider* get_timeProvider();
    // protected System.Void .ctor(IUnconnectedSenderReceiver sender, MasterServer.ITimeProvider timeProvider, MasterServer.IAnalyticsManager analytics)
    // Offset: 0x12DCCC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MessageHandler* New_ctor(GlobalNamespace::IUnconnectedSenderReceiver* sender, MasterServer::ITimeProvider* timeProvider, MasterServer::IAnalyticsManager* analytics) {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MessageHandler*, creationType>(sender, timeProvider, analytics)));
    }
    // private System.Void RegisterHandshakeMessageHandlers()
    // Offset: 0x12DCF88
    void RegisterHandshakeMessageHandlers();
    // protected System.Boolean ShouldHandleHandshakeMessage(MasterServer.IHandshakeMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DD7A8
    bool ShouldHandleHandshakeMessage(MasterServer::IHandshakeMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleClientHelloRequest(MasterServer.ClientHelloRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DD7B0
    void HandleClientHelloRequest(MasterServer::ClientHelloRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleHelloVerifyRequest(MasterServer.HelloVerifyRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DD7D0
    void HandleHelloVerifyRequest(MasterServer::HelloVerifyRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleClientHelloWithCookieRequest(MasterServer.ClientHelloWithCookieRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DD9E8
    void HandleClientHelloWithCookieRequest(MasterServer::ClientHelloWithCookieRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void RegisterUserMessageHandlers()
    // Offset: 0x12DDA08
    void RegisterUserMessageHandlers();
    // protected System.Boolean ShouldHandleUserMessage(MasterServer.IUserMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DE2D4
    bool ShouldHandleUserMessage(MasterServer::IUserMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleConnectToServerRequest(MasterServer.ConnectToServerRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DE2DC
    void HandleConnectToServerRequest(MasterServer::ConnectToServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleGetPublicServersRequest(MasterServer.GetPublicServersRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DE2FC
    void HandleGetPublicServersRequest(MasterServer::GetPublicServersRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void HandleSessionKeepaliveMessage(MasterServer.SessionKeepaliveMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DE31C
    void HandleSessionKeepaliveMessage(MasterServer::SessionKeepaliveMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void RegisterDedicatedServerHandlers()
    // Offset: 0x12DE390
    void RegisterDedicatedServerHandlers();
    // protected System.Boolean ShouldHandleDedicatedServerMessage(MasterServer.IDedicatedServerMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE10
    bool ShouldHandleDedicatedServerMessage(MasterServer::IDedicatedServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleCreateDedicatedServerInstanceRequest(MasterServer.CreateDedicatedServerInstanceRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE18
    void HandleCreateDedicatedServerInstanceRequest(MasterServer::CreateDedicatedServerInstanceRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerInstanceNoLongerAvailableRequest(MasterServer.DedicatedServerInstanceNoLongerOccupiedRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE38
    void HandleDedicatedServerInstanceNoLongerAvailableRequest(MasterServer::DedicatedServerInstanceNoLongerOccupiedRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerHeartbeatRequest(MasterServer.DedicatedServerHeartbeatRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE58
    void HandleDedicatedServerHeartbeatRequest(MasterServer::DedicatedServerHeartbeatRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerHeartbeatResponse(MasterServer.DedicatedServerHeartbeatResponse packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE70
    void HandleDedicatedServerHeartbeatResponse(MasterServer::DedicatedServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerInstanceStatusUpdateRequest(MasterServer.DedicatedServerInstanceStatusUpdateRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEE88
    void HandleDedicatedServerInstanceStatusUpdateRequest(MasterServer::DedicatedServerInstanceStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerShutDownRequest(MasterServer.DedicatedServerShutDownRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEEA8
    void HandleDedicatedServerShutDownRequest(MasterServer::DedicatedServerShutDownRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerPrepareForConnectionRequest(MasterServer.DedicatedServerPrepareForConnectionRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEEC0
    void HandleDedicatedServerPrepareForConnectionRequest(MasterServer::DedicatedServerPrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Func`2<MasterServer.MessageHandler/MessageOrigin,T> ObtainVersioned(System.Func`2<System.UInt32,T> obtain)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Func_2<MasterServer::MessageHandler::MessageOrigin, T>* ObtainVersioned(System::Func_2<uint, T>* obtain) {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ObtainVersioned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ObtainVersioned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obtain)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Func_2<MasterServer::MessageHandler::MessageOrigin, T>*, false>(___instance_arg, ___generic__method, obtain);
    }
    // private System.Func`1<T> ObtainVersioned(System.Func`1<T> obtain)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Func_1<T>* ObtainVersioned(System::Func_1<T>* obtain) {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::ObtainVersioned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ObtainVersioned", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obtain)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Func_1<T>*, false>(___instance_arg, ___generic__method, obtain);
    }
    // private System.Void DefaultAcknowledgeHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultAcknowledgeHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>> && std::is_base_of_v<MasterServer::IMasterServerAcknowledgeMessage, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DefaultAcknowledgeHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAcknowledgeHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, packet, origin);
    }
    // private System.Void DefaultResponseHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultResponseHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DefaultResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, packet, origin);
    }
    // private System.Void DefaultMultipartMessageHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultMultipartMessageHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMultipartMessage, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::DefaultMultipartMessageHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultMultipartMessageHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(origin)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, packet, origin);
    }
    // private System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> CustomResponseHandler(System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* CustomResponseHandler(System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::CustomResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CustomResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customHandler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>*, false>(___instance_arg, ___generic__method, customHandler);
    }
    // private System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> CustomUnreliableResponseHandler(System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* CustomUnreliableResponseHandler(System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::CustomUnreliableResponseHandler");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CustomUnreliableResponseHandler", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(customHandler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>*, false>(___instance_arg, ___generic__method, customHandler);
    }
    // private System.Boolean IsUnhandledMessage(MasterServer.IMasterServerReliableRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DEEE0
    bool IsUnhandledMessage(MasterServer::IMasterServerReliableRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void CompleteSend(MasterServer.IMasterServerResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x12DF6C4
    void CompleteSend(MasterServer::IMasterServerResponse* packet, System::Net::IPEndPoint* remoteEndPoint);
    // private System.Boolean CompleteRequest(MasterServer.IMasterServerReliableResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x12DD8DC
    bool CompleteRequest(MasterServer::IMasterServerReliableResponse* packet, System::Net::IPEndPoint* remoteEndPoint);
    // private System.Boolean ShouldHandleMessage(MasterServer.IMasterServerMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12DF374
    bool ShouldHandleMessage(MasterServer::IMasterServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void GetAndSendResponse(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendResponse(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<TResponse>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetAndSendResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Threading.Tasks.Task GetAndSendResponseAsync(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    System::Threading::Tasks::Task* GetAndSendResponseAsync(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<TResponse>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetAndSendResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(___instance_arg, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Void GetAndSendUnreilableResponse(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendUnreilableResponse(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<TResponse>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::GetAndSendUnreilableResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAndSendUnreilableResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(tryGetResponse), ::il2cpp_utils::ExtractType(getFailureResponse)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, request, origin, tryGetResponse, getFailureResponse);
    }
    // protected System.Void SendUnreliableMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x12DFA04
    void SendUnreliableMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerUnreliableMessage* message);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerResponse response)
    // Offset: 0x12DFC1C
    void SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerResponse* response);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerResponse response)
    // Offset: 0x12DF480
    void SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerResponse* response);
    // protected System.Void SendReliableRequest(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12DFD6C
    void SendReliableRequest(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableRequestAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12D8B2C
    System::Threading::Tasks::Task* SendReliableRequestAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E0018
    void SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E0178
    void SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E02B8
    System::Threading::Tasks::Task* SendReliableResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task`1<T> SendReliableRequestAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableRequestAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableRequestAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableRequestAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(onSendFailedAwaitResponse), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, protocolVersion, remoteEndPoint, request, onSendFailedAwaitResponse, cancellationToken);
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableResponseAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponseAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, protocolVersion, remoteEndPoint, request, response, cancellationToken);
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendReliableResponseAndAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendReliableResponseAndAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(responseId), ::il2cpp_utils::ExtractType(response), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, protocolVersion, remoteEndPoint, responseId, response, cancellationToken);
    }
    // private System.Void SendMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerMessage message)
    // Offset: 0x12DFAA8
    void SendMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerMessage* message);
    // private System.Void SendMessageWithRetry(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12DFEA0
    void SendMessageWithRetry(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12DFF84
    System::Threading::Tasks::Task* SendMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMultipartMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, LiteNetLib.Utils.NetDataWriter data, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E06B4
    System::Threading::Tasks::Task* SendMultipartMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, LiteNetLib::Utils::NetDataWriter* data, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsyncInternal(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E07F8
    System::Threading::Tasks::Task* SendMessageWithRetryAsyncInternal(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<T> SendMessageWithRetryAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendMessageWithRetryAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::SendMessageWithRetryAwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageWithRetryAwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onSendFailedAwaitResponse), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, protocolVersion, remoteEndPoint, message, onSendFailedAwaitResponse, cancellationToken);
    }
    // private System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> WrapOnSendFailedAwaitResponse(MasterServer.MessageHandler/RequestResponseWaiter waiter, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailed)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* WrapOnSendFailedAwaitResponse(MasterServer::MessageHandler::RequestResponseWaiter* waiter, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailed) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::WrapOnSendFailedAwaitResponse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WrapOnSendFailedAwaitResponse", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(waiter), ::il2cpp_utils::ExtractType(onSendFailed)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, false>(___instance_arg, ___generic__method, waiter, onSendFailed);
    }
    // protected System.Threading.Tasks.Task`1<T> AwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 requestId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* AwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint requestId, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::MessageHandler::AwaitResponseAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AwaitResponseAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(protocolVersion), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(requestId), ::il2cpp_utils::ExtractType(cancellationToken)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, protocolVersion, remoteEndPoint, requestId, cancellationToken);
    }
    // private System.Threading.Tasks.Task WaitForRetry(System.Int32 retryAttempt, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E0938
    System::Threading::Tasks::Task* WaitForRetry(int retryAttempt, System::Threading::CancellationToken cancellationToken);
    // private LiteNetLib.Utils.NetDataWriter Write(System.UInt32 protocolVersion, LiteNetLib.Utils.INetSerializable message)
    // Offset: 0x12E04D4
    LiteNetLib::Utils::NetDataWriter* Write(uint protocolVersion, LiteNetLib::Utils::INetSerializable* message);
    // public System.Void PollUpdate()
    // Offset: 0x12E0B88
    void PollUpdate();
    // public System.Void ReceiveMessage(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x12E0C24
    void ReceiveMessage(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::Utils::NetDataReader* reader);
    // protected System.Boolean ShouldHandleMessageFromEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x12E0E1C
    bool ShouldHandleMessageFromEndPoint(System::Net::IPEndPoint* endPoint);
    // protected System.Void ReceivedMessageException(System.Net.IPEndPoint endPoint, System.Exception exception)
    // Offset: 0x12E0E24
    void ReceivedMessageException(System::Net::IPEndPoint* endPoint, System::Exception* exception);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint)
    // Offset: 0x12D6784
    void BeginSession(System::Net::IPEndPoint* endPoint);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x12E0F40
    void BeginSession(System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.UInt32 GetNextRequestId(System.Net.IPEndPoint endPoint)
    // Offset: 0x12D80EC
    uint GetNextRequestId(System::Net::IPEndPoint* endPoint);
    // protected MasterServer.MessageHandler/ConnectionState GetConnectionState(System.Net.IPEndPoint endPoint)
    // Offset: 0x12D836C
    MasterServer::MessageHandler::ConnectionState* GetConnectionState(System::Net::IPEndPoint* endPoint);
    // protected System.Boolean IsValidSessionStartRequestId(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x12E1020
    bool IsValidSessionStartRequestId(System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.Boolean IsConnectionStateEncrypted(System.Net.IPEndPoint endPoint)
    // Offset: 0x12E1120
    bool IsConnectionStateEncrypted(System::Net::IPEndPoint* endPoint);
    // private INetworkPacketSerializer`1<MasterServer.MessageHandler/MessageOrigin> GetSerializer(System.UInt32 protocolVersion, System.UInt32 messageType, System.Boolean throwOnInvalidVersion)
    // Offset: 0x12E0A4C
    GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>* GetSerializer(uint protocolVersion, uint messageType, bool throwOnInvalidVersion);
    // public System.Void Dispose()
    // Offset: 0x12E1270
    void Dispose();
    // static private System.Byte[] CreateHandshakeHeader(System.Byte[] packetHeader)
    // Offset: 0x12DD644
    static ::Array<uint8_t>* CreateHandshakeHeader(::Array<uint8_t>* packetHeader);
  }; // MasterServer.MessageHandler
  #pragma pack(pop)
  static check_size<sizeof(MessageHandler), 120 + sizeof(System::Threading::CancellationTokenSource*)> __MasterServer_MessageHandlerSizeCheck;
  static_assert(sizeof(MessageHandler) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler*, "MasterServer", "MessageHandler");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::RequestWaiterId, "MasterServer", "MessageHandler/RequestWaiterId");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::MessageOrigin, "MasterServer", "MessageHandler/MessageOrigin");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::HandshakeMessageType, "MasterServer", "MessageHandler/HandshakeMessageType");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::UserMessageType, "MasterServer", "MessageHandler/UserMessageType");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::DedicatedServerMessageType, "MasterServer", "MessageHandler/DedicatedServerMessageType");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::MessageHandler::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketEncryptionLayer* (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::get_encryptionLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::get_timeProvider
// Il2CppName: get_timeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ITimeProvider* (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::get_timeProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "get_timeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MasterServer::MessageHandler::RegisterHandshakeMessageHandlers
// Il2CppName: RegisterHandshakeMessageHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::RegisterHandshakeMessageHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "RegisterHandshakeMessageHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ShouldHandleHandshakeMessage
// Il2CppName: ShouldHandleHandshakeMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IHandshakeMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::ShouldHandleHandshakeMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IHandshakeMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ShouldHandleHandshakeMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleClientHelloRequest
// Il2CppName: HandleClientHelloRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::ClientHelloRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleClientHelloRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "ClientHelloRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleClientHelloRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleHelloVerifyRequest
// Il2CppName: HandleHelloVerifyRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::HelloVerifyRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleHelloVerifyRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "HelloVerifyRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleHelloVerifyRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleClientHelloWithCookieRequest
// Il2CppName: HandleClientHelloWithCookieRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::ClientHelloWithCookieRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleClientHelloWithCookieRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "ClientHelloWithCookieRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleClientHelloWithCookieRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::RegisterUserMessageHandlers
// Il2CppName: RegisterUserMessageHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::RegisterUserMessageHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "RegisterUserMessageHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ShouldHandleUserMessage
// Il2CppName: ShouldHandleUserMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IUserMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::ShouldHandleUserMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IUserMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ShouldHandleUserMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleConnectToServerRequest
// Il2CppName: HandleConnectToServerRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::ConnectToServerRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleConnectToServerRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "ConnectToServerRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleConnectToServerRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleGetPublicServersRequest
// Il2CppName: HandleGetPublicServersRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::GetPublicServersRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleGetPublicServersRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "GetPublicServersRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleGetPublicServersRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleSessionKeepaliveMessage
// Il2CppName: HandleSessionKeepaliveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::SessionKeepaliveMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleSessionKeepaliveMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "SessionKeepaliveMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleSessionKeepaliveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::RegisterDedicatedServerHandlers
// Il2CppName: RegisterDedicatedServerHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::RegisterDedicatedServerHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "RegisterDedicatedServerHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ShouldHandleDedicatedServerMessage
// Il2CppName: ShouldHandleDedicatedServerMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IDedicatedServerMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::ShouldHandleDedicatedServerMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IDedicatedServerMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ShouldHandleDedicatedServerMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleCreateDedicatedServerInstanceRequest
// Il2CppName: HandleCreateDedicatedServerInstanceRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::CreateDedicatedServerInstanceRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleCreateDedicatedServerInstanceRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "CreateDedicatedServerInstanceRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleCreateDedicatedServerInstanceRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerInstanceNoLongerAvailableRequest
// Il2CppName: HandleDedicatedServerInstanceNoLongerAvailableRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerInstanceNoLongerOccupiedRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerInstanceNoLongerAvailableRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerInstanceNoLongerOccupiedRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerInstanceNoLongerAvailableRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerHeartbeatRequest
// Il2CppName: HandleDedicatedServerHeartbeatRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerHeartbeatRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerHeartbeatRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerHeartbeatRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerHeartbeatRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerHeartbeatResponse
// Il2CppName: HandleDedicatedServerHeartbeatResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerHeartbeatResponse*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerHeartbeatResponse)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerHeartbeatResponse")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerHeartbeatResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerInstanceStatusUpdateRequest
// Il2CppName: HandleDedicatedServerInstanceStatusUpdateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerInstanceStatusUpdateRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerInstanceStatusUpdateRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerInstanceStatusUpdateRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerInstanceStatusUpdateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerShutDownRequest
// Il2CppName: HandleDedicatedServerShutDownRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerShutDownRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerShutDownRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerShutDownRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerShutDownRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::HandleDedicatedServerPrepareForConnectionRequest
// Il2CppName: HandleDedicatedServerPrepareForConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::DedicatedServerPrepareForConnectionRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::HandleDedicatedServerPrepareForConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "DedicatedServerPrepareForConnectionRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "HandleDedicatedServerPrepareForConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ObtainVersioned
// Il2CppName: ObtainVersioned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::ObtainVersioned
// Il2CppName: ObtainVersioned
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::DefaultAcknowledgeHandler
// Il2CppName: DefaultAcknowledgeHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::DefaultResponseHandler
// Il2CppName: DefaultResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::DefaultMultipartMessageHandler
// Il2CppName: DefaultMultipartMessageHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::CustomResponseHandler
// Il2CppName: CustomResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::CustomUnreliableResponseHandler
// Il2CppName: CustomUnreliableResponseHandler
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::IsUnhandledMessage
// Il2CppName: IsUnhandledMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IMasterServerReliableRequest*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::IsUnhandledMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "IsUnhandledMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::CompleteSend
// Il2CppName: CompleteSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(MasterServer::IMasterServerResponse*, System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::CompleteSend)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "CompleteSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::CompleteRequest
// Il2CppName: CompleteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IMasterServerReliableResponse*, System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::CompleteRequest)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "CompleteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ShouldHandleMessage
// Il2CppName: ShouldHandleMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(MasterServer::IMasterServerMessage*, MasterServer::MessageHandler::MessageOrigin)>(&MasterServer::MessageHandler::ShouldHandleMessage)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerMessage")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("MasterServer", "MessageHandler/MessageOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ShouldHandleMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, origin});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetAndSendResponse
// Il2CppName: GetAndSendResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetAndSendResponseAsync
// Il2CppName: GetAndSendResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetAndSendUnreilableResponse
// Il2CppName: GetAndSendUnreilableResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendUnreliableMessage
// Il2CppName: SendUnreliableMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerUnreliableMessage*)>(&MasterServer::MessageHandler::SendUnreliableMessage)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerUnreliableMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendUnreliableMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerResponse*)>(&MasterServer::MessageHandler::SendUnreliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendUnreliableResponse
// Il2CppName: SendUnreliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, uint, MasterServer::IMasterServerResponse*)>(&MasterServer::MessageHandler::SendUnreliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* responseId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendUnreliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, responseId, response});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableRequest
// Il2CppName: SendReliableRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendReliableRequest)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendReliableRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableRequestAsync
// Il2CppName: SendReliableRequestAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendReliableRequestAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendReliableRequestAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendReliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableResponse
// Il2CppName: SendReliableResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, uint, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendReliableResponse)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* responseId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendReliableResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, responseId, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableResponseAsync
// Il2CppName: SendReliableResponseAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, MasterServer::IMasterServerReliableResponse*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendReliableResponseAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendReliableResponseAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, request, response, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableRequestAndAwaitResponseAsync
// Il2CppName: SendReliableRequestAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendReliableResponseAndAwaitResponseAsync
// Il2CppName: SendReliableResponseAndAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerMessage*)>(&MasterServer::MessageHandler::SendMessage)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMessageWithRetry
// Il2CppName: SendMessageWithRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendMessageWithRetry)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendMessageWithRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMessageWithRetryAsync
// Il2CppName: SendMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendMessageWithRetryAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMultipartMessageWithRetryAsync
// Il2CppName: SendMultipartMessageWithRetryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, LiteNetLib::Utils::NetDataWriter*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendMultipartMessageWithRetryAsync)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendMultipartMessageWithRetryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, data, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMessageWithRetryAsyncInternal
// Il2CppName: SendMessageWithRetryAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::SendMessageWithRetryAsyncInternal)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    static auto* onSendFailed = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`5"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32"), ::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest"), ::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken"), ::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")})->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "SendMessageWithRetryAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, remoteEndPoint, message, onSendFailed, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::SendMessageWithRetryAwaitResponseAsync
// Il2CppName: SendMessageWithRetryAwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::WrapOnSendFailedAwaitResponse
// Il2CppName: WrapOnSendFailedAwaitResponse
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::AwaitResponseAsync
// Il2CppName: AwaitResponseAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MasterServer::MessageHandler::WaitForRetry
// Il2CppName: WaitForRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (MasterServer::MessageHandler::*)(int, System::Threading::CancellationToken)>(&MasterServer::MessageHandler::WaitForRetry)> {
  static const MethodInfo* get() {
    static auto* retryAttempt = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "WaitForRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{retryAttempt, cancellationToken});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::Utils::NetDataWriter* (MasterServer::MessageHandler::*)(uint, LiteNetLib::Utils::INetSerializable*)>(&MasterServer::MessageHandler::Write)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, message});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ReceiveMessage
// Il2CppName: ReceiveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*)>(&MasterServer::MessageHandler::ReceiveMessage)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ReceiveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, reader});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ShouldHandleMessageFromEndPoint
// Il2CppName: ShouldHandleMessageFromEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::ShouldHandleMessageFromEndPoint)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ShouldHandleMessageFromEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::ReceivedMessageException
// Il2CppName: ReceivedMessageException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*, System::Exception*)>(&MasterServer::MessageHandler::ReceivedMessageException)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "ReceivedMessageException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, exception});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::BeginSession)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::BeginSession
// Il2CppName: BeginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*, uint)>(&MasterServer::MessageHandler::BeginSession)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "BeginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, requestId});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetNextRequestId
// Il2CppName: GetNextRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::GetNextRequestId)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "GetNextRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetConnectionState
// Il2CppName: GetConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::MessageHandler::ConnectionState* (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::GetConnectionState)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "GetConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::IsValidSessionStartRequestId
// Il2CppName: IsValidSessionStartRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*, uint)>(&MasterServer::MessageHandler::IsValidSessionStartRequestId)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "IsValidSessionStartRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, requestId});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::IsConnectionStateEncrypted
// Il2CppName: IsConnectionStateEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::MessageHandler::*)(System::Net::IPEndPoint*)>(&MasterServer::MessageHandler::IsConnectionStateEncrypted)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "IsConnectionStateEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::GetSerializer
// Il2CppName: GetSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>* (MasterServer::MessageHandler::*)(uint, uint, bool)>(&MasterServer::MessageHandler::GetSerializer)> {
  static const MethodInfo* get() {
    static auto* protocolVersion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* throwOnInvalidVersion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "GetSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{protocolVersion, messageType, throwOnInvalidVersion});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::MessageHandler::*)()>(&MasterServer::MessageHandler::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::MessageHandler::CreateHandshakeHeader
// Il2CppName: CreateHandshakeHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*)>(&MasterServer::MessageHandler::CreateHandshakeHeader)> {
  static const MethodInfo* get() {
    static auto* packetHeader = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::MessageHandler*), "CreateHandshakeHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetHeader});
  }
};
