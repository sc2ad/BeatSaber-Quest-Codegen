// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BGNet.Core.Messages.BaseReliableResponse
#include "BGNet/Core/Messages/BaseReliableResponse.hpp"
// Including type: BGNet.Core.Messages.IUnconnectedAuthenticateResponse
#include "BGNet/Core/Messages/IUnconnectedAuthenticateResponse.hpp"
// Including type: MasterServer.IUserMasterServerServerToClientMessage
#include "MasterServer/IUserMasterServerServerToClientMessage.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Skipping declaration: Result because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: AuthenticateUserMasterServerResponse
  class AuthenticateUserMasterServerResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MasterServer::AuthenticateUserMasterServerResponse);
DEFINE_IL2CPP_ARG_TYPE(::MasterServer::AuthenticateUserMasterServerResponse*, "MasterServer", "AuthenticateUserMasterServerResponse");
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.AuthenticateUserMasterServerResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class AuthenticateUserMasterServerResponse : public ::BGNet::Core::Messages::BaseReliableResponse/*, public ::BGNet::Core::Messages::IUnconnectedAuthenticateResponse, public ::MasterServer::IUserMasterServerServerToClientMessage*/ {
    public:
    // Nested type: ::MasterServer::AuthenticateUserMasterServerResponse::Result
    struct Result;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result
    // [TokenAttribute] Offset: FFFFFFFF
    struct Result/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Result
      constexpr Result(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Success
      static constexpr const int Success = 0;
      // Get static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Success
      static ::MasterServer::AuthenticateUserMasterServerResponse::Result _get_Success();
      // Set static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Success
      static void _set_Success(::MasterServer::AuthenticateUserMasterServerResponse::Result value);
      // static field const value: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Failed
      static constexpr const int Failed = 1;
      // Get static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Failed
      static ::MasterServer::AuthenticateUserMasterServerResponse::Result _get_Failed();
      // Set static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result Failed
      static void _set_Failed(::MasterServer::AuthenticateUserMasterServerResponse::Result value);
      // static field const value: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result UnknownError
      static constexpr const int UnknownError = 2;
      // Get static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result UnknownError
      static ::MasterServer::AuthenticateUserMasterServerResponse::Result _get_UnknownError();
      // Set static field: static public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result UnknownError
      static void _set_UnknownError(::MasterServer::AuthenticateUserMasterServerResponse::Result value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result
    #pragma pack(pop)
    static check_size<sizeof(AuthenticateUserMasterServerResponse::Result), 0 + sizeof(int)> __MasterServer_AuthenticateUserMasterServerResponse_ResultSizeCheck;
    static_assert(sizeof(AuthenticateUserMasterServerResponse::Result) == 0x4);
    public:
    // public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result result
    // Size: 0x4
    // Offset: 0x18
    ::MasterServer::AuthenticateUserMasterServerResponse::Result result;
    // Field size check
    static_assert(sizeof(::MasterServer::AuthenticateUserMasterServerResponse::Result) == 0x4);
    public:
    // Creating interface conversion operator: operator ::BGNet::Core::Messages::IUnconnectedAuthenticateResponse
    operator ::BGNet::Core::Messages::IUnconnectedAuthenticateResponse() noexcept {
      return *reinterpret_cast<::BGNet::Core::Messages::IUnconnectedAuthenticateResponse*>(this);
    }
    // Creating interface conversion operator: i_IUnconnectedAuthenticateResponse
    inline ::BGNet::Core::Messages::IUnconnectedAuthenticateResponse* i_IUnconnectedAuthenticateResponse() noexcept {
      return reinterpret_cast<::BGNet::Core::Messages::IUnconnectedAuthenticateResponse*>(this);
    }
    // Creating interface conversion operator: operator ::MasterServer::IUserMasterServerServerToClientMessage
    operator ::MasterServer::IUserMasterServerServerToClientMessage() noexcept {
      return *reinterpret_cast<::MasterServer::IUserMasterServerServerToClientMessage*>(this);
    }
    // Creating interface conversion operator: i_IUserMasterServerServerToClientMessage
    inline ::MasterServer::IUserMasterServerServerToClientMessage* i_IUserMasterServerServerToClientMessage() noexcept {
      return reinterpret_cast<::MasterServer::IUserMasterServerServerToClientMessage*>(this);
    }
    // Creating conversion operator: operator ::MasterServer::AuthenticateUserMasterServerResponse::Result
    constexpr operator ::MasterServer::AuthenticateUserMasterServerResponse::Result() const noexcept {
      return result;
    }
    // Get instance field reference: public MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result result
    [[deprecated("Use field access instead!")]] ::MasterServer::AuthenticateUserMasterServerResponse::Result& dyn_result();
    // static public PacketPool`1<MasterServer.AuthenticateUserMasterServerResponse> get_pool()
    // Offset: 0x168CDD8
    static ::GlobalNamespace::PacketPool_1<::MasterServer::AuthenticateUserMasterServerResponse*>* get_pool();
    // public System.Boolean get_isAuthenticated()
    // Offset: 0x168CEB8
    bool get_isAuthenticated();
    // public MasterServer.AuthenticateUserMasterServerResponse Init(MasterServer.AuthenticateUserMasterServerResponse/MasterServer.Result result)
    // Offset: 0x168CEC8
    ::MasterServer::AuthenticateUserMasterServerResponse* Init(::MasterServer::AuthenticateUserMasterServerResponse::Result result);
    // public override System.Byte get_resultCode()
    // Offset: 0x168CE20
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.Byte BaseReliableResponse::get_resultCode()
    uint8_t get_resultCode();
    // public override System.String get_resultCodeString()
    // Offset: 0x168CE28
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.String BaseReliableResponse::get_resultCodeString()
    ::StringW get_resultCodeString();
    // public System.Void .ctor()
    // Offset: 0x168CFAC
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.Void BaseReliableResponse::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthenticateUserMasterServerResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MasterServer::AuthenticateUserMasterServerResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthenticateUserMasterServerResponse*, creationType>()));
    }
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x168CED0
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.Void BaseReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(::LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x168CF0C
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.Void BaseReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(::LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x168CF50
    // Implemented from: BGNet.Core.Messages.BaseReliableResponse
    // Base method: System.Void BaseReliableResponse::Release()
    void Release();
  }; // MasterServer.AuthenticateUserMasterServerResponse
  #pragma pack(pop)
  static check_size<sizeof(AuthenticateUserMasterServerResponse), 24 + sizeof(::MasterServer::AuthenticateUserMasterServerResponse::Result)> __MasterServer_AuthenticateUserMasterServerResponseSizeCheck;
  static_assert(sizeof(AuthenticateUserMasterServerResponse) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MasterServer::AuthenticateUserMasterServerResponse::Result, "MasterServer", "AuthenticateUserMasterServerResponse/Result");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PacketPool_1<::MasterServer::AuthenticateUserMasterServerResponse*>* (*)()>(&MasterServer::AuthenticateUserMasterServerResponse::get_pool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::get_isAuthenticated
// Il2CppName: get_isAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServer::AuthenticateUserMasterServerResponse::*)()>(&MasterServer::AuthenticateUserMasterServerResponse::get_isAuthenticated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "get_isAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MasterServer::AuthenticateUserMasterServerResponse* (MasterServer::AuthenticateUserMasterServerResponse::*)(::MasterServer::AuthenticateUserMasterServerResponse::Result)>(&MasterServer::AuthenticateUserMasterServerResponse::Init)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("MasterServer", "AuthenticateUserMasterServerResponse/Result")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (MasterServer::AuthenticateUserMasterServerResponse::*)()>(&MasterServer::AuthenticateUserMasterServerResponse::get_resultCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (MasterServer::AuthenticateUserMasterServerResponse::*)()>(&MasterServer::AuthenticateUserMasterServerResponse::get_resultCodeString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::AuthenticateUserMasterServerResponse::*)(::LiteNetLib::Utils::NetDataWriter*)>(&MasterServer::AuthenticateUserMasterServerResponse::Serialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::AuthenticateUserMasterServerResponse::*)(::LiteNetLib::Utils::NetDataReader*)>(&MasterServer::AuthenticateUserMasterServerResponse::Deserialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: MasterServer::AuthenticateUserMasterServerResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::AuthenticateUserMasterServerResponse::*)()>(&MasterServer::AuthenticateUserMasterServerResponse::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::AuthenticateUserMasterServerResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
