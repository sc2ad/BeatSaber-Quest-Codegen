// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Linq.JContainer
#include "Newtonsoft/Json/Linq/JContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Linq
namespace Newtonsoft::Json::Linq {
  // Skipping declaration: JToken because it is already included!
  // Forward declaring type: JsonLoadSettings
  class JsonLoadSettings;
  // Skipping declaration: JTokenType because it is already included!
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonReader
  class JsonReader;
  // Forward declaring type: JsonWriter
  class JsonWriter;
  // Forward declaring type: JsonConverter
  class JsonConverter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IList`1 because it is already included!
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Linq
namespace Newtonsoft::Json::Linq {
  // Forward declaring type: JProperty
  class JProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Linq::JProperty);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Linq::JProperty*, "Newtonsoft.Json.Linq", "JProperty");
// Type namespace: Newtonsoft.Json.Linq
namespace Newtonsoft::Json::Linq {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Linq.JProperty
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class JProperty : public ::Newtonsoft::Json::Linq::JContainer {
    public:
    // Writing base type padding for base size: 0x41 to desired offset: 0x48
    char ___base_padding[0x7] = {};
    // Nested type: ::Newtonsoft::Json::Linq::JProperty::JPropertyList
    class JPropertyList;
    public:
    // private readonly Newtonsoft.Json.Linq.JProperty/Newtonsoft.Json.Linq.JPropertyList _content
    // Size: 0x8
    // Offset: 0x48
    ::Newtonsoft::Json::Linq::JProperty::JPropertyList* content;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Linq::JProperty::JPropertyList*) == 0x8);
    // private readonly System.String _name
    // Size: 0x8
    // Offset: 0x50
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly Newtonsoft.Json.Linq.JProperty/Newtonsoft.Json.Linq.JPropertyList _content
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Linq::JProperty::JPropertyList*& dyn__content();
    // Get instance field reference: private readonly System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // public System.String get_Name()
    // Offset: 0x1755BA4
    ::StringW get_Name();
    // public Newtonsoft.Json.Linq.JToken get_Value()
    // Offset: 0x17535D8
    ::Newtonsoft::Json::Linq::JToken* get_Value();
    // public System.Void set_Value(Newtonsoft.Json.Linq.JToken value)
    // Offset: 0x1754794
    void set_Value(::Newtonsoft::Json::Linq::JToken* value);
    // public System.Void .ctor(Newtonsoft.Json.Linq.JProperty other)
    // Offset: 0x1755BAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JProperty* New_ctor(::Newtonsoft::Json::Linq::JProperty* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::JProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JProperty*, creationType>(other)));
    }
    // System.Void .ctor(System.String name)
    // Offset: 0x1753718
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JProperty* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::JProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JProperty*, creationType>(name)));
    }
    // public System.Void .ctor(System.String name, System.Object content)
    // Offset: 0x1754814
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JProperty* New_ctor(::StringW name, ::Il2CppObject* content) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::JProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JProperty*, creationType>(name, content)));
    }
    // static public Newtonsoft.Json.Linq.JProperty Load(Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.Linq.JsonLoadSettings settings)
    // Offset: 0x17564C4
    static ::Newtonsoft::Json::Linq::JProperty* Load(::Newtonsoft::Json::JsonReader* reader, ::Newtonsoft::Json::Linq::JsonLoadSettings* settings);
    // protected override System.Collections.Generic.IList`1<Newtonsoft.Json.Linq.JToken> get_ChildrenTokens()
    // Offset: 0x1755B9C
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Collections.Generic.IList`1<Newtonsoft.Json.Linq.JToken> JContainer::get_ChildrenTokens()
    ::System::Collections::Generic::IList_1<::Newtonsoft::Json::Linq::JToken*>* get_ChildrenTokens();
    // public override Newtonsoft.Json.Linq.JTokenType get_Type()
    // Offset: 0x17563D0
    // Implemented from: Newtonsoft.Json.Linq.JToken
    // Base method: Newtonsoft.Json.Linq.JTokenType JToken::get_Type()
    ::Newtonsoft::Json::Linq::JTokenType get_Type();
    // override Newtonsoft.Json.Linq.JToken GetItem(System.Int32 index)
    // Offset: 0x1755C3C
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: Newtonsoft.Json.Linq.JToken JContainer::GetItem(System.Int32 index)
    ::Newtonsoft::Json::Linq::JToken* GetItem(int index);
    // override System.Void SetItem(System.Int32 index, Newtonsoft.Json.Linq.JToken item)
    // Offset: 0x1755CCC
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Void JContainer::SetItem(System.Int32 index, Newtonsoft.Json.Linq.JToken item)
    void SetItem(int index, ::Newtonsoft::Json::Linq::JToken* item);
    // override System.Boolean RemoveItem(Newtonsoft.Json.Linq.JToken item)
    // Offset: 0x1755E1C
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Boolean JContainer::RemoveItem(Newtonsoft.Json.Linq.JToken item)
    bool RemoveItem(::Newtonsoft::Json::Linq::JToken* item);
    // override System.Void RemoveItemAt(System.Int32 index)
    // Offset: 0x1755F10
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Void JContainer::RemoveItemAt(System.Int32 index)
    void RemoveItemAt(int index);
    // override System.Int32 IndexOfItem(Newtonsoft.Json.Linq.JToken item)
    // Offset: 0x1756004
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Int32 JContainer::IndexOfItem(Newtonsoft.Json.Linq.JToken item)
    int IndexOfItem(::Newtonsoft::Json::Linq::JToken* item);
    // override System.Void InsertItem(System.Int32 index, Newtonsoft.Json.Linq.JToken item, System.Boolean skipParentCheck)
    // Offset: 0x1756038
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Void JContainer::InsertItem(System.Int32 index, Newtonsoft.Json.Linq.JToken item, System.Boolean skipParentCheck)
    void InsertItem(int index, ::Newtonsoft::Json::Linq::JToken* item, bool skipParentCheck);
    // override System.Boolean ContainsItem(Newtonsoft.Json.Linq.JToken item)
    // Offset: 0x1756198
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Boolean JContainer::ContainsItem(Newtonsoft.Json.Linq.JToken item)
    bool ContainsItem(::Newtonsoft::Json::Linq::JToken* item);
    // override System.Void ClearItems()
    // Offset: 0x17561BC
    // Implemented from: Newtonsoft.Json.Linq.JContainer
    // Base method: System.Void JContainer::ClearItems()
    void ClearItems();
    // override System.Boolean DeepEquals(Newtonsoft.Json.Linq.JToken node)
    // Offset: 0x17562B0
    // Implemented from: Newtonsoft.Json.Linq.JToken
    // Base method: System.Boolean JToken::DeepEquals(Newtonsoft.Json.Linq.JToken node)
    bool DeepEquals(::Newtonsoft::Json::Linq::JToken* node);
    // override Newtonsoft.Json.Linq.JToken CloneToken()
    // Offset: 0x1756370
    // Implemented from: Newtonsoft.Json.Linq.JToken
    // Base method: Newtonsoft.Json.Linq.JToken JToken::CloneToken()
    ::Newtonsoft::Json::Linq::JToken* CloneToken();
    // public override System.Void WriteTo(Newtonsoft.Json.JsonWriter writer, params Newtonsoft.Json.JsonConverter[] converters)
    // Offset: 0x17563D8
    // Implemented from: Newtonsoft.Json.Linq.JToken
    // Base method: System.Void JToken::WriteTo(Newtonsoft.Json.JsonWriter writer, params Newtonsoft.Json.JsonConverter[] converters)
    void WriteTo(::Newtonsoft::Json::JsonWriter* writer, ::ArrayW<::Newtonsoft::Json::JsonConverter*> converters);
    // override System.Int32 GetDeepHashCode()
    // Offset: 0x1756468
    // Implemented from: Newtonsoft.Json.Linq.JToken
    // Base method: System.Int32 JToken::GetDeepHashCode()
    int GetDeepHashCode();
  }; // Newtonsoft.Json.Linq.JProperty
  #pragma pack(pop)
  static check_size<sizeof(JProperty), 80 + sizeof(::StringW)> __Newtonsoft_Json_Linq_JPropertySizeCheck;
  static_assert(sizeof(JProperty) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Linq::JToken* (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Linq::JProperty* (*)(::Newtonsoft::Json::JsonReader*, ::Newtonsoft::Json::Linq::JsonLoadSettings*)>(&Newtonsoft::Json::Linq::JProperty::Load)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JsonLoadSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, settings});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::get_ChildrenTokens
// Il2CppName: get_ChildrenTokens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::Newtonsoft::Json::Linq::JToken*>* (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::get_ChildrenTokens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "get_ChildrenTokens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Linq::JTokenType (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::GetItem
// Il2CppName: GetItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Linq::JToken* (Newtonsoft::Json::Linq::JProperty::*)(int)>(&Newtonsoft::Json::Linq::JProperty::GetItem)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "GetItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::SetItem
// Il2CppName: SetItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)(int, ::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::SetItem)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "SetItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, item});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::RemoveItem
// Il2CppName: RemoveItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::RemoveItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "RemoveItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::RemoveItemAt
// Il2CppName: RemoveItemAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)(int)>(&Newtonsoft::Json::Linq::JProperty::RemoveItemAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "RemoveItemAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::IndexOfItem
// Il2CppName: IndexOfItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::IndexOfItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "IndexOfItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::InsertItem
// Il2CppName: InsertItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)(int, ::Newtonsoft::Json::Linq::JToken*, bool)>(&Newtonsoft::Json::Linq::JProperty::InsertItem)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    static auto* skipParentCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "InsertItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, item, skipParentCheck});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::ContainsItem
// Il2CppName: ContainsItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::ContainsItem)> {
  static const MethodInfo* get() {
    static auto* item = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "ContainsItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{item});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::ClearItems
// Il2CppName: ClearItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::ClearItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "ClearItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::DeepEquals
// Il2CppName: DeepEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::Linq::JToken*)>(&Newtonsoft::Json::Linq::JProperty::DeepEquals)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "DeepEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::CloneToken
// Il2CppName: CloneToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Linq::JToken* (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::CloneToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "CloneToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Linq::JProperty::*)(::Newtonsoft::Json::JsonWriter*, ::ArrayW<::Newtonsoft::Json::JsonConverter*>)>(&Newtonsoft::Json::Linq::JProperty::WriteTo)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* converters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonConverter"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, converters});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JProperty::GetDeepHashCode
// Il2CppName: GetDeepHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::Linq::JProperty::*)()>(&Newtonsoft::Json::Linq::JProperty::GetDeepHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JProperty*), "GetDeepHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
