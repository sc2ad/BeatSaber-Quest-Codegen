// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: ReadType
  struct ReadType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::ReadType, "Newtonsoft.Json", "ReadType");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.ReadType
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10B9D64
  struct ReadType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ReadType
    constexpr ReadType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Newtonsoft.Json.ReadType Read
    static constexpr const int Read = 0;
    // Get static field: static public Newtonsoft.Json.ReadType Read
    static ::Newtonsoft::Json::ReadType _get_Read();
    // Set static field: static public Newtonsoft.Json.ReadType Read
    static void _set_Read(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsInt32
    static constexpr const int ReadAsInt32 = 1;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsInt32
    static ::Newtonsoft::Json::ReadType _get_ReadAsInt32();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsInt32
    static void _set_ReadAsInt32(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsBytes
    static constexpr const int ReadAsBytes = 2;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsBytes
    static ::Newtonsoft::Json::ReadType _get_ReadAsBytes();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsBytes
    static void _set_ReadAsBytes(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsString
    static constexpr const int ReadAsString = 3;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsString
    static ::Newtonsoft::Json::ReadType _get_ReadAsString();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsString
    static void _set_ReadAsString(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsDecimal
    static constexpr const int ReadAsDecimal = 4;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsDecimal
    static ::Newtonsoft::Json::ReadType _get_ReadAsDecimal();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsDecimal
    static void _set_ReadAsDecimal(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsDateTime
    static constexpr const int ReadAsDateTime = 5;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsDateTime
    static ::Newtonsoft::Json::ReadType _get_ReadAsDateTime();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsDateTime
    static void _set_ReadAsDateTime(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsDateTimeOffset
    static constexpr const int ReadAsDateTimeOffset = 6;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsDateTimeOffset
    static ::Newtonsoft::Json::ReadType _get_ReadAsDateTimeOffset();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsDateTimeOffset
    static void _set_ReadAsDateTimeOffset(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsDouble
    static constexpr const int ReadAsDouble = 7;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsDouble
    static ::Newtonsoft::Json::ReadType _get_ReadAsDouble();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsDouble
    static void _set_ReadAsDouble(::Newtonsoft::Json::ReadType value);
    // static field const value: static public Newtonsoft.Json.ReadType ReadAsBoolean
    static constexpr const int ReadAsBoolean = 8;
    // Get static field: static public Newtonsoft.Json.ReadType ReadAsBoolean
    static ::Newtonsoft::Json::ReadType _get_ReadAsBoolean();
    // Set static field: static public Newtonsoft.Json.ReadType ReadAsBoolean
    static void _set_ReadAsBoolean(::Newtonsoft::Json::ReadType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Newtonsoft.Json.ReadType
  #pragma pack(pop)
  static check_size<sizeof(ReadType), 0 + sizeof(int)> __Newtonsoft_Json_ReadTypeSizeCheck;
  static_assert(sizeof(ReadType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
