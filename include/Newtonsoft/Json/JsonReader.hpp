// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Newtonsoft.Json.JsonToken
#include "Newtonsoft/Json/JsonToken.hpp"
// Including type: Newtonsoft.Json.JsonPosition
#include "Newtonsoft/Json/JsonPosition.hpp"
// Including type: Newtonsoft.Json.DateTimeZoneHandling
#include "Newtonsoft/Json/DateTimeZoneHandling.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Newtonsoft.Json.DateParseHandling
#include "Newtonsoft/Json/DateParseHandling.hpp"
// Including type: Newtonsoft.Json.FloatParseHandling
#include "Newtonsoft/Json/FloatParseHandling.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Skipping declaration: State because it is already included!
  // Skipping declaration: JsonContainerType because it is already included!
  // Forward declaring type: JsonReaderException
  class JsonReaderException;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonReader
  class JsonReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonReader);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonReader*, "Newtonsoft.Json", "JsonReader");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.JsonReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10B9E5C
  class JsonReader : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Newtonsoft::Json::JsonReader::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Newtonsoft.Json.JsonReader/Newtonsoft.Json.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Start
      static constexpr const int Start = 0;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Start
      static ::Newtonsoft::Json::JsonReader::State _get_Start();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Start
      static void _set_Start(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Complete
      static constexpr const int Complete = 1;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Complete
      static ::Newtonsoft::Json::JsonReader::State _get_Complete();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Complete
      static void _set_Complete(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Property
      static constexpr const int Property = 2;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Property
      static ::Newtonsoft::Json::JsonReader::State _get_Property();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Property
      static void _set_Property(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ObjectStart
      static constexpr const int ObjectStart = 3;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ObjectStart
      static ::Newtonsoft::Json::JsonReader::State _get_ObjectStart();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ObjectStart
      static void _set_ObjectStart(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Object
      static constexpr const int Object = 4;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Object
      static ::Newtonsoft::Json::JsonReader::State _get_Object();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Object
      static void _set_Object(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ArrayStart
      static constexpr const int ArrayStart = 5;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ArrayStart
      static ::Newtonsoft::Json::JsonReader::State _get_ArrayStart();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ArrayStart
      static void _set_ArrayStart(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Array
      static constexpr const int Array = 6;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Array
      static ::Newtonsoft::Json::JsonReader::State _get_Array();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Array
      static void _set_Array(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Closed
      static constexpr const int Closed = 7;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Closed
      static ::Newtonsoft::Json::JsonReader::State _get_Closed();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Closed
      static void _set_Closed(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State PostValue
      static constexpr const int PostValue = 8;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State PostValue
      static ::Newtonsoft::Json::JsonReader::State _get_PostValue();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State PostValue
      static void _set_PostValue(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ConstructorStart
      static constexpr const int ConstructorStart = 9;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ConstructorStart
      static ::Newtonsoft::Json::JsonReader::State _get_ConstructorStart();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State ConstructorStart
      static void _set_ConstructorStart(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Constructor
      static constexpr const int Constructor = 10;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Constructor
      static ::Newtonsoft::Json::JsonReader::State _get_Constructor();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Constructor
      static void _set_Constructor(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Error
      static constexpr const int Error = 11;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Error
      static ::Newtonsoft::Json::JsonReader::State _get_Error();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Error
      static void _set_Error(::Newtonsoft::Json::JsonReader::State value);
      // static field const value: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Finished
      static constexpr const int Finished = 12;
      // Get static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Finished
      static ::Newtonsoft::Json::JsonReader::State _get_Finished();
      // Set static field: static public Newtonsoft.Json.JsonReader/Newtonsoft.Json.State Finished
      static void _set_Finished(::Newtonsoft::Json::JsonReader::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Newtonsoft.Json.JsonReader/Newtonsoft.Json.State
    #pragma pack(pop)
    static check_size<sizeof(JsonReader::State), 0 + sizeof(int)> __Newtonsoft_Json_JsonReader_StateSizeCheck;
    static_assert(sizeof(JsonReader::State) == 0x4);
    public:
    // private Newtonsoft.Json.JsonToken _tokenType
    // Size: 0x4
    // Offset: 0x10
    ::Newtonsoft::Json::JsonToken tokenType;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonToken) == 0x4);
    // private System.Object _value
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Char _quoteChar
    // Size: 0x2
    // Offset: 0x20
    ::Il2CppChar quoteChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Newtonsoft.Json.JsonReader/Newtonsoft.Json.State _currentState
    // Size: 0x4
    // Offset: 0x24
    ::Newtonsoft::Json::JsonReader::State currentState;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonReader::State) == 0x4);
    // private Newtonsoft.Json.JsonPosition _currentPosition
    // Size: 0x11
    // Offset: 0x28
    ::Newtonsoft::Json::JsonPosition currentPosition;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonPosition) == 0x11);
    // private System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0x40
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // private Newtonsoft.Json.DateTimeZoneHandling _dateTimeZoneHandling
    // Size: 0x4
    // Offset: 0x48
    ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::DateTimeZoneHandling) == 0x4);
    // private System.Nullable`1<System.Int32> _maxDepth
    // Size: 0xFFFFFFFF
    // Offset: 0x4C
    ::System::Nullable_1<int> maxDepth;
    // private System.Boolean _hasExceededMaxDepth
    // Size: 0x1
    // Offset: 0x54
    bool hasExceededMaxDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Newtonsoft.Json.DateParseHandling _dateParseHandling
    // Size: 0x4
    // Offset: 0x58
    ::Newtonsoft::Json::DateParseHandling dateParseHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::DateParseHandling) == 0x4);
    // Newtonsoft.Json.FloatParseHandling _floatParseHandling
    // Size: 0x4
    // Offset: 0x5C
    ::Newtonsoft::Json::FloatParseHandling floatParseHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::FloatParseHandling) == 0x4);
    // private System.String _dateFormatString
    // Size: 0x8
    // Offset: 0x60
    ::StringW dateFormatString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<Newtonsoft.Json.JsonPosition> _stack
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>* stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>*) == 0x8);
    // private System.Boolean <CloseInput>k__BackingField
    // Size: 0x1
    // Offset: 0x70
    bool CloseInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <SupportMultipleContent>k__BackingField
    // Size: 0x1
    // Offset: 0x71
    bool SupportMultipleContent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Newtonsoft.Json.JsonToken _tokenType
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonToken& dyn__tokenType();
    // Get instance field reference: private System.Object _value
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__value();
    // Get instance field reference: System.Char _quoteChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__quoteChar();
    // Get instance field reference: Newtonsoft.Json.JsonReader/Newtonsoft.Json.State _currentState
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonReader::State& dyn__currentState();
    // Get instance field reference: private Newtonsoft.Json.JsonPosition _currentPosition
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonPosition& dyn__currentPosition();
    // Get instance field reference: private System.Globalization.CultureInfo _culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn__culture();
    // Get instance field reference: private Newtonsoft.Json.DateTimeZoneHandling _dateTimeZoneHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::DateTimeZoneHandling& dyn__dateTimeZoneHandling();
    // Get instance field reference: private System.Nullable`1<System.Int32> _maxDepth
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn__maxDepth();
    // Get instance field reference: private System.Boolean _hasExceededMaxDepth
    [[deprecated("Use field access instead!")]] bool& dyn__hasExceededMaxDepth();
    // Get instance field reference: Newtonsoft.Json.DateParseHandling _dateParseHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::DateParseHandling& dyn__dateParseHandling();
    // Get instance field reference: Newtonsoft.Json.FloatParseHandling _floatParseHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::FloatParseHandling& dyn__floatParseHandling();
    // Get instance field reference: private System.String _dateFormatString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__dateFormatString();
    // Get instance field reference: private System.Collections.Generic.List`1<Newtonsoft.Json.JsonPosition> _stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>*& dyn__stack();
    // Get instance field reference: private System.Boolean <CloseInput>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CloseInput$k__BackingField();
    // Get instance field reference: private System.Boolean <SupportMultipleContent>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SupportMultipleContent$k__BackingField();
    // protected Newtonsoft.Json.JsonReader/Newtonsoft.Json.State get_CurrentState()
    // Offset: 0x17CB594
    ::Newtonsoft::Json::JsonReader::State get_CurrentState();
    // public System.Boolean get_CloseInput()
    // Offset: 0x17CB59C
    bool get_CloseInput();
    // public System.Void set_CloseInput(System.Boolean value)
    // Offset: 0x17CB5A4
    void set_CloseInput(bool value);
    // public System.Boolean get_SupportMultipleContent()
    // Offset: 0x17CB5B0
    bool get_SupportMultipleContent();
    // public System.Void set_SupportMultipleContent(System.Boolean value)
    // Offset: 0x17CB5B8
    void set_SupportMultipleContent(bool value);
    // public Newtonsoft.Json.DateTimeZoneHandling get_DateTimeZoneHandling()
    // Offset: 0x17CB5C4
    ::Newtonsoft::Json::DateTimeZoneHandling get_DateTimeZoneHandling();
    // public System.Void set_DateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling value)
    // Offset: 0x17CB5CC
    void set_DateTimeZoneHandling(::Newtonsoft::Json::DateTimeZoneHandling value);
    // public Newtonsoft.Json.DateParseHandling get_DateParseHandling()
    // Offset: 0x17CB660
    ::Newtonsoft::Json::DateParseHandling get_DateParseHandling();
    // public System.Void set_DateParseHandling(Newtonsoft.Json.DateParseHandling value)
    // Offset: 0x17CB668
    void set_DateParseHandling(::Newtonsoft::Json::DateParseHandling value);
    // public Newtonsoft.Json.FloatParseHandling get_FloatParseHandling()
    // Offset: 0x17CB6FC
    ::Newtonsoft::Json::FloatParseHandling get_FloatParseHandling();
    // public System.Void set_FloatParseHandling(Newtonsoft.Json.FloatParseHandling value)
    // Offset: 0x17CB704
    void set_FloatParseHandling(::Newtonsoft::Json::FloatParseHandling value);
    // public System.String get_DateFormatString()
    // Offset: 0x17CB798
    ::StringW get_DateFormatString();
    // public System.Void set_DateFormatString(System.String value)
    // Offset: 0x17CB7A0
    void set_DateFormatString(::StringW value);
    // public System.Nullable`1<System.Int32> get_MaxDepth()
    // Offset: 0x17CB7A8
    ::System::Nullable_1<int> get_MaxDepth();
    // public System.Void set_MaxDepth(System.Nullable`1<System.Int32> value)
    // Offset: 0x17CB7B0
    void set_MaxDepth(::System::Nullable_1<int> value);
    // public Newtonsoft.Json.JsonToken get_TokenType()
    // Offset: 0x17CB858
    ::Newtonsoft::Json::JsonToken get_TokenType();
    // public System.Object get_Value()
    // Offset: 0x17CB860
    ::Il2CppObject* get_Value();
    // public System.Type get_ValueType()
    // Offset: 0x17CB868
    ::System::Type* get_ValueType();
    // public System.Int32 get_Depth()
    // Offset: 0x17CB87C
    int get_Depth();
    // public System.String get_Path()
    // Offset: 0x17CB900
    ::StringW get_Path();
    // public System.Globalization.CultureInfo get_Culture()
    // Offset: 0x17CBA18
    ::System::Globalization::CultureInfo* get_Culture();
    // public System.Void set_Culture(System.Globalization.CultureInfo value)
    // Offset: 0x17CBA90
    void set_Culture(::System::Globalization::CultureInfo* value);
    // protected System.Void .ctor()
    // Offset: 0x17CBB34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>()));
    }
    // Newtonsoft.Json.JsonPosition GetPosition(System.Int32 depth)
    // Offset: 0x17CBA98
    ::Newtonsoft::Json::JsonPosition GetPosition(int depth);
    // private System.Void Push(Newtonsoft.Json.JsonContainerType value)
    // Offset: 0x17CBB78
    void Push(::Newtonsoft::Json::JsonContainerType value);
    // private Newtonsoft.Json.JsonContainerType Pop()
    // Offset: 0x17CBDA0
    ::Newtonsoft::Json::JsonContainerType Pop();
    // private Newtonsoft.Json.JsonContainerType Peek()
    // Offset: 0x17CBE74
    ::Newtonsoft::Json::JsonContainerType Peek();
    // public System.Boolean Read()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read();
    // public System.Nullable`1<System.Int32> ReadAsInt32()
    // Offset: 0x17CBE7C
    ::System::Nullable_1<int> ReadAsInt32();
    // System.Nullable`1<System.Int32> ReadInt32String(System.String s)
    // Offset: 0x17CC32C
    ::System::Nullable_1<int> ReadInt32String(::StringW s);
    // public System.String ReadAsString()
    // Offset: 0x17CC564
    ::StringW ReadAsString();
    // public System.Byte[] ReadAsBytes()
    // Offset: 0x17CC8CC
    ::ArrayW<uint8_t> ReadAsBytes();
    // System.Byte[] ReadArrayIntoByteArray()
    // Offset: 0x17CCEEC
    ::ArrayW<uint8_t> ReadArrayIntoByteArray();
    // public System.Nullable`1<System.Double> ReadAsDouble()
    // Offset: 0x17CD120
    ::System::Nullable_1<double> ReadAsDouble();
    // System.Nullable`1<System.Double> ReadDoubleString(System.String s)
    // Offset: 0x17CD3E8
    ::System::Nullable_1<double> ReadDoubleString(::StringW s);
    // public System.Nullable`1<System.Boolean> ReadAsBoolean()
    // Offset: 0x17CD634
    ::System::Nullable_1<bool> ReadAsBoolean();
    // System.Nullable`1<System.Boolean> ReadBooleanString(System.String s)
    // Offset: 0x17CD8EC
    ::System::Nullable_1<bool> ReadBooleanString(::StringW s);
    // public System.Nullable`1<System.Decimal> ReadAsDecimal()
    // Offset: 0x17CDB2C
    ::System::Nullable_1<::System::Decimal> ReadAsDecimal();
    // System.Nullable`1<System.Decimal> ReadDecimalString(System.String s)
    // Offset: 0x17CDE0C
    ::System::Nullable_1<::System::Decimal> ReadDecimalString(::StringW s);
    // public System.Nullable`1<System.DateTime> ReadAsDateTime()
    // Offset: 0x17CE068
    ::System::Nullable_1<::System::DateTime> ReadAsDateTime();
    // System.Nullable`1<System.DateTime> ReadDateTimeString(System.String s)
    // Offset: 0x17CE320
    ::System::Nullable_1<::System::DateTime> ReadDateTimeString(::StringW s);
    // public System.Nullable`1<System.DateTimeOffset> ReadAsDateTimeOffset()
    // Offset: 0x17CE5F0
    ::System::Nullable_1<::System::DateTimeOffset> ReadAsDateTimeOffset();
    // System.Nullable`1<System.DateTimeOffset> ReadDateTimeOffsetString(System.String s)
    // Offset: 0x17CE8A8
    ::System::Nullable_1<::System::DateTimeOffset> ReadDateTimeOffsetString(::StringW s);
    // System.Void ReaderReadAndAssert()
    // Offset: 0x17CCE80
    void ReaderReadAndAssert();
    // Newtonsoft.Json.JsonReaderException CreateUnexpectedEndException()
    // Offset: 0x17CEB70
    ::Newtonsoft::Json::JsonReaderException* CreateUnexpectedEndException();
    // System.Void ReadIntoWrappedTypeObject()
    // Offset: 0x17CCCD4
    void ReadIntoWrappedTypeObject();
    // public System.Void Skip()
    // Offset: 0x17BCD28
    void Skip();
    // protected System.Void SetToken(Newtonsoft.Json.JsonToken newToken)
    // Offset: 0x17B9228
    void SetToken(::Newtonsoft::Json::JsonToken newToken);
    // protected System.Void SetToken(Newtonsoft.Json.JsonToken newToken, System.Object value)
    // Offset: 0x17B9234
    void SetToken(::Newtonsoft::Json::JsonToken newToken, ::Il2CppObject* value);
    // System.Void SetToken(Newtonsoft.Json.JsonToken newToken, System.Object value, System.Boolean updateIndex)
    // Offset: 0x17CC1D0
    void SetToken(::Newtonsoft::Json::JsonToken newToken, ::Il2CppObject* value, bool updateIndex);
    // System.Void SetPostValueState(System.Boolean updateIndex)
    // Offset: 0x17CECFC
    void SetPostValueState(bool updateIndex);
    // private System.Void UpdateScopeWithFinishedValue()
    // Offset: 0x17CBD88
    void UpdateScopeWithFinishedValue();
    // private System.Void ValidateEnd(Newtonsoft.Json.JsonToken endToken)
    // Offset: 0x17CEBC4
    void ValidateEnd(::Newtonsoft::Json::JsonToken endToken);
    // protected System.Void SetStateBasedOnCurrent()
    // Offset: 0x17CEE30
    void SetStateBasedOnCurrent();
    // private System.Void SetFinished()
    // Offset: 0x17CED3C
    void SetFinished();
    // private Newtonsoft.Json.JsonContainerType GetTypeForCloseToken(Newtonsoft.Json.JsonToken token)
    // Offset: 0x17CED54
    ::Newtonsoft::Json::JsonContainerType GetTypeForCloseToken(::Newtonsoft::Json::JsonToken token);
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x17CEF4C
    void System_IDisposable_Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x17CEFCC
    void Dispose(bool disposing);
    // public System.Void Close()
    // Offset: 0x17CEFF0
    void Close();
    // System.Void ReadAndAssert()
    // Offset: 0x17BCCB0
    void ReadAndAssert();
    // System.Boolean ReadAndMoveToContent()
    // Offset: 0x17CF004
    bool ReadAndMoveToContent();
    // System.Boolean MoveToContent()
    // Offset: 0x17CF044
    bool MoveToContent();
    // private Newtonsoft.Json.JsonToken GetContentToken()
    // Offset: 0x17CC154
    ::Newtonsoft::Json::JsonToken GetContentToken();
  }; // Newtonsoft.Json.JsonReader
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonReader::State, "Newtonsoft.Json", "JsonReader/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonReader::State (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_CloseInput
// Il2CppName: get_CloseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_CloseInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_CloseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_CloseInput
// Il2CppName: set_CloseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(bool)>(&Newtonsoft::Json::JsonReader::set_CloseInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_CloseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_SupportMultipleContent
// Il2CppName: get_SupportMultipleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_SupportMultipleContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_SupportMultipleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_SupportMultipleContent
// Il2CppName: set_SupportMultipleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(bool)>(&Newtonsoft::Json::JsonReader::set_SupportMultipleContent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_SupportMultipleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_DateTimeZoneHandling
// Il2CppName: get_DateTimeZoneHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::DateTimeZoneHandling (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_DateTimeZoneHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_DateTimeZoneHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_DateTimeZoneHandling
// Il2CppName: set_DateTimeZoneHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::DateTimeZoneHandling)>(&Newtonsoft::Json::JsonReader::set_DateTimeZoneHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_DateTimeZoneHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_DateParseHandling
// Il2CppName: get_DateParseHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::DateParseHandling (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_DateParseHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_DateParseHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_DateParseHandling
// Il2CppName: set_DateParseHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::DateParseHandling)>(&Newtonsoft::Json::JsonReader::set_DateParseHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateParseHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_DateParseHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_FloatParseHandling
// Il2CppName: get_FloatParseHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::FloatParseHandling (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_FloatParseHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_FloatParseHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_FloatParseHandling
// Il2CppName: set_FloatParseHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::FloatParseHandling)>(&Newtonsoft::Json::JsonReader::set_FloatParseHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatParseHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_FloatParseHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_DateFormatString
// Il2CppName: get_DateFormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_DateFormatString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_DateFormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_DateFormatString
// Il2CppName: set_DateFormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::set_DateFormatString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_DateFormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_MaxDepth
// Il2CppName: get_MaxDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_MaxDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_MaxDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_MaxDepth
// Il2CppName: set_MaxDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::System::Nullable_1<int>)>(&Newtonsoft::Json::JsonReader::set_MaxDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_MaxDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_TokenType
// Il2CppName: get_TokenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonToken (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_TokenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_TokenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_ValueType
// Il2CppName: get_ValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_ValueType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_ValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::get_Culture
// Il2CppName: get_Culture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::get_Culture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "get_Culture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::set_Culture
// Il2CppName: set_Culture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::System::Globalization::CultureInfo*)>(&Newtonsoft::Json::JsonReader::set_Culture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "set_Culture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonPosition (Newtonsoft::Json::JsonReader::*)(int)>(&Newtonsoft::Json::JsonReader::GetPosition)> {
  static const MethodInfo* get() {
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depth});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonReader::Push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonContainerType (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonContainerType (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsInt32
// Il2CppName: ReadAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadInt32String
// Il2CppName: ReadInt32String
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadInt32String)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadInt32String", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsString
// Il2CppName: ReadAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsBytes
// Il2CppName: ReadAsBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadArrayIntoByteArray
// Il2CppName: ReadArrayIntoByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadArrayIntoByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadArrayIntoByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsDouble
// Il2CppName: ReadAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<double> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadDoubleString
// Il2CppName: ReadDoubleString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<double> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadDoubleString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadDoubleString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsBoolean
// Il2CppName: ReadAsBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<bool> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadBooleanString
// Il2CppName: ReadBooleanString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<bool> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadBooleanString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadBooleanString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsDecimal
// Il2CppName: ReadAsDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::Decimal> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadDecimalString
// Il2CppName: ReadDecimalString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::Decimal> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadDecimalString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadDecimalString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsDateTime
// Il2CppName: ReadAsDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTime> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadDateTimeString
// Il2CppName: ReadDateTimeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTime> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadDateTimeString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadDateTimeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAsDateTimeOffset
// Il2CppName: ReadAsDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTimeOffset> (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAsDateTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAsDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadDateTimeOffsetString
// Il2CppName: ReadDateTimeOffsetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTimeOffset> (Newtonsoft::Json::JsonReader::*)(::StringW)>(&Newtonsoft::Json::JsonReader::ReadDateTimeOffsetString)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadDateTimeOffsetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReaderReadAndAssert
// Il2CppName: ReaderReadAndAssert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReaderReadAndAssert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReaderReadAndAssert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::CreateUnexpectedEndException
// Il2CppName: CreateUnexpectedEndException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonReaderException* (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::CreateUnexpectedEndException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "CreateUnexpectedEndException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadIntoWrappedTypeObject
// Il2CppName: ReadIntoWrappedTypeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadIntoWrappedTypeObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadIntoWrappedTypeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Skip
// Il2CppName: Skip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::Skip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Skip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetToken
// Il2CppName: SetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonReader::SetToken)> {
  static const MethodInfo* get() {
    static auto* newToken = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newToken});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetToken
// Il2CppName: SetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonToken, ::Il2CppObject*)>(&Newtonsoft::Json::JsonReader::SetToken)> {
  static const MethodInfo* get() {
    static auto* newToken = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newToken, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetToken
// Il2CppName: SetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonToken, ::Il2CppObject*, bool)>(&Newtonsoft::Json::JsonReader::SetToken)> {
  static const MethodInfo* get() {
    static auto* newToken = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* updateIndex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newToken, value, updateIndex});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetPostValueState
// Il2CppName: SetPostValueState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(bool)>(&Newtonsoft::Json::JsonReader::SetPostValueState)> {
  static const MethodInfo* get() {
    static auto* updateIndex = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetPostValueState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateIndex});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::UpdateScopeWithFinishedValue
// Il2CppName: UpdateScopeWithFinishedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::UpdateScopeWithFinishedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "UpdateScopeWithFinishedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ValidateEnd
// Il2CppName: ValidateEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonReader::ValidateEnd)> {
  static const MethodInfo* get() {
    static auto* endToken = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ValidateEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endToken});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetStateBasedOnCurrent
// Il2CppName: SetStateBasedOnCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::SetStateBasedOnCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetStateBasedOnCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::SetFinished
// Il2CppName: SetFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::SetFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "SetFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::GetTypeForCloseToken
// Il2CppName: GetTypeForCloseToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonContainerType (Newtonsoft::Json::JsonReader::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonReader::GetTypeForCloseToken)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "GetTypeForCloseToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)(bool)>(&Newtonsoft::Json::JsonReader::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAndAssert
// Il2CppName: ReadAndAssert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAndAssert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAndAssert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::ReadAndMoveToContent
// Il2CppName: ReadAndMoveToContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::ReadAndMoveToContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "ReadAndMoveToContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::MoveToContent
// Il2CppName: MoveToContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::MoveToContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "MoveToContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonReader::GetContentToken
// Il2CppName: GetContentToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonToken (Newtonsoft::Json::JsonReader::*)()>(&Newtonsoft::Json::JsonReader::GetContentToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonReader*), "GetContentToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
