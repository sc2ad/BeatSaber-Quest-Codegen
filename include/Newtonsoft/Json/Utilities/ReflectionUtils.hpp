// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Attribute
  class Attribute;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: BindingFlags
  struct BindingFlags;
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Forward declaring namespace: System::Runtime::Serialization::Formatters
namespace System::Runtime::Serialization::Formatters {
  // Forward declaring type: FormatterAssemblyStyle
  struct FormatterAssemblyStyle;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationBinder
  class SerializationBinder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: ReflectionUtils
  class ReflectionUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::ReflectionUtils);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::ReflectionUtils*, "Newtonsoft.Json.Utilities", "ReflectionUtils");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.ReflectionUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAEFC
  class ReflectionUtils : public ::Il2CppObject {
    public:
    // Nested type: ::Newtonsoft::Json::Utilities::ReflectionUtils::$$c
    class $$c;
    // Nested type: ::Newtonsoft::Json::Utilities::ReflectionUtils::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: ::Newtonsoft::Json::Utilities::ReflectionUtils::$$c__DisplayClass43_0
    class $$c__DisplayClass43_0;
    // Get static field: static public readonly System.Type[] EmptyTypes
    static ::ArrayW<::System::Type*> _get_EmptyTypes();
    // Set static field: static public readonly System.Type[] EmptyTypes
    static void _set_EmptyTypes(::ArrayW<::System::Type*> value);
    // static private System.Void .cctor()
    // Offset: 0x21571CC
    static void _cctor();
    // static public System.Boolean IsVirtual(System.Reflection.PropertyInfo propertyInfo)
    // Offset: 0x21462A0
    static bool IsVirtual(::System::Reflection::PropertyInfo* propertyInfo);
    // static public System.Reflection.MethodInfo GetBaseDefinition(System.Reflection.PropertyInfo propertyInfo)
    // Offset: 0x2157248
    static ::System::Reflection::MethodInfo* GetBaseDefinition(::System::Reflection::PropertyInfo* propertyInfo);
    // static public System.Boolean IsPublic(System.Reflection.PropertyInfo property)
    // Offset: 0x21572DC
    static bool IsPublic(::System::Reflection::PropertyInfo* property);
    // static public System.Type GetObjectType(System.Object v)
    // Offset: 0x214DA74
    static ::System::Type* GetObjectType(::Il2CppObject* v);
    // static public System.String GetTypeName(System.Type t, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle assemblyFormat, System.Runtime.Serialization.SerializationBinder binder)
    // Offset: 0x2157360
    static ::StringW GetTypeName(::System::Type* t, ::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle assemblyFormat, ::System::Runtime::Serialization::SerializationBinder* binder);
    // static private System.String RemoveAssemblyDetails(System.String fullyQualifiedTypeName)
    // Offset: 0x2157440
    static ::StringW RemoveAssemblyDetails(::StringW fullyQualifiedTypeName);
    // static public System.Boolean HasDefaultConstructor(System.Type t, System.Boolean nonPublic)
    // Offset: 0x2146938
    static bool HasDefaultConstructor(::System::Type* t, bool nonPublic);
    // static public System.Reflection.ConstructorInfo GetDefaultConstructor(System.Type t)
    // Offset: 0x21576D0
    static ::System::Reflection::ConstructorInfo* GetDefaultConstructor(::System::Type* t);
    // static public System.Reflection.ConstructorInfo GetDefaultConstructor(System.Type t, System.Boolean nonPublic)
    // Offset: 0x21575A8
    static ::System::Reflection::ConstructorInfo* GetDefaultConstructor(::System::Type* t, bool nonPublic);
    // static public System.Boolean IsNullable(System.Type t)
    // Offset: 0x214D620
    static bool IsNullable(::System::Type* t);
    // static public System.Boolean IsNullableType(System.Type t)
    // Offset: 0x214C560
    static bool IsNullableType(::System::Type* t);
    // static public System.Type EnsureNotNullableType(System.Type t)
    // Offset: 0x2157758
    static ::System::Type* EnsureNotNullableType(::System::Type* t);
    // static public System.Boolean IsGenericDefinition(System.Type type, System.Type genericInterfaceDefinition)
    // Offset: 0x21577DC
    static bool IsGenericDefinition(::System::Type* type, ::System::Type* genericInterfaceDefinition);
    // static public System.Boolean ImplementsGenericDefinition(System.Type type, System.Type genericInterfaceDefinition)
    // Offset: 0x214B55C
    static bool ImplementsGenericDefinition(::System::Type* type, ::System::Type* genericInterfaceDefinition);
    // static public System.Boolean ImplementsGenericDefinition(System.Type type, System.Type genericInterfaceDefinition, out System.Type implementingType)
    // Offset: 0x215783C
    static bool ImplementsGenericDefinition(::System::Type* type, ::System::Type* genericInterfaceDefinition, ByRef<::System::Type*> implementingType);
    // static public System.Boolean InheritsGenericDefinition(System.Type type, System.Type genericClassDefinition)
    // Offset: 0x2157A58
    static bool InheritsGenericDefinition(::System::Type* type, ::System::Type* genericClassDefinition);
    // static public System.Boolean InheritsGenericDefinition(System.Type type, System.Type genericClassDefinition, out System.Type implementingType)
    // Offset: 0x2157ADC
    static bool InheritsGenericDefinition(::System::Type* type, ::System::Type* genericClassDefinition, ByRef<::System::Type*> implementingType);
    // static private System.Boolean InheritsGenericDefinitionInternal(System.Type currentType, System.Type genericClassDefinition, out System.Type implementingType)
    // Offset: 0x2157C48
    static bool InheritsGenericDefinitionInternal(::System::Type* currentType, ::System::Type* genericClassDefinition, ByRef<::System::Type*> implementingType);
    // static public System.Type GetCollectionItemType(System.Type type)
    // Offset: 0x2157D50
    static ::System::Type* GetCollectionItemType(::System::Type* type);
    // static public System.Void GetDictionaryKeyValueTypes(System.Type dictionaryType, out System.Type keyType, out System.Type valueType)
    // Offset: 0x2157F78
    static void GetDictionaryKeyValueTypes(::System::Type* dictionaryType, ByRef<::System::Type*> keyType, ByRef<::System::Type*> valueType);
    // static public System.Type GetMemberUnderlyingType(System.Reflection.MemberInfo member)
    // Offset: 0x2156E48
    static ::System::Type* GetMemberUnderlyingType(::System::Reflection::MemberInfo* member);
    // static public System.Boolean IsIndexedProperty(System.Reflection.MemberInfo member)
    // Offset: 0x21581A0
    static bool IsIndexedProperty(::System::Reflection::MemberInfo* member);
    // static public System.Boolean IsIndexedProperty(System.Reflection.PropertyInfo property)
    // Offset: 0x2158264
    static bool IsIndexedProperty(::System::Reflection::PropertyInfo* property);
    // static public System.Object GetMemberValue(System.Reflection.MemberInfo member, System.Object target)
    // Offset: 0x214869C
    static ::Il2CppObject* GetMemberValue(::System::Reflection::MemberInfo* member, ::Il2CppObject* target);
    // static public System.Void SetMemberValue(System.Reflection.MemberInfo member, System.Object target, System.Object value)
    // Offset: 0x214821C
    static void SetMemberValue(::System::Reflection::MemberInfo* member, ::Il2CppObject* target, ::Il2CppObject* value);
    // static public System.Boolean CanReadMemberValue(System.Reflection.MemberInfo member, System.Boolean nonPublic)
    // Offset: 0x2156B74
    static bool CanReadMemberValue(::System::Reflection::MemberInfo* member, bool nonPublic);
    // static public System.Boolean CanSetMemberValue(System.Reflection.MemberInfo member, System.Boolean nonPublic, System.Boolean canSetReadOnly)
    // Offset: 0x2156CC0
    static bool CanSetMemberValue(::System::Reflection::MemberInfo* member, bool nonPublic, bool canSetReadOnly);
    // static public System.Collections.Generic.List`1<System.Reflection.MemberInfo> GetFieldsAndProperties(System.Type type, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x21582E4
    static ::System::Collections::Generic::List_1<::System::Reflection::MemberInfo*>* GetFieldsAndProperties(::System::Type* type, ::System::Reflection::BindingFlags bindingAttr);
    // static private System.Boolean IsOverridenGenericMember(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x2158F50
    static bool IsOverridenGenericMember(::System::Reflection::MemberInfo* memberInfo, ::System::Reflection::BindingFlags bindingAttr);
    // static public T GetAttribute(System.Object attributeProvider)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetAttribute(::Il2CppObject* attributeProvider) {
      static_assert(std::is_convertible_v<T, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::ReflectionUtils::GetAttribute");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Utilities", "ReflectionUtils", "GetAttribute", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeProvider)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, attributeProvider);
    }
    // static public T GetAttribute(System.Object attributeProvider, System.Boolean inherit)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetAttribute(::Il2CppObject* attributeProvider, bool inherit) {
      static_assert(std::is_convertible_v<T, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::ReflectionUtils::GetAttribute");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Utilities", "ReflectionUtils", "GetAttribute", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeProvider), ::il2cpp_utils::ExtractType(inherit)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, attributeProvider, inherit);
    }
    // static public T[] GetAttributes(System.Object attributeProvider, System.Boolean inherit)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> GetAttributes(::Il2CppObject* attributeProvider, bool inherit) {
      static_assert(std::is_convertible_v<T, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::ReflectionUtils::GetAttributes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Utilities", "ReflectionUtils", "GetAttributes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeProvider), ::il2cpp_utils::ExtractType(inherit)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, attributeProvider, inherit);
    }
    // static public System.Attribute[] GetAttributes(System.Object attributeProvider, System.Type attributeType, System.Boolean inherit)
    // Offset: 0x2146DD0
    static ::ArrayW<::System::Attribute*> GetAttributes(::Il2CppObject* attributeProvider, ::System::Type* attributeType, bool inherit);
    // static public System.Void SplitFullyQualifiedTypeName(System.String fullyQualifiedTypeName, out System.String typeName, out System.String assemblyName)
    // Offset: 0x2159100
    static void SplitFullyQualifiedTypeName(::StringW fullyQualifiedTypeName, ByRef<::StringW> typeName, ByRef<::StringW> assemblyName);
    // static private System.Nullable`1<System.Int32> GetAssemblyDelimiterIndex(System.String fullyQualifiedTypeName)
    // Offset: 0x21591E8
    static ::System::Nullable_1<int> GetAssemblyDelimiterIndex(::StringW fullyQualifiedTypeName);
    // static public System.Reflection.MemberInfo GetMemberInfoFromType(System.Type targetType, System.Reflection.MemberInfo memberInfo)
    // Offset: 0x2146340
    static ::System::Reflection::MemberInfo* GetMemberInfoFromType(::System::Type* targetType, ::System::Reflection::MemberInfo* memberInfo);
    // static public System.Collections.Generic.IEnumerable`1<System.Reflection.FieldInfo> GetFields(System.Type targetType, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x2158BDC
    static ::System::Collections::Generic::IEnumerable_1<::System::Reflection::FieldInfo*>* GetFields(::System::Type* targetType, ::System::Reflection::BindingFlags bindingAttr);
    // static private System.Void GetChildPrivateFields(System.Collections.Generic.IList`1<System.Reflection.MemberInfo> initialFields, System.Type targetType, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x21592C8
    static void GetChildPrivateFields(::System::Collections::Generic::IList_1<::System::Reflection::MemberInfo*>* initialFields, ::System::Type* targetType, ::System::Reflection::BindingFlags bindingAttr);
    // static public System.Collections.Generic.IEnumerable`1<System.Reflection.PropertyInfo> GetProperties(System.Type targetType, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x2158CCC
    static ::System::Collections::Generic::IEnumerable_1<::System::Reflection::PropertyInfo*>* GetProperties(::System::Type* targetType, ::System::Reflection::BindingFlags bindingAttr);
    // static public System.Reflection.BindingFlags RemoveFlag(System.Reflection.BindingFlags bindingAttr, System.Reflection.BindingFlags flag)
    // Offset: 0x215948C
    static ::System::Reflection::BindingFlags RemoveFlag(::System::Reflection::BindingFlags bindingAttr, ::System::Reflection::BindingFlags flag);
    // static private System.Void GetChildPrivateProperties(System.Collections.Generic.IList`1<System.Reflection.PropertyInfo> initialProperties, System.Type targetType, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0x215949C
    static void GetChildPrivateProperties(::System::Collections::Generic::IList_1<::System::Reflection::PropertyInfo*>* initialProperties, ::System::Type* targetType, ::System::Reflection::BindingFlags bindingAttr);
    // static public System.Object GetDefaultValue(System.Type type)
    // Offset: 0x2159920
    static ::Il2CppObject* GetDefaultValue(::System::Type* type);
  }; // Newtonsoft.Json.Utilities.ReflectionUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Utilities::ReflectionUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsVirtual
// Il2CppName: IsVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::PropertyInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsVirtual)> {
  static const MethodInfo* get() {
    static auto* propertyInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "PropertyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyInfo});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetBaseDefinition
// Il2CppName: GetBaseDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)(::System::Reflection::PropertyInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetBaseDefinition)> {
  static const MethodInfo* get() {
    static auto* propertyInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "PropertyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetBaseDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyInfo});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsPublic
// Il2CppName: IsPublic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::PropertyInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsPublic)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System.Reflection", "PropertyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsPublic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetObjectType
// Il2CppName: GetObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::Il2CppObject*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetObjectType)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetTypeName
// Il2CppName: GetTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*, ::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle, ::System::Runtime::Serialization::SerializationBinder*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetTypeName)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* assemblyFormat = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization.Formatters", "FormatterAssemblyStyle")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationBinder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, assemblyFormat, binder});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::RemoveAssemblyDetails
// Il2CppName: RemoveAssemblyDetails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::Utilities::ReflectionUtils::RemoveAssemblyDetails)> {
  static const MethodInfo* get() {
    static auto* fullyQualifiedTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "RemoveAssemblyDetails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullyQualifiedTypeName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::HasDefaultConstructor
// Il2CppName: HasDefaultConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, bool)>(&Newtonsoft::Json::Utilities::ReflectionUtils::HasDefaultConstructor)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* nonPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "HasDefaultConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, nonPublic});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultConstructor
// Il2CppName: GetDefaultConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultConstructor)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetDefaultConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultConstructor
// Il2CppName: GetDefaultConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (*)(::System::Type*, bool)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultConstructor)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* nonPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetDefaultConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, nonPublic});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsNullable
// Il2CppName: IsNullable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsNullable)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsNullable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsNullableType
// Il2CppName: IsNullableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsNullableType)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsNullableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::EnsureNotNullableType
// Il2CppName: EnsureNotNullableType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::EnsureNotNullableType)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "EnsureNotNullableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsGenericDefinition
// Il2CppName: IsGenericDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsGenericDefinition)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericInterfaceDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsGenericDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, genericInterfaceDefinition});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::ImplementsGenericDefinition
// Il2CppName: ImplementsGenericDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::ImplementsGenericDefinition)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericInterfaceDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "ImplementsGenericDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, genericInterfaceDefinition});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::ImplementsGenericDefinition
// Il2CppName: ImplementsGenericDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*, ByRef<::System::Type*>)>(&Newtonsoft::Json::Utilities::ReflectionUtils::ImplementsGenericDefinition)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericInterfaceDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* implementingType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "ImplementsGenericDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, genericInterfaceDefinition, implementingType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinition
// Il2CppName: InheritsGenericDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinition)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericClassDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "InheritsGenericDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, genericClassDefinition});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinition
// Il2CppName: InheritsGenericDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*, ByRef<::System::Type*>)>(&Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinition)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericClassDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* implementingType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "InheritsGenericDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, genericClassDefinition, implementingType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinitionInternal
// Il2CppName: InheritsGenericDefinitionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*, ByRef<::System::Type*>)>(&Newtonsoft::Json::Utilities::ReflectionUtils::InheritsGenericDefinitionInternal)> {
  static const MethodInfo* get() {
    static auto* currentType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* genericClassDefinition = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* implementingType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "InheritsGenericDefinitionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentType, genericClassDefinition, implementingType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetCollectionItemType
// Il2CppName: GetCollectionItemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetCollectionItemType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetCollectionItemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetDictionaryKeyValueTypes
// Il2CppName: GetDictionaryKeyValueTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*, ByRef<::System::Type*>, ByRef<::System::Type*>)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetDictionaryKeyValueTypes)> {
  static const MethodInfo* get() {
    static auto* dictionaryType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* keyType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    static auto* valueType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetDictionaryKeyValueTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dictionaryType, keyType, valueType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberUnderlyingType
// Il2CppName: GetMemberUnderlyingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberUnderlyingType)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetMemberUnderlyingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsIndexedProperty
// Il2CppName: IsIndexedProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsIndexedProperty)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsIndexedProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsIndexedProperty
// Il2CppName: IsIndexedProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::PropertyInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsIndexedProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System.Reflection", "PropertyInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsIndexedProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberValue
// Il2CppName: GetMemberValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Reflection::MemberInfo*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberValue)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetMemberValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, target});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::SetMemberValue
// Il2CppName: SetMemberValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::MemberInfo*, ::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::SetMemberValue)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "SetMemberValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, target, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::CanReadMemberValue
// Il2CppName: CanReadMemberValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, bool)>(&Newtonsoft::Json::Utilities::ReflectionUtils::CanReadMemberValue)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* nonPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "CanReadMemberValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, nonPublic});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::CanSetMemberValue
// Il2CppName: CanSetMemberValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, bool, bool)>(&Newtonsoft::Json::Utilities::ReflectionUtils::CanSetMemberValue)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* nonPublic = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* canSetReadOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "CanSetMemberValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, nonPublic, canSetReadOnly});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetFieldsAndProperties
// Il2CppName: GetFieldsAndProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Reflection::MemberInfo*>* (*)(::System::Type*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetFieldsAndProperties)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetFieldsAndProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::IsOverridenGenericMember
// Il2CppName: IsOverridenGenericMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MemberInfo*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::IsOverridenGenericMember)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "IsOverridenGenericMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetAttribute
// Il2CppName: GetAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetAttribute
// Il2CppName: GetAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetAttributes
// Il2CppName: GetAttributes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Attribute*> (*)(::Il2CppObject*, ::System::Type*, bool)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* attributeProvider = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inherit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeProvider, attributeType, inherit});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::SplitFullyQualifiedTypeName
// Il2CppName: SplitFullyQualifiedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>)>(&Newtonsoft::Json::Utilities::ReflectionUtils::SplitFullyQualifiedTypeName)> {
  static const MethodInfo* get() {
    static auto* fullyQualifiedTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* assemblyName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "SplitFullyQualifiedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullyQualifiedTypeName, typeName, assemblyName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetAssemblyDelimiterIndex
// Il2CppName: GetAssemblyDelimiterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (*)(::StringW)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetAssemblyDelimiterIndex)> {
  static const MethodInfo* get() {
    static auto* fullyQualifiedTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetAssemblyDelimiterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullyQualifiedTypeName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberInfoFromType
// Il2CppName: GetMemberInfoFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MemberInfo* (*)(::System::Type*, ::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetMemberInfoFromType)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetMemberInfoFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType, memberInfo});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetFields
// Il2CppName: GetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Reflection::FieldInfo*>* (*)(::System::Type*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetFields)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetChildPrivateFields
// Il2CppName: GetChildPrivateFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<::System::Reflection::MemberInfo*>*, ::System::Type*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetChildPrivateFields)> {
  static const MethodInfo* get() {
    static auto* initialFields = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")})->byval_arg;
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetChildPrivateFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialFields, targetType, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetProperties
// Il2CppName: GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Reflection::PropertyInfo*>* (*)(::System::Type*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetProperties)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::RemoveFlag
// Il2CppName: RemoveFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::BindingFlags (*)(::System::Reflection::BindingFlags, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::RemoveFlag)> {
  static const MethodInfo* get() {
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "RemoveFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingAttr, flag});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetChildPrivateProperties
// Il2CppName: GetChildPrivateProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<::System::Reflection::PropertyInfo*>*, ::System::Type*, ::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetChildPrivateProperties)> {
  static const MethodInfo* get() {
    static auto* initialProperties = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Reflection", "PropertyInfo")})->byval_arg;
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bindingAttr = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetChildPrivateProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initialProperties, targetType, bindingAttr});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultValue
// Il2CppName: GetDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::ReflectionUtils::GetDefaultValue)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::ReflectionUtils*), "GetDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
