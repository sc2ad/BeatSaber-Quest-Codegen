// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: ThreadSafeStore`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ThreadSafeStore_2;
  // Forward declaring type: BidirectionalDictionary`2<TFirst, TSecond>
  template<typename TFirst, typename TSecond>
  class BidirectionalDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: EnumUtils
  class EnumUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::EnumUtils);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::EnumUtils*, "Newtonsoft.Json.Utilities", "EnumUtils");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.EnumUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAE24
  class EnumUtils : public ::Il2CppObject {
    public:
    // Nested type: ::Newtonsoft::Json::Utilities::EnumUtils::$$c
    class $$c;
    // Nested type: ::Newtonsoft::Json::Utilities::EnumUtils::$$c__2_1<T>
    template<typename T>
    class $$c__2_1;
    // Get static field: static private readonly Newtonsoft.Json.Utilities.ThreadSafeStore`2<System.Type,Newtonsoft.Json.Utilities.BidirectionalDictionary`2<System.String,System.String>> EnumMemberNamesPerType
    static ::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::System::Type*, ::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>*>* _get_EnumMemberNamesPerType();
    // Set static field: static private readonly Newtonsoft.Json.Utilities.ThreadSafeStore`2<System.Type,Newtonsoft.Json.Utilities.BidirectionalDictionary`2<System.String,System.String>> EnumMemberNamesPerType
    static void _set_EnumMemberNamesPerType(::Newtonsoft::Json::Utilities::ThreadSafeStore_2<::System::Type*, ::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>*>* value);
    // static private System.Void .cctor()
    // Offset: 0x2153BA8
    static void _cctor();
    // static private Newtonsoft.Json.Utilities.BidirectionalDictionary`2<System.String,System.String> InitializeEnumType(System.Type type)
    // Offset: 0x2152CB0
    static ::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>* InitializeEnumType(::System::Type* type);
    // static public System.Collections.Generic.IList`1<System.Object> GetValues(System.Type enumType)
    // Offset: 0x21530A8
    static ::System::Collections::Generic::IList_1<::Il2CppObject*>* GetValues(::System::Type* enumType);
    // static public System.Object ParseEnumName(System.String enumText, System.Boolean isNullable, System.Type t)
    // Offset: 0x21534C4
    static ::Il2CppObject* ParseEnumName(::StringW enumText, bool isNullable, ::System::Type* t);
    // static public System.String ToEnumName(System.Type enumType, System.String enumText, System.Boolean camelCaseText)
    // Offset: 0x21537B0
    static ::StringW ToEnumName(::System::Type* enumType, ::StringW enumText, bool camelCaseText);
    // static private System.String ResolvedEnumName(Newtonsoft.Json.Utilities.BidirectionalDictionary`2<System.String,System.String> map, System.String enumText)
    // Offset: 0x2153730
    static ::StringW ResolvedEnumName(::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>* map, ::StringW enumText);
  }; // Newtonsoft.Json.Utilities.EnumUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Utilities::EnumUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::InitializeEnumType
// Il2CppName: InitializeEnumType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::EnumUtils::InitializeEnumType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), "InitializeEnumType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::Il2CppObject*>* (*)(::System::Type*)>(&Newtonsoft::Json::Utilities::EnumUtils::GetValues)> {
  static const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::ParseEnumName
// Il2CppName: ParseEnumName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW, bool, ::System::Type*)>(&Newtonsoft::Json::Utilities::EnumUtils::ParseEnumName)> {
  static const MethodInfo* get() {
    static auto* enumText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), "ParseEnumName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumText, isNullable, t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::ToEnumName
// Il2CppName: ToEnumName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*, ::StringW, bool)>(&Newtonsoft::Json::Utilities::EnumUtils::ToEnumName)> {
  static const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* enumText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* camelCaseText = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), "ToEnumName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType, enumText, camelCaseText});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::EnumUtils::ResolvedEnumName
// Il2CppName: ResolvedEnumName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Newtonsoft::Json::Utilities::BidirectionalDictionary_2<::StringW, ::StringW>*, ::StringW)>(&Newtonsoft::Json::Utilities::EnumUtils::ResolvedEnumName)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "BidirectionalDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* enumText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::EnumUtils*), "ResolvedEnumName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, enumText});
  }
};
