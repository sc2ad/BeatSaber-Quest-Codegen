// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: DateTimeKind
  struct DateTimeKind;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDateTimeSerializationMode
  struct XmlDateTimeSerializationMode;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: DateTimeZoneHandling
  struct DateTimeZoneHandling;
  // Forward declaring type: DateFormatHandling
  struct DateFormatHandling;
}
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: StringReference
  struct StringReference;
  // Forward declaring type: DateTimeParser
  struct DateTimeParser;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextWriter
  class TextWriter;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: DateTimeUtils
  class DateTimeUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::DateTimeUtils);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::DateTimeUtils*, "Newtonsoft.Json.Utilities", "DateTimeUtils");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.DateTimeUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAD80
  // [ExtensionAttribute] Offset: FFFFFFFF
  class DateTimeUtils : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.Int64 InitialJavaScriptDateTicks
    static int64_t _get_InitialJavaScriptDateTicks();
    // Set static field: static readonly System.Int64 InitialJavaScriptDateTicks
    static void _set_InitialJavaScriptDateTicks(int64_t value);
    // Get static field: static private readonly System.Int32[] DaysToMonth365
    static ::ArrayW<int> _get_DaysToMonth365();
    // Set static field: static private readonly System.Int32[] DaysToMonth365
    static void _set_DaysToMonth365(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] DaysToMonth366
    static ::ArrayW<int> _get_DaysToMonth366();
    // Set static field: static private readonly System.Int32[] DaysToMonth366
    static void _set_DaysToMonth366(::ArrayW<int> value);
    // static private System.Void .cctor()
    // Offset: 0x214FC74
    static void _cctor();
    // static public System.TimeSpan GetUtcOffset(System.DateTime d)
    // Offset: 0x214FD44
    static ::System::TimeSpan GetUtcOffset(::System::DateTime d);
    // static public System.Xml.XmlDateTimeSerializationMode ToSerializationMode(System.DateTimeKind kind)
    // Offset: 0x214FDC0
    static ::System::Xml::XmlDateTimeSerializationMode ToSerializationMode(::System::DateTimeKind kind);
    // static System.DateTime EnsureDateTime(System.DateTime value, Newtonsoft.Json.DateTimeZoneHandling timeZone)
    // Offset: 0x214FF4C
    static ::System::DateTime EnsureDateTime(::System::DateTime value, ::Newtonsoft::Json::DateTimeZoneHandling timeZone);
    // static private System.DateTime SwitchToLocalTime(System.DateTime value)
    // Offset: 0x2150080
    static ::System::DateTime SwitchToLocalTime(::System::DateTime value);
    // static private System.DateTime SwitchToUtcTime(System.DateTime value)
    // Offset: 0x2150100
    static ::System::DateTime SwitchToUtcTime(::System::DateTime value);
    // static private System.Int64 ToUniversalTicks(System.DateTime dateTime)
    // Offset: 0x2150180
    static int64_t ToUniversalTicks(::System::DateTime dateTime);
    // static private System.Int64 ToUniversalTicks(System.DateTime dateTime, System.TimeSpan offset)
    // Offset: 0x215021C
    static int64_t ToUniversalTicks(::System::DateTime dateTime, ::System::TimeSpan offset);
    // static System.Int64 ConvertDateTimeToJavaScriptTicks(System.DateTime dateTime, System.TimeSpan offset)
    // Offset: 0x215033C
    static int64_t ConvertDateTimeToJavaScriptTicks(::System::DateTime dateTime, ::System::TimeSpan offset);
    // static System.Int64 ConvertDateTimeToJavaScriptTicks(System.DateTime dateTime)
    // Offset: 0x2150440
    static int64_t ConvertDateTimeToJavaScriptTicks(::System::DateTime dateTime);
    // static System.Int64 ConvertDateTimeToJavaScriptTicks(System.DateTime dateTime, System.Boolean convertToUtc)
    // Offset: 0x21504A8
    static int64_t ConvertDateTimeToJavaScriptTicks(::System::DateTime dateTime, bool convertToUtc);
    // static private System.Int64 UniversialTicksToJavaScriptTicks(System.Int64 universialTicks)
    // Offset: 0x21503B4
    static int64_t UniversialTicksToJavaScriptTicks(int64_t universialTicks);
    // static System.DateTime ConvertJavaScriptTicksToDateTime(System.Int64 javaScriptTicks)
    // Offset: 0x2150560
    static ::System::DateTime ConvertJavaScriptTicksToDateTime(int64_t javaScriptTicks);
    // static System.Boolean TryParseDateTimeIso(Newtonsoft.Json.Utilities.StringReference text, Newtonsoft.Json.DateTimeZoneHandling dateTimeZoneHandling, out System.DateTime dt)
    // Offset: 0x21505F8
    static bool TryParseDateTimeIso(::Newtonsoft::Json::Utilities::StringReference text, ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling, ByRef<::System::DateTime> dt);
    // static System.Boolean TryParseDateTimeOffsetIso(Newtonsoft.Json.Utilities.StringReference text, out System.DateTimeOffset dt)
    // Offset: 0x2150A50
    static bool TryParseDateTimeOffsetIso(::Newtonsoft::Json::Utilities::StringReference text, ByRef<::System::DateTimeOffset> dt);
    // static private System.DateTime CreateDateTime(Newtonsoft.Json.Utilities.DateTimeParser dateTimeParser)
    // Offset: 0x21509C4
    static ::System::DateTime CreateDateTime(::Newtonsoft::Json::Utilities::DateTimeParser dateTimeParser);
    // static System.Boolean TryParseDateTime(Newtonsoft.Json.Utilities.StringReference s, Newtonsoft.Json.DateTimeZoneHandling dateTimeZoneHandling, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTime dt)
    // Offset: 0x2150C04
    static bool TryParseDateTime(::Newtonsoft::Json::Utilities::StringReference s, ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTime> dt);
    // static System.Boolean TryParseDateTime(System.String s, Newtonsoft.Json.DateTimeZoneHandling dateTimeZoneHandling, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTime dt)
    // Offset: 0x2151284
    static bool TryParseDateTime(::StringW s, ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTime> dt);
    // static System.Boolean TryParseDateTimeOffset(Newtonsoft.Json.Utilities.StringReference s, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTimeOffset dt)
    // Offset: 0x2151544
    static bool TryParseDateTimeOffset(::Newtonsoft::Json::Utilities::StringReference s, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTimeOffset> dt);
    // static System.Boolean TryParseDateTimeOffset(System.String s, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTimeOffset dt)
    // Offset: 0x2151978
    static bool TryParseDateTimeOffset(::StringW s, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTimeOffset> dt);
    // static private System.Boolean TryParseMicrosoftDate(Newtonsoft.Json.Utilities.StringReference text, out System.Int64 ticks, out System.TimeSpan offset, out System.DateTimeKind kind)
    // Offset: 0x2151C2C
    static bool TryParseMicrosoftDate(::Newtonsoft::Json::Utilities::StringReference text, ByRef<int64_t> ticks, ByRef<::System::TimeSpan> offset, ByRef<::System::DateTimeKind> kind);
    // static private System.Boolean TryParseDateTimeMicrosoft(Newtonsoft.Json.Utilities.StringReference text, Newtonsoft.Json.DateTimeZoneHandling dateTimeZoneHandling, out System.DateTime dt)
    // Offset: 0x2151000
    static bool TryParseDateTimeMicrosoft(::Newtonsoft::Json::Utilities::StringReference text, ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling, ByRef<::System::DateTime> dt);
    // static private System.Boolean TryParseDateTimeExact(System.String text, Newtonsoft.Json.DateTimeZoneHandling dateTimeZoneHandling, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTime dt)
    // Offset: 0x2151190
    static bool TryParseDateTimeExact(::StringW text, ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTime> dt);
    // static private System.Boolean TryParseDateTimeOffsetMicrosoft(Newtonsoft.Json.Utilities.StringReference text, out System.DateTimeOffset dt)
    // Offset: 0x2151768
    static bool TryParseDateTimeOffsetMicrosoft(::Newtonsoft::Json::Utilities::StringReference text, ByRef<::System::DateTimeOffset> dt);
    // static private System.Boolean TryParseDateTimeOffsetExact(System.String text, System.String dateFormatString, System.Globalization.CultureInfo culture, out System.DateTimeOffset dt)
    // Offset: 0x21518B8
    static bool TryParseDateTimeOffsetExact(::StringW text, ::StringW dateFormatString, ::System::Globalization::CultureInfo* culture, ByRef<::System::DateTimeOffset> dt);
    // static private System.Boolean TryReadOffset(Newtonsoft.Json.Utilities.StringReference offsetText, System.Int32 startIndex, out System.TimeSpan offset)
    // Offset: 0x2151E34
    static bool TryReadOffset(::Newtonsoft::Json::Utilities::StringReference offsetText, int startIndex, ByRef<::System::TimeSpan> offset);
    // static System.Void WriteDateTimeString(System.IO.TextWriter writer, System.DateTime value, Newtonsoft.Json.DateFormatHandling format, System.String formatString, System.Globalization.CultureInfo culture)
    // Offset: 0x2151FBC
    static void WriteDateTimeString(::System::IO::TextWriter* writer, ::System::DateTime value, ::Newtonsoft::Json::DateFormatHandling format, ::StringW formatString, ::System::Globalization::CultureInfo* culture);
    // static System.Int32 WriteDateTimeString(System.Char[] chars, System.Int32 start, System.DateTime value, System.Nullable`1<System.TimeSpan> offset, System.DateTimeKind kind, Newtonsoft.Json.DateFormatHandling format)
    // Offset: 0x2152100
    static int WriteDateTimeString(::ArrayW<::Il2CppChar> chars, int start, ::System::DateTime value, ::System::Nullable_1<::System::TimeSpan> offset, ::System::DateTimeKind kind, ::Newtonsoft::Json::DateFormatHandling format);
    // static System.Int32 WriteDefaultIsoDate(System.Char[] chars, System.Int32 start, System.DateTime dt)
    // Offset: 0x21525C8
    static int WriteDefaultIsoDate(::ArrayW<::Il2CppChar> chars, int start, ::System::DateTime dt);
    // static private System.Void CopyIntToCharArray(System.Char[] chars, System.Int32 start, System.Int32 value, System.Int32 digits)
    // Offset: 0x2152AD0
    static void CopyIntToCharArray(::ArrayW<::Il2CppChar> chars, int start, int value, int digits);
    // static System.Int32 WriteDateTimeOffset(System.Char[] chars, System.Int32 start, System.TimeSpan offset, Newtonsoft.Json.DateFormatHandling format)
    // Offset: 0x215242C
    static int WriteDateTimeOffset(::ArrayW<::Il2CppChar> chars, int start, ::System::TimeSpan offset, ::Newtonsoft::Json::DateFormatHandling format);
    // static System.Void WriteDateTimeOffsetString(System.IO.TextWriter writer, System.DateTimeOffset value, Newtonsoft.Json.DateFormatHandling format, System.String formatString, System.Globalization.CultureInfo culture)
    // Offset: 0x2152B44
    static void WriteDateTimeOffsetString(::System::IO::TextWriter* writer, ::System::DateTimeOffset value, ::Newtonsoft::Json::DateFormatHandling format, ::StringW formatString, ::System::Globalization::CultureInfo* culture);
    // static private System.Void GetDateValues(System.DateTime td, out System.Int32 year, out System.Int32 month, out System.Int32 day)
    // Offset: 0x2152884
    static void GetDateValues(::System::DateTime td, ByRef<int> year, ByRef<int> month, ByRef<int> day);
  }; // Newtonsoft.Json.Utilities.DateTimeUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Utilities::DateTimeUtils::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::GetUtcOffset
// Il2CppName: GetUtcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TimeSpan (*)(::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::GetUtcOffset)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "GetUtcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ToSerializationMode
// Il2CppName: ToSerializationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDateTimeSerializationMode (*)(::System::DateTimeKind)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ToSerializationMode)> {
  static const MethodInfo* get() {
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ToSerializationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{kind});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::EnsureDateTime
// Il2CppName: EnsureDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime, ::Newtonsoft::Json::DateTimeZoneHandling)>(&Newtonsoft::Json::Utilities::DateTimeUtils::EnsureDateTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* timeZone = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "EnsureDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, timeZone});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::SwitchToLocalTime
// Il2CppName: SwitchToLocalTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::SwitchToLocalTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "SwitchToLocalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::SwitchToUtcTime
// Il2CppName: SwitchToUtcTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::SwitchToUtcTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "SwitchToUtcTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ToUniversalTicks
// Il2CppName: ToUniversalTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ToUniversalTicks)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ToUniversalTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ToUniversalTicks
// Il2CppName: ToUniversalTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::DateTime, ::System::TimeSpan)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ToUniversalTicks)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ToUniversalTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks
// Il2CppName: ConvertDateTimeToJavaScriptTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::DateTime, ::System::TimeSpan)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ConvertDateTimeToJavaScriptTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, offset});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks
// Il2CppName: ConvertDateTimeToJavaScriptTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ConvertDateTimeToJavaScriptTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks
// Il2CppName: ConvertDateTimeToJavaScriptTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::DateTime, bool)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ConvertDateTimeToJavaScriptTicks)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* convertToUtc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ConvertDateTimeToJavaScriptTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime, convertToUtc});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::UniversialTicksToJavaScriptTicks
// Il2CppName: UniversialTicksToJavaScriptTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int64_t)>(&Newtonsoft::Json::Utilities::DateTimeUtils::UniversialTicksToJavaScriptTicks)> {
  static const MethodInfo* get() {
    static auto* universialTicks = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "UniversialTicksToJavaScriptTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{universialTicks});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::ConvertJavaScriptTicksToDateTime
// Il2CppName: ConvertJavaScriptTicksToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int64_t)>(&Newtonsoft::Json::Utilities::DateTimeUtils::ConvertJavaScriptTicksToDateTime)> {
  static const MethodInfo* get() {
    static auto* javaScriptTicks = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "ConvertJavaScriptTicksToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{javaScriptTicks});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeIso
// Il2CppName: TryParseDateTimeIso
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ::Newtonsoft::Json::DateTimeZoneHandling, ByRef<::System::DateTime>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeIso)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dateTimeZoneHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeIso", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dateTimeZoneHandling, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetIso
// Il2CppName: TryParseDateTimeOffsetIso
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ByRef<::System::DateTimeOffset>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetIso)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeOffsetIso", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::CreateDateTime
// Il2CppName: CreateDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::Newtonsoft::Json::Utilities::DateTimeParser)>(&Newtonsoft::Json::Utilities::DateTimeUtils::CreateDateTime)> {
  static const MethodInfo* get() {
    static auto* dateTimeParser = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "DateTimeParser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "CreateDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTimeParser});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTime
// Il2CppName: TryParseDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ::Newtonsoft::Json::DateTimeZoneHandling, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTime>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTime)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dateTimeZoneHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, dateTimeZoneHandling, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTime
// Il2CppName: TryParseDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::Newtonsoft::Json::DateTimeZoneHandling, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTime>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTime)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateTimeZoneHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, dateTimeZoneHandling, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffset
// Il2CppName: TryParseDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTimeOffset>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffset
// Il2CppName: TryParseDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTimeOffset>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseMicrosoftDate
// Il2CppName: TryParseMicrosoftDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ByRef<int64_t>, ByRef<::System::TimeSpan>, ByRef<::System::DateTimeKind>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseMicrosoftDate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* ticks = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseMicrosoftDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, ticks, offset, kind});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeMicrosoft
// Il2CppName: TryParseDateTimeMicrosoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ::Newtonsoft::Json::DateTimeZoneHandling, ByRef<::System::DateTime>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeMicrosoft)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dateTimeZoneHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeMicrosoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dateTimeZoneHandling, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeExact
// Il2CppName: TryParseDateTimeExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::Newtonsoft::Json::DateTimeZoneHandling, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTime>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeExact)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateTimeZoneHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dateTimeZoneHandling, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetMicrosoft
// Il2CppName: TryParseDateTimeOffsetMicrosoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, ByRef<::System::DateTimeOffset>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetMicrosoft)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeOffsetMicrosoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetExact
// Il2CppName: TryParseDateTimeOffsetExact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::System::Globalization::CultureInfo*, ByRef<::System::DateTimeOffset>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryParseDateTimeOffsetExact)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryParseDateTimeOffsetExact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, dateFormatString, culture, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::TryReadOffset
// Il2CppName: TryReadOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Newtonsoft::Json::Utilities::StringReference, int, ByRef<::System::TimeSpan>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::TryReadOffset)> {
  static const MethodInfo* get() {
    static auto* offsetText = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "StringReference")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "TryReadOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offsetText, startIndex, offset});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeString
// Il2CppName: WriteDateTimeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::TextWriter*, ::System::DateTime, ::Newtonsoft::Json::DateFormatHandling, ::StringW, ::System::Globalization::CultureInfo*)>(&Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeString)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "TextWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateFormatHandling")->byval_arg;
    static auto* formatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "WriteDateTimeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, format, formatString, culture});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeString
// Il2CppName: WriteDateTimeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Il2CppChar>, int, ::System::DateTime, ::System::Nullable_1<::System::TimeSpan>, ::System::DateTimeKind, ::Newtonsoft::Json::DateFormatHandling)>(&Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeString)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* offset = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeSpan")})->byval_arg;
    static auto* kind = &::il2cpp_utils::GetClassFromName("System", "DateTimeKind")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateFormatHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "WriteDateTimeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, start, value, offset, kind, format});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::WriteDefaultIsoDate
// Il2CppName: WriteDefaultIsoDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Il2CppChar>, int, ::System::DateTime)>(&Newtonsoft::Json::Utilities::DateTimeUtils::WriteDefaultIsoDate)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "WriteDefaultIsoDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, start, dt});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::CopyIntToCharArray
// Il2CppName: CopyIntToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppChar>, int, int, int)>(&Newtonsoft::Json::Utilities::DateTimeUtils::CopyIntToCharArray)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "CopyIntToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, start, value, digits});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeOffset
// Il2CppName: WriteDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::Il2CppChar>, int, ::System::TimeSpan, ::Newtonsoft::Json::DateFormatHandling)>(&Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateFormatHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "WriteDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, start, offset, format});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeOffsetString
// Il2CppName: WriteDateTimeOffsetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::TextWriter*, ::System::DateTimeOffset, ::Newtonsoft::Json::DateFormatHandling, ::StringW, ::System::Globalization::CultureInfo*)>(&Newtonsoft::Json::Utilities::DateTimeUtils::WriteDateTimeOffsetString)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.IO", "TextWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateFormatHandling")->byval_arg;
    static auto* formatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "WriteDateTimeOffsetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, format, formatString, culture});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::DateTimeUtils::GetDateValues
// Il2CppName: GetDateValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::DateTime, ByRef<int>, ByRef<int>, ByRef<int>)>(&Newtonsoft::Json::Utilities::DateTimeUtils::GetDateValues)> {
  static const MethodInfo* get() {
    static auto* td = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::DateTimeUtils*), "GetDateValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{td, year, month, day});
  }
};
