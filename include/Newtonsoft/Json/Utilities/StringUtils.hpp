// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StringWriter
  class StringWriter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: StringUtils
  class StringUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::StringUtils);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::StringUtils*, "Newtonsoft.Json.Utilities", "StringUtils");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.StringUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAF64
  class StringUtils : public ::Il2CppObject {
    public:
    // Nested type: ::Newtonsoft::Json::Utilities::StringUtils::$$c__DisplayClass15_0_1<TSource>
    template<typename TSource>
    class $$c__DisplayClass15_0_1;
    // static public System.String FormatWith(System.String format, System.IFormatProvider provider, System.Object arg0)
    // Offset: 0x2147AF0
    static ::StringW FormatWith(::StringW format, ::System::IFormatProvider* provider, ::Il2CppObject* arg0);
    // static public System.String FormatWith(System.String format, System.IFormatProvider provider, System.Object arg0, System.Object arg1)
    // Offset: 0x2148404
    static ::StringW FormatWith(::StringW format, ::System::IFormatProvider* provider, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String FormatWith(System.String format, System.IFormatProvider provider, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x215A154
    static ::StringW FormatWith(::StringW format, ::System::IFormatProvider* provider, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String FormatWith(System.String format, System.IFormatProvider provider, System.Object arg0, System.Object arg1, System.Object arg2, System.Object arg3)
    // Offset: 0x215A26C
    static ::StringW FormatWith(::StringW format, ::System::IFormatProvider* provider, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2, ::Il2CppObject* arg3);
    // static private System.String FormatWith(System.String format, System.IFormatProvider provider, params System.Object[] args)
    // Offset: 0x215A0E0
    static ::StringW FormatWith(::StringW format, ::System::IFormatProvider* provider, ::ArrayW<::Il2CppObject*> args);
    // static public System.IO.StringWriter CreateStringWriter(System.Int32 capacity)
    // Offset: 0x2154F88
    static ::System::IO::StringWriter* CreateStringWriter(int capacity);
    // static public System.Nullable`1<System.Int32> GetLength(System.String value)
    // Offset: 0x2154F10
    static ::System::Nullable_1<int> GetLength(::StringW value);
    // static public System.Void ToCharAsUnicode(System.Char c, System.Char[] buffer)
    // Offset: 0x2154C8C
    static void ToCharAsUnicode(::Il2CppChar c, ::ArrayW<::Il2CppChar> buffer);
    // static public TSource ForgivingCaseSensitiveFind(System.Collections.Generic.IEnumerable`1<TSource> source, System.Func`2<TSource,System.String> valueSelector, System.String testValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSource>
    static TSource ForgivingCaseSensitiveFind(::System::Collections::Generic::IEnumerable_1<TSource>* source, ::System::Func_2<TSource, ::StringW>* valueSelector, ::StringW testValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Utilities::StringUtils::ForgivingCaseSensitiveFind");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json.Utilities", "StringUtils", "ForgivingCaseSensitiveFind", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(valueSelector), ::il2cpp_utils::ExtractType(testValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSource>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TSource, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, source, valueSelector, testValue);
    }
    // static public System.String ToCamelCase(System.String s)
    // Offset: 0x2153984
    static ::StringW ToCamelCase(::StringW s);
    // static public System.Boolean IsHighSurrogate(System.Char c)
    // Offset: 0x215A3B8
    static bool IsHighSurrogate(::Il2CppChar c);
    // static public System.Boolean IsLowSurrogate(System.Char c)
    // Offset: 0x215A420
    static bool IsLowSurrogate(::Il2CppChar c);
    // static public System.Boolean StartsWith(System.String source, System.Char value)
    // Offset: 0x215A488
    static bool StartsWith(::StringW source, ::Il2CppChar value);
    // static public System.Boolean EndsWith(System.String source, System.Char value)
    // Offset: 0x215A4D8
    static bool EndsWith(::StringW source, ::Il2CppChar value);
  }; // Newtonsoft.Json.Utilities.StringUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::FormatWith
// Il2CppName: FormatWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IFormatProvider*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::StringUtils::FormatWith)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "FormatWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider, arg0});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::FormatWith
// Il2CppName: FormatWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IFormatProvider*, ::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::StringUtils::FormatWith)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "FormatWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider, arg0, arg1});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::FormatWith
// Il2CppName: FormatWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IFormatProvider*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::StringUtils::FormatWith)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "FormatWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider, arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::FormatWith
// Il2CppName: FormatWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IFormatProvider*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::StringUtils::FormatWith)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg3 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "FormatWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider, arg0, arg1, arg2, arg3});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::FormatWith
// Il2CppName: FormatWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IFormatProvider*, ::ArrayW<::Il2CppObject*>)>(&Newtonsoft::Json::Utilities::StringUtils::FormatWith)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "FormatWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider, args});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::CreateStringWriter
// Il2CppName: CreateStringWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::StringWriter* (*)(int)>(&Newtonsoft::Json::Utilities::StringUtils::CreateStringWriter)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "CreateStringWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (*)(::StringW)>(&Newtonsoft::Json::Utilities::StringUtils::GetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::ToCharAsUnicode
// Il2CppName: ToCharAsUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar, ::ArrayW<::Il2CppChar>)>(&Newtonsoft::Json::Utilities::StringUtils::ToCharAsUnicode)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "ToCharAsUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, buffer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::ForgivingCaseSensitiveFind
// Il2CppName: ForgivingCaseSensitiveFind
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::ToCamelCase
// Il2CppName: ToCamelCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::Utilities::StringUtils::ToCamelCase)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "ToCamelCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Newtonsoft::Json::Utilities::StringUtils::IsHighSurrogate)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Newtonsoft::Json::Utilities::StringUtils::IsLowSurrogate)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::Il2CppChar)>(&Newtonsoft::Json::Utilities::StringUtils::StartsWith)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringUtils::EndsWith
// Il2CppName: EndsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::Il2CppChar)>(&Newtonsoft::Json::Utilities::StringUtils::EndsWith)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringUtils*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, value});
  }
};
