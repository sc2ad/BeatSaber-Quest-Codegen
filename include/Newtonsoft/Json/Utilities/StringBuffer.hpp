// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: IArrayPool`1<T>
  template<typename T>
  class IArrayPool_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: StringBuffer
  struct StringBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::StringBuffer, "Newtonsoft.Json.Utilities", "StringBuffer");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Newtonsoft.Json.Utilities.StringBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAE84
  struct StringBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Char[] _buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::Il2CppChar> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 _position
    // Size: 0x4
    // Offset: 0x8
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StringBuffer
    constexpr StringBuffer(::ArrayW<::Il2CppChar> buffer_ = ::ArrayW<::Il2CppChar>(static_cast<void*>(nullptr)), int position_ = {}) noexcept : buffer{buffer_}, position{position_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Char[] _buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__buffer();
    // Get instance field reference: private System.Int32 _position
    [[deprecated("Use field access instead!")]] int& dyn__position();
    // public System.Int32 get_Position()
    // Offset: 0x2159E84
    int get_Position();
    // public System.Void set_Position(System.Int32 value)
    // Offset: 0x2159E8C
    void set_Position(int value);
    // public System.Boolean get_IsEmpty()
    // Offset: 0x2159E94
    bool get_IsEmpty();
    // public System.Char[] get_InternalBuffer()
    // Offset: 0x215A0C0
    ::ArrayW<::Il2CppChar> get_InternalBuffer();
    // public System.Void .ctor(Newtonsoft.Json.IArrayPool`1<System.Char> bufferPool, System.Int32 initalSize)
    // Offset: 0x2159EA4
    StringBuffer(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* bufferPool, int initalSize);
    // private System.Void .ctor(System.Char[] buffer)
    // Offset: 0x2159ED4
    StringBuffer(::ArrayW<::Il2CppChar> buffer);
    // public System.Void Append(Newtonsoft.Json.IArrayPool`1<System.Char> bufferPool, System.Char value)
    // Offset: 0x2159EE0
    void Append(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* bufferPool, ::Il2CppChar value);
    // public System.Void Append(Newtonsoft.Json.IArrayPool`1<System.Char> bufferPool, System.Char[] buffer, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x2159FD0
    void Append(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* bufferPool, ::ArrayW<::Il2CppChar> buffer, int startIndex, int count);
    // public System.Void Clear(Newtonsoft.Json.IArrayPool`1<System.Char> bufferPool)
    // Offset: 0x215A054
    void Clear(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* bufferPool);
    // private System.Void EnsureSize(Newtonsoft.Json.IArrayPool`1<System.Char> bufferPool, System.Int32 appendLength)
    // Offset: 0x2159F64
    void EnsureSize(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* bufferPool, int appendLength);
    // public System.String ToString(System.Int32 start, System.Int32 length)
    // Offset: 0x215A0A4
    ::StringW ToString(int start, int length);
    // public override System.String ToString()
    // Offset: 0x215A08C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Newtonsoft.Json.Utilities.StringBuffer
  #pragma pack(pop)
  static check_size<sizeof(StringBuffer), 8 + sizeof(int)> __Newtonsoft_Json_Utilities_StringBufferSizeCheck;
  static_assert(sizeof(StringBuffer) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::Utilities::StringBuffer::*)()>(&Newtonsoft::Json::Utilities::StringBuffer::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::StringBuffer::*)(int)>(&Newtonsoft::Json::Utilities::StringBuffer::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Utilities::StringBuffer::*)()>(&Newtonsoft::Json::Utilities::StringBuffer::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::get_InternalBuffer
// Il2CppName: get_InternalBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (Newtonsoft::Json::Utilities::StringBuffer::*)()>(&Newtonsoft::Json::Utilities::StringBuffer::get_InternalBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "get_InternalBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::StringBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::StringBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::StringBuffer::*)(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*, ::Il2CppChar)>(&Newtonsoft::Json::Utilities::StringBuffer::Append)> {
  static const MethodInfo* get() {
    static auto* bufferPool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "IArrayPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferPool, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::StringBuffer::*)(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*, ::ArrayW<::Il2CppChar>, int, int)>(&Newtonsoft::Json::Utilities::StringBuffer::Append)> {
  static const MethodInfo* get() {
    static auto* bufferPool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "IArrayPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferPool, buffer, startIndex, count});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::StringBuffer::*)(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*)>(&Newtonsoft::Json::Utilities::StringBuffer::Clear)> {
  static const MethodInfo* get() {
    static auto* bufferPool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "IArrayPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferPool});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::EnsureSize
// Il2CppName: EnsureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Utilities::StringBuffer::*)(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*, int)>(&Newtonsoft::Json::Utilities::StringBuffer::EnsureSize)> {
  static const MethodInfo* get() {
    static auto* bufferPool = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "IArrayPool`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    static auto* appendLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "EnsureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferPool, appendLength});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Utilities::StringBuffer::*)(int, int)>(&Newtonsoft::Json::Utilities::StringBuffer::ToString)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, length});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::StringBuffer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Utilities::StringBuffer::*)()>(&Newtonsoft::Json::Utilities::StringBuffer::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::StringBuffer), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
