// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArgumentOutOfRangeException
  class ArgumentOutOfRangeException;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: MiscellaneousUtils
  class MiscellaneousUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Utilities::MiscellaneousUtils);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::MiscellaneousUtils*, "Newtonsoft.Json.Utilities", "MiscellaneousUtils");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.MiscellaneousUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAEEC
  class MiscellaneousUtils : public ::Il2CppObject {
    public:
    // static public System.Boolean ValueEquals(System.Object objA, System.Object objB)
    // Offset: 0x2155560
    static bool ValueEquals(::Il2CppObject* objA, ::Il2CppObject* objB);
    // static public System.ArgumentOutOfRangeException CreateArgumentOutOfRangeException(System.String paramName, System.Object actualValue, System.String message)
    // Offset: 0x214FE64
    static ::System::ArgumentOutOfRangeException* CreateArgumentOutOfRangeException(::StringW paramName, ::Il2CppObject* actualValue, ::StringW message);
    // static public System.Int32 ByteArrayCompare(System.Byte[] a1, System.Byte[] a2)
    // Offset: 0x21557F4
    static int ByteArrayCompare(::ArrayW<uint8_t> a1, ::ArrayW<uint8_t> a2);
    // static public System.String GetPrefix(System.String qualifiedName)
    // Offset: 0x21558B4
    static ::StringW GetPrefix(::StringW qualifiedName);
    // static public System.String GetLocalName(System.String qualifiedName)
    // Offset: 0x2155978
    static ::StringW GetLocalName(::StringW qualifiedName);
    // static public System.Void GetQualifiedNameParts(System.String qualifiedName, out System.String prefix, out System.String localName)
    // Offset: 0x21558E0
    static void GetQualifiedNameParts(::StringW qualifiedName, ByRef<::StringW> prefix, ByRef<::StringW> localName);
    // static System.String FormatValueForPrint(System.Object value)
    // Offset: 0x21559A4
    static ::StringW FormatValueForPrint(::Il2CppObject* value);
  }; // Newtonsoft.Json.Utilities.MiscellaneousUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::ValueEquals
// Il2CppName: ValueEquals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::ValueEquals)> {
  static const MethodInfo* get() {
    static auto* objA = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* objB = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "ValueEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objA, objB});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::CreateArgumentOutOfRangeException
// Il2CppName: CreateArgumentOutOfRangeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArgumentOutOfRangeException* (*)(::StringW, ::Il2CppObject*, ::StringW)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::CreateArgumentOutOfRangeException)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* actualValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "CreateArgumentOutOfRangeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName, actualValue, message});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::ByteArrayCompare
// Il2CppName: ByteArrayCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::ByteArrayCompare)> {
  static const MethodInfo* get() {
    static auto* a1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* a2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "ByteArrayCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a1, a2});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::GetPrefix
// Il2CppName: GetPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::GetPrefix)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "GetPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::GetLocalName
// Il2CppName: GetLocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::GetLocalName)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "GetLocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::GetQualifiedNameParts
// Il2CppName: GetQualifiedNameParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::GetQualifiedNameParts)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* localName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "GetQualifiedNameParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, prefix, localName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Utilities::MiscellaneousUtils::FormatValueForPrint
// Il2CppName: FormatValueForPrint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*)>(&Newtonsoft::Json::Utilities::MiscellaneousUtils::FormatValueForPrint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Utilities::MiscellaneousUtils*), "FormatValueForPrint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
