// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.JsonWriter
#include "Newtonsoft/Json/JsonWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextWriter
  class TextWriter;
}
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: Base64Encoder
  class Base64Encoder;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: IArrayPool`1<T>
  template<typename T>
  class IArrayPool_1;
  // Forward declaring type: JsonToken
  struct JsonToken;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Skipping declaration: Decimal because it is already included!
  // Skipping declaration: DateTime because it is already included!
  // Skipping declaration: DateTimeOffset because it is already included!
  // Skipping declaration: Guid because it is already included!
  // Skipping declaration: TimeSpan because it is already included!
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonTextWriter
  class JsonTextWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonTextWriter);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonTextWriter*, "Newtonsoft.Json", "JsonTextWriter");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.JsonTextWriter
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAA04
  class JsonTextWriter : public ::Newtonsoft::Json::JsonWriter {
    public:
    public:
    // private readonly System.IO.TextWriter _writer
    // Size: 0x8
    // Offset: 0x60
    ::System::IO::TextWriter* writer;
    // Field size check
    static_assert(sizeof(::System::IO::TextWriter*) == 0x8);
    // private Newtonsoft.Json.Utilities.Base64Encoder _base64Encoder
    // Size: 0x8
    // Offset: 0x68
    ::Newtonsoft::Json::Utilities::Base64Encoder* base64Encoder;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::Base64Encoder*) == 0x8);
    // private System.Char _indentChar
    // Size: 0x2
    // Offset: 0x70
    ::Il2CppChar indentChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: indentChar and: indentation
    char __padding2[0x2] = {};
    // private System.Int32 _indentation
    // Size: 0x4
    // Offset: 0x74
    int indentation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char _quoteChar
    // Size: 0x2
    // Offset: 0x78
    ::Il2CppChar quoteChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // private System.Boolean _quoteName
    // Size: 0x1
    // Offset: 0x7A
    bool quoteName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: quoteName and: charEscapeFlags
    char __padding5[0x5] = {};
    // private System.Boolean[] _charEscapeFlags
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<bool> charEscapeFlags;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Char[] _writeBuffer
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::Il2CppChar> writeBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private Newtonsoft.Json.IArrayPool`1<System.Char> _arrayPool
    // Size: 0x8
    // Offset: 0x90
    ::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* arrayPool;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*) == 0x8);
    // private System.Char[] _indentChars
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Il2CppChar> indentChars;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    public:
    // Get instance field reference: private readonly System.IO.TextWriter _writer
    [[deprecated("Use field access instead!")]] ::System::IO::TextWriter*& dyn__writer();
    // Get instance field reference: private Newtonsoft.Json.Utilities.Base64Encoder _base64Encoder
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Utilities::Base64Encoder*& dyn__base64Encoder();
    // Get instance field reference: private System.Char _indentChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__indentChar();
    // Get instance field reference: private System.Int32 _indentation
    [[deprecated("Use field access instead!")]] int& dyn__indentation();
    // Get instance field reference: private System.Char _quoteChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn__quoteChar();
    // Get instance field reference: private System.Boolean _quoteName
    [[deprecated("Use field access instead!")]] bool& dyn__quoteName();
    // Get instance field reference: private System.Boolean[] _charEscapeFlags
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn__charEscapeFlags();
    // Get instance field reference: private System.Char[] _writeBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__writeBuffer();
    // Get instance field reference: private Newtonsoft.Json.IArrayPool`1<System.Char> _arrayPool
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*& dyn__arrayPool();
    // Get instance field reference: private System.Char[] _indentChars
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__indentChars();
    // private Newtonsoft.Json.Utilities.Base64Encoder get_Base64Encoder()
    // Offset: 0x17919DC
    ::Newtonsoft::Json::Utilities::Base64Encoder* get_Base64Encoder();
    // public System.Char get_QuoteChar()
    // Offset: 0x1791A58
    ::Il2CppChar get_QuoteChar();
    // public System.Void .ctor(System.IO.TextWriter textWriter)
    // Offset: 0x1791A60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonTextWriter* New_ctor(::System::IO::TextWriter* textWriter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonTextWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonTextWriter*, creationType>(textWriter)));
    }
    // private System.Void UpdateCharEscapeFlags()
    // Offset: 0x1791B88
    void UpdateCharEscapeFlags();
    // private System.Void WriteValueInternal(System.String value, Newtonsoft.Json.JsonToken token)
    // Offset: 0x17922DC
    void WriteValueInternal(::StringW value, ::Newtonsoft::Json::JsonToken token);
    // private System.Void WriteEscapedString(System.String value, System.Boolean quote)
    // Offset: 0x1791F74
    void WriteEscapedString(::StringW value, bool quote);
    // private System.Void EnsureWriteBuffer()
    // Offset: 0x1792640
    void EnsureWriteBuffer();
    // private System.Void WriteIntegerValue(System.Int64 value)
    // Offset: 0x17926C4
    void WriteIntegerValue(int64_t value);
    // private System.Void WriteIntegerValue(System.UInt64 uvalue)
    // Offset: 0x1792810
    void WriteIntegerValue(uint64_t uvalue);
    // public override System.Void Close()
    // Offset: 0x1791C0C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::Close()
    void Close();
    // public override System.Void WriteStartObject()
    // Offset: 0x1791C6C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteStartObject()
    void WriteStartObject();
    // public override System.Void WriteStartArray()
    // Offset: 0x1791CF0
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteStartArray()
    void WriteStartArray();
    // public override System.Void WriteStartConstructor(System.String name)
    // Offset: 0x1791D30
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteStartConstructor(System.String name)
    void WriteStartConstructor(::StringW name);
    // protected override System.Void WriteEnd(Newtonsoft.Json.JsonToken token)
    // Offset: 0x1791DE4
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteEnd(Newtonsoft.Json.JsonToken token)
    void WriteEnd(::Newtonsoft::Json::JsonToken token);
    // public override System.Void WritePropertyName(System.String name)
    // Offset: 0x1791F10
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WritePropertyName(System.String name)
    void WritePropertyName(::StringW name);
    // public override System.Void WritePropertyName(System.String name, System.Boolean escape)
    // Offset: 0x1792058
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WritePropertyName(System.String name, System.Boolean escape)
    void WritePropertyName(::StringW name, bool escape);
    // override System.Void OnStringEscapeHandlingChanged()
    // Offset: 0x1792128
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::OnStringEscapeHandlingChanged()
    void OnStringEscapeHandlingChanged();
    // protected override System.Void WriteIndent()
    // Offset: 0x179212C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteIndent()
    void WriteIndent();
    // protected override System.Void WriteValueDelimiter()
    // Offset: 0x1792294
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValueDelimiter()
    void WriteValueDelimiter();
    // protected override System.Void WriteIndentSpace()
    // Offset: 0x17922B8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteIndentSpace()
    void WriteIndentSpace();
    // public override System.Void WriteValue(System.Object value)
    // Offset: 0x1792300
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Object value)
    void WriteValue(::Il2CppObject* value);
    // public override System.Void WriteNull()
    // Offset: 0x17923E8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteNull()
    void WriteNull();
    // public override System.Void WriteUndefined()
    // Offset: 0x17924A4
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteUndefined()
    void WriteUndefined();
    // public override System.Void WriteRaw(System.String json)
    // Offset: 0x1792548
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteRaw(System.String json)
    void WriteRaw(::StringW json);
    // public override System.Void WriteValue(System.String value)
    // Offset: 0x1792570
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.String value)
    void WriteValue(::StringW value);
    // public override System.Void WriteValue(System.Int32 value)
    // Offset: 0x179267C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Int32 value)
    void WriteValue(int value);
    // public override System.Void WriteValue(System.UInt32 value)
    // Offset: 0x1792738
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.UInt32 value)
    void WriteValue(uint value);
    // public override System.Void WriteValue(System.Int64 value)
    // Offset: 0x1792780
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Int64 value)
    void WriteValue(int64_t value);
    // public override System.Void WriteValue(System.UInt64 value)
    // Offset: 0x17927C8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.UInt64 value)
    void WriteValue(uint64_t value);
    // public override System.Void WriteValue(System.Single value)
    // Offset: 0x1792904
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Single value)
    void WriteValue(float value);
    // public override System.Void WriteValue(System.Nullable`1<System.Single> value)
    // Offset: 0x17929D8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Nullable`1<System.Single> value)
    void WriteValue(::System::Nullable_1<float> value);
    // public override System.Void WriteValue(System.Double value)
    // Offset: 0x1792ADC
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Double value)
    void WriteValue(double value);
    // public override System.Void WriteValue(System.Nullable`1<System.Double> value)
    // Offset: 0x1792BB0
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Nullable`1<System.Double> value)
    void WriteValue(::System::Nullable_1<double> value);
    // public override System.Void WriteValue(System.Boolean value)
    // Offset: 0x1792CB8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Boolean value)
    void WriteValue(bool value);
    // public override System.Void WriteValue(System.Int16 value)
    // Offset: 0x1792D70
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Int16 value)
    void WriteValue(int16_t value);
    // public override System.Void WriteValue(System.UInt16 value)
    // Offset: 0x1792DB8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.UInt16 value)
    void WriteValue(uint16_t value);
    // public override System.Void WriteValue(System.Char value)
    // Offset: 0x1792E00
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Char value)
    void WriteValue(::Il2CppChar value);
    // public override System.Void WriteValue(System.Byte value)
    // Offset: 0x1792EB8
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Byte value)
    void WriteValue(uint8_t value);
    // public override System.Void WriteValue(System.SByte value)
    // Offset: 0x1792F00
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.SByte value)
    void WriteValue(int8_t value);
    // public override System.Void WriteValue(System.Decimal value)
    // Offset: 0x1792F48
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Decimal value)
    void WriteValue(::System::Decimal value);
    // public override System.Void WriteValue(System.DateTime value)
    // Offset: 0x1793008
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.DateTime value)
    void WriteValue(::System::DateTime value);
    // public override System.Void WriteValue(System.Byte[] value)
    // Offset: 0x1793298
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Byte[] value)
    void WriteValue(::ArrayW<uint8_t> value);
    // public override System.Void WriteValue(System.DateTimeOffset value)
    // Offset: 0x179335C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.DateTimeOffset value)
    void WriteValue(::System::DateTimeOffset value);
    // public override System.Void WriteValue(System.Guid value)
    // Offset: 0x179356C
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Guid value)
    void WriteValue(::System::Guid value);
    // public override System.Void WriteValue(System.TimeSpan value)
    // Offset: 0x1793674
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.TimeSpan value)
    void WriteValue(::System::TimeSpan value);
    // public override System.Void WriteValue(System.Uri value)
    // Offset: 0x1793720
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteValue(System.Uri value)
    void WriteValue(::System::Uri* value);
    // public override System.Void WriteComment(System.String text)
    // Offset: 0x1793800
    // Implemented from: Newtonsoft.Json.JsonWriter
    // Base method: System.Void JsonWriter::WriteComment(System.String text)
    void WriteComment(::StringW text);
  }; // Newtonsoft.Json.JsonTextWriter
  #pragma pack(pop)
  static check_size<sizeof(JsonTextWriter), 152 + sizeof(::ArrayW<::Il2CppChar>)> __Newtonsoft_Json_JsonTextWriterSizeCheck;
  static_assert(sizeof(JsonTextWriter) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::get_Base64Encoder
// Il2CppName: get_Base64Encoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Utilities::Base64Encoder* (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::get_Base64Encoder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "get_Base64Encoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::get_QuoteChar
// Il2CppName: get_QuoteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::get_QuoteChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "get_QuoteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::UpdateCharEscapeFlags
// Il2CppName: UpdateCharEscapeFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::UpdateCharEscapeFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "UpdateCharEscapeFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValueInternal
// Il2CppName: WriteValueInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW, ::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonTextWriter::WriteValueInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValueInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, token});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteEscapedString
// Il2CppName: WriteEscapedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW, bool)>(&Newtonsoft::Json::JsonTextWriter::WriteEscapedString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* quote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteEscapedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, quote});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::EnsureWriteBuffer
// Il2CppName: EnsureWriteBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::EnsureWriteBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "EnsureWriteBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteIntegerValue
// Il2CppName: WriteIntegerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(int64_t)>(&Newtonsoft::Json::JsonTextWriter::WriteIntegerValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteIntegerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteIntegerValue
// Il2CppName: WriteIntegerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(uint64_t)>(&Newtonsoft::Json::JsonTextWriter::WriteIntegerValue)> {
  static const MethodInfo* get() {
    static auto* uvalue = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteIntegerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvalue});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteStartObject
// Il2CppName: WriteStartObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteStartObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteStartObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteStartArray
// Il2CppName: WriteStartArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteStartArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteStartArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteStartConstructor
// Il2CppName: WriteStartConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW)>(&Newtonsoft::Json::JsonTextWriter::WriteStartConstructor)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteStartConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteEnd
// Il2CppName: WriteEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonTextWriter::WriteEnd)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WritePropertyName
// Il2CppName: WritePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW)>(&Newtonsoft::Json::JsonTextWriter::WritePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WritePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WritePropertyName
// Il2CppName: WritePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW, bool)>(&Newtonsoft::Json::JsonTextWriter::WritePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* escape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WritePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, escape});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::OnStringEscapeHandlingChanged
// Il2CppName: OnStringEscapeHandlingChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::OnStringEscapeHandlingChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "OnStringEscapeHandlingChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteIndent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValueDelimiter
// Il2CppName: WriteValueDelimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteValueDelimiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValueDelimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteIndentSpace
// Il2CppName: WriteIndentSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteIndentSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteIndentSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::Il2CppObject*)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteNull
// Il2CppName: WriteNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteUndefined
// Il2CppName: WriteUndefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)()>(&Newtonsoft::Json::JsonTextWriter::WriteUndefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteUndefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW)>(&Newtonsoft::Json::JsonTextWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(int)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(uint)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(int64_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(uint64_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(float)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::Nullable_1<float>)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(double)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::Nullable_1<double>)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Double")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(bool)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(int16_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(uint16_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(uint8_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(int8_t)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::Decimal)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::DateTime)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::ArrayW<uint8_t>)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::DateTimeOffset)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::Guid)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::TimeSpan)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::System::Uri*)>(&Newtonsoft::Json::JsonTextWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextWriter::*)(::StringW)>(&Newtonsoft::Json::JsonTextWriter::WriteComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
