// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Newtonsoft.Json.ReferenceLoopHandling
#include "Newtonsoft/Json/ReferenceLoopHandling.hpp"
// Including type: Newtonsoft.Json.TypeNameHandling
#include "Newtonsoft/Json/TypeNameHandling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonContainerAttribute
  class JsonContainerAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonContainerAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonContainerAttribute*, "Newtonsoft.Json", "JsonContainerAttribute");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.JsonContainerAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 10FA814
  // [PreserveAttribute] Offset: 10FA814
  class JsonContainerAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Type <ItemConverterType>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* ItemConverterType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Object[] <ItemConverterParameters>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Il2CppObject*> ItemConverterParameters;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
    // System.Nullable`1<System.Boolean> _isReference
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::System::Nullable_1<bool> isReference;
    // System.Nullable`1<System.Boolean> _itemIsReference
    // Size: 0xFFFFFFFF
    // Offset: 0x22
    ::System::Nullable_1<bool> itemIsReference;
    // System.Nullable`1<Newtonsoft.Json.ReferenceLoopHandling> _itemReferenceLoopHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x24
    ::System::Nullable_1<::Newtonsoft::Json::ReferenceLoopHandling> itemReferenceLoopHandling;
    // System.Nullable`1<Newtonsoft.Json.TypeNameHandling> _itemTypeNameHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x2C
    ::System::Nullable_1<::Newtonsoft::Json::TypeNameHandling> itemTypeNameHandling;
    public:
    // Get instance field reference: private System.Type <ItemConverterType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$ItemConverterType$k__BackingField();
    // Get instance field reference: private System.Object[] <ItemConverterParameters>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_$ItemConverterParameters$k__BackingField();
    // Get instance field reference: System.Nullable`1<System.Boolean> _isReference
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__isReference();
    // Get instance field reference: System.Nullable`1<System.Boolean> _itemIsReference
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__itemIsReference();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.ReferenceLoopHandling> _itemReferenceLoopHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::ReferenceLoopHandling>& dyn__itemReferenceLoopHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.TypeNameHandling> _itemTypeNameHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::TypeNameHandling>& dyn__itemTypeNameHandling();
    // public System.Type get_ItemConverterType()
    // Offset: 0x1810F80
    ::System::Type* get_ItemConverterType();
    // public System.Object[] get_ItemConverterParameters()
    // Offset: 0x1810F88
    ::ArrayW<::Il2CppObject*> get_ItemConverterParameters();
    // protected System.Void .ctor()
    // Offset: 0x1810F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonContainerAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonContainerAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonContainerAttribute*, creationType>()));
    }
  }; // Newtonsoft.Json.JsonContainerAttribute
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonContainerAttribute::get_ItemConverterType
// Il2CppName: get_ItemConverterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Newtonsoft::Json::JsonContainerAttribute::*)()>(&Newtonsoft::Json::JsonContainerAttribute::get_ItemConverterType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonContainerAttribute*), "get_ItemConverterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonContainerAttribute::get_ItemConverterParameters
// Il2CppName: get_ItemConverterParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (Newtonsoft::Json::JsonContainerAttribute::*)()>(&Newtonsoft::Json::JsonContainerAttribute::get_ItemConverterParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonContainerAttribute*), "get_ItemConverterParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonContainerAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
