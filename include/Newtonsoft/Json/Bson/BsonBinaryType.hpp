// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Newtonsoft.Json.Bson
namespace Newtonsoft::Json::Bson {
  // Forward declaring type: BsonBinaryType
  struct BsonBinaryType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Bson::BsonBinaryType, "Newtonsoft.Json.Bson", "BsonBinaryType");
// Type namespace: Newtonsoft.Json.Bson
namespace Newtonsoft::Json::Bson {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Bson.BsonBinaryType
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  struct BsonBinaryType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: BsonBinaryType
    constexpr BsonBinaryType(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType Binary
    static constexpr const uint8_t Binary = 0u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType Binary
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_Binary();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType Binary
    static void _set_Binary(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType Function
    static constexpr const uint8_t Function = 1u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType Function
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_Function();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType Function
    static void _set_Function(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // [ObsoleteAttribute] Offset: 0x10BB690
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType BinaryOld
    static constexpr const uint8_t BinaryOld = 2u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType BinaryOld
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_BinaryOld();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType BinaryOld
    static void _set_BinaryOld(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // [ObsoleteAttribute] Offset: 0x10BB6C8
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType UuidOld
    static constexpr const uint8_t UuidOld = 3u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType UuidOld
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_UuidOld();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType UuidOld
    static void _set_UuidOld(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType Uuid
    static constexpr const uint8_t Uuid = 4u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType Uuid
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_Uuid();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType Uuid
    static void _set_Uuid(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType Md5
    static constexpr const uint8_t Md5 = 5u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType Md5
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_Md5();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType Md5
    static void _set_Md5(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // static field const value: static public Newtonsoft.Json.Bson.BsonBinaryType UserDefined
    static constexpr const uint8_t UserDefined = 128u;
    // Get static field: static public Newtonsoft.Json.Bson.BsonBinaryType UserDefined
    static ::Newtonsoft::Json::Bson::BsonBinaryType _get_UserDefined();
    // Set static field: static public Newtonsoft.Json.Bson.BsonBinaryType UserDefined
    static void _set_UserDefined(::Newtonsoft::Json::Bson::BsonBinaryType value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // Newtonsoft.Json.Bson.BsonBinaryType
  #pragma pack(pop)
  static check_size<sizeof(BsonBinaryType), 0 + sizeof(uint8_t)> __Newtonsoft_Json_Bson_BsonBinaryTypeSizeCheck;
  static_assert(sizeof(BsonBinaryType) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
