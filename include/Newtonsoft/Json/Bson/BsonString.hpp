// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Bson.BsonValue
#include "Newtonsoft/Json/Bson/BsonValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Newtonsoft.Json.Bson
namespace Newtonsoft::Json::Bson {
  // Forward declaring type: BsonString
  class BsonString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Bson::BsonString);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Bson::BsonString*, "Newtonsoft.Json.Bson", "BsonString");
// Type namespace: Newtonsoft.Json.Bson
namespace Newtonsoft::Json::Bson {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Bson.BsonString
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class BsonString : public ::Newtonsoft::Json::Bson::BsonValue {
    public:
    public:
    // private System.Boolean <IncludeLength>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool IncludeLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <IncludeLength>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IncludeLength$k__BackingField();
    // public System.Void set_IncludeLength(System.Boolean value)
    // Offset: 0x1801ABC
    void set_IncludeLength(bool value);
    // public System.Void .ctor(System.Object value, System.Boolean includeLength)
    // Offset: 0x17FFE34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BsonString* New_ctor(::Il2CppObject* value, bool includeLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Bson::BsonString::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BsonString*, creationType>(value, includeLength)));
    }
  }; // Newtonsoft.Json.Bson.BsonString
  #pragma pack(pop)
  static check_size<sizeof(BsonString), 33 + sizeof(bool)> __Newtonsoft_Json_Bson_BsonStringSizeCheck;
  static_assert(sizeof(BsonString) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Bson::BsonString::set_IncludeLength
// Il2CppName: set_IncludeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Bson::BsonString::*)(bool)>(&Newtonsoft::Json::Bson::BsonString::set_IncludeLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Bson::BsonString*), "set_IncludeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Bson::BsonString::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
