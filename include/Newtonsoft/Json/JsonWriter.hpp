// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Newtonsoft.Json.JsonPosition
#include "Newtonsoft/Json/JsonPosition.hpp"
// Including type: Newtonsoft.Json.Formatting
#include "Newtonsoft/Json/Formatting.hpp"
// Including type: Newtonsoft.Json.DateFormatHandling
#include "Newtonsoft/Json/DateFormatHandling.hpp"
// Including type: Newtonsoft.Json.DateTimeZoneHandling
#include "Newtonsoft/Json/DateTimeZoneHandling.hpp"
// Including type: Newtonsoft.Json.StringEscapeHandling
#include "Newtonsoft/Json/StringEscapeHandling.hpp"
// Including type: Newtonsoft.Json.FloatFormatHandling
#include "Newtonsoft/Json/FloatFormatHandling.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: WriteState
  struct WriteState;
  // Skipping declaration: JsonContainerType because it is already included!
  // Forward declaring type: JsonReader
  class JsonReader;
  // Forward declaring type: JsonToken
  struct JsonToken;
  // Forward declaring type: JsonWriterException
  class JsonWriterException;
}
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: PrimitiveTypeCode
  struct PrimitiveTypeCode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonWriter
  class JsonWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonWriter);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonWriter*, "Newtonsoft.Json", "JsonWriter");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.JsonWriter
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10B9F14
  class JsonWriter : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Newtonsoft::Json::JsonWriter::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Start
      static constexpr const int Start = 0;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Start
      static ::Newtonsoft::Json::JsonWriter::State _get_Start();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Start
      static void _set_Start(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Property
      static constexpr const int Property = 1;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Property
      static ::Newtonsoft::Json::JsonWriter::State _get_Property();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Property
      static void _set_Property(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ObjectStart
      static constexpr const int ObjectStart = 2;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ObjectStart
      static ::Newtonsoft::Json::JsonWriter::State _get_ObjectStart();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ObjectStart
      static void _set_ObjectStart(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Object
      static constexpr const int Object = 3;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Object
      static ::Newtonsoft::Json::JsonWriter::State _get_Object();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Object
      static void _set_Object(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ArrayStart
      static constexpr const int ArrayStart = 4;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ArrayStart
      static ::Newtonsoft::Json::JsonWriter::State _get_ArrayStart();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ArrayStart
      static void _set_ArrayStart(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Array
      static constexpr const int Array = 5;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Array
      static ::Newtonsoft::Json::JsonWriter::State _get_Array();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Array
      static void _set_Array(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ConstructorStart
      static constexpr const int ConstructorStart = 6;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ConstructorStart
      static ::Newtonsoft::Json::JsonWriter::State _get_ConstructorStart();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State ConstructorStart
      static void _set_ConstructorStart(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Constructor
      static constexpr const int Constructor = 7;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Constructor
      static ::Newtonsoft::Json::JsonWriter::State _get_Constructor();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Constructor
      static void _set_Constructor(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Closed
      static constexpr const int Closed = 8;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Closed
      static ::Newtonsoft::Json::JsonWriter::State _get_Closed();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Closed
      static void _set_Closed(::Newtonsoft::Json::JsonWriter::State value);
      // static field const value: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Error
      static constexpr const int Error = 9;
      // Get static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Error
      static ::Newtonsoft::Json::JsonWriter::State _get_Error();
      // Set static field: static public Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State Error
      static void _set_Error(::Newtonsoft::Json::JsonWriter::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State
    #pragma pack(pop)
    static check_size<sizeof(JsonWriter::State), 0 + sizeof(int)> __Newtonsoft_Json_JsonWriter_StateSizeCheck;
    static_assert(sizeof(JsonWriter::State) == 0x4);
    public:
    // private System.Collections.Generic.List`1<Newtonsoft.Json.JsonPosition> _stack
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>* stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>*) == 0x8);
    // private Newtonsoft.Json.JsonPosition _currentPosition
    // Size: 0x11
    // Offset: 0x18
    ::Newtonsoft::Json::JsonPosition currentPosition;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonPosition) == 0x11);
    // Padding between fields: currentPosition and: currentState
    char __padding1[0x7] = {};
    // private Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State _currentState
    // Size: 0x4
    // Offset: 0x30
    ::Newtonsoft::Json::JsonWriter::State currentState;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonWriter::State) == 0x4);
    // private Newtonsoft.Json.Formatting _formatting
    // Size: 0x4
    // Offset: 0x34
    ::Newtonsoft::Json::Formatting formatting;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Formatting) == 0x4);
    // private System.Boolean <CloseOutput>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool CloseOutput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CloseOutput and: dateFormatHandling
    char __padding4[0x3] = {};
    // private Newtonsoft.Json.DateFormatHandling _dateFormatHandling
    // Size: 0x4
    // Offset: 0x3C
    ::Newtonsoft::Json::DateFormatHandling dateFormatHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::DateFormatHandling) == 0x4);
    // private Newtonsoft.Json.DateTimeZoneHandling _dateTimeZoneHandling
    // Size: 0x4
    // Offset: 0x40
    ::Newtonsoft::Json::DateTimeZoneHandling dateTimeZoneHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::DateTimeZoneHandling) == 0x4);
    // private Newtonsoft.Json.StringEscapeHandling _stringEscapeHandling
    // Size: 0x4
    // Offset: 0x44
    ::Newtonsoft::Json::StringEscapeHandling stringEscapeHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::StringEscapeHandling) == 0x4);
    // private Newtonsoft.Json.FloatFormatHandling _floatFormatHandling
    // Size: 0x4
    // Offset: 0x48
    ::Newtonsoft::Json::FloatFormatHandling floatFormatHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::FloatFormatHandling) == 0x4);
    // Padding between fields: floatFormatHandling and: dateFormatString
    char __padding8[0x4] = {};
    // private System.String _dateFormatString
    // Size: 0x8
    // Offset: 0x50
    ::StringW dateFormatString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0x58
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State[][] StateArray
    static ::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> _get_StateArray();
    // Set static field: static private readonly Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State[][] StateArray
    static void _set_StateArray(::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> value);
    // Get static field: static readonly Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State[][] StateArrayTempate
    static ::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> _get_StateArrayTempate();
    // Set static field: static readonly Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State[][] StateArrayTempate
    static void _set_StateArrayTempate(::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> value);
    // Get instance field reference: private System.Collections.Generic.List`1<Newtonsoft.Json.JsonPosition> _stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Newtonsoft::Json::JsonPosition>*& dyn__stack();
    // Get instance field reference: private Newtonsoft.Json.JsonPosition _currentPosition
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonPosition& dyn__currentPosition();
    // Get instance field reference: private Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State _currentState
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonWriter::State& dyn__currentState();
    // Get instance field reference: private Newtonsoft.Json.Formatting _formatting
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Formatting& dyn__formatting();
    // Get instance field reference: private System.Boolean <CloseOutput>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CloseOutput$k__BackingField();
    // Get instance field reference: private Newtonsoft.Json.DateFormatHandling _dateFormatHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::DateFormatHandling& dyn__dateFormatHandling();
    // Get instance field reference: private Newtonsoft.Json.DateTimeZoneHandling _dateTimeZoneHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::DateTimeZoneHandling& dyn__dateTimeZoneHandling();
    // Get instance field reference: private Newtonsoft.Json.StringEscapeHandling _stringEscapeHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::StringEscapeHandling& dyn__stringEscapeHandling();
    // Get instance field reference: private Newtonsoft.Json.FloatFormatHandling _floatFormatHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::FloatFormatHandling& dyn__floatFormatHandling();
    // Get instance field reference: private System.String _dateFormatString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__dateFormatString();
    // Get instance field reference: private System.Globalization.CultureInfo _culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn__culture();
    // public System.Boolean get_CloseOutput()
    // Offset: 0x174BAD4
    bool get_CloseOutput();
    // public System.Void set_CloseOutput(System.Boolean value)
    // Offset: 0x174BADC
    void set_CloseOutput(bool value);
    // protected internal System.Int32 get_Top()
    // Offset: 0x17499A4
    int get_Top();
    // public Newtonsoft.Json.WriteState get_WriteState()
    // Offset: 0x174BAF0
    ::Newtonsoft::Json::WriteState get_WriteState();
    // System.String get_ContainerPath()
    // Offset: 0x174BBA8
    ::StringW get_ContainerPath();
    // public System.String get_Path()
    // Offset: 0x174BC58
    ::StringW get_Path();
    // public Newtonsoft.Json.Formatting get_Formatting()
    // Offset: 0x174BD74
    ::Newtonsoft::Json::Formatting get_Formatting();
    // public System.Void set_Formatting(Newtonsoft.Json.Formatting value)
    // Offset: 0x174BD7C
    void set_Formatting(::Newtonsoft::Json::Formatting value);
    // public Newtonsoft.Json.DateFormatHandling get_DateFormatHandling()
    // Offset: 0x174BE10
    ::Newtonsoft::Json::DateFormatHandling get_DateFormatHandling();
    // public System.Void set_DateFormatHandling(Newtonsoft.Json.DateFormatHandling value)
    // Offset: 0x174BE18
    void set_DateFormatHandling(::Newtonsoft::Json::DateFormatHandling value);
    // public Newtonsoft.Json.DateTimeZoneHandling get_DateTimeZoneHandling()
    // Offset: 0x174BEAC
    ::Newtonsoft::Json::DateTimeZoneHandling get_DateTimeZoneHandling();
    // public System.Void set_DateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling value)
    // Offset: 0x174BEB4
    void set_DateTimeZoneHandling(::Newtonsoft::Json::DateTimeZoneHandling value);
    // public Newtonsoft.Json.StringEscapeHandling get_StringEscapeHandling()
    // Offset: 0x174BF48
    ::Newtonsoft::Json::StringEscapeHandling get_StringEscapeHandling();
    // public System.Void set_StringEscapeHandling(Newtonsoft.Json.StringEscapeHandling value)
    // Offset: 0x174BF50
    void set_StringEscapeHandling(::Newtonsoft::Json::StringEscapeHandling value);
    // public Newtonsoft.Json.FloatFormatHandling get_FloatFormatHandling()
    // Offset: 0x174BFF4
    ::Newtonsoft::Json::FloatFormatHandling get_FloatFormatHandling();
    // public System.Void set_FloatFormatHandling(Newtonsoft.Json.FloatFormatHandling value)
    // Offset: 0x174BFFC
    void set_FloatFormatHandling(::Newtonsoft::Json::FloatFormatHandling value);
    // public System.String get_DateFormatString()
    // Offset: 0x174C090
    ::StringW get_DateFormatString();
    // public System.Void set_DateFormatString(System.String value)
    // Offset: 0x174C098
    void set_DateFormatString(::StringW value);
    // public System.Globalization.CultureInfo get_Culture()
    // Offset: 0x174A988
    ::System::Globalization::CultureInfo* get_Culture();
    // public System.Void set_Culture(System.Globalization.CultureInfo value)
    // Offset: 0x174C0A0
    void set_Culture(::System::Globalization::CultureInfo* value);
    // static private System.Void .cctor()
    // Offset: 0x174B410
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x17492B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonWriter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonWriter*, creationType>()));
    }
    // static Newtonsoft.Json.JsonWriter/Newtonsoft.Json.State[][] BuildStateArray()
    // Offset: 0x174B02C
    static ::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> BuildStateArray();
    // System.Void OnStringEscapeHandlingChanged()
    // Offset: 0x174BFF0
    void OnStringEscapeHandlingChanged();
    // System.Void UpdateScopeWithFinishedValue()
    // Offset: 0x174C0A8
    void UpdateScopeWithFinishedValue();
    // private System.Void Push(Newtonsoft.Json.JsonContainerType value)
    // Offset: 0x174C0C0
    void Push(::Newtonsoft::Json::JsonContainerType value);
    // private Newtonsoft.Json.JsonContainerType Pop()
    // Offset: 0x174C1D4
    ::Newtonsoft::Json::JsonContainerType Pop();
    // private Newtonsoft.Json.JsonContainerType Peek()
    // Offset: 0x174BAE8
    ::Newtonsoft::Json::JsonContainerType Peek();
    // public System.Void Close()
    // Offset: 0x17493D0
    void Close();
    // public System.Void WriteStartObject()
    // Offset: 0x174C2BC
    void WriteStartObject();
    // public System.Void WriteEndObject()
    // Offset: 0x174C2C8
    void WriteEndObject();
    // public System.Void WriteStartArray()
    // Offset: 0x174C2D4
    void WriteStartArray();
    // public System.Void WriteEndArray()
    // Offset: 0x174C2E0
    void WriteEndArray();
    // public System.Void WriteStartConstructor(System.String name)
    // Offset: 0x174C2E8
    void WriteStartConstructor(::StringW name);
    // public System.Void WriteEndConstructor()
    // Offset: 0x174C2F4
    void WriteEndConstructor();
    // public System.Void WritePropertyName(System.String name)
    // Offset: 0x174C2FC
    void WritePropertyName(::StringW name);
    // public System.Void WritePropertyName(System.String name, System.Boolean escape)
    // Offset: 0x174C30C
    void WritePropertyName(::StringW name, bool escape);
    // public System.Void WriteEnd()
    // Offset: 0x174C31C
    void WriteEnd();
    // public System.Void WriteToken(Newtonsoft.Json.JsonReader reader)
    // Offset: 0x174C400
    void WriteToken(::Newtonsoft::Json::JsonReader* reader);
    // public System.Void WriteToken(Newtonsoft.Json.JsonReader reader, System.Boolean writeChildren)
    // Offset: 0x174C408
    void WriteToken(::Newtonsoft::Json::JsonReader* reader, bool writeChildren);
    // public System.Void WriteToken(Newtonsoft.Json.JsonToken token, System.Object value)
    // Offset: 0x174C490
    void WriteToken(::Newtonsoft::Json::JsonToken token, ::Il2CppObject* value);
    // System.Void WriteToken(Newtonsoft.Json.JsonReader reader, System.Boolean writeChildren, System.Boolean writeDateConstructorAsDate, System.Boolean writeComments)
    // Offset: 0x174CAD0
    void WriteToken(::Newtonsoft::Json::JsonReader* reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    // private System.Void WriteConstructorDate(Newtonsoft.Json.JsonReader reader)
    // Offset: 0x174CCA4
    void WriteConstructorDate(::Newtonsoft::Json::JsonReader* reader);
    // private System.Void WriteEnd(Newtonsoft.Json.JsonContainerType type)
    // Offset: 0x174C324
    void WriteEnd(::Newtonsoft::Json::JsonContainerType type);
    // private System.Void AutoCompleteAll()
    // Offset: 0x174C270
    void AutoCompleteAll();
    // private Newtonsoft.Json.JsonToken GetCloseTokenForType(Newtonsoft.Json.JsonContainerType type)
    // Offset: 0x174CE90
    ::Newtonsoft::Json::JsonToken GetCloseTokenForType(::Newtonsoft::Json::JsonContainerType type);
    // private System.Void AutoCompleteClose(Newtonsoft.Json.JsonContainerType type)
    // Offset: 0x174CF40
    void AutoCompleteClose(::Newtonsoft::Json::JsonContainerType type);
    // protected System.Void WriteEnd(Newtonsoft.Json.JsonToken token)
    // Offset: 0x174D14C
    void WriteEnd(::Newtonsoft::Json::JsonToken token);
    // protected System.Void WriteIndent()
    // Offset: 0x174D150
    void WriteIndent();
    // protected System.Void WriteValueDelimiter()
    // Offset: 0x174D154
    void WriteValueDelimiter();
    // protected System.Void WriteIndentSpace()
    // Offset: 0x174D158
    void WriteIndentSpace();
    // System.Void AutoComplete(Newtonsoft.Json.JsonToken tokenBeingWritten)
    // Offset: 0x174D15C
    void AutoComplete(::Newtonsoft::Json::JsonToken tokenBeingWritten);
    // public System.Void WriteNull()
    // Offset: 0x174D3C0
    void WriteNull();
    // public System.Void WriteUndefined()
    // Offset: 0x174D3DC
    void WriteUndefined();
    // public System.Void WriteRaw(System.String json)
    // Offset: 0x174D3F8
    void WriteRaw(::StringW json);
    // public System.Void WriteRawValue(System.String json)
    // Offset: 0x174D3FC
    void WriteRawValue(::StringW json);
    // public System.Void WriteValue(System.String value)
    // Offset: 0x174D450
    void WriteValue(::StringW value);
    // public System.Void WriteValue(System.Int32 value)
    // Offset: 0x174D46C
    void WriteValue(int value);
    // public System.Void WriteValue(System.UInt32 value)
    // Offset: 0x174D488
    void WriteValue(uint value);
    // public System.Void WriteValue(System.Int64 value)
    // Offset: 0x174D4A4
    void WriteValue(int64_t value);
    // public System.Void WriteValue(System.UInt64 value)
    // Offset: 0x174D4C0
    void WriteValue(uint64_t value);
    // public System.Void WriteValue(System.Single value)
    // Offset: 0x174D4DC
    void WriteValue(float value);
    // public System.Void WriteValue(System.Double value)
    // Offset: 0x174D4F8
    void WriteValue(double value);
    // public System.Void WriteValue(System.Boolean value)
    // Offset: 0x174D514
    void WriteValue(bool value);
    // public System.Void WriteValue(System.Int16 value)
    // Offset: 0x174D530
    void WriteValue(int16_t value);
    // public System.Void WriteValue(System.UInt16 value)
    // Offset: 0x174D54C
    void WriteValue(uint16_t value);
    // public System.Void WriteValue(System.Char value)
    // Offset: 0x174D568
    void WriteValue(::Il2CppChar value);
    // public System.Void WriteValue(System.Byte value)
    // Offset: 0x174D584
    void WriteValue(uint8_t value);
    // public System.Void WriteValue(System.SByte value)
    // Offset: 0x174D5A0
    void WriteValue(int8_t value);
    // public System.Void WriteValue(System.Decimal value)
    // Offset: 0x174D5BC
    void WriteValue(::System::Decimal value);
    // public System.Void WriteValue(System.DateTime value)
    // Offset: 0x174D5D8
    void WriteValue(::System::DateTime value);
    // public System.Void WriteValue(System.DateTimeOffset value)
    // Offset: 0x174D5F4
    void WriteValue(::System::DateTimeOffset value);
    // public System.Void WriteValue(System.Guid value)
    // Offset: 0x174D610
    void WriteValue(::System::Guid value);
    // public System.Void WriteValue(System.TimeSpan value)
    // Offset: 0x174D62C
    void WriteValue(::System::TimeSpan value);
    // public System.Void WriteValue(System.Nullable`1<System.Int32> value)
    // Offset: 0x174D648
    void WriteValue(::System::Nullable_1<int> value);
    // public System.Void WriteValue(System.Nullable`1<System.UInt32> value)
    // Offset: 0x174D6CC
    void WriteValue(::System::Nullable_1<uint> value);
    // public System.Void WriteValue(System.Nullable`1<System.Int64> value)
    // Offset: 0x174D750
    void WriteValue(::System::Nullable_1<int64_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.UInt64> value)
    // Offset: 0x174D7D8
    void WriteValue(::System::Nullable_1<uint64_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.Single> value)
    // Offset: 0x174D860
    void WriteValue(::System::Nullable_1<float> value);
    // public System.Void WriteValue(System.Nullable`1<System.Double> value)
    // Offset: 0x174D8E4
    void WriteValue(::System::Nullable_1<double> value);
    // public System.Void WriteValue(System.Nullable`1<System.Boolean> value)
    // Offset: 0x174D970
    void WriteValue(::System::Nullable_1<bool> value);
    // public System.Void WriteValue(System.Nullable`1<System.Int16> value)
    // Offset: 0x174D9FC
    void WriteValue(::System::Nullable_1<int16_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.UInt16> value)
    // Offset: 0x174DA80
    void WriteValue(::System::Nullable_1<uint16_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.Char> value)
    // Offset: 0x174DB04
    void WriteValue(::System::Nullable_1<::Il2CppChar> value);
    // public System.Void WriteValue(System.Nullable`1<System.Byte> value)
    // Offset: 0x174DB88
    void WriteValue(::System::Nullable_1<uint8_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.SByte> value)
    // Offset: 0x174DC0C
    void WriteValue(::System::Nullable_1<int8_t> value);
    // public System.Void WriteValue(System.Nullable`1<System.Decimal> value)
    // Offset: 0x174DC90
    void WriteValue(::System::Nullable_1<::System::Decimal> value);
    // public System.Void WriteValue(System.Nullable`1<System.DateTime> value)
    // Offset: 0x174DD18
    void WriteValue(::System::Nullable_1<::System::DateTime> value);
    // public System.Void WriteValue(System.Nullable`1<System.DateTimeOffset> value)
    // Offset: 0x174DDA0
    void WriteValue(::System::Nullable_1<::System::DateTimeOffset> value);
    // public System.Void WriteValue(System.Nullable`1<System.Guid> value)
    // Offset: 0x174DE28
    void WriteValue(::System::Nullable_1<::System::Guid> value);
    // public System.Void WriteValue(System.Nullable`1<System.TimeSpan> value)
    // Offset: 0x174DEB0
    void WriteValue(::System::Nullable_1<::System::TimeSpan> value);
    // public System.Void WriteValue(System.Byte[] value)
    // Offset: 0x174DF38
    void WriteValue(::ArrayW<uint8_t> value);
    // public System.Void WriteValue(System.Uri value)
    // Offset: 0x174DF68
    void WriteValue(::System::Uri* value);
    // public System.Void WriteValue(System.Object value)
    // Offset: 0x1749A6C
    void WriteValue(::Il2CppObject* value);
    // public System.Void WriteComment(System.String text)
    // Offset: 0x174EFE0
    void WriteComment(::StringW text);
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x174EFE8
    void System_IDisposable_Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x174F068
    void Dispose(bool disposing);
    // static System.Void WriteValue(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Utilities.PrimitiveTypeCode typeCode, System.Object value)
    // Offset: 0x174E024
    static void WriteValue(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Utilities::PrimitiveTypeCode typeCode, ::Il2CppObject* value);
    // static private Newtonsoft.Json.JsonWriterException CreateUnsupportedTypeException(Newtonsoft.Json.JsonWriter writer, System.Object value)
    // Offset: 0x174F088
    static ::Newtonsoft::Json::JsonWriterException* CreateUnsupportedTypeException(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value);
    // System.Void InternalWriteEnd(Newtonsoft.Json.JsonContainerType container)
    // Offset: 0x174C2D0
    void InternalWriteEnd(::Newtonsoft::Json::JsonContainerType container);
    // System.Void InternalWritePropertyName(System.String name)
    // Offset: 0x17496CC
    void InternalWritePropertyName(::StringW name);
    // System.Void InternalWriteRaw()
    // Offset: 0x1749CD4
    void InternalWriteRaw();
    // System.Void InternalWriteStart(Newtonsoft.Json.JsonToken token, Newtonsoft.Json.JsonContainerType container)
    // Offset: 0x1749414
    void InternalWriteStart(::Newtonsoft::Json::JsonToken token, ::Newtonsoft::Json::JsonContainerType container);
    // System.Void InternalWriteValue(Newtonsoft.Json.JsonToken token)
    // Offset: 0x1749BF4
    void InternalWriteValue(::Newtonsoft::Json::JsonToken token);
    // System.Void InternalWriteComment()
    // Offset: 0x174B024
    void InternalWriteComment();
  }; // Newtonsoft.Json.JsonWriter
  #pragma pack(pop)
  static check_size<sizeof(JsonWriter), 88 + sizeof(::System::Globalization::CultureInfo*)> __Newtonsoft_Json_JsonWriterSizeCheck;
  static_assert(sizeof(JsonWriter) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonWriter::State, "Newtonsoft.Json", "JsonWriter/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_CloseOutput
// Il2CppName: get_CloseOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_CloseOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_CloseOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_CloseOutput
// Il2CppName: set_CloseOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(bool)>(&Newtonsoft::Json::JsonWriter::set_CloseOutput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_CloseOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_Top
// Il2CppName: get_Top
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_Top)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_Top", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::WriteState (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_WriteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_ContainerPath
// Il2CppName: get_ContainerPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_ContainerPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_ContainerPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_Formatting
// Il2CppName: get_Formatting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Formatting (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_Formatting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_Formatting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_Formatting
// Il2CppName: set_Formatting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::Formatting)>(&Newtonsoft::Json::JsonWriter::set_Formatting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "Formatting")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_Formatting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_DateFormatHandling
// Il2CppName: get_DateFormatHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::DateFormatHandling (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_DateFormatHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_DateFormatHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_DateFormatHandling
// Il2CppName: set_DateFormatHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::DateFormatHandling)>(&Newtonsoft::Json::JsonWriter::set_DateFormatHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateFormatHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_DateFormatHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_DateTimeZoneHandling
// Il2CppName: get_DateTimeZoneHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::DateTimeZoneHandling (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_DateTimeZoneHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_DateTimeZoneHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_DateTimeZoneHandling
// Il2CppName: set_DateTimeZoneHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::DateTimeZoneHandling)>(&Newtonsoft::Json::JsonWriter::set_DateTimeZoneHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_DateTimeZoneHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_StringEscapeHandling
// Il2CppName: get_StringEscapeHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::StringEscapeHandling (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_StringEscapeHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_StringEscapeHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_StringEscapeHandling
// Il2CppName: set_StringEscapeHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::StringEscapeHandling)>(&Newtonsoft::Json::JsonWriter::set_StringEscapeHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "StringEscapeHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_StringEscapeHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_FloatFormatHandling
// Il2CppName: get_FloatFormatHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::FloatFormatHandling (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_FloatFormatHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_FloatFormatHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_FloatFormatHandling
// Il2CppName: set_FloatFormatHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::FloatFormatHandling)>(&Newtonsoft::Json::JsonWriter::set_FloatFormatHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatFormatHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_FloatFormatHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_DateFormatString
// Il2CppName: get_DateFormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_DateFormatString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_DateFormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_DateFormatString
// Il2CppName: set_DateFormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::set_DateFormatString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_DateFormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::get_Culture
// Il2CppName: get_Culture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::get_Culture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "get_Culture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::set_Culture
// Il2CppName: set_Culture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Globalization::CultureInfo*)>(&Newtonsoft::Json::JsonWriter::set_Culture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "set_Culture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::JsonWriter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::BuildStateArray
// Il2CppName: BuildStateArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ArrayW<::Newtonsoft::Json::JsonWriter::State>> (*)()>(&Newtonsoft::Json::JsonWriter::BuildStateArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "BuildStateArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::OnStringEscapeHandlingChanged
// Il2CppName: OnStringEscapeHandlingChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::OnStringEscapeHandlingChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "OnStringEscapeHandlingChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::UpdateScopeWithFinishedValue
// Il2CppName: UpdateScopeWithFinishedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::UpdateScopeWithFinishedValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "UpdateScopeWithFinishedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::Push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonContainerType (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonContainerType (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteStartObject
// Il2CppName: WriteStartObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteStartObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteStartObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEndObject
// Il2CppName: WriteEndObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteEndObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEndObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteStartArray
// Il2CppName: WriteStartArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteStartArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteStartArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEndArray
// Il2CppName: WriteEndArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteEndArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEndArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteStartConstructor
// Il2CppName: WriteStartConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WriteStartConstructor)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteStartConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEndConstructor
// Il2CppName: WriteEndConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteEndConstructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEndConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WritePropertyName
// Il2CppName: WritePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WritePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WritePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WritePropertyName
// Il2CppName: WritePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW, bool)>(&Newtonsoft::Json::JsonWriter::WritePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* escape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WritePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, escape});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEnd
// Il2CppName: WriteEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteToken
// Il2CppName: WriteToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonReader*)>(&Newtonsoft::Json::JsonWriter::WriteToken)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteToken
// Il2CppName: WriteToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonReader*, bool)>(&Newtonsoft::Json::JsonWriter::WriteToken)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* writeChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, writeChildren});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteToken
// Il2CppName: WriteToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonToken, ::Il2CppObject*)>(&Newtonsoft::Json::JsonWriter::WriteToken)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteToken
// Il2CppName: WriteToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonReader*, bool, bool, bool)>(&Newtonsoft::Json::JsonWriter::WriteToken)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* writeChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* writeDateConstructorAsDate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* writeComments = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, writeChildren, writeDateConstructorAsDate, writeComments});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteConstructorDate
// Il2CppName: WriteConstructorDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonReader*)>(&Newtonsoft::Json::JsonWriter::WriteConstructorDate)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteConstructorDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEnd
// Il2CppName: WriteEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::WriteEnd)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::AutoCompleteAll
// Il2CppName: AutoCompleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::AutoCompleteAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "AutoCompleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::GetCloseTokenForType
// Il2CppName: GetCloseTokenForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonToken (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::GetCloseTokenForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "GetCloseTokenForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::AutoCompleteClose
// Il2CppName: AutoCompleteClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::AutoCompleteClose)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "AutoCompleteClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteEnd
// Il2CppName: WriteEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonWriter::WriteEnd)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteIndent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValueDelimiter
// Il2CppName: WriteValueDelimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteValueDelimiter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValueDelimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteIndentSpace
// Il2CppName: WriteIndentSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteIndentSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteIndentSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::AutoComplete
// Il2CppName: AutoComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonWriter::AutoComplete)> {
  static const MethodInfo* get() {
    static auto* tokenBeingWritten = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "AutoComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tokenBeingWritten});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteNull
// Il2CppName: WriteNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteUndefined
// Il2CppName: WriteUndefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::WriteUndefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteUndefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WriteRaw)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteRawValue
// Il2CppName: WriteRawValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WriteRawValue)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteRawValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(int)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(uint)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(int64_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(uint64_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(float)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(double)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(bool)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(int16_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(uint16_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(uint8_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(int8_t)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "SByte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Decimal)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::DateTime)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::DateTimeOffset)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Guid)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::TimeSpan)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<int>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<uint>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<int64_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<uint64_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<float>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<double>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Double")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<bool>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<int16_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<uint16_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "UInt16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::Il2CppChar>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Char")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<uint8_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<int8_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "SByte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::System::Decimal>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Decimal")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::System::DateTime>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTime")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::System::DateTimeOffset>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::System::Guid>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Guid")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Nullable_1<::System::TimeSpan>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "TimeSpan")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::ArrayW<uint8_t>)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::System::Uri*)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Il2CppObject*)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::WriteComment)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(bool)>(&Newtonsoft::Json::JsonWriter::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Utilities::PrimitiveTypeCode, ::Il2CppObject*)>(&Newtonsoft::Json::JsonWriter::WriteValue)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Utilities", "PrimitiveTypeCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, typeCode, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::CreateUnsupportedTypeException
// Il2CppName: CreateUnsupportedTypeException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonWriterException* (*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*)>(&Newtonsoft::Json::JsonWriter::CreateUnsupportedTypeException)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "CreateUnsupportedTypeException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWriteEnd
// Il2CppName: InternalWriteEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::InternalWriteEnd)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWriteEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWritePropertyName
// Il2CppName: InternalWritePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::StringW)>(&Newtonsoft::Json::JsonWriter::InternalWritePropertyName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWritePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWriteRaw
// Il2CppName: InternalWriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::InternalWriteRaw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWriteStart
// Il2CppName: InternalWriteStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonToken, ::Newtonsoft::Json::JsonContainerType)>(&Newtonsoft::Json::JsonWriter::InternalWriteStart)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    static auto* container = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonContainerType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWriteStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token, container});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWriteValue
// Il2CppName: InternalWriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)(::Newtonsoft::Json::JsonToken)>(&Newtonsoft::Json::JsonWriter::InternalWriteValue)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonWriter::InternalWriteComment
// Il2CppName: InternalWriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonWriter::*)()>(&Newtonsoft::Json::JsonWriter::InternalWriteComment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonWriter*), "InternalWriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
