// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.TypeNameHandling
#include "Newtonsoft/Json/TypeNameHandling.hpp"
// Including type: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
#include "System/Runtime/Serialization/Formatters/FormatterAssemblyStyle.hpp"
// Including type: Newtonsoft.Json.PreserveReferencesHandling
#include "Newtonsoft/Json/PreserveReferencesHandling.hpp"
// Including type: Newtonsoft.Json.ReferenceLoopHandling
#include "Newtonsoft/Json/ReferenceLoopHandling.hpp"
// Including type: Newtonsoft.Json.MissingMemberHandling
#include "Newtonsoft/Json/MissingMemberHandling.hpp"
// Including type: Newtonsoft.Json.ObjectCreationHandling
#include "Newtonsoft/Json/ObjectCreationHandling.hpp"
// Including type: Newtonsoft.Json.NullValueHandling
#include "Newtonsoft/Json/NullValueHandling.hpp"
// Including type: Newtonsoft.Json.DefaultValueHandling
#include "Newtonsoft/Json/DefaultValueHandling.hpp"
// Including type: Newtonsoft.Json.ConstructorHandling
#include "Newtonsoft/Json/ConstructorHandling.hpp"
// Including type: Newtonsoft.Json.MetadataPropertyHandling
#include "Newtonsoft/Json/MetadataPropertyHandling.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Newtonsoft.Json.Formatting
#include "Newtonsoft/Json/Formatting.hpp"
// Including type: Newtonsoft.Json.DateFormatHandling
#include "Newtonsoft/Json/DateFormatHandling.hpp"
// Including type: Newtonsoft.Json.DateTimeZoneHandling
#include "Newtonsoft/Json/DateTimeZoneHandling.hpp"
// Including type: Newtonsoft.Json.DateParseHandling
#include "Newtonsoft/Json/DateParseHandling.hpp"
// Including type: Newtonsoft.Json.FloatFormatHandling
#include "Newtonsoft/Json/FloatFormatHandling.hpp"
// Including type: Newtonsoft.Json.FloatParseHandling
#include "Newtonsoft/Json/FloatParseHandling.hpp"
// Including type: Newtonsoft.Json.StringEscapeHandling
#include "Newtonsoft/Json/StringEscapeHandling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonConverterCollection
  class JsonConverterCollection;
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
  // Forward declaring type: JsonReader
  class JsonReader;
  // Forward declaring type: JsonWriter
  class JsonWriter;
  // Forward declaring type: JsonConverter
  class JsonConverter;
}
// Forward declaring namespace: Newtonsoft::Json::Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: IContractResolver
  class IContractResolver;
  // Forward declaring type: ITraceWriter
  class ITraceWriter;
  // Forward declaring type: IReferenceResolver
  class IReferenceResolver;
  // Forward declaring type: ErrorEventArgs
  class ErrorEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationBinder
  class SerializationBinder;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializer
  class JsonSerializer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonSerializer);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonSerializer*, "Newtonsoft.Json", "JsonSerializer");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.JsonSerializer
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FAA84
  class JsonSerializer : public ::Il2CppObject {
    public:
    public:
    // Newtonsoft.Json.TypeNameHandling _typeNameHandling
    // Size: 0x4
    // Offset: 0x10
    ::Newtonsoft::Json::TypeNameHandling typeNameHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::TypeNameHandling) == 0x4);
    // System.Runtime.Serialization.Formatters.FormatterAssemblyStyle _typeNameAssemblyFormat
    // Size: 0x4
    // Offset: 0x14
    ::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle typeNameAssemblyFormat;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle) == 0x4);
    // Newtonsoft.Json.PreserveReferencesHandling _preserveReferencesHandling
    // Size: 0x4
    // Offset: 0x18
    ::Newtonsoft::Json::PreserveReferencesHandling preserveReferencesHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::PreserveReferencesHandling) == 0x4);
    // Newtonsoft.Json.ReferenceLoopHandling _referenceLoopHandling
    // Size: 0x4
    // Offset: 0x1C
    ::Newtonsoft::Json::ReferenceLoopHandling referenceLoopHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::ReferenceLoopHandling) == 0x4);
    // Newtonsoft.Json.MissingMemberHandling _missingMemberHandling
    // Size: 0x4
    // Offset: 0x20
    ::Newtonsoft::Json::MissingMemberHandling missingMemberHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::MissingMemberHandling) == 0x4);
    // Newtonsoft.Json.ObjectCreationHandling _objectCreationHandling
    // Size: 0x4
    // Offset: 0x24
    ::Newtonsoft::Json::ObjectCreationHandling objectCreationHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::ObjectCreationHandling) == 0x4);
    // Newtonsoft.Json.NullValueHandling _nullValueHandling
    // Size: 0x4
    // Offset: 0x28
    ::Newtonsoft::Json::NullValueHandling nullValueHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::NullValueHandling) == 0x4);
    // Newtonsoft.Json.DefaultValueHandling _defaultValueHandling
    // Size: 0x4
    // Offset: 0x2C
    ::Newtonsoft::Json::DefaultValueHandling defaultValueHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::DefaultValueHandling) == 0x4);
    // Newtonsoft.Json.ConstructorHandling _constructorHandling
    // Size: 0x4
    // Offset: 0x30
    ::Newtonsoft::Json::ConstructorHandling constructorHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::ConstructorHandling) == 0x4);
    // Newtonsoft.Json.MetadataPropertyHandling _metadataPropertyHandling
    // Size: 0x4
    // Offset: 0x34
    ::Newtonsoft::Json::MetadataPropertyHandling metadataPropertyHandling;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::MetadataPropertyHandling) == 0x4);
    // Newtonsoft.Json.JsonConverterCollection _converters
    // Size: 0x8
    // Offset: 0x38
    ::Newtonsoft::Json::JsonConverterCollection* converters;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::JsonConverterCollection*) == 0x8);
    // Newtonsoft.Json.Serialization.IContractResolver _contractResolver
    // Size: 0x8
    // Offset: 0x40
    ::Newtonsoft::Json::Serialization::IContractResolver* contractResolver;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::IContractResolver*) == 0x8);
    // Newtonsoft.Json.Serialization.ITraceWriter _traceWriter
    // Size: 0x8
    // Offset: 0x48
    ::Newtonsoft::Json::Serialization::ITraceWriter* traceWriter;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::ITraceWriter*) == 0x8);
    // System.Collections.IEqualityComparer _equalityComparer
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::IEqualityComparer* equalityComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::IEqualityComparer*) == 0x8);
    // System.Runtime.Serialization.SerializationBinder _binder
    // Size: 0x8
    // Offset: 0x58
    ::System::Runtime::Serialization::SerializationBinder* binder;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::SerializationBinder*) == 0x8);
    // System.Runtime.Serialization.StreamingContext _context
    // Size: 0xC
    // Offset: 0x60
    ::System::Runtime::Serialization::StreamingContext context;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::StreamingContext) == 0xC);
    // private Newtonsoft.Json.Serialization.IReferenceResolver _referenceResolver
    // Size: 0x8
    // Offset: 0x70
    ::Newtonsoft::Json::Serialization::IReferenceResolver* referenceResolver;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::IReferenceResolver*) == 0x8);
    // private System.Nullable`1<Newtonsoft.Json.Formatting> _formatting
    // Size: 0xFFFFFFFF
    // Offset: 0x78
    ::System::Nullable_1<::Newtonsoft::Json::Formatting> formatting;
    // private System.Nullable`1<Newtonsoft.Json.DateFormatHandling> _dateFormatHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::System::Nullable_1<::Newtonsoft::Json::DateFormatHandling> dateFormatHandling;
    // private System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> _dateTimeZoneHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling> dateTimeZoneHandling;
    // private System.Nullable`1<Newtonsoft.Json.DateParseHandling> _dateParseHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x90
    ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling> dateParseHandling;
    // private System.Nullable`1<Newtonsoft.Json.FloatFormatHandling> _floatFormatHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x98
    ::System::Nullable_1<::Newtonsoft::Json::FloatFormatHandling> floatFormatHandling;
    // private System.Nullable`1<Newtonsoft.Json.FloatParseHandling> _floatParseHandling
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling> floatParseHandling;
    // private System.Nullable`1<Newtonsoft.Json.StringEscapeHandling> _stringEscapeHandling
    // Size: 0xFFFFFFFF
    // Offset: 0xA8
    ::System::Nullable_1<::Newtonsoft::Json::StringEscapeHandling> stringEscapeHandling;
    // private System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0xB0
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // private System.Nullable`1<System.Int32> _maxDepth
    // Size: 0xFFFFFFFF
    // Offset: 0xB8
    ::System::Nullable_1<int> maxDepth;
    // private System.Boolean _maxDepthSet
    // Size: 0x1
    // Offset: 0xC0
    bool maxDepthSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> _checkAdditionalContent
    // Size: 0xFFFFFFFF
    // Offset: 0xC1
    ::System::Nullable_1<bool> checkAdditionalContent;
    // private System.String _dateFormatString
    // Size: 0x8
    // Offset: 0xC8
    ::StringW dateFormatString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _dateFormatStringSet
    // Size: 0x1
    // Offset: 0xD0
    bool dateFormatStringSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> Error
    // Size: 0x8
    // Offset: 0xD8
    ::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* Error;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*) == 0x8);
    public:
    // Get instance field reference: Newtonsoft.Json.TypeNameHandling _typeNameHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::TypeNameHandling& dyn__typeNameHandling();
    // Get instance field reference: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle _typeNameAssemblyFormat
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle& dyn__typeNameAssemblyFormat();
    // Get instance field reference: Newtonsoft.Json.PreserveReferencesHandling _preserveReferencesHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::PreserveReferencesHandling& dyn__preserveReferencesHandling();
    // Get instance field reference: Newtonsoft.Json.ReferenceLoopHandling _referenceLoopHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::ReferenceLoopHandling& dyn__referenceLoopHandling();
    // Get instance field reference: Newtonsoft.Json.MissingMemberHandling _missingMemberHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::MissingMemberHandling& dyn__missingMemberHandling();
    // Get instance field reference: Newtonsoft.Json.ObjectCreationHandling _objectCreationHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::ObjectCreationHandling& dyn__objectCreationHandling();
    // Get instance field reference: Newtonsoft.Json.NullValueHandling _nullValueHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::NullValueHandling& dyn__nullValueHandling();
    // Get instance field reference: Newtonsoft.Json.DefaultValueHandling _defaultValueHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::DefaultValueHandling& dyn__defaultValueHandling();
    // Get instance field reference: Newtonsoft.Json.ConstructorHandling _constructorHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::ConstructorHandling& dyn__constructorHandling();
    // Get instance field reference: Newtonsoft.Json.MetadataPropertyHandling _metadataPropertyHandling
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::MetadataPropertyHandling& dyn__metadataPropertyHandling();
    // Get instance field reference: Newtonsoft.Json.JsonConverterCollection _converters
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::JsonConverterCollection*& dyn__converters();
    // Get instance field reference: Newtonsoft.Json.Serialization.IContractResolver _contractResolver
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::IContractResolver*& dyn__contractResolver();
    // Get instance field reference: Newtonsoft.Json.Serialization.ITraceWriter _traceWriter
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::ITraceWriter*& dyn__traceWriter();
    // Get instance field reference: System.Collections.IEqualityComparer _equalityComparer
    [[deprecated("Use field access instead!")]] ::System::Collections::IEqualityComparer*& dyn__equalityComparer();
    // Get instance field reference: System.Runtime.Serialization.SerializationBinder _binder
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::SerializationBinder*& dyn__binder();
    // Get instance field reference: System.Runtime.Serialization.StreamingContext _context
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::StreamingContext& dyn__context();
    // Get instance field reference: private Newtonsoft.Json.Serialization.IReferenceResolver _referenceResolver
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::IReferenceResolver*& dyn__referenceResolver();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.Formatting> _formatting
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::Formatting>& dyn__formatting();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.DateFormatHandling> _dateFormatHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateFormatHandling>& dyn__dateFormatHandling();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> _dateTimeZoneHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling>& dyn__dateTimeZoneHandling();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.DateParseHandling> _dateParseHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling>& dyn__dateParseHandling();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.FloatFormatHandling> _floatFormatHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::FloatFormatHandling>& dyn__floatFormatHandling();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.FloatParseHandling> _floatParseHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling>& dyn__floatParseHandling();
    // Get instance field reference: private System.Nullable`1<Newtonsoft.Json.StringEscapeHandling> _stringEscapeHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::StringEscapeHandling>& dyn__stringEscapeHandling();
    // Get instance field reference: private System.Globalization.CultureInfo _culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn__culture();
    // Get instance field reference: private System.Nullable`1<System.Int32> _maxDepth
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn__maxDepth();
    // Get instance field reference: private System.Boolean _maxDepthSet
    [[deprecated("Use field access instead!")]] bool& dyn__maxDepthSet();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _checkAdditionalContent
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__checkAdditionalContent();
    // Get instance field reference: private System.String _dateFormatString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__dateFormatString();
    // Get instance field reference: private System.Boolean _dateFormatStringSet
    [[deprecated("Use field access instead!")]] bool& dyn__dateFormatStringSet();
    // Get instance field reference: private System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> Error
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*& dyn_Error();
    // public System.Void set_ReferenceResolver(Newtonsoft.Json.Serialization.IReferenceResolver value)
    // Offset: 0x1816E44
    void set_ReferenceResolver(::Newtonsoft::Json::Serialization::IReferenceResolver* value);
    // public System.Void set_Binder(System.Runtime.Serialization.SerializationBinder value)
    // Offset: 0x1816EE0
    void set_Binder(::System::Runtime::Serialization::SerializationBinder* value);
    // public Newtonsoft.Json.Serialization.ITraceWriter get_TraceWriter()
    // Offset: 0x1816F7C
    ::Newtonsoft::Json::Serialization::ITraceWriter* get_TraceWriter();
    // public System.Void set_TraceWriter(Newtonsoft.Json.Serialization.ITraceWriter value)
    // Offset: 0x1816F84
    void set_TraceWriter(::Newtonsoft::Json::Serialization::ITraceWriter* value);
    // public System.Void set_EqualityComparer(System.Collections.IEqualityComparer value)
    // Offset: 0x1816F8C
    void set_EqualityComparer(::System::Collections::IEqualityComparer* value);
    // public System.Void set_TypeNameHandling(Newtonsoft.Json.TypeNameHandling value)
    // Offset: 0x1816F94
    void set_TypeNameHandling(::Newtonsoft::Json::TypeNameHandling value);
    // public System.Void set_TypeNameAssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value)
    // Offset: 0x1817028
    void set_TypeNameAssemblyFormat(::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle value);
    // public System.Void set_PreserveReferencesHandling(Newtonsoft.Json.PreserveReferencesHandling value)
    // Offset: 0x18170BC
    void set_PreserveReferencesHandling(::Newtonsoft::Json::PreserveReferencesHandling value);
    // public System.Void set_ReferenceLoopHandling(Newtonsoft.Json.ReferenceLoopHandling value)
    // Offset: 0x1817150
    void set_ReferenceLoopHandling(::Newtonsoft::Json::ReferenceLoopHandling value);
    // public System.Void set_MissingMemberHandling(Newtonsoft.Json.MissingMemberHandling value)
    // Offset: 0x18171E4
    void set_MissingMemberHandling(::Newtonsoft::Json::MissingMemberHandling value);
    // public System.Void set_NullValueHandling(Newtonsoft.Json.NullValueHandling value)
    // Offset: 0x1817278
    void set_NullValueHandling(::Newtonsoft::Json::NullValueHandling value);
    // public System.Void set_DefaultValueHandling(Newtonsoft.Json.DefaultValueHandling value)
    // Offset: 0x181730C
    void set_DefaultValueHandling(::Newtonsoft::Json::DefaultValueHandling value);
    // public Newtonsoft.Json.ObjectCreationHandling get_ObjectCreationHandling()
    // Offset: 0x18173A0
    ::Newtonsoft::Json::ObjectCreationHandling get_ObjectCreationHandling();
    // public System.Void set_ObjectCreationHandling(Newtonsoft.Json.ObjectCreationHandling value)
    // Offset: 0x18173A8
    void set_ObjectCreationHandling(::Newtonsoft::Json::ObjectCreationHandling value);
    // public System.Void set_ConstructorHandling(Newtonsoft.Json.ConstructorHandling value)
    // Offset: 0x181743C
    void set_ConstructorHandling(::Newtonsoft::Json::ConstructorHandling value);
    // public Newtonsoft.Json.MetadataPropertyHandling get_MetadataPropertyHandling()
    // Offset: 0x18174D0
    ::Newtonsoft::Json::MetadataPropertyHandling get_MetadataPropertyHandling();
    // public System.Void set_MetadataPropertyHandling(Newtonsoft.Json.MetadataPropertyHandling value)
    // Offset: 0x18174D8
    void set_MetadataPropertyHandling(::Newtonsoft::Json::MetadataPropertyHandling value);
    // public Newtonsoft.Json.JsonConverterCollection get_Converters()
    // Offset: 0x181756C
    ::Newtonsoft::Json::JsonConverterCollection* get_Converters();
    // public Newtonsoft.Json.Serialization.IContractResolver get_ContractResolver()
    // Offset: 0x18175D4
    ::Newtonsoft::Json::Serialization::IContractResolver* get_ContractResolver();
    // public System.Void set_ContractResolver(Newtonsoft.Json.Serialization.IContractResolver value)
    // Offset: 0x18175DC
    void set_ContractResolver(::Newtonsoft::Json::Serialization::IContractResolver* value);
    // public System.Runtime.Serialization.StreamingContext get_Context()
    // Offset: 0x18176A8
    ::System::Runtime::Serialization::StreamingContext get_Context();
    // public System.Void set_Context(System.Runtime.Serialization.StreamingContext value)
    // Offset: 0x18176B4
    void set_Context(::System::Runtime::Serialization::StreamingContext value);
    // public Newtonsoft.Json.Formatting get_Formatting()
    // Offset: 0x18176BC
    ::Newtonsoft::Json::Formatting get_Formatting();
    // public System.Boolean get_CheckAdditionalContent()
    // Offset: 0x1817708
    bool get_CheckAdditionalContent();
    // public System.Void set_CheckAdditionalContent(System.Boolean value)
    // Offset: 0x1817760
    void set_CheckAdditionalContent(bool value);
    // public System.Void add_Error(System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> value)
    // Offset: 0x1816CFC
    void add_Error(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* value);
    // public System.Void remove_Error(System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> value)
    // Offset: 0x1816DA0
    void remove_Error(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* value);
    // public System.Void .ctor()
    // Offset: 0x18177D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonSerializer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonSerializer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonSerializer*, creationType>()));
    }
    // System.Boolean IsCheckAdditionalContentSet()
    // Offset: 0x18120E4
    bool IsCheckAdditionalContentSet();
    // static public Newtonsoft.Json.JsonSerializer Create()
    // Offset: 0x1817914
    static ::Newtonsoft::Json::JsonSerializer* Create();
    // static public Newtonsoft.Json.JsonSerializer Create(Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0x181796C
    static ::Newtonsoft::Json::JsonSerializer* Create(::Newtonsoft::Json::JsonSerializerSettings* settings);
    // static public Newtonsoft.Json.JsonSerializer CreateDefault()
    // Offset: 0x1818054
    static ::Newtonsoft::Json::JsonSerializer* CreateDefault();
    // static public Newtonsoft.Json.JsonSerializer CreateDefault(Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0x1811CF0
    static ::Newtonsoft::Json::JsonSerializer* CreateDefault(::Newtonsoft::Json::JsonSerializerSettings* settings);
    // static private System.Void ApplySerializerSettings(Newtonsoft.Json.JsonSerializer serializer, Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0x18179A4
    static void ApplySerializerSettings(::Newtonsoft::Json::JsonSerializer* serializer, ::Newtonsoft::Json::JsonSerializerSettings* settings);
    // public System.Void Populate(Newtonsoft.Json.JsonReader reader, System.Object target)
    // Offset: 0x181848C
    void Populate(::Newtonsoft::Json::JsonReader* reader, ::Il2CppObject* target);
    // System.Void PopulateInternal(Newtonsoft.Json.JsonReader reader, System.Object target)
    // Offset: 0x181849C
    void PopulateInternal(::Newtonsoft::Json::JsonReader* reader, ::Il2CppObject* target);
    // public T Deserialize(Newtonsoft.Json.JsonReader reader)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Deserialize(::Newtonsoft::Json::JsonReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonSerializer::Deserialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, reader);
    }
    // public System.Object Deserialize(Newtonsoft.Json.JsonReader reader, System.Type objectType)
    // Offset: 0x1802E60
    ::Il2CppObject* Deserialize(::Newtonsoft::Json::JsonReader* reader, ::System::Type* objectType);
    // System.Object DeserializeInternal(Newtonsoft.Json.JsonReader reader, System.Type objectType)
    // Offset: 0x1818B60
    ::Il2CppObject* DeserializeInternal(::Newtonsoft::Json::JsonReader* reader, ::System::Type* objectType);
    // private System.Void SetupReader(Newtonsoft.Json.JsonReader reader, out System.Globalization.CultureInfo previousCulture, out System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> previousDateTimeZoneHandling, out System.Nullable`1<Newtonsoft.Json.DateParseHandling> previousDateParseHandling, out System.Nullable`1<Newtonsoft.Json.FloatParseHandling> previousFloatParseHandling, out System.Nullable`1<System.Int32> previousMaxDepth, out System.String previousDateFormatString)
    // Offset: 0x1818724
    void SetupReader(::Newtonsoft::Json::JsonReader* reader, ByRef<::System::Globalization::CultureInfo*> previousCulture, ByRef<::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling>> previousDateTimeZoneHandling, ByRef<::System::Nullable_1<::Newtonsoft::Json::DateParseHandling>> previousDateParseHandling, ByRef<::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling>> previousFloatParseHandling, ByRef<::System::Nullable_1<int>> previousMaxDepth, ByRef<::StringW> previousDateFormatString);
    // private System.Void ResetReader(Newtonsoft.Json.JsonReader reader, System.Globalization.CultureInfo previousCulture, System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> previousDateTimeZoneHandling, System.Nullable`1<Newtonsoft.Json.DateParseHandling> previousDateParseHandling, System.Nullable`1<Newtonsoft.Json.FloatParseHandling> previousFloatParseHandling, System.Nullable`1<System.Int32> previousMaxDepth, System.String previousDateFormatString)
    // Offset: 0x1818A1C
    void ResetReader(::Newtonsoft::Json::JsonReader* reader, ::System::Globalization::CultureInfo* previousCulture, ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling> previousDateTimeZoneHandling, ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling> previousDateParseHandling, ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling> previousFloatParseHandling, ::System::Nullable_1<int> previousMaxDepth, ::StringW previousDateFormatString);
    // public System.Void Serialize(Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType)
    // Offset: 0x18041DC
    void Serialize(::Newtonsoft::Json::JsonWriter* jsonWriter, ::Il2CppObject* value, ::System::Type* objectType);
    // public System.Void Serialize(Newtonsoft.Json.JsonWriter jsonWriter, System.Object value)
    // Offset: 0x1804BE8
    void Serialize(::Newtonsoft::Json::JsonWriter* jsonWriter, ::Il2CppObject* value);
    // System.Void SerializeInternal(Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType)
    // Offset: 0x1818DF0
    void SerializeInternal(::Newtonsoft::Json::JsonWriter* jsonWriter, ::Il2CppObject* value, ::System::Type* objectType);
    // Newtonsoft.Json.Serialization.IReferenceResolver GetReferenceResolver()
    // Offset: 0x18192D4
    ::Newtonsoft::Json::Serialization::IReferenceResolver* GetReferenceResolver();
    // Newtonsoft.Json.JsonConverter GetMatchingConverter(System.Type type)
    // Offset: 0x1819340
    ::Newtonsoft::Json::JsonConverter* GetMatchingConverter(::System::Type* type);
    // static Newtonsoft.Json.JsonConverter GetMatchingConverter(System.Collections.Generic.IList`1<Newtonsoft.Json.JsonConverter> converters, System.Type objectType)
    // Offset: 0x1819348
    static ::Newtonsoft::Json::JsonConverter* GetMatchingConverter(::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>* converters, ::System::Type* objectType);
    // System.Void OnError(Newtonsoft.Json.Serialization.ErrorEventArgs e)
    // Offset: 0x18194B0
    void OnError(::Newtonsoft::Json::Serialization::ErrorEventArgs* e);
  }; // Newtonsoft.Json.JsonSerializer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_ReferenceResolver
// Il2CppName: set_ReferenceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::Serialization::IReferenceResolver*)>(&Newtonsoft::Json::JsonSerializer::set_ReferenceResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "IReferenceResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_ReferenceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_Binder
// Il2CppName: set_Binder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::Runtime::Serialization::SerializationBinder*)>(&Newtonsoft::Json::JsonSerializer::set_Binder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationBinder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_Binder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_TraceWriter
// Il2CppName: get_TraceWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::ITraceWriter* (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_TraceWriter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_TraceWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_TraceWriter
// Il2CppName: set_TraceWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::Serialization::ITraceWriter*)>(&Newtonsoft::Json::JsonSerializer::set_TraceWriter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "ITraceWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_TraceWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_EqualityComparer
// Il2CppName: set_EqualityComparer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::Collections::IEqualityComparer*)>(&Newtonsoft::Json::JsonSerializer::set_EqualityComparer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Collections", "IEqualityComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_EqualityComparer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_TypeNameHandling
// Il2CppName: set_TypeNameHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::TypeNameHandling)>(&Newtonsoft::Json::JsonSerializer::set_TypeNameHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "TypeNameHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_TypeNameHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_TypeNameAssemblyFormat
// Il2CppName: set_TypeNameAssemblyFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle)>(&Newtonsoft::Json::JsonSerializer::set_TypeNameAssemblyFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization.Formatters", "FormatterAssemblyStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_TypeNameAssemblyFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_PreserveReferencesHandling
// Il2CppName: set_PreserveReferencesHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::PreserveReferencesHandling)>(&Newtonsoft::Json::JsonSerializer::set_PreserveReferencesHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "PreserveReferencesHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_PreserveReferencesHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_ReferenceLoopHandling
// Il2CppName: set_ReferenceLoopHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::ReferenceLoopHandling)>(&Newtonsoft::Json::JsonSerializer::set_ReferenceLoopHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReferenceLoopHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_ReferenceLoopHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_MissingMemberHandling
// Il2CppName: set_MissingMemberHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::MissingMemberHandling)>(&Newtonsoft::Json::JsonSerializer::set_MissingMemberHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "MissingMemberHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_MissingMemberHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_NullValueHandling
// Il2CppName: set_NullValueHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::NullValueHandling)>(&Newtonsoft::Json::JsonSerializer::set_NullValueHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "NullValueHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_NullValueHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_DefaultValueHandling
// Il2CppName: set_DefaultValueHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::DefaultValueHandling)>(&Newtonsoft::Json::JsonSerializer::set_DefaultValueHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DefaultValueHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_DefaultValueHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_ObjectCreationHandling
// Il2CppName: get_ObjectCreationHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::ObjectCreationHandling (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_ObjectCreationHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_ObjectCreationHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_ObjectCreationHandling
// Il2CppName: set_ObjectCreationHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::ObjectCreationHandling)>(&Newtonsoft::Json::JsonSerializer::set_ObjectCreationHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ObjectCreationHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_ObjectCreationHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_ConstructorHandling
// Il2CppName: set_ConstructorHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::ConstructorHandling)>(&Newtonsoft::Json::JsonSerializer::set_ConstructorHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ConstructorHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_ConstructorHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_MetadataPropertyHandling
// Il2CppName: get_MetadataPropertyHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::MetadataPropertyHandling (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_MetadataPropertyHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_MetadataPropertyHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_MetadataPropertyHandling
// Il2CppName: set_MetadataPropertyHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::MetadataPropertyHandling)>(&Newtonsoft::Json::JsonSerializer::set_MetadataPropertyHandling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "MetadataPropertyHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_MetadataPropertyHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_Converters
// Il2CppName: get_Converters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonConverterCollection* (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_Converters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_Converters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_ContractResolver
// Il2CppName: get_ContractResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::IContractResolver* (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_ContractResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_ContractResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_ContractResolver
// Il2CppName: set_ContractResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::Serialization::IContractResolver*)>(&Newtonsoft::Json::JsonSerializer::set_ContractResolver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "IContractResolver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_ContractResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Serialization::StreamingContext (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::Runtime::Serialization::StreamingContext)>(&Newtonsoft::Json::JsonSerializer::set_Context)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_Formatting
// Il2CppName: get_Formatting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Formatting (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_Formatting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_Formatting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::get_CheckAdditionalContent
// Il2CppName: get_CheckAdditionalContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::get_CheckAdditionalContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "get_CheckAdditionalContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::set_CheckAdditionalContent
// Il2CppName: set_CheckAdditionalContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(bool)>(&Newtonsoft::Json::JsonSerializer::set_CheckAdditionalContent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "set_CheckAdditionalContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::add_Error
// Il2CppName: add_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*)>(&Newtonsoft::Json::JsonSerializer::add_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "ErrorEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "add_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::remove_Error
// Il2CppName: remove_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*)>(&Newtonsoft::Json::JsonSerializer::remove_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "ErrorEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "remove_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::IsCheckAdditionalContentSet
// Il2CppName: IsCheckAdditionalContentSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::IsCheckAdditionalContentSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "IsCheckAdditionalContentSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializer* (*)()>(&Newtonsoft::Json::JsonSerializer::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializer* (*)(::Newtonsoft::Json::JsonSerializerSettings*)>(&Newtonsoft::Json::JsonSerializer::Create)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::CreateDefault
// Il2CppName: CreateDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializer* (*)()>(&Newtonsoft::Json::JsonSerializer::CreateDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "CreateDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::CreateDefault
// Il2CppName: CreateDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializer* (*)(::Newtonsoft::Json::JsonSerializerSettings*)>(&Newtonsoft::Json::JsonSerializer::CreateDefault)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "CreateDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::ApplySerializerSettings
// Il2CppName: ApplySerializerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Newtonsoft::Json::JsonSerializer*, ::Newtonsoft::Json::JsonSerializerSettings*)>(&Newtonsoft::Json::JsonSerializer::ApplySerializerSettings)> {
  static const MethodInfo* get() {
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "ApplySerializerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializer, settings});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Populate
// Il2CppName: Populate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ::Il2CppObject*)>(&Newtonsoft::Json::JsonSerializer::Populate)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Populate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, target});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::PopulateInternal
// Il2CppName: PopulateInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ::Il2CppObject*)>(&Newtonsoft::Json::JsonSerializer::PopulateInternal)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "PopulateInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, target});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Deserialize
// Il2CppName: Deserialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ::System::Type*)>(&Newtonsoft::Json::JsonSerializer::Deserialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::DeserializeInternal
// Il2CppName: DeserializeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ::System::Type*)>(&Newtonsoft::Json::JsonSerializer::DeserializeInternal)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "DeserializeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::SetupReader
// Il2CppName: SetupReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ByRef<::System::Globalization::CultureInfo*>, ByRef<::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling>>, ByRef<::System::Nullable_1<::Newtonsoft::Json::DateParseHandling>>, ByRef<::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling>>, ByRef<::System::Nullable_1<int>>, ByRef<::StringW>)>(&Newtonsoft::Json::JsonSerializer::SetupReader)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* previousCulture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->this_arg;
    static auto* previousDateTimeZoneHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")})->this_arg;
    static auto* previousDateParseHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateParseHandling")})->this_arg;
    static auto* previousFloatParseHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatParseHandling")})->this_arg;
    static auto* previousMaxDepth = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* previousDateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "SetupReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, previousCulture, previousDateTimeZoneHandling, previousDateParseHandling, previousFloatParseHandling, previousMaxDepth, previousDateFormatString});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::ResetReader
// Il2CppName: ResetReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonReader*, ::System::Globalization::CultureInfo*, ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling>, ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling>, ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling>, ::System::Nullable_1<int>, ::StringW)>(&Newtonsoft::Json::JsonSerializer::ResetReader)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* previousCulture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* previousDateTimeZoneHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateTimeZoneHandling")})->byval_arg;
    static auto* previousDateParseHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DateParseHandling")})->byval_arg;
    static auto* previousFloatParseHandling = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatParseHandling")})->byval_arg;
    static auto* previousMaxDepth = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* previousDateFormatString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "ResetReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, previousCulture, previousDateTimeZoneHandling, previousDateParseHandling, previousFloatParseHandling, previousMaxDepth, previousDateFormatString});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::System::Type*)>(&Newtonsoft::Json::JsonSerializer::Serialize)> {
  static const MethodInfo* get() {
    static auto* jsonWriter = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonWriter, value, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*)>(&Newtonsoft::Json::JsonSerializer::Serialize)> {
  static const MethodInfo* get() {
    static auto* jsonWriter = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonWriter, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::SerializeInternal
// Il2CppName: SerializeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::System::Type*)>(&Newtonsoft::Json::JsonSerializer::SerializeInternal)> {
  static const MethodInfo* get() {
    static auto* jsonWriter = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "SerializeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonWriter, value, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::GetReferenceResolver
// Il2CppName: GetReferenceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::IReferenceResolver* (Newtonsoft::Json::JsonSerializer::*)()>(&Newtonsoft::Json::JsonSerializer::GetReferenceResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "GetReferenceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::GetMatchingConverter
// Il2CppName: GetMatchingConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonConverter* (Newtonsoft::Json::JsonSerializer::*)(::System::Type*)>(&Newtonsoft::Json::JsonSerializer::GetMatchingConverter)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "GetMatchingConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::GetMatchingConverter
// Il2CppName: GetMatchingConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonConverter* (*)(::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>*, ::System::Type*)>(&Newtonsoft::Json::JsonSerializer::GetMatchingConverter)> {
  static const MethodInfo* get() {
    static auto* converters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonConverter")})->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "GetMatchingConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{converters, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializer::OnError
// Il2CppName: OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializer::*)(::Newtonsoft::Json::Serialization::ErrorEventArgs*)>(&Newtonsoft::Json::JsonSerializer::OnError)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "ErrorEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializer*), "OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
