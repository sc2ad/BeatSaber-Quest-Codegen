// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Newtonsoft.Json.Formatting
#include "Newtonsoft/Json/Formatting.hpp"
// Including type: Newtonsoft.Json.DateFormatHandling
#include "Newtonsoft/Json/DateFormatHandling.hpp"
// Including type: Newtonsoft.Json.DateTimeZoneHandling
#include "Newtonsoft/Json/DateTimeZoneHandling.hpp"
// Including type: Newtonsoft.Json.DateParseHandling
#include "Newtonsoft/Json/DateParseHandling.hpp"
// Including type: Newtonsoft.Json.FloatFormatHandling
#include "Newtonsoft/Json/FloatFormatHandling.hpp"
// Including type: Newtonsoft.Json.FloatParseHandling
#include "Newtonsoft/Json/FloatParseHandling.hpp"
// Including type: Newtonsoft.Json.StringEscapeHandling
#include "Newtonsoft/Json/StringEscapeHandling.hpp"
// Including type: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
#include "System/Runtime/Serialization/Formatters/FormatterAssemblyStyle.hpp"
// Including type: Newtonsoft.Json.DefaultValueHandling
#include "Newtonsoft/Json/DefaultValueHandling.hpp"
// Including type: Newtonsoft.Json.PreserveReferencesHandling
#include "Newtonsoft/Json/PreserveReferencesHandling.hpp"
// Including type: Newtonsoft.Json.NullValueHandling
#include "Newtonsoft/Json/NullValueHandling.hpp"
// Including type: Newtonsoft.Json.ObjectCreationHandling
#include "Newtonsoft/Json/ObjectCreationHandling.hpp"
// Including type: Newtonsoft.Json.MissingMemberHandling
#include "Newtonsoft/Json/MissingMemberHandling.hpp"
// Including type: Newtonsoft.Json.ReferenceLoopHandling
#include "Newtonsoft/Json/ReferenceLoopHandling.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: Newtonsoft.Json.ConstructorHandling
#include "Newtonsoft/Json/ConstructorHandling.hpp"
// Including type: Newtonsoft.Json.TypeNameHandling
#include "Newtonsoft/Json/TypeNameHandling.hpp"
// Including type: Newtonsoft.Json.MetadataPropertyHandling
#include "Newtonsoft/Json/MetadataPropertyHandling.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonConverter
  class JsonConverter;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: Newtonsoft::Json::Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: IContractResolver
  class IContractResolver;
  // Forward declaring type: IReferenceResolver
  class IReferenceResolver;
  // Forward declaring type: ITraceWriter
  class ITraceWriter;
  // Forward declaring type: ErrorEventArgs
  class ErrorEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationBinder
  class SerializationBinder;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonSerializerSettings);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonSerializerSettings*, "Newtonsoft.Json", "JsonSerializerSettings");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.JsonSerializerSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FA91C
  class JsonSerializerSettings : public ::Il2CppObject {
    public:
    // Nested type: ::Newtonsoft::Json::JsonSerializerSettings::$$c__DisplayClass90_0
    class $$c__DisplayClass90_0;
    public:
    // System.Nullable`1<Newtonsoft.Json.Formatting> _formatting
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::System::Nullable_1<::Newtonsoft::Json::Formatting> formatting;
    // System.Nullable`1<Newtonsoft.Json.DateFormatHandling> _dateFormatHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::System::Nullable_1<::Newtonsoft::Json::DateFormatHandling> dateFormatHandling;
    // System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> _dateTimeZoneHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling> dateTimeZoneHandling;
    // System.Nullable`1<Newtonsoft.Json.DateParseHandling> _dateParseHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling> dateParseHandling;
    // System.Nullable`1<Newtonsoft.Json.FloatFormatHandling> _floatFormatHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::System::Nullable_1<::Newtonsoft::Json::FloatFormatHandling> floatFormatHandling;
    // System.Nullable`1<Newtonsoft.Json.FloatParseHandling> _floatParseHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling> floatParseHandling;
    // System.Nullable`1<Newtonsoft.Json.StringEscapeHandling> _stringEscapeHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::System::Nullable_1<::Newtonsoft::Json::StringEscapeHandling> stringEscapeHandling;
    // System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0x48
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // System.Nullable`1<System.Boolean> _checkAdditionalContent
    // Size: 0xFFFFFFFF
    // Offset: 0x50
    ::System::Nullable_1<bool> checkAdditionalContent;
    // System.Nullable`1<System.Int32> _maxDepth
    // Size: 0xFFFFFFFF
    // Offset: 0x54
    ::System::Nullable_1<int> maxDepth;
    // System.Boolean _maxDepthSet
    // Size: 0x1
    // Offset: 0x5C
    bool maxDepthSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.String _dateFormatString
    // Size: 0x8
    // Offset: 0x60
    ::StringW dateFormatString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Boolean _dateFormatStringSet
    // Size: 0x1
    // Offset: 0x68
    bool dateFormatStringSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Nullable`1<System.Runtime.Serialization.Formatters.FormatterAssemblyStyle> _typeNameAssemblyFormat
    // Size: 0xFFFFFFFF
    // Offset: 0x6C
    ::System::Nullable_1<::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle> typeNameAssemblyFormat;
    // System.Nullable`1<Newtonsoft.Json.DefaultValueHandling> _defaultValueHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x74
    ::System::Nullable_1<::Newtonsoft::Json::DefaultValueHandling> defaultValueHandling;
    // System.Nullable`1<Newtonsoft.Json.PreserveReferencesHandling> _preserveReferencesHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x7C
    ::System::Nullable_1<::Newtonsoft::Json::PreserveReferencesHandling> preserveReferencesHandling;
    // System.Nullable`1<Newtonsoft.Json.NullValueHandling> _nullValueHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x84
    ::System::Nullable_1<::Newtonsoft::Json::NullValueHandling> nullValueHandling;
    // System.Nullable`1<Newtonsoft.Json.ObjectCreationHandling> _objectCreationHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x8C
    ::System::Nullable_1<::Newtonsoft::Json::ObjectCreationHandling> objectCreationHandling;
    // System.Nullable`1<Newtonsoft.Json.MissingMemberHandling> _missingMemberHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x94
    ::System::Nullable_1<::Newtonsoft::Json::MissingMemberHandling> missingMemberHandling;
    // System.Nullable`1<Newtonsoft.Json.ReferenceLoopHandling> _referenceLoopHandling
    // Size: 0xFFFFFFFF
    // Offset: 0x9C
    ::System::Nullable_1<::Newtonsoft::Json::ReferenceLoopHandling> referenceLoopHandling;
    // System.Nullable`1<System.Runtime.Serialization.StreamingContext> _context
    // Size: 0xFFFFFFFF
    // Offset: 0xA8
    ::System::Nullable_1<::System::Runtime::Serialization::StreamingContext> context;
    // System.Nullable`1<Newtonsoft.Json.ConstructorHandling> _constructorHandling
    // Size: 0xFFFFFFFF
    // Offset: 0xC0
    ::System::Nullable_1<::Newtonsoft::Json::ConstructorHandling> constructorHandling;
    // System.Nullable`1<Newtonsoft.Json.TypeNameHandling> _typeNameHandling
    // Size: 0xFFFFFFFF
    // Offset: 0xC8
    ::System::Nullable_1<::Newtonsoft::Json::TypeNameHandling> typeNameHandling;
    // System.Nullable`1<Newtonsoft.Json.MetadataPropertyHandling> _metadataPropertyHandling
    // Size: 0xFFFFFFFF
    // Offset: 0xD0
    ::System::Nullable_1<::Newtonsoft::Json::MetadataPropertyHandling> metadataPropertyHandling;
    // private System.Collections.Generic.IList`1<Newtonsoft.Json.JsonConverter> <Converters>k__BackingField
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>* Converters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>*) == 0x8);
    // private Newtonsoft.Json.Serialization.IContractResolver <ContractResolver>k__BackingField
    // Size: 0x8
    // Offset: 0xE0
    ::Newtonsoft::Json::Serialization::IContractResolver* ContractResolver;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::IContractResolver*) == 0x8);
    // private System.Collections.IEqualityComparer <EqualityComparer>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::IEqualityComparer* EqualityComparer;
    // Field size check
    static_assert(sizeof(::System::Collections::IEqualityComparer*) == 0x8);
    // private System.Func`1<Newtonsoft.Json.Serialization.IReferenceResolver> <ReferenceResolverProvider>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::System::Func_1<::Newtonsoft::Json::Serialization::IReferenceResolver*>* ReferenceResolverProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<::Newtonsoft::Json::Serialization::IReferenceResolver*>*) == 0x8);
    // private Newtonsoft.Json.Serialization.ITraceWriter <TraceWriter>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::Newtonsoft::Json::Serialization::ITraceWriter* TraceWriter;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::ITraceWriter*) == 0x8);
    // private System.Runtime.Serialization.SerializationBinder <Binder>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::System::Runtime::Serialization::SerializationBinder* Binder;
    // Field size check
    static_assert(sizeof(::System::Runtime::Serialization::SerializationBinder*) == 0x8);
    // private System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* Error;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*) == 0x8);
    public:
    // Get static field: static readonly System.Runtime.Serialization.StreamingContext DefaultContext
    static ::System::Runtime::Serialization::StreamingContext _get_DefaultContext();
    // Set static field: static readonly System.Runtime.Serialization.StreamingContext DefaultContext
    static void _set_DefaultContext(::System::Runtime::Serialization::StreamingContext value);
    // Get static field: static readonly System.Globalization.CultureInfo DefaultCulture
    static ::System::Globalization::CultureInfo* _get_DefaultCulture();
    // Set static field: static readonly System.Globalization.CultureInfo DefaultCulture
    static void _set_DefaultCulture(::System::Globalization::CultureInfo* value);
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.Formatting> _formatting
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::Formatting>& dyn__formatting();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.DateFormatHandling> _dateFormatHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateFormatHandling>& dyn__dateFormatHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.DateTimeZoneHandling> _dateTimeZoneHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateTimeZoneHandling>& dyn__dateTimeZoneHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.DateParseHandling> _dateParseHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DateParseHandling>& dyn__dateParseHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.FloatFormatHandling> _floatFormatHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::FloatFormatHandling>& dyn__floatFormatHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.FloatParseHandling> _floatParseHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::FloatParseHandling>& dyn__floatParseHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.StringEscapeHandling> _stringEscapeHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::StringEscapeHandling>& dyn__stringEscapeHandling();
    // Get instance field reference: System.Globalization.CultureInfo _culture
    [[deprecated("Use field access instead!")]] ::System::Globalization::CultureInfo*& dyn__culture();
    // Get instance field reference: System.Nullable`1<System.Boolean> _checkAdditionalContent
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__checkAdditionalContent();
    // Get instance field reference: System.Nullable`1<System.Int32> _maxDepth
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn__maxDepth();
    // Get instance field reference: System.Boolean _maxDepthSet
    [[deprecated("Use field access instead!")]] bool& dyn__maxDepthSet();
    // Get instance field reference: System.String _dateFormatString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__dateFormatString();
    // Get instance field reference: System.Boolean _dateFormatStringSet
    [[deprecated("Use field access instead!")]] bool& dyn__dateFormatStringSet();
    // Get instance field reference: System.Nullable`1<System.Runtime.Serialization.Formatters.FormatterAssemblyStyle> _typeNameAssemblyFormat
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle>& dyn__typeNameAssemblyFormat();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.DefaultValueHandling> _defaultValueHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::DefaultValueHandling>& dyn__defaultValueHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.PreserveReferencesHandling> _preserveReferencesHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::PreserveReferencesHandling>& dyn__preserveReferencesHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.NullValueHandling> _nullValueHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::NullValueHandling>& dyn__nullValueHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.ObjectCreationHandling> _objectCreationHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::ObjectCreationHandling>& dyn__objectCreationHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.MissingMemberHandling> _missingMemberHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::MissingMemberHandling>& dyn__missingMemberHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.ReferenceLoopHandling> _referenceLoopHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::ReferenceLoopHandling>& dyn__referenceLoopHandling();
    // Get instance field reference: System.Nullable`1<System.Runtime.Serialization.StreamingContext> _context
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::Runtime::Serialization::StreamingContext>& dyn__context();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.ConstructorHandling> _constructorHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::ConstructorHandling>& dyn__constructorHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.TypeNameHandling> _typeNameHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::TypeNameHandling>& dyn__typeNameHandling();
    // Get instance field reference: System.Nullable`1<Newtonsoft.Json.MetadataPropertyHandling> _metadataPropertyHandling
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Newtonsoft::Json::MetadataPropertyHandling>& dyn__metadataPropertyHandling();
    // Get instance field reference: private System.Collections.Generic.IList`1<Newtonsoft.Json.JsonConverter> <Converters>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>*& dyn_$Converters$k__BackingField();
    // Get instance field reference: private Newtonsoft.Json.Serialization.IContractResolver <ContractResolver>k__BackingField
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::IContractResolver*& dyn_$ContractResolver$k__BackingField();
    // Get instance field reference: private System.Collections.IEqualityComparer <EqualityComparer>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::IEqualityComparer*& dyn_$EqualityComparer$k__BackingField();
    // Get instance field reference: private System.Func`1<Newtonsoft.Json.Serialization.IReferenceResolver> <ReferenceResolverProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_1<::Newtonsoft::Json::Serialization::IReferenceResolver*>*& dyn_$ReferenceResolverProvider$k__BackingField();
    // Get instance field reference: private Newtonsoft.Json.Serialization.ITraceWriter <TraceWriter>k__BackingField
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::ITraceWriter*& dyn_$TraceWriter$k__BackingField();
    // Get instance field reference: private System.Runtime.Serialization.SerializationBinder <Binder>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Runtime::Serialization::SerializationBinder*& dyn_$Binder$k__BackingField();
    // Get instance field reference: private System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>*& dyn_$Error$k__BackingField();
    // public Newtonsoft.Json.ReferenceLoopHandling get_ReferenceLoopHandling()
    // Offset: 0x181823C
    ::Newtonsoft::Json::ReferenceLoopHandling get_ReferenceLoopHandling();
    // public Newtonsoft.Json.MissingMemberHandling get_MissingMemberHandling()
    // Offset: 0x1818288
    ::Newtonsoft::Json::MissingMemberHandling get_MissingMemberHandling();
    // public Newtonsoft.Json.ObjectCreationHandling get_ObjectCreationHandling()
    // Offset: 0x18182D4
    ::Newtonsoft::Json::ObjectCreationHandling get_ObjectCreationHandling();
    // public Newtonsoft.Json.NullValueHandling get_NullValueHandling()
    // Offset: 0x1818320
    ::Newtonsoft::Json::NullValueHandling get_NullValueHandling();
    // public Newtonsoft.Json.DefaultValueHandling get_DefaultValueHandling()
    // Offset: 0x181836C
    ::Newtonsoft::Json::DefaultValueHandling get_DefaultValueHandling();
    // public System.Collections.Generic.IList`1<Newtonsoft.Json.JsonConverter> get_Converters()
    // Offset: 0x1819528
    ::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>* get_Converters();
    // public System.Void set_Converters(System.Collections.Generic.IList`1<Newtonsoft.Json.JsonConverter> value)
    // Offset: 0x1819530
    void set_Converters(::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>* value);
    // public Newtonsoft.Json.PreserveReferencesHandling get_PreserveReferencesHandling()
    // Offset: 0x18181F0
    ::Newtonsoft::Json::PreserveReferencesHandling get_PreserveReferencesHandling();
    // public Newtonsoft.Json.TypeNameHandling get_TypeNameHandling()
    // Offset: 0x181810C
    ::Newtonsoft::Json::TypeNameHandling get_TypeNameHandling();
    // public Newtonsoft.Json.MetadataPropertyHandling get_MetadataPropertyHandling()
    // Offset: 0x1818158
    ::Newtonsoft::Json::MetadataPropertyHandling get_MetadataPropertyHandling();
    // public System.Runtime.Serialization.Formatters.FormatterAssemblyStyle get_TypeNameAssemblyFormat()
    // Offset: 0x18181A4
    ::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    // public Newtonsoft.Json.ConstructorHandling get_ConstructorHandling()
    // Offset: 0x18183B8
    ::Newtonsoft::Json::ConstructorHandling get_ConstructorHandling();
    // public Newtonsoft.Json.Serialization.IContractResolver get_ContractResolver()
    // Offset: 0x1819538
    ::Newtonsoft::Json::Serialization::IContractResolver* get_ContractResolver();
    // public System.Collections.IEqualityComparer get_EqualityComparer()
    // Offset: 0x1819540
    ::System::Collections::IEqualityComparer* get_EqualityComparer();
    // public System.Func`1<Newtonsoft.Json.Serialization.IReferenceResolver> get_ReferenceResolverProvider()
    // Offset: 0x1819548
    ::System::Func_1<::Newtonsoft::Json::Serialization::IReferenceResolver*>* get_ReferenceResolverProvider();
    // public Newtonsoft.Json.Serialization.ITraceWriter get_TraceWriter()
    // Offset: 0x1819550
    ::Newtonsoft::Json::Serialization::ITraceWriter* get_TraceWriter();
    // public System.Runtime.Serialization.SerializationBinder get_Binder()
    // Offset: 0x1819558
    ::System::Runtime::Serialization::SerializationBinder* get_Binder();
    // public System.EventHandler`1<Newtonsoft.Json.Serialization.ErrorEventArgs> get_Error()
    // Offset: 0x1819560
    ::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* get_Error();
    // public System.Runtime.Serialization.StreamingContext get_Context()
    // Offset: 0x1818404
    ::System::Runtime::Serialization::StreamingContext get_Context();
    // static private System.Void .cctor()
    // Offset: 0x1819568
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x18111E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonSerializerSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonSerializerSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonSerializerSettings*, creationType>()));
    }
  }; // Newtonsoft.Json.JsonSerializerSettings
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_ReferenceLoopHandling
// Il2CppName: get_ReferenceLoopHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::ReferenceLoopHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_ReferenceLoopHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_ReferenceLoopHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_MissingMemberHandling
// Il2CppName: get_MissingMemberHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::MissingMemberHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_MissingMemberHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_MissingMemberHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_ObjectCreationHandling
// Il2CppName: get_ObjectCreationHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::ObjectCreationHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_ObjectCreationHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_ObjectCreationHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_NullValueHandling
// Il2CppName: get_NullValueHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::NullValueHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_NullValueHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_NullValueHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_DefaultValueHandling
// Il2CppName: get_DefaultValueHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::DefaultValueHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_DefaultValueHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_DefaultValueHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_Converters
// Il2CppName: get_Converters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_Converters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_Converters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::set_Converters
// Il2CppName: set_Converters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonSerializerSettings::*)(::System::Collections::Generic::IList_1<::Newtonsoft::Json::JsonConverter*>*)>(&Newtonsoft::Json::JsonSerializerSettings::set_Converters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonConverter")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "set_Converters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_PreserveReferencesHandling
// Il2CppName: get_PreserveReferencesHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::PreserveReferencesHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_PreserveReferencesHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_PreserveReferencesHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_TypeNameHandling
// Il2CppName: get_TypeNameHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::TypeNameHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_TypeNameHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_TypeNameHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_MetadataPropertyHandling
// Il2CppName: get_MetadataPropertyHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::MetadataPropertyHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_MetadataPropertyHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_MetadataPropertyHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_TypeNameAssemblyFormat
// Il2CppName: get_TypeNameAssemblyFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Serialization::Formatters::FormatterAssemblyStyle (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_TypeNameAssemblyFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_TypeNameAssemblyFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_ConstructorHandling
// Il2CppName: get_ConstructorHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::ConstructorHandling (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_ConstructorHandling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_ConstructorHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_ContractResolver
// Il2CppName: get_ContractResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::IContractResolver* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_ContractResolver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_ContractResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_EqualityComparer
// Il2CppName: get_EqualityComparer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEqualityComparer* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_EqualityComparer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_EqualityComparer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_ReferenceResolverProvider
// Il2CppName: get_ReferenceResolverProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::Newtonsoft::Json::Serialization::IReferenceResolver*>* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_ReferenceResolverProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_ReferenceResolverProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_TraceWriter
// Il2CppName: get_TraceWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::ITraceWriter* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_TraceWriter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_TraceWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_Binder
// Il2CppName: get_Binder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Serialization::SerializationBinder* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_Binder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_Binder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::EventHandler_1<::Newtonsoft::Json::Serialization::ErrorEventArgs*>* (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Serialization::StreamingContext (Newtonsoft::Json::JsonSerializerSettings::*)()>(&Newtonsoft::Json::JsonSerializerSettings::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::JsonSerializerSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonSerializerSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonSerializerSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
