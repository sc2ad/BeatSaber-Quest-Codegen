// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.JsonReader
#include "Newtonsoft/Json/JsonReader.hpp"
// Including type: Newtonsoft.Json.IJsonLineInfo
#include "Newtonsoft/Json/IJsonLineInfo.hpp"
// Including type: Newtonsoft.Json.Utilities.StringBuffer
#include "Newtonsoft/Json/Utilities/StringBuffer.hpp"
// Including type: Newtonsoft.Json.Utilities.StringReference
#include "Newtonsoft/Json/Utilities/StringReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextReader
  class TextReader;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: IArrayPool`1<T>
  template<typename T>
  class IArrayPool_1;
  // Forward declaring type: ReadType
  struct ReadType;
  // Forward declaring type: JsonReaderException
  class JsonReaderException;
}
// Forward declaring namespace: Newtonsoft::Json::Utilities
namespace Newtonsoft::Json::Utilities {
  // Forward declaring type: PropertyNameTable
  class PropertyNameTable;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Nullable`1 because it is already included!
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonTextReader
  class JsonTextReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonTextReader);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonTextReader*, "Newtonsoft.Json", "JsonTextReader");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.JsonTextReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FA96C
  class JsonTextReader : public ::Newtonsoft::Json::JsonReader/*, public ::Newtonsoft::Json::IJsonLineInfo*/ {
    public:
    public:
    // private readonly System.IO.TextReader _reader
    // Size: 0x8
    // Offset: 0x78
    ::System::IO::TextReader* reader;
    // Field size check
    static_assert(sizeof(::System::IO::TextReader*) == 0x8);
    // private System.Char[] _chars
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::Il2CppChar> chars;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 _charsUsed
    // Size: 0x4
    // Offset: 0x88
    int charsUsed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _charPos
    // Size: 0x4
    // Offset: 0x8C
    int charPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lineStartPos
    // Size: 0x4
    // Offset: 0x90
    int lineStartPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lineNumber
    // Size: 0x4
    // Offset: 0x94
    int lineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isEndOfFile
    // Size: 0x1
    // Offset: 0x98
    bool isEndOfFile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Newtonsoft.Json.Utilities.StringBuffer _stringBuffer
    // Size: 0xC
    // Offset: 0xA0
    ::Newtonsoft::Json::Utilities::StringBuffer stringBuffer;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::StringBuffer) == 0xC);
    // private Newtonsoft.Json.Utilities.StringReference _stringReference
    // Size: 0x10
    // Offset: 0xB0
    ::Newtonsoft::Json::Utilities::StringReference stringReference;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::StringReference) == 0x10);
    // private Newtonsoft.Json.IArrayPool`1<System.Char> _arrayPool
    // Size: 0x8
    // Offset: 0xC0
    ::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>* arrayPool;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*) == 0x8);
    // Newtonsoft.Json.Utilities.PropertyNameTable NameTable
    // Size: 0x8
    // Offset: 0xC8
    ::Newtonsoft::Json::Utilities::PropertyNameTable* NameTable;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Utilities::PropertyNameTable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::IJsonLineInfo
    operator ::Newtonsoft::Json::IJsonLineInfo() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::IJsonLineInfo*>(this);
    }
    // Creating interface conversion operator: i_IJsonLineInfo
    inline ::Newtonsoft::Json::IJsonLineInfo* i_IJsonLineInfo() noexcept {
      return reinterpret_cast<::Newtonsoft::Json::IJsonLineInfo*>(this);
    }
    // Get instance field reference: private readonly System.IO.TextReader _reader
    [[deprecated("Use field access instead!")]] ::System::IO::TextReader*& dyn__reader();
    // Get instance field reference: private System.Char[] _chars
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn__chars();
    // Get instance field reference: private System.Int32 _charsUsed
    [[deprecated("Use field access instead!")]] int& dyn__charsUsed();
    // Get instance field reference: private System.Int32 _charPos
    [[deprecated("Use field access instead!")]] int& dyn__charPos();
    // Get instance field reference: private System.Int32 _lineStartPos
    [[deprecated("Use field access instead!")]] int& dyn__lineStartPos();
    // Get instance field reference: private System.Int32 _lineNumber
    [[deprecated("Use field access instead!")]] int& dyn__lineNumber();
    // Get instance field reference: private System.Boolean _isEndOfFile
    [[deprecated("Use field access instead!")]] bool& dyn__isEndOfFile();
    // Get instance field reference: private Newtonsoft.Json.Utilities.StringBuffer _stringBuffer
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Utilities::StringBuffer& dyn__stringBuffer();
    // Get instance field reference: private Newtonsoft.Json.Utilities.StringReference _stringReference
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Utilities::StringReference& dyn__stringReference();
    // Get instance field reference: private Newtonsoft.Json.IArrayPool`1<System.Char> _arrayPool
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::IArrayPool_1<::Il2CppChar>*& dyn__arrayPool();
    // Get instance field reference: Newtonsoft.Json.Utilities.PropertyNameTable NameTable
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Utilities::PropertyNameTable*& dyn_NameTable();
    // public System.Int32 get_LineNumber()
    // Offset: 0x181F58C
    int get_LineNumber();
    // public System.Int32 get_LinePosition()
    // Offset: 0x181F5E0
    int get_LinePosition();
    // public System.Void .ctor(System.IO.TextReader reader)
    // Offset: 0x1812128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonTextReader* New_ctor(::System::IO::TextReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonTextReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonTextReader*, creationType>(reader)));
    }
    // private System.Void EnsureBufferNotEmpty()
    // Offset: 0x18195F4
    void EnsureBufferNotEmpty();
    // private System.Void OnNewLine(System.Int32 pos)
    // Offset: 0x1819648
    void OnNewLine(int pos);
    // private System.Void ParseString(System.Char quote, Newtonsoft.Json.ReadType readType)
    // Offset: 0x1819658
    void ParseString(::Il2CppChar quote, ::Newtonsoft::Json::ReadType readType);
    // static private System.Void BlockCopyChars(System.Char[] src, System.Int32 srcOffset, System.Char[] dst, System.Int32 dstOffset, System.Int32 count)
    // Offset: 0x1819F90
    static void BlockCopyChars(::ArrayW<::Il2CppChar> src, int srcOffset, ::ArrayW<::Il2CppChar> dst, int dstOffset, int count);
    // private System.Void ShiftBufferIfNeeded()
    // Offset: 0x1819A14
    void ShiftBufferIfNeeded();
    // private System.Int32 ReadData(System.Boolean append)
    // Offset: 0x1819FA4
    int ReadData(bool append);
    // private System.Int32 ReadData(System.Boolean append, System.Int32 charsRequired)
    // Offset: 0x1819FB0
    int ReadData(bool append, int charsRequired);
    // private System.Boolean EnsureChars(System.Int32 relativePosition, System.Boolean append)
    // Offset: 0x181A1DC
    bool EnsureChars(int relativePosition, bool append);
    // private System.Boolean ReadChars(System.Int32 relativePosition, System.Boolean append)
    // Offset: 0x181A1FC
    bool ReadChars(int relativePosition, bool append);
    // private System.Object ReadStringValue(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181B798
    ::Il2CppObject* ReadStringValue(::Newtonsoft::Json::ReadType readType);
    // private Newtonsoft.Json.JsonReaderException CreateUnexpectedCharacterException(System.Char c)
    // Offset: 0x181C570
    ::Newtonsoft::Json::JsonReaderException* CreateUnexpectedCharacterException(::Il2CppChar c);
    // private System.Void ProcessValueComma()
    // Offset: 0x181C4EC
    void ProcessValueComma();
    // private System.Object ReadNumberValue(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181B24C
    ::Il2CppObject* ReadNumberValue(::Newtonsoft::Json::ReadType readType);
    // private System.Void HandleNull()
    // Offset: 0x181C3F0
    void HandleNull();
    // private System.Void ReadFinished()
    // Offset: 0x181C6E0
    void ReadFinished();
    // private System.Boolean ReadNullChar()
    // Offset: 0x181C394
    bool ReadNullChar();
    // private System.Void EnsureBuffer()
    // Offset: 0x181A4DC
    void EnsureBuffer();
    // private System.Void ReadStringIntoBuffer(System.Char quote)
    // Offset: 0x1819AC8
    void ReadStringIntoBuffer(::Il2CppChar quote);
    // private System.Void WriteCharToBuffer(System.Char writeChar, System.Int32 lastWritePosition, System.Int32 writeToPosition)
    // Offset: 0x181E550
    void WriteCharToBuffer(::Il2CppChar writeChar, int lastWritePosition, int writeToPosition);
    // private System.Char ParseUnicode()
    // Offset: 0x181E444
    ::Il2CppChar ParseUnicode();
    // private System.Void ReadNumberIntoBuffer()
    // Offset: 0x181E5B0
    void ReadNumberIntoBuffer();
    // private System.Void ClearRecentString()
    // Offset: 0x181E79C
    void ClearRecentString();
    // private System.Boolean ParsePostValue()
    // Offset: 0x181AB10
    bool ParsePostValue();
    // private System.Boolean ParseObject()
    // Offset: 0x181A960
    bool ParseObject();
    // private System.Boolean ParseProperty()
    // Offset: 0x181E7A8
    bool ParseProperty();
    // private System.Boolean ValidIdentifierChar(System.Char value)
    // Offset: 0x181EA1C
    bool ValidIdentifierChar(::Il2CppChar value);
    // private System.Void ParseUnquotedProperty()
    // Offset: 0x181EAAC
    void ParseUnquotedProperty();
    // private System.Boolean ParseValue()
    // Offset: 0x181A534
    bool ParseValue();
    // private System.Void ProcessLineFeed()
    // Offset: 0x181C6C4
    void ProcessLineFeed();
    // private System.Void ProcessCarriageReturn(System.Boolean append)
    // Offset: 0x181C630
    void ProcessCarriageReturn(bool append);
    // private System.Boolean EatWhitespace(System.Boolean oneOrMore)
    // Offset: 0x181AD9C
    bool EatWhitespace(bool oneOrMore);
    // private System.Void ParseConstructor()
    // Offset: 0x181EE14
    void ParseConstructor();
    // private System.Void ParseNumber(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181C9D0
    void ParseNumber(::Newtonsoft::Json::ReadType readType);
    // private System.Void ParseComment(System.Boolean setToken)
    // Offset: 0x181AEEC
    void ParseComment(bool setToken);
    // private System.Void EndComment(System.Boolean setToken, System.Int32 initialPosition, System.Int32 endPosition)
    // Offset: 0x181F208
    void EndComment(bool setToken, int initialPosition, int endPosition);
    // private System.Boolean MatchValue(System.String value)
    // Offset: 0x181F278
    bool MatchValue(::StringW value);
    // private System.Boolean MatchValueWithTrailingSeparator(System.String value)
    // Offset: 0x181D95C
    bool MatchValueWithTrailingSeparator(::StringW value);
    // private System.Boolean IsSeparator(System.Char c)
    // Offset: 0x181F3A0
    bool IsSeparator(::Il2CppChar c);
    // private System.Void ParseTrue()
    // Offset: 0x181EC70
    void ParseTrue();
    // private System.Void ParseNull()
    // Offset: 0x181E398
    void ParseNull();
    // private System.Void ParseUndefined()
    // Offset: 0x181F15C
    void ParseUndefined();
    // private System.Void ParseFalse()
    // Offset: 0x181ED44
    void ParseFalse();
    // private System.Object ParseNumberNegativeInfinity(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181C874
    ::Il2CppObject* ParseNumberNegativeInfinity(::Newtonsoft::Json::ReadType readType);
    // private System.Object ParseNumberPositiveInfinity(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181DA14
    ::Il2CppObject* ParseNumberPositiveInfinity(::Newtonsoft::Json::ReadType readType);
    // private System.Object ParseNumberNaN(Newtonsoft.Json.ReadType readType)
    // Offset: 0x181DB70
    ::Il2CppObject* ParseNumberNaN(::Newtonsoft::Json::ReadType readType);
    // public System.Boolean HasLineInfo()
    // Offset: 0x181F584
    bool HasLineInfo();
    // public override System.Boolean Read()
    // Offset: 0x181A270
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Boolean JsonReader::Read()
    bool Read();
    // public override System.Nullable`1<System.Int32> ReadAsInt32()
    // Offset: 0x181B1C0
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.Int32> JsonReader::ReadAsInt32()
    ::System::Nullable_1<int> ReadAsInt32();
    // public override System.Nullable`1<System.DateTime> ReadAsDateTime()
    // Offset: 0x181B70C
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.DateTime> JsonReader::ReadAsDateTime()
    ::System::Nullable_1<::System::DateTime> ReadAsDateTime();
    // public override System.String ReadAsString()
    // Offset: 0x181BE80
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.String JsonReader::ReadAsString()
    ::StringW ReadAsString();
    // public override System.Byte[] ReadAsBytes()
    // Offset: 0x181BEEC
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Byte[] JsonReader::ReadAsBytes()
    ::ArrayW<uint8_t> ReadAsBytes();
    // public override System.Nullable`1<System.Boolean> ReadAsBoolean()
    // Offset: 0x181DCCC
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.Boolean> JsonReader::ReadAsBoolean()
    ::System::Nullable_1<bool> ReadAsBoolean();
    // public override System.Nullable`1<System.DateTimeOffset> ReadAsDateTimeOffset()
    // Offset: 0x181E1C4
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.DateTimeOffset> JsonReader::ReadAsDateTimeOffset()
    ::System::Nullable_1<::System::DateTimeOffset> ReadAsDateTimeOffset();
    // public override System.Nullable`1<System.Decimal> ReadAsDecimal()
    // Offset: 0x181E268
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.Decimal> JsonReader::ReadAsDecimal()
    ::System::Nullable_1<::System::Decimal> ReadAsDecimal();
    // public override System.Nullable`1<System.Double> ReadAsDouble()
    // Offset: 0x181E30C
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Nullable`1<System.Double> JsonReader::ReadAsDouble()
    ::System::Nullable_1<double> ReadAsDouble();
    // public override System.Void Close()
    // Offset: 0x181F518
    // Implemented from: Newtonsoft.Json.JsonReader
    // Base method: System.Void JsonReader::Close()
    void Close();
  }; // Newtonsoft.Json.JsonTextReader
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::get_LineNumber
// Il2CppName: get_LineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::get_LineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "get_LineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::get_LinePosition
// Il2CppName: get_LinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::get_LinePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "get_LinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::EnsureBufferNotEmpty
// Il2CppName: EnsureBufferNotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::EnsureBufferNotEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "EnsureBufferNotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::OnNewLine
// Il2CppName: OnNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(int)>(&Newtonsoft::Json::JsonTextReader::OnNewLine)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "OnNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseString
// Il2CppName: ParseString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar, ::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ParseString)> {
  static const MethodInfo* get() {
    static auto* quote = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quote, readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::BlockCopyChars
// Il2CppName: BlockCopyChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Il2CppChar>, int, ::ArrayW<::Il2CppChar>, int, int)>(&Newtonsoft::Json::JsonTextReader::BlockCopyChars)> {
  static const MethodInfo* get() {
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dst = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* dstOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "BlockCopyChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, srcOffset, dst, dstOffset, count});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ShiftBufferIfNeeded
// Il2CppName: ShiftBufferIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ShiftBufferIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ShiftBufferIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadData
// Il2CppName: ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonTextReader::*)(bool)>(&Newtonsoft::Json::JsonTextReader::ReadData)> {
  static const MethodInfo* get() {
    static auto* append = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{append});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadData
// Il2CppName: ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Newtonsoft::Json::JsonTextReader::*)(bool, int)>(&Newtonsoft::Json::JsonTextReader::ReadData)> {
  static const MethodInfo* get() {
    static auto* append = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* charsRequired = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{append, charsRequired});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::EnsureChars
// Il2CppName: EnsureChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(int, bool)>(&Newtonsoft::Json::JsonTextReader::EnsureChars)> {
  static const MethodInfo* get() {
    static auto* relativePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* append = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "EnsureChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativePosition, append});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadChars
// Il2CppName: ReadChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(int, bool)>(&Newtonsoft::Json::JsonTextReader::ReadChars)> {
  static const MethodInfo* get() {
    static auto* relativePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* append = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativePosition, append});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadStringValue
// Il2CppName: ReadStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ReadStringValue)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::CreateUnexpectedCharacterException
// Il2CppName: CreateUnexpectedCharacterException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonReaderException* (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonTextReader::CreateUnexpectedCharacterException)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "CreateUnexpectedCharacterException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ProcessValueComma
// Il2CppName: ProcessValueComma
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ProcessValueComma)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ProcessValueComma", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadNumberValue
// Il2CppName: ReadNumberValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ReadNumberValue)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadNumberValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::HandleNull
// Il2CppName: HandleNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::HandleNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "HandleNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadFinished
// Il2CppName: ReadFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadNullChar
// Il2CppName: ReadNullChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadNullChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadNullChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::EnsureBuffer
// Il2CppName: EnsureBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::EnsureBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "EnsureBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadStringIntoBuffer
// Il2CppName: ReadStringIntoBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonTextReader::ReadStringIntoBuffer)> {
  static const MethodInfo* get() {
    static auto* quote = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadStringIntoBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{quote});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::WriteCharToBuffer
// Il2CppName: WriteCharToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar, int, int)>(&Newtonsoft::Json::JsonTextReader::WriteCharToBuffer)> {
  static const MethodInfo* get() {
    static auto* writeChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* lastWritePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* writeToPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "WriteCharToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writeChar, lastWritePosition, writeToPosition});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseUnicode
// Il2CppName: ParseUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseUnicode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadNumberIntoBuffer
// Il2CppName: ReadNumberIntoBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadNumberIntoBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadNumberIntoBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ClearRecentString
// Il2CppName: ClearRecentString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ClearRecentString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ClearRecentString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParsePostValue
// Il2CppName: ParsePostValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParsePostValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParsePostValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseObject
// Il2CppName: ParseObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseProperty
// Il2CppName: ParseProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ValidIdentifierChar
// Il2CppName: ValidIdentifierChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonTextReader::ValidIdentifierChar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ValidIdentifierChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseUnquotedProperty
// Il2CppName: ParseUnquotedProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseUnquotedProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseUnquotedProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseValue
// Il2CppName: ParseValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ProcessLineFeed
// Il2CppName: ProcessLineFeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ProcessLineFeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ProcessLineFeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ProcessCarriageReturn
// Il2CppName: ProcessCarriageReturn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(bool)>(&Newtonsoft::Json::JsonTextReader::ProcessCarriageReturn)> {
  static const MethodInfo* get() {
    static auto* append = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ProcessCarriageReturn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{append});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::EatWhitespace
// Il2CppName: EatWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(bool)>(&Newtonsoft::Json::JsonTextReader::EatWhitespace)> {
  static const MethodInfo* get() {
    static auto* oneOrMore = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "EatWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oneOrMore});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseConstructor
// Il2CppName: ParseConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseConstructor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseNumber
// Il2CppName: ParseNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ParseNumber)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseComment
// Il2CppName: ParseComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(bool)>(&Newtonsoft::Json::JsonTextReader::ParseComment)> {
  static const MethodInfo* get() {
    static auto* setToken = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setToken});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::EndComment
// Il2CppName: EndComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)(bool, int, int)>(&Newtonsoft::Json::JsonTextReader::EndComment)> {
  static const MethodInfo* get() {
    static auto* setToken = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* initialPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "EndComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setToken, initialPosition, endPosition});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::MatchValue
// Il2CppName: MatchValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(::StringW)>(&Newtonsoft::Json::JsonTextReader::MatchValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "MatchValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::MatchValueWithTrailingSeparator
// Il2CppName: MatchValueWithTrailingSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(::StringW)>(&Newtonsoft::Json::JsonTextReader::MatchValueWithTrailingSeparator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "MatchValueWithTrailingSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::IsSeparator
// Il2CppName: IsSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)(::Il2CppChar)>(&Newtonsoft::Json::JsonTextReader::IsSeparator)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "IsSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseTrue
// Il2CppName: ParseTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseTrue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseNull
// Il2CppName: ParseNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseUndefined
// Il2CppName: ParseUndefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseUndefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseUndefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseFalse
// Il2CppName: ParseFalse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ParseFalse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseFalse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseNumberNegativeInfinity
// Il2CppName: ParseNumberNegativeInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ParseNumberNegativeInfinity)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseNumberNegativeInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseNumberPositiveInfinity
// Il2CppName: ParseNumberPositiveInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ParseNumberPositiveInfinity)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseNumberPositiveInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ParseNumberNaN
// Il2CppName: ParseNumberNaN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::JsonTextReader::*)(::Newtonsoft::Json::ReadType)>(&Newtonsoft::Json::JsonTextReader::ParseNumberNaN)> {
  static const MethodInfo* get() {
    static auto* readType = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "ReadType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ParseNumberNaN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::HasLineInfo
// Il2CppName: HasLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::HasLineInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "HasLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsInt32
// Il2CppName: ReadAsInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsInt32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsDateTime
// Il2CppName: ReadAsDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTime> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsString
// Il2CppName: ReadAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsBytes
// Il2CppName: ReadAsBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsBoolean
// Il2CppName: ReadAsBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<bool> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsDateTimeOffset
// Il2CppName: ReadAsDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::DateTimeOffset> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsDateTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsDecimal
// Il2CppName: ReadAsDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::System::Decimal> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::ReadAsDouble
// Il2CppName: ReadAsDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<double> (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::ReadAsDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "ReadAsDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonTextReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonTextReader::*)()>(&Newtonsoft::Json::JsonTextReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonTextReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
