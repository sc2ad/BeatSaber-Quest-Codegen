// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.XObjectWrapper
#include "Newtonsoft/Json/Converters/XObjectWrapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XAttribute
  class XAttribute;
}
// Forward declaring namespace: Newtonsoft::Json::Converters
namespace Newtonsoft::Json::Converters {
  // Skipping declaration: IXmlNode because it is already included!
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: XAttributeWrapper
  class XAttributeWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::XAttributeWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::XAttributeWrapper*, "Newtonsoft.Json.Converters", "XAttributeWrapper");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.XAttributeWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class XAttributeWrapper : public ::Newtonsoft::Json::Converters::XObjectWrapper {
    public:
    // private System.Xml.Linq.XAttribute get_Attribute()
    // Offset: 0x17BEED4
    ::System::Xml::Linq::XAttribute* get_Attribute();
    // public System.Void .ctor(System.Xml.Linq.XAttribute attribute)
    // Offset: 0x17BEF54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XAttributeWrapper* New_ctor(::System::Xml::Linq::XAttribute* attribute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::XAttributeWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XAttributeWrapper*, creationType>(attribute)));
    }
    // public override System.String get_Value()
    // Offset: 0x17BEFFC
    // Implemented from: Newtonsoft.Json.Converters.XObjectWrapper
    // Base method: System.String XObjectWrapper::get_Value()
    ::StringW get_Value();
    // public override System.String get_LocalName()
    // Offset: 0x17BF01C
    // Implemented from: Newtonsoft.Json.Converters.XObjectWrapper
    // Base method: System.String XObjectWrapper::get_LocalName()
    ::StringW get_LocalName();
    // public override System.String get_NamespaceUri()
    // Offset: 0x17BF044
    // Implemented from: Newtonsoft.Json.Converters.XObjectWrapper
    // Base method: System.String XObjectWrapper::get_NamespaceUri()
    ::StringW get_NamespaceUri();
    // public override Newtonsoft.Json.Converters.IXmlNode get_ParentNode()
    // Offset: 0x17BF06C
    // Implemented from: Newtonsoft.Json.Converters.XObjectWrapper
    // Base method: Newtonsoft.Json.Converters.IXmlNode XObjectWrapper::get_ParentNode()
    ::Newtonsoft::Json::Converters::IXmlNode* get_ParentNode();
  }; // Newtonsoft.Json.Converters.XAttributeWrapper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::get_Attribute
// Il2CppName: get_Attribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Linq::XAttribute* (Newtonsoft::Json::Converters::XAttributeWrapper::*)()>(&Newtonsoft::Json::Converters::XAttributeWrapper::get_Attribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XAttributeWrapper*), "get_Attribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XAttributeWrapper::*)()>(&Newtonsoft::Json::Converters::XAttributeWrapper::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XAttributeWrapper*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XAttributeWrapper::*)()>(&Newtonsoft::Json::Converters::XAttributeWrapper::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XAttributeWrapper*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::get_NamespaceUri
// Il2CppName: get_NamespaceUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XAttributeWrapper::*)()>(&Newtonsoft::Json::Converters::XAttributeWrapper::get_NamespaceUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XAttributeWrapper*), "get_NamespaceUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XAttributeWrapper::get_ParentNode
// Il2CppName: get_ParentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XAttributeWrapper::*)()>(&Newtonsoft::Json::Converters::XAttributeWrapper::get_ParentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XAttributeWrapper*), "get_ParentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
