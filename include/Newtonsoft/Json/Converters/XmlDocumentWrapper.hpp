// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.XmlNodeWrapper
#include "Newtonsoft/Json/Converters/XmlNodeWrapper.hpp"
// Including type: Newtonsoft.Json.Converters.IXmlDocument
#include "Newtonsoft/Json/Converters/IXmlDocument.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
// Forward declaring namespace: Newtonsoft::Json::Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: IXmlElement
  class IXmlElement;
  // Skipping declaration: IXmlNode because it is already included!
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: XmlDocumentWrapper
  class XmlDocumentWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::XmlDocumentWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::XmlDocumentWrapper*, "Newtonsoft.Json.Converters", "XmlDocumentWrapper");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.XmlDocumentWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlDocumentWrapper : public ::Newtonsoft::Json::Converters::XmlNodeWrapper/*, public ::Newtonsoft::Json::Converters::IXmlDocument*/ {
    public:
    public:
    // private readonly System.Xml.XmlDocument _document
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::XmlDocument* document;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Converters::IXmlDocument
    operator ::Newtonsoft::Json::Converters::IXmlDocument() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Converters::IXmlDocument*>(this);
    }
    // Creating interface conversion operator: i_IXmlDocument
    inline ::Newtonsoft::Json::Converters::IXmlDocument* i_IXmlDocument() noexcept {
      return reinterpret_cast<::Newtonsoft::Json::Converters::IXmlDocument*>(this);
    }
    // Creating conversion operator: operator ::System::Xml::XmlDocument*
    constexpr operator ::System::Xml::XmlDocument*() const noexcept {
      return document;
    }
    // Get instance field reference: private readonly System.Xml.XmlDocument _document
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlDocument*& dyn__document();
    // public Newtonsoft.Json.Converters.IXmlElement get_DocumentElement()
    // Offset: 0x17C1E2C
    ::Newtonsoft::Json::Converters::IXmlElement* get_DocumentElement();
    // public System.Void .ctor(System.Xml.XmlDocument document)
    // Offset: 0x17C1608
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDocumentWrapper* New_ctor(::System::Xml::XmlDocument* document) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::XmlDocumentWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDocumentWrapper*, creationType>(document)));
    }
    // public Newtonsoft.Json.Converters.IXmlNode CreateComment(System.String data)
    // Offset: 0x17C1638
    ::Newtonsoft::Json::Converters::IXmlNode* CreateComment(::StringW data);
    // public Newtonsoft.Json.Converters.IXmlNode CreateTextNode(System.String text)
    // Offset: 0x17C16D0
    ::Newtonsoft::Json::Converters::IXmlNode* CreateTextNode(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateCDataSection(System.String data)
    // Offset: 0x17C1768
    ::Newtonsoft::Json::Converters::IXmlNode* CreateCDataSection(::StringW data);
    // public Newtonsoft.Json.Converters.IXmlNode CreateWhitespace(System.String text)
    // Offset: 0x17C1800
    ::Newtonsoft::Json::Converters::IXmlNode* CreateWhitespace(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateSignificantWhitespace(System.String text)
    // Offset: 0x17C1898
    ::Newtonsoft::Json::Converters::IXmlNode* CreateSignificantWhitespace(::StringW text);
    // public Newtonsoft.Json.Converters.IXmlNode CreateXmlDeclaration(System.String version, System.String encoding, System.String standalone)
    // Offset: 0x17C1930
    ::Newtonsoft::Json::Converters::IXmlNode* CreateXmlDeclaration(::StringW version, ::StringW encoding, ::StringW standalone);
    // public Newtonsoft.Json.Converters.IXmlNode CreateXmlDocumentType(System.String name, System.String publicId, System.String systemId, System.String internalSubset)
    // Offset: 0x17C19E4
    ::Newtonsoft::Json::Converters::IXmlNode* CreateXmlDocumentType(::StringW name, ::StringW publicId, ::StringW systemId, ::StringW internalSubset);
    // public Newtonsoft.Json.Converters.IXmlNode CreateProcessingInstruction(System.String target, System.String data)
    // Offset: 0x17C1A9C
    ::Newtonsoft::Json::Converters::IXmlNode* CreateProcessingInstruction(::StringW target, ::StringW data);
    // public Newtonsoft.Json.Converters.IXmlElement CreateElement(System.String elementName)
    // Offset: 0x17C1B3C
    ::Newtonsoft::Json::Converters::IXmlElement* CreateElement(::StringW elementName);
    // public Newtonsoft.Json.Converters.IXmlElement CreateElement(System.String qualifiedName, System.String namespaceUri)
    // Offset: 0x17C1C00
    ::Newtonsoft::Json::Converters::IXmlElement* CreateElement(::StringW qualifiedName, ::StringW namespaceUri);
    // public Newtonsoft.Json.Converters.IXmlNode CreateAttribute(System.String name, System.String value)
    // Offset: 0x17C1C9C
    ::Newtonsoft::Json::Converters::IXmlNode* CreateAttribute(::StringW name, ::StringW value);
    // public Newtonsoft.Json.Converters.IXmlNode CreateAttribute(System.String qualifiedName, System.String namespaceUri, System.String value)
    // Offset: 0x17C1D6C
    ::Newtonsoft::Json::Converters::IXmlNode* CreateAttribute(::StringW qualifiedName, ::StringW namespaceUri, ::StringW value);
  }; // Newtonsoft.Json.Converters.XmlDocumentWrapper
  #pragma pack(pop)
  static check_size<sizeof(XmlDocumentWrapper), 40 + sizeof(::System::Xml::XmlDocument*)> __Newtonsoft_Json_Converters_XmlDocumentWrapperSizeCheck;
  static_assert(sizeof(XmlDocumentWrapper) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::get_DocumentElement
// Il2CppName: get_DocumentElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)()>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::get_DocumentElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "get_DocumentElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateComment
// Il2CppName: CreateComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateComment)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateTextNode
// Il2CppName: CreateTextNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateTextNode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateTextNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateCDataSection
// Il2CppName: CreateCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateCDataSection)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateWhitespace
// Il2CppName: CreateWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateSignificantWhitespace
// Il2CppName: CreateSignificantWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateSignificantWhitespace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateSignificantWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateXmlDeclaration
// Il2CppName: CreateXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateXmlDeclaration)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* standalone = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, encoding, standalone});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateXmlDocumentType
// Il2CppName: CreateXmlDocumentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateXmlDocumentType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* publicId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* systemId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* internalSubset = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateXmlDocumentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, publicId, systemId, internalSubset});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateProcessingInstruction
// Il2CppName: CreateProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateProcessingInstruction)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, data});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateElement)> {
  static const MethodInfo* get() {
    static auto* elementName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateElement
// Il2CppName: CreateElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlElement* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateElement)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceUri});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Converters::IXmlNode* (Newtonsoft::Json::Converters::XmlDocumentWrapper::*)(::StringW, ::StringW, ::StringW)>(&Newtonsoft::Json::Converters::XmlDocumentWrapper::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* qualifiedName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XmlDocumentWrapper*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qualifiedName, namespaceUri, value});
  }
};
