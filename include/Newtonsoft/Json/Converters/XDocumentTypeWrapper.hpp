// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Converters.XObjectWrapper
#include "Newtonsoft/Json/Converters/XObjectWrapper.hpp"
// Including type: Newtonsoft.Json.Converters.IXmlDocumentType
#include "Newtonsoft/Json/Converters/IXmlDocumentType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Linq
namespace System::Xml::Linq {
  // Forward declaring type: XDocumentType
  class XDocumentType;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: XDocumentTypeWrapper
  class XDocumentTypeWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::XDocumentTypeWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::XDocumentTypeWrapper*, "Newtonsoft.Json.Converters", "XDocumentTypeWrapper");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.XDocumentTypeWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class XDocumentTypeWrapper : public ::Newtonsoft::Json::Converters::XObjectWrapper/*, public ::Newtonsoft::Json::Converters::IXmlDocumentType*/ {
    public:
    public:
    // private readonly System.Xml.Linq.XDocumentType _documentType
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Linq::XDocumentType* documentType;
    // Field size check
    static_assert(sizeof(::System::Xml::Linq::XDocumentType*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Converters::IXmlDocumentType
    operator ::Newtonsoft::Json::Converters::IXmlDocumentType() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Converters::IXmlDocumentType*>(this);
    }
    // Creating interface conversion operator: i_IXmlDocumentType
    inline ::Newtonsoft::Json::Converters::IXmlDocumentType* i_IXmlDocumentType() noexcept {
      return reinterpret_cast<::Newtonsoft::Json::Converters::IXmlDocumentType*>(this);
    }
    // Deleting conversion operator: operator ::System::Xml::Linq::XObject*
    constexpr operator ::System::Xml::Linq::XObject*() const noexcept = delete;
    // Get instance field reference: private readonly System.Xml.Linq.XDocumentType _documentType
    [[deprecated("Use field access instead!")]] ::System::Xml::Linq::XDocumentType*& dyn__documentType();
    // public System.String get_Name()
    // Offset: 0x17BFD4C
    ::StringW get_Name();
    // public System.String get_System()
    // Offset: 0x17BFD68
    ::StringW get_System();
    // public System.String get_Public()
    // Offset: 0x17BFD84
    ::StringW get_Public();
    // public System.String get_InternalSubset()
    // Offset: 0x17BFDA0
    ::StringW get_InternalSubset();
    // public System.Void .ctor(System.Xml.Linq.XDocumentType documentType)
    // Offset: 0x17BFB00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XDocumentTypeWrapper* New_ctor(::System::Xml::Linq::XDocumentType* documentType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::XDocumentTypeWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XDocumentTypeWrapper*, creationType>(documentType)));
    }
    // public override System.String get_LocalName()
    // Offset: 0x17BFDBC
    // Implemented from: Newtonsoft.Json.Converters.XObjectWrapper
    // Base method: System.String XObjectWrapper::get_LocalName()
    ::StringW get_LocalName();
  }; // Newtonsoft.Json.Converters.XDocumentTypeWrapper
  #pragma pack(pop)
  static check_size<sizeof(XDocumentTypeWrapper), 24 + sizeof(::System::Xml::Linq::XDocumentType*)> __Newtonsoft_Json_Converters_XDocumentTypeWrapperSizeCheck;
  static_assert(sizeof(XDocumentTypeWrapper) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XDocumentTypeWrapper::*)()>(&Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XDocumentTypeWrapper*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_System
// Il2CppName: get_System
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XDocumentTypeWrapper::*)()>(&Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_System)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XDocumentTypeWrapper*), "get_System", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_Public
// Il2CppName: get_Public
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XDocumentTypeWrapper::*)()>(&Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_Public)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XDocumentTypeWrapper*), "get_Public", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_InternalSubset
// Il2CppName: get_InternalSubset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XDocumentTypeWrapper::*)()>(&Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_InternalSubset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XDocumentTypeWrapper*), "get_InternalSubset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Converters::XDocumentTypeWrapper::*)()>(&Newtonsoft::Json::Converters::XDocumentTypeWrapper::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::XDocumentTypeWrapper*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
