// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonSerializerSettings
  class JsonSerializerSettings;
  // Forward declaring type: FloatFormatHandling
  struct FloatFormatHandling;
  // Forward declaring type: StringEscapeHandling
  struct StringEscapeHandling;
  // Forward declaring type: JsonSerializer
  class JsonSerializer;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonConvert
  class JsonConvert;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonConvert);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonConvert*, "Newtonsoft.Json", "JsonConvert");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.JsonConvert
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10B9E6C
  class JsonConvert : public ::Il2CppObject {
    public:
    // Get static field: static private System.Func`1<Newtonsoft.Json.JsonSerializerSettings> <DefaultSettings>k__BackingField
    static ::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>* _get_$DefaultSettings$k__BackingField();
    // Set static field: static private System.Func`1<Newtonsoft.Json.JsonSerializerSettings> <DefaultSettings>k__BackingField
    static void _set_$DefaultSettings$k__BackingField(::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>* value);
    // Get static field: static public readonly System.String True
    static ::StringW _get_True();
    // Set static field: static public readonly System.String True
    static void _set_True(::StringW value);
    // Get static field: static public readonly System.String False
    static ::StringW _get_False();
    // Set static field: static public readonly System.String False
    static void _set_False(::StringW value);
    // Get static field: static public readonly System.String Null
    static ::StringW _get_Null();
    // Set static field: static public readonly System.String Null
    static void _set_Null(::StringW value);
    // Get static field: static public readonly System.String Undefined
    static ::StringW _get_Undefined();
    // Set static field: static public readonly System.String Undefined
    static void _set_Undefined(::StringW value);
    // Get static field: static public readonly System.String PositiveInfinity
    static ::StringW _get_PositiveInfinity();
    // Set static field: static public readonly System.String PositiveInfinity
    static void _set_PositiveInfinity(::StringW value);
    // Get static field: static public readonly System.String NegativeInfinity
    static ::StringW _get_NegativeInfinity();
    // Set static field: static public readonly System.String NegativeInfinity
    static void _set_NegativeInfinity(::StringW value);
    // Get static field: static public readonly System.String NaN
    static ::StringW _get_NaN();
    // Set static field: static public readonly System.String NaN
    static void _set_NaN(::StringW value);
    // Get static field: static private readonly Newtonsoft.Json.JsonSerializerSettings InitialSerializerSettings
    static ::Newtonsoft::Json::JsonSerializerSettings* _get_InitialSerializerSettings();
    // Set static field: static private readonly Newtonsoft.Json.JsonSerializerSettings InitialSerializerSettings
    static void _set_InitialSerializerSettings(::Newtonsoft::Json::JsonSerializerSettings* value);
    // static public System.Func`1<Newtonsoft.Json.JsonSerializerSettings> get_DefaultSettings()
    // Offset: 0x17C96F8
    static ::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>* get_DefaultSettings();
    // static public System.Void set_DefaultSettings(System.Func`1<Newtonsoft.Json.JsonSerializerSettings> value)
    // Offset: 0x17C9760
    static void set_DefaultSettings(::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>* value);
    // static private System.Void .cctor()
    // Offset: 0x17C97CC
    static void _cctor();
    // static Newtonsoft.Json.JsonSerializerSettings GetDefaultSettings()
    // Offset: 0x17C9A98
    static ::Newtonsoft::Json::JsonSerializerSettings* GetDefaultSettings();
    // static public System.String ToString(System.Boolean value)
    // Offset: 0x17C9B00
    static ::StringW ToString(bool value);
    // static public System.String ToString(System.Char value)
    // Offset: 0x17C9B94
    static ::StringW ToString(::Il2CppChar value);
    // static System.String ToString(System.Single value, Newtonsoft.Json.FloatFormatHandling floatFormatHandling, System.Char quoteChar, System.Boolean nullable)
    // Offset: 0x17C9C94
    static ::StringW ToString(float value, ::Newtonsoft::Json::FloatFormatHandling floatFormatHandling, ::Il2CppChar quoteChar, bool nullable);
    // static private System.String EnsureFloatFormat(System.Double value, System.String text, Newtonsoft.Json.FloatFormatHandling floatFormatHandling, System.Char quoteChar, System.Boolean nullable)
    // Offset: 0x17C9EA0
    static ::StringW EnsureFloatFormat(double value, ::StringW text, ::Newtonsoft::Json::FloatFormatHandling floatFormatHandling, ::Il2CppChar quoteChar, bool nullable);
    // static System.String ToString(System.Double value, Newtonsoft.Json.FloatFormatHandling floatFormatHandling, System.Char quoteChar, System.Boolean nullable)
    // Offset: 0x17C9FE4
    static ::StringW ToString(double value, ::Newtonsoft::Json::FloatFormatHandling floatFormatHandling, ::Il2CppChar quoteChar, bool nullable);
    // static private System.String EnsureDecimalPlace(System.Double value, System.String text)
    // Offset: 0x17C9D84
    static ::StringW EnsureDecimalPlace(double value, ::StringW text);
    // static private System.String EnsureDecimalPlace(System.String text)
    // Offset: 0x17CA0D0
    static ::StringW EnsureDecimalPlace(::StringW text);
    // static public System.String ToString(System.Decimal value)
    // Offset: 0x17CA154
    static ::StringW ToString(::System::Decimal value);
    // static public System.String ToString(System.String value)
    // Offset: 0x17C9C2C
    static ::StringW ToString(::StringW value);
    // static public System.String ToString(System.String value, System.Char delimiter)
    // Offset: 0x17CA208
    static ::StringW ToString(::StringW value, ::Il2CppChar delimiter);
    // static public System.String ToString(System.String value, System.Char delimiter, Newtonsoft.Json.StringEscapeHandling stringEscapeHandling)
    // Offset: 0x17CA280
    static ::StringW ToString(::StringW value, ::Il2CppChar delimiter, ::Newtonsoft::Json::StringEscapeHandling stringEscapeHandling);
    // static public System.String SerializeObject(System.Object value)
    // Offset: 0x17CA360
    static ::StringW SerializeObject(::Il2CppObject* value);
    // static public System.String SerializeObject(System.Object value, System.Type type, Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0x17CA3CC
    static ::StringW SerializeObject(::Il2CppObject* value, ::System::Type* type, ::Newtonsoft::Json::JsonSerializerSettings* settings);
    // static private System.String SerializeObjectInternal(System.Object value, System.Type type, Newtonsoft.Json.JsonSerializer jsonSerializer)
    // Offset: 0x17CA490
    static ::StringW SerializeObjectInternal(::Il2CppObject* value, ::System::Type* type, ::Newtonsoft::Json::JsonSerializer* jsonSerializer);
    // static public T DeserializeObject(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T DeserializeObject(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonConvert::DeserializeObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json", "JsonConvert", "DeserializeObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static public T DeserializeObject(System.String value, Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T DeserializeObject(::StringW value, ::Newtonsoft::Json::JsonSerializerSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonConvert::DeserializeObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Newtonsoft.Json", "JsonConvert", "DeserializeObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(settings)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value, settings);
    }
    // static public System.Object DeserializeObject(System.String value, System.Type type, Newtonsoft.Json.JsonSerializerSettings settings)
    // Offset: 0x17CA688
    static ::Il2CppObject* DeserializeObject(::StringW value, ::System::Type* type, ::Newtonsoft::Json::JsonSerializerSettings* settings);
  }; // Newtonsoft.Json.JsonConvert
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::get_DefaultSettings
// Il2CppName: get_DefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>* (*)()>(&Newtonsoft::Json::JsonConvert::get_DefaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "get_DefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::set_DefaultSettings
// Il2CppName: set_DefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Func_1<::Newtonsoft::Json::JsonSerializerSettings*>*)>(&Newtonsoft::Json::JsonConvert::set_DefaultSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "set_DefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::JsonConvert::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::GetDefaultSettings
// Il2CppName: GetDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonSerializerSettings* (*)()>(&Newtonsoft::Json::JsonConvert::GetDefaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "GetDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(bool)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppChar)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float, ::Newtonsoft::Json::FloatFormatHandling, ::Il2CppChar, bool)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* floatFormatHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatFormatHandling")->byval_arg;
    static auto* quoteChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* nullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, floatFormatHandling, quoteChar, nullable});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::EnsureFloatFormat
// Il2CppName: EnsureFloatFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(double, ::StringW, ::Newtonsoft::Json::FloatFormatHandling, ::Il2CppChar, bool)>(&Newtonsoft::Json::JsonConvert::EnsureFloatFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* floatFormatHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatFormatHandling")->byval_arg;
    static auto* quoteChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* nullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "EnsureFloatFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, text, floatFormatHandling, quoteChar, nullable});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(double, ::Newtonsoft::Json::FloatFormatHandling, ::Il2CppChar, bool)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* floatFormatHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "FloatFormatHandling")->byval_arg;
    static auto* quoteChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* nullable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, floatFormatHandling, quoteChar, nullable});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::EnsureDecimalPlace
// Il2CppName: EnsureDecimalPlace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(double, ::StringW)>(&Newtonsoft::Json::JsonConvert::EnsureDecimalPlace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "EnsureDecimalPlace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::EnsureDecimalPlace
// Il2CppName: EnsureDecimalPlace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::JsonConvert::EnsureDecimalPlace)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "EnsureDecimalPlace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Decimal)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* delimiter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, delimiter});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::Il2CppChar, ::Newtonsoft::Json::StringEscapeHandling)>(&Newtonsoft::Json::JsonConvert::ToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* delimiter = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* stringEscapeHandling = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "StringEscapeHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, delimiter, stringEscapeHandling});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::SerializeObject
// Il2CppName: SerializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*)>(&Newtonsoft::Json::JsonConvert::SerializeObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "SerializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::SerializeObject
// Il2CppName: SerializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*, ::System::Type*, ::Newtonsoft::Json::JsonSerializerSettings*)>(&Newtonsoft::Json::JsonConvert::SerializeObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "SerializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type, settings});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::SerializeObjectInternal
// Il2CppName: SerializeObjectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Il2CppObject*, ::System::Type*, ::Newtonsoft::Json::JsonSerializer*)>(&Newtonsoft::Json::JsonConvert::SerializeObjectInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* jsonSerializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "SerializeObjectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type, jsonSerializer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::DeserializeObject
// Il2CppName: DeserializeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::DeserializeObject
// Il2CppName: DeserializeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Newtonsoft::Json::JsonConvert::DeserializeObject
// Il2CppName: DeserializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW, ::System::Type*, ::Newtonsoft::Json::JsonSerializerSettings*)>(&Newtonsoft::Json::JsonConvert::DeserializeObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializerSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonConvert*), "DeserializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type, settings});
  }
};
