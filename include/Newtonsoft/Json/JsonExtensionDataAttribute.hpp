// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonExtensionDataAttribute
  class JsonExtensionDataAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::JsonExtensionDataAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::JsonExtensionDataAttribute*, "Newtonsoft.Json", "JsonExtensionDataAttribute");
// Type namespace: Newtonsoft.Json
namespace Newtonsoft::Json {
  // Size: 0x12
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.JsonExtensionDataAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: 10FA6A4
  // [AttributeUsageAttribute] Offset: 10FA6A4
  class JsonExtensionDataAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Boolean <WriteData>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool WriteData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ReadData>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool ReadData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean <WriteData>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$WriteData$k__BackingField();
    // Get instance field reference: private System.Boolean <ReadData>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ReadData$k__BackingField();
    // public System.Boolean get_WriteData()
    // Offset: 0x18124EC
    bool get_WriteData();
    // public System.Void set_WriteData(System.Boolean value)
    // Offset: 0x18124F4
    void set_WriteData(bool value);
    // public System.Boolean get_ReadData()
    // Offset: 0x1812500
    bool get_ReadData();
    // public System.Void set_ReadData(System.Boolean value)
    // Offset: 0x1812508
    void set_ReadData(bool value);
    // public System.Void .ctor()
    // Offset: 0x1812514
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonExtensionDataAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::JsonExtensionDataAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonExtensionDataAttribute*, creationType>()));
    }
  }; // Newtonsoft.Json.JsonExtensionDataAttribute
  #pragma pack(pop)
  static check_size<sizeof(JsonExtensionDataAttribute), 17 + sizeof(bool)> __Newtonsoft_Json_JsonExtensionDataAttributeSizeCheck;
  static_assert(sizeof(JsonExtensionDataAttribute) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::JsonExtensionDataAttribute::get_WriteData
// Il2CppName: get_WriteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonExtensionDataAttribute::*)()>(&Newtonsoft::Json::JsonExtensionDataAttribute::get_WriteData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonExtensionDataAttribute*), "get_WriteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonExtensionDataAttribute::set_WriteData
// Il2CppName: set_WriteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonExtensionDataAttribute::*)(bool)>(&Newtonsoft::Json::JsonExtensionDataAttribute::set_WriteData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonExtensionDataAttribute*), "set_WriteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonExtensionDataAttribute::get_ReadData
// Il2CppName: get_ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::JsonExtensionDataAttribute::*)()>(&Newtonsoft::Json::JsonExtensionDataAttribute::get_ReadData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonExtensionDataAttribute*), "get_ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonExtensionDataAttribute::set_ReadData
// Il2CppName: set_ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::JsonExtensionDataAttribute::*)(bool)>(&Newtonsoft::Json::JsonExtensionDataAttribute::set_ReadData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::JsonExtensionDataAttribute*), "set_ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::JsonExtensionDataAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
