// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Serialization.IContractResolver
#include "Newtonsoft/Json/Serialization/IContractResolver.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: DefaultContractResolverState
  class DefaultContractResolverState;
  // Forward declaring type: JsonContract
  class JsonContract;
  // Forward declaring type: JsonObjectContract
  class JsonObjectContract;
  // Forward declaring type: JsonProperty
  class JsonProperty;
  // Forward declaring type: JsonPropertyCollection
  class JsonPropertyCollection;
  // Forward declaring type: SerializationCallback
  class SerializationCallback;
  // Forward declaring type: SerializationErrorCallback
  class SerializationErrorCallback;
  // Forward declaring type: JsonDictionaryContract
  class JsonDictionaryContract;
  // Forward declaring type: JsonArrayContract
  class JsonArrayContract;
  // Forward declaring type: JsonPrimitiveContract
  class JsonPrimitiveContract;
  // Forward declaring type: JsonLinqContract
  class JsonLinqContract;
  // Forward declaring type: JsonISerializableContract
  class JsonISerializableContract;
  // Forward declaring type: JsonStringContract
  class JsonStringContract;
  // Forward declaring type: IValueProvider
  class IValueProvider;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonConverter
  class JsonConverter;
  // Forward declaring type: MemberSerialization
  struct MemberSerialization;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: DefaultContractResolver
  class DefaultContractResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::DefaultContractResolver);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::DefaultContractResolver*, "Newtonsoft.Json.Serialization", "DefaultContractResolver");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x23
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.DefaultContractResolver
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class DefaultContractResolver : public ::Il2CppObject/*, public ::Newtonsoft::Json::Serialization::IContractResolver*/ {
    public:
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::EnumerableDictionaryWrapper_2<TEnumeratorKey, TEnumeratorValue>
    template<typename TEnumeratorKey, typename TEnumeratorValue>
    class EnumerableDictionaryWrapper_2;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c
    class $$c;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_1
    class $$c__DisplayClass34_1;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_2
    class $$c__DisplayClass34_2;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass64_0
    class $$c__DisplayClass64_0;
    // Nested type: ::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass65_0
    class $$c__DisplayClass65_0;
    public:
    // private readonly Newtonsoft.Json.Serialization.DefaultContractResolverState _instanceState
    // Size: 0x8
    // Offset: 0x10
    ::Newtonsoft::Json::Serialization::DefaultContractResolverState* instanceState;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::DefaultContractResolverState*) == 0x8);
    // private readonly System.Boolean _sharedCache
    // Size: 0x1
    // Offset: 0x18
    bool sharedCache;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sharedCache and: DefaultMembersSearchFlags
    char __padding1[0x3] = {};
    // private System.Reflection.BindingFlags <DefaultMembersSearchFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::System::Reflection::BindingFlags DefaultMembersSearchFlags;
    // Field size check
    static_assert(sizeof(::System::Reflection::BindingFlags) == 0x4);
    // private System.Boolean <SerializeCompilerGeneratedMembers>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool SerializeCompilerGeneratedMembers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IgnoreSerializableInterface>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool IgnoreSerializableInterface;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IgnoreSerializableAttribute>k__BackingField
    // Size: 0x1
    // Offset: 0x22
    bool IgnoreSerializableAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Serialization::IContractResolver
    operator ::Newtonsoft::Json::Serialization::IContractResolver() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Serialization::IContractResolver*>(this);
    }
    // Creating interface conversion operator: i_IContractResolver
    inline ::Newtonsoft::Json::Serialization::IContractResolver* i_IContractResolver() noexcept {
      return reinterpret_cast<::Newtonsoft::Json::Serialization::IContractResolver*>(this);
    }
    // Get static field: static private readonly Newtonsoft.Json.Serialization.IContractResolver _instance
    static ::Newtonsoft::Json::Serialization::IContractResolver* _get__instance();
    // Set static field: static private readonly Newtonsoft.Json.Serialization.IContractResolver _instance
    static void _set__instance(::Newtonsoft::Json::Serialization::IContractResolver* value);
    // Get static field: static private readonly Newtonsoft.Json.JsonConverter[] BuiltInConverters
    static ::ArrayW<::Newtonsoft::Json::JsonConverter*> _get_BuiltInConverters();
    // Set static field: static private readonly Newtonsoft.Json.JsonConverter[] BuiltInConverters
    static void _set_BuiltInConverters(::ArrayW<::Newtonsoft::Json::JsonConverter*> value);
    // Get static field: static private readonly System.Object TypeContractCacheLock
    static ::Il2CppObject* _get_TypeContractCacheLock();
    // Set static field: static private readonly System.Object TypeContractCacheLock
    static void _set_TypeContractCacheLock(::Il2CppObject* value);
    // Get static field: static private readonly Newtonsoft.Json.Serialization.DefaultContractResolverState _sharedState
    static ::Newtonsoft::Json::Serialization::DefaultContractResolverState* _get__sharedState();
    // Set static field: static private readonly Newtonsoft.Json.Serialization.DefaultContractResolverState _sharedState
    static void _set__sharedState(::Newtonsoft::Json::Serialization::DefaultContractResolverState* value);
    // Get instance field reference: private readonly Newtonsoft.Json.Serialization.DefaultContractResolverState _instanceState
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::DefaultContractResolverState*& dyn__instanceState();
    // Get instance field reference: private readonly System.Boolean _sharedCache
    [[deprecated("Use field access instead!")]] bool& dyn__sharedCache();
    // Get instance field reference: private System.Reflection.BindingFlags <DefaultMembersSearchFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::BindingFlags& dyn_$DefaultMembersSearchFlags$k__BackingField();
    // Get instance field reference: private System.Boolean <SerializeCompilerGeneratedMembers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SerializeCompilerGeneratedMembers$k__BackingField();
    // Get instance field reference: private System.Boolean <IgnoreSerializableInterface>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IgnoreSerializableInterface$k__BackingField();
    // Get instance field reference: private System.Boolean <IgnoreSerializableAttribute>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IgnoreSerializableAttribute$k__BackingField();
    // static Newtonsoft.Json.Serialization.IContractResolver get_Instance()
    // Offset: 0x17624E8
    static ::Newtonsoft::Json::Serialization::IContractResolver* get_Instance();
    // public System.Reflection.BindingFlags get_DefaultMembersSearchFlags()
    // Offset: 0x1762550
    ::System::Reflection::BindingFlags get_DefaultMembersSearchFlags();
    // public System.Void set_DefaultMembersSearchFlags(System.Reflection.BindingFlags value)
    // Offset: 0x1762558
    void set_DefaultMembersSearchFlags(::System::Reflection::BindingFlags value);
    // public System.Boolean get_SerializeCompilerGeneratedMembers()
    // Offset: 0x1762560
    bool get_SerializeCompilerGeneratedMembers();
    // public System.Boolean get_IgnoreSerializableInterface()
    // Offset: 0x1762568
    bool get_IgnoreSerializableInterface();
    // public System.Boolean get_IgnoreSerializableAttribute()
    // Offset: 0x1762570
    bool get_IgnoreSerializableAttribute();
    // public System.Void set_IgnoreSerializableAttribute(System.Boolean value)
    // Offset: 0x1762578
    void set_IgnoreSerializableAttribute(bool value);
    // public System.Void .ctor()
    // Offset: 0x1762584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultContractResolver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::DefaultContractResolver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultContractResolver*, creationType>()));
    }
    // public System.Void .ctor(System.Boolean shareCache)
    // Offset: 0x17624B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultContractResolver* New_ctor(bool shareCache) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::DefaultContractResolver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultContractResolver*, creationType>(shareCache)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1767A5C
    static void _cctor();
    // Newtonsoft.Json.Serialization.DefaultContractResolverState GetState()
    // Offset: 0x1762600
    ::Newtonsoft::Json::Serialization::DefaultContractResolverState* GetState();
    // public Newtonsoft.Json.Serialization.JsonContract ResolveContract(System.Type type)
    // Offset: 0x1762680
    ::Newtonsoft::Json::Serialization::JsonContract* ResolveContract(::System::Type* type);
    // protected System.Collections.Generic.List`1<System.Reflection.MemberInfo> GetSerializableMembers(System.Type objectType)
    // Offset: 0x176288C
    ::System::Collections::Generic::List_1<::System::Reflection::MemberInfo*>* GetSerializableMembers(::System::Type* objectType);
    // private System.Boolean ShouldSerializeEntityMember(System.Reflection.MemberInfo memberInfo)
    // Offset: 0x1762FC4
    bool ShouldSerializeEntityMember(::System::Reflection::MemberInfo* memberInfo);
    // protected Newtonsoft.Json.Serialization.JsonObjectContract CreateObjectContract(System.Type objectType)
    // Offset: 0x17630BC
    ::Newtonsoft::Json::Serialization::JsonObjectContract* CreateObjectContract(::System::Type* objectType);
    // private System.Reflection.MemberInfo GetExtensionDataMemberForType(System.Type type)
    // Offset: 0x1763AF0
    ::System::Reflection::MemberInfo* GetExtensionDataMemberForType(::System::Type* type);
    // static private System.Void SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract contract, System.Reflection.MemberInfo member)
    // Offset: 0x1763C9C
    static void SetExtensionDataDelegates(::Newtonsoft::Json::Serialization::JsonObjectContract* contract, ::System::Reflection::MemberInfo* member);
    // private System.Reflection.ConstructorInfo GetAttributeConstructor(System.Type objectType)
    // Offset: 0x1763528
    ::System::Reflection::ConstructorInfo* GetAttributeConstructor(::System::Type* objectType);
    // private System.Reflection.ConstructorInfo GetParameterizedConstructor(System.Type objectType)
    // Offset: 0x1763990
    ::System::Reflection::ConstructorInfo* GetParameterizedConstructor(::System::Type* objectType);
    // protected System.Collections.Generic.IList`1<Newtonsoft.Json.Serialization.JsonProperty> CreateConstructorParameters(System.Reflection.ConstructorInfo constructor, Newtonsoft.Json.Serialization.JsonPropertyCollection memberProperties)
    // Offset: 0x176443C
    ::System::Collections::Generic::IList_1<::Newtonsoft::Json::Serialization::JsonProperty*>* CreateConstructorParameters(::System::Reflection::ConstructorInfo* constructor, ::Newtonsoft::Json::Serialization::JsonPropertyCollection* memberProperties);
    // protected Newtonsoft.Json.Serialization.JsonProperty CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty matchingMemberProperty, System.Reflection.ParameterInfo parameterInfo)
    // Offset: 0x17645E0
    ::Newtonsoft::Json::Serialization::JsonProperty* CreatePropertyFromConstructorParameter(::Newtonsoft::Json::Serialization::JsonProperty* matchingMemberProperty, ::System::Reflection::ParameterInfo* parameterInfo);
    // protected Newtonsoft.Json.JsonConverter ResolveContractConverter(System.Type objectType)
    // Offset: 0x1764CAC
    ::Newtonsoft::Json::JsonConverter* ResolveContractConverter(::System::Type* objectType);
    // private System.Func`1<System.Object> GetDefaultCreator(System.Type createdType)
    // Offset: 0x1764D14
    ::System::Func_1<::Il2CppObject*>* GetDefaultCreator(::System::Type* createdType);
    // private System.Void InitializeContract(Newtonsoft.Json.Serialization.JsonContract contract)
    // Offset: 0x1763320
    void InitializeContract(::Newtonsoft::Json::Serialization::JsonContract* contract);
    // private System.Void ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract contract, System.Type t)
    // Offset: 0x1764DB8
    void ResolveCallbackMethods(::Newtonsoft::Json::Serialization::JsonContract* contract, ::System::Type* t);
    // private System.Void GetCallbackMethodsForType(System.Type type, out System.Collections.Generic.List`1<Newtonsoft.Json.Serialization.SerializationCallback> onSerializing, out System.Collections.Generic.List`1<Newtonsoft.Json.Serialization.SerializationCallback> onSerialized, out System.Collections.Generic.List`1<Newtonsoft.Json.Serialization.SerializationCallback> onDeserializing, out System.Collections.Generic.List`1<Newtonsoft.Json.Serialization.SerializationCallback> onDeserialized, out System.Collections.Generic.List`1<Newtonsoft.Json.Serialization.SerializationErrorCallback> onError)
    // Offset: 0x1764F14
    void GetCallbackMethodsForType(::System::Type* type, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*> onSerializing, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*> onSerialized, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*> onDeserializing, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*> onDeserialized, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationErrorCallback*>*> onError);
    // static private System.Boolean ShouldSkipDeserialized(System.Type t)
    // Offset: 0x1765654
    static bool ShouldSkipDeserialized(::System::Type* t);
    // static private System.Boolean ShouldSkipSerializing(System.Type t)
    // Offset: 0x176564C
    static bool ShouldSkipSerializing(::System::Type* t);
    // private System.Collections.Generic.List`1<System.Type> GetClassHierarchyForType(System.Type type)
    // Offset: 0x1764330
    ::System::Collections::Generic::List_1<::System::Type*>* GetClassHierarchyForType(::System::Type* type);
    // protected Newtonsoft.Json.Serialization.JsonDictionaryContract CreateDictionaryContract(System.Type objectType)
    // Offset: 0x1765D1C
    ::Newtonsoft::Json::Serialization::JsonDictionaryContract* CreateDictionaryContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonArrayContract CreateArrayContract(System.Type objectType)
    // Offset: 0x17660D8
    ::Newtonsoft::Json::Serialization::JsonArrayContract* CreateArrayContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonPrimitiveContract CreatePrimitiveContract(System.Type objectType)
    // Offset: 0x17663B4
    ::Newtonsoft::Json::Serialization::JsonPrimitiveContract* CreatePrimitiveContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonLinqContract CreateLinqContract(System.Type objectType)
    // Offset: 0x1766430
    ::Newtonsoft::Json::Serialization::JsonLinqContract* CreateLinqContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonISerializableContract CreateISerializableContract(System.Type objectType)
    // Offset: 0x17664AC
    ::Newtonsoft::Json::Serialization::JsonISerializableContract* CreateISerializableContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonStringContract CreateStringContract(System.Type objectType)
    // Offset: 0x1766674
    ::Newtonsoft::Json::Serialization::JsonStringContract* CreateStringContract(::System::Type* objectType);
    // protected Newtonsoft.Json.Serialization.JsonContract CreateContract(System.Type objectType)
    // Offset: 0x17666F0
    ::Newtonsoft::Json::Serialization::JsonContract* CreateContract(::System::Type* objectType);
    // static System.Boolean IsJsonPrimitiveType(System.Type t)
    // Offset: 0x1766A2C
    static bool IsJsonPrimitiveType(::System::Type* t);
    // static System.Boolean IsIConvertible(System.Type t)
    // Offset: 0x1766CB8
    static bool IsIConvertible(::System::Type* t);
    // static System.Boolean CanConvertToString(System.Type type)
    // Offset: 0x1766AA0
    static bool CanConvertToString(::System::Type* type);
    // static private System.Boolean IsValidCallback(System.Reflection.MethodInfo method, System.Reflection.ParameterInfo[] parameters, System.Type attributeType, System.Reflection.MethodInfo currentCallback, ref System.Type prevAttributeType)
    // Offset: 0x176565C
    static bool IsValidCallback(::System::Reflection::MethodInfo* method, ::ArrayW<::System::Reflection::ParameterInfo*> parameters, ::System::Type* attributeType, ::System::Reflection::MethodInfo* currentCallback, ByRef<::System::Type*> prevAttributeType);
    // static System.String GetClrTypeFullName(System.Type type)
    // Offset: 0x1766E38
    static ::StringW GetClrTypeFullName(::System::Type* type);
    // protected System.Collections.Generic.IList`1<Newtonsoft.Json.Serialization.JsonProperty> CreateProperties(System.Type type, Newtonsoft.Json.MemberSerialization memberSerialization)
    // Offset: 0x1766FC0
    ::System::Collections::Generic::IList_1<::Newtonsoft::Json::Serialization::JsonProperty*>* CreateProperties(::System::Type* type, ::Newtonsoft::Json::MemberSerialization memberSerialization);
    // protected Newtonsoft.Json.Serialization.IValueProvider CreateMemberValueProvider(System.Reflection.MemberInfo member)
    // Offset: 0x1767348
    ::Newtonsoft::Json::Serialization::IValueProvider* CreateMemberValueProvider(::System::Reflection::MemberInfo* member);
    // protected Newtonsoft.Json.Serialization.JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization)
    // Offset: 0x17673AC
    ::Newtonsoft::Json::Serialization::JsonProperty* CreateProperty(::System::Reflection::MemberInfo* member, ::Newtonsoft::Json::MemberSerialization memberSerialization);
    // private System.Void SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty property, System.Object attributeProvider, System.String name, System.Type declaringType, Newtonsoft.Json.MemberSerialization memberSerialization, out System.Boolean allowNonPublicAccess)
    // Offset: 0x1764828
    void SetPropertySettingsFromAttributes(::Newtonsoft::Json::Serialization::JsonProperty* property, ::Il2CppObject* attributeProvider, ::StringW name, ::System::Type* declaringType, ::Newtonsoft::Json::MemberSerialization memberSerialization, ByRef<bool> allowNonPublicAccess);
    // private System.Predicate`1<System.Object> CreateShouldSerializeTest(System.Reflection.MemberInfo member)
    // Offset: 0x17675A0
    ::System::Predicate_1<::Il2CppObject*>* CreateShouldSerializeTest(::System::Reflection::MemberInfo* member);
    // private System.Void SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty property, System.Reflection.MemberInfo member, System.Boolean allowNonPublicAccess)
    // Offset: 0x17677A4
    void SetIsSpecifiedActions(::Newtonsoft::Json::Serialization::JsonProperty* property, ::System::Reflection::MemberInfo* member, bool allowNonPublicAccess);
    // protected System.String ResolvePropertyName(System.String propertyName)
    // Offset: 0x1767A34
    ::StringW ResolvePropertyName(::StringW propertyName);
    // protected System.String ResolveDictionaryKey(System.String dictionaryKey)
    // Offset: 0x1767A3C
    ::StringW ResolveDictionaryKey(::StringW dictionaryKey);
    // public System.String GetResolvedPropertyName(System.String propertyName)
    // Offset: 0x1767A4C
    ::StringW GetResolvedPropertyName(::StringW propertyName);
  }; // Newtonsoft.Json.Serialization.DefaultContractResolver
  #pragma pack(pop)
  static check_size<sizeof(DefaultContractResolver), 34 + sizeof(bool)> __Newtonsoft_Json_Serialization_DefaultContractResolverSizeCheck;
  static_assert(sizeof(DefaultContractResolver) == 0x23);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::IContractResolver* (*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::get_DefaultMembersSearchFlags
// Il2CppName: get_DefaultMembersSearchFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::BindingFlags (Newtonsoft::Json::Serialization::DefaultContractResolver::*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::get_DefaultMembersSearchFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "get_DefaultMembersSearchFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::set_DefaultMembersSearchFlags
// Il2CppName: set_DefaultMembersSearchFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::BindingFlags)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::set_DefaultMembersSearchFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Reflection", "BindingFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "set_DefaultMembersSearchFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::get_SerializeCompilerGeneratedMembers
// Il2CppName: get_SerializeCompilerGeneratedMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::DefaultContractResolver::*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::get_SerializeCompilerGeneratedMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "get_SerializeCompilerGeneratedMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::get_IgnoreSerializableInterface
// Il2CppName: get_IgnoreSerializableInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::DefaultContractResolver::*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::get_IgnoreSerializableInterface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "get_IgnoreSerializableInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::get_IgnoreSerializableAttribute
// Il2CppName: get_IgnoreSerializableAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::DefaultContractResolver::*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::get_IgnoreSerializableAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "get_IgnoreSerializableAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::set_IgnoreSerializableAttribute
// Il2CppName: set_IgnoreSerializableAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(bool)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::set_IgnoreSerializableAttribute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "set_IgnoreSerializableAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::DefaultContractResolverState* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)()>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveContract
// Il2CppName: ResolveContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveContract)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ResolveContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetSerializableMembers
// Il2CppName: GetSerializableMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Reflection::MemberInfo*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetSerializableMembers)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetSerializableMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSerializeEntityMember
// Il2CppName: ShouldSerializeEntityMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSerializeEntityMember)> {
  static const MethodInfo* get() {
    static auto* memberInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ShouldSerializeEntityMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberInfo});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateObjectContract
// Il2CppName: CreateObjectContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonObjectContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateObjectContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateObjectContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetExtensionDataMemberForType
// Il2CppName: GetExtensionDataMemberForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MemberInfo* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetExtensionDataMemberForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetExtensionDataMemberForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::SetExtensionDataDelegates
// Il2CppName: SetExtensionDataDelegates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Newtonsoft::Json::Serialization::JsonObjectContract*, ::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::SetExtensionDataDelegates)> {
  static const MethodInfo* get() {
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonObjectContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "SetExtensionDataDelegates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contract, member});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetAttributeConstructor
// Il2CppName: GetAttributeConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetAttributeConstructor)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetAttributeConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetParameterizedConstructor
// Il2CppName: GetParameterizedConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::ConstructorInfo* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetParameterizedConstructor)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetParameterizedConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateConstructorParameters
// Il2CppName: CreateConstructorParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::Newtonsoft::Json::Serialization::JsonProperty*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::ConstructorInfo*, ::Newtonsoft::Json::Serialization::JsonPropertyCollection*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateConstructorParameters)> {
  static const MethodInfo* get() {
    static auto* constructor = &::il2cpp_utils::GetClassFromName("System.Reflection", "ConstructorInfo")->byval_arg;
    static auto* memberProperties = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonPropertyCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateConstructorParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constructor, memberProperties});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreatePropertyFromConstructorParameter
// Il2CppName: CreatePropertyFromConstructorParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonProperty* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::Newtonsoft::Json::Serialization::JsonProperty*, ::System::Reflection::ParameterInfo*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreatePropertyFromConstructorParameter)> {
  static const MethodInfo* get() {
    static auto* matchingMemberProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* parameterInfo = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreatePropertyFromConstructorParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matchingMemberProperty, parameterInfo});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveContractConverter
// Il2CppName: ResolveContractConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::JsonConverter* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveContractConverter)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ResolveContractConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetDefaultCreator
// Il2CppName: GetDefaultCreator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::Il2CppObject*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetDefaultCreator)> {
  static const MethodInfo* get() {
    static auto* createdType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetDefaultCreator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{createdType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::InitializeContract
// Il2CppName: InitializeContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::Newtonsoft::Json::Serialization::JsonContract*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::InitializeContract)> {
  static const MethodInfo* get() {
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "InitializeContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contract});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveCallbackMethods
// Il2CppName: ResolveCallbackMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::Newtonsoft::Json::Serialization::JsonContract*, ::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveCallbackMethods)> {
  static const MethodInfo* get() {
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ResolveCallbackMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contract, t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetCallbackMethodsForType
// Il2CppName: GetCallbackMethodsForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*>, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*>, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*>, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationCallback*>*>, ByRef<::System::Collections::Generic::List_1<::Newtonsoft::Json::Serialization::SerializationErrorCallback*>*>)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetCallbackMethodsForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* onSerializing = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "SerializationCallback")})->this_arg;
    static auto* onSerialized = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "SerializationCallback")})->this_arg;
    static auto* onDeserializing = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "SerializationCallback")})->this_arg;
    static auto* onDeserialized = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "SerializationCallback")})->this_arg;
    static auto* onError = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "SerializationErrorCallback")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetCallbackMethodsForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, onSerializing, onSerialized, onDeserializing, onDeserialized, onError});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSkipDeserialized
// Il2CppName: ShouldSkipDeserialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSkipDeserialized)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ShouldSkipDeserialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSkipSerializing
// Il2CppName: ShouldSkipSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ShouldSkipSerializing)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ShouldSkipSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetClassHierarchyForType
// Il2CppName: GetClassHierarchyForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Type*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetClassHierarchyForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetClassHierarchyForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateDictionaryContract
// Il2CppName: CreateDictionaryContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonDictionaryContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateDictionaryContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateDictionaryContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateArrayContract
// Il2CppName: CreateArrayContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonArrayContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateArrayContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateArrayContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreatePrimitiveContract
// Il2CppName: CreatePrimitiveContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonPrimitiveContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreatePrimitiveContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreatePrimitiveContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateLinqContract
// Il2CppName: CreateLinqContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonLinqContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateLinqContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateLinqContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateISerializableContract
// Il2CppName: CreateISerializableContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonISerializableContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateISerializableContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateISerializableContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateStringContract
// Il2CppName: CreateStringContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonStringContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateStringContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateStringContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateContract
// Il2CppName: CreateContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonContract* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateContract)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::IsJsonPrimitiveType
// Il2CppName: IsJsonPrimitiveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::IsJsonPrimitiveType)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "IsJsonPrimitiveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::IsIConvertible
// Il2CppName: IsIConvertible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::IsIConvertible)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "IsIConvertible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CanConvertToString
// Il2CppName: CanConvertToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CanConvertToString)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CanConvertToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::IsValidCallback
// Il2CppName: IsValidCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::MethodInfo*, ::ArrayW<::System::Reflection::ParameterInfo*>, ::System::Type*, ::System::Reflection::MethodInfo*, ByRef<::System::Type*>)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::IsValidCallback)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo"), 1)->byval_arg;
    static auto* attributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* currentCallback = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    static auto* prevAttributeType = &::il2cpp_utils::GetClassFromName("System", "Type")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "IsValidCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parameters, attributeType, currentCallback, prevAttributeType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetClrTypeFullName
// Il2CppName: GetClrTypeFullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetClrTypeFullName)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetClrTypeFullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateProperties
// Il2CppName: CreateProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::Newtonsoft::Json::Serialization::JsonProperty*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Type*, ::Newtonsoft::Json::MemberSerialization)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateProperties)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* memberSerialization = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "MemberSerialization")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, memberSerialization});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateMemberValueProvider
// Il2CppName: CreateMemberValueProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::IValueProvider* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateMemberValueProvider)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateMemberValueProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateProperty
// Il2CppName: CreateProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonProperty* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::MemberInfo*, ::Newtonsoft::Json::MemberSerialization)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateProperty)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* memberSerialization = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "MemberSerialization")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member, memberSerialization});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::SetPropertySettingsFromAttributes
// Il2CppName: SetPropertySettingsFromAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::Newtonsoft::Json::Serialization::JsonProperty*, ::Il2CppObject*, ::StringW, ::System::Type*, ::Newtonsoft::Json::MemberSerialization, ByRef<bool>)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::SetPropertySettingsFromAttributes)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* attributeProvider = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* declaringType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* memberSerialization = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "MemberSerialization")->byval_arg;
    static auto* allowNonPublicAccess = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "SetPropertySettingsFromAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, attributeProvider, name, declaringType, memberSerialization, allowNonPublicAccess});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::CreateShouldSerializeTest
// Il2CppName: CreateShouldSerializeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Predicate_1<::Il2CppObject*>* (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::System::Reflection::MemberInfo*)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::CreateShouldSerializeTest)> {
  static const MethodInfo* get() {
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "CreateShouldSerializeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{member});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::SetIsSpecifiedActions
// Il2CppName: SetIsSpecifiedActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::Newtonsoft::Json::Serialization::JsonProperty*, ::System::Reflection::MemberInfo*, bool)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::SetIsSpecifiedActions)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("System.Reflection", "MemberInfo")->byval_arg;
    static auto* allowNonPublicAccess = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "SetIsSpecifiedActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, member, allowNonPublicAccess});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ResolvePropertyName
// Il2CppName: ResolvePropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::StringW)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ResolvePropertyName)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ResolvePropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveDictionaryKey
// Il2CppName: ResolveDictionaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::StringW)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::ResolveDictionaryKey)> {
  static const MethodInfo* get() {
    static auto* dictionaryKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "ResolveDictionaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dictionaryKey});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::GetResolvedPropertyName
// Il2CppName: GetResolvedPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::DefaultContractResolver::*)(::StringW)>(&Newtonsoft::Json::Serialization::DefaultContractResolver::GetResolvedPropertyName)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::DefaultContractResolver*), "GetResolvedPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
