// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Serialization.JsonSerializerInternalBase
#include "Newtonsoft/Json/Serialization/JsonSerializerInternalBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonWriter
  class JsonWriter;
  // Forward declaring type: DefaultValueHandling
  struct DefaultValueHandling;
  // Forward declaring type: PreserveReferencesHandling
  struct PreserveReferencesHandling;
  // Forward declaring type: TypeNameHandling
  struct TypeNameHandling;
  // Forward declaring type: JsonConverter
  class JsonConverter;
  // Forward declaring type: JsonSerializer
  class JsonSerializer;
}
// Forward declaring namespace: Newtonsoft::Json::Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: JsonSerializerProxy
  class JsonSerializerProxy;
  // Forward declaring type: JsonContract
  class JsonContract;
  // Forward declaring type: JsonPrimitiveContract
  class JsonPrimitiveContract;
  // Forward declaring type: JsonProperty
  class JsonProperty;
  // Forward declaring type: JsonContainerContract
  class JsonContainerContract;
  // Forward declaring type: JsonStringContract
  class JsonStringContract;
  // Forward declaring type: JsonObjectContract
  class JsonObjectContract;
  // Forward declaring type: JsonArrayContract
  class JsonArrayContract;
  // Forward declaring type: JsonISerializableContract
  class JsonISerializableContract;
  // Forward declaring type: JsonDictionaryContract
  class JsonDictionaryContract;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerable
  class IEnumerable;
  // Forward declaring type: IDictionary
  class IDictionary;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: ISerializable
  class ISerializable;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: JsonSerializerInternalWriter
  class JsonSerializerInternalWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::JsonSerializerInternalWriter);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*, "Newtonsoft.Json.Serialization", "JsonSerializerInternalWriter");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.JsonSerializerInternalWriter
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class JsonSerializerInternalWriter : public ::Newtonsoft::Json::Serialization::JsonSerializerInternalBase {
    public:
    public:
    // private System.Type _rootType
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* rootType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Int32 _rootLevel
    // Size: 0x4
    // Offset: 0x40
    int rootLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rootLevel and: serializeStack
    char __padding1[0x4] = {};
    // private readonly System.Collections.Generic.List`1<System.Object> _serializeStack
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Il2CppObject*>* serializeStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    public:
    // Get instance field reference: private System.Type _rootType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__rootType();
    // Get instance field reference: private System.Int32 _rootLevel
    [[deprecated("Use field access instead!")]] int& dyn__rootLevel();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Object> _serializeStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn__serializeStack();
    // public System.Void Serialize(Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType)
    // Offset: 0x1D71080
    void Serialize(::Newtonsoft::Json::JsonWriter* jsonWriter, ::Il2CppObject* value, ::System::Type* objectType);
    // private Newtonsoft.Json.Serialization.JsonSerializerProxy GetInternalSerializer()
    // Offset: 0x1D71D94
    ::Newtonsoft::Json::Serialization::JsonSerializerProxy* GetInternalSerializer();
    // private Newtonsoft.Json.Serialization.JsonContract GetContractSafe(System.Object value)
    // Offset: 0x1D712C4
    ::Newtonsoft::Json::Serialization::JsonContract* GetContractSafe(::Il2CppObject* value);
    // private System.Void SerializePrimitive(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonPrimitiveContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D71E04
    void SerializePrimitive(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonPrimitiveContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* containerContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeValue(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonContract valueContract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D717C0
    void SerializeValue(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonContract* valueContract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* containerContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Nullable`1<System.Boolean> ResolveIsReference(Newtonsoft.Json.Serialization.JsonContract contract, Newtonsoft.Json.Serialization.JsonProperty property, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D74228
    ::System::Nullable_1<bool> ResolveIsReference(::Newtonsoft::Json::Serialization::JsonContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* property, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Boolean ShouldWriteReference(System.Object value, Newtonsoft.Json.Serialization.JsonProperty property, Newtonsoft.Json.Serialization.JsonContract valueContract, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D713B4
    bool ShouldWriteReference(::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonProperty* property, ::Newtonsoft::Json::Serialization::JsonContract* valueContract, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Boolean ShouldWriteProperty(System.Object memberValue, Newtonsoft.Json.Serialization.JsonProperty property)
    // Offset: 0x1D742E8
    bool ShouldWriteProperty(::Il2CppObject* memberValue, ::Newtonsoft::Json::Serialization::JsonProperty* property);
    // private System.Boolean CheckForCircularReference(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonProperty property, Newtonsoft.Json.Serialization.JsonContract contract, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D743E0
    bool CheckForCircularReference(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonProperty* property, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Newtonsoft::Json::Serialization::JsonContainerContract* containerContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void WriteReference(Newtonsoft.Json.JsonWriter writer, System.Object value)
    // Offset: 0x1D71544
    void WriteReference(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value);
    // private System.String GetReference(Newtonsoft.Json.JsonWriter writer, System.Object value)
    // Offset: 0x1D7491C
    ::StringW GetReference(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value);
    // static System.Boolean TryConvertToString(System.Object value, System.Type type, out System.String s)
    // Offset: 0x1D74B1C
    static bool TryConvertToString(::Il2CppObject* value, ::System::Type* type, ByRef<::StringW> s);
    // private System.Void SerializeString(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonStringContract contract)
    // Offset: 0x1D7360C
    void SerializeString(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonStringContract* contract);
    // private System.Void OnSerializing(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Serialization.JsonContract contract, System.Object value)
    // Offset: 0x1D74CE8
    void OnSerializing(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Il2CppObject* value);
    // private System.Void OnSerialized(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Serialization.JsonContract contract, System.Object value)
    // Offset: 0x1D74EF8
    void OnSerialized(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Il2CppObject* value);
    // private System.Void SerializeObject(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonObjectContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D7287C
    void SerializeObject(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonObjectContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Boolean CalculatePropertyValues(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonContainerContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonProperty property, out Newtonsoft.Json.Serialization.JsonContract memberContract, out System.Object memberValue)
    // Offset: 0x1D75234
    bool CalculatePropertyValues(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonContainerContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonProperty* property, ByRef<::Newtonsoft::Json::Serialization::JsonContract*> memberContract, ByRef<::Il2CppObject*> memberValue);
    // private System.Void WriteObjectStart(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D75108
    void WriteObjectStart(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void WriteReferenceIdProperty(Newtonsoft.Json.JsonWriter writer, System.Type type, System.Object value)
    // Offset: 0x1D75E40
    void WriteReferenceIdProperty(::Newtonsoft::Json::JsonWriter* writer, ::System::Type* type, ::Il2CppObject* value);
    // private System.Void WriteTypeProperty(Newtonsoft.Json.JsonWriter writer, System.Type type)
    // Offset: 0x1D72130
    void WriteTypeProperty(::Newtonsoft::Json::JsonWriter* writer, ::System::Type* type);
    // private System.Boolean HasFlag(Newtonsoft.Json.DefaultValueHandling value, Newtonsoft.Json.DefaultValueHandling flag)
    // Offset: 0x1D743D4
    bool HasFlag(::Newtonsoft::Json::DefaultValueHandling value, ::Newtonsoft::Json::DefaultValueHandling flag);
    // private System.Boolean HasFlag(Newtonsoft.Json.PreserveReferencesHandling value, Newtonsoft.Json.PreserveReferencesHandling flag)
    // Offset: 0x1D742DC
    bool HasFlag(::Newtonsoft::Json::PreserveReferencesHandling value, ::Newtonsoft::Json::PreserveReferencesHandling flag);
    // private System.Boolean HasFlag(Newtonsoft.Json.TypeNameHandling value, Newtonsoft.Json.TypeNameHandling flag)
    // Offset: 0x1D76084
    bool HasFlag(::Newtonsoft::Json::TypeNameHandling value, ::Newtonsoft::Json::TypeNameHandling flag);
    // private System.Void SerializeConvertable(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.JsonConverter converter, System.Object value, Newtonsoft.Json.Serialization.JsonContract contract, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D723A4
    void SerializeConvertable(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::JsonConverter* converter, ::Il2CppObject* value, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeList(Newtonsoft.Json.JsonWriter writer, System.Collections.IEnumerable values, Newtonsoft.Json.Serialization.JsonArrayContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D72E68
    void SerializeList(::Newtonsoft::Json::JsonWriter* writer, ::System::Collections::IEnumerable* values, ::Newtonsoft::Json::Serialization::JsonArrayContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeMultidimensionalArray(Newtonsoft.Json.JsonWriter writer, System.Array values, Newtonsoft.Json.Serialization.JsonArrayContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D734B4
    void SerializeMultidimensionalArray(::Newtonsoft::Json::JsonWriter* writer, ::System::Array* values, ::Newtonsoft::Json::Serialization::JsonArrayContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeMultidimensionalArray(Newtonsoft.Json.JsonWriter writer, System.Array values, Newtonsoft.Json.Serialization.JsonArrayContract contract, Newtonsoft.Json.Serialization.JsonProperty member, System.Int32 initialDepth, System.Int32[] indices)
    // Offset: 0x1D76320
    void SerializeMultidimensionalArray(::Newtonsoft::Json::JsonWriter* writer, ::System::Array* values, ::Newtonsoft::Json::Serialization::JsonArrayContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, int initialDepth, ::ArrayW<int> indices);
    // private System.Boolean WriteStartArray(Newtonsoft.Json.JsonWriter writer, System.Object values, Newtonsoft.Json.Serialization.JsonArrayContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D76090
    bool WriteStartArray(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* values, ::Newtonsoft::Json::Serialization::JsonArrayContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* containerContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeISerializable(Newtonsoft.Json.JsonWriter writer, System.Runtime.Serialization.ISerializable value, Newtonsoft.Json.Serialization.JsonISerializableContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D73E38
    void SerializeISerializable(::Newtonsoft::Json::JsonWriter* writer, ::System::Runtime::Serialization::ISerializable* value, ::Newtonsoft::Json::Serialization::JsonISerializableContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Boolean ShouldWriteType(Newtonsoft.Json.TypeNameHandling typeNameHandlingFlag, Newtonsoft.Json.Serialization.JsonContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D71F80
    bool ShouldWriteType(::Newtonsoft::Json::TypeNameHandling typeNameHandlingFlag, ::Newtonsoft::Json::Serialization::JsonContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* containerContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.Void SerializeDictionary(Newtonsoft.Json.JsonWriter writer, System.Collections.IDictionary values, Newtonsoft.Json.Serialization.JsonDictionaryContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty)
    // Offset: 0x1D7369C
    void SerializeDictionary(::Newtonsoft::Json::JsonWriter* writer, ::System::Collections::IDictionary* values, ::Newtonsoft::Json::Serialization::JsonDictionaryContract* contract, ::Newtonsoft::Json::Serialization::JsonProperty* member, ::Newtonsoft::Json::Serialization::JsonContainerContract* collectionContract, ::Newtonsoft::Json::Serialization::JsonProperty* containerProperty);
    // private System.String GetPropertyName(Newtonsoft.Json.JsonWriter writer, System.Object name, Newtonsoft.Json.Serialization.JsonContract contract, out System.Boolean escape)
    // Offset: 0x1D75618
    ::StringW GetPropertyName(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* name, ::Newtonsoft::Json::Serialization::JsonContract* contract, ByRef<bool> escape);
    // private System.Void HandleError(Newtonsoft.Json.JsonWriter writer, System.Int32 initialDepth)
    // Offset: 0x1D71D1C
    void HandleError(::Newtonsoft::Json::JsonWriter* writer, int initialDepth);
    // private System.Boolean ShouldSerialize(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Serialization.JsonProperty property, System.Object target)
    // Offset: 0x1D75980
    bool ShouldSerialize(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Serialization::JsonProperty* property, ::Il2CppObject* target);
    // private System.Boolean IsSpecified(Newtonsoft.Json.JsonWriter writer, Newtonsoft.Json.Serialization.JsonProperty property, System.Object target)
    // Offset: 0x1D75BE0
    bool IsSpecified(::Newtonsoft::Json::JsonWriter* writer, ::Newtonsoft::Json::Serialization::JsonProperty* property, ::Il2CppObject* target);
    // public System.Void .ctor(Newtonsoft.Json.JsonSerializer serializer)
    // Offset: 0x1D71004
    // Implemented from: Newtonsoft.Json.Serialization.JsonSerializerInternalBase
    // Base method: System.Void JsonSerializerInternalBase::.ctor(Newtonsoft.Json.JsonSerializer serializer)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonSerializerInternalWriter* New_ctor(::Newtonsoft::Json::JsonSerializer* serializer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonSerializerInternalWriter*, creationType>(serializer)));
    }
  }; // Newtonsoft.Json.Serialization.JsonSerializerInternalWriter
  #pragma pack(pop)
  static check_size<sizeof(JsonSerializerInternalWriter), 72 + sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*)> __Newtonsoft_Json_Serialization_JsonSerializerInternalWriterSizeCheck;
  static_assert(sizeof(JsonSerializerInternalWriter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::System::Type*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::Serialize)> {
  static const MethodInfo* get() {
    static auto* jsonWriter = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonWriter, value, objectType});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetInternalSerializer
// Il2CppName: GetInternalSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonSerializerProxy* (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)()>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetInternalSerializer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "GetInternalSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetContractSafe
// Il2CppName: GetContractSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::JsonContract* (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetContractSafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "GetContractSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializePrimitive
// Il2CppName: SerializePrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonPrimitiveContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializePrimitive)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonPrimitiveContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* containerContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializePrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract, member, containerContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeValue
// Il2CppName: SerializeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeValue)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* valueContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* containerContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, valueContract, member, containerContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ResolveIsReference
// Il2CppName: ResolveIsReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<bool> (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ResolveIsReference)> {
  static const MethodInfo* get() {
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "ResolveIsReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contract, property, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteReference
// Il2CppName: ShouldWriteReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteReference)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* valueContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "ShouldWriteReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, property, valueContract, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteProperty
// Il2CppName: ShouldWriteProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteProperty)> {
  static const MethodInfo* get() {
    static auto* memberValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "ShouldWriteProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{memberValue, property});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::CheckForCircularReference
// Il2CppName: CheckForCircularReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::CheckForCircularReference)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* containerContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "CheckForCircularReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, property, contract, containerContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteReference
// Il2CppName: WriteReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteReference)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "WriteReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetReference
// Il2CppName: GetReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetReference)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "GetReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::TryConvertToString
// Il2CppName: TryConvertToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::System::Type*, ByRef<::StringW>)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::TryConvertToString)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "TryConvertToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, type, s});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeString
// Il2CppName: SerializeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonStringContract*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeString)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonStringContract")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::OnSerializing
// Il2CppName: OnSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::OnSerializing)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "OnSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, contract, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::OnSerialized
// Il2CppName: OnSerialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::OnSerialized)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "OnSerialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, contract, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeObject
// Il2CppName: SerializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonObjectContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeObject)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonObjectContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::CalculatePropertyValues
// Il2CppName: CalculatePropertyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonProperty*, ByRef<::Newtonsoft::Json::Serialization::JsonContract*>, ByRef<::Il2CppObject*>)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::CalculatePropertyValues)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* memberContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->this_arg;
    static auto* memberValue = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "CalculatePropertyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract, member, property, memberContract, memberValue});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteObjectStart
// Il2CppName: WriteObjectStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteObjectStart)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "WriteObjectStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteReferenceIdProperty
// Il2CppName: WriteReferenceIdProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Type*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteReferenceIdProperty)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "WriteReferenceIdProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, type, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteTypeProperty
// Il2CppName: WriteTypeProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Type*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteTypeProperty)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "WriteTypeProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, type});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::DefaultValueHandling, ::Newtonsoft::Json::DefaultValueHandling)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DefaultValueHandling")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "DefaultValueHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, flag});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::PreserveReferencesHandling, ::Newtonsoft::Json::PreserveReferencesHandling)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "PreserveReferencesHandling")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "PreserveReferencesHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, flag});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::TypeNameHandling, ::Newtonsoft::Json::TypeNameHandling)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HasFlag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "TypeNameHandling")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "TypeNameHandling")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, flag});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeConvertable
// Il2CppName: SerializeConvertable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::JsonConverter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeConvertable)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* converter = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonConverter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeConvertable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, converter, value, contract, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeList
// Il2CppName: SerializeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Collections::IEnumerable*, ::Newtonsoft::Json::Serialization::JsonArrayContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeList)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerable")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonArrayContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, values, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeMultidimensionalArray
// Il2CppName: SerializeMultidimensionalArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Array*, ::Newtonsoft::Json::Serialization::JsonArrayContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeMultidimensionalArray)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonArrayContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeMultidimensionalArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, values, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeMultidimensionalArray
// Il2CppName: SerializeMultidimensionalArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Array*, ::Newtonsoft::Json::Serialization::JsonArrayContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, int, ::ArrayW<int>)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeMultidimensionalArray)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonArrayContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* initialDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeMultidimensionalArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, values, contract, member, initialDepth, indices});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteStartArray
// Il2CppName: WriteStartArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonArrayContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::WriteStartArray)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonArrayContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* containerContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "WriteStartArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, values, contract, member, containerContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeISerializable
// Il2CppName: SerializeISerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Runtime::Serialization::ISerializable*, ::Newtonsoft::Json::Serialization::JsonISerializableContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeISerializable)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "ISerializable")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonISerializableContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeISerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteType
// Il2CppName: ShouldWriteType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::TypeNameHandling, ::Newtonsoft::Json::Serialization::JsonContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldWriteType)> {
  static const MethodInfo* get() {
    static auto* typeNameHandlingFlag = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "TypeNameHandling")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* containerContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "ShouldWriteType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeNameHandlingFlag, contract, member, containerContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeDictionary
// Il2CppName: SerializeDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::System::Collections::IDictionary*, ::Newtonsoft::Json::Serialization::JsonDictionaryContract*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Newtonsoft::Json::Serialization::JsonContainerContract*, ::Newtonsoft::Json::Serialization::JsonProperty*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::SerializeDictionary)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* values = &::il2cpp_utils::GetClassFromName("System.Collections", "IDictionary")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonDictionaryContract")->byval_arg;
    static auto* member = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* collectionContract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContainerContract")->byval_arg;
    static auto* containerProperty = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "SerializeDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, values, contract, member, collectionContract, containerProperty});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetPropertyName
// Il2CppName: GetPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::Serialization::JsonContract*, ByRef<bool>)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::GetPropertyName)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* contract = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonContract")->byval_arg;
    static auto* escape = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "GetPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, name, contract, escape});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HandleError
// Il2CppName: HandleError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, int)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::HandleError)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* initialDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "HandleError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, initialDepth});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldSerialize
// Il2CppName: ShouldSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::ShouldSerialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "ShouldSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, property, target});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::IsSpecified
// Il2CppName: IsSpecified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::*)(::Newtonsoft::Json::JsonWriter*, ::Newtonsoft::Json::Serialization::JsonProperty*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::IsSpecified)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "JsonProperty")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::JsonSerializerInternalWriter*), "IsSpecified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, property, target});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::JsonSerializerInternalWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
