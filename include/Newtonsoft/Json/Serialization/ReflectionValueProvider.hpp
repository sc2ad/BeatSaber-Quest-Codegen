// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Serialization.IValueProvider
#include "Newtonsoft/Json/Serialization/IValueProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: ReflectionValueProvider
  class ReflectionValueProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::ReflectionValueProvider);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::ReflectionValueProvider*, "Newtonsoft.Json.Serialization", "ReflectionValueProvider");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.ReflectionValueProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class ReflectionValueProvider : public ::Il2CppObject/*, public ::Newtonsoft::Json::Serialization::IValueProvider*/ {
    public:
    public:
    // private readonly System.Reflection.MemberInfo _memberInfo
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MemberInfo* memberInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::MemberInfo*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Newtonsoft::Json::Serialization::IValueProvider
    operator ::Newtonsoft::Json::Serialization::IValueProvider() noexcept {
      return *reinterpret_cast<::Newtonsoft::Json::Serialization::IValueProvider*>(this);
    }
    // Creating interface conversion operator: i_IValueProvider
    inline ::Newtonsoft::Json::Serialization::IValueProvider* i_IValueProvider() noexcept {
      return reinterpret_cast<::Newtonsoft::Json::Serialization::IValueProvider*>(this);
    }
    // Creating conversion operator: operator ::System::Reflection::MemberInfo*
    constexpr operator ::System::Reflection::MemberInfo*() const noexcept {
      return memberInfo;
    }
    // Get instance field reference: private readonly System.Reflection.MemberInfo _memberInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& dyn__memberInfo();
    // public System.Void .ctor(System.Reflection.MemberInfo memberInfo)
    // Offset: 0x208C390
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionValueProvider* New_ctor(::System::Reflection::MemberInfo* memberInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::ReflectionValueProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionValueProvider*, creationType>(memberInfo)));
    }
    // public System.Void SetValue(System.Object target, System.Object value)
    // Offset: 0x208C400
    void SetValue(::Il2CppObject* target, ::Il2CppObject* value);
    // public System.Object GetValue(System.Object target)
    // Offset: 0x208C884
    ::Il2CppObject* GetValue(::Il2CppObject* target);
  }; // Newtonsoft.Json.Serialization.ReflectionValueProvider
  #pragma pack(pop)
  static check_size<sizeof(ReflectionValueProvider), 16 + sizeof(::System::Reflection::MemberInfo*)> __Newtonsoft_Json_Serialization_ReflectionValueProviderSizeCheck;
  static_assert(sizeof(ReflectionValueProvider) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::ReflectionValueProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::ReflectionValueProvider::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Serialization::ReflectionValueProvider::*)(::Il2CppObject*, ::Il2CppObject*)>(&Newtonsoft::Json::Serialization::ReflectionValueProvider::SetValue)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::ReflectionValueProvider*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::ReflectionValueProvider::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::Serialization::ReflectionValueProvider::*)(::Il2CppObject*)>(&Newtonsoft::Json::Serialization::ReflectionValueProvider::GetValue)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Serialization::ReflectionValueProvider*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
