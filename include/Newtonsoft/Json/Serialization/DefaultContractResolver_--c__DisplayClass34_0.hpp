// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Serialization.DefaultContractResolver
#include "Newtonsoft/Json/Serialization/DefaultContractResolver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_0);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_0*, "Newtonsoft.Json.Serialization", "DefaultContractResolver/<>c__DisplayClass34_0");
// Type namespace: Newtonsoft.Json.Serialization
namespace Newtonsoft::Json::Serialization {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Serialization.DefaultContractResolver/Newtonsoft.Json.Serialization.<>c__DisplayClass34_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class DefaultContractResolver::$$c__DisplayClass34_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Func`2<System.Object,System.Object> getExtensionDataDictionary
    // Size: 0x8
    // Offset: 0x10
    ::System::Func_2<::Il2CppObject*, ::Il2CppObject*>* getExtensionDataDictionary;
    // Field size check
    static_assert(sizeof(::System::Func_2<::Il2CppObject*, ::Il2CppObject*>*) == 0x8);
    // public System.Reflection.MemberInfo member
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::MemberInfo* member;
    // Field size check
    static_assert(sizeof(::System::Reflection::MemberInfo*) == 0x8);
    public:
    // Get instance field reference: public System.Func`2<System.Object,System.Object> getExtensionDataDictionary
    [[deprecated("Use field access instead!")]] ::System::Func_2<::Il2CppObject*, ::Il2CppObject*>*& dyn_getExtensionDataDictionary();
    // Get instance field reference: public System.Reflection.MemberInfo member
    [[deprecated("Use field access instead!")]] ::System::Reflection::MemberInfo*& dyn_member();
    // public System.Void .ctor()
    // Offset: 0x1E129E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultContractResolver::$$c__DisplayClass34_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultContractResolver::$$c__DisplayClass34_0*, creationType>()));
    }
  }; // Newtonsoft.Json.Serialization.DefaultContractResolver/Newtonsoft.Json.Serialization.<>c__DisplayClass34_0
  #pragma pack(pop)
  static check_size<sizeof(DefaultContractResolver::$$c__DisplayClass34_0), 24 + sizeof(::System::Reflection::MemberInfo*)> __Newtonsoft_Json_Serialization_DefaultContractResolver_$$c__DisplayClass34_0SizeCheck;
  static_assert(sizeof(DefaultContractResolver::$$c__DisplayClass34_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Serialization::DefaultContractResolver::$$c__DisplayClass34_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
