// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatSaberAPI.DataTransferObjects.UserPlatform
#include "BeatSaberAPI/DataTransferObjects/UserPlatform.hpp"
// Including type: BeatSaberAPI.DataTransferObjects.PlatformEnviroment
#include "BeatSaberAPI/DataTransferObjects/PlatformEnviroment.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: BeatSaberAPI.DataTransferObjects
namespace BeatSaberAPI::DataTransferObjects {
  // Forward declaring type: UserAuthenticationData
  class UserAuthenticationData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatSaberAPI::DataTransferObjects::UserAuthenticationData);
DEFINE_IL2CPP_ARG_TYPE(::BeatSaberAPI::DataTransferObjects::UserAuthenticationData*, "BeatSaberAPI.DataTransferObjects", "UserAuthenticationData");
// Type namespace: BeatSaberAPI.DataTransferObjects
namespace BeatSaberAPI::DataTransferObjects {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BeatSaberAPI.DataTransferObjects.UserAuthenticationData
  // [TokenAttribute] Offset: FFFFFFFF
  class UserAuthenticationData : public ::Il2CppObject {
    public:
    public:
    // public BeatSaberAPI.DataTransferObjects.UserPlatform userPlatform
    // Size: 0x1
    // Offset: 0x10
    ::BeatSaberAPI::DataTransferObjects::UserPlatform userPlatform;
    // Field size check
    static_assert(sizeof(::BeatSaberAPI::DataTransferObjects::UserPlatform) == 0x1);
    // public BeatSaberAPI.DataTransferObjects.PlatformEnviroment platformEnviroment
    // Size: 0x1
    // Offset: 0x11
    ::BeatSaberAPI::DataTransferObjects::PlatformEnviroment platformEnviroment;
    // Field size check
    static_assert(sizeof(::BeatSaberAPI::DataTransferObjects::PlatformEnviroment) == 0x1);
    // Padding between fields: platformEnviroment and: platformUserId
    char __padding1[0x6] = {};
    // public System.String platformUserId
    // Size: 0x8
    // Offset: 0x18
    ::StringW platformUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String platformAuthToken
    // Size: 0x8
    // Offset: 0x20
    ::StringW platformAuthToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String bsAuthToken
    // Size: 0x8
    // Offset: 0x28
    ::StringW bsAuthToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String gameBuildVersion
    // Size: 0x8
    // Offset: 0x30
    ::StringW gameBuildVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String publicUserDisplayName
    // Size: 0x8
    // Offset: 0x38
    ::StringW publicUserDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public BeatSaberAPI.DataTransferObjects.UserPlatform userPlatform
    [[deprecated("Use field access instead!")]] ::BeatSaberAPI::DataTransferObjects::UserPlatform& dyn_userPlatform();
    // Get instance field reference: public BeatSaberAPI.DataTransferObjects.PlatformEnviroment platformEnviroment
    [[deprecated("Use field access instead!")]] ::BeatSaberAPI::DataTransferObjects::PlatformEnviroment& dyn_platformEnviroment();
    // Get instance field reference: public System.String platformUserId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platformUserId();
    // Get instance field reference: public System.String platformAuthToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platformAuthToken();
    // Get instance field reference: public System.String bsAuthToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bsAuthToken();
    // Get instance field reference: public System.String gameBuildVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameBuildVersion();
    // Get instance field reference: public System.String publicUserDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_publicUserDisplayName();
    // public System.Void .ctor()
    // Offset: 0x1390588
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserAuthenticationData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatSaberAPI::DataTransferObjects::UserAuthenticationData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserAuthenticationData*, creationType>()));
    }
  }; // BeatSaberAPI.DataTransferObjects.UserAuthenticationData
  #pragma pack(pop)
  static check_size<sizeof(UserAuthenticationData), 56 + sizeof(::StringW)> __BeatSaberAPI_DataTransferObjects_UserAuthenticationDataSizeCheck;
  static_assert(sizeof(UserAuthenticationData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatSaberAPI::DataTransferObjects::UserAuthenticationData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
