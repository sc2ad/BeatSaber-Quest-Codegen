// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Tayx.Graphy.Ram
namespace Tayx::Graphy::Ram {
  // Forward declaring type: G_RamMonitor
  class G_RamMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Ram::G_RamMonitor);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Ram::G_RamMonitor*, "Tayx.Graphy.Ram", "G_RamMonitor");
// Type namespace: Tayx.Graphy.Ram
namespace Tayx::Graphy::Ram {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Ram.G_RamMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class G_RamMonitor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single <AllocatedRam>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float AllocatedRam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <ReservedRam>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float ReservedRam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <MonoRam>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float MonoRam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single <AllocatedRam>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$AllocatedRam$k__BackingField();
    // Get instance field reference: private System.Single <ReservedRam>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$ReservedRam$k__BackingField();
    // Get instance field reference: private System.Single <MonoRam>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MonoRam$k__BackingField();
    // public System.Single get_AllocatedRam()
    // Offset: 0x2AE2DC4
    float get_AllocatedRam();
    // private System.Void set_AllocatedRam(System.Single value)
    // Offset: 0x2AE2DCC
    void set_AllocatedRam(float value);
    // public System.Single get_ReservedRam()
    // Offset: 0x2AE2DD4
    float get_ReservedRam();
    // private System.Void set_ReservedRam(System.Single value)
    // Offset: 0x2AE2DDC
    void set_ReservedRam(float value);
    // public System.Single get_MonoRam()
    // Offset: 0x2AE2DE4
    float get_MonoRam();
    // private System.Void set_MonoRam(System.Single value)
    // Offset: 0x2AE2DEC
    void set_MonoRam(float value);
    // public System.Void .ctor()
    // Offset: 0x2AE2E5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static G_RamMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Ram::G_RamMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<G_RamMonitor*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0x2AE2DF4
    void Update();
  }; // Tayx.Graphy.Ram.G_RamMonitor
  #pragma pack(pop)
  static check_size<sizeof(G_RamMonitor), 32 + sizeof(float)> __Tayx_Graphy_Ram_G_RamMonitorSizeCheck;
  static_assert(sizeof(G_RamMonitor) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::get_AllocatedRam
// Il2CppName: get_AllocatedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Ram::G_RamMonitor::*)()>(&Tayx::Graphy::Ram::G_RamMonitor::get_AllocatedRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "get_AllocatedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::set_AllocatedRam
// Il2CppName: set_AllocatedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamMonitor::*)(float)>(&Tayx::Graphy::Ram::G_RamMonitor::set_AllocatedRam)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "set_AllocatedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::get_ReservedRam
// Il2CppName: get_ReservedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Ram::G_RamMonitor::*)()>(&Tayx::Graphy::Ram::G_RamMonitor::get_ReservedRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "get_ReservedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::set_ReservedRam
// Il2CppName: set_ReservedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamMonitor::*)(float)>(&Tayx::Graphy::Ram::G_RamMonitor::set_ReservedRam)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "set_ReservedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::get_MonoRam
// Il2CppName: get_MonoRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Ram::G_RamMonitor::*)()>(&Tayx::Graphy::Ram::G_RamMonitor::get_MonoRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "get_MonoRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::set_MonoRam
// Il2CppName: set_MonoRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamMonitor::*)(float)>(&Tayx::Graphy::Ram::G_RamMonitor::set_MonoRam)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "set_MonoRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamMonitor::*)()>(&Tayx::Graphy::Ram::G_RamMonitor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
