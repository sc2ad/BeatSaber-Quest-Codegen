// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyManager
  class GraphyManager;
}
// Forward declaring namespace: Tayx::Graphy::Ram
namespace Tayx::Graphy::Ram {
  // Forward declaring type: G_RamMonitor
  class G_RamMonitor;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Ram
namespace Tayx::Graphy::Ram {
  // Forward declaring type: G_RamText
  class G_RamText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Ram::G_RamText);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Ram::G_RamText*, "Tayx.Graphy.Ram", "G_RamText");
// Type namespace: Tayx.Graphy.Ram
namespace Tayx::Graphy::Ram {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Ram.G_RamText
  // [TokenAttribute] Offset: FFFFFFFF
  class G_RamText : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Text m_allocatedSystemMemorySizeText
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* m_allocatedSystemMemorySizeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_reservedSystemMemorySizeText
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* m_reservedSystemMemorySizeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_monoSystemMemorySizeText
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* m_monoSystemMemorySizeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x30
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private Tayx.Graphy.Ram.G_RamMonitor m_ramMonitor
    // Size: 0x8
    // Offset: 0x38
    ::Tayx::Graphy::Ram::G_RamMonitor* m_ramMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Ram::G_RamMonitor*) == 0x8);
    // private System.Single m_updateRate
    // Size: 0x4
    // Offset: 0x40
    float m_updateRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_deltaTime
    // Size: 0x4
    // Offset: 0x44
    float m_deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UI.Text m_allocatedSystemMemorySizeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_allocatedSystemMemorySizeText();
    // Get instance field reference: private UnityEngine.UI.Text m_reservedSystemMemorySizeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_reservedSystemMemorySizeText();
    // Get instance field reference: private UnityEngine.UI.Text m_monoSystemMemorySizeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_monoSystemMemorySizeText();
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private Tayx.Graphy.Ram.G_RamMonitor m_ramMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Ram::G_RamMonitor*& dyn_m_ramMonitor();
    // Get instance field reference: private System.Single m_updateRate
    [[deprecated("Use field access instead!")]] float& dyn_m_updateRate();
    // Get instance field reference: private System.Single m_deltaTime
    [[deprecated("Use field access instead!")]] float& dyn_m_deltaTime();
    // public System.Void .ctor()
    // Offset: 0x2AE3090
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static G_RamText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Ram::G_RamText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<G_RamText*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x2AE2E64
    void Awake();
    // private System.Void Update()
    // Offset: 0x2AE2F24
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x2AE2C80
    void UpdateParameters();
    // private System.Void Init()
    // Offset: 0x2AE2E68
    void Init();
  }; // Tayx.Graphy.Ram.G_RamText
  #pragma pack(pop)
  static check_size<sizeof(G_RamText), 68 + sizeof(float)> __Tayx_Graphy_Ram_G_RamTextSizeCheck;
  static_assert(sizeof(G_RamText) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamText::*)()>(&Tayx::Graphy::Ram::G_RamText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamText::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamText::*)()>(&Tayx::Graphy::Ram::G_RamText::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamText*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamText::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamText::*)()>(&Tayx::Graphy::Ram::G_RamText::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamText*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Ram::G_RamText::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Ram::G_RamText::*)()>(&Tayx::Graphy::Ram::G_RamText::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Ram::G_RamText*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
