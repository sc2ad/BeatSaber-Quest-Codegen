// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyManager
  class GraphyManager;
}
// Forward declaring namespace: Tayx::Graphy::Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: G_FpsMonitor
  class G_FpsMonitor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: G_FpsText
  class G_FpsText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Fps::G_FpsText);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Fps::G_FpsText*, "Tayx.Graphy.Fps", "G_FpsText");
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Fps.G_FpsText
  // [TokenAttribute] Offset: FFFFFFFF
  class G_FpsText : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Text m_fpsText
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* m_fpsText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_msText
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* m_msText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_avgFpsText
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* m_avgFpsText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_onePercentFpsText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* m_onePercentFpsText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_zero1PercentFpsText
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Text* m_zero1PercentFpsText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x40
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private Tayx.Graphy.Fps.G_FpsMonitor m_fpsMonitor
    // Size: 0x8
    // Offset: 0x48
    ::Tayx::Graphy::Fps::G_FpsMonitor* m_fpsMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Fps::G_FpsMonitor*) == 0x8);
    // private System.Int32 m_updateRate
    // Size: 0x4
    // Offset: 0x50
    int m_updateRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_frameCount
    // Size: 0x4
    // Offset: 0x54
    int m_frameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_deltaTime
    // Size: 0x4
    // Offset: 0x58
    float m_deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_fps
    // Size: 0x4
    // Offset: 0x5C
    float m_fps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ms
    // Size: 0x4
    // Offset: 0x60
    float m_ms;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String m_msStringFormat
    static constexpr const char* m_msStringFormat = "0.0";
    // Get static field: static private System.String m_msStringFormat
    static ::StringW _get_m_msStringFormat();
    // Set static field: static private System.String m_msStringFormat
    static void _set_m_msStringFormat(::StringW value);
    // Get instance field reference: private UnityEngine.UI.Text m_fpsText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_fpsText();
    // Get instance field reference: private UnityEngine.UI.Text m_msText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_msText();
    // Get instance field reference: private UnityEngine.UI.Text m_avgFpsText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_avgFpsText();
    // Get instance field reference: private UnityEngine.UI.Text m_onePercentFpsText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_onePercentFpsText();
    // Get instance field reference: private UnityEngine.UI.Text m_zero1PercentFpsText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_zero1PercentFpsText();
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private Tayx.Graphy.Fps.G_FpsMonitor m_fpsMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Fps::G_FpsMonitor*& dyn_m_fpsMonitor();
    // Get instance field reference: private System.Int32 m_updateRate
    [[deprecated("Use field access instead!")]] int& dyn_m_updateRate();
    // Get instance field reference: private System.Int32 m_frameCount
    [[deprecated("Use field access instead!")]] int& dyn_m_frameCount();
    // Get instance field reference: private System.Single m_deltaTime
    [[deprecated("Use field access instead!")]] float& dyn_m_deltaTime();
    // Get instance field reference: private System.Single m_fps
    [[deprecated("Use field access instead!")]] float& dyn_m_fps();
    // Get instance field reference: private System.Single m_ms
    [[deprecated("Use field access instead!")]] float& dyn_m_ms();
    // public System.Void .ctor()
    // Offset: 0x2ADE840
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static G_FpsText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Fps::G_FpsText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<G_FpsText*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x2ADDFF0
    void Awake();
    // private System.Void Update()
    // Offset: 0x2ADE0EC
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x2ADD8CC
    void UpdateParameters();
    // private System.Void SetFpsRelatedTextColor(UnityEngine.UI.Text text, System.Single fps)
    // Offset: 0x2ADE370
    void SetFpsRelatedTextColor(::UnityEngine::UI::Text* text, float fps);
    // private System.Void Init()
    // Offset: 0x2ADDFF4
    void Init();
  }; // Tayx.Graphy.Fps.G_FpsText
  #pragma pack(pop)
  static check_size<sizeof(G_FpsText), 96 + sizeof(float)> __Tayx_Graphy_Fps_G_FpsTextSizeCheck;
  static_assert(sizeof(G_FpsText) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsText::*)()>(&Tayx::Graphy::Fps::G_FpsText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsText::*)()>(&Tayx::Graphy::Fps::G_FpsText::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsText*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsText::*)()>(&Tayx::Graphy::Fps::G_FpsText::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsText*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::SetFpsRelatedTextColor
// Il2CppName: SetFpsRelatedTextColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsText::*)(::UnityEngine::UI::Text*, float)>(&Tayx::Graphy::Fps::G_FpsText::SetFpsRelatedTextColor)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Text")->byval_arg;
    static auto* fps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsText*), "SetFpsRelatedTextColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, fps});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsText::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsText::*)()>(&Tayx::Graphy::Fps::G_FpsText::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsText*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
