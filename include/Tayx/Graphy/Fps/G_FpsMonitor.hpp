// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy::Fps
namespace Tayx::Graphy::Fps {
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: G_FpsMonitor
  class G_FpsMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Fps::G_FpsMonitor);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Fps::G_FpsMonitor*, "Tayx.Graphy.Fps", "G_FpsMonitor");
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Fps.G_FpsMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class G_FpsMonitor : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Tayx::Graphy::Fps::G_FpsMonitor::$$c
    class $$c;
    public:
    // private System.Int16[] m_fpsSamples
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int16_t> m_fpsSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private System.Int16[] m_fpsSamplesSorted
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int16_t> m_fpsSamplesSorted;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private System.Int16 m_fpsSamplesCapacity
    // Size: 0x2
    // Offset: 0x28
    int16_t m_fpsSamplesCapacity;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 m_onePercentSamples
    // Size: 0x2
    // Offset: 0x2A
    int16_t m_onePercentSamples;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 m_zero1PercentSamples
    // Size: 0x2
    // Offset: 0x2C
    int16_t m_zero1PercentSamples;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 m_fpsSamplesCount
    // Size: 0x2
    // Offset: 0x2E
    int16_t m_fpsSamplesCount;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 m_indexSample
    // Size: 0x2
    // Offset: 0x30
    int16_t m_indexSample;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: m_indexSample and: m_unscaledDeltaTime
    char __padding6[0x2] = {};
    // private System.Single m_unscaledDeltaTime
    // Size: 0x4
    // Offset: 0x34
    float m_unscaledDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int16 <CurrentFPS>k__BackingField
    // Size: 0x2
    // Offset: 0x38
    int16_t CurrentFPS;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 <AverageFPS>k__BackingField
    // Size: 0x2
    // Offset: 0x3A
    int16_t AverageFPS;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 <OnePercentFPS>k__BackingField
    // Size: 0x2
    // Offset: 0x3C
    int16_t OnePercentFPS;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 <Zero1PercentFps>k__BackingField
    // Size: 0x2
    // Offset: 0x3E
    int16_t Zero1PercentFps;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int16[] m_fpsSamples
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_m_fpsSamples();
    // Get instance field reference: private System.Int16[] m_fpsSamplesSorted
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_m_fpsSamplesSorted();
    // Get instance field reference: private System.Int16 m_fpsSamplesCapacity
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_fpsSamplesCapacity();
    // Get instance field reference: private System.Int16 m_onePercentSamples
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_onePercentSamples();
    // Get instance field reference: private System.Int16 m_zero1PercentSamples
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_zero1PercentSamples();
    // Get instance field reference: private System.Int16 m_fpsSamplesCount
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_fpsSamplesCount();
    // Get instance field reference: private System.Int16 m_indexSample
    [[deprecated("Use field access instead!")]] int16_t& dyn_m_indexSample();
    // Get instance field reference: private System.Single m_unscaledDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_m_unscaledDeltaTime();
    // Get instance field reference: private System.Int16 <CurrentFPS>k__BackingField
    [[deprecated("Use field access instead!")]] int16_t& dyn_$CurrentFPS$k__BackingField();
    // Get instance field reference: private System.Int16 <AverageFPS>k__BackingField
    [[deprecated("Use field access instead!")]] int16_t& dyn_$AverageFPS$k__BackingField();
    // Get instance field reference: private System.Int16 <OnePercentFPS>k__BackingField
    [[deprecated("Use field access instead!")]] int16_t& dyn_$OnePercentFPS$k__BackingField();
    // Get instance field reference: private System.Int16 <Zero1PercentFps>k__BackingField
    [[deprecated("Use field access instead!")]] int16_t& dyn_$Zero1PercentFps$k__BackingField();
    // public System.Int16 get_CurrentFPS()
    // Offset: 0x2ADDB34
    int16_t get_CurrentFPS();
    // private System.Void set_CurrentFPS(System.Int16 value)
    // Offset: 0x2ADDB3C
    void set_CurrentFPS(int16_t value);
    // public System.Int16 get_AverageFPS()
    // Offset: 0x2ADDB44
    int16_t get_AverageFPS();
    // private System.Void set_AverageFPS(System.Int16 value)
    // Offset: 0x2ADDB4C
    void set_AverageFPS(int16_t value);
    // public System.Int16 get_OnePercentFPS()
    // Offset: 0x2ADDB54
    int16_t get_OnePercentFPS();
    // private System.Void set_OnePercentFPS(System.Int16 value)
    // Offset: 0x2ADDB5C
    void set_OnePercentFPS(int16_t value);
    // public System.Int16 get_Zero1PercentFps()
    // Offset: 0x2ADDB64
    int16_t get_Zero1PercentFps();
    // private System.Void set_Zero1PercentFps(System.Int16 value)
    // Offset: 0x2ADDB6C
    void set_Zero1PercentFps(int16_t value);
    // public System.Void .ctor()
    // Offset: 0x2ADDF3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static G_FpsMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Fps::G_FpsMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<G_FpsMonitor*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x2ADDB74
    void Awake();
    // private System.Void Update()
    // Offset: 0x2ADDC1C
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x2ADD88C
    void UpdateParameters();
    // private System.Void Init()
    // Offset: 0x2ADDB78
    void Init();
  }; // Tayx.Graphy.Fps.G_FpsMonitor
  #pragma pack(pop)
  static check_size<sizeof(G_FpsMonitor), 62 + sizeof(int16_t)> __Tayx_Graphy_Fps_G_FpsMonitorSizeCheck;
  static_assert(sizeof(G_FpsMonitor) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::get_CurrentFPS
// Il2CppName: get_CurrentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::get_CurrentFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "get_CurrentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::set_CurrentFPS
// Il2CppName: set_CurrentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)(int16_t)>(&Tayx::Graphy::Fps::G_FpsMonitor::set_CurrentFPS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "set_CurrentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::get_AverageFPS
// Il2CppName: get_AverageFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::get_AverageFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "get_AverageFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::set_AverageFPS
// Il2CppName: set_AverageFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)(int16_t)>(&Tayx::Graphy::Fps::G_FpsMonitor::set_AverageFPS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "set_AverageFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::get_OnePercentFPS
// Il2CppName: get_OnePercentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::get_OnePercentFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "get_OnePercentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::set_OnePercentFPS
// Il2CppName: set_OnePercentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)(int16_t)>(&Tayx::Graphy::Fps::G_FpsMonitor::set_OnePercentFPS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "set_OnePercentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::get_Zero1PercentFps
// Il2CppName: get_Zero1PercentFps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::get_Zero1PercentFps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "get_Zero1PercentFps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::set_Zero1PercentFps
// Il2CppName: set_Zero1PercentFps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)(int16_t)>(&Tayx::Graphy::Fps::G_FpsMonitor::set_Zero1PercentFps)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "set_Zero1PercentFps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::G_FpsMonitor::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::G_FpsMonitor::*)()>(&Tayx::Graphy::Fps::G_FpsMonitor::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::G_FpsMonitor*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
