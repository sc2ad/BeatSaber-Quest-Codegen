// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Tayx.Graphy.Utils.G_Singleton`1
#include "Tayx/Graphy/Utils/G_Singleton_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Skipping declaration: DebugVariable because it is already included!
  // Skipping declaration: DebugComparer because it is already included!
  // Skipping declaration: DebugCondition because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Tayx::Graphy::Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: G_FpsMonitor
  class G_FpsMonitor;
}
// Forward declaring namespace: Tayx::Graphy::Ram
namespace Tayx::Graphy::Ram {
  // Forward declaring type: G_RamMonitor
  class G_RamMonitor;
}
// Forward declaring namespace: Tayx::Graphy::Audio
namespace Tayx::Graphy::Audio {
  // Forward declaring type: G_AudioMonitor
  class G_AudioMonitor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Tayx.Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyDebugger
  class GraphyDebugger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::GraphyDebugger);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyDebugger*, "Tayx.Graphy", "GraphyDebugger");
// Type namespace: Tayx.Graphy
namespace Tayx::Graphy {
  // WARNING Size may be invalid!
  // Autogenerated type: Tayx.Graphy.GraphyDebugger
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphyDebugger : public ::Tayx::Graphy::Utils::G_Singleton_1<::Tayx::Graphy::GraphyDebugger*> {
    public:
    // Nested type: ::Tayx::Graphy::GraphyDebugger::DebugVariable
    struct DebugVariable;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::DebugComparer
    struct DebugComparer;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::ConditionEvaluation
    struct ConditionEvaluation;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::MessageType
    struct MessageType;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::DebugCondition
    struct DebugCondition;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::DebugPacket
    class DebugPacket;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::$$c__DisplayClass19_0
    class $$c__DisplayClass19_0;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: ::Tayx::Graphy::GraphyDebugger::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable
    // [TokenAttribute] Offset: FFFFFFFF
    struct DebugVariable/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DebugVariable
      constexpr DebugVariable(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps
      static constexpr const int Fps = 0;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Fps();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps
      static void _set_Fps(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Min
      static constexpr const int Fps_Min = 1;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Min
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Fps_Min();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Min
      static void _set_Fps_Min(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Max
      static constexpr const int Fps_Max = 2;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Max
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Fps_Max();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Max
      static void _set_Fps_Max(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Avg
      static constexpr const int Fps_Avg = 3;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Avg
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Fps_Avg();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Fps_Avg
      static void _set_Fps_Avg(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Allocated
      static constexpr const int Ram_Allocated = 4;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Allocated
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Ram_Allocated();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Allocated
      static void _set_Ram_Allocated(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Reserved
      static constexpr const int Ram_Reserved = 5;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Reserved
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Ram_Reserved();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Reserved
      static void _set_Ram_Reserved(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Mono
      static constexpr const int Ram_Mono = 6;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Mono
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Ram_Mono();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Ram_Mono
      static void _set_Ram_Mono(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Audio_DB
      static constexpr const int Audio_DB = 7;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Audio_DB
      static ::Tayx::Graphy::GraphyDebugger::DebugVariable _get_Audio_DB();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Audio_DB
      static void _set_Audio_DB(::Tayx::Graphy::GraphyDebugger::DebugVariable value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable
    #pragma pack(pop)
    static check_size<sizeof(GraphyDebugger::DebugVariable), 0 + sizeof(int)> __Tayx_Graphy_GraphyDebugger_DebugVariableSizeCheck;
    static_assert(sizeof(GraphyDebugger::DebugVariable) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer
    // [TokenAttribute] Offset: FFFFFFFF
    struct DebugComparer/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DebugComparer
      constexpr DebugComparer(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Less_than
      static constexpr const int Less_than = 0;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Less_than
      static ::Tayx::Graphy::GraphyDebugger::DebugComparer _get_Less_than();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Less_than
      static void _set_Less_than(::Tayx::Graphy::GraphyDebugger::DebugComparer value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_less_than
      static constexpr const int Equals_or_less_than = 1;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_less_than
      static ::Tayx::Graphy::GraphyDebugger::DebugComparer _get_Equals_or_less_than();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_less_than
      static void _set_Equals_or_less_than(::Tayx::Graphy::GraphyDebugger::DebugComparer value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals
      static constexpr const int Equals = 2;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals
      static ::Tayx::Graphy::GraphyDebugger::DebugComparer _get_Equals();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals
      static void _set_Equals(::Tayx::Graphy::GraphyDebugger::DebugComparer value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_greater_than
      static constexpr const int Equals_or_greater_than = 3;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_greater_than
      static ::Tayx::Graphy::GraphyDebugger::DebugComparer _get_Equals_or_greater_than();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Equals_or_greater_than
      static void _set_Equals_or_greater_than(::Tayx::Graphy::GraphyDebugger::DebugComparer value);
      // static field const value: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Greater_than
      static constexpr const int Greater_than = 4;
      // Get static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Greater_than
      static ::Tayx::Graphy::GraphyDebugger::DebugComparer _get_Greater_than();
      // Set static field: static public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Greater_than
      static void _set_Greater_than(::Tayx::Graphy::GraphyDebugger::DebugComparer value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer
    #pragma pack(pop)
    static check_size<sizeof(GraphyDebugger::DebugComparer), 0 + sizeof(int)> __Tayx_Graphy_GraphyDebugger_DebugComparerSizeCheck;
    static_assert(sizeof(GraphyDebugger::DebugComparer) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition
    // [TokenAttribute] Offset: FFFFFFFF
    struct DebugCondition/*, public ::System::ValueType*/ {
      public:
      public:
      // [TooltipAttribute] Offset: 0x1150C80
      // public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Variable
      // Size: 0x4
      // Offset: 0x0
      ::Tayx::Graphy::GraphyDebugger::DebugVariable Variable;
      // Field size check
      static_assert(sizeof(::Tayx::Graphy::GraphyDebugger::DebugVariable) == 0x4);
      // [TooltipAttribute] Offset: 0x1150CB8
      // public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Comparer
      // Size: 0x4
      // Offset: 0x4
      ::Tayx::Graphy::GraphyDebugger::DebugComparer Comparer;
      // Field size check
      static_assert(sizeof(::Tayx::Graphy::GraphyDebugger::DebugComparer) == 0x4);
      // [TooltipAttribute] Offset: 0x1150CF0
      // public System.Single Value
      // Size: 0x4
      // Offset: 0x8
      float Value;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: DebugCondition
      constexpr DebugCondition(::Tayx::Graphy::GraphyDebugger::DebugVariable Variable_ = {}, ::Tayx::Graphy::GraphyDebugger::DebugComparer Comparer_ = {}, float Value_ = {}) noexcept : Variable{Variable_}, Comparer{Comparer_}, Value{Value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable Variable
      [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyDebugger::DebugVariable& dyn_Variable();
      // Get instance field reference: public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugComparer Comparer
      [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyDebugger::DebugComparer& dyn_Comparer();
      // Get instance field reference: public System.Single Value
      [[deprecated("Use field access instead!")]] float& dyn_Value();
    }; // Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition
    #pragma pack(pop)
    static check_size<sizeof(GraphyDebugger::DebugCondition), 8 + sizeof(float)> __Tayx_Graphy_GraphyDebugger_DebugConditionSizeCheck;
    static_assert(sizeof(GraphyDebugger::DebugCondition) == 0xC);
    public:
    // private System.Collections.Generic.List`1<Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket> m_debugPackets
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugPacket*>* m_debugPackets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugPacket*>*) == 0x8);
    // private Tayx.Graphy.Fps.G_FpsMonitor m_fpsMonitor
    // Size: 0x8
    // Offset: 0x20
    ::Tayx::Graphy::Fps::G_FpsMonitor* m_fpsMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Fps::G_FpsMonitor*) == 0x8);
    // private Tayx.Graphy.Ram.G_RamMonitor m_ramMonitor
    // Size: 0x8
    // Offset: 0x28
    ::Tayx::Graphy::Ram::G_RamMonitor* m_ramMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Ram::G_RamMonitor*) == 0x8);
    // private Tayx.Graphy.Audio.G_AudioMonitor m_audioMonitor
    // Size: 0x8
    // Offset: 0x30
    ::Tayx::Graphy::Audio::G_AudioMonitor* m_audioMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Audio::G_AudioMonitor*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket> m_debugPackets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugPacket*>*& dyn_m_debugPackets();
    // Get instance field reference: private Tayx.Graphy.Fps.G_FpsMonitor m_fpsMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Fps::G_FpsMonitor*& dyn_m_fpsMonitor();
    // Get instance field reference: private Tayx.Graphy.Ram.G_RamMonitor m_ramMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Ram::G_RamMonitor*& dyn_m_ramMonitor();
    // Get instance field reference: private Tayx.Graphy.Audio.G_AudioMonitor m_audioMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Audio::G_AudioMonitor*& dyn_m_audioMonitor();
    // private System.Void Start()
    // Offset: 0x2ADE8E8
    void Start();
    // private System.Void Update()
    // Offset: 0x2ADE970
    void Update();
    // public System.Void AddNewDebugPacket(Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket newDebugPacket)
    // Offset: 0x2ADED6C
    void AddNewDebugPacket(::Tayx::Graphy::GraphyDebugger::DebugPacket* newDebugPacket);
    // public System.Void AddNewDebugPacket(System.Int32 newId, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition newDebugCondition, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.MessageType newMessageType, System.String newMessage, System.Boolean newDebugBreak, System.Action newCallback)
    // Offset: 0x2ADEDE0
    void AddNewDebugPacket(int newId, ::Tayx::Graphy::GraphyDebugger::DebugCondition newDebugCondition, ::Tayx::Graphy::GraphyDebugger::MessageType newMessageType, ::StringW newMessage, bool newDebugBreak, ::System::Action* newCallback);
    // public System.Void AddNewDebugPacket(System.Int32 newId, System.Collections.Generic.List`1<Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition> newDebugConditions, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.MessageType newMessageType, System.String newMessage, System.Boolean newDebugBreak, System.Action newCallback)
    // Offset: 0x2ADEFA8
    void AddNewDebugPacket(int newId, ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugCondition>* newDebugConditions, ::Tayx::Graphy::GraphyDebugger::MessageType newMessageType, ::StringW newMessage, bool newDebugBreak, ::System::Action* newCallback);
    // public System.Void AddNewDebugPacket(System.Int32 newId, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition newDebugCondition, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.MessageType newMessageType, System.String newMessage, System.Boolean newDebugBreak, System.Collections.Generic.List`1<System.Action> newCallbacks)
    // Offset: 0x2ADF074
    void AddNewDebugPacket(int newId, ::Tayx::Graphy::GraphyDebugger::DebugCondition newDebugCondition, ::Tayx::Graphy::GraphyDebugger::MessageType newMessageType, ::StringW newMessage, bool newDebugBreak, ::System::Collections::Generic::List_1<::System::Action*>* newCallbacks);
    // public System.Void AddNewDebugPacket(System.Int32 newId, System.Collections.Generic.List`1<Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition> newDebugConditions, Tayx.Graphy.GraphyDebugger/Tayx.Graphy.MessageType newMessageType, System.String newMessage, System.Boolean newDebugBreak, System.Collections.Generic.List`1<System.Action> newCallbacks)
    // Offset: 0x2ADF150
    void AddNewDebugPacket(int newId, ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugCondition>* newDebugConditions, ::Tayx::Graphy::GraphyDebugger::MessageType newMessageType, ::StringW newMessage, bool newDebugBreak, ::System::Collections::Generic::List_1<::System::Action*>* newCallbacks);
    // public Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket GetFirstDebugPacketWithId(System.Int32 packetId)
    // Offset: 0x2ADF204
    ::Tayx::Graphy::GraphyDebugger::DebugPacket* GetFirstDebugPacketWithId(int packetId);
    // public System.Collections.Generic.List`1<Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket> GetAllDebugPacketsWithId(System.Int32 packetId)
    // Offset: 0x2ADF2CC
    ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugPacket*>* GetAllDebugPacketsWithId(int packetId);
    // public System.Void RemoveFirstDebugPacketWithId(System.Int32 packetId)
    // Offset: 0x2ADF398
    void RemoveFirstDebugPacketWithId(int packetId);
    // public System.Void RemoveAllDebugPacketsWithId(System.Int32 packetId)
    // Offset: 0x2ADF438
    void RemoveAllDebugPacketsWithId(int packetId);
    // public System.Void AddCallbackToFirstDebugPacketWithId(System.Action callback, System.Int32 id)
    // Offset: 0x2ADF514
    void AddCallbackToFirstDebugPacketWithId(::System::Action* callback, int id);
    // public System.Void AddCallbackToAllDebugPacketWithId(System.Action callback, System.Int32 id)
    // Offset: 0x2ADF5B0
    void AddCallbackToAllDebugPacketWithId(::System::Action* callback, int id);
    // private System.Void CheckDebugPackets()
    // Offset: 0x2ADE974
    void CheckDebugPackets();
    // private System.Boolean CheckIfConditionIsMet(Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugCondition debugCondition)
    // Offset: 0x2ADF758
    bool CheckIfConditionIsMet(::Tayx::Graphy::GraphyDebugger::DebugCondition debugCondition);
    // private System.Single GetRequestedValueFromDebugVariable(Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugVariable debugVariable)
    // Offset: 0x2ADFD64
    float GetRequestedValueFromDebugVariable(::Tayx::Graphy::GraphyDebugger::DebugVariable debugVariable);
    // private System.Void ExecuteOperationsInDebugPacket(Tayx.Graphy.GraphyDebugger/Tayx.Graphy.DebugPacket debugPacket)
    // Offset: 0x2ADF898
    void ExecuteOperationsInDebugPacket(::Tayx::Graphy::GraphyDebugger::DebugPacket* debugPacket);
    // protected System.Void .ctor()
    // Offset: 0x2ADE850
    // Implemented from: Tayx.Graphy.Utils.G_Singleton`1
    // Base method: System.Void G_Singleton_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphyDebugger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::GraphyDebugger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphyDebugger*, creationType>()));
    }
  }; // Tayx.Graphy.GraphyDebugger
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyDebugger::DebugCondition, "Tayx.Graphy", "GraphyDebugger/DebugCondition");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyDebugger::DebugComparer, "Tayx.Graphy", "GraphyDebugger/DebugComparer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyDebugger::DebugVariable, "Tayx.Graphy", "GraphyDebugger/DebugVariable");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)()>(&Tayx::Graphy::GraphyDebugger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)()>(&Tayx::Graphy::GraphyDebugger::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddNewDebugPacket
// Il2CppName: AddNewDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(::Tayx::Graphy::GraphyDebugger::DebugPacket*)>(&Tayx::Graphy::GraphyDebugger::AddNewDebugPacket)> {
  static const MethodInfo* get() {
    static auto* newDebugPacket = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddNewDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newDebugPacket});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddNewDebugPacket
// Il2CppName: AddNewDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int, ::Tayx::Graphy::GraphyDebugger::DebugCondition, ::Tayx::Graphy::GraphyDebugger::MessageType, ::StringW, bool, ::System::Action*)>(&Tayx::Graphy::GraphyDebugger::AddNewDebugPacket)> {
  static const MethodInfo* get() {
    static auto* newId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newDebugCondition = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugCondition")->byval_arg;
    static auto* newMessageType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/MessageType")->byval_arg;
    static auto* newMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newDebugBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddNewDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newId, newDebugCondition, newMessageType, newMessage, newDebugBreak, newCallback});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddNewDebugPacket
// Il2CppName: AddNewDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int, ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugCondition>*, ::Tayx::Graphy::GraphyDebugger::MessageType, ::StringW, bool, ::System::Action*)>(&Tayx::Graphy::GraphyDebugger::AddNewDebugPacket)> {
  static const MethodInfo* get() {
    static auto* newId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newDebugConditions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugCondition")})->byval_arg;
    static auto* newMessageType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/MessageType")->byval_arg;
    static auto* newMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newDebugBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddNewDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newId, newDebugConditions, newMessageType, newMessage, newDebugBreak, newCallback});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddNewDebugPacket
// Il2CppName: AddNewDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int, ::Tayx::Graphy::GraphyDebugger::DebugCondition, ::Tayx::Graphy::GraphyDebugger::MessageType, ::StringW, bool, ::System::Collections::Generic::List_1<::System::Action*>*)>(&Tayx::Graphy::GraphyDebugger::AddNewDebugPacket)> {
  static const MethodInfo* get() {
    static auto* newId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newDebugCondition = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugCondition")->byval_arg;
    static auto* newMessageType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/MessageType")->byval_arg;
    static auto* newMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newDebugBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newCallbacks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Action")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddNewDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newId, newDebugCondition, newMessageType, newMessage, newDebugBreak, newCallbacks});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddNewDebugPacket
// Il2CppName: AddNewDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int, ::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugCondition>*, ::Tayx::Graphy::GraphyDebugger::MessageType, ::StringW, bool, ::System::Collections::Generic::List_1<::System::Action*>*)>(&Tayx::Graphy::GraphyDebugger::AddNewDebugPacket)> {
  static const MethodInfo* get() {
    static auto* newId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newDebugConditions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugCondition")})->byval_arg;
    static auto* newMessageType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/MessageType")->byval_arg;
    static auto* newMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newDebugBreak = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newCallbacks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Action")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddNewDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newId, newDebugConditions, newMessageType, newMessage, newDebugBreak, newCallbacks});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::GetFirstDebugPacketWithId
// Il2CppName: GetFirstDebugPacketWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyDebugger::DebugPacket* (Tayx::Graphy::GraphyDebugger::*)(int)>(&Tayx::Graphy::GraphyDebugger::GetFirstDebugPacketWithId)> {
  static const MethodInfo* get() {
    static auto* packetId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "GetFirstDebugPacketWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetId});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::GetAllDebugPacketsWithId
// Il2CppName: GetAllDebugPacketsWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Tayx::Graphy::GraphyDebugger::DebugPacket*>* (Tayx::Graphy::GraphyDebugger::*)(int)>(&Tayx::Graphy::GraphyDebugger::GetAllDebugPacketsWithId)> {
  static const MethodInfo* get() {
    static auto* packetId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "GetAllDebugPacketsWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetId});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::RemoveFirstDebugPacketWithId
// Il2CppName: RemoveFirstDebugPacketWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int)>(&Tayx::Graphy::GraphyDebugger::RemoveFirstDebugPacketWithId)> {
  static const MethodInfo* get() {
    static auto* packetId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "RemoveFirstDebugPacketWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetId});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::RemoveAllDebugPacketsWithId
// Il2CppName: RemoveAllDebugPacketsWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(int)>(&Tayx::Graphy::GraphyDebugger::RemoveAllDebugPacketsWithId)> {
  static const MethodInfo* get() {
    static auto* packetId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "RemoveAllDebugPacketsWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packetId});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddCallbackToFirstDebugPacketWithId
// Il2CppName: AddCallbackToFirstDebugPacketWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(::System::Action*, int)>(&Tayx::Graphy::GraphyDebugger::AddCallbackToFirstDebugPacketWithId)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddCallbackToFirstDebugPacketWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, id});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::AddCallbackToAllDebugPacketWithId
// Il2CppName: AddCallbackToAllDebugPacketWithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(::System::Action*, int)>(&Tayx::Graphy::GraphyDebugger::AddCallbackToAllDebugPacketWithId)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "AddCallbackToAllDebugPacketWithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, id});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::CheckDebugPackets
// Il2CppName: CheckDebugPackets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)()>(&Tayx::Graphy::GraphyDebugger::CheckDebugPackets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "CheckDebugPackets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::CheckIfConditionIsMet
// Il2CppName: CheckIfConditionIsMet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyDebugger::*)(::Tayx::Graphy::GraphyDebugger::DebugCondition)>(&Tayx::Graphy::GraphyDebugger::CheckIfConditionIsMet)> {
  static const MethodInfo* get() {
    static auto* debugCondition = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugCondition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "CheckIfConditionIsMet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugCondition});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::GetRequestedValueFromDebugVariable
// Il2CppName: GetRequestedValueFromDebugVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyDebugger::*)(::Tayx::Graphy::GraphyDebugger::DebugVariable)>(&Tayx::Graphy::GraphyDebugger::GetRequestedValueFromDebugVariable)> {
  static const MethodInfo* get() {
    static auto* debugVariable = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugVariable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "GetRequestedValueFromDebugVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugVariable});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::ExecuteOperationsInDebugPacket
// Il2CppName: ExecuteOperationsInDebugPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyDebugger::*)(::Tayx::Graphy::GraphyDebugger::DebugPacket*)>(&Tayx::Graphy::GraphyDebugger::ExecuteOperationsInDebugPacket)> {
  static const MethodInfo* get() {
    static auto* debugPacket = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyDebugger/DebugPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyDebugger*), "ExecuteOperationsInDebugPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugPacket});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyDebugger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
