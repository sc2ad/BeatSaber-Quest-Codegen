// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Tayx.Graphy.Utils.NumString
namespace Tayx::Graphy::Utils::NumString {
  // Forward declaring type: G_IntString
  class G_IntString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Utils::NumString::G_IntString);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Utils::NumString::G_IntString*, "Tayx.Graphy.Utils.NumString", "G_IntString");
// Type namespace: Tayx.Graphy.Utils.NumString
namespace Tayx::Graphy::Utils::NumString {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Utils.NumString.G_IntString
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class G_IntString : public ::Il2CppObject {
    public:
    // Get static field: static private System.String[] m_negativeBuffer
    static ::ArrayW<::StringW> _get_m_negativeBuffer();
    // Set static field: static private System.String[] m_negativeBuffer
    static void _set_m_negativeBuffer(::ArrayW<::StringW> value);
    // Get static field: static private System.String[] m_positiveBuffer
    static ::ArrayW<::StringW> _get_m_positiveBuffer();
    // Set static field: static private System.String[] m_positiveBuffer
    static void _set_m_positiveBuffer(::ArrayW<::StringW> value);
    // static public System.Int32 get_MinValue()
    // Offset: 0x2AE34EC
    static int get_MinValue();
    // static public System.Int32 get_MaxValue()
    // Offset: 0x2AE3568
    static int get_MaxValue();
    // static private System.Void .cctor()
    // Offset: 0x2AE35DC
    static void _cctor();
    // static public System.Void Init(System.Int32 minNegativeValue, System.Int32 maxPositiveValue)
    // Offset: 0x2AD9F08
    static void Init(int minNegativeValue, int maxPositiveValue);
    // static public System.Void Dispose()
    // Offset: 0x2AE1354
    static void Dispose();
    // static public System.String ToStringNonAlloc(System.Int32 value)
    // Offset: 0x2AD9390
    static ::StringW ToStringNonAlloc(int value);
  }; // Tayx.Graphy.Utils.NumString.G_IntString
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::get_MinValue
// Il2CppName: get_MinValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Tayx::Graphy::Utils::NumString::G_IntString::get_MinValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), "get_MinValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::get_MaxValue
// Il2CppName: get_MaxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Tayx::Graphy::Utils::NumString::G_IntString::get_MaxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), "get_MaxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Tayx::Graphy::Utils::NumString::G_IntString::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&Tayx::Graphy::Utils::NumString::G_IntString::Init)> {
  static const MethodInfo* get() {
    static auto* minNegativeValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxPositiveValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minNegativeValue, maxPositiveValue});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Tayx::Graphy::Utils::NumString::G_IntString::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::NumString::G_IntString::ToStringNonAlloc
// Il2CppName: ToStringNonAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&Tayx::Graphy::Utils::NumString::G_IntString::ToStringNonAlloc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::NumString::G_IntString*), "ToStringNonAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
