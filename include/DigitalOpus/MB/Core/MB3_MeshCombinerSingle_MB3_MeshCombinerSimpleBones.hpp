// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle
#include "DigitalOpus/MB/Core/MB3_MeshCombinerSingle.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose
#include "DigitalOpus/MB/Core/MB3_MeshCombinerSingle_BoneAndBindpose.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB_IMeshBakerSettings
  class MB_IMeshBakerSettings;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*, "DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB3_MeshCombinerSimpleBones");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB3_MeshCombinerSimpleBones
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones : public ::Il2CppObject {
    public:
    public:
    // private DigitalOpus.MB.Core.MB3_MeshCombinerSingle combiner
    // Size: 0x8
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* combiner;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*) == 0x8);
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject>[] boneIdx2dgoMap
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*> boneIdx2dgoMap;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*>) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> boneIdxsToDelete
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<int>* boneIdxsToDelete;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose> bonesToAdd
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose>* bonesToAdd;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose,System.Int32> boneAndBindPose2idx
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose, int>* boneAndBindPose2idx;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose, int>*) == 0x8);
    // private System.Boolean _didSetup
    // Size: 0x1
    // Offset: 0x38
    bool didSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_MeshCombinerSingle combiner
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*& dyn_combiner();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject>[] boneIdx2dgoMap
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*>& dyn_boneIdx2dgoMap();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> boneIdxsToDelete
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn_boneIdxsToDelete();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose> bonesToAdd
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose>*& dyn_bonesToAdd();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose,System.Int32> boneAndBindPose2idx
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose, int>*& dyn_boneAndBindPose2idx();
    // Get instance field reference: private System.Boolean _didSetup
    [[deprecated("Use field access instead!")]] bool& dyn__didSetup();
    // public System.Void .ctor(DigitalOpus.MB.Core.MB3_MeshCombinerSingle cm)
    // Offset: 0x11F73B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones* New_ctor(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* cm) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*, creationType>(cm)));
    }
    // public System.Collections.Generic.HashSet`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.BoneAndBindpose> GetBonesToAdd()
    // Offset: 0x11F7488
    ::System::Collections::Generic::HashSet_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose>* GetBonesToAdd();
    // public System.Int32 GetNumBonesToDelete()
    // Offset: 0x11F7490
    int GetNumBonesToDelete();
    // public System.Void BuildBoneIdx2DGOMapIfNecessary(System.Int32[] _goToDelete)
    // Offset: 0x11F74E0
    void BuildBoneIdx2DGOMapIfNecessary(::ArrayW<int> _goToDelete);
    // public System.Void FindBonesToDelete(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo)
    // Offset: 0x11F787C
    void FindBonesToDelete(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo);
    // public System.Int32 GetNewBonesLength()
    // Offset: 0x11F7994
    int GetNewBonesLength();
    // public System.Boolean CollectBonesToAddForDGO(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, UnityEngine.Renderer r, System.Boolean noExtraBonesForMeshRenderers, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannelsCache meshChannelCache)
    // Offset: 0x11F7A0C
    bool CollectBonesToAddForDGO(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::UnityEngine::Renderer* r, bool noExtraBonesForMeshRenderers, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache* meshChannelCache);
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject>[] _buildBoneIdx2dgoMap()
    // Offset: 0x11F76C0
    ::ArrayW<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*> _buildBoneIdx2dgoMap();
    // public System.Void CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes(UnityEngine.Transform[] nbones, UnityEngine.Matrix4x4[] nbindPoses, UnityEngine.BoneWeight[] nboneWeights, System.Int32 totalDeleteVerts)
    // Offset: 0x11F8620
    void CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes(::ArrayW<::UnityEngine::Transform*> nbones, ::ArrayW<::UnityEngine::Matrix4x4> nbindPoses, ::ArrayW<::UnityEngine::BoneWeight> nboneWeights, int totalDeleteVerts);
    // static public System.Void AddBonesToNewBonesArrayAndAdjustBWIndexes(DigitalOpus.MB.Core.MB3_MeshCombinerSingle combiner, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, UnityEngine.Renderer r, System.Int32 vertsIdx, UnityEngine.Transform[] nbones, UnityEngine.BoneWeight[] nboneWeights, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannelsCache meshChannelCache)
    // Offset: 0x11F8AC0
    static void AddBonesToNewBonesArrayAndAdjustBWIndexes(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* combiner, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::UnityEngine::Renderer* r, int vertsIdx, ::ArrayW<::UnityEngine::Transform*> nbones, ::ArrayW<::UnityEngine::BoneWeight> nboneWeights, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache* meshChannelCache);
    // System.Void CopyVertsNormsTansToBuffers(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, DigitalOpus.MB.Core.MB_IMeshBakerSettings settings, System.Int32 vertsIdx, UnityEngine.Vector3[] nnorms, UnityEngine.Vector4[] ntangs, UnityEngine.Vector3[] nverts, UnityEngine.Vector3[] normals, UnityEngine.Vector4[] tangents, UnityEngine.Vector3[] verts)
    // Offset: 0x11F8FD8
    void CopyVertsNormsTansToBuffers(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::DigitalOpus::MB::Core::MB_IMeshBakerSettings* settings, int vertsIdx, ::ArrayW<::UnityEngine::Vector3> nnorms, ::ArrayW<::UnityEngine::Vector4> ntangs, ::ArrayW<::UnityEngine::Vector3> nverts, ::ArrayW<::UnityEngine::Vector3> normals, ::ArrayW<::UnityEngine::Vector4> tangents, ::ArrayW<::UnityEngine::Vector3> verts);
  }; // DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB3_MeshCombinerSimpleBones
  #pragma pack(pop)
  static check_size<sizeof(MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones), 56 + sizeof(bool)> __DigitalOpus_MB_Core_MB3_MeshCombinerSingle_MB3_MeshCombinerSimpleBonesSizeCheck;
  static_assert(sizeof(MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetBonesToAdd
// Il2CppName: GetBonesToAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose>* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetBonesToAdd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "GetBonesToAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetNumBonesToDelete
// Il2CppName: GetNumBonesToDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetNumBonesToDelete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "GetNumBonesToDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::BuildBoneIdx2DGOMapIfNecessary
// Il2CppName: BuildBoneIdx2DGOMapIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)(::ArrayW<int>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::BuildBoneIdx2DGOMapIfNecessary)> {
  static const MethodInfo* get() {
    static auto* _goToDelete = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "BuildBoneIdx2DGOMapIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_goToDelete});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::FindBonesToDelete
// Il2CppName: FindBonesToDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::FindBonesToDelete)> {
  static const MethodInfo* get() {
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "FindBonesToDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dgo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetNewBonesLength
// Il2CppName: GetNewBonesLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::GetNewBonesLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "GetNewBonesLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CollectBonesToAddForDGO
// Il2CppName: CollectBonesToAddForDGO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::UnityEngine::Renderer*, bool, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CollectBonesToAddForDGO)> {
  static const MethodInfo* get() {
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* noExtraBonesForMeshRenderers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* meshChannelCache = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannelsCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "CollectBonesToAddForDGO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dgo, r, noExtraBonesForMeshRenderers, meshChannelCache});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::_buildBoneIdx2dgoMap
// Il2CppName: _buildBoneIdx2dgoMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*> (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::_buildBoneIdx2dgoMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "_buildBoneIdx2dgoMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes
// Il2CppName: CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)(::ArrayW<::UnityEngine::Transform*>, ::ArrayW<::UnityEngine::Matrix4x4>, ::ArrayW<::UnityEngine::BoneWeight>, int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes)> {
  static const MethodInfo* get() {
    static auto* nbones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* nbindPoses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4"), 1)->byval_arg;
    static auto* nboneWeights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    static auto* totalDeleteVerts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "CopyBonesWeAreKeepingToNewBonesArrayAndAdjustBWIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nbones, nbindPoses, nboneWeights, totalDeleteVerts});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::AddBonesToNewBonesArrayAndAdjustBWIndexes
// Il2CppName: AddBonesToNewBonesArrayAndAdjustBWIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::UnityEngine::Renderer*, int, ::ArrayW<::UnityEngine::Transform*>, ::ArrayW<::UnityEngine::BoneWeight>, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::AddBonesToNewBonesArrayAndAdjustBWIndexes)> {
  static const MethodInfo* get() {
    static auto* combiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle")->byval_arg;
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* vertsIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nbones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* nboneWeights = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "BoneWeight"), 1)->byval_arg;
    static auto* meshChannelCache = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannelsCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "AddBonesToNewBonesArrayAndAdjustBWIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combiner, dgo, r, vertsIdx, nbones, nboneWeights, meshChannelCache});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CopyVertsNormsTansToBuffers
// Il2CppName: CopyVertsNormsTansToBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::DigitalOpus::MB::Core::MB_IMeshBakerSettings*, int, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector4>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector4>, ::ArrayW<::UnityEngine::Vector3>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones::CopyVertsNormsTansToBuffers)> {
  static const MethodInfo* get() {
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_IMeshBakerSettings")->byval_arg;
    static auto* vertsIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nnorms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* ntangs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* nverts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* normals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* tangents = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4"), 1)->byval_arg;
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones*), "CopyVertsNormsTansToBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dgo, settings, vertsIdx, nnorms, ntangs, nverts, normals, tangents, verts});
  }
};
