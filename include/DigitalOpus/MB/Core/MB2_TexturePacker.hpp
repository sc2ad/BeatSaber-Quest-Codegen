// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: DigitalOpus.MB.Core.AtlasPadding
#include "DigitalOpus/MB/Core/AtlasPadding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB2_TexturePacker
  class MB2_TexturePacker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB2_TexturePacker);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB2_TexturePacker*, "DigitalOpus.MB.Core", "MB2_TexturePacker");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x15
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB2_TexturePacker
  // [TokenAttribute] Offset: FFFFFFFF
  class MB2_TexturePacker : public ::Il2CppObject {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::NodeType
    struct NodeType;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::PixRect
    class PixRect;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::Image
    class Image;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::ImgIDComparer
    class ImgIDComparer;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::ImageHeightComparer
    class ImageHeightComparer;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::ImageWidthComparer
    class ImageWidthComparer;
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePacker::ImageAreaComparer
    class ImageAreaComparer;
    public:
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // public System.Boolean atlasMustBePowerOfTwo
    // Size: 0x1
    // Offset: 0x14
    bool atlasMustBePowerOfTwo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static System.Int32 MAX_RECURSION_DEPTH
    static constexpr const int MAX_RECURSION_DEPTH = 10;
    // Get static field: static System.Int32 MAX_RECURSION_DEPTH
    static int _get_MAX_RECURSION_DEPTH();
    // Set static field: static System.Int32 MAX_RECURSION_DEPTH
    static void _set_MAX_RECURSION_DEPTH(int value);
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: public System.Boolean atlasMustBePowerOfTwo
    [[deprecated("Use field access instead!")]] bool& dyn_atlasMustBePowerOfTwo();
    // protected System.Void .ctor()
    // Offset: 0xC17A60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB2_TexturePacker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB2_TexturePacker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB2_TexturePacker*, creationType>()));
    }
    // static public System.Int32 RoundToNearestPositivePowerOfTwo(System.Int32 x)
    // Offset: 0xC17324
    static int RoundToNearestPositivePowerOfTwo(int x);
    // static public System.Int32 CeilToNearestPowerOfTwo(System.Int32 x)
    // Offset: 0xC173B8
    static int CeilToNearestPowerOfTwo(int x);
    // public DigitalOpus.MB.Core.AtlasPackingResult[] GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Int32 padding)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> GetRects(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding);
    // public DigitalOpus.MB.Core.AtlasPackingResult[] GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Boolean doMultiAtlas)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> GetRects(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>* paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas);
    // System.Boolean ScaleAtlasToFitMaxDim(UnityEngine.Vector2 rootWH, System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image> images, System.Int32 maxDimensionX, System.Int32 maxDimensionY, DigitalOpus.MB.Core.AtlasPadding padding, System.Int32 minImageSizeX, System.Int32 minImageSizeY, System.Int32 masterImageSizeX, System.Int32 masterImageSizeY, ref System.Int32 outW, ref System.Int32 outH, out System.Single padX, out System.Single padY, out System.Int32 newMinSizeX, out System.Int32 newMinSizeY)
    // Offset: 0xC17444
    bool ScaleAtlasToFitMaxDim(::UnityEngine::Vector2 rootWH, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB2_TexturePacker::Image*>* images, int maxDimensionX, int maxDimensionY, ::DigitalOpus::MB::Core::AtlasPadding padding, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, ByRef<int> outW, ByRef<int> outH, ByRef<float> padX, ByRef<float> padY, ByRef<int> newMinSizeX, ByRef<int> newMinSizeY);
    // public System.Void ConvertToRectsWithoutPaddingAndNormalize01(DigitalOpus.MB.Core.AtlasPackingResult rr, DigitalOpus.MB.Core.AtlasPadding padding)
    // Offset: 0xC178A4
    void ConvertToRectsWithoutPaddingAndNormalize01(::DigitalOpus::MB::Core::AtlasPackingResult* rr, ::DigitalOpus::MB::Core::AtlasPadding padding);
  }; // DigitalOpus.MB.Core.MB2_TexturePacker
  #pragma pack(pop)
  static check_size<sizeof(MB2_TexturePacker), 20 + sizeof(bool)> __DigitalOpus_MB_Core_MB2_TexturePackerSizeCheck;
  static_assert(sizeof(MB2_TexturePacker) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::RoundToNearestPositivePowerOfTwo
// Il2CppName: RoundToNearestPositivePowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&DigitalOpus::MB::Core::MB2_TexturePacker::RoundToNearestPositivePowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "RoundToNearestPositivePowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::CeilToNearestPowerOfTwo
// Il2CppName: CeilToNearestPowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&DigitalOpus::MB::Core::MB2_TexturePacker::CeilToNearestPowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "CeilToNearestPowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::GetRects
// Il2CppName: GetRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePacker::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, int, int, int)>(&DigitalOpus::MB::Core::MB2_TexturePacker::GetRects)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "GetRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, maxDimensionX, maxDimensionY, padding});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::GetRects
// Il2CppName: GetRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePacker::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>*, int, int, bool)>(&DigitalOpus::MB::Core::MB2_TexturePacker::GetRects)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* paddings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* doMultiAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "GetRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, paddings, maxDimensionX, maxDimensionY, doMultiAtlas});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::ScaleAtlasToFitMaxDim
// Il2CppName: ScaleAtlasToFitMaxDim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB2_TexturePacker::*)(::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB2_TexturePacker::Image*>*, int, int, ::DigitalOpus::MB::Core::AtlasPadding, int, int, int, int, ByRef<int>, ByRef<int>, ByRef<float>, ByRef<float>, ByRef<int>, ByRef<int>)>(&DigitalOpus::MB::Core::MB2_TexturePacker::ScaleAtlasToFitMaxDim)> {
  static const MethodInfo* get() {
    static auto* rootWH = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* images = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_TexturePacker/Image")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")->byval_arg;
    static auto* minImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outW = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outH = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* padX = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* padY = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* newMinSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* newMinSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "ScaleAtlasToFitMaxDim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootWH, images, maxDimensionX, maxDimensionY, padding, minImageSizeX, minImageSizeY, masterImageSizeX, masterImageSizeY, outW, outH, padX, padY, newMinSizeX, newMinSizeY});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePacker::ConvertToRectsWithoutPaddingAndNormalize01
// Il2CppName: ConvertToRectsWithoutPaddingAndNormalize01
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB2_TexturePacker::*)(::DigitalOpus::MB::Core::AtlasPackingResult*, ::DigitalOpus::MB::Core::AtlasPadding)>(&DigitalOpus::MB::Core::MB2_TexturePacker::ConvertToRectsWithoutPaddingAndNormalize01)> {
  static const MethodInfo* get() {
    static auto* rr = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPackingResult")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePacker*), "ConvertToRectsWithoutPaddingAndNormalize01", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rr, padding});
  }
};
