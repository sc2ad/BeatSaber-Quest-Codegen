// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_AtlasPackerRenderTextureUsingMesh
  class MB3_AtlasPackerRenderTextureUsingMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh*, "DigitalOpus.MB.Core", "MB3_AtlasPackerRenderTextureUsingMesh");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x26
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_AtlasPackerRenderTextureUsingMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_AtlasPackerRenderTextureUsingMesh : public ::Il2CppObject {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::MeshRectInfo
    class MeshRectInfo;
    // Nested type: ::DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::MeshAtlas
    class MeshAtlas;
    public:
    // public System.Int32 camMaskLayer
    // Size: 0x4
    // Offset: 0x10
    int camMaskLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x14
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x18
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 padding
    // Size: 0x4
    // Offset: 0x1C
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x24
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _camSetup
    // Size: 0x1
    // Offset: 0x25
    bool camSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Int32 camMaskLayer
    [[deprecated("Use field access instead!")]] int& dyn_camMaskLayer();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // Get instance field reference: public System.Int32 padding
    [[deprecated("Use field access instead!")]] int& dyn_padding();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // Get instance field reference: private System.Boolean _camSetup
    [[deprecated("Use field access instead!")]] bool& dyn__camSetup();
    // public System.Void .ctor()
    // Offset: 0xC20DF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_AtlasPackerRenderTextureUsingMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_AtlasPackerRenderTextureUsingMesh*, creationType>()));
    }
    // public System.Void Initialize(System.Int32 camMaskLayer, System.Int32 width, System.Int32 height, System.Int32 padding, DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL)
    // Offset: 0xC205C0
    void Initialize(int camMaskLayer, int width, int height, int padding, ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL);
    // System.Void SetupCameraGameObject(UnityEngine.GameObject camGameObject)
    // Offset: 0xC205D8
    void SetupCameraGameObject(::UnityEngine::GameObject* camGameObject);
    // UnityEngine.Texture2D DoRenderAtlas(UnityEngine.GameObject go, System.Int32 width, System.Int32 height, System.Boolean isNormalMap, DigitalOpus.MB.Core.ShaderTextureProperty propertyName)
    // Offset: 0xC207D4
    ::UnityEngine::Texture2D* DoRenderAtlas(::UnityEngine::GameObject* go, int width, int height, bool isNormalMap, ::DigitalOpus::MB::Core::ShaderTextureProperty* propertyName);
  }; // DigitalOpus.MB.Core.MB3_AtlasPackerRenderTextureUsingMesh
  #pragma pack(pop)
  static check_size<sizeof(MB3_AtlasPackerRenderTextureUsingMesh), 37 + sizeof(bool)> __DigitalOpus_MB_Core_MB3_AtlasPackerRenderTextureUsingMeshSizeCheck;
  static_assert(sizeof(MB3_AtlasPackerRenderTextureUsingMesh) == 0x26);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::*)(int, int, int, int, ::DigitalOpus::MB::Core::MB2_LogLevel)>(&DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::Initialize)> {
  static const MethodInfo* get() {
    static auto* camMaskLayer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* LOG_LEVEL = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camMaskLayer, width, height, padding, LOG_LEVEL});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::SetupCameraGameObject
// Il2CppName: SetupCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::SetupCameraGameObject)> {
  static const MethodInfo* get() {
    static auto* camGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh*), "SetupCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camGameObject});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::DoRenderAtlas
// Il2CppName: DoRenderAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::*)(::UnityEngine::GameObject*, int, int, bool, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh::DoRenderAtlas)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isNormalMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_AtlasPackerRenderTextureUsingMesh*), "DoRenderAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, width, height, isNormalMap, propertyName});
  }
};
