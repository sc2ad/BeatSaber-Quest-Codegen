// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombiner
#include "DigitalOpus/MB/Core/MB3_TextureCombiner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Skipping declaration: MB2_LogLevel because it is already included!
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: ProgressUpdateDelegate
  class ProgressUpdateDelegate;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_AtlasesAndRects
  class MB_AtlasesAndRects;
  // Forward declaring type: MB_TextureArrayFormatSet
  class MB_TextureArrayFormatSet;
  // Forward declaring type: MB_TextureArrayResultMaterial
  class MB_TextureArrayResultMaterial;
  // Forward declaring type: MB_MultiMaterialTexArray
  class MB_MultiMaterialTexArray;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2DArray
  class Texture2DArray;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB_TextureArrays
  class MB_TextureArrays;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB_TextureArrays);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB_TextureArrays*, "DigitalOpus.MB.Core", "MB_TextureArrays");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB_TextureArrays
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_TextureArrays : public ::Il2CppObject {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData
    class TexturePropertyData;
    // Nested type: ::DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6
    class $_CreateAtlasesCoroutineSingleResultMaterial$d__6;
    // public System.Void .ctor()
    // Offset: 0x11B4330
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TextureArrays* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB_TextureArrays::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TextureArrays*, creationType>()));
    }
    // static System.Boolean[] DetermineWhichPropertiesHaveTextures(MB_AtlasesAndRects[] resultAtlasesAndRectSlices)
    // Offset: 0x11B290C
    static ::ArrayW<bool> DetermineWhichPropertiesHaveTextures(::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> resultAtlasesAndRectSlices);
    // static private System.Boolean IsLinearProperty(System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> shaderPropertyNames, System.String shaderProperty)
    // Offset: 0x11B2AAC
    static bool IsLinearProperty(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* shaderPropertyNames, ::StringW shaderProperty);
    // static UnityEngine.Texture2DArray[] CreateTextureArraysForResultMaterial(DigitalOpus.MB.Core.MB_TextureArrays/DigitalOpus.MB.Core.TexturePropertyData texPropertyData, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> masterListOfTexProperties, MB_AtlasesAndRects[] resultAtlasesAndRectSlices, System.Boolean[] hasTexForProperty, DigitalOpus.MB.Core.MB3_TextureCombiner combiner, DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL)
    // Offset: 0x11B2B90
    static ::ArrayW<::UnityEngine::Texture2DArray*> CreateTextureArraysForResultMaterial(::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData* texPropertyData, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* masterListOfTexProperties, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> resultAtlasesAndRectSlices, ::ArrayW<bool> hasTexForProperty, ::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL);
    // static System.Boolean ConvertTexturesToReadableFormat(DigitalOpus.MB.Core.MB_TextureArrays/DigitalOpus.MB.Core.TexturePropertyData texturePropertyData, MB_AtlasesAndRects[] resultAtlasesAndRectSlices, System.Boolean[] hasTexForProperty, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> textureShaderProperties, DigitalOpus.MB.Core.MB3_TextureCombiner combiner, DigitalOpus.MB.Core.MB2_LogLevel logLevel, System.Collections.Generic.List`1<UnityEngine.Texture2D> createdTemporaryTextureAssets, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods)
    // Offset: 0x11B32EC
    static bool ConvertTexturesToReadableFormat(::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData* texturePropertyData, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> resultAtlasesAndRectSlices, ::ArrayW<bool> hasTexForProperty, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* textureShaderProperties, ::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ::DigitalOpus::MB::Core::MB2_LogLevel logLevel, ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* createdTemporaryTextureAssets, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods);
    // static System.Void FindBestSizeAndMipCountAndFormatForTextureArrays(System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> texPropertyNames, System.Int32 maxAtlasSize, MB_TextureArrayFormatSet targetFormatSet, MB_AtlasesAndRects[] resultAtlasesAndRectSlices, DigitalOpus.MB.Core.MB_TextureArrays/DigitalOpus.MB.Core.TexturePropertyData texturePropertyData)
    // Offset: 0x11B3DA0
    static void FindBestSizeAndMipCountAndFormatForTextureArrays(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* texPropertyNames, int maxAtlasSize, ::GlobalNamespace::MB_TextureArrayFormatSet* targetFormatSet, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> resultAtlasesAndRectSlices, ::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData* texturePropertyData);
    // static public System.Collections.IEnumerator _CreateAtlasesCoroutineSingleResultMaterial(System.Int32 resMatIdx, MB_TextureArrayResultMaterial bakedMatsAndSlicesResMat, MB_MultiMaterialTexArray resMatConfig, System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, DigitalOpus.MB.Core.MB3_TextureCombiner combiner, MB_TextureArrayFormatSet[] textureArrayOutputFormats, MB_MultiMaterialTexArray[] resultMaterialsTexArray, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> customShaderProperties, System.Collections.Generic.List`1<System.String> texPropNamesToIgnore, DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CreateAtlasesCoroutineResult coroutineResult, System.Boolean saveAtlasesAsAssets, DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods, System.Single maxTimePerFrame)
    // Offset: 0x11B4224
    static ::System::Collections::IEnumerator* _CreateAtlasesCoroutineSingleResultMaterial(int resMatIdx, ::GlobalNamespace::MB_TextureArrayResultMaterial* bakedMatsAndSlicesResMat, ::GlobalNamespace::MB_MultiMaterialTexArray* resMatConfig, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ::ArrayW<::GlobalNamespace::MB_TextureArrayFormatSet*> textureArrayOutputFormats, ::ArrayW<::GlobalNamespace::MB_MultiMaterialTexArray*> resultMaterialsTexArray, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* customShaderProperties, ::System::Collections::Generic::List_1<::StringW>* texPropNamesToIgnore, ::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult* coroutineResult, bool saveAtlasesAsAssets, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods, float maxTimePerFrame);
  }; // DigitalOpus.MB.Core.MB_TextureArrays
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::DetermineWhichPropertiesHaveTextures
// Il2CppName: DetermineWhichPropertiesHaveTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (*)(::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>)>(&DigitalOpus::MB::Core::MB_TextureArrays::DetermineWhichPropertiesHaveTextures)> {
  static const MethodInfo* get() {
    static auto* resultAtlasesAndRectSlices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "DetermineWhichPropertiesHaveTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultAtlasesAndRectSlices});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::IsLinearProperty
// Il2CppName: IsLinearProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::StringW)>(&DigitalOpus::MB::Core::MB_TextureArrays::IsLinearProperty)> {
  static const MethodInfo* get() {
    static auto* shaderPropertyNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* shaderProperty = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "IsLinearProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderPropertyNames, shaderProperty});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::CreateTextureArraysForResultMaterial
// Il2CppName: CreateTextureArraysForResultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Texture2DArray*> (*)(::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>, ::ArrayW<bool>, ::DigitalOpus::MB::Core::MB3_TextureCombiner*, ::DigitalOpus::MB::Core::MB2_LogLevel)>(&DigitalOpus::MB::Core::MB_TextureArrays::CreateTextureArraysForResultMaterial)> {
  static const MethodInfo* get() {
    static auto* texPropertyData = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TextureArrays/TexturePropertyData")->byval_arg;
    static auto* masterListOfTexProperties = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* resultAtlasesAndRectSlices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects"), 1)->byval_arg;
    static auto* hasTexForProperty = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* combiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner")->byval_arg;
    static auto* LOG_LEVEL = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "CreateTextureArraysForResultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texPropertyData, masterListOfTexProperties, resultAtlasesAndRectSlices, hasTexForProperty, combiner, LOG_LEVEL});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::ConvertTexturesToReadableFormat
// Il2CppName: ConvertTexturesToReadableFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData*, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>, ::ArrayW<bool>, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::DigitalOpus::MB::Core::MB3_TextureCombiner*, ::DigitalOpus::MB::Core::MB2_LogLevel, ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&DigitalOpus::MB::Core::MB_TextureArrays::ConvertTexturesToReadableFormat)> {
  static const MethodInfo* get() {
    static auto* texturePropertyData = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TextureArrays/TexturePropertyData")->byval_arg;
    static auto* resultAtlasesAndRectSlices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects"), 1)->byval_arg;
    static auto* hasTexForProperty = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->byval_arg;
    static auto* textureShaderProperties = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* combiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner")->byval_arg;
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    static auto* createdTemporaryTextureAssets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")})->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "ConvertTexturesToReadableFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texturePropertyData, resultAtlasesAndRectSlices, hasTexForProperty, textureShaderProperties, combiner, logLevel, createdTemporaryTextureAssets, textureEditorMethods});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::FindBestSizeAndMipCountAndFormatForTextureArrays
// Il2CppName: FindBestSizeAndMipCountAndFormatForTextureArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, int, ::GlobalNamespace::MB_TextureArrayFormatSet*, ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>, ::DigitalOpus::MB::Core::MB_TextureArrays::TexturePropertyData*)>(&DigitalOpus::MB::Core::MB_TextureArrays::FindBestSizeAndMipCountAndFormatForTextureArrays)> {
  static const MethodInfo* get() {
    static auto* texPropertyNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* maxAtlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetFormatSet = &::il2cpp_utils::GetClassFromName("", "MB_TextureArrayFormatSet")->byval_arg;
    static auto* resultAtlasesAndRectSlices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects"), 1)->byval_arg;
    static auto* texturePropertyData = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TextureArrays/TexturePropertyData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "FindBestSizeAndMipCountAndFormatForTextureArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texPropertyNames, maxAtlasSize, targetFormatSet, resultAtlasesAndRectSlices, texturePropertyData});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::_CreateAtlasesCoroutineSingleResultMaterial
// Il2CppName: _CreateAtlasesCoroutineSingleResultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(int, ::GlobalNamespace::MB_TextureArrayResultMaterial*, ::GlobalNamespace::MB_MultiMaterialTexArray*, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::DigitalOpus::MB::Core::MB3_TextureCombiner*, ::ArrayW<::GlobalNamespace::MB_TextureArrayFormatSet*>, ::ArrayW<::GlobalNamespace::MB_MultiMaterialTexArray*>, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::System::Collections::Generic::List_1<::StringW>*, ::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult*, bool, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, float)>(&DigitalOpus::MB::Core::MB_TextureArrays::_CreateAtlasesCoroutineSingleResultMaterial)> {
  static const MethodInfo* get() {
    static auto* resMatIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bakedMatsAndSlicesResMat = &::il2cpp_utils::GetClassFromName("", "MB_TextureArrayResultMaterial")->byval_arg;
    static auto* resMatConfig = &::il2cpp_utils::GetClassFromName("", "MB_MultiMaterialTexArray")->byval_arg;
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* combiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner")->byval_arg;
    static auto* textureArrayOutputFormats = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_TextureArrayFormatSet"), 1)->byval_arg;
    static auto* resultMaterialsTexArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "MB_MultiMaterialTexArray"), 1)->byval_arg;
    static auto* customShaderProperties = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* texPropNamesToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* coroutineResult = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/CreateAtlasesCoroutineResult")->byval_arg;
    static auto* saveAtlasesAsAssets = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* maxTimePerFrame = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays*), "_CreateAtlasesCoroutineSingleResultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resMatIdx, bakedMatsAndSlicesResMat, resMatConfig, objsToMesh, combiner, textureArrayOutputFormats, resultMaterialsTexArray, customShaderProperties, texPropNamesToIgnore, progressInfo, coroutineResult, saveAtlasesAsAssets, editorMethods, maxTimePerFrame});
  }
};
