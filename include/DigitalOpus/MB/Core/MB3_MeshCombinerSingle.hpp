// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MeshCombiner
#include "DigitalOpus/MB/Core/MB3_MeshCombiner.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: DigitalOpus.MB.Core.MB_Utility/DigitalOpus.MB.Core.MeshAnalysisResult
#include "DigitalOpus/MB/Core/MB_Utility_MeshAnalysisResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: SerializableSourceBlendShape2Combined
  class SerializableSourceBlendShape2Combined;
  // Skipping declaration: MB_RenderType because it is already included!
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: OrderedDictionary
  class OrderedDictionary;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB2_TextureBakeResults
  class MB2_TextureBakeResults;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_MeshCombinerSingle
  class MB3_MeshCombinerSingle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*, "DigitalOpus.MB.Core", "MB3_MeshCombinerSingle");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x168
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MeshCombinerSingle : public ::DigitalOpus::MB::Core::MB3_MeshCombiner {
    public:
    // Writing base type padding for base size: 0x89 to desired offset: 0x90
    char ___base_padding[0x7] = {};
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB3_MeshCombinerSimpleBones
    class MB3_MeshCombinerSimpleBones;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions
    struct MeshCreationConditions;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray
    class SerializableIntArray;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject
    class MB_DynamicGameObject;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels
    class MeshChannels;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShapeFrame
    class MBBlendShapeFrame;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape
    class MBBlendShape;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache
    class MeshChannelsCache;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BoneAndBindpose
    struct BoneAndBindpose;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UVAdjuster_Atlas
    class UVAdjuster_Atlas;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::$$c__DisplayClass54_0
    class $$c__DisplayClass54_0;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::$$c__DisplayClass54_1
    class $$c__DisplayClass54_1;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions
    // [TokenAttribute] Offset: FFFFFFFF
    struct MeshCreationConditions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MeshCreationConditions
      constexpr MeshCreationConditions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions NoMesh
      static constexpr const int NoMesh = 0;
      // Get static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions NoMesh
      static ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions _get_NoMesh();
      // Set static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions NoMesh
      static void _set_NoMesh(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions value);
      // static field const value: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedInEditor
      static constexpr const int CreatedInEditor = 1;
      // Get static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedInEditor
      static ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions _get_CreatedInEditor();
      // Set static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedInEditor
      static void _set_CreatedInEditor(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions value);
      // static field const value: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedAtRuntime
      static constexpr const int CreatedAtRuntime = 2;
      // Get static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedAtRuntime
      static ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions _get_CreatedAtRuntime();
      // Set static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions CreatedAtRuntime
      static void _set_CreatedAtRuntime(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions value);
      // static field const value: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions AssignedByUser
      static constexpr const int AssignedByUser = 3;
      // Get static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions AssignedByUser
      static ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions _get_AssignedByUser();
      // Set static field: static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions AssignedByUser
      static void _set_AssignedByUser(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions
    #pragma pack(pop)
    static check_size<sizeof(MB3_MeshCombinerSingle::MeshCreationConditions), 0 + sizeof(int)> __DigitalOpus_MB_Core_MB3_MeshCombinerSingle_MeshCreationConditionsSizeCheck;
    static_assert(sizeof(MB3_MeshCombinerSingle::MeshCreationConditions) == 0x4);
    public:
    // protected System.Collections.Generic.List`1<UnityEngine.GameObject> objectsInCombinedMesh
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objectsInCombinedMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Int32 lightmapIndex
    // Size: 0x4
    // Offset: 0x98
    int lightmapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lightmapIndex and: mbDynamicObjectsInCombinedMesh
    char __padding1[0x4] = {};
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject> mbDynamicObjectsInCombinedMesh
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>* mbDynamicObjectsInCombinedMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject> _instance2combined_map
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>* instance2combined_map;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*) == 0x8);
    // private UnityEngine.Vector3[] verts
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::Vector3> verts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector4[] tangents
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::UnityEngine::Vector4> tangents;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private UnityEngine.Vector2[] uvs
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::Vector2> uvs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Single[] uvsSliceIdx
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<float> uvsSliceIdx;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Vector2[] uv2s
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::Vector2> uv2s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv3s
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<::UnityEngine::Vector2> uv3s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv4s
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::UnityEngine::Vector2> uv4s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv5s
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::UnityEngine::Vector2> uv5s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv6s
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::UnityEngine::Vector2> uv6s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv7s
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::UnityEngine::Vector2> uv7s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] uv8s
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Vector2> uv8s;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Color[] colors
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Matrix4x4[] bindPoses
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::UnityEngine::Matrix4x4> bindPoses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private UnityEngine.Transform[] bones
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::UnityEngine::Transform*> bones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapes
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> blendShapes;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>) == 0x8);
    // DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapesInCombined
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> blendShapesInCombined;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>) == 0x8);
    // private DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.SerializableIntArray[] submeshTris
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*> submeshTris;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*>) == 0x8);
    // private DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions _meshBirth
    // Size: 0x4
    // Offset: 0x140
    ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions meshBirth;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions) == 0x4);
    // Padding between fields: meshBirth and: mesh
    char __padding22[0x4] = {};
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.BoneWeight[] boneWeights
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::BoneWeight> boneWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoneWeight>) == 0x8);
    // private UnityEngine.GameObject[] empty
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::UnityEngine::GameObject*> empty;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private System.Int32[] emptyIDs
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<int> emptyIDs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.GameObject> objectsInCombinedMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_objectsInCombinedMesh();
    // Get instance field reference: private System.Int32 lightmapIndex
    [[deprecated("Use field access instead!")]] int& dyn_lightmapIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject> mbDynamicObjectsInCombinedMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*& dyn_mbDynamicObjectsInCombinedMesh();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.GameObject,DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject> _instance2combined_map
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::GameObject*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>*& dyn__instance2combined_map();
    // Get instance field reference: private UnityEngine.Vector3[] verts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_verts();
    // Get instance field reference: private UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: private UnityEngine.Vector4[] tangents
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_tangents();
    // Get instance field reference: private UnityEngine.Vector2[] uvs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uvs();
    // Get instance field reference: private System.Single[] uvsSliceIdx
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_uvsSliceIdx();
    // Get instance field reference: private UnityEngine.Vector2[] uv2s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv2s();
    // Get instance field reference: private UnityEngine.Vector2[] uv3s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv3s();
    // Get instance field reference: private UnityEngine.Vector2[] uv4s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv4s();
    // Get instance field reference: private UnityEngine.Vector2[] uv5s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv5s();
    // Get instance field reference: private UnityEngine.Vector2[] uv6s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv6s();
    // Get instance field reference: private UnityEngine.Vector2[] uv7s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv7s();
    // Get instance field reference: private UnityEngine.Vector2[] uv8s
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv8s();
    // Get instance field reference: private UnityEngine.Color[] colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_colors();
    // Get instance field reference: private UnityEngine.Matrix4x4[] bindPoses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_bindPoses();
    // Get instance field reference: private UnityEngine.Transform[] bones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_bones();
    // Get instance field reference: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapes
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>& dyn_blendShapes();
    // Get instance field reference: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapesInCombined
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>& dyn_blendShapesInCombined();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.SerializableIntArray[] submeshTris
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*>& dyn_submeshTris();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshCreationConditions _meshBirth
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions& dyn__meshBirth();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // Get instance field reference: private UnityEngine.BoneWeight[] boneWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoneWeight>& dyn_boneWeights();
    // Get instance field reference: private UnityEngine.GameObject[] empty
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_empty();
    // Get instance field reference: private System.Int32[] emptyIDs
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_emptyIDs();
    // private DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject instance2Combined_MapGet(UnityEngine.GameObject gameObjectID)
    // Offset: 0xC2AD20
    ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* instance2Combined_MapGet(::UnityEngine::GameObject* gameObjectID);
    // private System.Void instance2Combined_MapAdd(UnityEngine.GameObject gameObjectID, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo)
    // Offset: 0xC2AD88
    void instance2Combined_MapAdd(::UnityEngine::GameObject* gameObjectID, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo);
    // private System.Void instance2Combined_MapRemove(UnityEngine.GameObject gameObjectID)
    // Offset: 0xC2ADF8
    void instance2Combined_MapRemove(::UnityEngine::GameObject* gameObjectID);
    // private System.Boolean instance2Combined_MapTryGetValue(UnityEngine.GameObject gameObjectID, out DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo)
    // Offset: 0xC2AE60
    bool instance2Combined_MapTryGetValue(::UnityEngine::GameObject* gameObjectID, ByRef<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*> dgo);
    // private System.Int32 instance2Combined_MapCount()
    // Offset: 0xC2AED0
    int instance2Combined_MapCount();
    // private System.Void instance2Combined_MapClear()
    // Offset: 0xC2AF28
    void instance2Combined_MapClear();
    // private System.Boolean instance2Combined_MapContainsKey(UnityEngine.GameObject gameObjectID)
    // Offset: 0xC2AF80
    bool instance2Combined_MapContainsKey(::UnityEngine::GameObject* gameObjectID);
    // private System.Boolean InstanceID2DGO(System.Int32 instanceID, out DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgoGameObject)
    // Offset: 0xC2AFE8
    bool InstanceID2DGO(int instanceID, ByRef<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*> dgoGameObject);
    // public UnityEngine.Mesh GetMesh()
    // Offset: 0xC2B1A8
    ::UnityEngine::Mesh* GetMesh();
    // public System.Void SetMesh(UnityEngine.Mesh m)
    // Offset: 0xC2B2AC
    void SetMesh(::UnityEngine::Mesh* m);
    // public UnityEngine.Transform[] GetBones()
    // Offset: 0xC2B33C
    ::ArrayW<::UnityEngine::Transform*> GetBones();
    // private System.Boolean _Initialize(System.Int32 numResultMats)
    // Offset: 0xC2B514
    bool _Initialize(int numResultMats);
    // private System.Boolean _collectMaterialTriangles(UnityEngine.Mesh m, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, UnityEngine.Material[] sharedMaterials, System.Collections.Specialized.OrderedDictionary sourceMats2submeshIdx_map)
    // Offset: 0xC2BCCC
    bool _collectMaterialTriangles(::UnityEngine::Mesh* m, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::ArrayW<::UnityEngine::Material*> sharedMaterials, ::System::Collections::Specialized::OrderedDictionary* sourceMats2submeshIdx_map);
    // private System.Boolean _collectOutOfBoundsUVRects2(UnityEngine.Mesh m, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, UnityEngine.Material[] sharedMaterials, System.Collections.Specialized.OrderedDictionary sourceMats2submeshIdx_map, System.Collections.Generic.Dictionary`2<System.Int32,DigitalOpus.MB.Core.MB_Utility/DigitalOpus.MB.Core.MeshAnalysisResult[]> meshAnalysisResults, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannelsCache meshChannelCache)
    // Offset: 0xC2C344
    bool _collectOutOfBoundsUVRects2(::UnityEngine::Mesh* m, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::ArrayW<::UnityEngine::Material*> sharedMaterials, ::System::Collections::Specialized::OrderedDictionary* sourceMats2submeshIdx_map, ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::DigitalOpus::MB::Core::MB_Utility::MeshAnalysisResult>>* meshAnalysisResults, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache* meshChannelCache);
    // private System.Boolean _validateTextureBakeResults()
    // Offset: 0xC2C644
    bool _validateTextureBakeResults();
    // private System.Boolean _showHide(UnityEngine.GameObject[] goToShow, UnityEngine.GameObject[] goToHide)
    // Offset: 0xC2C86C
    bool _showHide(::ArrayW<::UnityEngine::GameObject*> goToShow, ::ArrayW<::UnityEngine::GameObject*> goToHide);
    // private System.Boolean _addToCombined(UnityEngine.GameObject[] goToAdd, System.Int32[] goToDelete, System.Boolean disableRendererInSource)
    // Offset: 0xC2CB10
    bool _addToCombined(::ArrayW<::UnityEngine::GameObject*> goToAdd, ::ArrayW<int> goToDelete, bool disableRendererInSource);
    // private System.Void _copyAndAdjustUV2FromMesh(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MB_DynamicGameObject dgo, UnityEngine.Mesh mesh, System.Int32 vertsIdx, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannelsCache meshChannelsCache)
    // Offset: 0xC33304
    void _copyAndAdjustUV2FromMesh(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* dgo, ::UnityEngine::Mesh* mesh, int vertsIdx, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache* meshChannelsCache);
    // private UnityEngine.Transform[] _getBones(UnityEngine.Renderer r, System.Boolean isSkinnedMeshWithBones)
    // Offset: 0xC33C1C
    ::ArrayW<::UnityEngine::Transform*> _getBones(::UnityEngine::Renderer* r, bool isSkinnedMeshWithBones);
    // public System.Void ApplyShowHide()
    // Offset: 0xC34308
    void ApplyShowHide();
    // private System.Int32 _numNonZeroLengthSubmeshTris(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.SerializableIntArray[] subTris)
    // Offset: 0xC34BF8
    int _numNonZeroLengthSubmeshTris(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*> subTris);
    // private System.Void _updateMaterialsOnTargetRenderer(DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.SerializableIntArray[] subTris, System.Int32 numNonZeroLengthSubmeshTris)
    // Offset: 0xC34C6C
    void _updateMaterialsOnTargetRenderer(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*> subTris, int numNonZeroLengthSubmeshTris);
    // public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.SerializableIntArray[] GetSubmeshTrisWithShowHideApplied()
    // Offset: 0xC34844
    ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*> GetSubmeshTrisWithShowHideApplied();
    // private System.Boolean _updateGameObjects(UnityEngine.GameObject[] gos, System.Boolean recalcBounds, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateUV5, System.Boolean updateUV6, System.Boolean updateUV7, System.Boolean updateUV8, System.Boolean updateColors, System.Boolean updateSkinningInfo)
    // Offset: 0xC39004
    bool _updateGameObjects(::ArrayW<::UnityEngine::GameObject*> gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateUV5, bool updateUV6, bool updateUV7, bool updateUV8, bool updateColors, bool updateSkinningInfo);
    // private System.Boolean _updateGameObject(UnityEngine.GameObject go, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateUV5, System.Boolean updateUV6, System.Boolean updateUV7, System.Boolean updateUV8, System.Boolean updateColors, System.Boolean updateSkinningInfo, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannelsCache meshChannelCache, System.Collections.Generic.Dictionary`2<System.Int32,DigitalOpus.MB.Core.MB_Utility/DigitalOpus.MB.Core.MeshAnalysisResult[]> meshAnalysisResultsCache, System.Collections.Specialized.OrderedDictionary sourceMats2submeshIdx_map, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.UVAdjuster_Atlas uVAdjuster)
    // Offset: 0xC39538
    bool _updateGameObject(::UnityEngine::GameObject* go, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateUV5, bool updateUV6, bool updateUV7, bool updateUV8, bool updateColors, bool updateSkinningInfo, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache* meshChannelCache, ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::DigitalOpus::MB::Core::MB_Utility::MeshAnalysisResult>>* meshAnalysisResultsCache, ::System::Collections::Specialized::OrderedDictionary* sourceMats2submeshIdx_map, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UVAdjuster_Atlas* uVAdjuster);
    // public System.Boolean ShowHideGameObjects(UnityEngine.GameObject[] toShow, UnityEngine.GameObject[] toHide)
    // Offset: 0xC3A838
    bool ShowHideGameObjects(::ArrayW<::UnityEngine::GameObject*> toShow, ::ArrayW<::UnityEngine::GameObject*> toHide);
    // private UnityEngine.Mesh NewMesh()
    // Offset: 0xC2B234
    ::UnityEngine::Mesh* NewMesh();
    // public System.Boolean ValidateTargRendererAndMeshAndResultSceneObj()
    // Offset: 0xC32B00
    bool ValidateTargRendererAndMeshAndResultSceneObj();
    // private System.Collections.Specialized.OrderedDictionary BuildSourceMatsToSubmeshIdxMap(System.Int32 numResultMats)
    // Offset: 0xC32F48
    ::System::Collections::Specialized::OrderedDictionary* BuildSourceMatsToSubmeshIdxMap(int numResultMats);
    // UnityEngine.Renderer BuildSceneHierarchPreBake(DigitalOpus.MB.Core.MB3_MeshCombinerSingle mom, UnityEngine.GameObject root, UnityEngine.Mesh m, System.Boolean createNewChild, UnityEngine.GameObject[] objsToBeAdded)
    // Offset: 0xC3BC08
    ::UnityEngine::Renderer* BuildSceneHierarchPreBake(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* mom, ::UnityEngine::GameObject* root, ::UnityEngine::Mesh* m, bool createNewChild, ::ArrayW<::UnityEngine::GameObject*> objsToBeAdded);
    // static public System.Void BuildPrefabHierarchy(DigitalOpus.MB.Core.MB3_MeshCombinerSingle mom, UnityEngine.GameObject instantiatedPrefabRoot, UnityEngine.Mesh m, System.Boolean createNewChild, UnityEngine.GameObject[] objsToBeAdded)
    // Offset: 0xC3CA78
    static void BuildPrefabHierarchy(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* mom, ::UnityEngine::GameObject* instantiatedPrefabRoot, ::UnityEngine::Mesh* m, bool createNewChild, ::ArrayW<::UnityEngine::GameObject*> objsToBeAdded);
    // static private System.Void _ConfigureSceneHierarch(DigitalOpus.MB.Core.MB3_MeshCombinerSingle mom, UnityEngine.GameObject root, UnityEngine.MeshRenderer mr, UnityEngine.MeshFilter mf, UnityEngine.SkinnedMeshRenderer smr, UnityEngine.Mesh m, UnityEngine.GameObject[] objsToBeAdded)
    // Offset: 0xC3C60C
    static void _ConfigureSceneHierarch(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* mom, ::UnityEngine::GameObject* root, ::UnityEngine::MeshRenderer* mr, ::UnityEngine::MeshFilter* mf, ::UnityEngine::SkinnedMeshRenderer* smr, ::UnityEngine::Mesh* m, ::ArrayW<::UnityEngine::GameObject*> objsToBeAdded);
    // private System.Void _SetLightmapIndexIfPreserveLightmapping(UnityEngine.Renderer tr)
    // Offset: 0xC3B1F0
    void _SetLightmapIndexIfPreserveLightmapping(::UnityEngine::Renderer* tr);
    // public System.Void BuildSceneMeshObject(UnityEngine.GameObject[] gos, System.Boolean createNewChild)
    // Offset: 0xC3B0EC
    void BuildSceneMeshObject(::ArrayW<::UnityEngine::GameObject*> gos, bool createNewChild);
    // private System.Boolean IsMirrored(UnityEngine.Matrix4x4 tm)
    // Offset: 0xC33160
    bool IsMirrored(::UnityEngine::Matrix4x4 tm);
    // private System.Void _copyUV2unchangedToSeparateRects()
    // Offset: 0xC337C8
    void _copyUV2unchangedToSeparateRects();
    // static public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] GetBlendShapes(UnityEngine.Mesh m, System.Int32 gameObjectID, UnityEngine.GameObject gameObject, System.Collections.Generic.Dictionary`2<System.Int32,DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannels> meshID2MeshChannels)
    // Offset: 0xC3DAB4
    static ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> GetBlendShapes(::UnityEngine::Mesh* m, int gameObjectID, ::UnityEngine::GameObject* gameObject, ::System::Collections::Generic::Dictionary_2<int, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels*>* meshID2MeshChannels);
    // private System.Void ApplyBlendShapeFramesToMeshAndBuildMap()
    // Offset: 0xC38A48
    void ApplyBlendShapeFramesToMeshAndBuildMap();
    // private System.String ConvertBlendShapeNameToOutputName(System.String bs)
    // Offset: 0xC3DF84
    ::StringW ConvertBlendShapeNameToOutputName(::StringW bs);
    // private System.Void ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName()
    // Offset: 0xC37EF0
    void ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName();
    // private System.Void BuildSrcShape2CombinedMap(DigitalOpus.MB.Core.SerializableSourceBlendShape2Combined map, DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] bs)
    // Offset: 0xC3E100
    void BuildSrcShape2CombinedMap(::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined* map, ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> bs);
    // private System.Void _ZeroArray(UnityEngine.Vector3[] arr, System.Int32 idx, System.Int32 length)
    // Offset: 0xC3E02C
    void _ZeroArray(::ArrayW<::UnityEngine::Vector3> arr, int idx, int length);
    // public override System.Void set_textureBakeResults(MB2_TextureBakeResults value)
    // Offset: 0xC2AA0C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::set_textureBakeResults(MB2_TextureBakeResults value)
    void set_textureBakeResults(::GlobalNamespace::MB2_TextureBakeResults* value);
    // public override System.Void set_renderType(DigitalOpus.MB.Core.MB_RenderType value)
    // Offset: 0xC2AB2C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::set_renderType(DigitalOpus.MB.Core.MB_RenderType value)
    void set_renderType(::DigitalOpus::MB::Core::MB_RenderType value);
    // public override System.Void set_resultSceneObject(UnityEngine.GameObject value)
    // Offset: 0xC2ABE4
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::set_resultSceneObject(UnityEngine.GameObject value)
    void set_resultSceneObject(::UnityEngine::GameObject* value);
    // public System.Void .ctor()
    // Offset: 0xC3E9EC
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MeshCombinerSingle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MeshCombinerSingle*, creationType>()));
    }
    // public override System.Int32 GetNumObjectsInCombined()
    // Offset: 0xC2B0D0
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Int32 MB3_MeshCombiner::GetNumObjectsInCombined()
    int GetNumObjectsInCombined();
    // public override System.Collections.Generic.List`1<UnityEngine.GameObject> GetObjectsInCombined()
    // Offset: 0xC2B120
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Collections.Generic.List`1<UnityEngine.GameObject> MB3_MeshCombiner::GetObjectsInCombined()
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetObjectsInCombined();
    // public override System.Int32 GetLightmapIndex()
    // Offset: 0xC2B344
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Int32 MB3_MeshCombiner::GetLightmapIndex()
    int GetLightmapIndex();
    // public override System.Int32 GetNumVerticesFor(UnityEngine.GameObject go)
    // Offset: 0xC2B498
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Int32 MB3_MeshCombiner::GetNumVerticesFor(UnityEngine.GameObject go)
    int GetNumVerticesFor(::UnityEngine::GameObject* go);
    // public override System.Int32 GetNumVerticesFor(System.Int32 instanceID)
    // Offset: 0xC2B4DC
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Int32 MB3_MeshCombiner::GetNumVerticesFor(System.Int32 instanceID)
    int GetNumVerticesFor(int instanceID);
    // public override System.Void Apply(DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    // Offset: 0xC33C30
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::Apply(DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    void Apply(::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate* uv2GenerationMethod);
    // public override System.Void Apply(System.Boolean triangles, System.Boolean vertices, System.Boolean normals, System.Boolean tangents, System.Boolean uvs, System.Boolean uv2, System.Boolean uv3, System.Boolean uv4, System.Boolean colors, System.Boolean bones, System.Boolean blendShapesFlag, DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    // Offset: 0xC34E18
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::Apply(System.Boolean triangles, System.Boolean vertices, System.Boolean normals, System.Boolean tangents, System.Boolean uvs, System.Boolean uv2, System.Boolean uv3, System.Boolean uv4, System.Boolean colors, System.Boolean bones, System.Boolean blendShapesFlag, DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones, bool blendShapesFlag, ::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate* uv2GenerationMethod);
    // public override System.Void Apply(System.Boolean triangles, System.Boolean vertices, System.Boolean normals, System.Boolean tangents, System.Boolean uvs, System.Boolean uv2, System.Boolean uv3, System.Boolean uv4, System.Boolean uv5, System.Boolean uv6, System.Boolean uv7, System.Boolean uv8, System.Boolean colors, System.Boolean bones, System.Boolean blendShapesFlag, DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    // Offset: 0xC34EA4
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::Apply(System.Boolean triangles, System.Boolean vertices, System.Boolean normals, System.Boolean tangents, System.Boolean uvs, System.Boolean uv2, System.Boolean uv3, System.Boolean uv4, System.Boolean uv5, System.Boolean uv6, System.Boolean uv7, System.Boolean uv8, System.Boolean colors, System.Boolean bones, System.Boolean blendShapesFlag, DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.GenerateUV2Delegate uv2GenerationMethod)
    void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool uv5, bool uv6, bool uv7, bool uv8, bool colors, bool bones, bool blendShapesFlag, ::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate* uv2GenerationMethod);
    // public override System.Boolean UpdateGameObjects(UnityEngine.GameObject[] gos, System.Boolean recalcBounds, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateColors, System.Boolean updateSkinningInfo)
    // Offset: 0xC38F8C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Boolean MB3_MeshCombiner::UpdateGameObjects(UnityEngine.GameObject[] gos, System.Boolean recalcBounds, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateColors, System.Boolean updateSkinningInfo)
    bool UpdateGameObjects(::ArrayW<::UnityEngine::GameObject*> gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateColors, bool updateSkinningInfo);
    // public override System.Boolean UpdateGameObjects(UnityEngine.GameObject[] gos, System.Boolean recalcBounds, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateUV5, System.Boolean updateUV6, System.Boolean updateUV7, System.Boolean updateUV8, System.Boolean updateColors, System.Boolean updateSkinningInfo)
    // Offset: 0xC394BC
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Boolean MB3_MeshCombiner::UpdateGameObjects(UnityEngine.GameObject[] gos, System.Boolean recalcBounds, System.Boolean updateVertices, System.Boolean updateNormals, System.Boolean updateTangents, System.Boolean updateUV, System.Boolean updateUV2, System.Boolean updateUV3, System.Boolean updateUV4, System.Boolean updateUV5, System.Boolean updateUV6, System.Boolean updateUV7, System.Boolean updateUV8, System.Boolean updateColors, System.Boolean updateSkinningInfo)
    bool UpdateGameObjects(::ArrayW<::UnityEngine::GameObject*> gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV2, bool updateUV3, bool updateUV4, bool updateUV5, bool updateUV6, bool updateUV7, bool updateUV8, bool updateColors, bool updateSkinningInfo);
    // public override System.Boolean AddDeleteGameObjects(UnityEngine.GameObject[] gos, UnityEngine.GameObject[] deleteGOs, System.Boolean disableRendererInSource)
    // Offset: 0xC3A92C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Boolean MB3_MeshCombiner::AddDeleteGameObjects(UnityEngine.GameObject[] gos, UnityEngine.GameObject[] deleteGOs, System.Boolean disableRendererInSource)
    bool AddDeleteGameObjects(::ArrayW<::UnityEngine::GameObject*> gos, ::ArrayW<::UnityEngine::GameObject*> deleteGOs, bool disableRendererInSource);
    // public override System.Boolean AddDeleteGameObjectsByID(UnityEngine.GameObject[] gos, System.Int32[] deleteGOinstanceIDs, System.Boolean disableRendererInSource)
    // Offset: 0xC3AB24
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Boolean MB3_MeshCombiner::AddDeleteGameObjectsByID(UnityEngine.GameObject[] gos, System.Int32[] deleteGOinstanceIDs, System.Boolean disableRendererInSource)
    bool AddDeleteGameObjectsByID(::ArrayW<::UnityEngine::GameObject*> gos, ::ArrayW<int> deleteGOinstanceIDs, bool disableRendererInSource);
    // public override System.Boolean CombinedMeshContains(UnityEngine.GameObject go)
    // Offset: 0xC3B3E8
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Boolean MB3_MeshCombiner::CombinedMeshContains(UnityEngine.GameObject go)
    bool CombinedMeshContains(::UnityEngine::GameObject* go);
    // public override System.Void ClearBuffers()
    // Offset: 0xC3B450
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::ClearBuffers()
    void ClearBuffers();
    // public override System.Void ClearMesh()
    // Offset: 0xC3B750
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::ClearMesh()
    void ClearMesh();
    // public override System.Void ClearMesh(DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    // Offset: 0xC3B7F8
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::ClearMesh(DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    void ClearMesh(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods);
    // public override System.Void DisposeRuntimeCreated()
    // Offset: 0xC3B808
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::DisposeRuntimeCreated()
    void DisposeRuntimeCreated();
    // public override System.Void DestroyMesh()
    // Offset: 0xC3B8BC
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::DestroyMesh()
    void DestroyMesh();
    // public override System.Void DestroyMeshEditor(DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    // Offset: 0xC3BA38
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::DestroyMeshEditor(DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    void DestroyMeshEditor(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods);
    // public override System.Void CheckIntegrity()
    // Offset: 0xC3D2E8
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::CheckIntegrity()
    void CheckIntegrity();
    // public override System.Collections.Generic.List`1<UnityEngine.Material> GetMaterialsOnTargetRenderer()
    // Offset: 0xC3D9DC
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Collections.Generic.List`1<UnityEngine.Material> MB3_MeshCombiner::GetMaterialsOnTargetRenderer()
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* GetMaterialsOnTargetRenderer();
    // public override System.Collections.Generic.Dictionary`2<DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.MBBlendShapeKey,DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.MBBlendShapeValue> BuildSourceBlendShapeToCombinedIndexMap()
    // Offset: 0xC3E314
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Collections.Generic.Dictionary`2<DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.MBBlendShapeKey,DigitalOpus.MB.Core.MB3_MeshCombiner/DigitalOpus.MB.Core.MBBlendShapeValue> MB3_MeshCombiner::BuildSourceBlendShapeToCombinedIndexMap()
    ::System::Collections::Generic::Dictionary_2<::DigitalOpus::MB::Core::MB3_MeshCombiner::MBBlendShapeKey*, ::DigitalOpus::MB::Core::MB3_MeshCombiner::MBBlendShapeValue*>* BuildSourceBlendShapeToCombinedIndexMap();
    // public override System.Void UpdateSkinnedMeshApproximateBounds()
    // Offset: 0xC3E42C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::UpdateSkinnedMeshApproximateBounds()
    void UpdateSkinnedMeshApproximateBounds();
    // public override System.Void UpdateSkinnedMeshApproximateBoundsFromBones()
    // Offset: 0xC3E43C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::UpdateSkinnedMeshApproximateBoundsFromBones()
    void UpdateSkinnedMeshApproximateBoundsFromBones();
    // public override System.Void UpdateSkinnedMeshApproximateBoundsFromBounds()
    // Offset: 0xC3E714
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshCombiner
    // Base method: System.Void MB3_MeshCombiner::UpdateSkinnedMeshApproximateBoundsFromBounds()
    void UpdateSkinnedMeshApproximateBoundsFromBounds();
  }; // DigitalOpus.MB.Core.MB3_MeshCombinerSingle
  #pragma pack(pop)
  static check_size<sizeof(MB3_MeshCombinerSingle), 352 + sizeof(::ArrayW<int>)> __DigitalOpus_MB_Core_MB3_MeshCombinerSingleSizeCheck;
  static_assert(sizeof(MB3_MeshCombinerSingle) == 0x168);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshCreationConditions, "DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshCreationConditions");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapGet
// Il2CppName: instance2Combined_MapGet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapGet)> {
  static const MethodInfo* get() {
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapGet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjectID});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapAdd
// Il2CppName: instance2Combined_MapAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapAdd)> {
  static const MethodInfo* get() {
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjectID, dgo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapRemove
// Il2CppName: instance2Combined_MapRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapRemove)> {
  static const MethodInfo* get() {
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjectID});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapTryGetValue
// Il2CppName: instance2Combined_MapTryGetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*, ByRef<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapTryGetValue)> {
  static const MethodInfo* get() {
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapTryGetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjectID, dgo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapCount
// Il2CppName: instance2Combined_MapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapClear
// Il2CppName: instance2Combined_MapClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapContainsKey
// Il2CppName: instance2Combined_MapContainsKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::instance2Combined_MapContainsKey)> {
  static const MethodInfo* get() {
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "instance2Combined_MapContainsKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjectID});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::InstanceID2DGO
// Il2CppName: InstanceID2DGO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(int, ByRef<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::InstanceID2DGO)> {
  static const MethodInfo* get() {
    static auto* instanceID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dgoGameObject = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "InstanceID2DGO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceID, dgoGameObject});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetMesh
// Il2CppName: GetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SetMesh
// Il2CppName: SetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Mesh*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SetMesh)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "SetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetBones
// Il2CppName: GetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetBones)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_Initialize
// Il2CppName: _Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_Initialize)> {
  static const MethodInfo* get() {
    static auto* numResultMats = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numResultMats});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_collectMaterialTriangles
// Il2CppName: _collectMaterialTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Mesh*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::ArrayW<::UnityEngine::Material*>, ::System::Collections::Specialized::OrderedDictionary*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_collectMaterialTriangles)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* sharedMaterials = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    static auto* sourceMats2submeshIdx_map = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "OrderedDictionary")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_collectMaterialTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, dgo, sharedMaterials, sourceMats2submeshIdx_map});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_collectOutOfBoundsUVRects2
// Il2CppName: _collectOutOfBoundsUVRects2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Mesh*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::ArrayW<::UnityEngine::Material*>, ::System::Collections::Specialized::OrderedDictionary*, ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::DigitalOpus::MB::Core::MB_Utility::MeshAnalysisResult>>*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_collectOutOfBoundsUVRects2)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* sharedMaterials = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    static auto* sourceMats2submeshIdx_map = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "OrderedDictionary")->byval_arg;
    static auto* meshAnalysisResults = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_Utility/MeshAnalysisResult"), 1)})->byval_arg;
    static auto* meshChannelCache = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannelsCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_collectOutOfBoundsUVRects2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, dgo, sharedMaterials, sourceMats2submeshIdx_map, meshAnalysisResults, meshChannelCache});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_validateTextureBakeResults
// Il2CppName: _validateTextureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_validateTextureBakeResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_validateTextureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_showHide
// Il2CppName: _showHide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<::UnityEngine::GameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_showHide)> {
  static const MethodInfo* get() {
    static auto* goToShow = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* goToHide = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_showHide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{goToShow, goToHide});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_addToCombined
// Il2CppName: _addToCombined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<int>, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_addToCombined)> {
  static const MethodInfo* get() {
    static auto* goToAdd = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* goToDelete = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* disableRendererInSource = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_addToCombined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{goToAdd, goToDelete, disableRendererInSource});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_copyAndAdjustUV2FromMesh
// Il2CppName: _copyAndAdjustUV2FromMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MB_DynamicGameObject*, ::UnityEngine::Mesh*, int, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_copyAndAdjustUV2FromMesh)> {
  static const MethodInfo* get() {
    static auto* dgo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MB_DynamicGameObject")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* vertsIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshChannelsCache = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannelsCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_copyAndAdjustUV2FromMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dgo, mesh, vertsIdx, meshChannelsCache});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_getBones
// Il2CppName: _getBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Renderer*, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_getBones)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* isSkinnedMeshWithBones = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_getBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, isSkinnedMeshWithBones});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyShowHide
// Il2CppName: ApplyShowHide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyShowHide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ApplyShowHide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_numNonZeroLengthSubmeshTris
// Il2CppName: _numNonZeroLengthSubmeshTris
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_numNonZeroLengthSubmeshTris)> {
  static const MethodInfo* get() {
    static auto* subTris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/SerializableIntArray"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_numNonZeroLengthSubmeshTris", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subTris});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateMaterialsOnTargetRenderer
// Il2CppName: _updateMaterialsOnTargetRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*>, int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateMaterialsOnTargetRenderer)> {
  static const MethodInfo* get() {
    static auto* subTris = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/SerializableIntArray"), 1)->byval_arg;
    static auto* numNonZeroLengthSubmeshTris = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_updateMaterialsOnTargetRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subTris, numNonZeroLengthSubmeshTris});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetSubmeshTrisWithShowHideApplied
// Il2CppName: GetSubmeshTrisWithShowHideApplied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::SerializableIntArray*> (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetSubmeshTrisWithShowHideApplied)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetSubmeshTrisWithShowHideApplied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateGameObjects
// Il2CppName: _updateGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateGameObjects)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* recalcBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateVertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateNormals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateTangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV5 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV6 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV7 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV8 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateColors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateSkinningInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_updateGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, recalcBounds, updateVertices, updateNormals, updateTangents, updateUV, updateUV2, updateUV3, updateUV4, updateUV5, updateUV6, updateUV7, updateUV8, updateColors, updateSkinningInfo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateGameObject
// Il2CppName: _updateGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannelsCache*, ::System::Collections::Generic::Dictionary_2<int, ::ArrayW<::DigitalOpus::MB::Core::MB_Utility::MeshAnalysisResult>>*, ::System::Collections::Specialized::OrderedDictionary*, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UVAdjuster_Atlas*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_updateGameObject)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* updateVertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateNormals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateTangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV5 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV6 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV7 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV8 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateColors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateSkinningInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* meshChannelCache = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannelsCache")->byval_arg;
    static auto* meshAnalysisResultsCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_Utility/MeshAnalysisResult"), 1)})->byval_arg;
    static auto* sourceMats2submeshIdx_map = &::il2cpp_utils::GetClassFromName("System.Collections.Specialized", "OrderedDictionary")->byval_arg;
    static auto* uVAdjuster = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/UVAdjuster_Atlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_updateGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, updateVertices, updateNormals, updateTangents, updateUV, updateUV2, updateUV3, updateUV4, updateUV5, updateUV6, updateUV7, updateUV8, updateColors, updateSkinningInfo, meshChannelCache, meshAnalysisResultsCache, sourceMats2submeshIdx_map, uVAdjuster});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ShowHideGameObjects
// Il2CppName: ShowHideGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<::UnityEngine::GameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ShowHideGameObjects)> {
  static const MethodInfo* get() {
    static auto* toShow = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* toHide = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ShowHideGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toShow, toHide});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::NewMesh
// Il2CppName: NewMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::NewMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "NewMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ValidateTargRendererAndMeshAndResultSceneObj
// Il2CppName: ValidateTargRendererAndMeshAndResultSceneObj
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ValidateTargRendererAndMeshAndResultSceneObj)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ValidateTargRendererAndMeshAndResultSceneObj", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSourceMatsToSubmeshIdxMap
// Il2CppName: BuildSourceMatsToSubmeshIdxMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Specialized::OrderedDictionary* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSourceMatsToSubmeshIdxMap)> {
  static const MethodInfo* get() {
    static auto* numResultMats = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildSourceMatsToSubmeshIdxMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numResultMats});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSceneHierarchPreBake
// Il2CppName: BuildSceneHierarchPreBake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Renderer* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*, ::UnityEngine::GameObject*, ::UnityEngine::Mesh*, bool, ::ArrayW<::UnityEngine::GameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSceneHierarchPreBake)> {
  static const MethodInfo* get() {
    static auto* mom = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* createNewChild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* objsToBeAdded = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildSceneHierarchPreBake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mom, root, m, createNewChild, objsToBeAdded});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildPrefabHierarchy
// Il2CppName: BuildPrefabHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*, ::UnityEngine::GameObject*, ::UnityEngine::Mesh*, bool, ::ArrayW<::UnityEngine::GameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildPrefabHierarchy)> {
  static const MethodInfo* get() {
    static auto* mom = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle")->byval_arg;
    static auto* instantiatedPrefabRoot = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* createNewChild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* objsToBeAdded = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildPrefabHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mom, instantiatedPrefabRoot, m, createNewChild, objsToBeAdded});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_ConfigureSceneHierarch
// Il2CppName: _ConfigureSceneHierarch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*, ::UnityEngine::GameObject*, ::UnityEngine::MeshRenderer*, ::UnityEngine::MeshFilter*, ::UnityEngine::SkinnedMeshRenderer*, ::UnityEngine::Mesh*, ::ArrayW<::UnityEngine::GameObject*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_ConfigureSceneHierarch)> {
  static const MethodInfo* get() {
    static auto* mom = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* mr = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    static auto* mf = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    static auto* smr = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* objsToBeAdded = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_ConfigureSceneHierarch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mom, root, mr, mf, smr, m, objsToBeAdded});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_SetLightmapIndexIfPreserveLightmapping
// Il2CppName: _SetLightmapIndexIfPreserveLightmapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Renderer*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_SetLightmapIndexIfPreserveLightmapping)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_SetLightmapIndexIfPreserveLightmapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSceneMeshObject
// Il2CppName: BuildSceneMeshObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSceneMeshObject)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* createNewChild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildSceneMeshObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, createNewChild});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::IsMirrored
// Il2CppName: IsMirrored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::Matrix4x4)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::IsMirrored)> {
  static const MethodInfo* get() {
    static auto* tm = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "IsMirrored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tm});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_copyUV2unchangedToSeparateRects
// Il2CppName: _copyUV2unchangedToSeparateRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_copyUV2unchangedToSeparateRects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_copyUV2unchangedToSeparateRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetBlendShapes
// Il2CppName: GetBlendShapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> (*)(::UnityEngine::Mesh*, int, ::UnityEngine::GameObject*, ::System::Collections::Generic::Dictionary_2<int, ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels*>*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetBlendShapes)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* gameObjectID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* meshID2MeshChannels = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannels")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetBlendShapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m, gameObjectID, gameObject, meshID2MeshChannels});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyBlendShapeFramesToMeshAndBuildMap
// Il2CppName: ApplyBlendShapeFramesToMeshAndBuildMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyBlendShapeFramesToMeshAndBuildMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ApplyBlendShapeFramesToMeshAndBuildMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ConvertBlendShapeNameToOutputName
// Il2CppName: ConvertBlendShapeNameToOutputName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::StringW)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ConvertBlendShapeNameToOutputName)> {
  static const MethodInfo* get() {
    static auto* bs = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ConvertBlendShapeNameToOutputName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bs});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName
// Il2CppName: ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ApplyBlendShapeFramesToMeshAndBuildMap_MergeBlendShapesWithTheSameName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSrcShape2CombinedMap
// Il2CppName: BuildSrcShape2CombinedMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined*, ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSrcShape2CombinedMap)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "SerializableSourceBlendShape2Combined")->byval_arg;
    static auto* bs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MBBlendShape"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildSrcShape2CombinedMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map, bs});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_ZeroArray
// Il2CppName: _ZeroArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::Vector3>, int, int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::_ZeroArray)> {
  static const MethodInfo* get() {
    static auto* arr = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "_ZeroArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arr, idx, length});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_textureBakeResults
// Il2CppName: set_textureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::GlobalNamespace::MB2_TextureBakeResults*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_textureBakeResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MB2_TextureBakeResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "set_textureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_renderType
// Il2CppName: set_renderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB_RenderType)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_renderType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_RenderType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "set_renderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_resultSceneObject
// Il2CppName: set_resultSceneObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::set_resultSceneObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "set_resultSceneObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumObjectsInCombined
// Il2CppName: GetNumObjectsInCombined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumObjectsInCombined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetNumObjectsInCombined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetObjectsInCombined
// Il2CppName: GetObjectsInCombined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetObjectsInCombined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetObjectsInCombined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetLightmapIndex
// Il2CppName: GetLightmapIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetLightmapIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetLightmapIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumVerticesFor
// Il2CppName: GetNumVerticesFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumVerticesFor)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetNumVerticesFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumVerticesFor
// Il2CppName: GetNumVerticesFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(int)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetNumVerticesFor)> {
  static const MethodInfo* get() {
    static auto* instanceID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetNumVerticesFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceID});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply)> {
  static const MethodInfo* get() {
    static auto* uv2GenerationMethod = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombiner/GenerateUV2Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv2GenerationMethod});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, ::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* vertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* normals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uvs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bones = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blendShapesFlag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv2GenerationMethod = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombiner/GenerateUV2Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, vertices, normals, tangents, uvs, uv2, uv3, uv4, colors, bones, blendShapesFlag, uv2GenerationMethod});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, ::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::Apply)> {
  static const MethodInfo* get() {
    static auto* triangles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* vertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* normals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uvs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv5 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv6 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv7 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv8 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bones = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blendShapesFlag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uv2GenerationMethod = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_MeshCombiner/GenerateUV2Delegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, vertices, normals, tangents, uvs, uv2, uv3, uv4, uv5, uv6, uv7, uv8, colors, bones, blendShapesFlag, uv2GenerationMethod});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateGameObjects
// Il2CppName: UpdateGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateGameObjects)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* recalcBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateVertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateNormals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateTangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateColors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateSkinningInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "UpdateGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, recalcBounds, updateVertices, updateNormals, updateTangents, updateUV, updateUV2, updateUV3, updateUV4, updateColors, updateSkinningInfo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateGameObjects
// Il2CppName: UpdateGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateGameObjects)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* recalcBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateVertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateNormals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateTangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV2 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV3 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV4 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV5 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV6 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV7 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateUV8 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateColors = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* updateSkinningInfo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "UpdateGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, recalcBounds, updateVertices, updateNormals, updateTangents, updateUV, updateUV2, updateUV3, updateUV4, updateUV5, updateUV6, updateUV7, updateUV8, updateColors, updateSkinningInfo});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::AddDeleteGameObjects
// Il2CppName: AddDeleteGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<::UnityEngine::GameObject*>, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::AddDeleteGameObjects)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* deleteGOs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* disableRendererInSource = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "AddDeleteGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, deleteGOs, disableRendererInSource});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::AddDeleteGameObjectsByID
// Il2CppName: AddDeleteGameObjectsByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<int>, bool)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::AddDeleteGameObjectsByID)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* deleteGOinstanceIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* disableRendererInSource = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "AddDeleteGameObjectsByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, deleteGOinstanceIDs, disableRendererInSource});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::CombinedMeshContains
// Il2CppName: CombinedMeshContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::UnityEngine::GameObject*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::CombinedMeshContains)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "CombinedMeshContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearBuffers
// Il2CppName: ClearBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearBuffers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ClearBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::ClearMesh)> {
  static const MethodInfo* get() {
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editorMethods});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DisposeRuntimeCreated
// Il2CppName: DisposeRuntimeCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DisposeRuntimeCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "DisposeRuntimeCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DestroyMesh
// Il2CppName: DestroyMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DestroyMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "DestroyMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DestroyMeshEditor
// Il2CppName: DestroyMeshEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::DestroyMeshEditor)> {
  static const MethodInfo* get() {
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "DestroyMeshEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editorMethods});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::CheckIntegrity
// Il2CppName: CheckIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::CheckIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "CheckIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetMaterialsOnTargetRenderer
// Il2CppName: GetMaterialsOnTargetRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Material*>* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::GetMaterialsOnTargetRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "GetMaterialsOnTargetRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSourceBlendShapeToCombinedIndexMap
// Il2CppName: BuildSourceBlendShapeToCombinedIndexMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::DigitalOpus::MB::Core::MB3_MeshCombiner::MBBlendShapeKey*, ::DigitalOpus::MB::Core::MB3_MeshCombiner::MBBlendShapeValue*>* (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::BuildSourceBlendShapeToCombinedIndexMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "BuildSourceBlendShapeToCombinedIndexMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBounds
// Il2CppName: UpdateSkinnedMeshApproximateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "UpdateSkinnedMeshApproximateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBoundsFromBones
// Il2CppName: UpdateSkinnedMeshApproximateBoundsFromBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBoundsFromBones)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "UpdateSkinnedMeshApproximateBoundsFromBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBoundsFromBounds
// Il2CppName: UpdateSkinnedMeshApproximateBoundsFromBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshCombinerSingle::*)()>(&DigitalOpus::MB::Core::MB3_MeshCombinerSingle::UpdateSkinnedMeshApproximateBoundsFromBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshCombinerSingle*), "UpdateSkinnedMeshApproximateBoundsFromBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
