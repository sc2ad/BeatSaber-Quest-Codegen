// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerPackerMeshBaker
#include "DigitalOpus/MB/Core/MB3_TextureCombinerPackerMeshBaker.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerPipeline
#include "DigitalOpus/MB/Core/MB3_TextureCombinerPipeline.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
  // Forward declaring type: MB3_TextureCombiner
  class MB3_TextureCombiner;
  // Forward declaring type: ProgressUpdateDelegate
  class ProgressUpdateDelegate;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*, "DigitalOpus.MB.Core", "MB3_TextureCombinerPackerMeshBaker/<CreateAtlases>d__1");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombinerPackerMeshBaker/DigitalOpus.MB.Core.<CreateAtlases>d__1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public DigitalOpus.MB.Core.AtlasPackingResult packedAtlasRects
    // Size: 0x8
    // Offset: 0x20
    ::DigitalOpus::MB::Core::AtlasPackingResult* packedAtlasRects;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::AtlasPackingResult*) == 0x8);
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x28
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: LOG_LEVEL and: data
    char __padding3[0x4] = {};
    // public DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data
    // Size: 0x8
    // Offset: 0x30
    ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_TextureCombiner combiner
    // Size: 0x8
    // Offset: 0x38
    ::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner*) == 0x8);
    // public DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo
    // Size: 0x8
    // Offset: 0x40
    ::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::ProgressUpdateDelegate*) == 0x8);
    // public DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods
    // Size: 0x8
    // Offset: 0x48
    ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*) == 0x8);
    // public UnityEngine.Texture2D[] atlases
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Texture2D*> atlases;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // private UnityEngine.Rect[] <uvRects>5__2
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Rect> $uvRects$5__2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rect>) == 0x8);
    // private System.Int32 <atlasSizeX>5__3
    // Size: 0x4
    // Offset: 0x60
    int $atlasSizeX$5__3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <atlasSizeY>5__4
    // Size: 0x4
    // Offset: 0x64
    int $atlasSizeY$5__4;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <propIdx>5__5
    // Size: 0x4
    // Offset: 0x68
    int $propIdx$5__5;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $propIdx$5__5 and: $property$5__6
    char __padding12[0x4] = {};
    // private DigitalOpus.MB.Core.ShaderTextureProperty <property>5__6
    // Size: 0x8
    // Offset: 0x70
    ::DigitalOpus::MB::Core::ShaderTextureProperty* $property$5__6;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::ShaderTextureProperty*) == 0x8);
    // private UnityEngine.Color[][] <atlasPixels>5__7
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::ArrayW<::UnityEngine::Color>> $atlasPixels$5__7;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Color>>) == 0x8);
    // private System.Boolean <isNormalMap>5__8
    // Size: 0x1
    // Offset: 0x80
    bool $isNormalMap$5__8;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: $isNormalMap$5__8 and: $texSetIdx$5__9
    char __padding15[0x3] = {};
    // private System.Int32 <texSetIdx>5__9
    // Size: 0x4
    // Offset: 0x84
    int $texSetIdx$5__9;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public DigitalOpus.MB.Core.AtlasPackingResult packedAtlasRects
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::AtlasPackingResult*& dyn_packedAtlasRects();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*& dyn_data();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombiner combiner
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner*& dyn_combiner();
    // Get instance field reference: public DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::ProgressUpdateDelegate*& dyn_progressInfo();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*& dyn_textureEditorMethods();
    // Get instance field reference: public UnityEngine.Texture2D[] atlases
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_atlases();
    // Get instance field reference: private UnityEngine.Rect[] <uvRects>5__2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rect>& dyn_$uvRects$5__2();
    // Get instance field reference: private System.Int32 <atlasSizeX>5__3
    [[deprecated("Use field access instead!")]] int& dyn_$atlasSizeX$5__3();
    // Get instance field reference: private System.Int32 <atlasSizeY>5__4
    [[deprecated("Use field access instead!")]] int& dyn_$atlasSizeY$5__4();
    // Get instance field reference: private System.Int32 <propIdx>5__5
    [[deprecated("Use field access instead!")]] int& dyn_$propIdx$5__5();
    // Get instance field reference: private DigitalOpus.MB.Core.ShaderTextureProperty <property>5__6
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::ShaderTextureProperty*& dyn_$property$5__6();
    // Get instance field reference: private UnityEngine.Color[][] <atlasPixels>5__7
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Color>>& dyn_$atlasPixels$5__7();
    // Get instance field reference: private System.Boolean <isNormalMap>5__8
    [[deprecated("Use field access instead!")]] bool& dyn_$isNormalMap$5__8();
    // Get instance field reference: private System.Int32 <texSetIdx>5__9
    [[deprecated("Use field access instead!")]] int& dyn_$texSetIdx$5__9();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x120D474
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x120D4DC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x120BA24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x120C5B0
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x120C5B4
    bool MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x120D47C
    void System_Collections_IEnumerator_Reset();
  }; // DigitalOpus.MB.Core.MB3_TextureCombinerPackerMeshBaker/DigitalOpus.MB.Core.<CreateAtlases>d__1
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1), 132 + sizeof(int)> __DigitalOpus_MB_Core_MB3_TextureCombinerPackerMeshBaker_$CreateAtlases$d__1SizeCheck;
  static_assert(sizeof(MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerPackerMeshBaker::$CreateAtlases$d__1*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
