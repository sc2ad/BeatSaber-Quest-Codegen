// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: SerializableSourceBlendShape2Combined
  class SerializableSourceBlendShape2Combined;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB_BlendShape2CombinedMap
  class MB_BlendShape2CombinedMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB_BlendShape2CombinedMap);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB_BlendShape2CombinedMap*, "DigitalOpus.MB.Core", "MB_BlendShape2CombinedMap");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB_BlendShape2CombinedMap
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_BlendShape2CombinedMap : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public DigitalOpus.MB.Core.SerializableSourceBlendShape2Combined srcToCombinedMap
    // Size: 0x8
    // Offset: 0x18
    ::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined* srcToCombinedMap;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public DigitalOpus.MB.Core.SerializableSourceBlendShape2Combined srcToCombinedMap
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined*& dyn_srcToCombinedMap();
    // public System.Void .ctor()
    // Offset: 0x15DAA68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_BlendShape2CombinedMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB_BlendShape2CombinedMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_BlendShape2CombinedMap*, creationType>()));
    }
    // public DigitalOpus.MB.Core.SerializableSourceBlendShape2Combined GetMap()
    // Offset: 0x15DA9FC
    ::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined* GetMap();
  }; // DigitalOpus.MB.Core.MB_BlendShape2CombinedMap
  #pragma pack(pop)
  static check_size<sizeof(MB_BlendShape2CombinedMap), 24 + sizeof(::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined*)> __DigitalOpus_MB_Core_MB_BlendShape2CombinedMapSizeCheck;
  static_assert(sizeof(MB_BlendShape2CombinedMap) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_BlendShape2CombinedMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_BlendShape2CombinedMap::GetMap
// Il2CppName: GetMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::SerializableSourceBlendShape2Combined* (DigitalOpus::MB::Core::MB_BlendShape2CombinedMap::*)()>(&DigitalOpus::MB::Core::MB_BlendShape2CombinedMap::GetMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_BlendShape2CombinedMap*), "GetMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
