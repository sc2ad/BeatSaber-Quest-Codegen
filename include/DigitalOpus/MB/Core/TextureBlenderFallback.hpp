// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.TextureBlender
#include "DigitalOpus/MB/Core/TextureBlender.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: TextureBlenderFallback
  class TextureBlenderFallback;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::TextureBlenderFallback);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::TextureBlenderFallback*, "DigitalOpus.MB.Core", "TextureBlenderFallback");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.TextureBlenderFallback
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureBlenderFallback : public ::Il2CppObject/*, public ::DigitalOpus::MB::Core::TextureBlender*/ {
    public:
    public:
    // private System.Boolean m_doTintColor
    // Size: 0x1
    // Offset: 0x10
    bool m_doTintColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_doTintColor and: m_tintColor
    char __padding0[0x3] = {};
    // private UnityEngine.Color m_tintColor
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::Color m_tintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_defaultColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color m_defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating interface conversion operator: operator ::DigitalOpus::MB::Core::TextureBlender
    operator ::DigitalOpus::MB::Core::TextureBlender() noexcept {
      return *reinterpret_cast<::DigitalOpus::MB::Core::TextureBlender*>(this);
    }
    // Get instance field reference: private System.Boolean m_doTintColor
    [[deprecated("Use field access instead!")]] bool& dyn_m_doTintColor();
    // Get instance field reference: private UnityEngine.Color m_tintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_tintColor();
    // Get instance field reference: private UnityEngine.Color m_defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_defaultColor();
    // public System.Void .ctor()
    // Offset: 0x11BAA6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureBlenderFallback* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::TextureBlenderFallback::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureBlenderFallback*, creationType>()));
    }
    // public System.Boolean DoesShaderNameMatch(System.String shaderName)
    // Offset: 0x11B9C4C
    bool DoesShaderNameMatch(::StringW shaderName);
    // public System.Void OnBeforeTintTexture(UnityEngine.Material sourceMat, System.String shaderTexturePropertyName)
    // Offset: 0x11B9C54
    void OnBeforeTintTexture(::UnityEngine::Material* sourceMat, ::StringW shaderTexturePropertyName);
    // public UnityEngine.Color OnBlendTexturePixel(System.String shaderPropertyName, UnityEngine.Color pixelColor)
    // Offset: 0x11B9D3C
    ::UnityEngine::Color OnBlendTexturePixel(::StringW shaderPropertyName, ::UnityEngine::Color pixelColor);
    // public System.Boolean NonTexturePropertiesAreEqual(UnityEngine.Material a, UnityEngine.Material b)
    // Offset: 0x11B9D98
    bool NonTexturePropertiesAreEqual(::UnityEngine::Material* a, ::UnityEngine::Material* b);
    // public System.Void SetNonTexturePropertyValuesOnResultMaterial(UnityEngine.Material resultMaterial)
    // Offset: 0x11B9F5C
    void SetNonTexturePropertyValuesOnResultMaterial(::UnityEngine::Material* resultMaterial);
    // public UnityEngine.Color GetColorIfNoTexture(UnityEngine.Material mat, DigitalOpus.MB.Core.ShaderTextureProperty texProperty)
    // Offset: 0x11BA00C
    ::UnityEngine::Color GetColorIfNoTexture(::UnityEngine::Material* mat, ::DigitalOpus::MB::Core::ShaderTextureProperty* texProperty);
    // static public System.Boolean _compareColor(UnityEngine.Material a, UnityEngine.Material b, UnityEngine.Color defaultVal, System.String propertyName)
    // Offset: 0x11B9E50
    static bool _compareColor(::UnityEngine::Material* a, ::UnityEngine::Material* b, ::UnityEngine::Color defaultVal, ::StringW propertyName);
    // static public System.Boolean _compareFloat(UnityEngine.Material a, UnityEngine.Material b, System.Single defaultVal, System.String propertyName)
    // Offset: 0x11BA9D0
    static bool _compareFloat(::UnityEngine::Material* a, ::UnityEngine::Material* b, float defaultVal, ::StringW propertyName);
  }; // DigitalOpus.MB.Core.TextureBlenderFallback
  #pragma pack(pop)
  static check_size<sizeof(TextureBlenderFallback), 36 + sizeof(::UnityEngine::Color)> __DigitalOpus_MB_Core_TextureBlenderFallbackSizeCheck;
  static_assert(sizeof(TextureBlenderFallback) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::DoesShaderNameMatch
// Il2CppName: DoesShaderNameMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::StringW)>(&DigitalOpus::MB::Core::TextureBlenderFallback::DoesShaderNameMatch)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "DoesShaderNameMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::OnBeforeTintTexture
// Il2CppName: OnBeforeTintTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::UnityEngine::Material*, ::StringW)>(&DigitalOpus::MB::Core::TextureBlenderFallback::OnBeforeTintTexture)> {
  static const MethodInfo* get() {
    static auto* sourceMat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* shaderTexturePropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "OnBeforeTintTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceMat, shaderTexturePropertyName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::OnBlendTexturePixel
// Il2CppName: OnBlendTexturePixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::StringW, ::UnityEngine::Color)>(&DigitalOpus::MB::Core::TextureBlenderFallback::OnBlendTexturePixel)> {
  static const MethodInfo* get() {
    static auto* shaderPropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pixelColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "OnBlendTexturePixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderPropertyName, pixelColor});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::NonTexturePropertiesAreEqual
// Il2CppName: NonTexturePropertiesAreEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::UnityEngine::Material*, ::UnityEngine::Material*)>(&DigitalOpus::MB::Core::TextureBlenderFallback::NonTexturePropertiesAreEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "NonTexturePropertiesAreEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::SetNonTexturePropertyValuesOnResultMaterial
// Il2CppName: SetNonTexturePropertyValuesOnResultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::UnityEngine::Material*)>(&DigitalOpus::MB::Core::TextureBlenderFallback::SetNonTexturePropertyValuesOnResultMaterial)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "SetNonTexturePropertyValuesOnResultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::GetColorIfNoTexture
// Il2CppName: GetColorIfNoTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::TextureBlenderFallback::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::TextureBlenderFallback::GetColorIfNoTexture)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texProperty = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "GetColorIfNoTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, texProperty});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::_compareColor
// Il2CppName: _compareColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Material*, ::UnityEngine::Material*, ::UnityEngine::Color, ::StringW)>(&DigitalOpus::MB::Core::TextureBlenderFallback::_compareColor)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* defaultVal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "_compareColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, defaultVal, propertyName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderFallback::_compareFloat
// Il2CppName: _compareFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Material*, ::UnityEngine::Material*, float, ::StringW)>(&DigitalOpus::MB::Core::TextureBlenderFallback::_compareFloat)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* defaultVal = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderFallback*), "_compareFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, defaultVal, propertyName});
  }
};
