// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: DigitalOpus.MB.Core.AtlasPadding
#include "DigitalOpus/MB/Core/AtlasPadding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::AtlasPackingResult);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::AtlasPackingResult*, "DigitalOpus.MB.Core", "AtlasPackingResult");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.AtlasPackingResult
  // [TokenAttribute] Offset: FFFFFFFF
  class AtlasPackingResult : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 atlasX
    // Size: 0x4
    // Offset: 0x10
    int atlasX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 atlasY
    // Size: 0x4
    // Offset: 0x14
    int atlasY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 usedW
    // Size: 0x4
    // Offset: 0x18
    int usedW;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 usedH
    // Size: 0x4
    // Offset: 0x1C
    int usedH;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Rect[] rects
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Rect> rects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rect>) == 0x8);
    // public DigitalOpus.MB.Core.AtlasPadding[] padding
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPadding> padding;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::AtlasPadding>) == 0x8);
    // public System.Int32[] srcImgIdxs
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> srcImgIdxs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Object data
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* data;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 atlasX
    [[deprecated("Use field access instead!")]] int& dyn_atlasX();
    // Get instance field reference: public System.Int32 atlasY
    [[deprecated("Use field access instead!")]] int& dyn_atlasY();
    // Get instance field reference: public System.Int32 usedW
    [[deprecated("Use field access instead!")]] int& dyn_usedW();
    // Get instance field reference: public System.Int32 usedH
    [[deprecated("Use field access instead!")]] int& dyn_usedH();
    // Get instance field reference: public UnityEngine.Rect[] rects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rect>& dyn_rects();
    // Get instance field reference: public DigitalOpus.MB.Core.AtlasPadding[] padding
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::AtlasPadding>& dyn_padding();
    // Get instance field reference: public System.Int32[] srcImgIdxs
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_srcImgIdxs();
    // Get instance field reference: public System.Object data
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_data();
    // public System.Void .ctor(DigitalOpus.MB.Core.AtlasPadding[] pds)
    // Offset: 0xC15B3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AtlasPackingResult* New_ctor(::ArrayW<::DigitalOpus::MB::Core::AtlasPadding> pds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::AtlasPackingResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AtlasPackingResult*, creationType>(pds)));
    }
    // public System.Void CalcUsedWidthAndHeight()
    // Offset: 0xC15B68
    void CalcUsedWidthAndHeight();
    // public override System.String ToString()
    // Offset: 0xC15DA4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // DigitalOpus.MB.Core.AtlasPackingResult
  #pragma pack(pop)
  static check_size<sizeof(AtlasPackingResult), 56 + sizeof(::Il2CppObject*)> __DigitalOpus_MB_Core_AtlasPackingResultSizeCheck;
  static_assert(sizeof(AtlasPackingResult) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::AtlasPackingResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::AtlasPackingResult::CalcUsedWidthAndHeight
// Il2CppName: CalcUsedWidthAndHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::AtlasPackingResult::*)()>(&DigitalOpus::MB::Core::AtlasPackingResult::CalcUsedWidthAndHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::AtlasPackingResult*), "CalcUsedWidthAndHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::AtlasPackingResult::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (DigitalOpus::MB::Core::AtlasPackingResult::*)()>(&DigitalOpus::MB::Core::AtlasPackingResult::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::AtlasPackingResult*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
