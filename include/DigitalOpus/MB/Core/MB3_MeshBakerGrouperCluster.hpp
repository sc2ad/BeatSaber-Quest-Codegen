// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MeshBakerGrouperCore
#include "DigitalOpus/MB/Core/MB3_MeshBakerGrouperCore.hpp"
// Including type: DigitalOpus.MB.Core.MB3_AgglomerativeClustering
#include "DigitalOpus/MB/Core/MB3_AgglomerativeClustering.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: GrouperData
  class GrouperData;
  // Forward declaring type: ProgressUpdateCancelableDelegate
  class ProgressUpdateCancelableDelegate;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Renderer
  class Renderer;
  // Skipping declaration: Bounds because it is already included!
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_MeshBakerGrouperCluster
  class MB3_MeshBakerGrouperCluster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*, "DigitalOpus.MB.Core", "MB3_MeshBakerGrouperCluster");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_MeshBakerGrouperCluster
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MeshBakerGrouperCluster : public ::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCore {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::$$c__DisplayClass8_0
    class $$c__DisplayClass8_0;
    // Nested type: ::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::$$c__DisplayClass8_1
    class $$c__DisplayClass8_1;
    public:
    // public DigitalOpus.MB.Core.MB3_AgglomerativeClustering cluster
    // Size: 0x8
    // Offset: 0x18
    ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering* cluster;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering*) == 0x8);
    // private System.Single _lastMaxDistBetweenClusters
    // Size: 0x4
    // Offset: 0x20
    float lastMaxDistBetweenClusters;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _ObjsExtents
    // Size: 0x4
    // Offset: 0x24
    float ObjsExtents;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _minDistBetweenClusters
    // Size: 0x4
    // Offset: 0x28
    float minDistBetweenClusters;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minDistBetweenClusters and: clustersToDraw
    char __padding3[0x4] = {};
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode> _clustersToDraw
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*>* clustersToDraw;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*>*) == 0x8);
    // private System.Single[] _radii
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> radii;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Deleting conversion operator: operator ::DigitalOpus::MB::Core::GrouperData*
    constexpr operator ::DigitalOpus::MB::Core::GrouperData*() const noexcept = delete;
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_AgglomerativeClustering cluster
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering*& dyn_cluster();
    // Get instance field reference: private System.Single _lastMaxDistBetweenClusters
    [[deprecated("Use field access instead!")]] float& dyn__lastMaxDistBetweenClusters();
    // Get instance field reference: public System.Single _ObjsExtents
    [[deprecated("Use field access instead!")]] float& dyn__ObjsExtents();
    // Get instance field reference: public System.Single _minDistBetweenClusters
    [[deprecated("Use field access instead!")]] float& dyn__minDistBetweenClusters();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode> _clustersToDraw
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*>*& dyn__clustersToDraw();
    // Get instance field reference: private System.Single[] _radii
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__radii();
    // public System.Void .ctor(DigitalOpus.MB.Core.GrouperData data, System.Collections.Generic.List`1<UnityEngine.GameObject> gos)
    // Offset: 0xC2492C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MeshBakerGrouperCluster* New_ctor(::DigitalOpus::MB::Core::GrouperData* data, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MeshBakerGrouperCluster*, creationType>(data, gos)));
    }
    // public System.Void BuildClusters(System.Collections.Generic.List`1<UnityEngine.GameObject> gos, DigitalOpus.MB.Core.ProgressUpdateCancelableDelegate progFunc)
    // Offset: 0xC24C20
    void BuildClusters(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gos, ::DigitalOpus::MB::Core::ProgressUpdateCancelableDelegate* progFunc);
    // private System.Void _BuildListOfClustersToDraw(DigitalOpus.MB.Core.ProgressUpdateCancelableDelegate progFunc, out System.Single smallest, out System.Single largest)
    // Offset: 0xC25080
    void _BuildListOfClustersToDraw(::DigitalOpus::MB::Core::ProgressUpdateCancelableDelegate* progFunc, ByRef<float> smallest, ByRef<float> largest);
    // public override System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<UnityEngine.Renderer>> FilterIntoGroups(System.Collections.Generic.List`1<UnityEngine.GameObject> selection)
    // Offset: 0xC249C4
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshBakerGrouperCore
    // Base method: System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<UnityEngine.Renderer>> MB3_MeshBakerGrouperCore::FilterIntoGroups(System.Collections.Generic.List`1<UnityEngine.GameObject> selection)
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*>* FilterIntoGroups(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* selection);
    // public override System.Void DrawGizmos(UnityEngine.Bounds sceneObjectBounds)
    // Offset: 0xC2562C
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshBakerGrouperCore
    // Base method: System.Void MB3_MeshBakerGrouperCore::DrawGizmos(UnityEngine.Bounds sceneObjectBounds)
    void DrawGizmos(::UnityEngine::Bounds sceneObjectBounds);
    // public override MB3_MeshBakerGrouper/ClusterType GetClusterType()
    // Offset: 0xC257C0
    // Implemented from: DigitalOpus.MB.Core.MB3_MeshBakerGrouperCore
    // Base method: MB3_MeshBakerGrouper/ClusterType MB3_MeshBakerGrouperCore::GetClusterType()
    ::GlobalNamespace::MB3_MeshBakerGrouper::ClusterType GetClusterType();
  }; // DigitalOpus.MB.Core.MB3_MeshBakerGrouperCluster
  #pragma pack(pop)
  static check_size<sizeof(MB3_MeshBakerGrouperCluster), 56 + sizeof(::ArrayW<float>)> __DigitalOpus_MB_Core_MB3_MeshBakerGrouperClusterSizeCheck;
  static_assert(sizeof(MB3_MeshBakerGrouperCluster) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::BuildClusters
// Il2CppName: BuildClusters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::DigitalOpus::MB::Core::ProgressUpdateCancelableDelegate*)>(&DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::BuildClusters)> {
  static const MethodInfo* get() {
    static auto* gos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* progFunc = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateCancelableDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*), "BuildClusters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, progFunc});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::_BuildListOfClustersToDraw
// Il2CppName: _BuildListOfClustersToDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::*)(::DigitalOpus::MB::Core::ProgressUpdateCancelableDelegate*, ByRef<float>, ByRef<float>)>(&DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::_BuildListOfClustersToDraw)> {
  static const MethodInfo* get() {
    static auto* progFunc = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateCancelableDelegate")->byval_arg;
    static auto* smallest = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* largest = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*), "_BuildListOfClustersToDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progFunc, smallest, largest});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::FilterIntoGroups
// Il2CppName: FilterIntoGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*>* (DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::FilterIntoGroups)> {
  static const MethodInfo* get() {
    static auto* selection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*), "FilterIntoGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selection});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::DrawGizmos
// Il2CppName: DrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::*)(::UnityEngine::Bounds)>(&DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::DrawGizmos)> {
  static const MethodInfo* get() {
    static auto* sceneObjectBounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*), "DrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneObjectBounds});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::GetClusterType
// Il2CppName: GetClusterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB3_MeshBakerGrouper::ClusterType (DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::*)()>(&DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster::GetClusterType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MeshBakerGrouperCluster*), "GetClusterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
