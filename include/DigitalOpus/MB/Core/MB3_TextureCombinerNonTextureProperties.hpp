// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: TextureBlender
  class TextureBlender;
  // Forward declaring type: MB_TexSet
  class MB_TexSet;
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_TextureCombinerNonTextureProperties
  class MB3_TextureCombinerNonTextureProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*, "DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_TextureCombinerNonTextureProperties : public ::Il2CppObject {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty
    class MaterialProperty;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyFloat
    class MaterialPropertyFloat;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyColor
    class MaterialPropertyColor;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveraged
    class MaterialPropertyValueAveraged;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat
    class MaterialPropertyValueAveragedFloat;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedColor
    class MaterialPropertyValueAveragedColor;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair
    struct TexPropertyNameColorPair;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTextureProperties
    class NonTextureProperties;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTexturePropertiesDontBlendProps
    class NonTexturePropertiesDontBlendProps;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTexturePropertiesBlendProps
    class NonTexturePropertiesBlendProps;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.TexPropertyNameColorPair
    // [TokenAttribute] Offset: FFFFFFFF
    struct TexPropertyNameColorPair/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public UnityEngine.Color color
      // Size: 0x10
      // Offset: 0x8
      ::UnityEngine::Color color;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color) == 0x10);
      public:
      // Creating value type constructor for type: TexPropertyNameColorPair
      constexpr TexPropertyNameColorPair(::StringW name_ = {}, ::UnityEngine::Color color_ = {}) noexcept : name{name_}, color{color_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public UnityEngine.Color color
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
      // public System.Void .ctor(System.String nm, UnityEngine.Color col)
      // Offset: 0xA58924
      // ABORTED: conflicts with another method.  TexPropertyNameColorPair(::StringW nm, ::UnityEngine::Color col);
    }; // DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.TexPropertyNameColorPair
    #pragma pack(pop)
    static check_size<sizeof(MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair), 8 + sizeof(::UnityEngine::Color)> __DigitalOpus_MB_Core_MB3_TextureCombinerNonTextureProperties_TexPropertyNameColorPairSizeCheck;
    static_assert(sizeof(MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair) == 0x18);
    public:
    // private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.TexPropertyNameColorPair[] defaultTextureProperty2DefaultColorMap
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair> defaultTextureProperty2DefaultColorMap;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair>) == 0x8);
    // private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialProperty[] _nonTextureProperties
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty*> nonTextureProperties;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty*>) == 0x8);
    // private DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // private System.Boolean _considerNonTextureProperties
    // Size: 0x1
    // Offset: 0x24
    bool considerNonTextureProperties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: considerNonTextureProperties and: resultMaterialTextureBlender
    char __padding3[0x3] = {};
    // private DigitalOpus.MB.Core.TextureBlender resultMaterialTextureBlender
    // Size: 0x8
    // Offset: 0x28
    ::DigitalOpus::MB::Core::TextureBlender* resultMaterialTextureBlender;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::TextureBlender*) == 0x8);
    // private DigitalOpus.MB.Core.TextureBlender[] textureBlenders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::DigitalOpus::MB::Core::TextureBlender*> textureBlenders;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::TextureBlender*>) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Color> textureProperty2DefaultColorMap
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Color>* textureProperty2DefaultColorMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Color>*) == 0x8);
    // private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.NonTextureProperties _nonTexturePropertiesBlender
    // Size: 0x8
    // Offset: 0x40
    ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTextureProperties* nonTexturePropertiesBlender;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTextureProperties*) == 0x8);
    public:
    // Get static field: static public UnityEngine.Color NEUTRAL_NORMAL_MAP_COLOR
    static ::UnityEngine::Color _get_NEUTRAL_NORMAL_MAP_COLOR();
    // Set static field: static public UnityEngine.Color NEUTRAL_NORMAL_MAP_COLOR
    static void _set_NEUTRAL_NORMAL_MAP_COLOR(::UnityEngine::Color value);
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.TexPropertyNameColorPair[] defaultTextureProperty2DefaultColorMap
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair>& dyn_defaultTextureProperty2DefaultColorMap();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialProperty[] _nonTextureProperties
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty*>& dyn__nonTextureProperties();
    // Get instance field reference: private DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: private System.Boolean _considerNonTextureProperties
    [[deprecated("Use field access instead!")]] bool& dyn__considerNonTextureProperties();
    // Get instance field reference: private DigitalOpus.MB.Core.TextureBlender resultMaterialTextureBlender
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::TextureBlender*& dyn_resultMaterialTextureBlender();
    // Get instance field reference: private DigitalOpus.MB.Core.TextureBlender[] textureBlenders
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::TextureBlender*>& dyn_textureBlenders();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Color> textureProperty2DefaultColorMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Color>*& dyn_textureProperty2DefaultColorMap();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.NonTextureProperties _nonTexturePropertiesBlender
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTextureProperties*& dyn__nonTexturePropertiesBlender();
    // public System.Void .ctor(DigitalOpus.MB.Core.MB2_LogLevel ll, System.Boolean considerNonTextureProps)
    // Offset: 0x1202698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureCombinerNonTextureProperties* New_ctor(::DigitalOpus::MB::Core::MB2_LogLevel ll, bool considerNonTextureProps) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureCombinerNonTextureProperties*, creationType>(ll, considerNonTextureProps)));
    }
    // static private System.Void .cctor()
    // Offset: 0x120A204
    static void _cctor();
    // System.Void CollectAverageValuesOfNonTextureProperties(UnityEngine.Material resultMaterial, UnityEngine.Material mat)
    // Offset: 0x12093A8
    void CollectAverageValuesOfNonTextureProperties(::UnityEngine::Material* resultMaterial, ::UnityEngine::Material* mat);
    // System.Void LoadTextureBlendersIfNeeded(UnityEngine.Material resultMaterial)
    // Offset: 0x1205F88
    void LoadTextureBlendersIfNeeded(::UnityEngine::Material* resultMaterial);
    // static private System.Boolean InterfaceFilter(System.Type typeObj, System.Object criteriaObj)
    // Offset: 0x1209BE0
    static bool InterfaceFilter(::System::Type* typeObj, ::Il2CppObject* criteriaObj);
    // private System.Void FindBestTextureBlender(UnityEngine.Material resultMaterial)
    // Offset: 0x1209A7C
    void FindBestTextureBlender(::UnityEngine::Material* resultMaterial);
    // private System.Void LoadTextureBlenders()
    // Offset: 0x12095A8
    void LoadTextureBlenders();
    // System.Boolean NonTexturePropertiesAreEqual(UnityEngine.Material a, UnityEngine.Material b)
    // Offset: 0x1209DA0
    bool NonTexturePropertiesAreEqual(::UnityEngine::Material* a, ::UnityEngine::Material* b);
    // UnityEngine.Texture2D TintTextureWithTextureCombiner(UnityEngine.Texture2D t, DigitalOpus.MB.Core.MB_TexSet sourceMaterial, DigitalOpus.MB.Core.ShaderTextureProperty shaderPropertyName)
    // Offset: 0x1209E68
    ::UnityEngine::Texture2D* TintTextureWithTextureCombiner(::UnityEngine::Texture2D* t, ::DigitalOpus::MB::Core::MB_TexSet* sourceMaterial, ::DigitalOpus::MB::Core::ShaderTextureProperty* shaderPropertyName);
    // System.Void AdjustNonTextureProperties(UnityEngine.Material resultMat, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> texPropertyNames, DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    // Offset: 0x1209F44
    void AdjustNonTextureProperties(::UnityEngine::Material* resultMat, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* texPropertyNames, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods);
    // UnityEngine.Color GetColorAsItWouldAppearInAtlasIfNoTexture(UnityEngine.Material matIfBlender, DigitalOpus.MB.Core.ShaderTextureProperty texProperty)
    // Offset: 0x120A06C
    ::UnityEngine::Color GetColorAsItWouldAppearInAtlasIfNoTexture(::UnityEngine::Material* matIfBlender, ::DigitalOpus::MB::Core::ShaderTextureProperty* texProperty);
    // UnityEngine.Color GetColorForTemporaryTexture(UnityEngine.Material matIfBlender, DigitalOpus.MB.Core.ShaderTextureProperty texProperty)
    // Offset: 0x120A138
    ::UnityEngine::Color GetColorForTemporaryTexture(::UnityEngine::Material* matIfBlender, ::DigitalOpus::MB::Core::ShaderTextureProperty* texProperty);
    // private DigitalOpus.MB.Core.TextureBlender FindMatchingTextureBlender(System.String shaderName)
    // Offset: 0x1209C34
    ::DigitalOpus::MB::Core::TextureBlender* FindMatchingTextureBlender(::StringW shaderName);
  }; // DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureCombinerNonTextureProperties), 64 + sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTextureProperties*)> __DigitalOpus_MB_Core_MB3_TextureCombinerNonTexturePropertiesSizeCheck;
  static_assert(sizeof(MB3_TextureCombinerNonTextureProperties) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TexPropertyNameColorPair, "DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties/TexPropertyNameColorPair");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::CollectAverageValuesOfNonTextureProperties
// Il2CppName: CollectAverageValuesOfNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*, ::UnityEngine::Material*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::CollectAverageValuesOfNonTextureProperties)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "CollectAverageValuesOfNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial, mat});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::LoadTextureBlendersIfNeeded
// Il2CppName: LoadTextureBlendersIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::LoadTextureBlendersIfNeeded)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "LoadTextureBlendersIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::InterfaceFilter
// Il2CppName: InterfaceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::Il2CppObject*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::InterfaceFilter)> {
  static const MethodInfo* get() {
    static auto* typeObj = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* criteriaObj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "InterfaceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeObj, criteriaObj});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::FindBestTextureBlender
// Il2CppName: FindBestTextureBlender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::FindBestTextureBlender)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "FindBestTextureBlender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::LoadTextureBlenders
// Il2CppName: LoadTextureBlenders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::LoadTextureBlenders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "LoadTextureBlenders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTexturePropertiesAreEqual
// Il2CppName: NonTexturePropertiesAreEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*, ::UnityEngine::Material*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::NonTexturePropertiesAreEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "NonTexturePropertiesAreEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TintTextureWithTextureCombiner
// Il2CppName: TintTextureWithTextureCombiner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Texture2D*, ::DigitalOpus::MB::Core::MB_TexSet*, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::TintTextureWithTextureCombiner)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* sourceMaterial = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TexSet")->byval_arg;
    static auto* shaderPropertyName = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "TintTextureWithTextureCombiner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, sourceMaterial, shaderPropertyName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::AdjustNonTextureProperties
// Il2CppName: AdjustNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::AdjustNonTextureProperties)> {
  static const MethodInfo* get() {
    static auto* resultMat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texPropertyNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "AdjustNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMat, texPropertyNames, editorMethods});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::GetColorAsItWouldAppearInAtlasIfNoTexture
// Il2CppName: GetColorAsItWouldAppearInAtlasIfNoTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::GetColorAsItWouldAppearInAtlasIfNoTexture)> {
  static const MethodInfo* get() {
    static auto* matIfBlender = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texProperty = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "GetColorAsItWouldAppearInAtlasIfNoTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matIfBlender, texProperty});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::GetColorForTemporaryTexture
// Il2CppName: GetColorForTemporaryTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::GetColorForTemporaryTexture)> {
  static const MethodInfo* get() {
    static auto* matIfBlender = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texProperty = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "GetColorForTemporaryTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matIfBlender, texProperty});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::FindMatchingTextureBlender
// Il2CppName: FindMatchingTextureBlender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::TextureBlender* (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::*)(::StringW)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::FindMatchingTextureBlender)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*), "FindMatchingTextureBlender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
