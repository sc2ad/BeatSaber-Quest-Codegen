// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_TexturePacker
#include "DigitalOpus/MB/Core/MB2_TexturePacker.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB2_TexturePackerHorizontalVert
  class MB2_TexturePackerHorizontalVert;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*, "DigitalOpus.MB.Core", "MB2_TexturePackerHorizontalVert");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x1D
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert
  // [TokenAttribute] Offset: FFFFFFFF
  class MB2_TexturePackerHorizontalVert : public ::DigitalOpus::MB::Core::MB2_TexturePacker {
    public:
    // Writing base type padding for base size: 0x15 to desired offset: 0x18
    char ___base_padding[0x3] = {};
    // Nested type: ::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation
    struct TexturePackingOrientation;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation
    // [TokenAttribute] Offset: FFFFFFFF
    struct TexturePackingOrientation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TexturePackingOrientation
      constexpr TexturePackingOrientation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation horizontal
      static constexpr const int horizontal = 0;
      // Get static field: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation horizontal
      static ::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation _get_horizontal();
      // Set static field: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation horizontal
      static void _set_horizontal(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation value);
      // static field const value: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation vertical
      static constexpr const int vertical = 1;
      // Get static field: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation vertical
      static ::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation _get_vertical();
      // Set static field: static public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation vertical
      static void _set_vertical(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation
    #pragma pack(pop)
    static check_size<sizeof(MB2_TexturePackerHorizontalVert::TexturePackingOrientation), 0 + sizeof(int)> __DigitalOpus_MB_Core_MB2_TexturePackerHorizontalVert_TexturePackingOrientationSizeCheck;
    static_assert(sizeof(MB2_TexturePackerHorizontalVert::TexturePackingOrientation) == 0x4);
    public:
    // public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation packingOrientation
    // Size: 0x4
    // Offset: 0x18
    ::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation packingOrientation;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation) == 0x4);
    // public System.Boolean stretchImagesToEdges
    // Size: 0x1
    // Offset: 0x1C
    bool stretchImagesToEdges;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert/DigitalOpus.MB.Core.TexturePackingOrientation packingOrientation
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation& dyn_packingOrientation();
    // Get instance field reference: public System.Boolean stretchImagesToEdges
    [[deprecated("Use field access instead!")]] bool& dyn_stretchImagesToEdges();
    // private DigitalOpus.MB.Core.AtlasPackingResult _GetRectsSingleAtlas(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Int32 minImageSizeX, System.Int32 minImageSizeY, System.Int32 masterImageSizeX, System.Int32 masterImageSizeY, System.Int32 recursionDepth)
    // Offset: 0xC19484
    ::DigitalOpus::MB::Core::AtlasPackingResult* _GetRectsSingleAtlas(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>* paddings, int maxDimensionX, int maxDimensionY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY, int recursionDepth);
    // private DigitalOpus.MB.Core.AtlasPackingResult[] _GetRectsMultiAtlasVertical(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionPassedX, System.Int32 maxDimensionPassedY, System.Int32 minImageSizeX, System.Int32 minImageSizeY, System.Int32 masterImageSizeX, System.Int32 masterImageSizeY)
    // Offset: 0xC181E8
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> _GetRectsMultiAtlasVertical(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>* paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY);
    // private DigitalOpus.MB.Core.AtlasPackingResult[] _GetRectsMultiAtlasHorizontal(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionPassedX, System.Int32 maxDimensionPassedY, System.Int32 minImageSizeX, System.Int32 minImageSizeY, System.Int32 masterImageSizeX, System.Int32 masterImageSizeY)
    // Offset: 0xC18B48
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> _GetRectsMultiAtlasHorizontal(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>* paddings, int maxDimensionPassedX, int maxDimensionPassedY, int minImageSizeX, int minImageSizeY, int masterImageSizeX, int masterImageSizeY);
    // private DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image PopLargestThatFits(System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image> images, System.Int32 spaceRemaining, System.Int32 maxDim, System.Boolean emptyAtlas)
    // Offset: 0xC1A218
    ::DigitalOpus::MB::Core::MB2_TexturePacker::Image* PopLargestThatFits(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB2_TexturePacker::Image*>* images, int spaceRemaining, int maxDim, bool emptyAtlas);
    // public System.Void .ctor()
    // Offset: 0xC1A31C
    // Implemented from: DigitalOpus.MB.Core.MB2_TexturePacker
    // Base method: System.Void MB2_TexturePacker::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB2_TexturePackerHorizontalVert* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB2_TexturePackerHorizontalVert*, creationType>()));
    }
    // public override DigitalOpus.MB.Core.AtlasPackingResult[] GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Int32 padding)
    // Offset: 0xC17EB0
    // Implemented from: DigitalOpus.MB.Core.MB2_TexturePacker
    // Base method: DigitalOpus.MB.Core.AtlasPackingResult[] MB2_TexturePacker::GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Int32 padding)
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> GetRects(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, int maxDimensionX, int maxDimensionY, int padding);
    // public override DigitalOpus.MB.Core.AtlasPackingResult[] GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Boolean doMultiAtlas)
    // Offset: 0xC17FB4
    // Implemented from: DigitalOpus.MB.Core.MB2_TexturePacker
    // Base method: DigitalOpus.MB.Core.AtlasPackingResult[] MB2_TexturePacker::GetRects(System.Collections.Generic.List`1<UnityEngine.Vector2> imgWidthHeights, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPadding> paddings, System.Int32 maxDimensionX, System.Int32 maxDimensionY, System.Boolean doMultiAtlas)
    ::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> GetRects(::System::Collections::Generic::List_1<::UnityEngine::Vector2>* imgWidthHeights, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>* paddings, int maxDimensionX, int maxDimensionY, bool doMultiAtlas);
  }; // DigitalOpus.MB.Core.MB2_TexturePackerHorizontalVert
  #pragma pack(pop)
  static check_size<sizeof(MB2_TexturePackerHorizontalVert), 28 + sizeof(bool)> __DigitalOpus_MB_Core_MB2_TexturePackerHorizontalVertSizeCheck;
  static_assert(sizeof(MB2_TexturePackerHorizontalVert) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::TexturePackingOrientation, "DigitalOpus.MB.Core", "MB2_TexturePackerHorizontalVert/TexturePackingOrientation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsSingleAtlas
// Il2CppName: _GetRectsSingleAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::AtlasPackingResult* (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>*, int, int, int, int, int, int, int)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsSingleAtlas)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* paddings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recursionDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "_GetRectsSingleAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, paddings, maxDimensionX, maxDimensionY, minImageSizeX, minImageSizeY, masterImageSizeX, masterImageSizeY, recursionDepth});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsMultiAtlasVertical
// Il2CppName: _GetRectsMultiAtlasVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>*, int, int, int, int, int, int)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsMultiAtlasVertical)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* paddings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")})->byval_arg;
    static auto* maxDimensionPassedX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionPassedY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "_GetRectsMultiAtlasVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, paddings, maxDimensionPassedX, maxDimensionPassedY, minImageSizeX, minImageSizeY, masterImageSizeX, masterImageSizeY});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsMultiAtlasHorizontal
// Il2CppName: _GetRectsMultiAtlasHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>*, int, int, int, int, int, int)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::_GetRectsMultiAtlasHorizontal)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* paddings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")})->byval_arg;
    static auto* maxDimensionPassedX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionPassedY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* minImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* masterImageSizeY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "_GetRectsMultiAtlasHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, paddings, maxDimensionPassedX, maxDimensionPassedY, minImageSizeX, minImageSizeY, masterImageSizeX, masterImageSizeY});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::PopLargestThatFits
// Il2CppName: PopLargestThatFits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB2_TexturePacker::Image* (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB2_TexturePacker::Image*>*, int, int, bool)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::PopLargestThatFits)> {
  static const MethodInfo* get() {
    static auto* images = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_TexturePacker/Image")})->byval_arg;
    static auto* spaceRemaining = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDim = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* emptyAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "PopLargestThatFits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{images, spaceRemaining, maxDim, emptyAtlas});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::GetRects
// Il2CppName: GetRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, int, int, int)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::GetRects)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "GetRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, maxDimensionX, maxDimensionY, padding});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::GetRects
// Il2CppName: GetRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::DigitalOpus::MB::Core::AtlasPackingResult*> (DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPadding>*, int, int, bool)>(&DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert::GetRects)> {
  static const MethodInfo* get() {
    static auto* imgWidthHeights = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* paddings = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPadding")})->byval_arg;
    static auto* maxDimensionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxDimensionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* doMultiAtlas = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerHorizontalVert*), "GetRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imgWidthHeights, paddings, maxDimensionX, maxDimensionY, doMultiAtlas});
  }
};
