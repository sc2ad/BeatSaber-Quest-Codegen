// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombiner
#include "DigitalOpus/MB/Core/MB3_TextureCombiner.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerPipeline
#include "DigitalOpus/MB/Core/MB3_TextureCombinerPipeline.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: CombineTexturesIntoAtlasesCoroutineResult
  class MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_AtlasesAndRects
  class MB_AtlasesAndRects;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*, "DigitalOpus.MB.Core", "MB3_TextureCombiner/<__RunTexturePackerOnly>d__85");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.<__RunTexturePackerOnly>d__85
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MB3_TextureCombiner::$__RunTexturePackerOnly$d__85 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_TextureCombiner <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB3_TextureCombiner* $$4__this;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data
    // Size: 0x8
    // Offset: 0x28
    ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult result
    // Size: 0x8
    // Offset: 0x30
    ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* result;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*) == 0x8);
    // public DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods
    // Size: 0x8
    // Offset: 0x38
    ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*) == 0x8);
    // public System.Boolean splitAtlasWhenPackingIfTooBig
    // Size: 0x1
    // Offset: 0x40
    bool splitAtlasWhenPackingIfTooBig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: splitAtlasWhenPackingIfTooBig and: resultAtlasesAndRects
    char __padding6[0x7] = {};
    // public MB_AtlasesAndRects resultAtlasesAndRects
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB_AtlasesAndRects*) == 0x8);
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> packingResult
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>* packingResult;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*) == 0x8);
    // private DigitalOpus.MB.Core.MB3_TextureCombinerPipeline <pipeline>5__2
    // Size: 0x8
    // Offset: 0x58
    ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline* $pipeline$5__2;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombiner <>4__this
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner*& dyn_$$4__this();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*& dyn_data();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult result
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*& dyn_result();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*& dyn_textureEditorMethods();
    // Get instance field reference: public System.Boolean splitAtlasWhenPackingIfTooBig
    [[deprecated("Use field access instead!")]] bool& dyn_splitAtlasWhenPackingIfTooBig();
    // Get instance field reference: public MB_AtlasesAndRects resultAtlasesAndRects
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB_AtlasesAndRects*& dyn_resultAtlasesAndRects();
    // Get instance field reference: public System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> packingResult
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*& dyn_packingResult();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombinerPipeline <pipeline>5__2
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline*& dyn_$pipeline$5__2();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x1206B54
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x1206BBC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x1202E08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureCombiner::$__RunTexturePackerOnly$d__85* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x12066EC
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x12066F0
    bool MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x1206B5C
    void System_Collections_IEnumerator_Reset();
  }; // DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.<__RunTexturePackerOnly>d__85
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureCombiner::$__RunTexturePackerOnly$d__85), 88 + sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline*)> __DigitalOpus_MB_Core_MB3_TextureCombiner_$__RunTexturePackerOnly$d__85SizeCheck;
  static_assert(sizeof(MB3_TextureCombiner::$__RunTexturePackerOnly$d__85) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
