// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MultiMeshCombiner
#include "DigitalOpus/MB/Core/MB3_MultiMeshCombiner.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_MeshCombinerSingle
  class MB3_MeshCombinerSingle;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh*, "DigitalOpus.MB.Core", "MB3_MultiMeshCombiner/CombinedMesh");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_MultiMeshCombiner/DigitalOpus.MB.Core.CombinedMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MultiMeshCombiner::CombinedMesh : public ::Il2CppObject {
    public:
    public:
    // public DigitalOpus.MB.Core.MB3_MeshCombinerSingle combinedMesh
    // Size: 0x8
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle* combinedMesh;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*) == 0x8);
    // public System.Int32 extraSpace
    // Size: 0x4
    // Offset: 0x18
    int extraSpace;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numVertsInListToDelete
    // Size: 0x4
    // Offset: 0x1C
    int numVertsInListToDelete;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numVertsInListToAdd
    // Size: 0x4
    // Offset: 0x20
    int numVertsInListToAdd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numVertsInListToAdd and: gosToAdd
    char __padding3[0x4] = {};
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> gosToAdd
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gosToAdd;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> gosToDelete
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<int>* gosToDelete;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> gosToUpdate
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gosToUpdate;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Boolean isDirty
    // Size: 0x1
    // Offset: 0x40
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_MeshCombinerSingle combinedMesh
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_MeshCombinerSingle*& dyn_combinedMesh();
    // Get instance field reference: public System.Int32 extraSpace
    [[deprecated("Use field access instead!")]] int& dyn_extraSpace();
    // Get instance field reference: public System.Int32 numVertsInListToDelete
    [[deprecated("Use field access instead!")]] int& dyn_numVertsInListToDelete();
    // Get instance field reference: public System.Int32 numVertsInListToAdd
    [[deprecated("Use field access instead!")]] int& dyn_numVertsInListToAdd();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> gosToAdd
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_gosToAdd();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> gosToDelete
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_gosToDelete();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> gosToUpdate
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_gosToUpdate();
    // Get instance field reference: public System.Boolean isDirty
    [[deprecated("Use field access instead!")]] bool& dyn_isDirty();
    // public System.Void .ctor(System.Int32 maxNumVertsInMesh, UnityEngine.GameObject resultSceneObject, DigitalOpus.MB.Core.MB2_LogLevel ll)
    // Offset: 0x1200C54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MultiMeshCombiner::CombinedMesh* New_ctor(int maxNumVertsInMesh, ::UnityEngine::GameObject* resultSceneObject, ::DigitalOpus::MB::Core::MB2_LogLevel ll) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MultiMeshCombiner::CombinedMesh*, creationType>(maxNumVertsInMesh, resultSceneObject, ll)));
    }
    // public System.Boolean isEmpty()
    // Offset: 0x1201B9C
    bool isEmpty();
  }; // DigitalOpus.MB.Core.MB3_MultiMeshCombiner/DigitalOpus.MB.Core.CombinedMesh
  #pragma pack(pop)
  static check_size<sizeof(MB3_MultiMeshCombiner::CombinedMesh), 64 + sizeof(bool)> __DigitalOpus_MB_Core_MB3_MultiMeshCombiner_CombinedMeshSizeCheck;
  static_assert(sizeof(MB3_MultiMeshCombiner::CombinedMesh) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh::isEmpty
// Il2CppName: isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh::*)()>(&DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh::isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_MultiMeshCombiner::CombinedMesh*), "isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
