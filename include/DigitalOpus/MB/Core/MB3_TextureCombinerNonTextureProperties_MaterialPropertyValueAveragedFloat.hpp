// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties
#include "DigitalOpus/MB/Core/MB3_TextureCombinerNonTextureProperties.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialPropertyValueAveraged
#include "DigitalOpus/MB/Core/MB3_TextureCombinerNonTextureProperties_MaterialPropertyValueAveraged.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*, "DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties/MaterialPropertyValueAveragedFloat");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialPropertyValueAveragedFloat
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat : public ::Il2CppObject/*, public ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveraged*/ {
    public:
    public:
    // public System.Single averageVal
    // Size: 0x4
    // Offset: 0x10
    float averageVal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 numValues
    // Size: 0x4
    // Offset: 0x14
    int numValues;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveraged
    operator ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveraged() noexcept {
      return *reinterpret_cast<::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveraged*>(this);
    }
    // Get instance field reference: public System.Single averageVal
    [[deprecated("Use field access instead!")]] float& dyn_averageVal();
    // Get instance field reference: public System.Int32 numValues
    [[deprecated("Use field access instead!")]] int& dyn_numValues();
    // public System.Void .ctor()
    // Offset: 0x120A310
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*, creationType>()));
    }
    // public System.Void TryGetPropValueFromMaterialAndBlendIntoAverage(UnityEngine.Material mat, DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialProperty property)
    // Offset: 0x120A818
    void TryGetPropValueFromMaterialAndBlendIntoAverage(::UnityEngine::Material* mat, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty* property);
    // public System.Object GetAverage()
    // Offset: 0x120A98C
    ::Il2CppObject* GetAverage();
    // public System.Int32 NumValues()
    // Offset: 0x120A9F0
    int NumValues();
    // public System.Void SetAverageValueOrDefaultOnMaterial(UnityEngine.Material mat, DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialProperty property)
    // Offset: 0x120A9F8
    void SetAverageValueOrDefaultOnMaterial(::UnityEngine::Material* mat, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty* property);
  }; // DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties/DigitalOpus.MB.Core.MaterialPropertyValueAveragedFloat
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat), 20 + sizeof(int)> __DigitalOpus_MB_Core_MB3_TextureCombinerNonTextureProperties_MaterialPropertyValueAveragedFloatSizeCheck;
  static_assert(sizeof(MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::TryGetPropValueFromMaterialAndBlendIntoAverage
// Il2CppName: TryGetPropValueFromMaterialAndBlendIntoAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::TryGetPropValueFromMaterialAndBlendIntoAverage)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties/MaterialProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*), "TryGetPropValueFromMaterialAndBlendIntoAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, property});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::GetAverage
// Il2CppName: GetAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::GetAverage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*), "GetAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::NumValues
// Il2CppName: NumValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::NumValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*), "NumValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::SetAverageValueOrDefaultOnMaterial
// Il2CppName: SetAverageValueOrDefaultOnMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat::SetAverageValueOrDefaultOnMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties/MaterialProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties::MaterialPropertyValueAveragedFloat*), "SetAverageValueOrDefaultOnMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, property});
  }
};
