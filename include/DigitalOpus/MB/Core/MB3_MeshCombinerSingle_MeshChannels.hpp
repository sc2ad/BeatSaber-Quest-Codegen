// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle
#include "DigitalOpus/MB/Core/MB3_MeshCombinerSingle.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels*, "DigitalOpus.MB.Core", "MB3_MeshCombinerSingle/MeshChannels");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannels
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MeshCombinerSingle::MeshChannels : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] normals
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector3> normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector4[] tangents
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector4> tangents;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // public UnityEngine.Vector2[] uv0raw
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector2> uv0raw;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv0modified
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector2> uv0modified;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv2raw
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector2> uv2raw;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv2modified
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector2> uv2modified;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv3
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector2> uv3;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv4
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Vector2> uv4;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv5
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector2> uv5;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv6
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Vector2> uv6;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv7
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Vector2> uv7;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Vector2[] uv8
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Vector2> uv8;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public UnityEngine.Color[] colors
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // public UnityEngine.BoneWeight[] boneWeights
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::BoneWeight> boneWeights;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::BoneWeight>) == 0x8);
    // public UnityEngine.Matrix4x4[] bindPoses
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Matrix4x4> bindPoses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // public System.Int32[] triangles
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapes
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*> blendShapes;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: public UnityEngine.Vector3[] normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_normals();
    // Get instance field reference: public UnityEngine.Vector4[] tangents
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn_tangents();
    // Get instance field reference: public UnityEngine.Vector2[] uv0raw
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv0raw();
    // Get instance field reference: public UnityEngine.Vector2[] uv0modified
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv0modified();
    // Get instance field reference: public UnityEngine.Vector2[] uv2raw
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv2raw();
    // Get instance field reference: public UnityEngine.Vector2[] uv2modified
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv2modified();
    // Get instance field reference: public UnityEngine.Vector2[] uv3
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv3();
    // Get instance field reference: public UnityEngine.Vector2[] uv4
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv4();
    // Get instance field reference: public UnityEngine.Vector2[] uv5
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv5();
    // Get instance field reference: public UnityEngine.Vector2[] uv6
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv6();
    // Get instance field reference: public UnityEngine.Vector2[] uv7
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv7();
    // Get instance field reference: public UnityEngine.Vector2[] uv8
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_uv8();
    // Get instance field reference: public UnityEngine.Color[] colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_colors();
    // Get instance field reference: public UnityEngine.BoneWeight[] boneWeights
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::BoneWeight>& dyn_boneWeights();
    // Get instance field reference: public UnityEngine.Matrix4x4[] bindPoses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_bindPoses();
    // Get instance field reference: public System.Int32[] triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triangles();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MBBlendShape[] blendShapes
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>& dyn_blendShapes();
    // public System.Void .ctor()
    // Offset: 0x11F9828
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MeshCombinerSingle::MeshChannels* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MeshCombinerSingle::MeshChannels*, creationType>()));
    }
  }; // DigitalOpus.MB.Core.MB3_MeshCombinerSingle/DigitalOpus.MB.Core.MeshChannels
  #pragma pack(pop)
  static check_size<sizeof(MB3_MeshCombinerSingle::MeshChannels), 152 + sizeof(::ArrayW<::DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MBBlendShape*>)> __DigitalOpus_MB_Core_MB3_MeshCombinerSingle_MeshChannelsSizeCheck;
  static_assert(sizeof(MB3_MeshCombinerSingle::MeshChannels) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_MeshCombinerSingle::MeshChannels::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
