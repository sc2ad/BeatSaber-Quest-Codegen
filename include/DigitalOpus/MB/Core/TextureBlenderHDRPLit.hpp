// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.TextureBlender
#include "DigitalOpus/MB/Core/TextureBlender.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Skipping declaration: MaterialType because it is already included!
  // Forward declaring type: TextureBlenderMaterialPropertyCacheHelper
  class TextureBlenderMaterialPropertyCacheHelper;
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: TextureBlenderHDRPLit
  class TextureBlenderHDRPLit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::TextureBlenderHDRPLit);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::TextureBlenderHDRPLit*, "DigitalOpus.MB.Core", "TextureBlenderHDRPLit");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.TextureBlenderHDRPLit
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureBlenderHDRPLit : public ::Il2CppObject/*, public ::DigitalOpus::MB::Core::TextureBlender*/ {
    public:
    // Nested type: ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop
    struct Prop;
    // Nested type: ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType
    struct MaterialType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop
    // [TokenAttribute] Offset: FFFFFFFF
    struct Prop/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Prop
      constexpr Prop(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doColor
      static constexpr const int doColor = 0;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doColor
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop _get_doColor();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doColor
      static void _set_doColor(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doMask
      static constexpr const int doMask = 1;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doMask
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop _get_doMask();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doMask
      static void _set_doMask(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doSpecular
      static constexpr const int doSpecular = 2;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doSpecular
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop _get_doSpecular();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doSpecular
      static void _set_doSpecular(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doEmission
      static constexpr const int doEmission = 3;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doEmission
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop _get_doEmission();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doEmission
      static void _set_doEmission(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doNone
      static constexpr const int doNone = 4;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doNone
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop _get_doNone();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop doNone
      static void _set_doNone(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop
    #pragma pack(pop)
    static check_size<sizeof(TextureBlenderHDRPLit::Prop), 0 + sizeof(int)> __DigitalOpus_MB_Core_TextureBlenderHDRPLit_PropSizeCheck;
    static_assert(sizeof(TextureBlenderHDRPLit::Prop) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MaterialType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MaterialType
      constexpr MaterialType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType unknown
      static constexpr const int unknown = 0;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType unknown
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_unknown();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType unknown
      static void _set_unknown(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType subsurfaceScattering
      static constexpr const int subsurfaceScattering = 1;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType subsurfaceScattering
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_subsurfaceScattering();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType subsurfaceScattering
      static void _set_subsurfaceScattering(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType standard
      static constexpr const int standard = 2;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType standard
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_standard();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType standard
      static void _set_standard(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType anisotropy
      static constexpr const int anisotropy = 3;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType anisotropy
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_anisotropy();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType anisotropy
      static void _set_anisotropy(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType iridescence
      static constexpr const int iridescence = 4;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType iridescence
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_iridescence();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType iridescence
      static void _set_iridescence(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType specularColor
      static constexpr const int specularColor = 5;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType specularColor
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_specularColor();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType specularColor
      static void _set_specularColor(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // static field const value: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType translucent
      static constexpr const int translucent = 6;
      // Get static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType translucent
      static ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _get_translucent();
      // Set static field: static public DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType translucent
      static void _set_translucent(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType
    #pragma pack(pop)
    static check_size<sizeof(TextureBlenderHDRPLit::MaterialType), 0 + sizeof(int)> __DigitalOpus_MB_Core_TextureBlenderHDRPLit_MaterialTypeSizeCheck;
    static_assert(sizeof(TextureBlenderHDRPLit::MaterialType) == 0x4);
    public:
    // private DigitalOpus.MB.Core.TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache
    // Size: 0x8
    // Offset: 0x10
    ::DigitalOpus::MB::Core::TextureBlenderMaterialPropertyCacheHelper* sourceMaterialPropertyCache;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::TextureBlenderMaterialPropertyCacheHelper*) == 0x8);
    // private DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType m_materialType
    // Size: 0x4
    // Offset: 0x18
    ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType m_materialType;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType) == 0x4);
    // private UnityEngine.Color m_tintColor
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Color m_tintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean m_hasMaskMap
    // Size: 0x1
    // Offset: 0x2C
    bool m_hasMaskMap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_hasMaskMap and: m_smoothness
    char __padding3[0x3] = {};
    // private System.Single m_smoothness
    // Size: 0x4
    // Offset: 0x30
    float m_smoothness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_metallic
    // Size: 0x4
    // Offset: 0x34
    float m_metallic;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_hasSpecMap
    // Size: 0x1
    // Offset: 0x38
    bool m_hasSpecMap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_hasSpecMap and: m_specularColor
    char __padding6[0x3] = {};
    // private UnityEngine.Color m_specularColor
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Color m_specularColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_emissiveColor
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Color m_emissiveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop propertyToDo
    // Size: 0x4
    // Offset: 0x5C
    ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop propertyToDo;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop) == 0x4);
    // private UnityEngine.Color m_generatingTintedAtlaColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color m_generatingTintedAtlaColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_generatingTintedAtlaSpecular
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color m_generatingTintedAtlaSpecular;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_generatingTintedAtlaEmission
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Color m_generatingTintedAtlaEmission;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_notGeneratingAtlasDefaultColor
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Color m_notGeneratingAtlasDefaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single m_notGeneratingAtlasDefaultMetallic
    // Size: 0x4
    // Offset: 0xA0
    float m_notGeneratingAtlasDefaultMetallic;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_notGeneratingAtlasDefaultSmoothness
    // Size: 0x4
    // Offset: 0xA4
    float m_notGeneratingAtlasDefaultSmoothness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color m_notGeneratingAtlasDefaultSpecular
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Color m_notGeneratingAtlasDefaultSpecular;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_notGeneratingAtlasDefaultEmissiveColor
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Color m_notGeneratingAtlasDefaultEmissiveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating interface conversion operator: operator ::DigitalOpus::MB::Core::TextureBlender
    operator ::DigitalOpus::MB::Core::TextureBlender() noexcept {
      return *reinterpret_cast<::DigitalOpus::MB::Core::TextureBlender*>(this);
    }
    // Get instance field reference: private DigitalOpus.MB.Core.TextureBlenderMaterialPropertyCacheHelper sourceMaterialPropertyCache
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::TextureBlenderMaterialPropertyCacheHelper*& dyn_sourceMaterialPropertyCache();
    // Get instance field reference: private DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType m_materialType
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType& dyn_m_materialType();
    // Get instance field reference: private UnityEngine.Color m_tintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_tintColor();
    // Get instance field reference: private System.Boolean m_hasMaskMap
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasMaskMap();
    // Get instance field reference: private System.Single m_smoothness
    [[deprecated("Use field access instead!")]] float& dyn_m_smoothness();
    // Get instance field reference: private System.Single m_metallic
    [[deprecated("Use field access instead!")]] float& dyn_m_metallic();
    // Get instance field reference: private System.Boolean m_hasSpecMap
    [[deprecated("Use field access instead!")]] bool& dyn_m_hasSpecMap();
    // Get instance field reference: private UnityEngine.Color m_specularColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_specularColor();
    // Get instance field reference: private UnityEngine.Color m_emissiveColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_emissiveColor();
    // Get instance field reference: private DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.Prop propertyToDo
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop& dyn_propertyToDo();
    // Get instance field reference: private UnityEngine.Color m_generatingTintedAtlaColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_generatingTintedAtlaColor();
    // Get instance field reference: private UnityEngine.Color m_generatingTintedAtlaSpecular
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_generatingTintedAtlaSpecular();
    // Get instance field reference: private UnityEngine.Color m_generatingTintedAtlaEmission
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_generatingTintedAtlaEmission();
    // Get instance field reference: private UnityEngine.Color m_notGeneratingAtlasDefaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_notGeneratingAtlasDefaultColor();
    // Get instance field reference: private System.Single m_notGeneratingAtlasDefaultMetallic
    [[deprecated("Use field access instead!")]] float& dyn_m_notGeneratingAtlasDefaultMetallic();
    // Get instance field reference: private System.Single m_notGeneratingAtlasDefaultSmoothness
    [[deprecated("Use field access instead!")]] float& dyn_m_notGeneratingAtlasDefaultSmoothness();
    // Get instance field reference: private UnityEngine.Color m_notGeneratingAtlasDefaultSpecular
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_notGeneratingAtlasDefaultSpecular();
    // Get instance field reference: private UnityEngine.Color m_notGeneratingAtlasDefaultEmissiveColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_notGeneratingAtlasDefaultEmissiveColor();
    // public System.Void .ctor()
    // Offset: 0x11BC074
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureBlenderHDRPLit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::TextureBlenderHDRPLit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureBlenderHDRPLit*, creationType>()));
    }
    // public System.Boolean DoesShaderNameMatch(System.String shaderName)
    // Offset: 0x11BAAA0
    bool DoesShaderNameMatch(::StringW shaderName);
    // private DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType _MapFloatToMaterialType(System.Single materialType)
    // Offset: 0x11BAAFC
    ::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType _MapFloatToMaterialType(float materialType);
    // private System.Single _MapMaterialTypeToFloat(DigitalOpus.MB.Core.TextureBlenderHDRPLit/DigitalOpus.MB.Core.MaterialType materialType)
    // Offset: 0x11BAB70
    float _MapMaterialTypeToFloat(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType materialType);
    // public System.Void OnBeforeTintTexture(UnityEngine.Material sourceMat, System.String shaderTexturePropertyName)
    // Offset: 0x11BABA0
    void OnBeforeTintTexture(::UnityEngine::Material* sourceMat, ::StringW shaderTexturePropertyName);
    // public UnityEngine.Color OnBlendTexturePixel(System.String propertyToDoshaderPropertyName, UnityEngine.Color pixelColor)
    // Offset: 0x11BB040
    ::UnityEngine::Color OnBlendTexturePixel(::StringW propertyToDoshaderPropertyName, ::UnityEngine::Color pixelColor);
    // public System.Boolean NonTexturePropertiesAreEqual(UnityEngine.Material a, UnityEngine.Material b)
    // Offset: 0x11BB128
    bool NonTexturePropertiesAreEqual(::UnityEngine::Material* a, ::UnityEngine::Material* b);
    // public System.Void SetNonTexturePropertyValuesOnResultMaterial(UnityEngine.Material resultMaterial)
    // Offset: 0x11BB33C
    void SetNonTexturePropertyValuesOnResultMaterial(::UnityEngine::Material* resultMaterial);
    // public UnityEngine.Color GetColorIfNoTexture(UnityEngine.Material mat, DigitalOpus.MB.Core.ShaderTextureProperty texPropertyName)
    // Offset: 0x11BB950
    ::UnityEngine::Color GetColorIfNoTexture(::UnityEngine::Material* mat, ::DigitalOpus::MB::Core::ShaderTextureProperty* texPropertyName);
  }; // DigitalOpus.MB.Core.TextureBlenderHDRPLit
  #pragma pack(pop)
  static check_size<sizeof(TextureBlenderHDRPLit), 184 + sizeof(::UnityEngine::Color)> __DigitalOpus_MB_Core_TextureBlenderHDRPLitSizeCheck;
  static_assert(sizeof(TextureBlenderHDRPLit) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType, "DigitalOpus.MB.Core", "TextureBlenderHDRPLit/MaterialType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::Prop, "DigitalOpus.MB.Core", "TextureBlenderHDRPLit/Prop");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::DoesShaderNameMatch
// Il2CppName: DoesShaderNameMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::StringW)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::DoesShaderNameMatch)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "DoesShaderNameMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::_MapFloatToMaterialType
// Il2CppName: _MapFloatToMaterialType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(float)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::_MapFloatToMaterialType)> {
  static const MethodInfo* get() {
    static auto* materialType = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "_MapFloatToMaterialType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialType});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::_MapMaterialTypeToFloat
// Il2CppName: _MapMaterialTypeToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::DigitalOpus::MB::Core::TextureBlenderHDRPLit::MaterialType)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::_MapMaterialTypeToFloat)> {
  static const MethodInfo* get() {
    static auto* materialType = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "TextureBlenderHDRPLit/MaterialType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "_MapMaterialTypeToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialType});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::OnBeforeTintTexture
// Il2CppName: OnBeforeTintTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::UnityEngine::Material*, ::StringW)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::OnBeforeTintTexture)> {
  static const MethodInfo* get() {
    static auto* sourceMat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* shaderTexturePropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "OnBeforeTintTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceMat, shaderTexturePropertyName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::OnBlendTexturePixel
// Il2CppName: OnBlendTexturePixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::StringW, ::UnityEngine::Color)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::OnBlendTexturePixel)> {
  static const MethodInfo* get() {
    static auto* propertyToDoshaderPropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pixelColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "OnBlendTexturePixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyToDoshaderPropertyName, pixelColor});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::NonTexturePropertiesAreEqual
// Il2CppName: NonTexturePropertiesAreEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::UnityEngine::Material*, ::UnityEngine::Material*)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::NonTexturePropertiesAreEqual)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "NonTexturePropertiesAreEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::SetNonTexturePropertyValuesOnResultMaterial
// Il2CppName: SetNonTexturePropertyValuesOnResultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::UnityEngine::Material*)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::SetNonTexturePropertyValuesOnResultMaterial)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "SetNonTexturePropertyValuesOnResultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::TextureBlenderHDRPLit::GetColorIfNoTexture
// Il2CppName: GetColorIfNoTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (DigitalOpus::MB::Core::TextureBlenderHDRPLit::*)(::UnityEngine::Material*, ::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::TextureBlenderHDRPLit::GetColorIfNoTexture)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texPropertyName = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::TextureBlenderHDRPLit*), "GetColorIfNoTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, texPropertyName});
  }
};
