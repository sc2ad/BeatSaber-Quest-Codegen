// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.DRect
#include "DigitalOpus/MB/Core/DRect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MatAndTransformToMerged
  class MatAndTransformToMerged;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MatAndTransformToMerged);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MatAndTransformToMerged*, "DigitalOpus.MB.Core", "MatAndTransformToMerged");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MatAndTransformToMerged
  // [TokenAttribute] Offset: FFFFFFFF
  class MatAndTransformToMerged : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Material mat
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Material* mat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private DigitalOpus.MB.Core.DRect <obUVRectIfTilingSame>k__BackingField
    // Size: 0x20
    // Offset: 0x18
    ::DigitalOpus::MB::Core::DRect obUVRectIfTilingSame;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::DRect) == 0x20);
    // private DigitalOpus.MB.Core.DRect <samplingRectMatAndUVTiling>k__BackingField
    // Size: 0x20
    // Offset: 0x38
    ::DigitalOpus::MB::Core::DRect samplingRectMatAndUVTiling;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::DRect) == 0x20);
    // private DigitalOpus.MB.Core.DRect <materialTiling>k__BackingField
    // Size: 0x20
    // Offset: 0x58
    ::DigitalOpus::MB::Core::DRect materialTiling;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::DRect) == 0x20);
    // public System.String objName
    // Size: 0x8
    // Offset: 0x78
    ::StringW objName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Material mat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_mat();
    // Get instance field reference: private DigitalOpus.MB.Core.DRect <obUVRectIfTilingSame>k__BackingField
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::DRect& dyn_$obUVRectIfTilingSame$k__BackingField();
    // Get instance field reference: private DigitalOpus.MB.Core.DRect <samplingRectMatAndUVTiling>k__BackingField
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::DRect& dyn_$samplingRectMatAndUVTiling$k__BackingField();
    // Get instance field reference: private DigitalOpus.MB.Core.DRect <materialTiling>k__BackingField
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::DRect& dyn_$materialTiling$k__BackingField();
    // Get instance field reference: public System.String objName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_objName();
    // public DigitalOpus.MB.Core.DRect get_obUVRectIfTilingSame()
    // Offset: 0x11B7D64
    ::DigitalOpus::MB::Core::DRect get_obUVRectIfTilingSame();
    // private System.Void set_obUVRectIfTilingSame(DigitalOpus.MB.Core.DRect value)
    // Offset: 0x11B7D70
    void set_obUVRectIfTilingSame(::DigitalOpus::MB::Core::DRect value);
    // public DigitalOpus.MB.Core.DRect get_samplingRectMatAndUVTiling()
    // Offset: 0x11B7D7C
    ::DigitalOpus::MB::Core::DRect get_samplingRectMatAndUVTiling();
    // private System.Void set_samplingRectMatAndUVTiling(DigitalOpus.MB.Core.DRect value)
    // Offset: 0x11B7D88
    void set_samplingRectMatAndUVTiling(::DigitalOpus::MB::Core::DRect value);
    // public DigitalOpus.MB.Core.DRect get_materialTiling()
    // Offset: 0x11B7D94
    ::DigitalOpus::MB::Core::DRect get_materialTiling();
    // private System.Void set_materialTiling(DigitalOpus.MB.Core.DRect value)
    // Offset: 0x11B7DA0
    void set_materialTiling(::DigitalOpus::MB::Core::DRect value);
    // public System.Void .ctor(DigitalOpus.MB.Core.DRect obUVrect, System.Boolean fixOutOfBoundsUVs)
    // Offset: 0x11B7DAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatAndTransformToMerged* New_ctor(::DigitalOpus::MB::Core::DRect obUVrect, bool fixOutOfBoundsUVs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MatAndTransformToMerged::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatAndTransformToMerged*, creationType>(obUVrect, fixOutOfBoundsUVs)));
    }
    // public System.Void .ctor(DigitalOpus.MB.Core.DRect obUVrect, System.Boolean fixOutOfBoundsUVs, UnityEngine.Material m)
    // Offset: 0x11B7E7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatAndTransformToMerged* New_ctor(::DigitalOpus::MB::Core::DRect obUVrect, bool fixOutOfBoundsUVs, ::UnityEngine::Material* m) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MatAndTransformToMerged::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatAndTransformToMerged*, creationType>(obUVrect, fixOutOfBoundsUVs, m)));
    }
    // private System.Void _init(DigitalOpus.MB.Core.DRect obUVrect, System.Boolean fixOutOfBoundsUVs, UnityEngine.Material m)
    // Offset: 0x11B7E10
    void _init(::DigitalOpus::MB::Core::DRect obUVrect, bool fixOutOfBoundsUVs, ::UnityEngine::Material* m);
    // public System.String GetMaterialName()
    // Offset: 0x11B8060
    ::StringW GetMaterialName();
    // public System.Void AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling(System.Boolean allTexturesUseSameMatTiling, DigitalOpus.MB.Core.DRect matTiling)
    // Offset: 0x11B8124
    void AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling(bool allTexturesUseSameMatTiling, ::DigitalOpus::MB::Core::DRect matTiling);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x11B7EEC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x11B7FD4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // DigitalOpus.MB.Core.MatAndTransformToMerged
  #pragma pack(pop)
  static check_size<sizeof(MatAndTransformToMerged), 120 + sizeof(::StringW)> __DigitalOpus_MB_Core_MatAndTransformToMergedSizeCheck;
  static_assert(sizeof(MatAndTransformToMerged) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::get_obUVRectIfTilingSame
// Il2CppName: get_obUVRectIfTilingSame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (DigitalOpus::MB::Core::MatAndTransformToMerged::*)()>(&DigitalOpus::MB::Core::MatAndTransformToMerged::get_obUVRectIfTilingSame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "get_obUVRectIfTilingSame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::set_obUVRectIfTilingSame
// Il2CppName: set_obUVRectIfTilingSame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(::DigitalOpus::MB::Core::DRect)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::set_obUVRectIfTilingSame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "set_obUVRectIfTilingSame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::get_samplingRectMatAndUVTiling
// Il2CppName: get_samplingRectMatAndUVTiling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (DigitalOpus::MB::Core::MatAndTransformToMerged::*)()>(&DigitalOpus::MB::Core::MatAndTransformToMerged::get_samplingRectMatAndUVTiling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "get_samplingRectMatAndUVTiling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::set_samplingRectMatAndUVTiling
// Il2CppName: set_samplingRectMatAndUVTiling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(::DigitalOpus::MB::Core::DRect)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::set_samplingRectMatAndUVTiling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "set_samplingRectMatAndUVTiling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::get_materialTiling
// Il2CppName: get_materialTiling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (DigitalOpus::MB::Core::MatAndTransformToMerged::*)()>(&DigitalOpus::MB::Core::MatAndTransformToMerged::get_materialTiling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "get_materialTiling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::set_materialTiling
// Il2CppName: set_materialTiling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(::DigitalOpus::MB::Core::DRect)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::set_materialTiling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "set_materialTiling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::_init
// Il2CppName: _init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(::DigitalOpus::MB::Core::DRect, bool, ::UnityEngine::Material*)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::_init)> {
  static const MethodInfo* get() {
    static auto* obUVrect = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    static auto* fixOutOfBoundsUVs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "_init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obUVrect, fixOutOfBoundsUVs, m});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::GetMaterialName
// Il2CppName: GetMaterialName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (DigitalOpus::MB::Core::MatAndTransformToMerged::*)()>(&DigitalOpus::MB::Core::MatAndTransformToMerged::GetMaterialName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "GetMaterialName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling
// Il2CppName: AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(bool, ::DigitalOpus::MB::Core::DRect)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling)> {
  static const MethodInfo* get() {
    static auto* allTexturesUseSameMatTiling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* matTiling = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "AssignInitialValuesForMaterialTilingAndSamplingRectMatAndUVTiling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allTexturesUseSameMatTiling, matTiling});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MatAndTransformToMerged::*)(::Il2CppObject*)>(&DigitalOpus::MB::Core::MatAndTransformToMerged::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatAndTransformToMerged::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MatAndTransformToMerged::*)()>(&DigitalOpus::MB::Core::MatAndTransformToMerged::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MatAndTransformToMerged*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
