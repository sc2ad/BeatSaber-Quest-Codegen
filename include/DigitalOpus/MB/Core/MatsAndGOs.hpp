// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MatAndTransformToMerged
  class MatAndTransformToMerged;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MatsAndGOs
  class MatsAndGOs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MatsAndGOs);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MatsAndGOs*, "DigitalOpus.MB.Core", "MatsAndGOs");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MatsAndGOs
  // [TokenAttribute] Offset: FFFFFFFF
  class MatsAndGOs : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.MatAndTransformToMerged> mats
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MatAndTransformToMerged*>* mats;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MatAndTransformToMerged*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> gos
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<DigitalOpus.MB.Core.MatAndTransformToMerged> mats
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MatAndTransformToMerged*>*& dyn_mats();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> gos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_gos();
    // public System.Void .ctor()
    // Offset: 0x11B81D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatsAndGOs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MatsAndGOs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatsAndGOs*, creationType>()));
    }
  }; // DigitalOpus.MB.Core.MatsAndGOs
  #pragma pack(pop)
  static check_size<sizeof(MatsAndGOs), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)> __DigitalOpus_MB_Core_MatsAndGOsSizeCheck;
  static_assert(sizeof(MatsAndGOs) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MatsAndGOs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
