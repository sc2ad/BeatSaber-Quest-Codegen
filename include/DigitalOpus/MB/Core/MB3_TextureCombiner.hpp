// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: MB2_TextureBakeResults/ResultType
#include "GlobalNamespace/MB2_TextureBakeResults.hpp"
// Including type: DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum
#include "DigitalOpus/MB/Core/MB2_PackingAlgorithmEnum.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombinerPipeline
#include "DigitalOpus/MB/Core/MB3_TextureCombinerPipeline.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: ProgressUpdateDelegate
  class ProgressUpdateDelegate;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: AtlasPackingResult
  class AtlasPackingResult;
  // Forward declaring type: CombineTexturesIntoAtlasesCoroutineResult
  class MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult;
  // Forward declaring type: MB_TexSet
  class MB_TexSet;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: MB2_TextureBakeResults because it is already included!
  // Forward declaring type: MB_AtlasesAndRects
  class MB_AtlasesAndRects;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: TextureFormat
  struct TextureFormat;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_TextureCombiner
  class MB3_TextureCombiner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_TextureCombiner);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_TextureCombiner*, "DigitalOpus.MB.Core", "MB3_TextureCombiner");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_TextureCombiner
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_TextureCombiner : public ::Il2CppObject {
    public:
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult
    class CreateAtlasesCoroutineResult;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture
    class TemporaryTexture;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::$CombineTexturesIntoAtlasesCoroutine$d__81
    class $CombineTexturesIntoAtlasesCoroutine$d__81;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::$_CombineTexturesIntoAtlases$d__82
    class $_CombineTexturesIntoAtlases$d__82;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::$__CombineTexturesIntoAtlases$d__84
    class $__CombineTexturesIntoAtlases$d__84;
    // Nested type: ::DigitalOpus::MB::Core::MB3_TextureCombiner::$__RunTexturePackerOnly$d__85
    class $__RunTexturePackerOnly$d__85;
    public:
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: LOG_LEVEL and: textureBakeResults
    char __padding0[0x4] = {};
    // protected MB2_TextureBakeResults _textureBakeResults
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MB2_TextureBakeResults* textureBakeResults;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB2_TextureBakeResults*) == 0x8);
    // protected System.Int32 _atlasPadding
    // Size: 0x4
    // Offset: 0x20
    int atlasPadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxAtlasSize
    // Size: 0x4
    // Offset: 0x24
    int maxAtlasSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxAtlasWidthOverride
    // Size: 0x4
    // Offset: 0x28
    int maxAtlasWidthOverride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxAtlasHeightOverride
    // Size: 0x4
    // Offset: 0x2C
    int maxAtlasHeightOverride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _useMaxAtlasWidthOverride
    // Size: 0x1
    // Offset: 0x30
    bool useMaxAtlasWidthOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _useMaxAtlasHeightOverride
    // Size: 0x1
    // Offset: 0x31
    bool useMaxAtlasHeightOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _resizePowerOfTwoTextures
    // Size: 0x1
    // Offset: 0x32
    bool resizePowerOfTwoTextures;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _fixOutOfBoundsUVs
    // Size: 0x1
    // Offset: 0x33
    bool fixOutOfBoundsUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Int32 _layerTexturePackerFastMesh
    // Size: 0x4
    // Offset: 0x34
    int layerTexturePackerFastMesh;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxTilingBakeSize
    // Size: 0x4
    // Offset: 0x38
    int maxTilingBakeSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _saveAtlasesAsAssets
    // Size: 0x1
    // Offset: 0x3C
    bool saveAtlasesAsAssets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: saveAtlasesAsAssets and: resultType
    char __padding12[0x3] = {};
    // protected MB2_TextureBakeResults/ResultType _resultType
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::MB2_TextureBakeResults::ResultType resultType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB2_TextureBakeResults::ResultType) == 0x4);
    // protected DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum _packingAlgorithm
    // Size: 0x4
    // Offset: 0x44
    ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum packingAlgorithm;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum) == 0x4);
    // protected System.Boolean _meshBakerTexturePackerForcePowerOfTwo
    // Size: 0x1
    // Offset: 0x48
    bool meshBakerTexturePackerForcePowerOfTwo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: meshBakerTexturePackerForcePowerOfTwo and: customShaderPropNames
    char __padding15[0x7] = {};
    // protected System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> _customShaderPropNames
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* customShaderPropNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*) == 0x8);
    // protected System.Boolean _normalizeTexelDensity
    // Size: 0x1
    // Offset: 0x58
    bool normalizeTexelDensity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _considerNonTextureProperties
    // Size: 0x1
    // Offset: 0x59
    bool considerNonTextureProperties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
    // Size: 0x1
    // Offset: 0x5A
    bool doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize and: temporaryTextures
    char __padding19[0x5] = {};
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.TemporaryTexture> _temporaryTextures
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>* temporaryTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>*) == 0x8);
    public:
    // Get static field: static public System.Boolean _RunCorutineWithoutPauseIsRunning
    static bool _get__RunCorutineWithoutPauseIsRunning();
    // Set static field: static public System.Boolean _RunCorutineWithoutPauseIsRunning
    static void _set__RunCorutineWithoutPauseIsRunning(bool value);
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: protected MB2_TextureBakeResults _textureBakeResults
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB2_TextureBakeResults*& dyn__textureBakeResults();
    // Get instance field reference: protected System.Int32 _atlasPadding
    [[deprecated("Use field access instead!")]] int& dyn__atlasPadding();
    // Get instance field reference: protected System.Int32 _maxAtlasSize
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasSize();
    // Get instance field reference: protected System.Int32 _maxAtlasWidthOverride
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasWidthOverride();
    // Get instance field reference: protected System.Int32 _maxAtlasHeightOverride
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasHeightOverride();
    // Get instance field reference: protected System.Boolean _useMaxAtlasWidthOverride
    [[deprecated("Use field access instead!")]] bool& dyn__useMaxAtlasWidthOverride();
    // Get instance field reference: protected System.Boolean _useMaxAtlasHeightOverride
    [[deprecated("Use field access instead!")]] bool& dyn__useMaxAtlasHeightOverride();
    // Get instance field reference: protected System.Boolean _resizePowerOfTwoTextures
    [[deprecated("Use field access instead!")]] bool& dyn__resizePowerOfTwoTextures();
    // Get instance field reference: protected System.Boolean _fixOutOfBoundsUVs
    [[deprecated("Use field access instead!")]] bool& dyn__fixOutOfBoundsUVs();
    // Get instance field reference: protected System.Int32 _layerTexturePackerFastMesh
    [[deprecated("Use field access instead!")]] int& dyn__layerTexturePackerFastMesh();
    // Get instance field reference: protected System.Int32 _maxTilingBakeSize
    [[deprecated("Use field access instead!")]] int& dyn__maxTilingBakeSize();
    // Get instance field reference: protected System.Boolean _saveAtlasesAsAssets
    [[deprecated("Use field access instead!")]] bool& dyn__saveAtlasesAsAssets();
    // Get instance field reference: protected MB2_TextureBakeResults/ResultType _resultType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB2_TextureBakeResults::ResultType& dyn__resultType();
    // Get instance field reference: protected DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum _packingAlgorithm
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum& dyn__packingAlgorithm();
    // Get instance field reference: protected System.Boolean _meshBakerTexturePackerForcePowerOfTwo
    [[deprecated("Use field access instead!")]] bool& dyn__meshBakerTexturePackerForcePowerOfTwo();
    // Get instance field reference: protected System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> _customShaderPropNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*& dyn__customShaderPropNames();
    // Get instance field reference: protected System.Boolean _normalizeTexelDensity
    [[deprecated("Use field access instead!")]] bool& dyn__normalizeTexelDensity();
    // Get instance field reference: protected System.Boolean _considerNonTextureProperties
    [[deprecated("Use field access instead!")]] bool& dyn__considerNonTextureProperties();
    // Get instance field reference: protected System.Boolean _doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
    [[deprecated("Use field access instead!")]] bool& dyn__doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.TemporaryTexture> _temporaryTextures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>*& dyn__temporaryTextures();
    // public MB2_TextureBakeResults get_textureBakeResults()
    // Offset: 0x1201D14
    ::GlobalNamespace::MB2_TextureBakeResults* get_textureBakeResults();
    // public System.Void set_textureBakeResults(MB2_TextureBakeResults value)
    // Offset: 0x1201D1C
    void set_textureBakeResults(::GlobalNamespace::MB2_TextureBakeResults* value);
    // public System.Int32 get_atlasPadding()
    // Offset: 0x1201D24
    int get_atlasPadding();
    // public System.Void set_atlasPadding(System.Int32 value)
    // Offset: 0x1201D2C
    void set_atlasPadding(int value);
    // public System.Int32 get_maxAtlasSize()
    // Offset: 0x1201D34
    int get_maxAtlasSize();
    // public System.Void set_maxAtlasSize(System.Int32 value)
    // Offset: 0x1201D3C
    void set_maxAtlasSize(int value);
    // public System.Int32 get_maxAtlasWidthOverride()
    // Offset: 0x1201D44
    int get_maxAtlasWidthOverride();
    // public System.Void set_maxAtlasWidthOverride(System.Int32 value)
    // Offset: 0x1201D4C
    void set_maxAtlasWidthOverride(int value);
    // public System.Int32 get_maxAtlasHeightOverride()
    // Offset: 0x1201D54
    int get_maxAtlasHeightOverride();
    // public System.Void set_maxAtlasHeightOverride(System.Int32 value)
    // Offset: 0x1201D5C
    void set_maxAtlasHeightOverride(int value);
    // public System.Boolean get_useMaxAtlasWidthOverride()
    // Offset: 0x1201D64
    bool get_useMaxAtlasWidthOverride();
    // public System.Void set_useMaxAtlasWidthOverride(System.Boolean value)
    // Offset: 0x1201D6C
    void set_useMaxAtlasWidthOverride(bool value);
    // public System.Boolean get_useMaxAtlasHeightOverride()
    // Offset: 0x1201D78
    bool get_useMaxAtlasHeightOverride();
    // public System.Void set_useMaxAtlasHeightOverride(System.Boolean value)
    // Offset: 0x1201D80
    void set_useMaxAtlasHeightOverride(bool value);
    // public System.Boolean get_resizePowerOfTwoTextures()
    // Offset: 0x1201D8C
    bool get_resizePowerOfTwoTextures();
    // public System.Void set_resizePowerOfTwoTextures(System.Boolean value)
    // Offset: 0x1201D94
    void set_resizePowerOfTwoTextures(bool value);
    // public System.Boolean get_fixOutOfBoundsUVs()
    // Offset: 0x1201DA0
    bool get_fixOutOfBoundsUVs();
    // public System.Void set_fixOutOfBoundsUVs(System.Boolean value)
    // Offset: 0x1201DA8
    void set_fixOutOfBoundsUVs(bool value);
    // public System.Int32 get_layerTexturePackerFastMesh()
    // Offset: 0x1201DB4
    int get_layerTexturePackerFastMesh();
    // public System.Void set_layerTexturePackerFastMesh(System.Int32 value)
    // Offset: 0x1201DBC
    void set_layerTexturePackerFastMesh(int value);
    // public System.Int32 get_maxTilingBakeSize()
    // Offset: 0x1201DC4
    int get_maxTilingBakeSize();
    // public System.Void set_maxTilingBakeSize(System.Int32 value)
    // Offset: 0x1201DCC
    void set_maxTilingBakeSize(int value);
    // public System.Boolean get_saveAtlasesAsAssets()
    // Offset: 0x1201DD4
    bool get_saveAtlasesAsAssets();
    // public System.Void set_saveAtlasesAsAssets(System.Boolean value)
    // Offset: 0x1201DDC
    void set_saveAtlasesAsAssets(bool value);
    // public MB2_TextureBakeResults/ResultType get_resultType()
    // Offset: 0x1201DE8
    ::GlobalNamespace::MB2_TextureBakeResults::ResultType get_resultType();
    // public System.Void set_resultType(MB2_TextureBakeResults/ResultType value)
    // Offset: 0x1201DF0
    void set_resultType(::GlobalNamespace::MB2_TextureBakeResults::ResultType value);
    // public DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum get_packingAlgorithm()
    // Offset: 0x1201DF8
    ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum get_packingAlgorithm();
    // public System.Void set_packingAlgorithm(DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum value)
    // Offset: 0x1201E00
    void set_packingAlgorithm(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum value);
    // public System.Boolean get_meshBakerTexturePackerForcePowerOfTwo()
    // Offset: 0x1201E08
    bool get_meshBakerTexturePackerForcePowerOfTwo();
    // public System.Void set_meshBakerTexturePackerForcePowerOfTwo(System.Boolean value)
    // Offset: 0x1201E10
    void set_meshBakerTexturePackerForcePowerOfTwo(bool value);
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> get_customShaderPropNames()
    // Offset: 0x1201E1C
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* get_customShaderPropNames();
    // public System.Void set_customShaderPropNames(System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> value)
    // Offset: 0x1201E24
    void set_customShaderPropNames(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* value);
    // public System.Boolean get_considerNonTextureProperties()
    // Offset: 0x1201E2C
    bool get_considerNonTextureProperties();
    // public System.Void set_considerNonTextureProperties(System.Boolean value)
    // Offset: 0x1201E34
    void set_considerNonTextureProperties(bool value);
    // public System.Boolean get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize()
    // Offset: 0x1201E40
    bool get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize();
    // public System.Void set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize(System.Boolean value)
    // Offset: 0x1201E48
    void set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize(bool value);
    // public System.Void .ctor()
    // Offset: 0x12051E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureCombiner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_TextureCombiner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureCombiner*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x12052A0
    static void _cctor();
    // static public System.Void RunCorutineWithoutPause(System.Collections.IEnumerator cor, System.Int32 recursionDepth)
    // Offset: 0x1201E54
    static void RunCorutineWithoutPause(::System::Collections::IEnumerator* cor, int recursionDepth);
    // public System.Boolean CombineTexturesIntoAtlases(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, UnityEngine.Material resultMaterial, System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, System.Collections.Generic.List`1<UnityEngine.Material> allowedMaterialsFilter, System.Collections.Generic.List`1<System.String> texPropsToIgnore, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> packingResults, System.Boolean onlyPackRects, System.Boolean splitAtlasWhenPackingIfTooBig)
    // Offset: 0x1202158
    bool CombineTexturesIntoAtlases(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects, ::UnityEngine::Material* resultMaterial, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::System::Collections::Generic::List_1<::UnityEngine::Material*>* allowedMaterialsFilter, ::System::Collections::Generic::List_1<::StringW>* texPropsToIgnore, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>* packingResults, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig);
    // public System.Collections.IEnumerator CombineTexturesIntoAtlasesCoroutine(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, MB_AtlasesAndRects resultAtlasesAndRects, UnityEngine.Material resultMaterial, System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, System.Collections.Generic.List`1<UnityEngine.Material> allowedMaterialsFilter, System.Collections.Generic.List`1<System.String> texPropsToIgnore, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods, DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult coroutineResult, System.Single maxTimePerFrame, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> packingResults, System.Boolean onlyPackRects, System.Boolean splitAtlasWhenPackingIfTooBig)
    // Offset: 0x12023B0
    ::System::Collections::IEnumerator* CombineTexturesIntoAtlasesCoroutine(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects, ::UnityEngine::Material* resultMaterial, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::System::Collections::Generic::List_1<::UnityEngine::Material*>* allowedMaterialsFilter, ::System::Collections::Generic::List_1<::StringW>* texPropsToIgnore, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* coroutineResult, float maxTimePerFrame, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>* packingResults, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig);
    // private System.Collections.IEnumerator _CombineTexturesIntoAtlases(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, UnityEngine.Material resultMaterial, System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, System.Collections.Generic.List`1<UnityEngine.Material> allowedMaterialsFilter, System.Collections.Generic.List`1<System.String> texPropsToIgnore, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> atlasPackingResult, System.Boolean onlyPackRects, System.Boolean splitAtlasWhenPackingIfTooBig)
    // Offset: 0x12022D8
    ::System::Collections::IEnumerator* _CombineTexturesIntoAtlases(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* result, ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects, ::UnityEngine::Material* resultMaterial, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::System::Collections::Generic::List_1<::UnityEngine::Material*>* allowedMaterialsFilter, ::System::Collections::Generic::List_1<::StringW>* texPropsToIgnore, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>* atlasPackingResult, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig);
    // private DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData LoadPipelineData(UnityEngine.Material resultMaterial, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> texPropertyNames, System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, System.Collections.Generic.List`1<UnityEngine.Material> allowedMaterialsFilter, System.Collections.Generic.List`1<System.String> texPropsToIgnore, System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> distinctMaterialTextures)
    // Offset: 0x12024F4
    ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* LoadPipelineData(::UnityEngine::Material* resultMaterial, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* texPropertyNames, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::System::Collections::Generic::List_1<::UnityEngine::Material*>* allowedMaterialsFilter, ::System::Collections::Generic::List_1<::StringW>* texPropsToIgnore, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>* distinctMaterialTextures);
    // private System.Collections.IEnumerator __CombineTexturesIntoAtlases(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods)
    // Offset: 0x1202C88
    ::System::Collections::IEnumerator* __CombineTexturesIntoAtlases(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* result, ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects, ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods);
    // private System.Collections.IEnumerator __RunTexturePackerOnly(DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult result, MB_AtlasesAndRects resultAtlasesAndRects, DigitalOpus.MB.Core.MB3_TextureCombinerPipeline/DigitalOpus.MB.Core.TexturePipelineData data, System.Boolean splitAtlasWhenPackingIfTooBig, DigitalOpus.MB.Core.MB2_EditorMethodsInterface textureEditorMethods, System.Collections.Generic.List`1<DigitalOpus.MB.Core.AtlasPackingResult> packingResult)
    // Offset: 0x1202D58
    ::System::Collections::IEnumerator* __RunTexturePackerOnly(::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* result, ::GlobalNamespace::MB_AtlasesAndRects* resultAtlasesAndRects, ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, bool splitAtlasWhenPackingIfTooBig, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>* packingResult);
    // System.Int32 _getNumTemporaryTextures()
    // Offset: 0x1202E34
    int _getNumTemporaryTextures();
    // public UnityEngine.Texture2D _createTemporaryTexture(System.String propertyName, System.Int32 w, System.Int32 h, UnityEngine.TextureFormat texFormat, System.Boolean mipMaps, System.Boolean linear)
    // Offset: 0x1202E84
    ::UnityEngine::Texture2D* _createTemporaryTexture(::StringW propertyName, int w, int h, ::UnityEngine::TextureFormat texFormat, bool mipMaps, bool linear);
    // System.Void AddTemporaryTexture(DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.TemporaryTexture tt)
    // Offset: 0x1203090
    void AddTemporaryTexture(::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture* tt);
    // UnityEngine.Texture2D _createTextureCopy(System.String propertyName, UnityEngine.Texture2D t)
    // Offset: 0x12030F8
    ::UnityEngine::Texture2D* _createTextureCopy(::StringW propertyName, ::UnityEngine::Texture2D* t);
    // UnityEngine.Texture2D _resizeTexture(System.String propertyName, UnityEngine.Texture2D t, System.Int32 w, System.Int32 h)
    // Offset: 0x1203278
    ::UnityEngine::Texture2D* _resizeTexture(::StringW propertyName, ::UnityEngine::Texture2D* t, int w, int h);
    // System.Void _destroyAllTemporaryTextures()
    // Offset: 0x12033E8
    void _destroyAllTemporaryTextures();
    // System.Void _destroyTemporaryTextures(System.String propertyName)
    // Offset: 0x1203550
    void _destroyTemporaryTextures(::StringW propertyName);
    // public System.Void _restoreProceduralMaterials()
    // Offset: 0x1203868
    void _restoreProceduralMaterials();
    // public System.Void SuggestTreatment(System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh, UnityEngine.Material[] resultMaterials, System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> _customShaderPropNames, System.Collections.Generic.List`1<System.String> texPropsToIgnore)
    // Offset: 0x120386C
    void SuggestTreatment(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh, ::ArrayW<::UnityEngine::Material*> resultMaterials, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* _customShaderPropNames, ::System::Collections::Generic::List_1<::StringW>* texPropsToIgnore);
    // static public System.Boolean ShouldTextureBeLinear(DigitalOpus.MB.Core.ShaderTextureProperty shaderTextureProperty)
    // Offset: 0x12051C8
    static bool ShouldTextureBeLinear(::DigitalOpus::MB::Core::ShaderTextureProperty* shaderTextureProperty);
    // private System.String PrintList(System.Collections.Generic.List`1<UnityEngine.GameObject> gos)
    // Offset: 0x12050E8
    ::StringW PrintList(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gos);
  }; // DigitalOpus.MB.Core.MB3_TextureCombiner
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureCombiner), 96 + sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>*)> __DigitalOpus_MB_Core_MB3_TextureCombinerSizeCheck;
  static_assert(sizeof(MB3_TextureCombiner) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_textureBakeResults
// Il2CppName: get_textureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB2_TextureBakeResults* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_textureBakeResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_textureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_textureBakeResults
// Il2CppName: set_textureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::GlobalNamespace::MB2_TextureBakeResults*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_textureBakeResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MB2_TextureBakeResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_textureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_atlasPadding
// Il2CppName: get_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_atlasPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_atlasPadding
// Il2CppName: set_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_atlasPadding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasSize
// Il2CppName: get_maxAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_maxAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasSize
// Il2CppName: set_maxAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_maxAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasWidthOverride
// Il2CppName: get_maxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_maxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasWidthOverride
// Il2CppName: set_maxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_maxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasHeightOverride
// Il2CppName: get_maxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_maxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasHeightOverride
// Il2CppName: set_maxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_maxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_useMaxAtlasWidthOverride
// Il2CppName: get_useMaxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_useMaxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_useMaxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_useMaxAtlasWidthOverride
// Il2CppName: set_useMaxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_useMaxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_useMaxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_useMaxAtlasHeightOverride
// Il2CppName: get_useMaxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_useMaxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_useMaxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_useMaxAtlasHeightOverride
// Il2CppName: set_useMaxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_useMaxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_useMaxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_resizePowerOfTwoTextures
// Il2CppName: get_resizePowerOfTwoTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_resizePowerOfTwoTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_resizePowerOfTwoTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_resizePowerOfTwoTextures
// Il2CppName: set_resizePowerOfTwoTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_resizePowerOfTwoTextures)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_resizePowerOfTwoTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_fixOutOfBoundsUVs
// Il2CppName: get_fixOutOfBoundsUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_fixOutOfBoundsUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_fixOutOfBoundsUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_fixOutOfBoundsUVs
// Il2CppName: set_fixOutOfBoundsUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_fixOutOfBoundsUVs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_fixOutOfBoundsUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_layerTexturePackerFastMesh
// Il2CppName: get_layerTexturePackerFastMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_layerTexturePackerFastMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_layerTexturePackerFastMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_layerTexturePackerFastMesh
// Il2CppName: set_layerTexturePackerFastMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_layerTexturePackerFastMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_layerTexturePackerFastMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxTilingBakeSize
// Il2CppName: get_maxTilingBakeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_maxTilingBakeSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_maxTilingBakeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxTilingBakeSize
// Il2CppName: set_maxTilingBakeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_maxTilingBakeSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_maxTilingBakeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_saveAtlasesAsAssets
// Il2CppName: get_saveAtlasesAsAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_saveAtlasesAsAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_saveAtlasesAsAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_saveAtlasesAsAssets
// Il2CppName: set_saveAtlasesAsAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_saveAtlasesAsAssets)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_saveAtlasesAsAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_resultType
// Il2CppName: get_resultType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB2_TextureBakeResults::ResultType (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_resultType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_resultType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_resultType
// Il2CppName: set_resultType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::GlobalNamespace::MB2_TextureBakeResults::ResultType)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_resultType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MB2_TextureBakeResults/ResultType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_resultType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_packingAlgorithm
// Il2CppName: get_packingAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_packingAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_packingAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_packingAlgorithm
// Il2CppName: set_packingAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_packingAlgorithm)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_PackingAlgorithmEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_packingAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_meshBakerTexturePackerForcePowerOfTwo
// Il2CppName: get_meshBakerTexturePackerForcePowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_meshBakerTexturePackerForcePowerOfTwo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_meshBakerTexturePackerForcePowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_meshBakerTexturePackerForcePowerOfTwo
// Il2CppName: set_meshBakerTexturePackerForcePowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_meshBakerTexturePackerForcePowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_meshBakerTexturePackerForcePowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_customShaderPropNames
// Il2CppName: get_customShaderPropNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_customShaderPropNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_customShaderPropNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_customShaderPropNames
// Il2CppName: set_customShaderPropNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_customShaderPropNames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_customShaderPropNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_considerNonTextureProperties
// Il2CppName: get_considerNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_considerNonTextureProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_considerNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_considerNonTextureProperties
// Il2CppName: set_considerNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_considerNonTextureProperties)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_considerNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
// Il2CppName: get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "get_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
// Il2CppName: set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "set_doMergeDistinctMaterialTexturesThatWouldExceedAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::RunCorutineWithoutPause
// Il2CppName: RunCorutineWithoutPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::IEnumerator*, int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::RunCorutineWithoutPause)> {
  static const MethodInfo* get() {
    static auto* cor = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    static auto* recursionDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "RunCorutineWithoutPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cor, recursionDepth});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlases
// Il2CppName: CombineTexturesIntoAtlases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::GlobalNamespace::MB_AtlasesAndRects*, ::UnityEngine::Material*, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*, ::System::Collections::Generic::List_1<::StringW>*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*, bool, bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlases)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* resultAtlasesAndRects = &::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects")->byval_arg;
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* allowedMaterialsFilter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    static auto* texPropsToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* packingResults = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPackingResult")})->byval_arg;
    static auto* onlyPackRects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* splitAtlasWhenPackingIfTooBig = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "CombineTexturesIntoAtlases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, texPropsToIgnore, textureEditorMethods, packingResults, onlyPackRects, splitAtlasWhenPackingIfTooBig});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutine
// Il2CppName: CombineTexturesIntoAtlasesCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::GlobalNamespace::MB_AtlasesAndRects*, ::UnityEngine::Material*, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*, ::System::Collections::Generic::List_1<::StringW>*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*, float, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*, bool, bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutine)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* resultAtlasesAndRects = &::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects")->byval_arg;
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* allowedMaterialsFilter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    static auto* texPropsToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* coroutineResult = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/CombineTexturesIntoAtlasesCoroutineResult")->byval_arg;
    static auto* maxTimePerFrame = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* packingResults = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPackingResult")})->byval_arg;
    static auto* onlyPackRects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* splitAtlasWhenPackingIfTooBig = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "CombineTexturesIntoAtlasesCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, texPropsToIgnore, textureEditorMethods, coroutineResult, maxTimePerFrame, packingResults, onlyPackRects, splitAtlasWhenPackingIfTooBig});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_CombineTexturesIntoAtlases
// Il2CppName: _CombineTexturesIntoAtlases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*, ::GlobalNamespace::MB_AtlasesAndRects*, ::UnityEngine::Material*, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*, ::System::Collections::Generic::List_1<::StringW>*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*, bool, bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_CombineTexturesIntoAtlases)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/CombineTexturesIntoAtlasesCoroutineResult")->byval_arg;
    static auto* resultAtlasesAndRects = &::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects")->byval_arg;
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* allowedMaterialsFilter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    static auto* texPropsToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* atlasPackingResult = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPackingResult")})->byval_arg;
    static auto* onlyPackRects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* splitAtlasWhenPackingIfTooBig = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_CombineTexturesIntoAtlases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, result, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, texPropsToIgnore, textureEditorMethods, atlasPackingResult, onlyPackRects, splitAtlasWhenPackingIfTooBig});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::LoadPipelineData
// Il2CppName: LoadPipelineData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::UnityEngine::Material*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*, ::System::Collections::Generic::List_1<::StringW>*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::LoadPipelineData)> {
  static const MethodInfo* get() {
    static auto* resultMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* texPropertyNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* allowedMaterialsFilter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    static auto* texPropsToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* distinctMaterialTextures = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TexSet")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "LoadPipelineData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resultMaterial, texPropertyNames, objsToMesh, allowedMaterialsFilter, texPropsToIgnore, distinctMaterialTextures});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::__CombineTexturesIntoAtlases
// Il2CppName: __CombineTexturesIntoAtlases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*, ::GlobalNamespace::MB_AtlasesAndRects*, ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::__CombineTexturesIntoAtlases)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/CombineTexturesIntoAtlasesCoroutineResult")->byval_arg;
    static auto* resultAtlasesAndRects = &::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerPipeline/TexturePipelineData")->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "__CombineTexturesIntoAtlases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, result, resultAtlasesAndRects, data, textureEditorMethods});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::__RunTexturePackerOnly
// Il2CppName: __RunTexturePackerOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*, ::GlobalNamespace::MB_AtlasesAndRects*, ::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, bool, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::AtlasPackingResult*>*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::__RunTexturePackerOnly)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/CombineTexturesIntoAtlasesCoroutineResult")->byval_arg;
    static auto* resultAtlasesAndRects = &::il2cpp_utils::GetClassFromName("", "MB_AtlasesAndRects")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerPipeline/TexturePipelineData")->byval_arg;
    static auto* splitAtlasWhenPackingIfTooBig = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textureEditorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* packingResult = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "AtlasPackingResult")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "__RunTexturePackerOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, resultAtlasesAndRects, data, splitAtlasWhenPackingIfTooBig, textureEditorMethods, packingResult});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_getNumTemporaryTextures
// Il2CppName: _getNumTemporaryTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_getNumTemporaryTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_getNumTemporaryTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_createTemporaryTexture
// Il2CppName: _createTemporaryTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::StringW, int, int, ::UnityEngine::TextureFormat, bool, bool)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_createTemporaryTexture)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* texFormat = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* mipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* linear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_createTemporaryTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, w, h, texFormat, mipMaps, linear});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::AddTemporaryTexture
// Il2CppName: AddTemporaryTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::AddTemporaryTexture)> {
  static const MethodInfo* get() {
    static auto* tt = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner/TemporaryTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "AddTemporaryTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tt});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_createTextureCopy
// Il2CppName: _createTextureCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::StringW, ::UnityEngine::Texture2D*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_createTextureCopy)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_createTextureCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, t});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_resizeTexture
// Il2CppName: _resizeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::StringW, ::UnityEngine::Texture2D*, int, int)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_resizeTexture)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_resizeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, t, w, h});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_destroyAllTemporaryTextures
// Il2CppName: _destroyAllTemporaryTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_destroyAllTemporaryTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_destroyAllTemporaryTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_destroyTemporaryTextures
// Il2CppName: _destroyTemporaryTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::StringW)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_destroyTemporaryTextures)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_destroyTemporaryTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::_restoreProceduralMaterials
// Il2CppName: _restoreProceduralMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)()>(&DigitalOpus::MB::Core::MB3_TextureCombiner::_restoreProceduralMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "_restoreProceduralMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::SuggestTreatment
// Il2CppName: SuggestTreatment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, ::ArrayW<::UnityEngine::Material*>, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*, ::System::Collections::Generic::List_1<::StringW>*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::SuggestTreatment)> {
  static const MethodInfo* get() {
    static auto* objsToMesh = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* resultMaterials = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    static auto* _customShaderPropNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    static auto* texPropsToIgnore = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "SuggestTreatment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objsToMesh, resultMaterials, _customShaderPropNames, texPropsToIgnore});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::ShouldTextureBeLinear
// Il2CppName: ShouldTextureBeLinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DigitalOpus::MB::Core::ShaderTextureProperty*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::ShouldTextureBeLinear)> {
  static const MethodInfo* get() {
    static auto* shaderTextureProperty = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "ShouldTextureBeLinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderTextureProperty});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_TextureCombiner::PrintList
// Il2CppName: PrintList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (DigitalOpus::MB::Core::MB3_TextureCombiner::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&DigitalOpus::MB::Core::MB3_TextureCombiner::PrintList)> {
  static const MethodInfo* get() {
    static auto* gos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_TextureCombiner*), "PrintList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos});
  }
};
