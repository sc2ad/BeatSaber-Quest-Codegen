// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB3_AgglomerativeClustering
#include "DigitalOpus/MB/Core/MB3_AgglomerativeClustering.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*, "DigitalOpus.MB.Core", "MB3_AgglomerativeClustering/ClusterNode");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_AgglomerativeClustering::ClusterNode : public ::Il2CppObject {
    public:
    public:
    // public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.item_s leaf
    // Size: 0x8
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::item_s* leaf;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::item_s*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode cha
    // Size: 0x8
    // Offset: 0x18
    ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode* cha;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode chb
    // Size: 0x8
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode* chb;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*) == 0x8);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x28
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single distToMergedCentroid
    // Size: 0x4
    // Offset: 0x2C
    float distToMergedCentroid;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 centroid
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 centroid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: centroid and: leafs
    char __padding5[0x4] = {};
    // public System.Int32[] leafs
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> leafs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 idx
    // Size: 0x4
    // Offset: 0x48
    int idx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isUnclustered
    // Size: 0x1
    // Offset: 0x4C
    bool isUnclustered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.item_s leaf
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::item_s*& dyn_leaf();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode cha
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*& dyn_cha();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode chb
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*& dyn_chb();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // Get instance field reference: public System.Single distToMergedCentroid
    [[deprecated("Use field access instead!")]] float& dyn_distToMergedCentroid();
    // Get instance field reference: public UnityEngine.Vector3 centroid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centroid();
    // Get instance field reference: public System.Int32[] leafs
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_leafs();
    // Get instance field reference: public System.Int32 idx
    [[deprecated("Use field access instead!")]] int& dyn_idx();
    // Get instance field reference: public System.Boolean isUnclustered
    [[deprecated("Use field access instead!")]] bool& dyn_isUnclustered();
    // public System.Void .ctor(DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.item_s ii, System.Int32 index)
    // Offset: 0xC1FB94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_AgglomerativeClustering::ClusterNode* New_ctor(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::item_s* ii, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_AgglomerativeClustering::ClusterNode*, creationType>(ii, index)));
    }
    // public System.Void .ctor(DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode a, DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode b, System.Int32 index, System.Int32 h, System.Single dist, DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode[] clusters)
    // Offset: 0xC2003C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_AgglomerativeClustering::ClusterNode* New_ctor(::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode* a, ::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode* b, int index, int h, float dist, ::ArrayW<::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode*> clusters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_AgglomerativeClustering::ClusterNode*, creationType>(a, b, index, h, dist, clusters)));
    }
  }; // DigitalOpus.MB.Core.MB3_AgglomerativeClustering/DigitalOpus.MB.Core.ClusterNode
  #pragma pack(pop)
  static check_size<sizeof(MB3_AgglomerativeClustering::ClusterNode), 76 + sizeof(bool)> __DigitalOpus_MB_Core_MB3_AgglomerativeClustering_ClusterNodeSizeCheck;
  static_assert(sizeof(MB3_AgglomerativeClustering::ClusterNode) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_AgglomerativeClustering::ClusterNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
