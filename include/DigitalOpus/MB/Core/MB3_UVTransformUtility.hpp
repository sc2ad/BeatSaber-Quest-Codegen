// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: DRect
  struct DRect;
  // Forward declaring type: DVector2
  struct DVector2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_UVTransformUtility
  class MB3_UVTransformUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB3_UVTransformUtility);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB3_UVTransformUtility*, "DigitalOpus.MB.Core", "MB3_UVTransformUtility");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB3_UVTransformUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_UVTransformUtility : public ::Il2CppObject {
    public:
    // public System.Void .ctor()
    // Offset: 0x15D6EC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_UVTransformUtility* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB3_UVTransformUtility::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_UVTransformUtility*, creationType>()));
    }
    // static public System.Void Test()
    // Offset: 0x15D601C
    static void Test();
    // static public System.Single TransformX(DigitalOpus.MB.Core.DRect r, System.Double x)
    // Offset: 0x15D63F4
    static float TransformX(::DigitalOpus::MB::Core::DRect r, double x);
    // static public DigitalOpus.MB.Core.DRect CombineTransforms(ref DigitalOpus.MB.Core.DRect r1, ref DigitalOpus.MB.Core.DRect r2)
    // Offset: 0x15D6344
    static ::DigitalOpus::MB::Core::DRect CombineTransforms(ByRef<::DigitalOpus::MB::Core::DRect> r1, ByRef<::DigitalOpus::MB::Core::DRect> r2);
    // static public UnityEngine.Rect CombineTransforms(ref UnityEngine.Rect r1, ref UnityEngine.Rect r2)
    // Offset: 0x15D6404
    static ::UnityEngine::Rect CombineTransforms(ByRef<::UnityEngine::Rect> r1, ByRef<::UnityEngine::Rect> r2);
    // static public DigitalOpus.MB.Core.DRect InverseTransform(ref DigitalOpus.MB.Core.DRect t)
    // Offset: 0x15D631C
    static ::DigitalOpus::MB::Core::DRect InverseTransform(ByRef<::DigitalOpus::MB::Core::DRect> t);
    // static public DigitalOpus.MB.Core.DRect GetShiftTransformToFitBinA(ref DigitalOpus.MB.Core.DRect A, ref DigitalOpus.MB.Core.DRect B)
    // Offset: 0x15D651C
    static ::DigitalOpus::MB::Core::DRect GetShiftTransformToFitBinA(ByRef<::DigitalOpus::MB::Core::DRect> A, ByRef<::DigitalOpus::MB::Core::DRect> B);
    // static public DigitalOpus.MB.Core.DRect GetEncapsulatingRectShifted(ref DigitalOpus.MB.Core.DRect uvRect1, ref DigitalOpus.MB.Core.DRect willBeIn)
    // Offset: 0x15D6650
    static ::DigitalOpus::MB::Core::DRect GetEncapsulatingRectShifted(ByRef<::DigitalOpus::MB::Core::DRect> uvRect1, ByRef<::DigitalOpus::MB::Core::DRect> willBeIn);
    // static public DigitalOpus.MB.Core.DRect GetEncapsulatingRect(ref DigitalOpus.MB.Core.DRect uvRect1, ref DigitalOpus.MB.Core.DRect uvRect2)
    // Offset: 0x15D6808
    static ::DigitalOpus::MB::Core::DRect GetEncapsulatingRect(ByRef<::DigitalOpus::MB::Core::DRect> uvRect1, ByRef<::DigitalOpus::MB::Core::DRect> uvRect2);
    // static public System.Boolean RectContainsShifted(ref DigitalOpus.MB.Core.DRect bucket, ref DigitalOpus.MB.Core.DRect tryFit)
    // Offset: 0x15D68A4
    static bool RectContainsShifted(ByRef<::DigitalOpus::MB::Core::DRect> bucket, ByRef<::DigitalOpus::MB::Core::DRect> tryFit);
    // static public System.Boolean RectContainsShifted(ref UnityEngine.Rect bucket, ref UnityEngine.Rect tryFit)
    // Offset: 0x15D69F0
    static bool RectContainsShifted(ByRef<::UnityEngine::Rect> bucket, ByRef<::UnityEngine::Rect> tryFit);
    // static public System.Boolean LineSegmentContainsShifted(System.Single bucketOffset, System.Single bucketLength, System.Single tryFitOffset, System.Single tryFitLength)
    // Offset: 0x15D6CEC
    static bool LineSegmentContainsShifted(float bucketOffset, float bucketLength, float tryFitOffset, float tryFitLength);
    // static public System.Boolean RectContains(ref DigitalOpus.MB.Core.DRect bigRect, ref DigitalOpus.MB.Core.DRect smallToTestIfFits)
    // Offset: 0x15D6DE4
    static bool RectContains(ByRef<::DigitalOpus::MB::Core::DRect> bigRect, ByRef<::DigitalOpus::MB::Core::DRect> smallToTestIfFits);
    // static public System.Boolean RectContains(ref UnityEngine.Rect bigRect, ref UnityEngine.Rect smallToTestIfFits)
    // Offset: 0x15D6B5C
    static bool RectContains(ByRef<::UnityEngine::Rect> bigRect, ByRef<::UnityEngine::Rect> smallToTestIfFits);
    // static public UnityEngine.Vector2 TransformPoint(ref DigitalOpus.MB.Core.DRect r, UnityEngine.Vector2 p)
    // Offset: 0x15D63A0
    static ::UnityEngine::Vector2 TransformPoint(ByRef<::DigitalOpus::MB::Core::DRect> r, ::UnityEngine::Vector2 p);
    // static public DigitalOpus.MB.Core.DVector2 TransformPoint(ref DigitalOpus.MB.Core.DRect r, DigitalOpus.MB.Core.DVector2 p)
    // Offset: 0x15D6E84
    static ::DigitalOpus::MB::Core::DVector2 TransformPoint(ByRef<::DigitalOpus::MB::Core::DRect> r, ::DigitalOpus::MB::Core::DVector2 p);
  }; // DigitalOpus.MB.Core.MB3_UVTransformUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::Test
// Il2CppName: Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::Test)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformX
// Il2CppName: TransformX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::DigitalOpus::MB::Core::DRect, double)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformX)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "TransformX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, x});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::CombineTransforms
// Il2CppName: CombineTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::CombineTransforms)> {
  static const MethodInfo* get() {
    static auto* r1 = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* r2 = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "CombineTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r1, r2});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::CombineTransforms
// Il2CppName: CombineTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (*)(ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Rect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::CombineTransforms)> {
  static const MethodInfo* get() {
    static auto* r1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* r2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "CombineTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r1, r2});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::InverseTransform
// Il2CppName: InverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (*)(ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::InverseTransform)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "InverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::GetShiftTransformToFitBinA
// Il2CppName: GetShiftTransformToFitBinA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::GetShiftTransformToFitBinA)> {
  static const MethodInfo* get() {
    static auto* A = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "GetShiftTransformToFitBinA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, B});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::GetEncapsulatingRectShifted
// Il2CppName: GetEncapsulatingRectShifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::GetEncapsulatingRectShifted)> {
  static const MethodInfo* get() {
    static auto* uvRect1 = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* willBeIn = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "GetEncapsulatingRectShifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvRect1, willBeIn});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::GetEncapsulatingRect
// Il2CppName: GetEncapsulatingRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DRect (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::GetEncapsulatingRect)> {
  static const MethodInfo* get() {
    static auto* uvRect1 = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* uvRect2 = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "GetEncapsulatingRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uvRect1, uvRect2});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContainsShifted
// Il2CppName: RectContainsShifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContainsShifted)> {
  static const MethodInfo* get() {
    static auto* bucket = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* tryFit = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "RectContainsShifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bucket, tryFit});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContainsShifted
// Il2CppName: RectContainsShifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Rect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContainsShifted)> {
  static const MethodInfo* get() {
    static auto* bucket = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* tryFit = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "RectContainsShifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bucket, tryFit});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::LineSegmentContainsShifted
// Il2CppName: LineSegmentContainsShifted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float, float, float)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::LineSegmentContainsShifted)> {
  static const MethodInfo* get() {
    static auto* bucketOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bucketLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tryFitOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tryFitLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "LineSegmentContainsShifted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bucketOffset, bucketLength, tryFitOffset, tryFitLength});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContains
// Il2CppName: RectContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ByRef<::DigitalOpus::MB::Core::DRect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContains)> {
  static const MethodInfo* get() {
    static auto* bigRect = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* smallToTestIfFits = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "RectContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bigRect, smallToTestIfFits});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContains
// Il2CppName: RectContains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Rect>, ByRef<::UnityEngine::Rect>)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::RectContains)> {
  static const MethodInfo* get() {
    static auto* bigRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* smallToTestIfFits = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "RectContains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bigRect, smallToTestIfFits});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ::UnityEngine::Vector2)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformPoint)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, p});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::DVector2 (*)(ByRef<::DigitalOpus::MB::Core::DRect>, ::DigitalOpus::MB::Core::DVector2)>(&DigitalOpus::MB::Core::MB3_UVTransformUtility::TransformPoint)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DRect")->this_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "DVector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB3_UVTransformUtility*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, p});
  }
};
