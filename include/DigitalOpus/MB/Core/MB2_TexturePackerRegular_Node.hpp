// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_TexturePackerRegular
#include "DigitalOpus/MB/Core/MB2_TexturePackerRegular.hpp"
// Including type: DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.NodeType
#include "DigitalOpus/MB/Core/MB2_TexturePacker_NodeType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*, "DigitalOpus.MB.Core", "MB2_TexturePackerRegular/Node");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.Node
  // [TokenAttribute] Offset: FFFFFFFF
  class MB2_TexturePackerRegular::Node : public ::Il2CppObject {
    public:
    public:
    // DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.NodeType isFullAtlas
    // Size: 0x4
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB2_TexturePacker::NodeType isFullAtlas;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_TexturePacker::NodeType) == 0x4);
    // Padding between fields: isFullAtlas and: child
    char __padding0[0x4] = {};
    // DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.Node[] child
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*> child;
    // Field size check
    static_assert(sizeof(::ArrayW<::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*>) == 0x8);
    // DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.PixRect r
    // Size: 0x8
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB2_TexturePacker::PixRect* r;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_TexturePacker::PixRect*) == 0x8);
    // DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image img
    // Size: 0x8
    // Offset: 0x28
    ::DigitalOpus::MB::Core::MB2_TexturePacker::Image* img;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_TexturePacker::Image*) == 0x8);
    // private DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.ProbeResult bestRoot
    // Size: 0x8
    // Offset: 0x30
    ::DigitalOpus::MB::Core::MB2_TexturePackerRegular::ProbeResult* bestRoot;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_TexturePackerRegular::ProbeResult*) == 0x8);
    public:
    // Get instance field reference: DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.NodeType isFullAtlas
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_TexturePacker::NodeType& dyn_isFullAtlas();
    // Get instance field reference: DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.Node[] child
    [[deprecated("Use field access instead!")]] ::ArrayW<::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*>& dyn_child();
    // Get instance field reference: DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.PixRect r
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_TexturePacker::PixRect*& dyn_r();
    // Get instance field reference: DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image img
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_TexturePacker::Image*& dyn_img();
    // Get instance field reference: private DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.ProbeResult bestRoot
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_TexturePackerRegular::ProbeResult*& dyn_bestRoot();
    // System.Void .ctor(DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.NodeType rootType)
    // Offset: 0xC1B0D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB2_TexturePackerRegular::Node* New_ctor(::DigitalOpus::MB::Core::MB2_TexturePacker::NodeType rootType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB2_TexturePackerRegular::Node*, creationType>(rootType)));
    }
    // private System.Boolean isLeaf()
    // Offset: 0xC1EB3C
    bool isLeaf();
    // DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.Node Insert(DigitalOpus.MB.Core.MB2_TexturePacker/DigitalOpus.MB.Core.Image im, System.Boolean handed)
    // Offset: 0xC1B144
    ::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node* Insert(::DigitalOpus::MB::Core::MB2_TexturePacker::Image* im, bool handed);
  }; // DigitalOpus.MB.Core.MB2_TexturePackerRegular/DigitalOpus.MB.Core.Node
  #pragma pack(pop)
  static check_size<sizeof(MB2_TexturePackerRegular::Node), 48 + sizeof(::DigitalOpus::MB::Core::MB2_TexturePackerRegular::ProbeResult*)> __DigitalOpus_MB_Core_MB2_TexturePackerRegular_NodeSizeCheck;
  static_assert(sizeof(MB2_TexturePackerRegular::Node) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::isLeaf
// Il2CppName: isLeaf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::*)()>(&DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::isLeaf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*), "isLeaf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node* (DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::*)(::DigitalOpus::MB::Core::MB2_TexturePacker::Image*, bool)>(&DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node::Insert)> {
  static const MethodInfo* get() {
    static auto* im = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_TexturePacker/Image")->byval_arg;
    static auto* handed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB2_TexturePackerRegular::Node*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{im, handed});
  }
};
