// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: GrouperData
  class GrouperData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::GrouperData);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::GrouperData*, "DigitalOpus.MB.Core", "GrouperData");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.GrouperData
  // [TokenAttribute] Offset: FFFFFFFF
  class GrouperData : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean clusterOnLMIndex
    // Size: 0x1
    // Offset: 0x10
    bool clusterOnLMIndex;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean clusterByLODLevel
    // Size: 0x1
    // Offset: 0x11
    bool clusterByLODLevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clusterByLODLevel and: origin
    char __padding1[0x2] = {};
    // public UnityEngine.Vector3 origin
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::Vector3 origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 cellSize
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 cellSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 pieNumSegments
    // Size: 0x4
    // Offset: 0x2C
    int pieNumSegments;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 pieAxis
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 pieAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single ringSpacing
    // Size: 0x4
    // Offset: 0x3C
    float ringSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean combineSegmentsInInnermostRing
    // Size: 0x1
    // Offset: 0x40
    bool combineSegmentsInInnermostRing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: combineSegmentsInInnermostRing and: height
    char __padding7[0x3] = {};
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x44
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxDistBetweenClusters
    // Size: 0x4
    // Offset: 0x48
    float maxDistBetweenClusters;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean includeCellsWithOnlyOneRenderer
    // Size: 0x1
    // Offset: 0x4C
    bool includeCellsWithOnlyOneRenderer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean clusterOnLMIndex
    [[deprecated("Use field access instead!")]] bool& dyn_clusterOnLMIndex();
    // Get instance field reference: public System.Boolean clusterByLODLevel
    [[deprecated("Use field access instead!")]] bool& dyn_clusterByLODLevel();
    // Get instance field reference: public UnityEngine.Vector3 origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_origin();
    // Get instance field reference: public UnityEngine.Vector3 cellSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cellSize();
    // Get instance field reference: public System.Int32 pieNumSegments
    [[deprecated("Use field access instead!")]] int& dyn_pieNumSegments();
    // Get instance field reference: public UnityEngine.Vector3 pieAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pieAxis();
    // Get instance field reference: public System.Single ringSpacing
    [[deprecated("Use field access instead!")]] float& dyn_ringSpacing();
    // Get instance field reference: public System.Boolean combineSegmentsInInnermostRing
    [[deprecated("Use field access instead!")]] bool& dyn_combineSegmentsInInnermostRing();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // Get instance field reference: public System.Single maxDistBetweenClusters
    [[deprecated("Use field access instead!")]] float& dyn_maxDistBetweenClusters();
    // Get instance field reference: public System.Boolean includeCellsWithOnlyOneRenderer
    [[deprecated("Use field access instead!")]] bool& dyn_includeCellsWithOnlyOneRenderer();
    // public System.Void .ctor()
    // Offset: 0xC16C24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrouperData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::GrouperData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrouperData*, creationType>()));
    }
  }; // DigitalOpus.MB.Core.GrouperData
  #pragma pack(pop)
  static check_size<sizeof(GrouperData), 76 + sizeof(bool)> __DigitalOpus_MB_Core_GrouperDataSizeCheck;
  static_assert(sizeof(GrouperData) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::GrouperData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
