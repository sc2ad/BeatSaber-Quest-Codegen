// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB_TextureArrays
#include "DigitalOpus/MB/Core/MB_TextureArrays.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: DigitalOpus.MB.Core.MB3_TextureCombiner
#include "DigitalOpus/MB/Core/MB3_TextureCombiner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: ProgressUpdateDelegate
  class ProgressUpdateDelegate;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: CombineTexturesIntoAtlasesCoroutineResult
  class MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_MultiMaterialTexArray
  class MB_MultiMaterialTexArray;
  // Forward declaring type: MB_TextureArrayResultMaterial
  class MB_TextureArrayResultMaterial;
  // Forward declaring type: MB_TextureArrayFormatSet
  class MB_TextureArrayFormatSet;
  // Forward declaring type: MB_TexArraySlice
  class MB_TexArraySlice;
  // Forward declaring type: MB_TexArraySliceRendererMatPair
  class MB_TexArraySliceRendererMatPair;
  // Forward declaring type: MB_AtlasesAndRects
  class MB_AtlasesAndRects;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6);
DEFINE_IL2CPP_ARG_TYPE(::DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*, "DigitalOpus.MB.Core", "MB_TextureArrays/<_CreateAtlasesCoroutineSingleResultMaterial>d__6");
// Type namespace: DigitalOpus.MB.Core
namespace DigitalOpus::MB::Core {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: DigitalOpus.MB.Core.MB_TextureArrays/DigitalOpus.MB.Core.<_CreateAtlasesCoroutineSingleResultMaterial>d__6
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public DigitalOpus.MB.Core.MB3_TextureCombiner combiner
    // Size: 0x8
    // Offset: 0x20
    ::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner*) == 0x8);
    // public System.Int32 resMatIdx
    // Size: 0x4
    // Offset: 0x28
    int resMatIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: resMatIdx and: resMatConfig
    char __padding3[0x4] = {};
    // public MB_MultiMaterialTexArray resMatConfig
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MB_MultiMaterialTexArray* resMatConfig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB_MultiMaterialTexArray*) == 0x8);
    // public MB_TextureArrayResultMaterial bakedMatsAndSlicesResMat
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MB_TextureArrayResultMaterial* bakedMatsAndSlicesResMat;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB_TextureArrayResultMaterial*) == 0x8);
    // public DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo
    // Size: 0x8
    // Offset: 0x40
    ::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::ProgressUpdateDelegate*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> texPropNamesToIgnore
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::StringW>* texPropNamesToIgnore;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods
    // Size: 0x8
    // Offset: 0x58
    ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*) == 0x8);
    // public System.Single maxTimePerFrame
    // Size: 0x4
    // Offset: 0x60
    float maxTimePerFrame;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxTimePerFrame and: coroutineResult
    char __padding10[0x4] = {};
    // public DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CreateAtlasesCoroutineResult coroutineResult
    // Size: 0x8
    // Offset: 0x68
    ::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult* coroutineResult;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult*) == 0x8);
    // public System.Boolean saveAtlasesAsAssets
    // Size: 0x1
    // Offset: 0x70
    bool saveAtlasesAsAssets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: saveAtlasesAsAssets and: customShaderProperties
    char __padding12[0x7] = {};
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> customShaderProperties
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* customShaderProperties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*) == 0x8);
    // public MB_TextureArrayFormatSet[] textureArrayOutputFormats
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::GlobalNamespace::MB_TextureArrayFormatSet*> textureArrayOutputFormats;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_TextureArrayFormatSet*>) == 0x8);
    // private DigitalOpus.MB.Core.MB2_LogLevel <LOG_LEVEL>5__2
    // Size: 0x4
    // Offset: 0x88
    ::DigitalOpus::MB::Core::MB2_LogLevel $LOG_LEVEL$5__2;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: $LOG_LEVEL$5__2 and: $generatedTemporaryAtlases$5__3
    char __padding15[0x4] = {};
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.TemporaryTexture> <generatedTemporaryAtlases>5__3
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>* $generatedTemporaryAtlases$5__3;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>*) == 0x8);
    // private System.Collections.Generic.List`1<MB_TexArraySlice> <slicesConfig>5__4
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySlice*>* $slicesConfig$5__4;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySlice*>*) == 0x8);
    // private System.Int32 <sliceIdx>5__5
    // Size: 0x4
    // Offset: 0xA0
    int $sliceIdx$5__5;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $sliceIdx$5__5 and: $srcMatAndObjPairs$5__6
    char __padding18[0x4] = {};
    // private System.Collections.Generic.List`1<MB_TexArraySliceRendererMatPair> <srcMatAndObjPairs>5__6
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>* $srcMatAndObjPairs$5__6;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>*) == 0x8);
    // private DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult <coroutineResult2>5__7
    // Size: 0x8
    // Offset: 0xB0
    ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult* $coroutineResult2$5__7;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*) == 0x8);
    // private MB_AtlasesAndRects <sliceAtlasesAndRectOutput>5__8
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::MB_AtlasesAndRects* $sliceAtlasesAndRectOutput$5__8;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB_AtlasesAndRects*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombiner combiner
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner*& dyn_combiner();
    // Get instance field reference: public System.Int32 resMatIdx
    [[deprecated("Use field access instead!")]] int& dyn_resMatIdx();
    // Get instance field reference: public MB_MultiMaterialTexArray resMatConfig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB_MultiMaterialTexArray*& dyn_resMatConfig();
    // Get instance field reference: public MB_TextureArrayResultMaterial bakedMatsAndSlicesResMat
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB_TextureArrayResultMaterial*& dyn_bakedMatsAndSlicesResMat();
    // Get instance field reference: public DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::ProgressUpdateDelegate*& dyn_progressInfo();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_objsToMesh();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> texPropNamesToIgnore
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_texPropNamesToIgnore();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*& dyn_editorMethods();
    // Get instance field reference: public System.Single maxTimePerFrame
    [[deprecated("Use field access instead!")]] float& dyn_maxTimePerFrame();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CreateAtlasesCoroutineResult coroutineResult
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner::CreateAtlasesCoroutineResult*& dyn_coroutineResult();
    // Get instance field reference: public System.Boolean saveAtlasesAsAssets
    [[deprecated("Use field access instead!")]] bool& dyn_saveAtlasesAsAssets();
    // Get instance field reference: public System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> customShaderProperties
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*& dyn_customShaderProperties();
    // Get instance field reference: public MB_TextureArrayFormatSet[] textureArrayOutputFormats
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_TextureArrayFormatSet*>& dyn_textureArrayOutputFormats();
    // Get instance field reference: private DigitalOpus.MB.Core.MB2_LogLevel <LOG_LEVEL>5__2
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_$LOG_LEVEL$5__2();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.TemporaryTexture> <generatedTemporaryAtlases>5__3
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB3_TextureCombiner::TemporaryTexture*>*& dyn_$generatedTemporaryAtlases$5__3();
    // Get instance field reference: private System.Collections.Generic.List`1<MB_TexArraySlice> <slicesConfig>5__4
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySlice*>*& dyn_$slicesConfig$5__4();
    // Get instance field reference: private System.Int32 <sliceIdx>5__5
    [[deprecated("Use field access instead!")]] int& dyn_$sliceIdx$5__5();
    // Get instance field reference: private System.Collections.Generic.List`1<MB_TexArraySliceRendererMatPair> <srcMatAndObjPairs>5__6
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>*& dyn_$srcMatAndObjPairs$5__6();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombiner/DigitalOpus.MB.Core.CombineTexturesIntoAtlasesCoroutineResult <coroutineResult2>5__7
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombiner_CombineTexturesIntoAtlasesCoroutineResult*& dyn_$coroutineResult2$5__7();
    // Get instance field reference: private MB_AtlasesAndRects <sliceAtlasesAndRectOutput>5__8
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB_AtlasesAndRects*& dyn_$sliceAtlasesAndRectOutput$5__8();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0x11B5F5C
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x11B5FC4
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0x11B4304
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x11B4338
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0x11B433C
    bool MoveNext();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0x11B5F64
    void System_Collections_IEnumerator_Reset();
  }; // DigitalOpus.MB.Core.MB_TextureArrays/DigitalOpus.MB.Core.<_CreateAtlasesCoroutineSingleResultMaterial>d__6
  #pragma pack(pop)
  static check_size<sizeof(MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6), 184 + sizeof(::GlobalNamespace::MB_AtlasesAndRects*)> __DigitalOpus_MB_Core_MB_TextureArrays_$_CreateAtlasesCoroutineSingleResultMaterial$d__6SizeCheck;
  static_assert(sizeof(MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::*)()>(&DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::*)()>(&DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::*)()>(&DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::*)()>(&DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::*)()>(&DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DigitalOpus::MB::Core::MB_TextureArrays::$_CreateAtlasesCoroutineSingleResultMaterial$d__6*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
