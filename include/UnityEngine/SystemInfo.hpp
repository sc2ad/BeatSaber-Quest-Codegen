// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: OperatingSystemFamily
  struct OperatingSystemFamily;
  // Forward declaring type: DeviceType
  struct DeviceType;
  // Forward declaring type: RenderTextureFormat
  struct RenderTextureFormat;
  // Forward declaring type: TextureFormat
  struct TextureFormat;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: GraphicsDeviceType
  struct GraphicsDeviceType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
}
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: GraphicsFormat
  struct GraphicsFormat;
  // Forward declaring type: FormatUsage
  struct FormatUsage;
  // Forward declaring type: DefaultFormat
  struct DefaultFormat;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SystemInfo
  class SystemInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::SystemInfo);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SystemInfo*, "UnityEngine", "SystemInfo");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.SystemInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 108EA8C
  // [NativeHeaderAttribute] Offset: 108EA8C
  // [NativeHeaderAttribute] Offset: 108EA8C
  // [NativeHeaderAttribute] Offset: 108EA8C
  // [NativeHeaderAttribute] Offset: 108EA8C
  // [NativeHeaderAttribute] Offset: 108EA8C
  class SystemInfo : public ::Il2CppObject {
    public:
    // static public System.String get_operatingSystem()
    // Offset: 0x28A4858
    static ::StringW get_operatingSystem();
    // static public UnityEngine.OperatingSystemFamily get_operatingSystemFamily()
    // Offset: 0x28A48C0
    static ::UnityEngine::OperatingSystemFamily get_operatingSystemFamily();
    // static public System.String get_processorType()
    // Offset: 0x28A4928
    static ::StringW get_processorType();
    // static public System.Int32 get_processorCount()
    // Offset: 0x28A4990
    static int get_processorCount();
    // static public System.Int32 get_systemMemorySize()
    // Offset: 0x28A49F8
    static int get_systemMemorySize();
    // static public UnityEngine.DeviceType get_deviceType()
    // Offset: 0x28A4A60
    static ::UnityEngine::DeviceType get_deviceType();
    // static public System.Int32 get_graphicsMemorySize()
    // Offset: 0x28A4AC8
    static int get_graphicsMemorySize();
    // static public System.String get_graphicsDeviceName()
    // Offset: 0x28A4B30
    static ::StringW get_graphicsDeviceName();
    // static public UnityEngine.Rendering.GraphicsDeviceType get_graphicsDeviceType()
    // Offset: 0x28A4B98
    static ::UnityEngine::Rendering::GraphicsDeviceType get_graphicsDeviceType();
    // static public System.String get_graphicsDeviceVersion()
    // Offset: 0x28A4C00
    static ::StringW get_graphicsDeviceVersion();
    // static public System.Int32 get_graphicsShaderLevel()
    // Offset: 0x28A4C68
    static int get_graphicsShaderLevel();
    // static public System.Boolean get_supportsInstancing()
    // Offset: 0x28A4CD0
    static bool get_supportsInstancing();
    // static public System.Boolean get_usesReversedZBuffer()
    // Offset: 0x28A4D38
    static bool get_usesReversedZBuffer();
    // static public System.Int32 get_maxTextureSize()
    // Offset: 0x28A5048
    static int get_maxTextureSize();
    // static private System.Boolean IsValidEnumValue(System.Enum value)
    // Offset: 0x28A4DA0
    static bool IsValidEnumValue(::System::Enum* value);
    // static public System.Boolean SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat format)
    // Offset: 0x28A4E28
    static bool SupportsRenderTextureFormat(::UnityEngine::RenderTextureFormat format);
    // static public System.Boolean SupportsTextureFormat(UnityEngine.TextureFormat format)
    // Offset: 0x28A4F38
    static bool SupportsTextureFormat(::UnityEngine::TextureFormat format);
    // static private System.String GetOperatingSystem()
    // Offset: 0x28A488C
    static ::StringW GetOperatingSystem();
    // static private UnityEngine.OperatingSystemFamily GetOperatingSystemFamily()
    // Offset: 0x28A48F4
    static ::UnityEngine::OperatingSystemFamily GetOperatingSystemFamily();
    // static private System.String GetProcessorType()
    // Offset: 0x28A495C
    static ::StringW GetProcessorType();
    // static private System.Int32 GetProcessorCount()
    // Offset: 0x28A49C4
    static int GetProcessorCount();
    // static private System.Int32 GetPhysicalMemoryMB()
    // Offset: 0x28A4A2C
    static int GetPhysicalMemoryMB();
    // static private UnityEngine.DeviceType GetDeviceType()
    // Offset: 0x28A4A94
    static ::UnityEngine::DeviceType GetDeviceType();
    // static private System.Int32 GetGraphicsMemorySize()
    // Offset: 0x28A4AFC
    static int GetGraphicsMemorySize();
    // static private System.String GetGraphicsDeviceName()
    // Offset: 0x28A4B64
    static ::StringW GetGraphicsDeviceName();
    // static private UnityEngine.Rendering.GraphicsDeviceType GetGraphicsDeviceType()
    // Offset: 0x28A4BCC
    static ::UnityEngine::Rendering::GraphicsDeviceType GetGraphicsDeviceType();
    // static private System.String GetGraphicsDeviceVersion()
    // Offset: 0x28A4C34
    static ::StringW GetGraphicsDeviceVersion();
    // static private System.Int32 GetGraphicsShaderLevel()
    // Offset: 0x28A4C9C
    static int GetGraphicsShaderLevel();
    // static private System.Boolean SupportsInstancing()
    // Offset: 0x28A4D04
    static bool SupportsInstancing();
    // static private System.Boolean UsesReversedZBuffer()
    // Offset: 0x28A4D6C
    static bool UsesReversedZBuffer();
    // static private System.Boolean HasRenderTextureNative(UnityEngine.RenderTextureFormat format)
    // Offset: 0x28A4EF8
    static bool HasRenderTextureNative(::UnityEngine::RenderTextureFormat format);
    // static private System.Boolean SupportsTextureFormatNative(UnityEngine.TextureFormat format)
    // Offset: 0x28A5008
    static bool SupportsTextureFormatNative(::UnityEngine::TextureFormat format);
    // static private System.Int32 GetMaxTextureSize()
    // Offset: 0x28A507C
    static int GetMaxTextureSize();
    // static public System.Boolean IsFormatSupported(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x28A50B0
    static bool IsFormatSupported(::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::FormatUsage usage);
    // static public UnityEngine.Experimental.Rendering.GraphicsFormat GetCompatibleFormat(UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.FormatUsage usage)
    // Offset: 0x28A5100
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat GetCompatibleFormat(::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::FormatUsage usage);
    // static public UnityEngine.Experimental.Rendering.GraphicsFormat GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat format)
    // Offset: 0x28A5150
    static ::UnityEngine::Experimental::Rendering::GraphicsFormat GetGraphicsFormat(::UnityEngine::Experimental::Rendering::DefaultFormat format);
  }; // UnityEngine.SystemInfo
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_operatingSystem
// Il2CppName: get_operatingSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::get_operatingSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_operatingSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_operatingSystemFamily
// Il2CppName: get_operatingSystemFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::OperatingSystemFamily (*)()>(&UnityEngine::SystemInfo::get_operatingSystemFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_operatingSystemFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_processorType
// Il2CppName: get_processorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::get_processorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_processorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_processorCount
// Il2CppName: get_processorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::get_processorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_processorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_systemMemorySize
// Il2CppName: get_systemMemorySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::get_systemMemorySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_systemMemorySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_deviceType
// Il2CppName: get_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::DeviceType (*)()>(&UnityEngine::SystemInfo::get_deviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_graphicsMemorySize
// Il2CppName: get_graphicsMemorySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::get_graphicsMemorySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_graphicsMemorySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_graphicsDeviceName
// Il2CppName: get_graphicsDeviceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::get_graphicsDeviceName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_graphicsDeviceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_graphicsDeviceType
// Il2CppName: get_graphicsDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::GraphicsDeviceType (*)()>(&UnityEngine::SystemInfo::get_graphicsDeviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_graphicsDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_graphicsDeviceVersion
// Il2CppName: get_graphicsDeviceVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::get_graphicsDeviceVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_graphicsDeviceVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_graphicsShaderLevel
// Il2CppName: get_graphicsShaderLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::get_graphicsShaderLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_graphicsShaderLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_supportsInstancing
// Il2CppName: get_supportsInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::SystemInfo::get_supportsInstancing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_supportsInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_usesReversedZBuffer
// Il2CppName: get_usesReversedZBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::SystemInfo::get_usesReversedZBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_usesReversedZBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::get_maxTextureSize
// Il2CppName: get_maxTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::get_maxTextureSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "get_maxTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::IsValidEnumValue
// Il2CppName: IsValidEnumValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Enum*)>(&UnityEngine::SystemInfo::IsValidEnumValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Enum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "IsValidEnumValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::SupportsRenderTextureFormat
// Il2CppName: SupportsRenderTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::RenderTextureFormat)>(&UnityEngine::SystemInfo::SupportsRenderTextureFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "SupportsRenderTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::SupportsTextureFormat
// Il2CppName: SupportsTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::TextureFormat)>(&UnityEngine::SystemInfo::SupportsTextureFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "SupportsTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetOperatingSystem
// Il2CppName: GetOperatingSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::GetOperatingSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetOperatingSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetOperatingSystemFamily
// Il2CppName: GetOperatingSystemFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::OperatingSystemFamily (*)()>(&UnityEngine::SystemInfo::GetOperatingSystemFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetOperatingSystemFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetProcessorType
// Il2CppName: GetProcessorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::GetProcessorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetProcessorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetProcessorCount
// Il2CppName: GetProcessorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::GetProcessorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetProcessorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetPhysicalMemoryMB
// Il2CppName: GetPhysicalMemoryMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::GetPhysicalMemoryMB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetPhysicalMemoryMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetDeviceType
// Il2CppName: GetDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::DeviceType (*)()>(&UnityEngine::SystemInfo::GetDeviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsMemorySize
// Il2CppName: GetGraphicsMemorySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::GetGraphicsMemorySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsMemorySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsDeviceName
// Il2CppName: GetGraphicsDeviceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::GetGraphicsDeviceName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsDeviceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsDeviceType
// Il2CppName: GetGraphicsDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rendering::GraphicsDeviceType (*)()>(&UnityEngine::SystemInfo::GetGraphicsDeviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsDeviceVersion
// Il2CppName: GetGraphicsDeviceVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&UnityEngine::SystemInfo::GetGraphicsDeviceVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsDeviceVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsShaderLevel
// Il2CppName: GetGraphicsShaderLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::GetGraphicsShaderLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsShaderLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::SupportsInstancing
// Il2CppName: SupportsInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::SystemInfo::SupportsInstancing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "SupportsInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::UsesReversedZBuffer
// Il2CppName: UsesReversedZBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::SystemInfo::UsesReversedZBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "UsesReversedZBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::HasRenderTextureNative
// Il2CppName: HasRenderTextureNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::RenderTextureFormat)>(&UnityEngine::SystemInfo::HasRenderTextureNative)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "HasRenderTextureNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::SupportsTextureFormatNative
// Il2CppName: SupportsTextureFormatNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::TextureFormat)>(&UnityEngine::SystemInfo::SupportsTextureFormatNative)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "SupportsTextureFormatNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetMaxTextureSize
// Il2CppName: GetMaxTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::SystemInfo::GetMaxTextureSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetMaxTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::IsFormatSupported
// Il2CppName: IsFormatSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::SystemInfo::IsFormatSupported)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "IsFormatSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetCompatibleFormat
// Il2CppName: GetCompatibleFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)(::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::FormatUsage)>(&UnityEngine::SystemInfo::GetCompatibleFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "FormatUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetCompatibleFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::SystemInfo::GetGraphicsFormat
// Il2CppName: GetGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::GraphicsFormat (*)(::UnityEngine::Experimental::Rendering::DefaultFormat)>(&UnityEngine::SystemInfo::GetGraphicsFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "DefaultFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SystemInfo*), "GetGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
