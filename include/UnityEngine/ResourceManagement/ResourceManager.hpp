// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle_1.hpp"
// Including type: UnityEngine.ResourceManagement.ResourceProviders.SceneInstance
#include "UnityEngine/ResourceManagement/ResourceProviders/SceneInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: CertificateHandler
  class CertificateHandler;
}
// Forward declaring namespace: UnityEngine::ResourceManagement
namespace UnityEngine::ResourceManagement {
  // Forward declaring type: IUpdateReceiver
  class IUpdateReceiver;
  // Skipping declaration: DiagnosticEventContext because it is already included!
}
// Forward declaring namespace: UnityEngine::ResourceManagement::ResourceLocations
namespace UnityEngine::ResourceManagement::ResourceLocations {
  // Forward declaring type: IResourceLocation
  class IResourceLocation;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ListWithEvents`1<T>
  template<typename T>
  class ListWithEvents_1;
  // Forward declaring type: DelegateList`1<T>
  template<typename T>
  class DelegateList_1;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::ResourceProviders
namespace UnityEngine::ResourceManagement::ResourceProviders {
  // Forward declaring type: IResourceProvider
  class IResourceProvider;
  // Forward declaring type: ISceneProvider
  class ISceneProvider;
  // Forward declaring type: IInstanceProvider
  class IInstanceProvider;
  // Forward declaring type: InstantiationParameters
  struct InstantiationParameters;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::Util
namespace UnityEngine::ResourceManagement::Util {
  // Forward declaring type: IAllocationStrategy
  class IAllocationStrategy;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::AsyncOperations
namespace UnityEngine::ResourceManagement::AsyncOperations {
  // Forward declaring type: IAsyncOperation
  class IAsyncOperation;
  // Forward declaring type: AsyncOperationBase`1<TObject>
  template<typename TObject>
  class AsyncOperationBase_1;
  // Forward declaring type: GroupOperation
  class GroupOperation;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
  // Skipping declaration: Scene because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.ResourceManagement
namespace UnityEngine::ResourceManagement {
  // Forward declaring type: ResourceManager
  class ResourceManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ResourceManagement::ResourceManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::ResourceManager*, "UnityEngine.ResourceManagement", "ResourceManager");
// Type namespace: UnityEngine.ResourceManagement
namespace UnityEngine::ResourceManagement {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ResourceManagement.ResourceManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ResourceManager : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType
    struct DiagnosticEventType;
    // Nested type: ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext
    struct DiagnosticEventContext;
    // Nested type: ::UnityEngine::ResourceManagement::ResourceManager::CompletedOperation_1<TObject>
    template<typename TObject>
    class CompletedOperation_1;
    // Nested type: ::UnityEngine::ResourceManagement::ResourceManager::InstanceOperation
    class InstanceOperation;
    // Nested type: ::UnityEngine::ResourceManagement::ResourceManager::$$c__DisplayClass83_0_1<TObject>
    template<typename TObject>
    class $$c__DisplayClass83_0_1;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DiagnosticEventType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DiagnosticEventType
      constexpr DiagnosticEventType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationFail
      static constexpr const int AsyncOperationFail = 0;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationFail
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationFail();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationFail
      static void _set_AsyncOperationFail(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationCreate
      static constexpr const int AsyncOperationCreate = 1;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationCreate
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationCreate();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationCreate
      static void _set_AsyncOperationCreate(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationPercentComplete
      static constexpr const int AsyncOperationPercentComplete = 2;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationPercentComplete
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationPercentComplete();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationPercentComplete
      static void _set_AsyncOperationPercentComplete(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationComplete
      static constexpr const int AsyncOperationComplete = 3;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationComplete
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationComplete();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationComplete
      static void _set_AsyncOperationComplete(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationReferenceCount
      static constexpr const int AsyncOperationReferenceCount = 4;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationReferenceCount
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationReferenceCount();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationReferenceCount
      static void _set_AsyncOperationReferenceCount(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // static field const value: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationDestroy
      static constexpr const int AsyncOperationDestroy = 5;
      // Get static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationDestroy
      static ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType _get_AsyncOperationDestroy();
      // Set static field: static public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType AsyncOperationDestroy
      static void _set_AsyncOperationDestroy(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType
    #pragma pack(pop)
    static check_size<sizeof(ResourceManager::DiagnosticEventType), 0 + sizeof(int)> __UnityEngine_ResourceManagement_ResourceManager_DiagnosticEventTypeSizeCheck;
    static_assert(sizeof(ResourceManager::DiagnosticEventType) == 0x4);
    // Size: 0x38
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext
    // [TokenAttribute] Offset: FFFFFFFF
    struct DiagnosticEventContext/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle <OperationHandle>k__BackingField
      // Size: 0x18
      // Offset: 0x0
      ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle OperationHandle;
      // Field size check
      static_assert(sizeof(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle) == 0x18);
      // private readonly UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType <Type>k__BackingField
      // Size: 0x4
      // Offset: 0x18
      ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType Type;
      // Field size check
      static_assert(sizeof(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType) == 0x4);
      // private readonly System.Int32 <EventValue>k__BackingField
      // Size: 0x4
      // Offset: 0x1C
      int EventValue;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private readonly UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation <Location>k__BackingField
      // Size: 0x8
      // Offset: 0x20
      ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* Location;
      // Field size check
      static_assert(sizeof(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*) == 0x8);
      // private readonly System.Object <Context>k__BackingField
      // Size: 0x8
      // Offset: 0x28
      ::Il2CppObject* Context;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // private readonly System.String <Error>k__BackingField
      // Size: 0x8
      // Offset: 0x30
      ::StringW Error;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: DiagnosticEventContext
      constexpr DiagnosticEventContext(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle OperationHandle_ = {}, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType Type_ = {}, int EventValue_ = {}, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* Location_ = {}, ::Il2CppObject* Context_ = {}, ::StringW Error_ = {}) noexcept : OperationHandle{OperationHandle_}, Type{Type_}, EventValue{EventValue_}, Location{Location_}, Context{Context_}, Error{Error_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle <OperationHandle>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle& dyn_$OperationHandle$k__BackingField();
      // Get instance field reference: private readonly UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType <Type>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType& dyn_$Type$k__BackingField();
      // Get instance field reference: private readonly System.Int32 <EventValue>k__BackingField
      [[deprecated("Use field access instead!")]] int& dyn_$EventValue$k__BackingField();
      // Get instance field reference: private readonly UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation <Location>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*& dyn_$Location$k__BackingField();
      // Get instance field reference: private readonly System.Object <Context>k__BackingField
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Context$k__BackingField();
      // Get instance field reference: private readonly System.String <Error>k__BackingField
      [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField();
      // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle get_OperationHandle()
      // Offset: 0x1EED9DC
      ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle get_OperationHandle();
      // public UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType get_Type()
      // Offset: 0x1EED9F0
      ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType get_Type();
      // public System.Int32 get_EventValue()
      // Offset: 0x1EED9F8
      int get_EventValue();
      // public UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation get_Location()
      // Offset: 0x1EEDA00
      ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* get_Location();
      // public System.Object get_Context()
      // Offset: 0x1EEDA08
      ::Il2CppObject* get_Context();
      // public System.String get_Error()
      // Offset: 0x1EEDA10
      ::StringW get_Error();
      // public System.Void .ctor(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle op, UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType type, System.Int32 eventValue, System.String error, System.Object context)
      // Offset: 0x1EEDA18
      DiagnosticEventContext(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle op, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType type, int eventValue, ::StringW error, ::Il2CppObject* context);
    }; // UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext
    #pragma pack(pop)
    static check_size<sizeof(ResourceManager::DiagnosticEventContext), 48 + sizeof(::StringW)> __UnityEngine_ResourceManagement_ResourceManager_DiagnosticEventContextSizeCheck;
    static_assert(sizeof(ResourceManager::DiagnosticEventContext) == 0x38);
    public:
    // System.Boolean postProfilerEvents
    // Size: 0x1
    // Offset: 0x10
    bool postProfilerEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: postProfilerEvents and: InternalIdTransformFunc
    char __padding0[0x7] = {};
    // private System.Func`2<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.String> <InternalIdTransformFunc>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>* InternalIdTransformFunc;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>*) == 0x8);
    // System.Boolean CallbackHooksEnabled
    // Size: 0x1
    // Offset: 0x20
    bool CallbackHooksEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CallbackHooksEnabled and: m_ResourceProviders
    char __padding2[0x7] = {};
    // private ListWithEvents`1<UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider> m_ResourceProviders
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>* m_ResourceProviders;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>*) == 0x8);
    // private UnityEngine.ResourceManagement.Util.IAllocationStrategy m_allocator
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ResourceManagement::Util::IAllocationStrategy* m_allocator;
    // Field size check
    static_assert(sizeof(::UnityEngine::ResourceManagement::Util::IAllocationStrategy*) == 0x8);
    // private ListWithEvents`1<UnityEngine.ResourceManagement.IUpdateReceiver> m_UpdateReceivers
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>* m_UpdateReceivers;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.IUpdateReceiver> m_UpdateReceiversToRemove
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>* m_UpdateReceiversToRemove;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>*) == 0x8);
    // private System.Boolean m_UpdatingReceivers
    // Size: 0x1
    // Offset: 0x48
    bool m_UpdatingReceivers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UpdatingReceivers and: m_providerMap
    char __padding7[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider> m_providerMap
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>* m_providerMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_AssetOperationCache
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* m_AssetOperationCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.InstanceOperation> m_TrackedInstanceOperations
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::HashSet_1<::UnityEngine::ResourceManagement::ResourceManager::InstanceOperation*>* m_TrackedInstanceOperations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::ResourceManagement::ResourceManager::InstanceOperation*>*) == 0x8);
    // private DelegateList`1<System.Single> m_UpdateCallbacks
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::DelegateList_1<float>* m_UpdateCallbacks;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DelegateList_1<float>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_DeferredCompleteCallbacks
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* m_DeferredCompleteCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*) == 0x8);
    // private System.Action`4<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType,System.Int32,System.Object> m_obsoleteDiagnosticsHandler
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_4<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, int, ::Il2CppObject*>* m_obsoleteDiagnosticsHandler;
    // Field size check
    static_assert(sizeof(::System::Action_4<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, int, ::Il2CppObject*>*) == 0x8);
    // private System.Action`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext> m_diagnosticsHandler
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>* m_diagnosticsHandler;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>*) == 0x8);
    // private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseOpNonCached
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* m_ReleaseOpNonCached;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*) == 0x8);
    // private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseOpCached
    // Size: 0x8
    // Offset: 0x90
    ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* m_ReleaseOpCached;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*) == 0x8);
    // private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseInstanceOp
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* m_ReleaseInstanceOp;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*) == 0x8);
    // private UnityEngine.Networking.CertificateHandler <CertificateHandlerInstance>k__BackingField
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Networking::CertificateHandler* CertificateHandlerInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::CertificateHandler*) == 0x8);
    // private System.Boolean m_RegisteredForCallbacks
    // Size: 0x1
    // Offset: 0xA8
    bool m_RegisteredForCallbacks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RegisteredForCallbacks and: m_ProviderOperationTypeCache
    char __padding19[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Type,System.Type> m_ProviderOperationTypeCache
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>* m_ProviderOperationTypeCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Action`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Exception> <ExceptionHandler>k__BackingField
    static ::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>* _get_$ExceptionHandler$k__BackingField();
    // Set static field: static private System.Action`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Exception> <ExceptionHandler>k__BackingField
    static void _set_$ExceptionHandler$k__BackingField(::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>* value);
    // Get static field: static private System.Int32 s_GroupOperationTypeHash
    static int _get_s_GroupOperationTypeHash();
    // Set static field: static private System.Int32 s_GroupOperationTypeHash
    static void _set_s_GroupOperationTypeHash(int value);
    // Get static field: static private System.Int32 s_InstanceOperationTypeHash
    static int _get_s_InstanceOperationTypeHash();
    // Set static field: static private System.Int32 s_InstanceOperationTypeHash
    static void _set_s_InstanceOperationTypeHash(int value);
    // Get instance field reference: System.Boolean postProfilerEvents
    [[deprecated("Use field access instead!")]] bool& dyn_postProfilerEvents();
    // Get instance field reference: private System.Func`2<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.String> <InternalIdTransformFunc>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>*& dyn_$InternalIdTransformFunc$k__BackingField();
    // Get instance field reference: System.Boolean CallbackHooksEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_CallbackHooksEnabled();
    // Get instance field reference: private ListWithEvents`1<UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider> m_ResourceProviders
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>*& dyn_m_ResourceProviders();
    // Get instance field reference: private UnityEngine.ResourceManagement.Util.IAllocationStrategy m_allocator
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::Util::IAllocationStrategy*& dyn_m_allocator();
    // Get instance field reference: private ListWithEvents`1<UnityEngine.ResourceManagement.IUpdateReceiver> m_UpdateReceivers
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ListWithEvents_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>*& dyn_m_UpdateReceivers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.IUpdateReceiver> m_UpdateReceiversToRemove
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::IUpdateReceiver*>*& dyn_m_UpdateReceiversToRemove();
    // Get instance field reference: private System.Boolean m_UpdatingReceivers
    [[deprecated("Use field access instead!")]] bool& dyn_m_UpdatingReceivers();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider> m_providerMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>*& dyn_m_providerMap();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_AssetOperationCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*& dyn_m_AssetOperationCache();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.InstanceOperation> m_TrackedInstanceOperations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::ResourceManagement::ResourceManager::InstanceOperation*>*& dyn_m_TrackedInstanceOperations();
    // Get instance field reference: private DelegateList`1<System.Single> m_UpdateCallbacks
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DelegateList_1<float>*& dyn_m_UpdateCallbacks();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_DeferredCompleteCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*& dyn_m_DeferredCompleteCallbacks();
    // Get instance field reference: private System.Action`4<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType,System.Int32,System.Object> m_obsoleteDiagnosticsHandler
    [[deprecated("Use field access instead!")]] ::System::Action_4<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, int, ::Il2CppObject*>*& dyn_m_obsoleteDiagnosticsHandler();
    // Get instance field reference: private System.Action`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext> m_diagnosticsHandler
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>*& dyn_m_diagnosticsHandler();
    // Get instance field reference: private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseOpNonCached
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*& dyn_m_ReleaseOpNonCached();
    // Get instance field reference: private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseOpCached
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*& dyn_m_ReleaseOpCached();
    // Get instance field reference: private System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> m_ReleaseInstanceOp
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>*& dyn_m_ReleaseInstanceOp();
    // Get instance field reference: private UnityEngine.Networking.CertificateHandler <CertificateHandlerInstance>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::CertificateHandler*& dyn_$CertificateHandlerInstance$k__BackingField();
    // Get instance field reference: private System.Boolean m_RegisteredForCallbacks
    [[deprecated("Use field access instead!")]] bool& dyn_m_RegisteredForCallbacks();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Type,System.Type> m_ProviderOperationTypeCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>*& dyn_m_ProviderOperationTypeCache();
    // static public System.Action`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Exception> get_ExceptionHandler()
    // Offset: 0x1EEA000
    static ::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>* get_ExceptionHandler();
    // static public System.Void set_ExceptionHandler(System.Action`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Exception> value)
    // Offset: 0x1EEA068
    static void set_ExceptionHandler(::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>* value);
    // public System.Func`2<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.String> get_InternalIdTransformFunc()
    // Offset: 0x1EEA0D4
    ::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>* get_InternalIdTransformFunc();
    // public System.Void set_InternalIdTransformFunc(System.Func`2<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.String> value)
    // Offset: 0x1EEA0DC
    void set_InternalIdTransformFunc(::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>* value);
    // System.Int32 get_OperationCacheCount()
    // Offset: 0x1EEA1C4
    int get_OperationCacheCount();
    // System.Int32 get_InstanceOperationCount()
    // Offset: 0x1EEA21C
    int get_InstanceOperationCount();
    // public UnityEngine.ResourceManagement.Util.IAllocationStrategy get_Allocator()
    // Offset: 0x1EEA3C4
    ::UnityEngine::ResourceManagement::Util::IAllocationStrategy* get_Allocator();
    // public System.Void set_Allocator(UnityEngine.ResourceManagement.Util.IAllocationStrategy value)
    // Offset: 0x1EEA3CC
    void set_Allocator(::UnityEngine::ResourceManagement::Util::IAllocationStrategy* value);
    // public System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider> get_ResourceProviders()
    // Offset: 0x1EEA3D4
    ::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>* get_ResourceProviders();
    // public UnityEngine.Networking.CertificateHandler get_CertificateHandlerInstance()
    // Offset: 0x1EEA3DC
    ::UnityEngine::Networking::CertificateHandler* get_CertificateHandlerInstance();
    // public System.Void set_CertificateHandlerInstance(UnityEngine.Networking.CertificateHandler value)
    // Offset: 0x1EEA3E4
    void set_CertificateHandlerInstance(::UnityEngine::Networking::CertificateHandler* value);
    // public System.Void .ctor(UnityEngine.ResourceManagement.Util.IAllocationStrategy alloc)
    // Offset: 0x1EEA3EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceManager* New_ctor(::UnityEngine::ResourceManagement::Util::IAllocationStrategy* alloc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceManager*, creationType>(alloc)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1EED90C
    static void _cctor();
    // public System.String TransformInternalId(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location)
    // Offset: 0x1EEA0E4
    ::StringW TransformInternalId(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location);
    // public System.Void AddUpdateReceiver(UnityEngine.ResourceManagement.IUpdateReceiver receiver)
    // Offset: 0x1EEA26C
    void AddUpdateReceiver(::UnityEngine::ResourceManagement::IUpdateReceiver* receiver);
    // public System.Void RemoveUpdateReciever(UnityEngine.ResourceManagement.IUpdateReceiver receiver)
    // Offset: 0x1EEA2E8
    void RemoveUpdateReciever(::UnityEngine::ResourceManagement::IUpdateReceiver* receiver);
    // private System.Void OnObjectAdded(System.Object obj)
    // Offset: 0x1EEA880
    void OnObjectAdded(::Il2CppObject* obj);
    // private System.Void OnObjectRemoved(System.Object obj)
    // Offset: 0x1EEA8FC
    void OnObjectRemoved(::Il2CppObject* obj);
    // System.Void RegisterForCallbacks()
    // Offset: 0x1EEA978
    void RegisterForCallbacks();
    // public System.Void ClearDiagnosticsCallback()
    // Offset: 0x1EEAA44
    void ClearDiagnosticsCallback();
    // public System.Void ClearDiagnosticCallbacks()
    // Offset: 0x1EEAA4C
    void ClearDiagnosticCallbacks();
    // public System.Void UnregisterDiagnosticCallback(System.Action`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext> func)
    // Offset: 0x1EEAA54
    void UnregisterDiagnosticCallback(::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>* func);
    // public System.Void RegisterDiagnosticCallback(System.Action`4<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventType,System.Int32,System.Object> func)
    // Offset: 0x1EEAB18
    void RegisterDiagnosticCallback(::System::Action_4<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, int, ::Il2CppObject*>* func);
    // public System.Void RegisterDiagnosticCallback(System.Action`1<UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext> func)
    // Offset: 0x1EEAB20
    void RegisterDiagnosticCallback(::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>* func);
    // System.Void PostDiagnosticEvent(UnityEngine.ResourceManagement.ResourceManager/UnityEngine.ResourceManagement.DiagnosticEventContext context)
    // Offset: 0x1EEABA0
    void PostDiagnosticEvent(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext context);
    // public UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider GetResourceProvider(System.Type t, UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location)
    // Offset: 0x1EEACF8
    ::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider* GetResourceProvider(::System::Type* t, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location);
    // private System.Type GetDefaultTypeForLocation(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation loc)
    // Offset: 0x1EEB148
    ::System::Type* GetDefaultTypeForLocation(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* loc);
    // private System.Int32 CalculateLocationsHash(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations, System.Type t)
    // Offset: 0x1EEB2A8
    int CalculateLocationsHash(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations, ::System::Type* t);
    // private UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle ProvideResource(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location, System.Type desiredType, System.Boolean releaseDependenciesOnFailure)
    // Offset: 0x1EEB66C
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle ProvideResource(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location, ::System::Type* desiredType, bool releaseDependenciesOnFailure);
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> ProvideResource(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> ProvideResource(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::ProvideResource");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProvideResource", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(location)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, location);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> StartOperation(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1<TObject> operation, UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle dependency)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> StartOperation(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationBase_1<TObject>* operation, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle dependency) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::StartOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operation), ::il2cpp_utils::ExtractType(dependency)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, operation, dependency);
    }
    // UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle StartOperation(UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation operation, UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle dependency)
    // Offset: 0x1EEC430
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle StartOperation(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* operation, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle dependency);
    // private System.Void OnInstanceOperationDestroy(UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation o)
    // Offset: 0x1EEC5B4
    void OnInstanceOperationDestroy(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* o);
    // private System.Void OnOperationDestroyNonCached(UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation o)
    // Offset: 0x1EEC6F8
    void OnOperationDestroyNonCached(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* o);
    // private System.Void OnOperationDestroyCached(UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation o)
    // Offset: 0x1EEC7E4
    void OnOperationDestroyCached(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* o);
    // T CreateOperation(System.Type actualType, System.Int32 typeHash, System.Int32 operationHash, System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation> onDestroyAction)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T CreateOperation(::System::Type* actualType, int typeHash, int operationHash, ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*>* onDestroyAction) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actualType), ::il2cpp_utils::ExtractType(typeHash), ::il2cpp_utils::ExtractType(operationHash), ::il2cpp_utils::ExtractType(onDestroyAction)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, actualType, typeHash, operationHash, onDestroyAction);
    }
    // System.Void AddOperationToCache(System.Int32 hash, UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation operation)
    // Offset: 0x1EEC9F4
    void AddOperationToCache(int hash, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* operation);
    // System.Boolean RemoveOperationFromCache(System.Int32 hash)
    // Offset: 0x1EEC968
    bool RemoveOperationFromCache(int hash);
    // System.Boolean IsOperationCached(System.Int32 hash)
    // Offset: 0x1EECA84
    bool IsOperationCached(int hash);
    // System.Int32 CachedOperationCount()
    // Offset: 0x1EECAEC
    int CachedOperationCount();
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateCompletedOperation(TObject result, System.String errorMsg)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateCompletedOperation(TObject result, ::StringW errorMsg) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateCompletedOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCompletedOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(errorMsg)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, result, errorMsg);
    }
    // UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateCompletedOperationInternal(TObject result, System.Boolean success, System.String errorMsg, System.Boolean releaseDependenciesOnFailure)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateCompletedOperationInternal(TObject result, bool success, ::StringW errorMsg, bool releaseDependenciesOnFailure) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateCompletedOperationInternal");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCompletedOperationInternal", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(success), ::il2cpp_utils::ExtractType(errorMsg), ::il2cpp_utils::ExtractType(releaseDependenciesOnFailure)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, result, success, errorMsg, releaseDependenciesOnFailure);
    }
    // public System.Void Release(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle handle)
    // Offset: 0x1EECB44
    void Release(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle handle);
    // public System.Void Acquire(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle handle)
    // Offset: 0x1EECB4C
    void Acquire(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle handle);
    // private UnityEngine.ResourceManagement.AsyncOperations.GroupOperation AcquireGroupOpFromCache(System.Int32 hash)
    // Offset: 0x1EECB70
    ::UnityEngine::ResourceManagement::AsyncOperations::GroupOperation* AcquireGroupOpFromCache(int hash);
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> CreateGroupOperation(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> CreateGroupOperation(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateGroupOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGroupOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locations)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*>, false>(this, ___generic__method, locations);
    }
    // UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> CreateGroupOperation(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations, System.Boolean allowFailedDependencies)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> CreateGroupOperation(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations, bool allowFailedDependencies) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateGroupOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGroupOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locations), ::il2cpp_utils::ExtractType(allowFailedDependencies)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*>, false>(this, ___generic__method, locations, allowFailedDependencies);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> CreateGenericGroupOperation(System.Collections.Generic.List`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle> operations, System.Boolean releasedCachedOpOnComplete)
    // Offset: 0x1EECCA4
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> CreateGenericGroupOperation(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>* operations, bool releasedCachedOpOnComplete);
    // UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle>> ProvideResourceGroupCached(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations, System.Int32 groupHash, System.Type desiredType, System.Action`1<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle> callback, System.Boolean releaseDependenciesOnFailure)
    // Offset: 0x1EEBE4C
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> ProvideResourceGroupCached(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations, int groupHash, ::System::Type* desiredType, ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>* callback, bool releaseDependenciesOnFailure);
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<TObject>> ProvideResources(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations, System.Action`1<TObject> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<TObject>*> ProvideResources(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations, ::System::Action_1<TObject>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::ProvideResources");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProvideResources", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locations), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<TObject>*>, false>(this, ___generic__method, locations, callback);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<System.Collections.Generic.IList`1<TObject>> ProvideResources(System.Collections.Generic.IList`1<UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation> locations, System.Boolean releaseDependenciesOnFailure, System.Action`1<TObject> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<TObject>*> ProvideResources(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>* locations, bool releaseDependenciesOnFailure, ::System::Action_1<TObject>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::ProvideResources");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProvideResources", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(locations), ::il2cpp_utils::ExtractType(releaseDependenciesOnFailure), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<TObject>*>, false>(this, ___generic__method, locations, releaseDependenciesOnFailure, callback);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateChainOperation(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObjectDependency> dependentOp, System.Func`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObjectDependency>,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject>> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject, class TObjectDependency>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateChainOperation(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObjectDependency> dependentOp, ::System::Func_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObjectDependency>, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChainOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObjectDependency>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dependentOp), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObjectDependency>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, dependentOp, callback);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateChainOperation(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle dependentOp, System.Func`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject>> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateChainOperation(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle dependentOp, ::System::Func_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChainOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dependentOp), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, dependentOp, callback);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateChainOperation(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObjectDependency> dependentOp, System.Func`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObjectDependency>,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject>> callback, System.Boolean releaseDependenciesOnFailure)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject, class TObjectDependency>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateChainOperation(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObjectDependency> dependentOp, ::System::Func_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObjectDependency>, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>>* callback, bool releaseDependenciesOnFailure) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChainOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObjectDependency>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dependentOp), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(releaseDependenciesOnFailure)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObjectDependency>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, dependentOp, callback, releaseDependenciesOnFailure);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject> CreateChainOperation(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle dependentOp, System.Func`2<UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<TObject>> callback, System.Boolean releaseDependenciesOnFailure)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject> CreateChainOperation(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle dependentOp, ::System::Func_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>>* callback, bool releaseDependenciesOnFailure) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChainOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dependentOp), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(releaseDependenciesOnFailure)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<TObject>, false>(this, ___generic__method, dependentOp, callback, releaseDependenciesOnFailure);
    }
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance> ProvideScene(UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider sceneProvider, UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location, UnityEngine.SceneManagement.LoadSceneMode loadMode, System.Boolean activateOnLoad, System.Int32 priority)
    // Offset: 0x1EECE04
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance> ProvideScene(::UnityEngine::ResourceManagement::ResourceProviders::ISceneProvider* sceneProvider, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location, ::UnityEngine::SceneManagement::LoadSceneMode loadMode, bool activateOnLoad, int priority);
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance> ReleaseScene(UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider sceneProvider, UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.ResourceManagement.ResourceProviders.SceneInstance> sceneLoadHandle)
    // Offset: 0x1EECF30
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance> ReleaseScene(::UnityEngine::ResourceManagement::ResourceProviders::ISceneProvider* sceneProvider, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance> sceneLoadHandle);
    // public UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.GameObject> ProvideInstance(UnityEngine.ResourceManagement.ResourceProviders.IInstanceProvider provider, UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation location, UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters instantiateParameters)
    // Offset: 0x1EED070
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> ProvideInstance(::UnityEngine::ResourceManagement::ResourceProviders::IInstanceProvider* provider, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* location, ::UnityEngine::ResourceManagement::ResourceProviders::InstantiationParameters instantiateParameters);
    // public System.Void CleanupSceneInstances(UnityEngine.SceneManagement.Scene scene)
    // Offset: 0x1EED300
    void CleanupSceneInstances(::UnityEngine::SceneManagement::Scene scene);
    // private System.Void ExecuteDeferredCallbacks()
    // Offset: 0x1EED5B4
    void ExecuteDeferredCallbacks();
    // System.Void RegisterForDeferredCallback(UnityEngine.ResourceManagement.AsyncOperations.IAsyncOperation op, System.Boolean incrementRefCount)
    // Offset: 0x1EED75C
    void RegisterForDeferredCallback(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation* op, bool incrementRefCount);
    // System.Void Update(System.Single unscaledDeltaTime)
    // Offset: 0x1EE7194
    void Update(float unscaledDeltaTime);
    // public System.Void Dispose()
    // Offset: 0x1EED844
    void Dispose();
    // private System.Void <.ctor>b__45_0(UnityEngine.ResourceManagement.IUpdateReceiver x)
    // Offset: 0x1EED9D8
    void $_ctor$b__45_0(::UnityEngine::ResourceManagement::IUpdateReceiver* x);
  }; // UnityEngine.ResourceManagement.ResourceManager
  #pragma pack(pop)
  static check_size<sizeof(ResourceManager), 176 + sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Type*>*)> __UnityEngine_ResourceManagement_ResourceManagerSizeCheck;
  static_assert(sizeof(ResourceManager) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext, "UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventContext");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, "UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_ExceptionHandler
// Il2CppName: get_ExceptionHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>* (*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_ExceptionHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_ExceptionHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::set_ExceptionHandler
// Il2CppName: set_ExceptionHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_2<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::System::Exception*>*)>(&UnityEngine::ResourceManagement::ResourceManager::set_ExceptionHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle"), ::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "set_ExceptionHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_InternalIdTransformFunc
// Il2CppName: get_InternalIdTransformFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>* (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_InternalIdTransformFunc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_InternalIdTransformFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::set_InternalIdTransformFunc
// Il2CppName: set_InternalIdTransformFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Func_2<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::StringW>*)>(&UnityEngine::ResourceManagement::ResourceManager::set_InternalIdTransformFunc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "set_InternalIdTransformFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_OperationCacheCount
// Il2CppName: get_OperationCacheCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_OperationCacheCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_OperationCacheCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_InstanceOperationCount
// Il2CppName: get_InstanceOperationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_InstanceOperationCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_InstanceOperationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_Allocator
// Il2CppName: get_Allocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::Util::IAllocationStrategy* (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_Allocator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_Allocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::set_Allocator
// Il2CppName: set_Allocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::Util::IAllocationStrategy*)>(&UnityEngine::ResourceManagement::ResourceManager::set_Allocator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.Util", "IAllocationStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "set_Allocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_ResourceProviders
// Il2CppName: get_ResourceProviders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider*>* (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_ResourceProviders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_ResourceProviders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::get_CertificateHandlerInstance
// Il2CppName: get_CertificateHandlerInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::CertificateHandler* (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::get_CertificateHandlerInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "get_CertificateHandlerInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::set_CertificateHandlerInstance
// Il2CppName: set_CertificateHandlerInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::Networking::CertificateHandler*)>(&UnityEngine::ResourceManagement::ResourceManager::set_CertificateHandlerInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "CertificateHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "set_CertificateHandlerInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::ResourceManagement::ResourceManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::TransformInternalId
// Il2CppName: TransformInternalId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*)>(&UnityEngine::ResourceManagement::ResourceManager::TransformInternalId)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "TransformInternalId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::AddUpdateReceiver
// Il2CppName: AddUpdateReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::IUpdateReceiver*)>(&UnityEngine::ResourceManagement::ResourceManager::AddUpdateReceiver)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "IUpdateReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "AddUpdateReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RemoveUpdateReciever
// Il2CppName: RemoveUpdateReciever
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::IUpdateReceiver*)>(&UnityEngine::ResourceManagement::ResourceManager::RemoveUpdateReciever)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "IUpdateReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RemoveUpdateReciever", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::OnObjectAdded
// Il2CppName: OnObjectAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::Il2CppObject*)>(&UnityEngine::ResourceManagement::ResourceManager::OnObjectAdded)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "OnObjectAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::OnObjectRemoved
// Il2CppName: OnObjectRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::Il2CppObject*)>(&UnityEngine::ResourceManagement::ResourceManager::OnObjectRemoved)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "OnObjectRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RegisterForCallbacks
// Il2CppName: RegisterForCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::RegisterForCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RegisterForCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ClearDiagnosticsCallback
// Il2CppName: ClearDiagnosticsCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::ClearDiagnosticsCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ClearDiagnosticsCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ClearDiagnosticCallbacks
// Il2CppName: ClearDiagnosticCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::ClearDiagnosticCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ClearDiagnosticCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::UnregisterDiagnosticCallback
// Il2CppName: UnregisterDiagnosticCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>*)>(&UnityEngine::ResourceManagement::ResourceManager::UnregisterDiagnosticCallback)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventContext")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "UnregisterDiagnosticCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RegisterDiagnosticCallback
// Il2CppName: RegisterDiagnosticCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Action_4<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle, ::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventType, int, ::Il2CppObject*>*)>(&UnityEngine::ResourceManagement::ResourceManager::RegisterDiagnosticCallback)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle"), ::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventType"), ::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RegisterDiagnosticCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RegisterDiagnosticCallback
// Il2CppName: RegisterDiagnosticCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Action_1<::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext>*)>(&UnityEngine::ResourceManagement::ResourceManager::RegisterDiagnosticCallback)> {
  static const MethodInfo* get() {
    static auto* func = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventContext")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RegisterDiagnosticCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{func});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::PostDiagnosticEvent
// Il2CppName: PostDiagnosticEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceManager::DiagnosticEventContext)>(&UnityEngine::ResourceManagement::ResourceManager::PostDiagnosticEvent)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "ResourceManager/DiagnosticEventContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "PostDiagnosticEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::GetResourceProvider
// Il2CppName: GetResourceProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::ResourceProviders::IResourceProvider* (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Type*, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*)>(&UnityEngine::ResourceManagement::ResourceManager::GetResourceProvider)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "GetResourceProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, location});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::GetDefaultTypeForLocation
// Il2CppName: GetDefaultTypeForLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*)>(&UnityEngine::ResourceManagement::ResourceManager::GetDefaultTypeForLocation)> {
  static const MethodInfo* get() {
    static auto* loc = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "GetDefaultTypeForLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loc});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CalculateLocationsHash
// Il2CppName: CalculateLocationsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>*, ::System::Type*)>(&UnityEngine::ResourceManagement::ResourceManager::CalculateLocationsHash)> {
  static const MethodInfo* get() {
    static auto* locations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")})->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "CalculateLocationsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locations, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideResource
// Il2CppName: ProvideResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::System::Type*, bool)>(&UnityEngine::ResourceManagement::ResourceManager::ProvideResource)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    static auto* desiredType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* releaseDependenciesOnFailure = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ProvideResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location, desiredType, releaseDependenciesOnFailure});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideResource
// Il2CppName: ProvideResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::StartOperation
// Il2CppName: StartOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::StartOperation
// Il2CppName: StartOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle)>(&UnityEngine::ResourceManagement::ResourceManager::StartOperation)> {
  static const MethodInfo* get() {
    static auto* operation = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    static auto* dependency = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "StartOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operation, dependency});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::OnInstanceOperationDestroy
// Il2CppName: OnInstanceOperationDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceManager::OnInstanceOperationDestroy)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "OnInstanceOperationDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::OnOperationDestroyNonCached
// Il2CppName: OnOperationDestroyNonCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceManager::OnOperationDestroyNonCached)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "OnOperationDestroyNonCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::OnOperationDestroyCached
// Il2CppName: OnOperationDestroyCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceManager::OnOperationDestroyCached)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "OnOperationDestroyCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateOperation
// Il2CppName: CreateOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::AddOperationToCache
// Il2CppName: AddOperationToCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(int, ::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*)>(&UnityEngine::ResourceManagement::ResourceManager::AddOperationToCache)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* operation = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "AddOperationToCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, operation});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RemoveOperationFromCache
// Il2CppName: RemoveOperationFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ResourceManagement::ResourceManager::*)(int)>(&UnityEngine::ResourceManagement::ResourceManager::RemoveOperationFromCache)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RemoveOperationFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::IsOperationCached
// Il2CppName: IsOperationCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::ResourceManagement::ResourceManager::*)(int)>(&UnityEngine::ResourceManagement::ResourceManager::IsOperationCached)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "IsOperationCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CachedOperationCount
// Il2CppName: CachedOperationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::CachedOperationCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "CachedOperationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateCompletedOperation
// Il2CppName: CreateCompletedOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateCompletedOperationInternal
// Il2CppName: CreateCompletedOperationInternal
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle)>(&UnityEngine::ResourceManagement::ResourceManager::Release)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle)>(&UnityEngine::ResourceManagement::ResourceManager::Acquire)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::AcquireGroupOpFromCache
// Il2CppName: AcquireGroupOpFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::GroupOperation* (UnityEngine::ResourceManagement::ResourceManager::*)(int)>(&UnityEngine::ResourceManagement::ResourceManager::AcquireGroupOpFromCache)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "AcquireGroupOpFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateGroupOperation
// Il2CppName: CreateGroupOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateGroupOperation
// Il2CppName: CreateGroupOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateGenericGroupOperation
// Il2CppName: CreateGenericGroupOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Collections::Generic::List_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*, bool)>(&UnityEngine::ResourceManagement::ResourceManager::CreateGenericGroupOperation)> {
  static const MethodInfo* get() {
    static auto* operations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")})->byval_arg;
    static auto* releasedCachedOpOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "CreateGenericGroupOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operations, releasedCachedOpOnComplete});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideResourceGroupCached
// Il2CppName: ProvideResourceGroupCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*> (UnityEngine::ResourceManagement::ResourceManager::*)(::System::Collections::Generic::IList_1<::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*>*, int, ::System::Type*, ::System::Action_1<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle>*, bool)>(&UnityEngine::ResourceManagement::ResourceManager::ProvideResourceGroupCached)> {
  static const MethodInfo* get() {
    static auto* locations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")})->byval_arg;
    static auto* groupHash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desiredType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle")})->byval_arg;
    static auto* releaseDependenciesOnFailure = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ProvideResourceGroupCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locations, groupHash, desiredType, callback, releaseDependenciesOnFailure});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideResources
// Il2CppName: ProvideResources
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideResources
// Il2CppName: ProvideResources
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation
// Il2CppName: CreateChainOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation
// Il2CppName: CreateChainOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation
// Il2CppName: CreateChainOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CreateChainOperation
// Il2CppName: CreateChainOperation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideScene
// Il2CppName: ProvideScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance> (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceProviders::ISceneProvider*, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::UnityEngine::SceneManagement::LoadSceneMode, bool, int)>(&UnityEngine::ResourceManagement::ResourceManager::ProvideScene)> {
  static const MethodInfo* get() {
    static auto* sceneProvider = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "ISceneProvider")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    static auto* loadMode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    static auto* activateOnLoad = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ProvideScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneProvider, location, loadMode, activateOnLoad, priority});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ReleaseScene
// Il2CppName: ReleaseScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance> (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceProviders::ISceneProvider*, ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::ResourceManagement::ResourceProviders::SceneInstance>)>(&UnityEngine::ResourceManagement::ResourceManager::ReleaseScene)> {
  static const MethodInfo* get() {
    static auto* sceneProvider = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "ISceneProvider")->byval_arg;
    static auto* sceneLoadHandle = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "AsyncOperationHandle`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "SceneInstance")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ReleaseScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneProvider, sceneLoadHandle});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ProvideInstance
// Il2CppName: ProvideInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::GameObject*> (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::ResourceProviders::IInstanceProvider*, ::UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation*, ::UnityEngine::ResourceManagement::ResourceProviders::InstantiationParameters)>(&UnityEngine::ResourceManagement::ResourceManager::ProvideInstance)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "IInstanceProvider")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceLocations", "IResourceLocation")->byval_arg;
    static auto* instantiateParameters = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.ResourceProviders", "InstantiationParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ProvideInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, location, instantiateParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::CleanupSceneInstances
// Il2CppName: CleanupSceneInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::SceneManagement::Scene)>(&UnityEngine::ResourceManagement::ResourceManager::CleanupSceneInstances)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "CleanupSceneInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::ExecuteDeferredCallbacks
// Il2CppName: ExecuteDeferredCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::ExecuteDeferredCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "ExecuteDeferredCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::RegisterForDeferredCallback
// Il2CppName: RegisterForDeferredCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::AsyncOperations::IAsyncOperation*, bool)>(&UnityEngine::ResourceManagement::ResourceManager::RegisterForDeferredCallback)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement.AsyncOperations", "IAsyncOperation")->byval_arg;
    static auto* incrementRefCount = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "RegisterForDeferredCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op, incrementRefCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(float)>(&UnityEngine::ResourceManagement::ResourceManager::Update)> {
  static const MethodInfo* get() {
    static auto* unscaledDeltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unscaledDeltaTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)()>(&UnityEngine::ResourceManagement::ResourceManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ResourceManagement::ResourceManager::$_ctor$b__45_0
// Il2CppName: <.ctor>b__45_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ResourceManagement::ResourceManager::*)(::UnityEngine::ResourceManagement::IUpdateReceiver*)>(&UnityEngine::ResourceManagement::ResourceManager::$_ctor$b__45_0)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("UnityEngine.ResourceManagement", "IUpdateReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ResourceManagement::ResourceManager*), "<.ctor>b__45_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
