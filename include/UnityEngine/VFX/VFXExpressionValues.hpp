// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.VFX
namespace UnityEngine::VFX {
  // Forward declaring type: VFXExpressionValues
  class VFXExpressionValues;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::VFX::VFXExpressionValues);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::VFX::VFXExpressionValues*, "UnityEngine.VFX", "VFXExpressionValues");
// Type namespace: UnityEngine.VFX
namespace UnityEngine::VFX {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.VFX.VFXExpressionValues
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: 947A8C
  // [NativeTypeAttribute] Offset: 947A8C
  class VFXExpressionValues : public ::Il2CppObject {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // private System.Void .ctor()
    // Offset: 0x1C27104
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VFXExpressionValues* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::VFX::VFXExpressionValues::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VFXExpressionValues*, creationType>()));
    }
    // static UnityEngine.VFX.VFXExpressionValues CreateExpressionValuesWrapper(System.IntPtr ptr)
    // Offset: 0x1C2710C
    static ::UnityEngine::VFX::VFXExpressionValues* CreateExpressionValuesWrapper(::System::IntPtr ptr);
  }; // UnityEngine.VFX.VFXExpressionValues
  #pragma pack(pop)
  static check_size<sizeof(VFXExpressionValues), 16 + sizeof(::System::IntPtr)> __UnityEngine_VFX_VFXExpressionValuesSizeCheck;
  static_assert(sizeof(VFXExpressionValues) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::VFX::VFXExpressionValues::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::VFX::VFXExpressionValues::CreateExpressionValuesWrapper
// Il2CppName: CreateExpressionValuesWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::VFX::VFXExpressionValues* (*)(::System::IntPtr)>(&UnityEngine::VFX::VFXExpressionValues::CreateExpressionValuesWrapper)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::VFX::VFXExpressionValues*), "CreateExpressionValuesWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
