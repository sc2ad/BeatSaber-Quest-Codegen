// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Forward declaring type: AnimationState
  class AnimationState;
  // Forward declaring type: PlayMode
  struct PlayMode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animation);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animation*, "UnityEngine", "Animation");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animation
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 10A80D0
  class Animation : public ::UnityEngine::Behaviour/*, public ::System::Collections::IEnumerable*/ {
    public:
    // Nested type: ::UnityEngine::Animation::Enumerator
    class Enumerator;
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Creating interface conversion operator: i_IEnumerable
    inline ::System::Collections::IEnumerable* i_IEnumerable() noexcept {
      return reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // public UnityEngine.AnimationClip get_clip()
    // Offset: 0x2B0A1A4
    ::UnityEngine::AnimationClip* get_clip();
    // public UnityEngine.AnimationState get_Item(System.String name)
    // Offset: 0x2B0A384
    ::UnityEngine::AnimationState* get_Item(::StringW name);
    // public System.Boolean get_animatePhysics()
    // Offset: 0x2B0A704
    bool get_animatePhysics();
    // public System.Void Rewind(System.String name)
    // Offset: 0x2B0A1E4
    void Rewind(::StringW name);
    // private System.Void Internal_RewindByName(System.String name)
    // Offset: 0x2B0A234
    void Internal_RewindByName(::StringW name);
    // public System.Void Rewind()
    // Offset: 0x2B0A284
    void Rewind();
    // static private System.Void INTERNAL_CALL_Rewind(UnityEngine.Animation self)
    // Offset: 0x2B0A2C4
    static void INTERNAL_CALL_Rewind(::UnityEngine::Animation* self);
    // public System.Void Sample()
    // Offset: 0x2B0A304
    void Sample();
    // static private System.Void INTERNAL_CALL_Sample(UnityEngine.Animation self)
    // Offset: 0x2B0A344
    static void INTERNAL_CALL_Sample(::UnityEngine::Animation* self);
    // public System.Boolean Play()
    // Offset: 0x2B0A424
    bool Play();
    // public System.Boolean Play(UnityEngine.PlayMode mode)
    // Offset: 0x2B0A468
    bool Play(::UnityEngine::PlayMode mode);
    // public System.Void CrossFade(System.String animation, System.Single fadeLength, UnityEngine.PlayMode mode)
    // Offset: 0x2B0A508
    void CrossFade(::StringW animation, float fadeLength, ::UnityEngine::PlayMode mode);
    // public System.Void CrossFade(System.String animation, System.Single fadeLength)
    // Offset: 0x2B0A570
    void CrossFade(::StringW animation, float fadeLength);
    // private System.Boolean PlayDefaultAnimation(UnityEngine.PlayMode mode)
    // Offset: 0x2B0A4B8
    bool PlayDefaultAnimation(::UnityEngine::PlayMode mode);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x2B0A5D4
    ::System::Collections::IEnumerator* GetEnumerator();
    // UnityEngine.AnimationState GetState(System.String name)
    // Offset: 0x2B0A3D4
    ::UnityEngine::AnimationState* GetState(::StringW name);
    // UnityEngine.AnimationState GetStateAtIndex(System.Int32 index)
    // Offset: 0x2B0A674
    ::UnityEngine::AnimationState* GetStateAtIndex(int index);
    // System.Int32 GetStateCount()
    // Offset: 0x2B0A6C4
    int GetStateCount();
  }; // UnityEngine.Animation
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animation::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::get_Item)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::get_animatePhysics
// Il2CppName: get_animatePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::get_animatePhysics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "get_animatePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Rewind)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Internal_RewindByName
// Il2CppName: Internal_RewindByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::Internal_RewindByName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Internal_RewindByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Rewind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::INTERNAL_CALL_Rewind
// Il2CppName: INTERNAL_CALL_Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Animation*)>(&UnityEngine::Animation::INTERNAL_CALL_Rewind)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "INTERNAL_CALL_Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Sample
// Il2CppName: Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Sample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::INTERNAL_CALL_Sample
// Il2CppName: INTERNAL_CALL_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Animation*)>(&UnityEngine::Animation::INTERNAL_CALL_Sample)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "INTERNAL_CALL_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)()>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::UnityEngine::PlayMode)>(&UnityEngine::Animation::Play)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float, ::UnityEngine::PlayMode)>(&UnityEngine::Animation::CrossFade)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animation::*)(::StringW, float)>(&UnityEngine::Animation::CrossFade)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fadeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation, fadeLength});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::PlayDefaultAnimation
// Il2CppName: PlayDefaultAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animation::*)(::UnityEngine::PlayMode)>(&UnityEngine::Animation::PlayDefaultAnimation)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "PlayMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "PlayDefaultAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::Animation::*)()>(&UnityEngine::Animation::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(::StringW)>(&UnityEngine::Animation::GetState)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetStateAtIndex
// Il2CppName: GetStateAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationState* (UnityEngine::Animation::*)(int)>(&UnityEngine::Animation::GetStateAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetStateAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animation::GetStateCount
// Il2CppName: GetStateCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Animation::*)()>(&UnityEngine::Animation::GetStateCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animation*), "GetStateCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
