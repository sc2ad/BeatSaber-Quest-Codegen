// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseControllerInteractor.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor
#include "UnityEngine/XR/Interaction/Toolkit/UI/IUIInteractor.hpp"
// Including type: UnityEngine.QueryTriggerInteraction
#include "UnityEngine/QueryTriggerInteraction.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: XRBaseInteractable because it is already included!
  // Forward declaring type: XRRig
  class XRRig;
  // Skipping declaration: LineType because it is already included!
  // Skipping declaration: HitDetectionType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector2 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: XRUIInputModule
  class XRUIInputModule;
  // Forward declaring type: TrackedDeviceModel
  struct TrackedDeviceModel;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: RaycastResult
  struct RaycastResult;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRRayInteractor
  class XRRayInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x1C8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97EFC0
  class XRRayInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor/*, public ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer
    class RaycastHitComparer;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType
    struct LineType;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType
    struct HitDetectionType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LineType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType StraightLine
      static constexpr const int StraightLine = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType StraightLine
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_StraightLine();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType StraightLine
      static void _set_StraightLine(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType ProjectileCurve
      static constexpr const int ProjectileCurve = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType ProjectileCurve
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_ProjectileCurve();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType ProjectileCurve
      static void _set_ProjectileCurve(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType BezierCurve
      static constexpr const int BezierCurve = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType BezierCurve
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType _get_BezierCurve();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType BezierCurve
      static void _set_BezierCurve(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::LineType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_LineTypeSizeCheck;
    static_assert(sizeof(XRRayInteractor::LineType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HitDetectionType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HitDetectionType
      constexpr HitDetectionType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType Raycast
      static constexpr const int Raycast = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType Raycast
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType _get_Raycast();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType Raycast
      static void _set_Raycast(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType SphereCast
      static constexpr const int SphereCast = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType SphereCast
      static ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType _get_SphereCast();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType SphereCast
      static void _set_SphereCast(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType
    #pragma pack(pop)
    static check_size<sizeof(XRRayInteractor::HitDetectionType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractor_HitDetectionTypeSizeCheck;
    static_assert(sizeof(XRRayInteractor::HitDetectionType) == 0x4);
    public:
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType m_LineType
    // Size: 0x4
    // Offset: 0x108
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType m_LineType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType) == 0x4);
    // private System.Single m_MaxRaycastDistance
    // Size: 0x4
    // Offset: 0x10C
    float m_MaxRaycastDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform m_ReferenceFrame
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Transform* m_ReferenceFrame;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single m_Velocity
    // Size: 0x4
    // Offset: 0x118
    float m_Velocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Acceleration
    // Size: 0x4
    // Offset: 0x11C
    float m_Acceleration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AdditionalFlightTime
    // Size: 0x4
    // Offset: 0x120
    float m_AdditionalFlightTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_EndPointDistance
    // Size: 0x4
    // Offset: 0x124
    float m_EndPointDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_EndPointHeight
    // Size: 0x4
    // Offset: 0x128
    float m_EndPointHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ControlPointDistance
    // Size: 0x4
    // Offset: 0x12C
    float m_ControlPointDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ControlPointHeight
    // Size: 0x4
    // Offset: 0x130
    float m_ControlPointHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x981668
    // private System.Int32 m_SampleFrequency
    // Size: 0x4
    // Offset: 0x134
    int m_SampleFrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType m_HitDetectionType
    // Size: 0x4
    // Offset: 0x138
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType m_HitDetectionType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType) == 0x4);
    // [RangeAttribute] Offset: 0x9816BC
    // private System.Single m_SphereCastRadius
    // Size: 0x4
    // Offset: 0x13C
    float m_SphereCastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask m_RaycastMask
    // Size: 0x4
    // Offset: 0x140
    ::UnityEngine::LayerMask m_RaycastMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    // Size: 0x4
    // Offset: 0x144
    ::UnityEngine::QueryTriggerInteraction m_RaycastTriggerInteraction;
    // Field size check
    static_assert(sizeof(::UnityEngine::QueryTriggerInteraction) == 0x4);
    // private System.Boolean m_KeepSelectedTargetValid
    // Size: 0x1
    // Offset: 0x148
    bool m_KeepSelectedTargetValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HoverToSelect
    // Size: 0x1
    // Offset: 0x149
    bool m_HoverToSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HoverToSelect and: m_HoverTimeToSelect
    char __padding16[0x2] = {};
    // private System.Single m_HoverTimeToSelect
    // Size: 0x4
    // Offset: 0x14C
    float m_HoverTimeToSelect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_EnableUIInteraction
    // Size: 0x1
    // Offset: 0x150
    bool m_EnableUIInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_AllowAnchorControl
    // Size: 0x1
    // Offset: 0x151
    bool m_AllowAnchorControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseForceGrab
    // Size: 0x1
    // Offset: 0x152
    bool m_UseForceGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseForceGrab and: m_RotateSpeed
    char __padding20[0x1] = {};
    // private System.Single m_RotateSpeed
    // Size: 0x4
    // Offset: 0x154
    float m_RotateSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TranslateSpeed
    // Size: 0x4
    // Offset: 0x158
    float m_TranslateSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TranslateSpeed and: m_ValidTargets
    char __padding22[0x4] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_ValidTargets
    // Size: 0x8
    // Offset: 0x160
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* m_ValidTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*) == 0x8);
    // private UnityEngine.Transform m_OriginalAttachTransform
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Transform* m_OriginalAttachTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRRig m_XRRig
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::XR::Interaction::Toolkit::XRRig* m_XRRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRig*) == 0x8);
    // private readonly UnityEngine.RaycastHit[] m_RaycastHits
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::UnityEngine::RaycastHit> m_RaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private readonly UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.RaycastHitComparer m_RaycastHitComparer
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer* m_RaycastHitComparer;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer*) == 0x8);
    // private UnityEngine.Vector3[] m_SamplePoints
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::UnityEngine::Vector3> m_SamplePoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 m_NoSamplePoints
    // Size: 0x4
    // Offset: 0x190
    int m_NoSamplePoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_NoSamplePoints and: m_CurrentNearestObject
    char __padding29[0x4] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_CurrentNearestObject
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* m_CurrentNearestObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*) == 0x8);
    // private System.Single m_LastTimeHoveredObjectChanged
    // Size: 0x4
    // Offset: 0x1A0
    float m_LastTimeHoveredObjectChanged;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_PassedHoverTimeToSelect
    // Size: 0x1
    // Offset: 0x1A4
    bool m_PassedHoverTimeToSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PassedHoverTimeToSelect and: m_HitCount
    char __padding32[0x3] = {};
    // private System.Int32 m_HitCount
    // Size: 0x4
    // Offset: 0x1A8
    int m_HitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_HitPositionInLine
    // Size: 0x4
    // Offset: 0x1AC
    int m_HitPositionInLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly UnityEngine.Vector3[] m_ControlPoints
    // Size: 0x8
    // Offset: 0x1B0
    ::ArrayW<::UnityEngine::Vector3> m_ControlPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule m_InputModule
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule* m_InputModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule m_RegisteredInputModule
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule* m_RegisteredInputModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor
    operator ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*>(this);
    }
    // static field const value: static private System.Int32 k_MaxRaycastHits
    static constexpr const int k_MaxRaycastHits = 10;
    // Get static field: static private System.Int32 k_MaxRaycastHits
    static int _get_k_MaxRaycastHits();
    // Set static field: static private System.Int32 k_MaxRaycastHits
    static void _set_k_MaxRaycastHits(int value);
    // static field const value: static private System.Int32 k_MinLineSamples
    static constexpr const int k_MinLineSamples = 2;
    // Get static field: static private System.Int32 k_MinLineSamples
    static int _get_k_MinLineSamples();
    // Set static field: static private System.Int32 k_MinLineSamples
    static void _set_k_MinLineSamples(int value);
    // static field const value: static private System.Int32 k_MaxLineSamples
    static constexpr const int k_MaxLineSamples = 100;
    // Get static field: static private System.Int32 k_MaxLineSamples
    static int _get_k_MaxLineSamples();
    // Set static field: static private System.Int32 k_MaxLineSamples
    static void _set_k_MaxLineSamples(int value);
    // Get static field: static private UnityEngine.Vector3[] s_CachedLinePoints
    static ::ArrayW<::UnityEngine::Vector3> _get_s_CachedLinePoints();
    // Set static field: static private UnityEngine.Vector3[] s_CachedLinePoints
    static void _set_s_CachedLinePoints(::ArrayW<::UnityEngine::Vector3> value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType m_LineType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType& dyn_m_LineType();
    // Get instance field reference: private System.Single m_MaxRaycastDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxRaycastDistance();
    // Get instance field reference: private UnityEngine.Transform m_ReferenceFrame
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ReferenceFrame();
    // Get instance field reference: private System.Single m_Velocity
    [[deprecated("Use field access instead!")]] float& dyn_m_Velocity();
    // Get instance field reference: private System.Single m_Acceleration
    [[deprecated("Use field access instead!")]] float& dyn_m_Acceleration();
    // Get instance field reference: private System.Single m_AdditionalFlightTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AdditionalFlightTime();
    // Get instance field reference: private System.Single m_EndPointDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_EndPointDistance();
    // Get instance field reference: private System.Single m_EndPointHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_EndPointHeight();
    // Get instance field reference: private System.Single m_ControlPointDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_ControlPointDistance();
    // Get instance field reference: private System.Single m_ControlPointHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_ControlPointHeight();
    // Get instance field reference: private System.Int32 m_SampleFrequency
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleFrequency();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType m_HitDetectionType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType& dyn_m_HitDetectionType();
    // Get instance field reference: private System.Single m_SphereCastRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_SphereCastRadius();
    // Get instance field reference: private UnityEngine.LayerMask m_RaycastMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_m_RaycastMask();
    // Get instance field reference: private UnityEngine.QueryTriggerInteraction m_RaycastTriggerInteraction
    [[deprecated("Use field access instead!")]] ::UnityEngine::QueryTriggerInteraction& dyn_m_RaycastTriggerInteraction();
    // Get instance field reference: private System.Boolean m_KeepSelectedTargetValid
    [[deprecated("Use field access instead!")]] bool& dyn_m_KeepSelectedTargetValid();
    // Get instance field reference: private System.Boolean m_HoverToSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_HoverToSelect();
    // Get instance field reference: private System.Single m_HoverTimeToSelect
    [[deprecated("Use field access instead!")]] float& dyn_m_HoverTimeToSelect();
    // Get instance field reference: private System.Boolean m_EnableUIInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableUIInteraction();
    // Get instance field reference: private System.Boolean m_AllowAnchorControl
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowAnchorControl();
    // Get instance field reference: private System.Boolean m_UseForceGrab
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseForceGrab();
    // Get instance field reference: private System.Single m_RotateSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_RotateSpeed();
    // Get instance field reference: private System.Single m_TranslateSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_TranslateSpeed();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_ValidTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*& dyn_m_ValidTargets();
    // Get instance field reference: private UnityEngine.Transform m_OriginalAttachTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_OriginalAttachTransform();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRRig m_XRRig
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRig*& dyn_m_XRRig();
    // Get instance field reference: private readonly UnityEngine.RaycastHit[] m_RaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_m_RaycastHits();
    // Get instance field reference: private readonly UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.RaycastHitComparer m_RaycastHitComparer
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RaycastHitComparer*& dyn_m_RaycastHitComparer();
    // Get instance field reference: private UnityEngine.Vector3[] m_SamplePoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_SamplePoints();
    // Get instance field reference: private System.Int32 m_NoSamplePoints
    [[deprecated("Use field access instead!")]] int& dyn_m_NoSamplePoints();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_CurrentNearestObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*& dyn_m_CurrentNearestObject();
    // Get instance field reference: private System.Single m_LastTimeHoveredObjectChanged
    [[deprecated("Use field access instead!")]] float& dyn_m_LastTimeHoveredObjectChanged();
    // Get instance field reference: private System.Boolean m_PassedHoverTimeToSelect
    [[deprecated("Use field access instead!")]] bool& dyn_m_PassedHoverTimeToSelect();
    // Get instance field reference: private System.Int32 m_HitCount
    [[deprecated("Use field access instead!")]] int& dyn_m_HitCount();
    // Get instance field reference: private System.Int32 m_HitPositionInLine
    [[deprecated("Use field access instead!")]] int& dyn_m_HitPositionInLine();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ControlPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ControlPoints();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule m_InputModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*& dyn_m_InputModule();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule m_RegisteredInputModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*& dyn_m_RegisteredInputModule();
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType get_lineType()
    // Offset: 0xD835DC
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType get_lineType();
    // public System.Void set_lineType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.LineType value)
    // Offset: 0xD835E4
    void set_lineType(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType value);
    // public System.Single get_maxRaycastDistance()
    // Offset: 0xD8366C
    float get_maxRaycastDistance();
    // public System.Void set_maxRaycastDistance(System.Single value)
    // Offset: 0xD83674
    void set_maxRaycastDistance(float value);
    // public UnityEngine.Transform get_referenceFrame()
    // Offset: 0xD8367C
    ::UnityEngine::Transform* get_referenceFrame();
    // public System.Void set_referenceFrame(UnityEngine.Transform value)
    // Offset: 0xD83684
    void set_referenceFrame(::UnityEngine::Transform* value);
    // public System.Single get_velocity()
    // Offset: 0xD8368C
    float get_velocity();
    // public System.Void set_velocity(System.Single value)
    // Offset: 0xD83694
    void set_velocity(float value);
    // public System.Single get_Velocity()
    // Offset: 0xD8369C
    float get_Velocity();
    // public System.Void set_Velocity(System.Single value)
    // Offset: 0xD836A4
    void set_Velocity(float value);
    // public System.Single get_acceleration()
    // Offset: 0xD836AC
    float get_acceleration();
    // public System.Void set_acceleration(System.Single value)
    // Offset: 0xD836B4
    void set_acceleration(float value);
    // public System.Single get_Acceleration()
    // Offset: 0xD836BC
    float get_Acceleration();
    // public System.Void set_Acceleration(System.Single value)
    // Offset: 0xD836C4
    void set_Acceleration(float value);
    // public System.Single get_additionalFlightTime()
    // Offset: 0xD836CC
    float get_additionalFlightTime();
    // public System.Void set_additionalFlightTime(System.Single value)
    // Offset: 0xD836D4
    void set_additionalFlightTime(float value);
    // public System.Single get_AdditionalFlightTime()
    // Offset: 0xD836DC
    float get_AdditionalFlightTime();
    // public System.Void set_AdditionalFlightTime(System.Single value)
    // Offset: 0xD836E4
    void set_AdditionalFlightTime(float value);
    // public System.Single get_endPointDistance()
    // Offset: 0xD836EC
    float get_endPointDistance();
    // public System.Void set_endPointDistance(System.Single value)
    // Offset: 0xD836F4
    void set_endPointDistance(float value);
    // public System.Single get_endPointHeight()
    // Offset: 0xD836FC
    float get_endPointHeight();
    // public System.Void set_endPointHeight(System.Single value)
    // Offset: 0xD83704
    void set_endPointHeight(float value);
    // public System.Single get_controlPointDistance()
    // Offset: 0xD8370C
    float get_controlPointDistance();
    // public System.Void set_controlPointDistance(System.Single value)
    // Offset: 0xD83714
    void set_controlPointDistance(float value);
    // public System.Single get_controlPointHeight()
    // Offset: 0xD8371C
    float get_controlPointHeight();
    // public System.Void set_controlPointHeight(System.Single value)
    // Offset: 0xD83724
    void set_controlPointHeight(float value);
    // public System.Int32 get_sampleFrequency()
    // Offset: 0xD8372C
    int get_sampleFrequency();
    // public System.Void set_sampleFrequency(System.Int32 value)
    // Offset: 0xD83734
    void set_sampleFrequency(int value);
    // public UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType get_hitDetectionType()
    // Offset: 0xD8373C
    ::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType get_hitDetectionType();
    // public System.Void set_hitDetectionType(UnityEngine.XR.Interaction.Toolkit.XRRayInteractor/UnityEngine.XR.Interaction.Toolkit.HitDetectionType value)
    // Offset: 0xD83744
    void set_hitDetectionType(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType value);
    // public System.Single get_sphereCastRadius()
    // Offset: 0xD8374C
    float get_sphereCastRadius();
    // public System.Void set_sphereCastRadius(System.Single value)
    // Offset: 0xD83754
    void set_sphereCastRadius(float value);
    // public UnityEngine.LayerMask get_raycastMask()
    // Offset: 0xD8375C
    ::UnityEngine::LayerMask get_raycastMask();
    // public System.Void set_raycastMask(UnityEngine.LayerMask value)
    // Offset: 0xD83764
    void set_raycastMask(::UnityEngine::LayerMask value);
    // public UnityEngine.QueryTriggerInteraction get_raycastTriggerInteraction()
    // Offset: 0xD8376C
    ::UnityEngine::QueryTriggerInteraction get_raycastTriggerInteraction();
    // public System.Void set_raycastTriggerInteraction(UnityEngine.QueryTriggerInteraction value)
    // Offset: 0xD83774
    void set_raycastTriggerInteraction(::UnityEngine::QueryTriggerInteraction value);
    // public System.Boolean get_keepSelectedTargetValid()
    // Offset: 0xD8377C
    bool get_keepSelectedTargetValid();
    // public System.Void set_keepSelectedTargetValid(System.Boolean value)
    // Offset: 0xD83784
    void set_keepSelectedTargetValid(bool value);
    // public System.Boolean get_hoverToSelect()
    // Offset: 0xD83790
    bool get_hoverToSelect();
    // public System.Void set_hoverToSelect(System.Boolean value)
    // Offset: 0xD83798
    void set_hoverToSelect(bool value);
    // public System.Single get_hoverTimeToSelect()
    // Offset: 0xD837A4
    float get_hoverTimeToSelect();
    // public System.Void set_hoverTimeToSelect(System.Single value)
    // Offset: 0xD837AC
    void set_hoverTimeToSelect(float value);
    // public System.Boolean get_enableUIInteraction()
    // Offset: 0xD837B4
    bool get_enableUIInteraction();
    // public System.Void set_enableUIInteraction(System.Boolean value)
    // Offset: 0xD837BC
    void set_enableUIInteraction(bool value);
    // public System.Boolean get_allowAnchorControl()
    // Offset: 0xD8383C
    bool get_allowAnchorControl();
    // public System.Void set_allowAnchorControl(System.Boolean value)
    // Offset: 0xD83844
    void set_allowAnchorControl(bool value);
    // public System.Boolean get_useForceGrab()
    // Offset: 0xD8385C
    bool get_useForceGrab();
    // public System.Void set_useForceGrab(System.Boolean value)
    // Offset: 0xD83864
    void set_useForceGrab(bool value);
    // public System.Single get_rotateSpeed()
    // Offset: 0xD83870
    float get_rotateSpeed();
    // public System.Void set_rotateSpeed(System.Single value)
    // Offset: 0xD83878
    void set_rotateSpeed(float value);
    // public System.Single get_translateSpeed()
    // Offset: 0xD83880
    float get_translateSpeed();
    // public System.Void set_translateSpeed(System.Single value)
    // Offset: 0xD83888
    void set_translateSpeed(float value);
    // public System.Single get_angle()
    // Offset: 0xD83890
    float get_angle();
    // public System.Single get_Angle()
    // Offset: 0xD83AD4
    float get_Angle();
    // protected UnityEngine.Transform get_originalAttachTransform()
    // Offset: 0xD83AE0
    ::UnityEngine::Transform* get_originalAttachTransform();
    // protected System.Void set_originalAttachTransform(UnityEngine.Transform value)
    // Offset: 0xD83AE8
    void set_originalAttachTransform(::UnityEngine::Transform* value);
    // private UnityEngine.Transform get_startTransform()
    // Offset: 0xD83A44
    ::UnityEngine::Transform* get_startTransform();
    // protected System.Void OnValidate()
    // Offset: 0xD83AF0
    void OnValidate();
    // private System.Void RebuildSamplePoints()
    // Offset: 0xD835EC
    void RebuildSamplePoints();
    // private System.Void FindOrCreateXRUIInputModule()
    // Offset: 0xD840D0
    void FindOrCreateXRUIInputModule();
    // private System.Void RegisterWithXRUIInputModule()
    // Offset: 0xD83F24
    void RegisterWithXRUIInputModule();
    // private System.Void UnregisterFromXRUIInputModule()
    // Offset: 0xD84040
    void UnregisterFromXRUIInputModule();
    // private System.Void RegisterOrUnregisterXRUIInputModule()
    // Offset: 0xD837E0
    void RegisterOrUnregisterXRUIInputModule();
    // public System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, ref System.Int32 numPoints, System.Int32 _)
    // Offset: 0xD84328
    bool GetLinePoints(ByRef<::ArrayW<::UnityEngine::Vector3>> linePoints, ByRef<int> numPoints, int _);
    // public System.Boolean GetLinePoints(ref UnityEngine.Vector3[] linePoints, out System.Int32 numPoints)
    // Offset: 0xD8432C
    bool GetLinePoints(ByRef<::ArrayW<::UnityEngine::Vector3>> linePoints, ByRef<int> numPoints);
    // public System.Boolean TryGetHitInfo(ref UnityEngine.Vector3 position, ref UnityEngine.Vector3 normal, ref System.Int32 positionInLine, ref System.Boolean isValidTarget, System.Int32 _)
    // Offset: 0xD84474
    bool TryGetHitInfo(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> normal, ByRef<int> positionInLine, ByRef<bool> isValidTarget, int _);
    // public System.Boolean TryGetHitInfo(out UnityEngine.Vector3 position, out UnityEngine.Vector3 normal, out System.Int32 positionInLine, out System.Boolean isValidTarget)
    // Offset: 0xD84478
    bool TryGetHitInfo(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> normal, ByRef<int> positionInLine, ByRef<bool> isValidTarget);
    // public System.Void UpdateUIModel(ref UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0xD8480C
    void UpdateUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // public System.Boolean TryGetUIModel(out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0xD849CC
    bool TryGetUIModel(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // public System.Boolean GetCurrentRaycastHit(out UnityEngine.RaycastHit raycastHit)
    // Offset: 0xD846C0
    bool GetCurrentRaycastHit(ByRef<::UnityEngine::RaycastHit> raycastHit);
    // private System.Boolean GetCurrentUIRaycastResult(out UnityEngine.EventSystems.RaycastResult result, out System.Int32 raycastPointIndex)
    // Offset: 0xD84734
    bool GetCurrentUIRaycastResult(ByRef<::UnityEngine::EventSystems::RaycastResult> result, ByRef<int> raycastPointIndex);
    // private System.Void UpdateBezierControlPoints()
    // Offset: 0xD84AB0
    void UpdateBezierControlPoints();
    // static private UnityEngine.Vector3 CalculateBezierPoint(System.Single t, UnityEngine.Vector3 start, UnityEngine.Vector3 control, UnityEngine.Vector3 end)
    // Offset: 0xD84D0C
    static ::UnityEngine::Vector3 CalculateBezierPoint(float t, ::UnityEngine::Vector3 start, ::UnityEngine::Vector3 control, ::UnityEngine::Vector3 end);
    // static private UnityEngine.Vector3 CalculateProjectilePoint(System.Single t, UnityEngine.Vector3 start, UnityEngine.Vector3 velocity, UnityEngine.Vector3 acceleration)
    // Offset: 0xD84E8C
    static ::UnityEngine::Vector3 CalculateProjectilePoint(float t, ::UnityEngine::Vector3 start, ::UnityEngine::Vector3 velocity, ::UnityEngine::Vector3 acceleration);
    // private System.Void FindReferenceFrame()
    // Offset: 0xD83D90
    void FindReferenceFrame();
    // static private System.Boolean TryRead2DAxis(UnityEngine.InputSystem.InputAction action, out UnityEngine.Vector2 output)
    // Offset: 0xD84FC0
    static bool TryRead2DAxis(::UnityEngine::InputSystem::InputAction* action, ByRef<::UnityEngine::Vector2> output);
    // protected System.Void RotateAnchor(UnityEngine.Transform anchor, System.Single directionAmount)
    // Offset: 0xD85038
    void RotateAnchor(::UnityEngine::Transform* anchor, float directionAmount);
    // protected System.Void TranslateAnchor(UnityEngine.Transform originalAnchor, UnityEngine.Transform anchor, System.Single directionAmount)
    // Offset: 0xD85188
    void TranslateAnchor(::UnityEngine::Transform* originalAnchor, ::UnityEngine::Transform* anchor, float directionAmount);
    // private System.Int32 CheckCollidersBetweenPoints(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0xD85884
    int CheckCollidersBetweenPoints(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to);
    // protected override System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> get_validTargets()
    // Offset: 0xD83AD8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> XRBaseControllerInteractor::get_validTargets()
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* get_validTargets();
    // public System.Void .ctor()
    // Offset: 0xD86540
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::.ctor()
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRRayInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRRayInteractor*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xD83AF4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0xD83D48
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0xD84000
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::OnDisable()
    void OnDisable();
    // public override System.Void ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0xD8532C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::ProcessInteractor(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    void ProcessInteractor(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // public override System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> validTargets)
    // Offset: 0xD85AC4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> validTargets)
    void GetValidTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* validTargets);
    // public override System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD861A0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanHover(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public override System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD86280
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal override System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD863D4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnSelectExiting(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // protected internal override System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD86460
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    void OnSelectEntering(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
  }; // UnityEngine.XR.Interaction.Toolkit.XRRayInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRRayInteractor), 448 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*)> __UnityEngine_XR_Interaction_Toolkit_XRRayInteractorSizeCheck;
  static_assert(sizeof(XRRayInteractor) == 0x1C8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/HitDetectionType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType, "UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/LineType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_lineType
// Il2CppName: get_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_lineType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_lineType
// Il2CppName: set_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::LineType)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_lineType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/LineType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_maxRaycastDistance
// Il2CppName: get_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_maxRaycastDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_maxRaycastDistance
// Il2CppName: set_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_maxRaycastDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_referenceFrame
// Il2CppName: get_referenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_referenceFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_referenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_referenceFrame
// Il2CppName: set_referenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_referenceFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_referenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Velocity
// Il2CppName: get_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Velocity
// Il2CppName: set_Velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_Velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_acceleration
// Il2CppName: get_acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_acceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_acceleration
// Il2CppName: set_acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_acceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Acceleration
// Il2CppName: get_Acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Acceleration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Acceleration
// Il2CppName: set_Acceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_Acceleration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_Acceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalFlightTime
// Il2CppName: get_additionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_additionalFlightTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_additionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalFlightTime
// Il2CppName: set_additionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_additionalFlightTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_additionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_AdditionalFlightTime
// Il2CppName: get_AdditionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_AdditionalFlightTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_AdditionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_AdditionalFlightTime
// Il2CppName: set_AdditionalFlightTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_AdditionalFlightTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_AdditionalFlightTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointDistance
// Il2CppName: get_endPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_endPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointDistance
// Il2CppName: set_endPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_endPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointHeight
// Il2CppName: get_endPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_endPointHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_endPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointHeight
// Il2CppName: set_endPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_endPointHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_endPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointDistance
// Il2CppName: get_controlPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_controlPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointDistance
// Il2CppName: set_controlPointDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_controlPointDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointHeight
// Il2CppName: get_controlPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_controlPointHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_controlPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointHeight
// Il2CppName: set_controlPointHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_controlPointHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_controlPointHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sampleFrequency
// Il2CppName: get_sampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sampleFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_sampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sampleFrequency
// Il2CppName: set_sampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sampleFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_sampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitDetectionType
// Il2CppName: get_hitDetectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hitDetectionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hitDetectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitDetectionType
// Il2CppName: set_hitDetectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::HitDetectionType)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hitDetectionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRRayInteractor/HitDetectionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hitDetectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sphereCastRadius
// Il2CppName: get_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_sphereCastRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sphereCastRadius
// Il2CppName: set_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_sphereCastRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastMask
// Il2CppName: get_raycastMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_raycastMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastMask
// Il2CppName: set_raycastMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::LayerMask)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_raycastMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastTriggerInteraction
// Il2CppName: get_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::QueryTriggerInteraction (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastTriggerInteraction
// Il2CppName: set_raycastTriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::QueryTriggerInteraction)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_raycastTriggerInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "QueryTriggerInteraction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_raycastTriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_keepSelectedTargetValid
// Il2CppName: get_keepSelectedTargetValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_keepSelectedTargetValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_keepSelectedTargetValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_keepSelectedTargetValid
// Il2CppName: set_keepSelectedTargetValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_keepSelectedTargetValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_keepSelectedTargetValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverToSelect
// Il2CppName: get_hoverToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverToSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hoverToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverToSelect
// Il2CppName: set_hoverToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverToSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hoverToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverTimeToSelect
// Il2CppName: get_hoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_hoverTimeToSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_hoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverTimeToSelect
// Il2CppName: set_hoverTimeToSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_hoverTimeToSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_hoverTimeToSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_enableUIInteraction
// Il2CppName: get_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_enableUIInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_enableUIInteraction
// Il2CppName: set_enableUIInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_enableUIInteraction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_enableUIInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_allowAnchorControl
// Il2CppName: get_allowAnchorControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_allowAnchorControl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_allowAnchorControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_allowAnchorControl
// Il2CppName: set_allowAnchorControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_allowAnchorControl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_allowAnchorControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_useForceGrab
// Il2CppName: get_useForceGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_useForceGrab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_useForceGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_useForceGrab
// Il2CppName: set_useForceGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_useForceGrab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_useForceGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rotateSpeed
// Il2CppName: get_rotateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_rotateSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_rotateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rotateSpeed
// Il2CppName: set_rotateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_rotateSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_rotateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_translateSpeed
// Il2CppName: get_translateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_translateSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_translateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_translateSpeed
// Il2CppName: set_translateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_translateSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_translateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_angle
// Il2CppName: get_angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Angle
// Il2CppName: get_Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_Angle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_originalAttachTransform
// Il2CppName: get_originalAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_originalAttachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_originalAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_originalAttachTransform
// Il2CppName: set_originalAttachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::set_originalAttachTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "set_originalAttachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_startTransform
// Il2CppName: get_startTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_startTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_startTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RebuildSamplePoints
// Il2CppName: RebuildSamplePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RebuildSamplePoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RebuildSamplePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindOrCreateXRUIInputModule
// Il2CppName: FindOrCreateXRUIInputModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindOrCreateXRUIInputModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "FindOrCreateXRUIInputModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RegisterWithXRUIInputModule
// Il2CppName: RegisterWithXRUIInputModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RegisterWithXRUIInputModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RegisterWithXRUIInputModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UnregisterFromXRUIInputModule
// Il2CppName: UnregisterFromXRUIInputModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UnregisterFromXRUIInputModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UnregisterFromXRUIInputModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RegisterOrUnregisterXRUIInputModule
// Il2CppName: RegisterOrUnregisterXRUIInputModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RegisterOrUnregisterXRUIInputModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RegisterOrUnregisterXRUIInputModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints
// Il2CppName: GetLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<int>, int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* _ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints, numPoints, _});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints
// Il2CppName: GetLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<int>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetLinePoints)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* numPoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints, numPoints});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo
// Il2CppName: TryGetHitInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ByRef<bool>, int)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* positionInLine = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* isValidTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* _ = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetHitInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, normal, positionInLine, isValidTarget, _});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo
// Il2CppName: TryGetHitInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ByRef<bool>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetHitInfo)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* positionInLine = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* isValidTarget = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetHitInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, normal, positionInLine, isValidTarget});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIModel
// Il2CppName: UpdateUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetUIModel
// Il2CppName: TryGetUIModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryGetUIModel)> {
  static const MethodInfo* get() {
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryGetUIModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentRaycastHit
// Il2CppName: GetCurrentRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::RaycastHit>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentRaycastHit)> {
  static const MethodInfo* get() {
    static auto* raycastHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetCurrentRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{raycastHit});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentUIRaycastResult
// Il2CppName: GetCurrentUIRaycastResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(ByRef<::UnityEngine::EventSystems::RaycastResult>, ByRef<int>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetCurrentUIRaycastResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->this_arg;
    static auto* raycastPointIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetCurrentUIRaycastResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, raycastPointIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateBezierControlPoints
// Il2CppName: UpdateBezierControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::UpdateBezierControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "UpdateBezierControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateBezierPoint
// Il2CppName: CalculateBezierPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateBezierPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CalculateBezierPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, start, control, end});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateProjectilePoint
// Il2CppName: CalculateProjectilePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CalculateProjectilePoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* acceleration = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CalculateProjectilePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, start, velocity, acceleration});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindReferenceFrame
// Il2CppName: FindReferenceFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::FindReferenceFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "FindReferenceFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryRead2DAxis
// Il2CppName: TryRead2DAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputAction*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TryRead2DAxis)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TryRead2DAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, output});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor
// Il2CppName: RotateAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::RotateAnchor)> {
  static const MethodInfo* get() {
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* directionAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "RotateAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anchor, directionAmount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TranslateAnchor
// Il2CppName: TranslateAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, float)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::TranslateAnchor)> {
  static const MethodInfo* get() {
    static auto* originalAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* anchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* directionAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "TranslateAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalAnchor, anchor, directionAmount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CheckCollidersBetweenPoints
// Il2CppName: CheckCollidersBetweenPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CheckCollidersBetweenPoints)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CheckCollidersBetweenPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_validTargets
// Il2CppName: get_validTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::get_validTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "get_validTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ProcessInteractor
// Il2CppName: ProcessInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::ProcessInteractor)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "ProcessInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetValidTargets
// Il2CppName: GetValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::GetValidTargets)> {
  static const MethodInfo* get() {
    static auto* validTargets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "GetValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validTargets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover
// Il2CppName: CanHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanHover)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectExiting
// Il2CppName: OnSelectExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectExiting)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnSelectExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectEntering
// Il2CppName: OnSelectEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRRayInteractor::OnSelectEntering)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRRayInteractor*), "OnSelectEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
