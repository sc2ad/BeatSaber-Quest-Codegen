// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.InteractionState
#include "UnityEngine/XR/Interaction/Toolkit/InteractionState.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder
#include "UnityEngine/XR/Interaction/Toolkit/XRInteractionUpdateOrder.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerState
  class XRControllerState;
  // Skipping declaration: UpdateType because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseController
  class XRBaseController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRBaseController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*, "UnityEngine.XR.Interaction.Toolkit", "XRBaseController");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseController
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 97EB84
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class XRBaseController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType
    struct UpdateType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateType
      constexpr UpdateType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static constexpr const int UpdateAndBeforeRender = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_UpdateAndBeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType UpdateAndBeforeRender
      static void _set_UpdateAndBeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static constexpr const int Update = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_Update();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType Update
      static void _set_Update(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static constexpr const int BeforeRender = 2;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType _get_BeforeRender();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType BeforeRender
      static void _set_BeforeRender(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType
    #pragma pack(pop)
    static check_size<sizeof(XRBaseController::UpdateType), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_XRBaseController_UpdateTypeSizeCheck;
    static_assert(sizeof(XRBaseController::UpdateType) == 0x4);
    public:
    // [HeaderAttribute] Offset: 0x97F4DC
    // [TooltipAttribute] Offset: 0x97F4DC
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType m_UpdateTrackingType
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType m_UpdateTrackingType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType) == 0x4);
    // [TooltipAttribute] Offset: 0x97F54C
    // private System.Boolean m_EnableInputTracking
    // Size: 0x1
    // Offset: 0x1C
    bool m_EnableInputTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0x97F598
    // [TooltipAttribute] Offset: 0x97F598
    // private System.Boolean m_EnableInputActions
    // Size: 0x1
    // Offset: 0x1D
    bool m_EnableInputActions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableInputActions and: m_ModelPrefab
    char __padding2[0x2] = {};
    // [HeaderAttribute] Offset: 0x97F608
    // [TooltipAttribute] Offset: 0x97F608
    // private UnityEngine.Transform m_ModelPrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* m_ModelPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x97F678
    // private UnityEngine.Transform m_ModelTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* m_ModelTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x97F6C4
    // private System.Boolean m_AnimateModel
    // Size: 0x1
    // Offset: 0x30
    bool m_AnimateModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AnimateModel and: m_ModelSelectTransition
    char __padding5[0x7] = {};
    // [TooltipAttribute] Offset: 0x97F710
    // private System.String m_ModelSelectTransition
    // Size: 0x8
    // Offset: 0x38
    ::StringW m_ModelSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0x97F75C
    // private System.String m_ModelDeSelectTransition
    // Size: 0x8
    // Offset: 0x40
    ::StringW m_ModelDeSelectTransition;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single m_AnchorControlDeadzone
    // Size: 0x4
    // Offset: 0x48
    float m_AnchorControlDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_AnchorControlOffAxisDeadzone
    // Size: 0x4
    // Offset: 0x4C
    float m_AnchorControlOffAxisDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    // Size: 0x3
    // Offset: 0x50
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_SelectInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    // Size: 0x3
    // Offset: 0x53
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_ActivateInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    // private UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    // Size: 0x3
    // Offset: 0x56
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState m_UIPressInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    // private System.Boolean m_HideControllerModel
    // Size: 0x1
    // Offset: 0x59
    bool m_HideControllerModel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HideControllerModel and: m_ControllerState
    char __padding13[0x6] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRControllerState m_ControllerState
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::XR::Interaction::Toolkit::XRControllerState* m_ControllerState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*) == 0x8);
    // private UnityEngine.GameObject m_ModelGO
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* m_ModelGO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_PerformSetup
    // Size: 0x1
    // Offset: 0x70
    bool m_PerformSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType m_UpdateTrackingType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType& dyn_m_UpdateTrackingType();
    // Get instance field reference: private System.Boolean m_EnableInputTracking
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputTracking();
    // Get instance field reference: private System.Boolean m_EnableInputActions
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableInputActions();
    // Get instance field reference: private UnityEngine.Transform m_ModelPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelPrefab();
    // Get instance field reference: private UnityEngine.Transform m_ModelTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ModelTransform();
    // Get instance field reference: private System.Boolean m_AnimateModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_AnimateModel();
    // Get instance field reference: private System.String m_ModelSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelSelectTransition();
    // Get instance field reference: private System.String m_ModelDeSelectTransition
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ModelDeSelectTransition();
    // Get instance field reference: private System.Single m_AnchorControlDeadzone
    [[deprecated("Use field access instead!")]] float& dyn_m_AnchorControlDeadzone();
    // Get instance field reference: private System.Single m_AnchorControlOffAxisDeadzone
    [[deprecated("Use field access instead!")]] float& dyn_m_AnchorControlOffAxisDeadzone();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_SelectInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_SelectInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_ActivateInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_ActivateInteractionState();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.InteractionState m_UIPressInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_m_UIPressInteractionState();
    // Get instance field reference: private System.Boolean m_HideControllerModel
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideControllerModel();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRControllerState m_ControllerState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRControllerState*& dyn_m_ControllerState();
    // Get instance field reference: private UnityEngine.GameObject m_ModelGO
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_ModelGO();
    // Get instance field reference: private System.Boolean m_PerformSetup
    [[deprecated("Use field access instead!")]] bool& dyn_m_PerformSetup();
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType get_updateTrackingType()
    // Offset: 0xD77E38
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType get_updateTrackingType();
    // public System.Void set_updateTrackingType(UnityEngine.XR.Interaction.Toolkit.XRBaseController/UnityEngine.XR.Interaction.Toolkit.UpdateType value)
    // Offset: 0xD77E40
    void set_updateTrackingType(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType value);
    // public System.Boolean get_enableInputTracking()
    // Offset: 0xD77E48
    bool get_enableInputTracking();
    // public System.Void set_enableInputTracking(System.Boolean value)
    // Offset: 0xD77E50
    void set_enableInputTracking(bool value);
    // public System.Boolean get_enableInputActions()
    // Offset: 0xD77E5C
    bool get_enableInputActions();
    // public System.Void set_enableInputActions(System.Boolean value)
    // Offset: 0xD77E64
    void set_enableInputActions(bool value);
    // public UnityEngine.Transform get_modelPrefab()
    // Offset: 0xD77E70
    ::UnityEngine::Transform* get_modelPrefab();
    // public System.Void set_modelPrefab(UnityEngine.Transform value)
    // Offset: 0xD77E78
    void set_modelPrefab(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_modelTransform()
    // Offset: 0xD77E80
    ::UnityEngine::Transform* get_modelTransform();
    // public System.Void set_modelTransform(UnityEngine.Transform value)
    // Offset: 0xD77E88
    void set_modelTransform(::UnityEngine::Transform* value);
    // public System.Boolean get_animateModel()
    // Offset: 0xD77F40
    bool get_animateModel();
    // public System.Void set_animateModel(System.Boolean value)
    // Offset: 0xD77F48
    void set_animateModel(bool value);
    // public System.String get_modelSelectTransition()
    // Offset: 0xD77F54
    ::StringW get_modelSelectTransition();
    // public System.Void set_modelSelectTransition(System.String value)
    // Offset: 0xD77F5C
    void set_modelSelectTransition(::StringW value);
    // public System.String get_modelDeSelectTransition()
    // Offset: 0xD77F64
    ::StringW get_modelDeSelectTransition();
    // public System.Void set_modelDeSelectTransition(System.String value)
    // Offset: 0xD77F6C
    void set_modelDeSelectTransition(::StringW value);
    // public System.Single get_anchorControlDeadzone()
    // Offset: 0xD77F74
    float get_anchorControlDeadzone();
    // public System.Void set_anchorControlDeadzone(System.Single value)
    // Offset: 0xD77F7C
    void set_anchorControlDeadzone(float value);
    // public System.Single get_anchorControlOffAxisDeadzone()
    // Offset: 0xD77F84
    float get_anchorControlOffAxisDeadzone();
    // public System.Void set_anchorControlOffAxisDeadzone(System.Single value)
    // Offset: 0xD77F8C
    void set_anchorControlOffAxisDeadzone(float value);
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_selectInteractionState()
    // Offset: 0xD77F94
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_selectInteractionState();
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_activateInteractionState()
    // Offset: 0xD77FA4
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_activateInteractionState();
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState get_uiPressInteractionState()
    // Offset: 0xD77FB4
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState get_uiPressInteractionState();
    // public System.Boolean get_hideControllerModel()
    // Offset: 0xD77FC4
    bool get_hideControllerModel();
    // public System.Void set_hideControllerModel(System.Boolean value)
    // Offset: 0xD77FCC
    void set_hideControllerModel(bool value);
    // protected System.Void .ctor()
    // Offset: 0xD7893C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRBaseController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRBaseController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRBaseController*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0xD78084
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0xD7822C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xD782A4
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0xD7831C
    void Update();
    // private System.Void PerformSetup()
    // Offset: 0xD78328
    void PerformSetup();
    // private System.Void SetupModel()
    // Offset: 0xD7832C
    void SetupModel();
    // protected System.Void UpdateController()
    // Offset: 0xD78568
    void UpdateController();
    // protected System.Void OnBeforeRender()
    // Offset: 0xD78644
    void OnBeforeRender();
    // public System.Boolean GetControllerState(out UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD786AC
    bool GetControllerState(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*> controllerState);
    // public System.Void SetControllerState(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD786BC
    void SetControllerState(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void ApplyControllerState(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase, UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD786C4
    void ApplyControllerState(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase, ::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD78784
    void UpdateTrackingInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // System.Void UpdateInputInternal(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD78608
    void UpdateInputInternal(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD78788
    void UpdateInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected System.Void UpdateControllerModelAnimation()
    // Offset: 0xD7878C
    void UpdateControllerModelAnimation();
    // System.Void UpdateControllerPose(UnityEngine.Vector3 localPosition, UnityEngine.Quaternion localRotation)
    // Offset: 0xD788A0
    void UpdateControllerPose(::UnityEngine::Vector3 localPosition, ::UnityEngine::Quaternion localRotation);
    // public System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0xD78934
    bool SendHapticImpulse(float amplitude, float duration);
  }; // UnityEngine.XR.Interaction.Toolkit.XRBaseController
  #pragma pack(pop)
  static check_size<sizeof(XRBaseController), 112 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRBaseControllerSizeCheck;
  static_assert(sizeof(XRBaseController) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType, "UnityEngine.XR.Interaction.Toolkit", "XRBaseController/UpdateType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_updateTrackingType
// Il2CppName: get_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_updateTrackingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_updateTrackingType
// Il2CppName: set_updateTrackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateType)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_updateTrackingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseController/UpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_updateTrackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputTracking
// Il2CppName: get_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputTracking
// Il2CppName: set_enableInputTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputTracking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_enableInputTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputActions
// Il2CppName: get_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_enableInputActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputActions
// Il2CppName: set_enableInputActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_enableInputActions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_enableInputActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelPrefab
// Il2CppName: get_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelPrefab
// Il2CppName: set_modelPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelPrefab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelTransform
// Il2CppName: get_modelTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelTransform
// Il2CppName: set_modelTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_animateModel
// Il2CppName: get_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_animateModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_animateModel
// Il2CppName: set_animateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_animateModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_animateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelSelectTransition
// Il2CppName: get_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelSelectTransition
// Il2CppName: set_modelSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelDeSelectTransition
// Il2CppName: get_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelDeSelectTransition
// Il2CppName: set_modelDeSelectTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::StringW)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_modelDeSelectTransition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_modelDeSelectTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlDeadzone
// Il2CppName: get_anchorControlDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlDeadzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_anchorControlDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlDeadzone
// Il2CppName: set_anchorControlDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlDeadzone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_anchorControlDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlOffAxisDeadzone
// Il2CppName: get_anchorControlOffAxisDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_anchorControlOffAxisDeadzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_anchorControlOffAxisDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlOffAxisDeadzone
// Il2CppName: set_anchorControlOffAxisDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_anchorControlOffAxisDeadzone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_anchorControlOffAxisDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_selectInteractionState
// Il2CppName: get_selectInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_selectInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_selectInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_activateInteractionState
// Il2CppName: get_activateInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_activateInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_activateInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_uiPressInteractionState
// Il2CppName: get_uiPressInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::InteractionState (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_uiPressInteractionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_uiPressInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_hideControllerModel
// Il2CppName: get_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::get_hideControllerModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "get_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_hideControllerModel
// Il2CppName: set_hideControllerModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::set_hideControllerModel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "set_hideControllerModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::PerformSetup
// Il2CppName: PerformSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::PerformSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "PerformSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupModel
// Il2CppName: SetupModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetupModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SetupModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateController
// Il2CppName: UpdateController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetControllerState
// Il2CppName: SetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::ApplyControllerState
// Il2CppName: ApplyControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase, ::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::ApplyControllerState)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "ApplyControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase, controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateTrackingInput
// Il2CppName: UpdateTrackingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateTrackingInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateTrackingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInputInternal
// Il2CppName: UpdateInputInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInputInternal)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateInputInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInput
// Il2CppName: UpdateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerModelAnimation
// Il2CppName: UpdateControllerModelAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerModelAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateControllerModelAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerPose
// Il2CppName: UpdateControllerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::UpdateControllerPose)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* localRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "UpdateControllerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, localRotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRBaseController::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRBaseController::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::XRBaseController::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRBaseController*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
