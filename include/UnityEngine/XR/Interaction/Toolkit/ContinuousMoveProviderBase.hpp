// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
#include "UnityEngine/XR/Interaction/Toolkit/LocomotionProvider.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: CharacterController
  class CharacterController;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: GravityApplicationMode because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: ContinuousMoveProviderBase
  class ContinuousMoveProviderBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*, "UnityEngine.XR.Interaction.Toolkit", "ContinuousMoveProviderBase");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase
  // [TokenAttribute] Offset: FFFFFFFF
  class ContinuousMoveProviderBase : public ::UnityEngine::XR::Interaction::Toolkit::LocomotionProvider {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode
    struct GravityApplicationMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct GravityApplicationMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GravityApplicationMode
      constexpr GravityApplicationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode AttemptingMove
      static constexpr const int AttemptingMove = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode AttemptingMove
      static ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode _get_AttemptingMove();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode AttemptingMove
      static void _set_AttemptingMove(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode Immediately
      static constexpr const int Immediately = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode Immediately
      static ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode _get_Immediately();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode Immediately
      static void _set_Immediately(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode
    #pragma pack(pop)
    static check_size<sizeof(ContinuousMoveProviderBase::GravityApplicationMode), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_ContinuousMoveProviderBase_GravityApplicationModeSizeCheck;
    static_assert(sizeof(ContinuousMoveProviderBase::GravityApplicationMode) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x981A50
    // private System.Single m_MoveSpeed
    // Size: 0x4
    // Offset: 0x30
    float m_MoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x981A9C
    // private System.Boolean m_EnableStrafe
    // Size: 0x1
    // Offset: 0x34
    bool m_EnableStrafe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x981AE8
    // private System.Boolean m_UseGravity
    // Size: 0x1
    // Offset: 0x35
    bool m_UseGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseGravity and: m_GravityApplicationMode
    char __padding2[0x2] = {};
    // [TooltipAttribute] Offset: 0x981B34
    // private UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode m_GravityApplicationMode
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode m_GravityApplicationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode) == 0x4);
    // Padding between fields: m_GravityApplicationMode and: m_ForwardSource
    char __padding3[0x4] = {};
    // [TooltipAttribute] Offset: 0x981B80
    // private UnityEngine.Transform m_ForwardSource
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* m_ForwardSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.CharacterController m_CharacterController
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::CharacterController* m_CharacterController;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterController*) == 0x8);
    // private System.Boolean m_AttemptedGetCharacterController
    // Size: 0x1
    // Offset: 0x50
    bool m_AttemptedGetCharacterController;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AttemptedGetCharacterController and: m_VerticalVelocity
    char __padding6[0x3] = {};
    // private UnityEngine.Vector3 m_VerticalVelocity
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 m_VerticalVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Single m_MoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_m_MoveSpeed();
    // Get instance field reference: private System.Boolean m_EnableStrafe
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableStrafe();
    // Get instance field reference: private System.Boolean m_UseGravity
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseGravity();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode m_GravityApplicationMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode& dyn_m_GravityApplicationMode();
    // Get instance field reference: private UnityEngine.Transform m_ForwardSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ForwardSource();
    // Get instance field reference: private UnityEngine.CharacterController m_CharacterController
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& dyn_m_CharacterController();
    // Get instance field reference: private System.Boolean m_AttemptedGetCharacterController
    [[deprecated("Use field access instead!")]] bool& dyn_m_AttemptedGetCharacterController();
    // Get instance field reference: private UnityEngine.Vector3 m_VerticalVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_VerticalVelocity();
    // public System.Single get_moveSpeed()
    // Offset: 0xFE498C
    float get_moveSpeed();
    // public System.Void set_moveSpeed(System.Single value)
    // Offset: 0xFE4994
    void set_moveSpeed(float value);
    // public System.Boolean get_enableStrafe()
    // Offset: 0xFE499C
    bool get_enableStrafe();
    // public System.Void set_enableStrafe(System.Boolean value)
    // Offset: 0xFE49A4
    void set_enableStrafe(bool value);
    // public System.Boolean get_useGravity()
    // Offset: 0xFE49B0
    bool get_useGravity();
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0xFE49B8
    void set_useGravity(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode get_gravityApplicationMode()
    // Offset: 0xFE49C4
    ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode get_gravityApplicationMode();
    // public System.Void set_gravityApplicationMode(UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase/UnityEngine.XR.Interaction.Toolkit.GravityApplicationMode value)
    // Offset: 0xFE49CC
    void set_gravityApplicationMode(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode value);
    // public UnityEngine.Transform get_forwardSource()
    // Offset: 0xFE49D4
    ::UnityEngine::Transform* get_forwardSource();
    // public System.Void set_forwardSource(UnityEngine.Transform value)
    // Offset: 0xFE49DC
    void set_forwardSource(::UnityEngine::Transform* value);
    // protected System.Void Update()
    // Offset: 0xFE49E4
    void Update();
    // protected UnityEngine.Vector2 ReadInput()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 ReadInput();
    // protected UnityEngine.Vector3 ComputeDesiredMove(UnityEngine.Vector2 input)
    // Offset: 0xFE4B90
    ::UnityEngine::Vector3 ComputeDesiredMove(::UnityEngine::Vector2 input);
    // protected System.Void MoveRig(UnityEngine.Vector3 translationInWorldSpace)
    // Offset: 0xFE4FA8
    void MoveRig(::UnityEngine::Vector3 translationInWorldSpace);
    // private System.Void FindCharacterController()
    // Offset: 0xFE52EC
    void FindCharacterController();
    // protected System.Void .ctor()
    // Offset: 0xFE2BA4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContinuousMoveProviderBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContinuousMoveProviderBase*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase
  #pragma pack(pop)
  static check_size<sizeof(ContinuousMoveProviderBase), 84 + sizeof(::UnityEngine::Vector3)> __UnityEngine_XR_Interaction_Toolkit_ContinuousMoveProviderBaseSizeCheck;
  static_assert(sizeof(ContinuousMoveProviderBase) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode, "UnityEngine.XR.Interaction.Toolkit", "ContinuousMoveProviderBase/GravityApplicationMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_moveSpeed
// Il2CppName: get_moveSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_moveSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "get_moveSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_moveSpeed
// Il2CppName: set_moveSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_moveSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "set_moveSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_enableStrafe
// Il2CppName: get_enableStrafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_enableStrafe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "get_enableStrafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_enableStrafe
// Il2CppName: set_enableStrafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_enableStrafe)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "set_enableStrafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_useGravity
// Il2CppName: get_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_useGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "get_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_useGravity
// Il2CppName: set_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_useGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "set_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_gravityApplicationMode
// Il2CppName: get_gravityApplicationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_gravityApplicationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "get_gravityApplicationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_gravityApplicationMode
// Il2CppName: set_gravityApplicationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::GravityApplicationMode)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_gravityApplicationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "ContinuousMoveProviderBase/GravityApplicationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "set_gravityApplicationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_forwardSource
// Il2CppName: get_forwardSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::get_forwardSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "get_forwardSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_forwardSource
// Il2CppName: set_forwardSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::set_forwardSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "set_forwardSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::ReadInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::ComputeDesiredMove
// Il2CppName: ComputeDesiredMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(::UnityEngine::Vector2)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::ComputeDesiredMove)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "ComputeDesiredMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::MoveRig
// Il2CppName: MoveRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)(::UnityEngine::Vector3)>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::MoveRig)> {
  static const MethodInfo* get() {
    static auto* translationInWorldSpace = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "MoveRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translationInWorldSpace});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::FindCharacterController
// Il2CppName: FindCharacterController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::FindCharacterController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase*), "FindCharacterController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
