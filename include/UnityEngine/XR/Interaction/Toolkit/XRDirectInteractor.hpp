// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseControllerInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: XRBaseInteractable because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRDirectInteractor
  class XRDirectInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*, "UnityEngine.XR.Interaction.Toolkit", "XRDirectInteractor");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97EF74
  class XRDirectInteractor : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseControllerInteractor {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::$$c
    class $$c;
    public:
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_ValidTargets
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* m_ValidTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable,System.Single> m_InteractableDistanceSqrMap
    // Size: 0x8
    // Offset: 0x110
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*, float>* m_InteractableDistanceSqrMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*, float>*) == 0x8);
    // private System.Comparison`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_InteractableSortComparison
    // Size: 0x8
    // Offset: 0x118
    ::System::Comparison_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* m_InteractableSortComparison;
    // Field size check
    static_assert(sizeof(::System::Comparison_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_ValidTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*& dyn_m_ValidTargets();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable,System.Single> m_InteractableDistanceSqrMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*, float>*& dyn_m_InteractableDistanceSqrMap();
    // Get instance field reference: private System.Comparison`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> m_InteractableSortComparison
    [[deprecated("Use field access instead!")]] ::System::Comparison_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*& dyn_m_InteractableSortComparison();
    // protected System.Void OnTriggerEnter(UnityEngine.Collider col)
    // Offset: 0xD7D33C
    void OnTriggerEnter(::UnityEngine::Collider* col);
    // protected System.Void OnTriggerExit(UnityEngine.Collider col)
    // Offset: 0xD7D4DC
    void OnTriggerExit(::UnityEngine::Collider* col);
    // private System.Int32 InteractableSortComparison(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable x, UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable y)
    // Offset: 0xD7D904
    int InteractableSortComparison(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* x, ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* y);
    // protected override System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> get_validTargets()
    // Offset: 0xD7D190
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> XRBaseControllerInteractor::get_validTargets()
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* get_validTargets();
    // public System.Void .ctor()
    // Offset: 0xD7D9A8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::.ctor()
    // Base method: System.Void XRBaseInteractor::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRDirectInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRDirectInteractor*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xD7D198
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseControllerInteractor
    // Base method: System.Void XRBaseControllerInteractor::Awake()
    void Awake();
    // public override System.Void GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> validTargets)
    // Offset: 0xD7D5A0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Void XRBaseInteractor::GetValidTargets(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable> validTargets)
    void GetValidTargets(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* validTargets);
    // public override System.Boolean CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD7D744
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanHover(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanHover(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
    // public override System.Boolean CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    // Offset: 0xD7D824
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor
    // Base method: System.Boolean XRBaseInteractor::CanSelect(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable interactable)
    bool CanSelect(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* interactable);
  }; // UnityEngine.XR.Interaction.Toolkit.XRDirectInteractor
  #pragma pack(pop)
  static check_size<sizeof(XRDirectInteractor), 280 + sizeof(::System::Comparison_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)> __UnityEngine_XR_Interaction_Toolkit_XRDirectInteractorSizeCheck;
  static_assert(sizeof(XRDirectInteractor) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::UnityEngine::Collider*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::InteractableSortComparison
// Il2CppName: InteractableSortComparison
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*, ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::InteractableSortComparison)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "InteractableSortComparison", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::get_validTargets
// Il2CppName: get_validTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>* (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::get_validTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "get_validTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::GetValidTargets
// Il2CppName: GetValidTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::GetValidTargets)> {
  static const MethodInfo* get() {
    static auto* validTargets = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "GetValidTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{validTargets});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::CanHover
// Il2CppName: CanHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::CanHover)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "CanHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*)>(&UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRDirectInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
