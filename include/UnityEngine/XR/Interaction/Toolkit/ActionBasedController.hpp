// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseController
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseController.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Skipping declaration: InteractionState because it is already included!
  // Forward declaring type: XRControllerState
  class XRControllerState;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: ActionBasedController
  class ActionBasedController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::ActionBasedController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::ActionBasedController*, "UnityEngine.XR.Interaction.Toolkit", "ActionBasedController");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x13C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.ActionBasedController
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97EB4C
  class ActionBasedController : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseController {
    public:
    // Writing base type padding for base size: 0x71 to desired offset: 0x78
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.InputSystem.InputActionProperty m_PositionAction
    // Size: 0x18
    // Offset: 0x78
    ::UnityEngine::InputSystem::InputActionProperty m_PositionAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_RotationAction
    // Size: 0x18
    // Offset: 0x90
    ::UnityEngine::InputSystem::InputActionProperty m_RotationAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_SelectAction
    // Size: 0x18
    // Offset: 0xA8
    ::UnityEngine::InputSystem::InputActionProperty m_SelectAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_ActivateAction
    // Size: 0x18
    // Offset: 0xC0
    ::UnityEngine::InputSystem::InputActionProperty m_ActivateAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_UIPressAction
    // Size: 0x18
    // Offset: 0xD8
    ::UnityEngine::InputSystem::InputActionProperty m_UIPressAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_HapticDeviceAction
    // Size: 0x18
    // Offset: 0xF0
    ::UnityEngine::InputSystem::InputActionProperty m_HapticDeviceAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_RotateAnchorAction
    // Size: 0x18
    // Offset: 0x108
    ::UnityEngine::InputSystem::InputActionProperty m_RotateAnchorAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private UnityEngine.InputSystem.InputActionProperty m_TranslateAnchorAction
    // Size: 0x18
    // Offset: 0x120
    ::UnityEngine::InputSystem::InputActionProperty m_TranslateAnchorAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // private System.Single m_ButtonPressPoint
    // Size: 0x4
    // Offset: 0x138
    float m_ButtonPressPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_PositionAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_PositionAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RotationAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RotationAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_SelectAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_SelectAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_ActivateAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_ActivateAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_UIPressAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_UIPressAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_HapticDeviceAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_HapticDeviceAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RotateAnchorAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RotateAnchorAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_TranslateAnchorAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_TranslateAnchorAction();
    // Get instance field reference: private System.Single m_ButtonPressPoint
    [[deprecated("Use field access instead!")]] float& dyn_m_ButtonPressPoint();
    // public UnityEngine.InputSystem.InputActionProperty get_positionAction()
    // Offset: 0xFE2EDC
    ::UnityEngine::InputSystem::InputActionProperty get_positionAction();
    // public System.Void set_positionAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2EF0
    void set_positionAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rotationAction()
    // Offset: 0xFE2FC0
    ::UnityEngine::InputSystem::InputActionProperty get_rotationAction();
    // public System.Void set_rotationAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2FD4
    void set_rotationAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_selectAction()
    // Offset: 0xFE3008
    ::UnityEngine::InputSystem::InputActionProperty get_selectAction();
    // public System.Void set_selectAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE301C
    void set_selectAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_activateAction()
    // Offset: 0xFE3050
    ::UnityEngine::InputSystem::InputActionProperty get_activateAction();
    // public System.Void set_activateAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE3064
    void set_activateAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_uiPressAction()
    // Offset: 0xFE3098
    ::UnityEngine::InputSystem::InputActionProperty get_uiPressAction();
    // public System.Void set_uiPressAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE30AC
    void set_uiPressAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_hapticDeviceAction()
    // Offset: 0xFE30E0
    ::UnityEngine::InputSystem::InputActionProperty get_hapticDeviceAction();
    // public System.Void set_hapticDeviceAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE30F4
    void set_hapticDeviceAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rotateAnchorAction()
    // Offset: 0xFE3128
    ::UnityEngine::InputSystem::InputActionProperty get_rotateAnchorAction();
    // public System.Void set_rotateAnchorAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE3140
    void set_rotateAnchorAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_translateAnchorAction()
    // Offset: 0xFE3174
    ::UnityEngine::InputSystem::InputActionProperty get_translateAnchorAction();
    // public System.Void set_translateAnchorAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE3188
    void set_translateAnchorAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public System.Single get_buttonPressPoint()
    // Offset: 0xFE31BC
    float get_buttonPressPoint();
    // public System.Void set_buttonPressPoint(System.Single value)
    // Offset: 0xFE31C4
    void set_buttonPressPoint(float value);
    // private System.Void EnableAllDirectActions()
    // Offset: 0xFE31F4
    void EnableAllDirectActions();
    // private System.Void DisableAllDirectActions()
    // Offset: 0xFE3304
    void DisableAllDirectActions();
    // private System.Void SetInputActionProperty(ref UnityEngine.InputSystem.InputActionProperty property, UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2F24
    void SetInputActionProperty(ByRef<::UnityEngine::InputSystem::InputActionProperty> property, ::UnityEngine::InputSystem::InputActionProperty value);
    // static private System.Void ComputeInteractionActionStates(System.Boolean pressed, ref UnityEngine.XR.Interaction.Toolkit.InteractionState interactionState)
    // Offset: 0xFE367C
    static void ComputeInteractionActionStates(bool pressed, ByRef<::UnityEngine::XR::Interaction::Toolkit::InteractionState> interactionState);
    // private System.Boolean <UpdateInput>g__IsPressed|39_0(UnityEngine.InputSystem.InputActionProperty property)
    // Offset: 0xFE35D4
    bool $UpdateInput$g__IsPressed_39_0(::UnityEngine::InputSystem::InputActionProperty property);
    // public System.Void .ctor()
    // Offset: 0xFE3778
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Void XRBaseController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActionBasedController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::ActionBasedController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActionBasedController*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0xFE31CC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Void XRBaseController::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0xFE32DC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Void XRBaseController::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xFE33EC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Void XRBaseController::UpdateTrackingInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    void UpdateTrackingInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // protected override System.Void UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xFE34D0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Void XRBaseController::UpdateInput(UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    void UpdateInput(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* controllerState);
    // public override System.Boolean SendHapticImpulse(System.Single amplitude, System.Single duration)
    // Offset: 0xFE36A8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseController
    // Base method: System.Boolean XRBaseController::SendHapticImpulse(System.Single amplitude, System.Single duration)
    bool SendHapticImpulse(float amplitude, float duration);
  }; // UnityEngine.XR.Interaction.Toolkit.ActionBasedController
  #pragma pack(pop)
  static check_size<sizeof(ActionBasedController), 312 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_ActionBasedControllerSizeCheck;
  static_assert(sizeof(ActionBasedController) == 0x13C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_positionAction
// Il2CppName: get_positionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_positionAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_positionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_positionAction
// Il2CppName: set_positionAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_positionAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_positionAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_rotationAction
// Il2CppName: get_rotationAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_rotationAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_rotationAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_rotationAction
// Il2CppName: set_rotationAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_rotationAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_rotationAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_selectAction
// Il2CppName: get_selectAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_selectAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_selectAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_selectAction
// Il2CppName: set_selectAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_selectAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_selectAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_activateAction
// Il2CppName: get_activateAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_activateAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_activateAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_activateAction
// Il2CppName: set_activateAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_activateAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_activateAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_uiPressAction
// Il2CppName: get_uiPressAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_uiPressAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_uiPressAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_uiPressAction
// Il2CppName: set_uiPressAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_uiPressAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_uiPressAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_hapticDeviceAction
// Il2CppName: get_hapticDeviceAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_hapticDeviceAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_hapticDeviceAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_hapticDeviceAction
// Il2CppName: set_hapticDeviceAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_hapticDeviceAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_hapticDeviceAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_rotateAnchorAction
// Il2CppName: get_rotateAnchorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_rotateAnchorAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_rotateAnchorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_rotateAnchorAction
// Il2CppName: set_rotateAnchorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_rotateAnchorAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_rotateAnchorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_translateAnchorAction
// Il2CppName: get_translateAnchorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_translateAnchorAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_translateAnchorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_translateAnchorAction
// Il2CppName: set_translateAnchorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_translateAnchorAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_translateAnchorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_buttonPressPoint
// Il2CppName: get_buttonPressPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::get_buttonPressPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "get_buttonPressPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_buttonPressPoint
// Il2CppName: set_buttonPressPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::set_buttonPressPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "set_buttonPressPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::EnableAllDirectActions
// Il2CppName: EnableAllDirectActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::EnableAllDirectActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "EnableAllDirectActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::DisableAllDirectActions
// Il2CppName: DisableAllDirectActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::DisableAllDirectActions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "DisableAllDirectActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::SetInputActionProperty
// Il2CppName: SetInputActionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(ByRef<::UnityEngine::InputSystem::InputActionProperty>, ::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::SetInputActionProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "SetInputActionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::ComputeInteractionActionStates
// Il2CppName: ComputeInteractionActionStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<::UnityEngine::XR::Interaction::Toolkit::InteractionState>)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::ComputeInteractionActionStates)> {
  static const MethodInfo* get() {
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* interactionState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "InteractionState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "ComputeInteractionActionStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressed, interactionState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::$UpdateInput$g__IsPressed_39_0
// Il2CppName: <UpdateInput>g__IsPressed|39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::$UpdateInput$g__IsPressed_39_0)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "<UpdateInput>g__IsPressed|39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::UpdateTrackingInput
// Il2CppName: UpdateTrackingInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::UpdateTrackingInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "UpdateTrackingInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::UpdateInput
// Il2CppName: UpdateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::UpdateInput)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "UpdateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedController::SendHapticImpulse
// Il2CppName: SendHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::ActionBasedController::*)(float, float)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedController::SendHapticImpulse)> {
  static const MethodInfo* get() {
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedController*), "SendHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amplitude, duration});
  }
};
