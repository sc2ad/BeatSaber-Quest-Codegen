// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerState
  class XRControllerState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerRecording
  class XRControllerRecording;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*, "UnityEngine.XR.Interaction.Toolkit", "XRControllerRecording");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRControllerRecording
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: 97EC58
  // [PreferBinarySerialization] Offset: FFFFFFFF
  class XRControllerRecording : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0x97FBD8
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerState> m_Frames
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>* m_Frames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerState> m_Frames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>*& dyn_m_Frames();
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRControllerState> get_frames()
    // Offset: 0xD7CBEC
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>* get_frames();
    // public System.Double get_duration()
    // Offset: 0xD7C518
    double get_duration();
    // public System.Void .ctor()
    // Offset: 0xD7CEAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerRecording* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerRecording*, creationType>()));
    }
    // public System.Void AddRecordingFrame(System.Double time, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean selectActive, System.Boolean activateActive, System.Boolean pressActive)
    // Offset: 0xD7CBF4
    void AddRecordingFrame(double time, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool selectActive, bool activateActive, bool pressActive);
    // public System.Void AddRecordingFrame(UnityEngine.XR.Interaction.Toolkit.XRControllerState state)
    // Offset: 0xD7C790
    void AddRecordingFrame(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* state);
    // public System.Void InitRecording()
    // Offset: 0xD7C40C
    void InitRecording();
    // public System.Void SaveRecording()
    // Offset: 0xD7C464
    void SaveRecording();
  }; // UnityEngine.XR.Interaction.Toolkit.XRControllerRecording
  #pragma pack(pop)
  static check_size<sizeof(XRControllerRecording), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>*)> __UnityEngine_XR_Interaction_Toolkit_XRControllerRecordingSizeCheck;
  static_assert(sizeof(XRControllerRecording) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_frames
// Il2CppName: get_frames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>* (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_frames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "get_frames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame
// Il2CppName: AddRecordingFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)(double, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool, bool, bool)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* selectActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* activateActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pressActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "AddRecordingFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, position, rotation, selectActive, activateActive, pressActive});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame
// Il2CppName: AddRecordingFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::AddRecordingFrame)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "AddRecordingFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::InitRecording
// Il2CppName: InitRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::InitRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "InitRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::SaveRecording
// Il2CppName: SaveRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecording::SaveRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*), "SaveRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
