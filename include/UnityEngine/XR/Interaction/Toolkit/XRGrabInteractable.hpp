// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType
#include "UnityEngine/XR/Interaction/Toolkit/XRBaseInteractable_MovementType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRGrabInteractable
  class XRGrabInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*, "UnityEngine.XR.Interaction.Toolkit", "XRGrabInteractable");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x198
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  // [SelectionBaseAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: 97ED2C
  // [AddComponentMenu] Offset: 97ED2C
  class XRGrabInteractable : public ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable {
    public:
    public:
    // [TooltipAttribute] Offset: 0x98024C
    // private UnityEngine.Transform m_AttachTransform
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* m_AttachTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x980298
    // private System.Single m_AttachEaseInTime
    // Size: 0x4
    // Offset: 0xA8
    float m_AttachEaseInTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x9802E4
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType m_MovementType
    // Size: 0x4
    // Offset: 0xAC
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType m_MovementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType) == 0x4);
    // [TooltipAttribute] Offset: 0x980330
    // private System.Boolean m_TrackPosition
    // Size: 0x1
    // Offset: 0xB0
    bool m_TrackPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x98037C
    // private System.Boolean m_SmoothPosition
    // Size: 0x1
    // Offset: 0xB1
    bool m_SmoothPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SmoothPosition and: m_SmoothPositionAmount
    char __padding4[0x2] = {};
    // [RangeAttribute] Offset: 0x9803C8
    // [TooltipAttribute] Offset: 0x9803C8
    // private System.Single m_SmoothPositionAmount
    // Size: 0x4
    // Offset: 0xB4
    float m_SmoothPositionAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98042C
    // [TooltipAttribute] Offset: 0x98042C
    // private System.Single m_TightenPosition
    // Size: 0x4
    // Offset: 0xB8
    float m_TightenPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x980490
    // private System.Boolean m_TrackRotation
    // Size: 0x1
    // Offset: 0xBC
    bool m_TrackRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9804DC
    // private System.Boolean m_SmoothRotation
    // Size: 0x1
    // Offset: 0xBD
    bool m_SmoothRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SmoothRotation and: m_SmoothRotationAmount
    char __padding8[0x2] = {};
    // [RangeAttribute] Offset: 0x980528
    // [TooltipAttribute] Offset: 0x980528
    // private System.Single m_SmoothRotationAmount
    // Size: 0x4
    // Offset: 0xC0
    float m_SmoothRotationAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x98058C
    // [TooltipAttribute] Offset: 0x98058C
    // private System.Single m_TightenRotation
    // Size: 0x4
    // Offset: 0xC4
    float m_TightenRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x9805F0
    // private System.Boolean m_ThrowOnDetach
    // Size: 0x1
    // Offset: 0xC8
    bool m_ThrowOnDetach;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ThrowOnDetach and: m_ThrowSmoothingDuration
    char __padding11[0x3] = {};
    // [TooltipAttribute] Offset: 0x98063C
    // private System.Single m_ThrowSmoothingDuration
    // Size: 0x4
    // Offset: 0xCC
    float m_ThrowSmoothingDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x980688
    // private UnityEngine.AnimationCurve m_ThrowSmoothingCurve
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::AnimationCurve* m_ThrowSmoothingCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0x9806D4
    // private System.Single m_ThrowVelocityScale
    // Size: 0x4
    // Offset: 0xD8
    float m_ThrowVelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x980720
    // private System.Single m_ThrowAngularVelocityScale
    // Size: 0x4
    // Offset: 0xDC
    float m_ThrowAngularVelocityScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98076C
    // private System.Boolean m_GravityOnDetach
    // Size: 0x1
    // Offset: 0xE0
    bool m_GravityOnDetach;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9807B8
    // private System.Boolean m_RetainTransformParent
    // Size: 0x1
    // Offset: 0xE1
    bool m_RetainTransformParent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RetainTransformParent and: m_SelectingInteractor
    char __padding17[0x6] = {};
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor m_SelectingInteractor
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* m_SelectingInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*) == 0x8);
    // private UnityEngine.Vector3 m_InteractorLocalPosition
    // Size: 0xC
    // Offset: 0xF0
    ::UnityEngine::Vector3 m_InteractorLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_InteractorLocalRotation
    // Size: 0x10
    // Offset: 0xFC
    ::UnityEngine::Quaternion m_InteractorLocalRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 m_TargetWorldPosition
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 m_TargetWorldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_TargetWorldRotation
    // Size: 0x10
    // Offset: 0x118
    ::UnityEngine::Quaternion m_TargetWorldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single m_CurrentAttachEaseTime
    // Size: 0x4
    // Offset: 0x128
    float m_CurrentAttachEaseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType m_CurrentMovementType
    // Size: 0x4
    // Offset: 0x12C
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType m_CurrentMovementType;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType) == 0x4);
    // private System.Boolean m_DetachInLateUpdate
    // Size: 0x1
    // Offset: 0x130
    bool m_DetachInLateUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DetachInLateUpdate and: m_DetachVelocity
    char __padding25[0x3] = {};
    // private UnityEngine.Vector3 m_DetachVelocity
    // Size: 0xC
    // Offset: 0x134
    ::UnityEngine::Vector3 m_DetachVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_DetachAngularVelocity
    // Size: 0xC
    // Offset: 0x140
    ::UnityEngine::Vector3 m_DetachAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 m_ThrowSmoothingCurrentFrame
    // Size: 0x4
    // Offset: 0x14C
    int m_ThrowSmoothingCurrentFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single[] m_ThrowSmoothingFrameTimes
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<float> m_ThrowSmoothingFrameTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly UnityEngine.Vector3[] m_ThrowSmoothingVelocityFrames
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::UnityEngine::Vector3> m_ThrowSmoothingVelocityFrames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private readonly UnityEngine.Vector3[] m_ThrowSmoothingAngularVelocityFrames
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::Vector3> m_ThrowSmoothingAngularVelocityFrames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Rigidbody m_Rigidbody
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Rigidbody* m_Rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Vector3 m_LastPosition
    // Size: 0xC
    // Offset: 0x170
    ::UnityEngine::Vector3 m_LastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_LastRotation
    // Size: 0x10
    // Offset: 0x17C
    ::UnityEngine::Quaternion m_LastRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean m_WasKinematic
    // Size: 0x1
    // Offset: 0x18C
    bool m_WasKinematic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UsedGravity
    // Size: 0x1
    // Offset: 0x18D
    bool m_UsedGravity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UsedGravity and: m_OriginalSceneParent
    char __padding36[0x2] = {};
    // private UnityEngine.Transform m_OriginalSceneParent
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::Transform* m_OriginalSceneParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // static field const value: static private System.Single k_DefaultTighteningAmount
    static constexpr const float k_DefaultTighteningAmount = 0.5;
    // Get static field: static private System.Single k_DefaultTighteningAmount
    static float _get_k_DefaultTighteningAmount();
    // Set static field: static private System.Single k_DefaultTighteningAmount
    static void _set_k_DefaultTighteningAmount(float value);
    // static field const value: static private System.Single k_DefaultSmoothingAmount
    static constexpr const float k_DefaultSmoothingAmount = 5;
    // Get static field: static private System.Single k_DefaultSmoothingAmount
    static float _get_k_DefaultSmoothingAmount();
    // Set static field: static private System.Single k_DefaultSmoothingAmount
    static void _set_k_DefaultSmoothingAmount(float value);
    // static field const value: static private System.Single k_VelocityPredictionFactor
    static constexpr const float k_VelocityPredictionFactor = 0.6;
    // Get static field: static private System.Single k_VelocityPredictionFactor
    static float _get_k_VelocityPredictionFactor();
    // Set static field: static private System.Single k_VelocityPredictionFactor
    static void _set_k_VelocityPredictionFactor(float value);
    // static field const value: static private System.Single k_AngularVelocityDamping
    static constexpr const float k_AngularVelocityDamping = 0.95;
    // Get static field: static private System.Single k_AngularVelocityDamping
    static float _get_k_AngularVelocityDamping();
    // Set static field: static private System.Single k_AngularVelocityDamping
    static void _set_k_AngularVelocityDamping(float value);
    // static field const value: static private System.Int32 k_ThrowSmoothingFrameCount
    static constexpr const int k_ThrowSmoothingFrameCount = 20;
    // Get static field: static private System.Int32 k_ThrowSmoothingFrameCount
    static int _get_k_ThrowSmoothingFrameCount();
    // Set static field: static private System.Int32 k_ThrowSmoothingFrameCount
    static void _set_k_ThrowSmoothingFrameCount(int value);
    // static field const value: static private System.Single k_DefaultAttachEaseInTime
    static constexpr const float k_DefaultAttachEaseInTime = 0.15;
    // Get static field: static private System.Single k_DefaultAttachEaseInTime
    static float _get_k_DefaultAttachEaseInTime();
    // Set static field: static private System.Single k_DefaultAttachEaseInTime
    static void _set_k_DefaultAttachEaseInTime(float value);
    // static field const value: static private System.Single k_DefaultThrowSmoothingDuration
    static constexpr const float k_DefaultThrowSmoothingDuration = 0.25;
    // Get static field: static private System.Single k_DefaultThrowSmoothingDuration
    static float _get_k_DefaultThrowSmoothingDuration();
    // Set static field: static private System.Single k_DefaultThrowSmoothingDuration
    static void _set_k_DefaultThrowSmoothingDuration(float value);
    // static field const value: static private System.Single k_DefaultThrowVelocityScale
    static constexpr const float k_DefaultThrowVelocityScale = 1.5;
    // Get static field: static private System.Single k_DefaultThrowVelocityScale
    static float _get_k_DefaultThrowVelocityScale();
    // Set static field: static private System.Single k_DefaultThrowVelocityScale
    static void _set_k_DefaultThrowVelocityScale(float value);
    // static field const value: static private System.Single k_DefaultThrowAngularVelocityScale
    static constexpr const float k_DefaultThrowAngularVelocityScale = 1;
    // Get static field: static private System.Single k_DefaultThrowAngularVelocityScale
    static float _get_k_DefaultThrowAngularVelocityScale();
    // Set static field: static private System.Single k_DefaultThrowAngularVelocityScale
    static void _set_k_DefaultThrowAngularVelocityScale(float value);
    // Get instance field reference: private UnityEngine.Transform m_AttachTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_AttachTransform();
    // Get instance field reference: private System.Single m_AttachEaseInTime
    [[deprecated("Use field access instead!")]] float& dyn_m_AttachEaseInTime();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType m_MovementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType& dyn_m_MovementType();
    // Get instance field reference: private System.Boolean m_TrackPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_TrackPosition();
    // Get instance field reference: private System.Boolean m_SmoothPosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_SmoothPosition();
    // Get instance field reference: private System.Single m_SmoothPositionAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_SmoothPositionAmount();
    // Get instance field reference: private System.Single m_TightenPosition
    [[deprecated("Use field access instead!")]] float& dyn_m_TightenPosition();
    // Get instance field reference: private System.Boolean m_TrackRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_TrackRotation();
    // Get instance field reference: private System.Boolean m_SmoothRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_SmoothRotation();
    // Get instance field reference: private System.Single m_SmoothRotationAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_SmoothRotationAmount();
    // Get instance field reference: private System.Single m_TightenRotation
    [[deprecated("Use field access instead!")]] float& dyn_m_TightenRotation();
    // Get instance field reference: private System.Boolean m_ThrowOnDetach
    [[deprecated("Use field access instead!")]] bool& dyn_m_ThrowOnDetach();
    // Get instance field reference: private System.Single m_ThrowSmoothingDuration
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowSmoothingDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve m_ThrowSmoothingCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_ThrowSmoothingCurve();
    // Get instance field reference: private System.Single m_ThrowVelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowVelocityScale();
    // Get instance field reference: private System.Single m_ThrowAngularVelocityScale
    [[deprecated("Use field access instead!")]] float& dyn_m_ThrowAngularVelocityScale();
    // Get instance field reference: private System.Boolean m_GravityOnDetach
    [[deprecated("Use field access instead!")]] bool& dyn_m_GravityOnDetach();
    // Get instance field reference: private System.Boolean m_RetainTransformParent
    [[deprecated("Use field access instead!")]] bool& dyn_m_RetainTransformParent();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor m_SelectingInteractor
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*& dyn_m_SelectingInteractor();
    // Get instance field reference: private UnityEngine.Vector3 m_InteractorLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_InteractorLocalPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_InteractorLocalRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_InteractorLocalRotation();
    // Get instance field reference: private UnityEngine.Vector3 m_TargetWorldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_TargetWorldPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_TargetWorldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_TargetWorldRotation();
    // Get instance field reference: private System.Single m_CurrentAttachEaseTime
    [[deprecated("Use field access instead!")]] float& dyn_m_CurrentAttachEaseTime();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType m_CurrentMovementType
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType& dyn_m_CurrentMovementType();
    // Get instance field reference: private System.Boolean m_DetachInLateUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_DetachInLateUpdate();
    // Get instance field reference: private UnityEngine.Vector3 m_DetachVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DetachVelocity();
    // Get instance field reference: private UnityEngine.Vector3 m_DetachAngularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_DetachAngularVelocity();
    // Get instance field reference: private System.Int32 m_ThrowSmoothingCurrentFrame
    [[deprecated("Use field access instead!")]] int& dyn_m_ThrowSmoothingCurrentFrame();
    // Get instance field reference: private readonly System.Single[] m_ThrowSmoothingFrameTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_ThrowSmoothingFrameTimes();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ThrowSmoothingVelocityFrames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ThrowSmoothingVelocityFrames();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ThrowSmoothingAngularVelocityFrames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ThrowSmoothingAngularVelocityFrames();
    // Get instance field reference: private UnityEngine.Rigidbody m_Rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_m_Rigidbody();
    // Get instance field reference: private UnityEngine.Vector3 m_LastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_LastPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_LastRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_LastRotation();
    // Get instance field reference: private System.Boolean m_WasKinematic
    [[deprecated("Use field access instead!")]] bool& dyn_m_WasKinematic();
    // Get instance field reference: private System.Boolean m_UsedGravity
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsedGravity();
    // Get instance field reference: private UnityEngine.Transform m_OriginalSceneParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_OriginalSceneParent();
    // public UnityEngine.Transform get_attachTransform()
    // Offset: 0xD7DAC4
    ::UnityEngine::Transform* get_attachTransform();
    // public System.Void set_attachTransform(UnityEngine.Transform value)
    // Offset: 0xD7DACC
    void set_attachTransform(::UnityEngine::Transform* value);
    // public System.Single get_attachEaseInTime()
    // Offset: 0xD7DAD4
    float get_attachEaseInTime();
    // public System.Void set_attachEaseInTime(System.Single value)
    // Offset: 0xD7DADC
    void set_attachEaseInTime(float value);
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType get_movementType()
    // Offset: 0xD7DAE4
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType get_movementType();
    // public System.Void set_movementType(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable/UnityEngine.XR.Interaction.Toolkit.MovementType value)
    // Offset: 0xD7DAEC
    void set_movementType(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType value);
    // public System.Boolean get_trackPosition()
    // Offset: 0xD7DAF4
    bool get_trackPosition();
    // public System.Void set_trackPosition(System.Boolean value)
    // Offset: 0xD7DAFC
    void set_trackPosition(bool value);
    // public System.Boolean get_smoothPosition()
    // Offset: 0xD7DB08
    bool get_smoothPosition();
    // public System.Void set_smoothPosition(System.Boolean value)
    // Offset: 0xD7DB10
    void set_smoothPosition(bool value);
    // public System.Single get_smoothPositionAmount()
    // Offset: 0xD7DB1C
    float get_smoothPositionAmount();
    // public System.Void set_smoothPositionAmount(System.Single value)
    // Offset: 0xD7DB24
    void set_smoothPositionAmount(float value);
    // public System.Single get_tightenPosition()
    // Offset: 0xD7DB2C
    float get_tightenPosition();
    // public System.Void set_tightenPosition(System.Single value)
    // Offset: 0xD7DB34
    void set_tightenPosition(float value);
    // public System.Boolean get_trackRotation()
    // Offset: 0xD7DB3C
    bool get_trackRotation();
    // public System.Void set_trackRotation(System.Boolean value)
    // Offset: 0xD7DB44
    void set_trackRotation(bool value);
    // public System.Boolean get_smoothRotation()
    // Offset: 0xD7DB50
    bool get_smoothRotation();
    // public System.Void set_smoothRotation(System.Boolean value)
    // Offset: 0xD7DB58
    void set_smoothRotation(bool value);
    // public System.Single get_smoothRotationAmount()
    // Offset: 0xD7DB64
    float get_smoothRotationAmount();
    // public System.Void set_smoothRotationAmount(System.Single value)
    // Offset: 0xD7DB6C
    void set_smoothRotationAmount(float value);
    // public System.Single get_tightenRotation()
    // Offset: 0xD7DB74
    float get_tightenRotation();
    // public System.Void set_tightenRotation(System.Single value)
    // Offset: 0xD7DB7C
    void set_tightenRotation(float value);
    // public System.Boolean get_throwOnDetach()
    // Offset: 0xD7DB84
    bool get_throwOnDetach();
    // public System.Void set_throwOnDetach(System.Boolean value)
    // Offset: 0xD7DB8C
    void set_throwOnDetach(bool value);
    // public System.Single get_throwSmoothingDuration()
    // Offset: 0xD7DB98
    float get_throwSmoothingDuration();
    // public System.Void set_throwSmoothingDuration(System.Single value)
    // Offset: 0xD7DBA0
    void set_throwSmoothingDuration(float value);
    // public UnityEngine.AnimationCurve get_throwSmoothingCurve()
    // Offset: 0xD7DBA8
    ::UnityEngine::AnimationCurve* get_throwSmoothingCurve();
    // public System.Void set_throwSmoothingCurve(UnityEngine.AnimationCurve value)
    // Offset: 0xD7DBB0
    void set_throwSmoothingCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_throwVelocityScale()
    // Offset: 0xD7DBB8
    float get_throwVelocityScale();
    // public System.Void set_throwVelocityScale(System.Single value)
    // Offset: 0xD7DBC0
    void set_throwVelocityScale(float value);
    // public System.Single get_throwAngularVelocityScale()
    // Offset: 0xD7DBC8
    float get_throwAngularVelocityScale();
    // public System.Void set_throwAngularVelocityScale(System.Single value)
    // Offset: 0xD7DBD0
    void set_throwAngularVelocityScale(float value);
    // public System.Boolean get_gravityOnDetach()
    // Offset: 0xD7DBD8
    bool get_gravityOnDetach();
    // public System.Void set_gravityOnDetach(System.Boolean value)
    // Offset: 0xD7DBE0
    void set_gravityOnDetach(bool value);
    // public System.Boolean get_retainTransformParent()
    // Offset: 0xD7DBEC
    bool get_retainTransformParent();
    // public System.Void set_retainTransformParent(System.Boolean value)
    // Offset: 0xD7DBF4
    void set_retainTransformParent(bool value);
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor get_selectingInteractor()
    // Offset: 0xD7DC00
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* get_selectingInteractor();
    // private UnityEngine.Vector3 GetWorldAttachPosition(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7EC4C
    ::UnityEngine::Vector3 GetWorldAttachPosition(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private UnityEngine.Quaternion GetWorldAttachRotation(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7ED88
    ::UnityEngine::Quaternion GetWorldAttachRotation(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void UpdateTarget(System.Single timeDelta)
    // Offset: 0xD7E494
    void UpdateTarget(float timeDelta);
    // private System.Void PerformInstantaneousUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0xD7EB54
    void PerformInstantaneousUpdate(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // private System.Void PerformKinematicUpdate(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0xD7DEA8
    void PerformKinematicUpdate(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // private System.Void PerformVelocityTrackingUpdate(System.Single timeDelta, UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0xD7E05C
    void PerformVelocityTrackingUpdate(float timeDelta, ::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // private System.Void Detach()
    // Offset: 0xD7EBE4
    void Detach();
    // private System.Void UpdateInteractorLocalPose(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7EE6C
    void UpdateInteractorLocalPose(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal System.Void Drop()
    // Offset: 0xD7F54C
    void Drop();
    // private System.Void SmoothVelocityStart()
    // Offset: 0xD7F398
    void SmoothVelocityStart();
    // private System.Void SmoothVelocityEnd()
    // Offset: 0xD7F6BC
    void SmoothVelocityEnd();
    // private System.Void SmoothVelocityUpdate()
    // Offset: 0xD7E79C
    void SmoothVelocityUpdate();
    // private UnityEngine.Vector3 GetSmoothedVelocityValue(UnityEngine.Vector3[] velocityFrames)
    // Offset: 0xD7F7C8
    ::UnityEngine::Vector3 GetSmoothedVelocityValue(::ArrayW<::UnityEngine::Vector3> velocityFrames);
    // public System.Void .ctor()
    // Offset: 0xD7FA98
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRGrabInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRGrabInteractable*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0xD7DC08
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::Awake()
    void Awake();
    // public override System.Void ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    // Offset: 0xD7DD2C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::ProcessInteractable(UnityEngine.XR.Interaction.Toolkit.XRInteractionUpdateOrder/UnityEngine.XR.Interaction.Toolkit.UpdatePhase updatePhase)
    void ProcessInteractable(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase updatePhase);
    // protected internal override System.Void OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7F128
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectEntering(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    void OnSelectEntering(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal override System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7F4AC
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    void OnSelectEntered(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal override System.Void OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7F544
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectExiting(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    void OnSelectExiting(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // protected internal override System.Void OnSelectCanceling(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7F6B4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Void XRBaseInteractable::OnSelectCanceling(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    void OnSelectCanceling(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // public override System.Boolean IsHoverableBy(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0xD7F7C0
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable
    // Base method: System.Boolean XRBaseInteractable::IsHoverableBy(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    bool IsHoverableBy(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
  }; // UnityEngine.XR.Interaction.Toolkit.XRGrabInteractable
  #pragma pack(pop)
  static check_size<sizeof(XRGrabInteractable), 400 + sizeof(::UnityEngine::Transform*)> __UnityEngine_XR_Interaction_Toolkit_XRGrabInteractableSizeCheck;
  static_assert(sizeof(XRGrabInteractable) == 0x198);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachTransform
// Il2CppName: get_attachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_attachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachTransform
// Il2CppName: set_attachTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::Transform*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_attachTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachEaseInTime
// Il2CppName: get_attachEaseInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_attachEaseInTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_attachEaseInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachEaseInTime
// Il2CppName: set_attachEaseInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_attachEaseInTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_attachEaseInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_movementType
// Il2CppName: get_movementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_movementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_movementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_movementType
// Il2CppName: set_movementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable::MovementType)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_movementType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractable/MovementType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_movementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackPosition
// Il2CppName: get_trackPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_trackPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackPosition
// Il2CppName: set_trackPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_trackPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPosition
// Il2CppName: get_smoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPosition
// Il2CppName: set_smoothPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPositionAmount
// Il2CppName: get_smoothPositionAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothPositionAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothPositionAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPositionAmount
// Il2CppName: set_smoothPositionAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothPositionAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothPositionAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenPosition
// Il2CppName: get_tightenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_tightenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenPosition
// Il2CppName: set_tightenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_tightenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackRotation
// Il2CppName: get_trackRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_trackRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_trackRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackRotation
// Il2CppName: set_trackRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_trackRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_trackRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotation
// Il2CppName: get_smoothRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotation
// Il2CppName: set_smoothRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotationAmount
// Il2CppName: get_smoothRotationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_smoothRotationAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_smoothRotationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotationAmount
// Il2CppName: set_smoothRotationAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_smoothRotationAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_smoothRotationAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenRotation
// Il2CppName: get_tightenRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_tightenRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_tightenRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenRotation
// Il2CppName: set_tightenRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_tightenRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_tightenRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwOnDetach
// Il2CppName: get_throwOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwOnDetach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwOnDetach
// Il2CppName: set_throwOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwOnDetach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingDuration
// Il2CppName: get_throwSmoothingDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwSmoothingDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingDuration
// Il2CppName: set_throwSmoothingDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwSmoothingDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingCurve
// Il2CppName: get_throwSmoothingCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwSmoothingCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwSmoothingCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingCurve
// Il2CppName: set_throwSmoothingCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwSmoothingCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwSmoothingCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwVelocityScale
// Il2CppName: get_throwVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwVelocityScale
// Il2CppName: set_throwVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwAngularVelocityScale
// Il2CppName: get_throwAngularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_throwAngularVelocityScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_throwAngularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwAngularVelocityScale
// Il2CppName: set_throwAngularVelocityScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_throwAngularVelocityScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_throwAngularVelocityScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_gravityOnDetach
// Il2CppName: get_gravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_gravityOnDetach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_gravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_gravityOnDetach
// Il2CppName: set_gravityOnDetach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_gravityOnDetach)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_gravityOnDetach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_retainTransformParent
// Il2CppName: get_retainTransformParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_retainTransformParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_retainTransformParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_retainTransformParent
// Il2CppName: set_retainTransformParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::set_retainTransformParent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "set_retainTransformParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_selectingInteractor
// Il2CppName: get_selectingInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::get_selectingInteractor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "get_selectingInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetWorldAttachPosition
// Il2CppName: GetWorldAttachPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetWorldAttachPosition)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetWorldAttachPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetWorldAttachRotation
// Il2CppName: GetWorldAttachRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetWorldAttachRotation)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetWorldAttachRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* timeDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeDelta});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformInstantaneousUpdate
// Il2CppName: PerformInstantaneousUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformInstantaneousUpdate)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformInstantaneousUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformKinematicUpdate
// Il2CppName: PerformKinematicUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformKinematicUpdate)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformKinematicUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformVelocityTrackingUpdate
// Il2CppName: PerformVelocityTrackingUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(float, ::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::PerformVelocityTrackingUpdate)> {
  static const MethodInfo* get() {
    static auto* timeDelta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "PerformVelocityTrackingUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeDelta, updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Detach
// Il2CppName: Detach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Detach)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Detach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateInteractorLocalPose
// Il2CppName: UpdateInteractorLocalPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::UpdateInteractorLocalPose)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "UpdateInteractorLocalPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Drop
// Il2CppName: Drop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Drop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Drop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityStart
// Il2CppName: SmoothVelocityStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SmoothVelocityStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityEnd
// Il2CppName: SmoothVelocityEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SmoothVelocityEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityUpdate
// Il2CppName: SmoothVelocityUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::SmoothVelocityUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "SmoothVelocityUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSmoothedVelocityValue
// Il2CppName: GetSmoothedVelocityValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::GetSmoothedVelocityValue)> {
  static const MethodInfo* get() {
    static auto* velocityFrames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "GetSmoothedVelocityValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{velocityFrames});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ProcessInteractable
// Il2CppName: ProcessInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRInteractionUpdateOrder::UpdatePhase)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::ProcessInteractable)> {
  static const MethodInfo* get() {
    static auto* updatePhase = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRInteractionUpdateOrder/UpdatePhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "ProcessInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatePhase});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntering
// Il2CppName: OnSelectEntering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntering)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectEntering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntered
// Il2CppName: OnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExiting
// Il2CppName: OnSelectExiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectExiting)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectExiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectCanceling
// Il2CppName: OnSelectCanceling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::OnSelectCanceling)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "OnSelectCanceling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::IsHoverableBy
// Il2CppName: IsHoverableBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable::IsHoverableBy)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRGrabInteractable*), "IsHoverableBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
