// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.IXRCustomReticleProvider
#include "UnityEngine/XR/Interaction/Toolkit/IXRCustomReticleProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: ILineRenderable
  class ILineRenderable;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRInteractorLineVisual
  class XRInteractorLineVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*, "UnityEngine.XR.Interaction.Toolkit", "XRInteractorLineVisual");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0xD9
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97EE30
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: 97EE30
  // [DefaultExecutionOrder] Offset: 97EE30
  class XRInteractorLineVisual : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::XR::Interaction::Toolkit::IXRCustomReticleProvider*/ {
    public:
    public:
    // [RangeAttribute] Offset: 0x980804
    // [TooltipAttribute] Offset: 0x980804
    // private System.Single m_LineWidth
    // Size: 0x4
    // Offset: 0x18
    float m_LineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x980870
    // private System.Boolean m_OverrideInteractorLineLength
    // Size: 0x1
    // Offset: 0x1C
    bool m_OverrideInteractorLineLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OverrideInteractorLineLength and: m_LineLength
    char __padding1[0x3] = {};
    // [TooltipAttribute] Offset: 0x9808BC
    // private System.Single m_LineLength
    // Size: 0x4
    // Offset: 0x20
    float m_LineLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_LineLength and: m_WidthCurve
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0x980908
    // private UnityEngine.AnimationCurve m_WidthCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* m_WidthCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0x980954
    // private UnityEngine.Gradient m_ValidColorGradient
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Gradient* m_ValidColorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // [TooltipAttribute] Offset: 0x9809A0
    // private UnityEngine.Gradient m_InvalidColorGradient
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Gradient* m_InvalidColorGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // [TooltipAttribute] Offset: 0x9809EC
    // private System.Boolean m_SmoothMovement
    // Size: 0x1
    // Offset: 0x40
    bool m_SmoothMovement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SmoothMovement and: m_FollowTightness
    char __padding6[0x3] = {};
    // [TooltipAttribute] Offset: 0x980A38
    // private System.Single m_FollowTightness
    // Size: 0x4
    // Offset: 0x44
    float m_FollowTightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x980A84
    // private System.Single m_SnapThresholdDistance
    // Size: 0x4
    // Offset: 0x48
    float m_SnapThresholdDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_SnapThresholdDistance and: m_Reticle
    char __padding8[0x4] = {};
    // [TooltipAttribute] Offset: 0x980AD0
    // private UnityEngine.GameObject m_Reticle
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* m_Reticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [TooltipAttribute] Offset: 0x980B1C
    // private System.Boolean m_StopLineAtFirstRaycastHit
    // Size: 0x1
    // Offset: 0x58
    bool m_StopLineAtFirstRaycastHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_StopLineAtFirstRaycastHit and: m_ReticlePos
    char __padding10[0x3] = {};
    // private UnityEngine.Vector3 m_ReticlePos
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 m_ReticlePos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_ReticleNormal
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 m_ReticleNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 m_EndPositionInLine
    // Size: 0x4
    // Offset: 0x74
    int m_EndPositionInLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_SnapCurve
    // Size: 0x1
    // Offset: 0x78
    bool m_SnapCurve;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PerformSetup
    // Size: 0x1
    // Offset: 0x79
    bool m_PerformSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PerformSetup and: m_ReticleToUse
    char __padding15[0x6] = {};
    // private UnityEngine.GameObject m_ReticleToUse
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* m_ReticleToUse;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.LineRenderer m_LineRenderer
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::LineRenderer* m_LineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.ILineRenderable m_LineRenderable
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::XR::Interaction::Toolkit::ILineRenderable* m_LineRenderable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::ILineRenderable*) == 0x8);
    // private UnityEngine.Vector3[] m_TargetPoints
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::Vector3> m_TargetPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 m_NoTargetPoints
    // Size: 0x4
    // Offset: 0xA0
    int m_NoTargetPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_NoTargetPoints and: m_RenderPoints
    char __padding20[0x4] = {};
    // private UnityEngine.Vector3[] m_RenderPoints
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::Vector3> m_RenderPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 m_NoRenderPoints
    // Size: 0x4
    // Offset: 0xB0
    int m_NoRenderPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_NoRenderPoints and: m_PreviousRenderPoints
    char __padding22[0x4] = {};
    // private UnityEngine.Vector3[] m_PreviousRenderPoints
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::UnityEngine::Vector3> m_PreviousRenderPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 m_NoPreviousRenderPoints
    // Size: 0x4
    // Offset: 0xC0
    int m_NoPreviousRenderPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_NoPreviousRenderPoints and: m_ClearArray
    char __padding24[0x4] = {};
    // private readonly UnityEngine.Vector3[] m_ClearArray
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::Vector3> m_ClearArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.GameObject m_CustomReticle
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::GameObject* m_CustomReticle;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_CustomReticleAttached
    // Size: 0x1
    // Offset: 0xD8
    bool m_CustomReticleAttached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::XR::Interaction::Toolkit::IXRCustomReticleProvider
    operator ::UnityEngine::XR::Interaction::Toolkit::IXRCustomReticleProvider() noexcept {
      return *reinterpret_cast<::UnityEngine::XR::Interaction::Toolkit::IXRCustomReticleProvider*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single k_MinLineWidth
    static constexpr const float k_MinLineWidth = 0.0001;
    // Get static field: static private System.Single k_MinLineWidth
    static float _get_k_MinLineWidth();
    // Set static field: static private System.Single k_MinLineWidth
    static void _set_k_MinLineWidth(float value);
    // static field const value: static private System.Single k_MaxLineWidth
    static constexpr const float k_MaxLineWidth = 0.05;
    // Get static field: static private System.Single k_MaxLineWidth
    static float _get_k_MaxLineWidth();
    // Set static field: static private System.Single k_MaxLineWidth
    static void _set_k_MaxLineWidth(float value);
    // Get instance field reference: private System.Single m_LineWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_LineWidth();
    // Get instance field reference: private System.Boolean m_OverrideInteractorLineLength
    [[deprecated("Use field access instead!")]] bool& dyn_m_OverrideInteractorLineLength();
    // Get instance field reference: private System.Single m_LineLength
    [[deprecated("Use field access instead!")]] float& dyn_m_LineLength();
    // Get instance field reference: private UnityEngine.AnimationCurve m_WidthCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_WidthCurve();
    // Get instance field reference: private UnityEngine.Gradient m_ValidColorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_m_ValidColorGradient();
    // Get instance field reference: private UnityEngine.Gradient m_InvalidColorGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_m_InvalidColorGradient();
    // Get instance field reference: private System.Boolean m_SmoothMovement
    [[deprecated("Use field access instead!")]] bool& dyn_m_SmoothMovement();
    // Get instance field reference: private System.Single m_FollowTightness
    [[deprecated("Use field access instead!")]] float& dyn_m_FollowTightness();
    // Get instance field reference: private System.Single m_SnapThresholdDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_SnapThresholdDistance();
    // Get instance field reference: private UnityEngine.GameObject m_Reticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_Reticle();
    // Get instance field reference: private System.Boolean m_StopLineAtFirstRaycastHit
    [[deprecated("Use field access instead!")]] bool& dyn_m_StopLineAtFirstRaycastHit();
    // Get instance field reference: private UnityEngine.Vector3 m_ReticlePos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_ReticlePos();
    // Get instance field reference: private UnityEngine.Vector3 m_ReticleNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_ReticleNormal();
    // Get instance field reference: private System.Int32 m_EndPositionInLine
    [[deprecated("Use field access instead!")]] int& dyn_m_EndPositionInLine();
    // Get instance field reference: private System.Boolean m_SnapCurve
    [[deprecated("Use field access instead!")]] bool& dyn_m_SnapCurve();
    // Get instance field reference: private System.Boolean m_PerformSetup
    [[deprecated("Use field access instead!")]] bool& dyn_m_PerformSetup();
    // Get instance field reference: private UnityEngine.GameObject m_ReticleToUse
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_ReticleToUse();
    // Get instance field reference: private UnityEngine.LineRenderer m_LineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_m_LineRenderer();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.ILineRenderable m_LineRenderable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::ILineRenderable*& dyn_m_LineRenderable();
    // Get instance field reference: private UnityEngine.Vector3[] m_TargetPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_TargetPoints();
    // Get instance field reference: private System.Int32 m_NoTargetPoints
    [[deprecated("Use field access instead!")]] int& dyn_m_NoTargetPoints();
    // Get instance field reference: private UnityEngine.Vector3[] m_RenderPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_RenderPoints();
    // Get instance field reference: private System.Int32 m_NoRenderPoints
    [[deprecated("Use field access instead!")]] int& dyn_m_NoRenderPoints();
    // Get instance field reference: private UnityEngine.Vector3[] m_PreviousRenderPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_PreviousRenderPoints();
    // Get instance field reference: private System.Int32 m_NoPreviousRenderPoints
    [[deprecated("Use field access instead!")]] int& dyn_m_NoPreviousRenderPoints();
    // Get instance field reference: private readonly UnityEngine.Vector3[] m_ClearArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_ClearArray();
    // Get instance field reference: private UnityEngine.GameObject m_CustomReticle
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_CustomReticle();
    // Get instance field reference: private System.Boolean m_CustomReticleAttached
    [[deprecated("Use field access instead!")]] bool& dyn_m_CustomReticleAttached();
    // public System.Single get_lineWidth()
    // Offset: 0xD81470
    float get_lineWidth();
    // public System.Void set_lineWidth(System.Single value)
    // Offset: 0xD81478
    void set_lineWidth(float value);
    // public System.Boolean get_overrideInteractorLineLength()
    // Offset: 0xD81488
    bool get_overrideInteractorLineLength();
    // public System.Void set_overrideInteractorLineLength(System.Boolean value)
    // Offset: 0xD81490
    void set_overrideInteractorLineLength(bool value);
    // public System.Single get_lineLength()
    // Offset: 0xD8149C
    float get_lineLength();
    // public System.Void set_lineLength(System.Single value)
    // Offset: 0xD814A4
    void set_lineLength(float value);
    // public UnityEngine.AnimationCurve get_widthCurve()
    // Offset: 0xD814AC
    ::UnityEngine::AnimationCurve* get_widthCurve();
    // public System.Void set_widthCurve(UnityEngine.AnimationCurve value)
    // Offset: 0xD814B4
    void set_widthCurve(::UnityEngine::AnimationCurve* value);
    // public UnityEngine.Gradient get_validColorGradient()
    // Offset: 0xD814C4
    ::UnityEngine::Gradient* get_validColorGradient();
    // public System.Void set_validColorGradient(UnityEngine.Gradient value)
    // Offset: 0xD814CC
    void set_validColorGradient(::UnityEngine::Gradient* value);
    // public UnityEngine.Gradient get_invalidColorGradient()
    // Offset: 0xD814D4
    ::UnityEngine::Gradient* get_invalidColorGradient();
    // public System.Void set_invalidColorGradient(UnityEngine.Gradient value)
    // Offset: 0xD814DC
    void set_invalidColorGradient(::UnityEngine::Gradient* value);
    // public System.Boolean get_smoothMovement()
    // Offset: 0xD814E4
    bool get_smoothMovement();
    // public System.Void set_smoothMovement(System.Boolean value)
    // Offset: 0xD814EC
    void set_smoothMovement(bool value);
    // public System.Single get_followTightness()
    // Offset: 0xD814F8
    float get_followTightness();
    // public System.Void set_followTightness(System.Single value)
    // Offset: 0xD81500
    void set_followTightness(float value);
    // public System.Single get_snapThresholdDistance()
    // Offset: 0xD81508
    float get_snapThresholdDistance();
    // public System.Void set_snapThresholdDistance(System.Single value)
    // Offset: 0xD81510
    void set_snapThresholdDistance(float value);
    // public UnityEngine.GameObject get_reticle()
    // Offset: 0xD81518
    ::UnityEngine::GameObject* get_reticle();
    // public System.Void set_reticle(UnityEngine.GameObject value)
    // Offset: 0xD81520
    void set_reticle(::UnityEngine::GameObject* value);
    // public System.Boolean get_stopLineAtFirstRaycastHit()
    // Offset: 0xD81528
    bool get_stopLineAtFirstRaycastHit();
    // public System.Void set_stopLineAtFirstRaycastHit(System.Boolean value)
    // Offset: 0xD81530
    void set_stopLineAtFirstRaycastHit(bool value);
    // public System.Void .ctor()
    // Offset: 0xD82554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRInteractorLineVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRInteractorLineVisual*, creationType>()));
    }
    // protected System.Void Reset()
    // Offset: 0xD8153C
    void Reset();
    // protected System.Void OnValidate()
    // Offset: 0xD8177C
    void OnValidate();
    // protected System.Void Awake()
    // Offset: 0xD81780
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0xD8182C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xD818B4
    void OnDisable();
    // private System.Void ClearLineRenderer()
    // Offset: 0xD8165C
    void ClearLineRenderer();
    // private System.Void OnBeforeRenderLineVisual()
    // Offset: 0xD8197C
    void OnBeforeRenderLineVisual();
    // private System.Void UpdateLineVisual()
    // Offset: 0xD81980
    void UpdateLineVisual();
    // private System.Void UpdateSettings()
    // Offset: 0xD816B4
    void UpdateSettings();
    // private System.Boolean TryFindLineRenderer()
    // Offset: 0xD81578
    bool TryFindLineRenderer();
    // public System.Boolean AttachCustomReticle(UnityEngine.GameObject reticleInstance)
    // Offset: 0xD8232C
    bool AttachCustomReticle(::UnityEngine::GameObject* reticleInstance);
    // public System.Boolean RemoveCustomReticle()
    // Offset: 0xD8246C
    bool RemoveCustomReticle();
  }; // UnityEngine.XR.Interaction.Toolkit.XRInteractorLineVisual
  #pragma pack(pop)
  static check_size<sizeof(XRInteractorLineVisual), 216 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRInteractorLineVisualSizeCheck;
  static_assert(sizeof(XRInteractorLineVisual) == 0xD9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_lineWidth
// Il2CppName: get_lineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_lineWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_lineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_lineWidth
// Il2CppName: set_lineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_lineWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_lineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_overrideInteractorLineLength
// Il2CppName: get_overrideInteractorLineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_overrideInteractorLineLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_overrideInteractorLineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_overrideInteractorLineLength
// Il2CppName: set_overrideInteractorLineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_overrideInteractorLineLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_overrideInteractorLineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_lineLength
// Il2CppName: get_lineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_lineLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_lineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_lineLength
// Il2CppName: set_lineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_lineLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_lineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_widthCurve
// Il2CppName: get_widthCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_widthCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_widthCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_widthCurve
// Il2CppName: set_widthCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_widthCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_widthCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_validColorGradient
// Il2CppName: get_validColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_validColorGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_validColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_validColorGradient
// Il2CppName: set_validColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(::UnityEngine::Gradient*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_validColorGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_validColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_invalidColorGradient
// Il2CppName: get_invalidColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_invalidColorGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_invalidColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_invalidColorGradient
// Il2CppName: set_invalidColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(::UnityEngine::Gradient*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_invalidColorGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_invalidColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_smoothMovement
// Il2CppName: get_smoothMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_smoothMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_smoothMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_smoothMovement
// Il2CppName: set_smoothMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_smoothMovement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_smoothMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_followTightness
// Il2CppName: get_followTightness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_followTightness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_followTightness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_followTightness
// Il2CppName: set_followTightness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_followTightness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_followTightness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_snapThresholdDistance
// Il2CppName: get_snapThresholdDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_snapThresholdDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_snapThresholdDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_snapThresholdDistance
// Il2CppName: set_snapThresholdDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_snapThresholdDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_snapThresholdDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_reticle
// Il2CppName: get_reticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_reticle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_reticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_reticle
// Il2CppName: set_reticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(::UnityEngine::GameObject*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_reticle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_reticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_stopLineAtFirstRaycastHit
// Il2CppName: get_stopLineAtFirstRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::get_stopLineAtFirstRaycastHit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "get_stopLineAtFirstRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_stopLineAtFirstRaycastHit
// Il2CppName: set_stopLineAtFirstRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::set_stopLineAtFirstRaycastHit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "set_stopLineAtFirstRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::ClearLineRenderer
// Il2CppName: ClearLineRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::ClearLineRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "ClearLineRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnBeforeRenderLineVisual
// Il2CppName: OnBeforeRenderLineVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::OnBeforeRenderLineVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "OnBeforeRenderLineVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::UpdateLineVisual
// Il2CppName: UpdateLineVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::UpdateLineVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "UpdateLineVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::UpdateSettings
// Il2CppName: UpdateSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::UpdateSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "UpdateSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::TryFindLineRenderer
// Il2CppName: TryFindLineRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::TryFindLineRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "TryFindLineRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::AttachCustomReticle
// Il2CppName: AttachCustomReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)(::UnityEngine::GameObject*)>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::AttachCustomReticle)> {
  static const MethodInfo* get() {
    static auto* reticleInstance = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "AttachCustomReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reticleInstance});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::RemoveCustomReticle
// Il2CppName: RemoveCustomReticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual::RemoveCustomReticle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRInteractorLineVisual*), "RemoveCustomReticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
