// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerRecording
  class XRControllerRecording;
  // Forward declaring type: XRBaseController
  class XRBaseController;
  // Forward declaring type: XRControllerState
  class XRControllerState;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerRecorder
  class XRControllerRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*, "UnityEngine.XR.Interaction.Toolkit", "XRControllerRecorder");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x4E
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRControllerRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97EBF8
  // [DefaultExecutionOrder] Offset: 97EBF8
  class XRControllerRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0x97FAC0
    // [TooltipAttribute] Offset: 0x97FAC0
    // private System.Boolean m_PlayOnStart
    // Size: 0x1
    // Offset: 0x18
    bool m_PlayOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PlayOnStart and: m_Recording
    char __padding0[0x7] = {};
    // [TooltipAttribute] Offset: 0x97FB30
    // private UnityEngine.XR.Interaction.Toolkit.XRControllerRecording m_Recording
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording* m_Recording;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*) == 0x8);
    // [TooltipAttribute] Offset: 0x97FB7C
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseController m_XRController
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController* m_XRController;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*) == 0x8);
    // private System.Double m_CurrentTime
    // Size: 0x8
    // Offset: 0x30
    double m_CurrentTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single <recordingStartTime>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float recordingStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_IsRecording
    // Size: 0x1
    // Offset: 0x3C
    bool m_IsRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsPlaying
    // Size: 0x1
    // Offset: 0x3D
    bool m_IsPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsPlaying and: m_LastPlaybackTime
    char __padding6[0x2] = {};
    // private System.Double m_LastPlaybackTime
    // Size: 0x8
    // Offset: 0x40
    double m_LastPlaybackTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 m_LastFrameIdx
    // Size: 0x4
    // Offset: 0x48
    int m_LastFrameIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_PrevEnableInputActions
    // Size: 0x1
    // Offset: 0x4C
    bool m_PrevEnableInputActions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_PrevEnableInputTracking
    // Size: 0x1
    // Offset: 0x4D
    bool m_PrevEnableInputTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean m_PlayOnStart
    [[deprecated("Use field access instead!")]] bool& dyn_m_PlayOnStart();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRControllerRecording m_Recording
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*& dyn_m_Recording();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseController m_XRController
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseController*& dyn_m_XRController();
    // Get instance field reference: private System.Double m_CurrentTime
    [[deprecated("Use field access instead!")]] double& dyn_m_CurrentTime();
    // Get instance field reference: private System.Single <recordingStartTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$recordingStartTime$k__BackingField();
    // Get instance field reference: private System.Boolean m_IsRecording
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsRecording();
    // Get instance field reference: private System.Boolean m_IsPlaying
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsPlaying();
    // Get instance field reference: private System.Double m_LastPlaybackTime
    [[deprecated("Use field access instead!")]] double& dyn_m_LastPlaybackTime();
    // Get instance field reference: private System.Int32 m_LastFrameIdx
    [[deprecated("Use field access instead!")]] int& dyn_m_LastFrameIdx();
    // Get instance field reference: private System.Boolean m_PrevEnableInputActions
    [[deprecated("Use field access instead!")]] bool& dyn_m_PrevEnableInputActions();
    // Get instance field reference: private System.Boolean m_PrevEnableInputTracking
    [[deprecated("Use field access instead!")]] bool& dyn_m_PrevEnableInputTracking();
    // public System.Boolean get_playOnStart()
    // Offset: 0xD7C19C
    bool get_playOnStart();
    // public System.Void set_playOnStart(System.Boolean value)
    // Offset: 0xD7C1A4
    void set_playOnStart(bool value);
    // UnityEngine.XR.Interaction.Toolkit.XRControllerRecording get_recording()
    // Offset: 0xD7C1B0
    ::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording* get_recording();
    // System.Void set_recording(UnityEngine.XR.Interaction.Toolkit.XRControllerRecording value)
    // Offset: 0xD7C1B8
    void set_recording(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording* value);
    // public UnityEngine.XR.Interaction.Toolkit.XRBaseController get_xrController()
    // Offset: 0xD7C1C0
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseController* get_xrController();
    // public System.Void set_xrController(UnityEngine.XR.Interaction.Toolkit.XRBaseController value)
    // Offset: 0xD7C1C8
    void set_xrController(::UnityEngine::XR::Interaction::Toolkit::XRBaseController* value);
    // public System.Boolean get_isRecording()
    // Offset: 0xD7C1D0
    bool get_isRecording();
    // public System.Void set_isRecording(System.Boolean value)
    // Offset: 0xD7C1D8
    void set_isRecording(bool value);
    // public System.Boolean get_isPlaying()
    // Offset: 0xD7C468
    bool get_isPlaying();
    // public System.Void set_isPlaying(System.Boolean value)
    // Offset: 0xD7C2A4
    void set_isPlaying(bool value);
    // public System.Double get_currentTime()
    // Offset: 0xD7C47C
    double get_currentTime();
    // public System.Double get_duration()
    // Offset: 0xD7C484
    double get_duration();
    // protected System.Single get_recordingStartTime()
    // Offset: 0xD7C58C
    float get_recordingStartTime();
    // protected System.Void set_recordingStartTime(System.Single value)
    // Offset: 0xD7C594
    void set_recordingStartTime(float value);
    // public System.Void .ctor()
    // Offset: 0xD7CBE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerRecorder*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0xD7C59C
    void Awake();
    // protected System.Void Update()
    // Offset: 0xD7C64C
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0xD7CA6C
    void OnDestroy();
    // public System.Void ResetPlayback()
    // Offset: 0xD7C470
    void ResetPlayback();
    // private System.Void UpdatePlaybackTime(System.Double playbackTime)
    // Offset: 0xD7C818
    void UpdatePlaybackTime(double playbackTime);
    // public System.Boolean GetControllerState(out UnityEngine.XR.Interaction.Toolkit.XRControllerState controllerState)
    // Offset: 0xD7CA98
    bool GetControllerState(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*> controllerState);
  }; // UnityEngine.XR.Interaction.Toolkit.XRControllerRecorder
  #pragma pack(pop)
  static check_size<sizeof(XRControllerRecorder), 77 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRControllerRecorderSizeCheck;
  static_assert(sizeof(XRControllerRecorder) == 0x4E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_playOnStart
// Il2CppName: get_playOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_playOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_playOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_playOnStart
// Il2CppName: set_playOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_playOnStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_playOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_recording
// Il2CppName: get_recording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording* (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_recording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_recording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_recording
// Il2CppName: set_recording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(::UnityEngine::XR::Interaction::Toolkit::XRControllerRecording*)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_recording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerRecording")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_recording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_xrController
// Il2CppName: get_xrController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::XRBaseController* (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_xrController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_xrController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_xrController
// Il2CppName: set_xrController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseController*)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_xrController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_xrController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_isRecording
// Il2CppName: get_isRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_isRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_isRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_isRecording
// Il2CppName: set_isRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_isRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_isRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_isPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_isPlaying
// Il2CppName: set_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_isPlaying)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_currentTime
// Il2CppName: get_currentTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_currentTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_currentTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_recordingStartTime
// Il2CppName: get_recordingStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::get_recordingStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "get_recordingStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_recordingStartTime
// Il2CppName: set_recordingStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::set_recordingStartTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "set_recordingStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::ResetPlayback
// Il2CppName: ResetPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::ResetPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "ResetPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::UpdatePlaybackTime
// Il2CppName: UpdatePlaybackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(double)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::UpdatePlaybackTime)> {
  static const MethodInfo* get() {
    static auto* playbackTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "UpdatePlaybackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playbackTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::*)(ByRef<::UnityEngine::XR::Interaction::Toolkit::XRControllerState*>)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRControllerState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerRecorder*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerState});
  }
};
