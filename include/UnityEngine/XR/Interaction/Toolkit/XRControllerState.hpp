// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.SpatialTracking.PoseDataFlags
#include "UnityEngine/SpatialTracking/PoseDataFlags.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.InteractionState
#include "UnityEngine/XR/Interaction/Toolkit/InteractionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRControllerState
  class XRControllerState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRControllerState);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRControllerState*, "UnityEngine.XR.Interaction.Toolkit", "XRControllerState");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRControllerState
  // [TokenAttribute] Offset: FFFFFFFF
  class XRControllerState : public ::Il2CppObject {
    public:
    public:
    // public System.Double time
    // Size: 0x8
    // Offset: 0x10
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public UnityEngine.SpatialTracking.PoseDataFlags poseDataFlags
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::SpatialTracking::PoseDataFlags poseDataFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpatialTracking::PoseDataFlags) == 0x4);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState selectInteractionState
    // Size: 0x3
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState selectInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState activateInteractionState
    // Size: 0x3
    // Offset: 0x3B
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState activateInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    // public UnityEngine.XR.Interaction.Toolkit.InteractionState uiPressInteractionState
    // Size: 0x3
    // Offset: 0x3E
    ::UnityEngine::XR::Interaction::Toolkit::InteractionState uiPressInteractionState;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState) == 0x3);
    public:
    // Get instance field reference: public System.Double time
    [[deprecated("Use field access instead!")]] double& dyn_time();
    // Get instance field reference: public UnityEngine.SpatialTracking.PoseDataFlags poseDataFlags
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpatialTracking::PoseDataFlags& dyn_poseDataFlags();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.InteractionState selectInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_selectInteractionState();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.InteractionState activateInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_activateInteractionState();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.InteractionState uiPressInteractionState
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::InteractionState& dyn_uiPressInteractionState();
    // public System.Void .ctor()
    // Offset: 0xD789BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerState*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.XR.Interaction.Toolkit.XRControllerState value)
    // Offset: 0xD7CE24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerState* New_ctor(::UnityEngine::XR::Interaction::Toolkit::XRControllerState* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerState*, creationType>(value)));
    }
    // public System.Void .ctor(System.Double time, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean selectActive, System.Boolean activateActive, System.Boolean pressActive)
    // Offset: 0xD7CCF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRControllerState* New_ctor(double time, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool selectActive, bool activateActive, bool pressActive) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRControllerState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRControllerState*, creationType>(time, position, rotation, selectActive, activateActive, pressActive)));
    }
    // private System.Void SimulateInteractionState(System.Boolean pressed, ref UnityEngine.XR.Interaction.Toolkit.InteractionState interactionState)
    // Offset: 0xD7CF1C
    void SimulateInteractionState(bool pressed, ByRef<::UnityEngine::XR::Interaction::Toolkit::InteractionState> interactionState);
    // public System.Void ResetFrameDependentStates()
    // Offset: 0xD7BFC0
    void ResetFrameDependentStates();
    // public System.Void ResetInputs()
    // Offset: 0xD7CF48
    void ResetInputs();
    // public override System.String ToString()
    // Offset: 0xD7CF4C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.XR.Interaction.Toolkit.XRControllerState
  #pragma pack(pop)
  static check_size<sizeof(XRControllerState), 62 + sizeof(::UnityEngine::XR::Interaction::Toolkit::InteractionState)> __UnityEngine_XR_Interaction_Toolkit_XRControllerStateSizeCheck;
  static_assert(sizeof(XRControllerState) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::SimulateInteractionState
// Il2CppName: SimulateInteractionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerState::*)(bool, ByRef<::UnityEngine::XR::Interaction::Toolkit::InteractionState>)>(&UnityEngine::XR::Interaction::Toolkit::XRControllerState::SimulateInteractionState)> {
  static const MethodInfo* get() {
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* interactionState = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "InteractionState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerState*), "SimulateInteractionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressed, interactionState});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::ResetFrameDependentStates
// Il2CppName: ResetFrameDependentStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerState::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerState::ResetFrameDependentStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerState*), "ResetFrameDependentStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::ResetInputs
// Il2CppName: ResetInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRControllerState::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerState::ResetInputs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerState*), "ResetInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRControllerState::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::XR::Interaction::Toolkit::XRControllerState::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRControllerState::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRControllerState*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
