// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
#include "UnityEngine/XR/Interaction/Toolkit/LocomotionProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: SnapTurnProviderBase
  class SnapTurnProviderBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*, "UnityEngine.XR.Interaction.Toolkit", "SnapTurnProviderBase");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
  // [TokenAttribute] Offset: FFFFFFFF
  class SnapTurnProviderBase : public ::UnityEngine::XR::Interaction::Toolkit::LocomotionProvider {
    public:
    public:
    // [TooltipAttribute] Offset: 0x9820F8
    // private System.Single m_TurnAmount
    // Size: 0x4
    // Offset: 0x30
    float m_TurnAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x982144
    // private System.Single m_DebounceTime
    // Size: 0x4
    // Offset: 0x34
    float m_DebounceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x982190
    // private System.Boolean m_EnableTurnLeftRight
    // Size: 0x1
    // Offset: 0x38
    bool m_EnableTurnLeftRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9821DC
    // private System.Boolean m_EnableTurnAround
    // Size: 0x1
    // Offset: 0x39
    bool m_EnableTurnAround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableTurnAround and: m_CurrentTurnAmount
    char __padding3[0x2] = {};
    // private System.Single m_CurrentTurnAmount
    // Size: 0x4
    // Offset: 0x3C
    float m_CurrentTurnAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_TimeStarted
    // Size: 0x4
    // Offset: 0x40
    float m_TimeStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single m_TurnAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_TurnAmount();
    // Get instance field reference: private System.Single m_DebounceTime
    [[deprecated("Use field access instead!")]] float& dyn_m_DebounceTime();
    // Get instance field reference: private System.Boolean m_EnableTurnLeftRight
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableTurnLeftRight();
    // Get instance field reference: private System.Boolean m_EnableTurnAround
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableTurnAround();
    // Get instance field reference: private System.Single m_CurrentTurnAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_CurrentTurnAmount();
    // Get instance field reference: private System.Single m_TimeStarted
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeStarted();
    // public System.Single get_turnAmount()
    // Offset: 0xFEEF54
    float get_turnAmount();
    // public System.Void set_turnAmount(System.Single value)
    // Offset: 0xFEEF5C
    void set_turnAmount(float value);
    // public System.Single get_debounceTime()
    // Offset: 0xFEEF64
    float get_debounceTime();
    // public System.Void set_debounceTime(System.Single value)
    // Offset: 0xFEEF6C
    void set_debounceTime(float value);
    // public System.Boolean get_enableTurnLeftRight()
    // Offset: 0xFEEF74
    bool get_enableTurnLeftRight();
    // public System.Void set_enableTurnLeftRight(System.Boolean value)
    // Offset: 0xFEEF7C
    void set_enableTurnLeftRight(bool value);
    // public System.Boolean get_enableTurnAround()
    // Offset: 0xFEEF88
    bool get_enableTurnAround();
    // public System.Void set_enableTurnAround(System.Boolean value)
    // Offset: 0xFEEF90
    void set_enableTurnAround(bool value);
    // protected System.Void Update()
    // Offset: 0xFEEF9C
    void Update();
    // protected UnityEngine.Vector2 ReadInput()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 ReadInput();
    // protected System.Single GetTurnAmount(UnityEngine.Vector2 input)
    // Offset: 0xFEF168
    float GetTurnAmount(::UnityEngine::Vector2 input);
    // protected System.Void StartTurn(System.Single amount)
    // Offset: 0xFEF120
    void StartTurn(float amount);
    // System.Void FakeStartTurn(System.Boolean isLeft)
    // Offset: 0xFEF268
    void FakeStartTurn(bool isLeft);
    // System.Void FakeStartTurnAround()
    // Offset: 0xFEF28C
    void FakeStartTurnAround();
    // protected System.Void .ctor()
    // Offset: 0xFE3AA4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.LocomotionProvider
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnapTurnProviderBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnapTurnProviderBase*, creationType>()));
    }
  }; // UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
  #pragma pack(pop)
  static check_size<sizeof(SnapTurnProviderBase), 64 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_SnapTurnProviderBaseSizeCheck;
  static_assert(sizeof(SnapTurnProviderBase) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_turnAmount
// Il2CppName: get_turnAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_turnAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "get_turnAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_turnAmount
// Il2CppName: set_turnAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_turnAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "set_turnAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_debounceTime
// Il2CppName: get_debounceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_debounceTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "get_debounceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_debounceTime
// Il2CppName: set_debounceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_debounceTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "set_debounceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_enableTurnLeftRight
// Il2CppName: get_enableTurnLeftRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_enableTurnLeftRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "get_enableTurnLeftRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_enableTurnLeftRight
// Il2CppName: set_enableTurnLeftRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_enableTurnLeftRight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "set_enableTurnLeftRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_enableTurnAround
// Il2CppName: get_enableTurnAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::get_enableTurnAround)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "get_enableTurnAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_enableTurnAround
// Il2CppName: set_enableTurnAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::set_enableTurnAround)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "set_enableTurnAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::ReadInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::GetTurnAmount
// Il2CppName: GetTurnAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(::UnityEngine::Vector2)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::GetTurnAmount)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "GetTurnAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::StartTurn
// Il2CppName: StartTurn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::StartTurn)> {
  static const MethodInfo* get() {
    static auto* amount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "StartTurn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{amount});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::FakeStartTurn
// Il2CppName: FakeStartTurn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::FakeStartTurn)> {
  static const MethodInfo* get() {
    static auto* isLeft = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "FakeStartTurn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeft});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::FakeStartTurnAround
// Il2CppName: FakeStartTurnAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::*)()>(&UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::FakeStartTurnAround)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase*), "FakeStartTurnAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
