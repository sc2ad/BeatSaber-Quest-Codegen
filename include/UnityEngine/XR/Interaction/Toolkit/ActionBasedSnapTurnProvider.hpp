// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
#include "UnityEngine/XR/Interaction/Toolkit/SnapTurnProviderBase.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: ActionBasedSnapTurnProvider
  class ActionBasedSnapTurnProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*, "UnityEngine.XR.Interaction.Toolkit", "ActionBasedSnapTurnProvider");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.ActionBasedSnapTurnProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97F198
  class ActionBasedSnapTurnProvider : public ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase {
    public:
    // Writing base type padding for base size: 0x44 to desired offset: 0x48
    char ___base_padding[0x4] = {};
    public:
    // [TooltipAttribute] Offset: 0x981F7C
    // private UnityEngine.InputSystem.InputActionProperty m_LeftHandSnapTurnAction
    // Size: 0x18
    // Offset: 0x48
    ::UnityEngine::InputSystem::InputActionProperty m_LeftHandSnapTurnAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // [TooltipAttribute] Offset: 0x981FC8
    // private UnityEngine.InputSystem.InputActionProperty m_RightHandSnapTurnAction
    // Size: 0x18
    // Offset: 0x60
    ::UnityEngine::InputSystem::InputActionProperty m_RightHandSnapTurnAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_LeftHandSnapTurnAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_LeftHandSnapTurnAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RightHandSnapTurnAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RightHandSnapTurnAction();
    // public UnityEngine.InputSystem.InputActionProperty get_leftHandSnapTurnAction()
    // Offset: 0xFE3788
    ::UnityEngine::InputSystem::InputActionProperty get_leftHandSnapTurnAction();
    // public System.Void set_leftHandSnapTurnAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE379C
    void set_leftHandSnapTurnAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rightHandSnapTurnAction()
    // Offset: 0xFE386C
    ::UnityEngine::InputSystem::InputActionProperty get_rightHandSnapTurnAction();
    // public System.Void set_rightHandSnapTurnAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE3880
    void set_rightHandSnapTurnAction(::UnityEngine::InputSystem::InputActionProperty value);
    // protected System.Void OnEnable()
    // Offset: 0xFE38B4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xFE3908
    void OnDisable();
    // private System.Void SetInputActionProperty(ref UnityEngine.InputSystem.InputActionProperty property, UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE37D0
    void SetInputActionProperty(ByRef<::UnityEngine::InputSystem::InputActionProperty> property, ::UnityEngine::InputSystem::InputActionProperty value);
    // public System.Void .ctor()
    // Offset: 0xFE3A88
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
    // Base method: System.Void SnapTurnProviderBase::.ctor()
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActionBasedSnapTurnProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActionBasedSnapTurnProvider*, creationType>()));
    }
    // protected override UnityEngine.Vector2 ReadInput()
    // Offset: 0xFE395C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
    // Base method: UnityEngine.Vector2 SnapTurnProviderBase::ReadInput()
    ::UnityEngine::Vector2 ReadInput();
  }; // UnityEngine.XR.Interaction.Toolkit.ActionBasedSnapTurnProvider
  #pragma pack(pop)
  static check_size<sizeof(ActionBasedSnapTurnProvider), 96 + sizeof(::UnityEngine::InputSystem::InputActionProperty)> __UnityEngine_XR_Interaction_Toolkit_ActionBasedSnapTurnProviderSizeCheck;
  static_assert(sizeof(ActionBasedSnapTurnProvider) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::get_leftHandSnapTurnAction
// Il2CppName: get_leftHandSnapTurnAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::get_leftHandSnapTurnAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "get_leftHandSnapTurnAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::set_leftHandSnapTurnAction
// Il2CppName: set_leftHandSnapTurnAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::set_leftHandSnapTurnAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "set_leftHandSnapTurnAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::get_rightHandSnapTurnAction
// Il2CppName: get_rightHandSnapTurnAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::get_rightHandSnapTurnAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "get_rightHandSnapTurnAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::set_rightHandSnapTurnAction
// Il2CppName: set_rightHandSnapTurnAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::set_rightHandSnapTurnAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "set_rightHandSnapTurnAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::SetInputActionProperty
// Il2CppName: SetInputActionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)(ByRef<::UnityEngine::InputSystem::InputActionProperty>, ::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::SetInputActionProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "SetInputActionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider::ReadInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedSnapTurnProvider*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
