// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation
namespace UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation {
  // Forward declaring type: XRSimulatedHMDState
  struct XRSimulatedHMDState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState, "UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation", "XRSimulatedHMDState");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation
namespace UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation {
  // Size: 0x75
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedHMDState
  // [TokenAttribute] Offset: FFFFFFFF
  struct XRSimulatedHMDState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    public:
    // [InputControlAttribute] Offset: 0x984064
    // public UnityEngine.Vector3 leftEyePosition
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 leftEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [InputControlAttribute] Offset: 0x9840A0
    // public UnityEngine.Quaternion leftEyeRotation
    // Size: 0x10
    // Offset: 0xC
    ::UnityEngine::Quaternion leftEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // [InputControlAttribute] Offset: 0x9840DC
    // public UnityEngine.Vector3 rightEyePosition
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 rightEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [InputControlAttribute] Offset: 0x984118
    // public UnityEngine.Quaternion rightEyeRotation
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Quaternion rightEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // [InputControlAttribute] Offset: 0x984154
    // public UnityEngine.Vector3 centerEyePosition
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 centerEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [InputControlAttribute] Offset: 0x984190
    // public UnityEngine.Quaternion centerEyeRotation
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Quaternion centerEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // [InputControlAttribute] Offset: 0x9841CC
    // public System.Int32 trackingState
    // Size: 0x4
    // Offset: 0x54
    int trackingState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [InputControlAttribute] Offset: 0x984218
    // public System.Boolean isTracked
    // Size: 0x1
    // Offset: 0x58
    bool isTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [InputControlAttribute] Offset: 0x984264
    // public UnityEngine.Vector3 devicePosition
    // Size: 0xC
    // Offset: 0x59
    ::UnityEngine::Vector3 devicePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [InputControlAttribute] Offset: 0x9842A0
    // public UnityEngine.Quaternion deviceRotation
    // Size: 0x10
    // Offset: 0x65
    ::UnityEngine::Quaternion deviceRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: XRSimulatedHMDState
    constexpr XRSimulatedHMDState(::UnityEngine::Vector3 leftEyePosition_ = {}, ::UnityEngine::Quaternion leftEyeRotation_ = {}, ::UnityEngine::Vector3 rightEyePosition_ = {}, ::UnityEngine::Quaternion rightEyeRotation_ = {}, ::UnityEngine::Vector3 centerEyePosition_ = {}, ::UnityEngine::Quaternion centerEyeRotation_ = {}, int trackingState_ = {}, bool isTracked_ = {}, ::UnityEngine::Vector3 devicePosition_ = {}, ::UnityEngine::Quaternion deviceRotation_ = {}) noexcept : leftEyePosition{leftEyePosition_}, leftEyeRotation{leftEyeRotation_}, rightEyePosition{rightEyePosition_}, rightEyeRotation{rightEyeRotation_}, centerEyePosition{centerEyePosition_}, centerEyeRotation{centerEyeRotation_}, trackingState{trackingState_}, isTracked{isTracked_}, devicePosition{devicePosition_}, deviceRotation{deviceRotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 leftEyePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftEyePosition();
    // Get instance field reference: public UnityEngine.Quaternion leftEyeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_leftEyeRotation();
    // Get instance field reference: public UnityEngine.Vector3 rightEyePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightEyePosition();
    // Get instance field reference: public UnityEngine.Quaternion rightEyeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rightEyeRotation();
    // Get instance field reference: public UnityEngine.Vector3 centerEyePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerEyePosition();
    // Get instance field reference: public UnityEngine.Quaternion centerEyeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_centerEyeRotation();
    // Get instance field reference: public System.Int32 trackingState
    [[deprecated("Use field access instead!")]] int& dyn_trackingState();
    // Get instance field reference: public System.Boolean isTracked
    [[deprecated("Use field access instead!")]] bool& dyn_isTracked();
    // Get instance field reference: public UnityEngine.Vector3 devicePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_devicePosition();
    // Get instance field reference: public UnityEngine.Quaternion deviceRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_deviceRotation();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_formatId()
    // Offset: 0xFEE9D0
    static ::UnityEngine::InputSystem::Utilities::FourCC get_formatId();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA4D50C
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public System.Void Reset()
    // Offset: 0xA4D548
    void Reset();
  }; // UnityEngine.XR.Interaction.Toolkit.Inputs.Simulation.XRSimulatedHMDState
  #pragma pack(pop)
  static check_size<sizeof(XRSimulatedHMDState), 101 + sizeof(::UnityEngine::Quaternion)> __UnityEngine_XR_Interaction_Toolkit_Inputs_Simulation_XRSimulatedHMDStateSizeCheck;
  static_assert(sizeof(XRSimulatedHMDState) == 0x75);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::get_formatId
// Il2CppName: get_formatId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::get_formatId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState), "get_formatId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::*)()>(&UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::*)()>(&UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::Inputs::Simulation::XRSimulatedHMDState), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
