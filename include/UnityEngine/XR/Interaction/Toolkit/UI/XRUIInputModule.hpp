// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.UIInputModule
#include "UnityEngine/XR/Interaction/Toolkit/UI/UIInputModule.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.MouseModel
#include "UnityEngine/XR/Interaction/Toolkit/UI/MouseModel.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel
#include "UnityEngine/XR/Interaction/Toolkit/UI/TrackedDeviceModel.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.TouchModel
#include "UnityEngine/XR/Interaction/Toolkit/UI/TouchModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit::UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: IUIInteractor
  class IUIInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Touch
  struct Touch;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: XRUIInputModule
  class XRUIInputModule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*, "UnityEngine.XR.Interaction.Toolkit.UI", "XRUIInputModule");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0x240
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule
  // [TokenAttribute] Offset: FFFFFFFF
  class XRUIInputModule : public ::UnityEngine::XR::Interaction::Toolkit::UI::UIInputModule {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor
    struct RegisteredInteractor;
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredTouch
    struct RegisteredTouch;
    // Size: 0x114
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredInteractor
    // [TokenAttribute] Offset: FFFFFFFF
    struct RegisteredInteractor/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor;
      // Field size check
      static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*) == 0x8);
      // public UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model
      // Size: 0x10C
      // Offset: 0x8
      ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel model;
      // Field size check
      static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel) == 0x10C);
      public:
      // Creating value type constructor for type: RegisteredInteractor
      constexpr RegisteredInteractor(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel model_ = {}) noexcept : interactor{interactor_}, model{model_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor
      [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*& dyn_interactor();
      // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model
      [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel& dyn_model();
      // public System.Void .ctor(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor, System.Int32 deviceIndex)
      // Offset: 0xA410B0
      RegisteredInteractor(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor, int deviceIndex);
    }; // UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredInteractor
    #pragma pack(pop)
    static check_size<sizeof(XRUIInputModule::RegisteredInteractor), 8 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel)> __UnityEngine_XR_Interaction_Toolkit_UI_XRUIInputModule_RegisteredInteractorSizeCheck;
    static_assert(sizeof(XRUIInputModule::RegisteredInteractor) == 0x114);
    // Size: 0xA8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredTouch
    // [TokenAttribute] Offset: FFFFFFFF
    struct RegisteredTouch/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Boolean isValid
      // Size: 0x1
      // Offset: 0x0
      bool isValid;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isValid and: touchId
      char __padding0[0x3] = {};
      // public System.Int32 touchId
      // Size: 0x4
      // Offset: 0x4
      int touchId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.XR.Interaction.Toolkit.UI.TouchModel model
      // Size: 0xA0
      // Offset: 0x8
      ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel model;
      // Field size check
      static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel) == 0xA0);
      public:
      // Creating value type constructor for type: RegisteredTouch
      constexpr RegisteredTouch(bool isValid_ = {}, int touchId_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel model_ = {}) noexcept : isValid{isValid_}, touchId{touchId_}, model{model_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Boolean isValid
      [[deprecated("Use field access instead!")]] bool& dyn_isValid();
      // Get instance field reference: public System.Int32 touchId
      [[deprecated("Use field access instead!")]] int& dyn_touchId();
      // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.UI.TouchModel model
      [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel& dyn_model();
      // public System.Void .ctor(UnityEngine.Touch touch, System.Int32 deviceIndex)
      // Offset: 0xA4114C
      RegisteredTouch(::UnityEngine::Touch touch, int deviceIndex);
    }; // UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredTouch
    #pragma pack(pop)
    static check_size<sizeof(XRUIInputModule::RegisteredTouch), 8 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel)> __UnityEngine_XR_Interaction_Toolkit_UI_XRUIInputModule_RegisteredTouchSizeCheck;
    static_assert(sizeof(XRUIInputModule::RegisteredTouch) == 0xA8);
    public:
    // [TooltipAttribute] Offset: 0x982900
    // private System.Single m_MaxTrackedDeviceRaycastDistance
    // Size: 0x4
    // Offset: 0x80
    float m_MaxTrackedDeviceRaycastDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x98294C
    // private System.Boolean m_EnableXRInput
    // Size: 0x1
    // Offset: 0x84
    bool m_EnableXRInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x982998
    // private System.Boolean m_EnableMouseInput
    // Size: 0x1
    // Offset: 0x85
    bool m_EnableMouseInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9829E4
    // private System.Boolean m_EnableTouchInput
    // Size: 0x1
    // Offset: 0x86
    bool m_EnableTouchInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableTouchInput and: m_Mouse
    char __padding3[0x1] = {};
    // private UnityEngine.XR.Interaction.Toolkit.UI.MouseModel m_Mouse
    // Size: 0x1A0
    // Offset: 0x88
    ::UnityEngine::XR::Interaction::Toolkit::UI::MouseModel m_Mouse;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::MouseModel) == 0x1A0);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredTouch> m_RegisteredTouches
    // Size: 0x8
    // Offset: 0x228
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredTouch>* m_RegisteredTouches;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredTouch>*) == 0x8);
    // private System.Int32 m_RollingInteractorIndex
    // Size: 0x4
    // Offset: 0x230
    int m_RollingInteractorIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_RollingInteractorIndex and: m_RegisteredInteractors
    char __padding6[0x4] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredInteractor> m_RegisteredInteractors
    // Size: 0x8
    // Offset: 0x238
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor>* m_RegisteredInteractors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor>*) == 0x8);
    public:
    // Get instance field reference: private System.Single m_MaxTrackedDeviceRaycastDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxTrackedDeviceRaycastDistance();
    // Get instance field reference: private System.Boolean m_EnableXRInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableXRInput();
    // Get instance field reference: private System.Boolean m_EnableMouseInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableMouseInput();
    // Get instance field reference: private System.Boolean m_EnableTouchInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableTouchInput();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.MouseModel m_Mouse
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::MouseModel& dyn_m_Mouse();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredTouch> m_RegisteredTouches
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredTouch>*& dyn_m_RegisteredTouches();
    // Get instance field reference: private System.Int32 m_RollingInteractorIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_RollingInteractorIndex();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule/UnityEngine.XR.Interaction.Toolkit.UI.RegisteredInteractor> m_RegisteredInteractors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor>*& dyn_m_RegisteredInteractors();
    // public System.Single get_maxRaycastDistance()
    // Offset: 0xD77004
    float get_maxRaycastDistance();
    // public System.Void set_maxRaycastDistance(System.Single value)
    // Offset: 0xD7700C
    void set_maxRaycastDistance(float value);
    // public System.Boolean get_enableXRInput()
    // Offset: 0xD77014
    bool get_enableXRInput();
    // public System.Void set_enableXRInput(System.Boolean value)
    // Offset: 0xD7701C
    void set_enableXRInput(bool value);
    // public System.Boolean get_enableMouseInput()
    // Offset: 0xD77028
    bool get_enableMouseInput();
    // public System.Void set_enableMouseInput(System.Boolean value)
    // Offset: 0xD77030
    void set_enableMouseInput(bool value);
    // public System.Boolean get_enableTouchInput()
    // Offset: 0xD7703C
    bool get_enableTouchInput();
    // public System.Void set_enableTouchInput(System.Boolean value)
    // Offset: 0xD77044
    void set_enableTouchInput(bool value);
    // public System.Void RegisterInteractor(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor)
    // Offset: 0xD770C0
    void RegisterInteractor(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor);
    // public System.Void UnregisterInteractor(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor)
    // Offset: 0xD77248
    void UnregisterInteractor(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor);
    // public UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor GetInteractor(System.Int32 pointerId)
    // Offset: 0xD72D28
    ::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* GetInteractor(int pointerId);
    // public System.Boolean GetTrackedDeviceModel(UnityEngine.XR.Interaction.Toolkit.UI.IUIInteractor interactor, out UnityEngine.XR.Interaction.Toolkit.UI.TrackedDeviceModel model)
    // Offset: 0xD77370
    bool GetTrackedDeviceModel(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* interactor, ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel> model);
    // private System.Void ProcessMouse()
    // Offset: 0xD776BC
    void ProcessMouse();
    // private System.Void ProcessTouches()
    // Offset: 0xD777F4
    void ProcessTouches();
    // public System.Void .ctor()
    // Offset: 0xD77D74
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.UI.UIInputModule
    // Base method: System.Void UIInputModule::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRUIInputModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRUIInputModule*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0xD77050
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::OnEnable()
    void OnEnable();
    // protected override System.Void DoProcess()
    // Offset: 0xD774A4
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.UI.UIInputModule
    // Base method: System.Void UIInputModule::DoProcess()
    void DoProcess();
  }; // UnityEngine.XR.Interaction.Toolkit.UI.XRUIInputModule
  #pragma pack(pop)
  static check_size<sizeof(XRUIInputModule), 568 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor>*)> __UnityEngine_XR_Interaction_Toolkit_UI_XRUIInputModuleSizeCheck;
  static_assert(sizeof(XRUIInputModule) == 0x240);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredTouch, "UnityEngine.XR.Interaction.Toolkit.UI", "XRUIInputModule/RegisteredTouch");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisteredInteractor, "UnityEngine.XR.Interaction.Toolkit.UI", "XRUIInputModule/RegisteredInteractor");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_maxRaycastDistance
// Il2CppName: get_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_maxRaycastDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "get_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_maxRaycastDistance
// Il2CppName: set_maxRaycastDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_maxRaycastDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "set_maxRaycastDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableXRInput
// Il2CppName: get_enableXRInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableXRInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "get_enableXRInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableXRInput
// Il2CppName: set_enableXRInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableXRInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "set_enableXRInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableMouseInput
// Il2CppName: get_enableMouseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableMouseInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "get_enableMouseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableMouseInput
// Il2CppName: set_enableMouseInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableMouseInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "set_enableMouseInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableTouchInput
// Il2CppName: get_enableTouchInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::get_enableTouchInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "get_enableTouchInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableTouchInput
// Il2CppName: set_enableTouchInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::set_enableTouchInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "set_enableTouchInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisterInteractor
// Il2CppName: RegisterInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::RegisterInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "IUIInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "RegisterInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::UnregisterInteractor
// Il2CppName: UnregisterInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::UnregisterInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "IUIInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "UnregisterInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::GetInteractor
// Il2CppName: GetInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor* (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(int)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::GetInteractor)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "GetInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::GetTrackedDeviceModel
// Il2CppName: GetTrackedDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)(::UnityEngine::XR::Interaction::Toolkit::UI::IUIInteractor*, ByRef<::UnityEngine::XR::Interaction::Toolkit::UI::TrackedDeviceModel>)>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::GetTrackedDeviceModel)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "IUIInteractor")->byval_arg;
    static auto* model = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "TrackedDeviceModel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "GetTrackedDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, model});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::ProcessMouse
// Il2CppName: ProcessMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::ProcessMouse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "ProcessMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::ProcessTouches
// Il2CppName: ProcessTouches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::ProcessTouches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "ProcessTouches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::DoProcess
// Il2CppName: DoProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule::DoProcess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::XRUIInputModule*), "DoProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
