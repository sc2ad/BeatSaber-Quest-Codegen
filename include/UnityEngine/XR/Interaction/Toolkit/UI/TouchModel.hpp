// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState
#include "UnityEngine/XR/Interaction/Toolkit/UI/ButtonDeltaState.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.TouchPhase
#include "UnityEngine/TouchPhase.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Forward declaring type: TouchModel
  struct TouchModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel, "UnityEngine.XR.Interaction.Toolkit.UI", "TouchModel");
// Type namespace: UnityEngine.XR.Interaction.Toolkit.UI
namespace UnityEngine::XR::Interaction::Toolkit::UI {
  // Size: 0xA0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TouchModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct TouchModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData
    struct ImplementationData;
    // Size: 0x80
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.UI.TouchModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData
    // [TokenAttribute] Offset: FFFFFFFF
    struct ImplementationData/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Collections.Generic.List`1<UnityEngine.GameObject> <hoverTargets>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hoverTargets;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
      // private UnityEngine.GameObject <pointerTarget>k__BackingField
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::GameObject* pointerTarget;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private System.Boolean <isDragging>k__BackingField
      // Size: 0x1
      // Offset: 0x10
      bool isDragging;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isDragging and: pressedTime
      char __padding2[0x3] = {};
      // private System.Single <pressedTime>k__BackingField
      // Size: 0x4
      // Offset: 0x14
      float pressedTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private UnityEngine.Vector2 <pressedPosition>k__BackingField
      // Size: 0x8
      // Offset: 0x18
      ::UnityEngine::Vector2 pressedPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      // Size: 0x48
      // Offset: 0x20
      ::UnityEngine::EventSystems::RaycastResult pressedRaycast;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x48);
      // private UnityEngine.GameObject <pressedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x68
      ::UnityEngine::GameObject* pressedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      // Size: 0x8
      // Offset: 0x70
      ::UnityEngine::GameObject* pressedGameObjectRaw;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject <draggedGameObject>k__BackingField
      // Size: 0x8
      // Offset: 0x78
      ::UnityEngine::GameObject* draggedGameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      public:
      // Creating value type constructor for type: ImplementationData
      constexpr ImplementationData(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hoverTargets_ = {}, ::UnityEngine::GameObject* pointerTarget_ = {}, bool isDragging_ = {}, float pressedTime_ = {}, ::UnityEngine::Vector2 pressedPosition_ = {}, ::UnityEngine::EventSystems::RaycastResult pressedRaycast_ = {}, ::UnityEngine::GameObject* pressedGameObject_ = {}, ::UnityEngine::GameObject* pressedGameObjectRaw_ = {}, ::UnityEngine::GameObject* draggedGameObject_ = {}) noexcept : hoverTargets{hoverTargets_}, pointerTarget{pointerTarget_}, isDragging{isDragging_}, pressedTime{pressedTime_}, pressedPosition{pressedPosition_}, pressedRaycast{pressedRaycast_}, pressedGameObject{pressedGameObject_}, pressedGameObjectRaw{pressedGameObjectRaw_}, draggedGameObject{draggedGameObject_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> <hoverTargets>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_$hoverTargets$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pointerTarget>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pointerTarget$k__BackingField();
      // Get instance field reference: private System.Boolean <isDragging>k__BackingField
      [[deprecated("Use field access instead!")]] bool& dyn_$isDragging$k__BackingField();
      // Get instance field reference: private System.Single <pressedTime>k__BackingField
      [[deprecated("Use field access instead!")]] float& dyn_$pressedTime$k__BackingField();
      // Get instance field reference: private UnityEngine.Vector2 <pressedPosition>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$pressedPosition$k__BackingField();
      // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <pressedRaycast>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_$pressedRaycast$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObject>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pressedGameObject$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <pressedGameObjectRaw>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pressedGameObjectRaw$k__BackingField();
      // Get instance field reference: private UnityEngine.GameObject <draggedGameObject>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$draggedGameObject$k__BackingField();
      // public System.Collections.Generic.List`1<UnityEngine.GameObject> get_hoverTargets()
      // Offset: 0xA4DDB4
      ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* get_hoverTargets();
      // public System.Void set_hoverTargets(System.Collections.Generic.List`1<UnityEngine.GameObject> value)
      // Offset: 0xA4DDBC
      void set_hoverTargets(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* value);
      // public UnityEngine.GameObject get_pointerTarget()
      // Offset: 0xA4DDC4
      ::UnityEngine::GameObject* get_pointerTarget();
      // public System.Void set_pointerTarget(UnityEngine.GameObject value)
      // Offset: 0xA4DDCC
      void set_pointerTarget(::UnityEngine::GameObject* value);
      // public System.Boolean get_isDragging()
      // Offset: 0xA4DDD4
      bool get_isDragging();
      // public System.Void set_isDragging(System.Boolean value)
      // Offset: 0xA4DDDC
      void set_isDragging(bool value);
      // public System.Single get_pressedTime()
      // Offset: 0xA4DDE8
      float get_pressedTime();
      // public System.Void set_pressedTime(System.Single value)
      // Offset: 0xA4DDF0
      void set_pressedTime(float value);
      // public UnityEngine.Vector2 get_pressedPosition()
      // Offset: 0xA4DDF8
      ::UnityEngine::Vector2 get_pressedPosition();
      // public System.Void set_pressedPosition(UnityEngine.Vector2 value)
      // Offset: 0xA4DE00
      void set_pressedPosition(::UnityEngine::Vector2 value);
      // public UnityEngine.EventSystems.RaycastResult get_pressedRaycast()
      // Offset: 0xA4DE08
      ::UnityEngine::EventSystems::RaycastResult get_pressedRaycast();
      // public System.Void set_pressedRaycast(UnityEngine.EventSystems.RaycastResult value)
      // Offset: 0xA4DE18
      void set_pressedRaycast(::UnityEngine::EventSystems::RaycastResult value);
      // public UnityEngine.GameObject get_pressedGameObject()
      // Offset: 0xA4DE34
      ::UnityEngine::GameObject* get_pressedGameObject();
      // public System.Void set_pressedGameObject(UnityEngine.GameObject value)
      // Offset: 0xA4DE3C
      void set_pressedGameObject(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_pressedGameObjectRaw()
      // Offset: 0xA4DE44
      ::UnityEngine::GameObject* get_pressedGameObjectRaw();
      // public System.Void set_pressedGameObjectRaw(UnityEngine.GameObject value)
      // Offset: 0xA4DE4C
      void set_pressedGameObjectRaw(::UnityEngine::GameObject* value);
      // public UnityEngine.GameObject get_draggedGameObject()
      // Offset: 0xA4DE54
      ::UnityEngine::GameObject* get_draggedGameObject();
      // public System.Void set_draggedGameObject(UnityEngine.GameObject value)
      // Offset: 0xA4DE5C
      void set_draggedGameObject(::UnityEngine::GameObject* value);
      // public System.Void Reset()
      // Offset: 0xA4DE64
      void Reset();
    }; // UnityEngine.XR.Interaction.Toolkit.UI.TouchModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData
    #pragma pack(pop)
    static check_size<sizeof(TouchModel::ImplementationData), 120 + sizeof(::UnityEngine::GameObject*)> __UnityEngine_XR_Interaction_Toolkit_UI_TouchModel_ImplementationDataSizeCheck;
    static_assert(sizeof(TouchModel::ImplementationData) == 0x80);
    public:
    // private readonly System.Int32 <pointerId>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int pointerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <selectDelta>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState selectDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState) == 0x4);
    // private System.Boolean <changedThisFrame>k__BackingField
    // Size: 0x1
    // Offset: 0x8
    bool changedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changedThisFrame and: deltaPosition
    char __padding2[0x3] = {};
    // private UnityEngine.Vector2 <deltaPosition>k__BackingField
    // Size: 0x8
    // Offset: 0xC
    ::UnityEngine::Vector2 deltaPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.TouchPhase m_SelectPhase
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::TouchPhase m_SelectPhase;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchPhase) == 0x4);
    // private UnityEngine.Vector2 m_Position
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Vector2 m_Position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.UI.TouchModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData m_ImplementationData
    // Size: 0x80
    // Offset: 0x20
    ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData m_ImplementationData;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData) == 0x80);
    public:
    // Creating value type constructor for type: TouchModel
    constexpr TouchModel(int pointerId_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState selectDelta_ = {}, bool changedThisFrame_ = {}, ::UnityEngine::Vector2 deltaPosition_ = {}, ::UnityEngine::TouchPhase m_SelectPhase_ = {}, ::UnityEngine::Vector2 m_Position_ = {}, ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData m_ImplementationData_ = {}) noexcept : pointerId{pointerId_}, selectDelta{selectDelta_}, changedThisFrame{changedThisFrame_}, deltaPosition{deltaPosition_}, m_SelectPhase{m_SelectPhase_}, m_Position{m_Position_}, m_ImplementationData{m_ImplementationData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <pointerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pointerId$k__BackingField();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState <selectDelta>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState& dyn_$selectDelta$k__BackingField();
    // Get instance field reference: private System.Boolean <changedThisFrame>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$changedThisFrame$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <deltaPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$deltaPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.TouchPhase m_SelectPhase
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchPhase& dyn_m_SelectPhase();
    // Get instance field reference: private UnityEngine.Vector2 m_Position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_Position();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.UI.TouchModel/UnityEngine.XR.Interaction.Toolkit.UI.ImplementationData m_ImplementationData
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData& dyn_m_ImplementationData();
    // public System.Int32 get_pointerId()
    // Offset: 0xA4DCB8
    int get_pointerId();
    // public UnityEngine.TouchPhase get_selectPhase()
    // Offset: 0xA4DCC0
    ::UnityEngine::TouchPhase get_selectPhase();
    // public System.Void set_selectPhase(UnityEngine.TouchPhase value)
    // Offset: 0xA4DCC8
    void set_selectPhase(::UnityEngine::TouchPhase value);
    // public UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState get_selectDelta()
    // Offset: 0xA4DD0C
    ::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState get_selectDelta();
    // private System.Void set_selectDelta(UnityEngine.XR.Interaction.Toolkit.UI.ButtonDeltaState value)
    // Offset: 0xA4DD14
    void set_selectDelta(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState value);
    // public System.Boolean get_changedThisFrame()
    // Offset: 0xA4DD1C
    bool get_changedThisFrame();
    // private System.Void set_changedThisFrame(System.Boolean value)
    // Offset: 0xA4DD24
    void set_changedThisFrame(bool value);
    // public UnityEngine.Vector2 get_position()
    // Offset: 0xA4DD30
    ::UnityEngine::Vector2 get_position();
    // public System.Void set_position(UnityEngine.Vector2 value)
    // Offset: 0xA4DD38
    void set_position(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_deltaPosition()
    // Offset: 0xA4DD40
    ::UnityEngine::Vector2 get_deltaPosition();
    // private System.Void set_deltaPosition(UnityEngine.Vector2 value)
    // Offset: 0xA4DD48
    void set_deltaPosition(::UnityEngine::Vector2 value);
    // public System.Void .ctor(System.Int32 pointerId)
    // Offset: 0xA4DD50
    TouchModel(int pointerId);
    // public System.Void Reset()
    // Offset: 0xA4DD58
    void Reset();
    // public System.Void OnFrameFinished()
    // Offset: 0xA4DD60
    void OnFrameFinished();
    // public System.Void CopyTo(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xA4DD68
    void CopyTo(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void CopyFrom(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xA4DD70
    void CopyFrom(::UnityEngine::EventSystems::PointerEventData* eventData);
  }; // UnityEngine.XR.Interaction.Toolkit.UI.TouchModel
  #pragma pack(pop)
  static check_size<sizeof(TouchModel), 32 + sizeof(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData)> __UnityEngine_XR_Interaction_Toolkit_UI_TouchModelSizeCheck;
  static_assert(sizeof(TouchModel) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::ImplementationData, "UnityEngine.XR.Interaction.Toolkit.UI", "TouchModel/ImplementationData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_pointerId
// Il2CppName: get_pointerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_pointerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_pointerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_selectPhase
// Il2CppName: get_selectPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TouchPhase (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_selectPhase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_selectPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_selectPhase
// Il2CppName: set_selectPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::TouchPhase)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_selectPhase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TouchPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "set_selectPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_selectDelta
// Il2CppName: get_selectDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_selectDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_selectDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_selectDelta
// Il2CppName: set_selectDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::XR::Interaction::Toolkit::UI::ButtonDeltaState)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_selectDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit.UI", "ButtonDeltaState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "set_selectDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_changedThisFrame
// Il2CppName: get_changedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_changedThisFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_changedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_changedThisFrame
// Il2CppName: set_changedThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_changedThisFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "set_changedThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::Vector2)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_deltaPosition
// Il2CppName: get_deltaPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::get_deltaPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "get_deltaPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_deltaPosition
// Il2CppName: set_deltaPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::Vector2)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::set_deltaPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "set_deltaPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::TouchModel
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)()>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::CopyTo)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::XR::Interaction::Toolkit::UI::TouchModel::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::UI::TouchModel), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
