// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
#include "UnityEngine/XR/Interaction/Toolkit/SnapTurnProviderBase.hpp"
// Including type: UnityEngine.XR.InputFeatureUsage`1
#include "UnityEngine/XR/InputFeatureUsage_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseController
  class XRBaseController;
  // Skipping declaration: InputAxes because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: DeviceBasedSnapTurnProvider
  class DeviceBasedSnapTurnProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*, "UnityEngine.XR.Interaction.Toolkit", "DeviceBasedSnapTurnProvider");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97F1D0
  class DeviceBasedSnapTurnProvider : public ::UnityEngine::XR::Interaction::Toolkit::SnapTurnProviderBase {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes
    struct InputAxes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputAxes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputAxes
      constexpr InputAxes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static constexpr const int Primary2DAxis = 0;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes _get_Primary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Primary2DAxis
      static void _set_Primary2DAxis(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes value);
      // static field const value: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static constexpr const int Secondary2DAxis = 1;
      // Get static field: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes _get_Secondary2DAxis();
      // Set static field: static public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes Secondary2DAxis
      static void _set_Secondary2DAxis(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes
    #pragma pack(pop)
    static check_size<sizeof(DeviceBasedSnapTurnProvider::InputAxes), 0 + sizeof(int)> __UnityEngine_XR_Interaction_Toolkit_DeviceBasedSnapTurnProvider_InputAxesSizeCheck;
    static_assert(sizeof(DeviceBasedSnapTurnProvider::InputAxes) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x982014
    // private UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes m_TurnUsage
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes m_TurnUsage;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes) == 0x4);
    // [TooltipAttribute] Offset: 0x982060
    // private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> m_Controllers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>* m_Controllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>*) == 0x8);
    // [TooltipAttribute] Offset: 0x9820AC
    // private System.Single m_DeadZone
    // Size: 0x4
    // Offset: 0x50
    float m_DeadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2>[] k_Vec2UsageList
    static ::ArrayW<::UnityEngine::XR::InputFeatureUsage_1<::UnityEngine::Vector2>> _get_k_Vec2UsageList();
    // Set static field: static private readonly UnityEngine.XR.InputFeatureUsage`1<UnityEngine.Vector2>[] k_Vec2UsageList
    static void _set_k_Vec2UsageList(::ArrayW<::UnityEngine::XR::InputFeatureUsage_1<::UnityEngine::Vector2>> value);
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes m_TurnUsage
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes& dyn_m_TurnUsage();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> m_Controllers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>*& dyn_m_Controllers();
    // Get instance field reference: private System.Single m_DeadZone
    [[deprecated("Use field access instead!")]] float& dyn_m_DeadZone();
    // public UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes get_turnUsage()
    // Offset: 0xFE6514
    ::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes get_turnUsage();
    // public System.Void set_turnUsage(UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider/UnityEngine.XR.Interaction.Toolkit.InputAxes value)
    // Offset: 0xFE651C
    void set_turnUsage(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes value);
    // public System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> get_controllers()
    // Offset: 0xFE6524
    ::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>* get_controllers();
    // public System.Void set_controllers(System.Collections.Generic.List`1<UnityEngine.XR.Interaction.Toolkit.XRBaseController> value)
    // Offset: 0xFE652C
    void set_controllers(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>* value);
    // public System.Single get_deadZone()
    // Offset: 0xFE6534
    float get_deadZone();
    // public System.Void set_deadZone(System.Single value)
    // Offset: 0xFE653C
    void set_deadZone(float value);
    // static private System.Void .cctor()
    // Offset: 0xFE6854
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0xFE67C8
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
    // Base method: System.Void SnapTurnProviderBase::.ctor()
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeviceBasedSnapTurnProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeviceBasedSnapTurnProvider*, creationType>()));
    }
    // protected override UnityEngine.Vector2 ReadInput()
    // Offset: 0xFE6544
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.SnapTurnProviderBase
    // Base method: UnityEngine.Vector2 SnapTurnProviderBase::ReadInput()
    ::UnityEngine::Vector2 ReadInput();
  }; // UnityEngine.XR.Interaction.Toolkit.DeviceBasedSnapTurnProvider
  #pragma pack(pop)
  static check_size<sizeof(DeviceBasedSnapTurnProvider), 80 + sizeof(float)> __UnityEngine_XR_Interaction_Toolkit_DeviceBasedSnapTurnProviderSizeCheck;
  static_assert(sizeof(DeviceBasedSnapTurnProvider) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes, "UnityEngine.XR.Interaction.Toolkit", "DeviceBasedSnapTurnProvider/InputAxes");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_turnUsage
// Il2CppName: get_turnUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_turnUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "get_turnUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_turnUsage
// Il2CppName: set_turnUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)(::UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::InputAxes)>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_turnUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "DeviceBasedSnapTurnProvider/InputAxes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "set_turnUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_controllers
// Il2CppName: get_controllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>* (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_controllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "get_controllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_controllers
// Il2CppName: set_controllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)(::System::Collections::Generic::List_1<::UnityEngine::XR::Interaction::Toolkit::XRBaseController*>*)>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_controllers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "set_controllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_deadZone
// Il2CppName: get_deadZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::get_deadZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "get_deadZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_deadZone
// Il2CppName: set_deadZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)(float)>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::set_deadZone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "set_deadZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider::ReadInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::DeviceBasedSnapTurnProvider*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
