// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase
#include "UnityEngine/XR/Interaction/Toolkit/ContinuousMoveProviderBase.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: ActionBasedContinuousMoveProvider
  class ActionBasedContinuousMoveProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*, "UnityEngine.XR.Interaction.Toolkit", "ActionBasedContinuousMoveProvider");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.ActionBasedContinuousMoveProvider
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97F0B8
  class ActionBasedContinuousMoveProvider : public ::UnityEngine::XR::Interaction::Toolkit::ContinuousMoveProviderBase {
    public:
    public:
    // [TooltipAttribute] Offset: 0x981920
    // private UnityEngine.InputSystem.InputActionProperty m_LeftHandMoveAction
    // Size: 0x18
    // Offset: 0x60
    ::UnityEngine::InputSystem::InputActionProperty m_LeftHandMoveAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // [TooltipAttribute] Offset: 0x98196C
    // private UnityEngine.InputSystem.InputActionProperty m_RightHandMoveAction
    // Size: 0x18
    // Offset: 0x78
    ::UnityEngine::InputSystem::InputActionProperty m_RightHandMoveAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_LeftHandMoveAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_LeftHandMoveAction();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionProperty m_RightHandMoveAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_RightHandMoveAction();
    // public UnityEngine.InputSystem.InputActionProperty get_leftHandMoveAction()
    // Offset: 0xFE273C
    ::UnityEngine::InputSystem::InputActionProperty get_leftHandMoveAction();
    // public System.Void set_leftHandMoveAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2750
    void set_leftHandMoveAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.InputActionProperty get_rightHandMoveAction()
    // Offset: 0xFE2820
    ::UnityEngine::InputSystem::InputActionProperty get_rightHandMoveAction();
    // public System.Void set_rightHandMoveAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2834
    void set_rightHandMoveAction(::UnityEngine::InputSystem::InputActionProperty value);
    // protected System.Void OnEnable()
    // Offset: 0xFE2868
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xFE2964
    void OnDisable();
    // private System.Void SetInputActionProperty(ref UnityEngine.InputSystem.InputActionProperty property, UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xFE2784
    void SetInputActionProperty(ByRef<::UnityEngine::InputSystem::InputActionProperty> property, ::UnityEngine::InputSystem::InputActionProperty value);
    // public System.Void .ctor()
    // Offset: 0xFE2B8C
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase
    // Base method: System.Void ContinuousMoveProviderBase::.ctor()
    // Base method: System.Void LocomotionProvider::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActionBasedContinuousMoveProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActionBasedContinuousMoveProvider*, creationType>()));
    }
    // protected override UnityEngine.Vector2 ReadInput()
    // Offset: 0xFE2A60
    // Implemented from: UnityEngine.XR.Interaction.Toolkit.ContinuousMoveProviderBase
    // Base method: UnityEngine.Vector2 ContinuousMoveProviderBase::ReadInput()
    ::UnityEngine::Vector2 ReadInput();
  }; // UnityEngine.XR.Interaction.Toolkit.ActionBasedContinuousMoveProvider
  #pragma pack(pop)
  static check_size<sizeof(ActionBasedContinuousMoveProvider), 120 + sizeof(::UnityEngine::InputSystem::InputActionProperty)> __UnityEngine_XR_Interaction_Toolkit_ActionBasedContinuousMoveProviderSizeCheck;
  static_assert(sizeof(ActionBasedContinuousMoveProvider) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::get_leftHandMoveAction
// Il2CppName: get_leftHandMoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::get_leftHandMoveAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "get_leftHandMoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::set_leftHandMoveAction
// Il2CppName: set_leftHandMoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::set_leftHandMoveAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "set_leftHandMoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::get_rightHandMoveAction
// Il2CppName: get_rightHandMoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::get_rightHandMoveAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "get_rightHandMoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::set_rightHandMoveAction
// Il2CppName: set_rightHandMoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::set_rightHandMoveAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "set_rightHandMoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::SetInputActionProperty
// Il2CppName: SetInputActionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)(ByRef<::UnityEngine::InputSystem::InputActionProperty>, ::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::SetInputActionProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "SetInputActionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::ReadInput
// Il2CppName: ReadInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::*)()>(&UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider::ReadInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::ActionBasedContinuousMoveProvider*), "ReadInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
