// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRBaseInteractable
  class XRBaseInteractable;
  // Forward declaring type: XRBaseInteractor
  class XRBaseInteractor;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRTintInteractableVisual
  class XRTintInteractableVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*, "UnityEngine.XR.Interaction.Toolkit", "XRTintInteractableVisual");
// Type namespace: UnityEngine.XR.Interaction.Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Size: 0x4A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.XR.Interaction.Toolkit.XRTintInteractableVisual
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97ECA4
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class XRTintInteractableVisual : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::ShaderPropertyLookup
    struct ShaderPropertyLookup;
    public:
    // [TooltipAttribute] Offset: 0x97FC24
    // private UnityEngine.Color m_TintColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color m_TintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [TooltipAttribute] Offset: 0x97FC70
    // private System.Boolean m_TintOnHover
    // Size: 0x1
    // Offset: 0x28
    bool m_TintOnHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x97FCBC
    // private System.Boolean m_TintOnSelection
    // Size: 0x1
    // Offset: 0x29
    bool m_TintOnSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TintOnSelection and: m_TintRenderers
    char __padding2[0x6] = {};
    // [TooltipAttribute] Offset: 0x97FD08
    // private System.Collections.Generic.List`1<UnityEngine.Renderer> m_TintRenderers
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* m_TintRenderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_Interactable
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable* m_Interactable;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock m_TintPropertyBlock
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MaterialPropertyBlock* m_TintPropertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private System.Boolean m_EmissionEnabled
    // Size: 0x1
    // Offset: 0x48
    bool m_EmissionEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HasLoggedMaterialInstance
    // Size: 0x1
    // Offset: 0x49
    bool m_HasLoggedMaterialInstance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Material> s_Materials
    static ::System::Collections::Generic::List_1<::UnityEngine::Material*>* _get_s_Materials();
    // Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Material> s_Materials
    static void _set_s_Materials(::System::Collections::Generic::List_1<::UnityEngine::Material*>* value);
    // Get instance field reference: private UnityEngine.Color m_TintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_TintColor();
    // Get instance field reference: private System.Boolean m_TintOnHover
    [[deprecated("Use field access instead!")]] bool& dyn_m_TintOnHover();
    // Get instance field reference: private System.Boolean m_TintOnSelection
    [[deprecated("Use field access instead!")]] bool& dyn_m_TintOnSelection();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Renderer> m_TintRenderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& dyn_m_TintRenderers();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRBaseInteractable m_Interactable
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractable*& dyn_m_Interactable();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_TintPropertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_TintPropertyBlock();
    // Get instance field reference: private System.Boolean m_EmissionEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_EmissionEnabled();
    // Get instance field reference: private System.Boolean m_HasLoggedMaterialInstance
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasLoggedMaterialInstance();
    // public UnityEngine.Color get_tintColor()
    // Offset: 0x1BDC4F4
    ::UnityEngine::Color get_tintColor();
    // public System.Void set_tintColor(UnityEngine.Color value)
    // Offset: 0x1BDC500
    void set_tintColor(::UnityEngine::Color value);
    // public System.Boolean get_tintOnHover()
    // Offset: 0x1BDC50C
    bool get_tintOnHover();
    // public System.Void set_tintOnHover(System.Boolean value)
    // Offset: 0x1BDC514
    void set_tintOnHover(bool value);
    // public System.Boolean get_tintOnSelection()
    // Offset: 0x1BDC520
    bool get_tintOnSelection();
    // public System.Void set_tintOnSelection(System.Boolean value)
    // Offset: 0x1BDC528
    void set_tintOnSelection(bool value);
    // public System.Collections.Generic.List`1<UnityEngine.Renderer> get_tintRenderers()
    // Offset: 0x1BDC534
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* get_tintRenderers();
    // public System.Void set_tintRenderers(System.Collections.Generic.List`1<UnityEngine.Renderer> value)
    // Offset: 0x1BDC53C
    void set_tintRenderers(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* value);
    // public System.Void .ctor()
    // Offset: 0x1BDD330
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRTintInteractableVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRTintInteractableVisual*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BDD3B8
    static void _cctor();
    // protected System.Void Awake()
    // Offset: 0x1BDC544
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x1BDC854
    void OnDestroy();
    // protected System.Void SetTint(System.Boolean on)
    // Offset: 0x1BDCA18
    void SetTint(bool on);
    // protected System.Boolean GetEmissionEnabled()
    // Offset: 0x1BDCF28
    bool GetEmissionEnabled();
    // private System.Void OnFirstHoverEntered(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x1BDD2C0
    void OnFirstHoverEntered(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void OnLastHoverExited(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x1BDD2DC
    void OnLastHoverExited(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void OnSelectEntered(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x1BDD2F8
    void OnSelectEntered(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
    // private System.Void OnSelectExited(UnityEngine.XR.Interaction.Toolkit.XRBaseInteractor interactor)
    // Offset: 0x1BDD314
    void OnSelectExited(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor* interactor);
  }; // UnityEngine.XR.Interaction.Toolkit.XRTintInteractableVisual
  #pragma pack(pop)
  static check_size<sizeof(XRTintInteractableVisual), 73 + sizeof(bool)> __UnityEngine_XR_Interaction_Toolkit_XRTintInteractableVisualSizeCheck;
  static_assert(sizeof(XRTintInteractableVisual) == 0x4A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintColor
// Il2CppName: get_tintColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "get_tintColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintColor
// Il2CppName: set_tintColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::UnityEngine::Color)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "set_tintColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintOnHover
// Il2CppName: get_tintOnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintOnHover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "get_tintOnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintOnHover
// Il2CppName: set_tintOnHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintOnHover)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "set_tintOnHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintOnSelection
// Il2CppName: get_tintOnSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintOnSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "get_tintOnSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintOnSelection
// Il2CppName: set_tintOnSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintOnSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "set_tintOnSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintRenderers
// Il2CppName: get_tintRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::get_tintRenderers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "get_tintRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintRenderers
// Il2CppName: set_tintRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::set_tintRenderers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "set_tintRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::SetTint
// Il2CppName: SetTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(bool)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::SetTint)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "SetTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::GetEmissionEnabled
// Il2CppName: GetEmissionEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)()>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::GetEmissionEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "GetEmissionEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnFirstHoverEntered
// Il2CppName: OnFirstHoverEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnFirstHoverEntered)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "OnFirstHoverEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnLastHoverExited
// Il2CppName: OnLastHoverExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnLastHoverExited)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "OnLastHoverExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnSelectEntered
// Il2CppName: OnSelectEntered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnSelectEntered)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "OnSelectEntered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnSelectExited
// Il2CppName: OnSelectExited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::*)(::UnityEngine::XR::Interaction::Toolkit::XRBaseInteractor*)>(&UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual::OnSelectExited)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("UnityEngine.XR.Interaction.Toolkit", "XRBaseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::Interaction::Toolkit::XRTintInteractableVisual*), "OnSelectExited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
