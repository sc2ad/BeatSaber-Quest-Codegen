// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // Forward declaring type: HapticCapabilities
  struct HapticCapabilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::XR::HapticCapabilities, "UnityEngine.XR", "HapticCapabilities");
// Type namespace: UnityEngine.XR
namespace UnityEngine::XR {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.XR.HapticCapabilities
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeConditionalAttribute] Offset: 929DC4
  struct HapticCapabilities/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::XR::HapticCapabilities>*/ {
    public:
    public:
    // private System.UInt32 m_NumChannels
    // Size: 0x4
    // Offset: 0x0
    uint m_NumChannels;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean m_SupportsImpulse
    // Size: 0x1
    // Offset: 0x4
    bool m_SupportsImpulse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SupportsBuffer
    // Size: 0x1
    // Offset: 0x5
    bool m_SupportsBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SupportsBuffer and: m_BufferFrequencyHz
    char __padding2[0x2] = {};
    // private System.UInt32 m_BufferFrequencyHz
    // Size: 0x4
    // Offset: 0x8
    uint m_BufferFrequencyHz;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_BufferMaxSize
    // Size: 0x4
    // Offset: 0xC
    uint m_BufferMaxSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_BufferOptimalSize
    // Size: 0x4
    // Offset: 0x10
    uint m_BufferOptimalSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: HapticCapabilities
    constexpr HapticCapabilities(uint m_NumChannels_ = {}, bool m_SupportsImpulse_ = {}, bool m_SupportsBuffer_ = {}, uint m_BufferFrequencyHz_ = {}, uint m_BufferMaxSize_ = {}, uint m_BufferOptimalSize_ = {}) noexcept : m_NumChannels{m_NumChannels_}, m_SupportsImpulse{m_SupportsImpulse_}, m_SupportsBuffer{m_SupportsBuffer_}, m_BufferFrequencyHz{m_BufferFrequencyHz_}, m_BufferMaxSize{m_BufferMaxSize_}, m_BufferOptimalSize{m_BufferOptimalSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::XR::HapticCapabilities>
    operator ::System::IEquatable_1<::UnityEngine::XR::HapticCapabilities>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::XR::HapticCapabilities>*>(this);
    }
    // Get instance field reference: private System.UInt32 m_NumChannels
    [[deprecated("Use field access instead!")]] uint& dyn_m_NumChannels();
    // Get instance field reference: private System.Boolean m_SupportsImpulse
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsImpulse();
    // Get instance field reference: private System.Boolean m_SupportsBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_SupportsBuffer();
    // Get instance field reference: private System.UInt32 m_BufferFrequencyHz
    [[deprecated("Use field access instead!")]] uint& dyn_m_BufferFrequencyHz();
    // Get instance field reference: private System.UInt32 m_BufferMaxSize
    [[deprecated("Use field access instead!")]] uint& dyn_m_BufferMaxSize();
    // Get instance field reference: private System.UInt32 m_BufferOptimalSize
    [[deprecated("Use field access instead!")]] uint& dyn_m_BufferOptimalSize();
    // public System.UInt32 get_numChannels()
    // Offset: 0xA7B2AC
    uint get_numChannels();
    // public System.Boolean get_supportsImpulse()
    // Offset: 0xA7B2B4
    bool get_supportsImpulse();
    // public System.Boolean get_supportsBuffer()
    // Offset: 0xA7B2BC
    bool get_supportsBuffer();
    // public System.UInt32 get_bufferFrequencyHz()
    // Offset: 0xA7B2C4
    uint get_bufferFrequencyHz();
    // public System.UInt32 get_bufferMaxSize()
    // Offset: 0xA7B2CC
    uint get_bufferMaxSize();
    // public System.UInt32 get_bufferOptimalSize()
    // Offset: 0xA7B2D4
    uint get_bufferOptimalSize();
    // public System.Boolean Equals(UnityEngine.XR.HapticCapabilities other)
    // Offset: 0xA7B2E4
    bool Equals(::UnityEngine::XR::HapticCapabilities other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA7B2DC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA7B31C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.XR.HapticCapabilities
  #pragma pack(pop)
  static check_size<sizeof(HapticCapabilities), 16 + sizeof(uint)> __UnityEngine_XR_HapticCapabilitiesSizeCheck;
  static_assert(sizeof(HapticCapabilities) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_numChannels
// Il2CppName: get_numChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_numChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_numChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_supportsImpulse
// Il2CppName: get_supportsImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_supportsImpulse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_supportsImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_supportsBuffer
// Il2CppName: get_supportsBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_supportsBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_supportsBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_bufferFrequencyHz
// Il2CppName: get_bufferFrequencyHz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_bufferFrequencyHz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_bufferFrequencyHz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_bufferMaxSize
// Il2CppName: get_bufferMaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_bufferMaxSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_bufferMaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::get_bufferOptimalSize
// Il2CppName: get_bufferOptimalSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::get_bufferOptimalSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "get_bufferOptimalSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::HapticCapabilities::*)(::UnityEngine::XR::HapticCapabilities)>(&UnityEngine::XR::HapticCapabilities::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "HapticCapabilities")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::XR::HapticCapabilities::*)(::Il2CppObject*)>(&UnityEngine::XR::HapticCapabilities::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::XR::HapticCapabilities::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::XR::HapticCapabilities::*)()>(&UnityEngine::XR::HapticCapabilities::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::XR::HapticCapabilities), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
