// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUIStyleState
  class GUIStyleState;
  // Forward declaring type: RectOffset
  class RectOffset;
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: ImagePosition
  struct ImagePosition;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: GUIContent
  class GUIContent;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUIStyle
  class GUIStyle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::GUIStyle);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GUIStyle*, "UnityEngine", "GUIStyle");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x80
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.GUIStyle
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 106F484
  // [NativeHeaderAttribute] Offset: 106F484
  // [RequiredByNativeCodeAttribute] Offset: 106F484
  class GUIStyle : public ::Il2CppObject {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private UnityEngine.GUIStyleState m_Normal
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GUIStyleState* m_Normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_Hover
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GUIStyleState* m_Hover;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_Active
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GUIStyleState* m_Active;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_Focused
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GUIStyleState* m_Focused;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_OnNormal
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GUIStyleState* m_OnNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_OnHover
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GUIStyleState* m_OnHover;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_OnActive
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GUIStyleState* m_OnActive;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.GUIStyleState m_OnFocused
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GUIStyleState* m_OnFocused;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyleState*) == 0x8);
    // private UnityEngine.RectOffset m_Border
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::RectOffset* m_Border;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectOffset*) == 0x8);
    // private UnityEngine.RectOffset m_Padding
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::RectOffset* m_Padding;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectOffset*) == 0x8);
    // private UnityEngine.RectOffset m_Margin
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::RectOffset* m_Margin;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectOffset*) == 0x8);
    // private UnityEngine.RectOffset m_Overflow
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::RectOffset* m_Overflow;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectOffset*) == 0x8);
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x78
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static System.Boolean showKeyboardFocus
    static bool _get_showKeyboardFocus();
    // Set static field: static System.Boolean showKeyboardFocus
    static void _set_showKeyboardFocus(bool value);
    // Get static field: static private UnityEngine.GUIStyle s_None
    static ::UnityEngine::GUIStyle* _get_s_None();
    // Set static field: static private UnityEngine.GUIStyle s_None
    static void _set_s_None(::UnityEngine::GUIStyle* value);
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // Get instance field reference: private UnityEngine.GUIStyleState m_Normal
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_Normal();
    // Get instance field reference: private UnityEngine.GUIStyleState m_Hover
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_Hover();
    // Get instance field reference: private UnityEngine.GUIStyleState m_Active
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_Active();
    // Get instance field reference: private UnityEngine.GUIStyleState m_Focused
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_Focused();
    // Get instance field reference: private UnityEngine.GUIStyleState m_OnNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_OnNormal();
    // Get instance field reference: private UnityEngine.GUIStyleState m_OnHover
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_OnHover();
    // Get instance field reference: private UnityEngine.GUIStyleState m_OnActive
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_OnActive();
    // Get instance field reference: private UnityEngine.GUIStyleState m_OnFocused
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyleState*& dyn_m_OnFocused();
    // Get instance field reference: private UnityEngine.RectOffset m_Border
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectOffset*& dyn_m_Border();
    // Get instance field reference: private UnityEngine.RectOffset m_Padding
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectOffset*& dyn_m_Padding();
    // Get instance field reference: private UnityEngine.RectOffset m_Margin
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectOffset*& dyn_m_Margin();
    // Get instance field reference: private UnityEngine.RectOffset m_Overflow
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectOffset*& dyn_m_Overflow();
    // Get instance field reference: private System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // System.String get_rawName()
    // Offset: 0x1FEA38C
    ::StringW get_rawName();
    // System.Void set_rawName(System.String value)
    // Offset: 0x1FEA3CC
    void set_rawName(::StringW value);
    // public UnityEngine.Font get_font()
    // Offset: 0x1FDBF94
    ::UnityEngine::Font* get_font();
    // public UnityEngine.ImagePosition get_imagePosition()
    // Offset: 0x1FEA41C
    ::UnityEngine::ImagePosition get_imagePosition();
    // public System.Boolean get_wordWrap()
    // Offset: 0x1FEA45C
    bool get_wordWrap();
    // public System.Void set_wordWrap(System.Boolean value)
    // Offset: 0x1FEA49C
    void set_wordWrap(bool value);
    // public UnityEngine.Vector2 get_contentOffset()
    // Offset: 0x1FEA4EC
    ::UnityEngine::Vector2 get_contentOffset();
    // public System.Void set_contentOffset(UnityEngine.Vector2 value)
    // Offset: 0x1FEA594
    void set_contentOffset(::UnityEngine::Vector2 value);
    // public System.Single get_fixedWidth()
    // Offset: 0x1FDE1B0
    float get_fixedWidth();
    // public System.Single get_fixedHeight()
    // Offset: 0x1FDE1F0
    float get_fixedHeight();
    // public System.Boolean get_stretchWidth()
    // Offset: 0x1FE3DD8
    bool get_stretchWidth();
    // public System.Void set_stretchWidth(System.Boolean value)
    // Offset: 0x1FE8474
    void set_stretchWidth(bool value);
    // public System.Boolean get_stretchHeight()
    // Offset: 0x1FE3E18
    bool get_stretchHeight();
    // public System.Void set_stretchHeight(System.Boolean value)
    // Offset: 0x1FE9D6C
    void set_stretchHeight(bool value);
    // public System.Void set_fontSize(System.Int32 value)
    // Offset: 0x1FEA638
    void set_fontSize(int value);
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0x1FEA688
    void set_richText(bool value);
    // System.Void set_Internal_clipOffset(UnityEngine.Vector2 value)
    // Offset: 0x1FEA6D8
    void set_Internal_clipOffset(::UnityEngine::Vector2 value);
    // public System.String get_name()
    // Offset: 0x1FDD234
    ::StringW get_name();
    // public System.Void set_name(System.String value)
    // Offset: 0x1FE901C
    void set_name(::StringW value);
    // public UnityEngine.GUIStyleState get_normal()
    // Offset: 0x1FE9DBC
    ::UnityEngine::GUIStyleState* get_normal();
    // public UnityEngine.RectOffset get_margin()
    // Offset: 0x1FDF59C
    ::UnityEngine::RectOffset* get_margin();
    // public UnityEngine.RectOffset get_padding()
    // Offset: 0x1FE5434
    ::UnityEngine::RectOffset* get_padding();
    // public System.Single get_lineHeight()
    // Offset: 0x1FEB5EC
    float get_lineHeight();
    // static public UnityEngine.GUIStyle get_none()
    // Offset: 0x1FDE5BC
    static ::UnityEngine::GUIStyle* get_none();
    // public System.Boolean get_isHeightDependantOnWidth()
    // Offset: 0x1FE8048
    bool get_isHeightDependantOnWidth();
    // public System.Void .ctor()
    // Offset: 0x1FE83DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GUIStyle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::GUIStyle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GUIStyle*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.GUIStyle other)
    // Offset: 0x1FEB398
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GUIStyle* New_ctor(::UnityEngine::GUIStyle* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::GUIStyle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GUIStyle*, creationType>(other)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1FEC0A4
    static void _cctor();
    // static private System.IntPtr Internal_Create(UnityEngine.GUIStyle self)
    // Offset: 0x1FEA77C
    static ::System::IntPtr Internal_Create(::UnityEngine::GUIStyle* self);
    // static private System.IntPtr Internal_Copy(UnityEngine.GUIStyle self, UnityEngine.GUIStyle other)
    // Offset: 0x1FEA7BC
    static ::System::IntPtr Internal_Copy(::UnityEngine::GUIStyle* self, ::UnityEngine::GUIStyle* other);
    // static private System.Void Internal_Destroy(System.IntPtr self)
    // Offset: 0x1FEA80C
    static void Internal_Destroy(::System::IntPtr self);
    // private System.IntPtr GetStyleStatePtr(System.Int32 idx)
    // Offset: 0x1FEA84C
    ::System::IntPtr GetStyleStatePtr(int idx);
    // private System.IntPtr GetRectOffsetPtr(System.Int32 idx)
    // Offset: 0x1FEA89C
    ::System::IntPtr GetRectOffsetPtr(int idx);
    // static private System.Single Internal_GetLineHeight(System.IntPtr target)
    // Offset: 0x1FEA8EC
    static float Internal_GetLineHeight(::System::IntPtr target);
    // private System.Void Internal_Draw(UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)
    // Offset: 0x1FEA92C
    void Internal_Draw(::UnityEngine::Rect screenRect, ::UnityEngine::GUIContent* content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    // private System.Void Internal_Draw2(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)
    // Offset: 0x1FEAA4C
    void Internal_Draw2(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, bool on);
    // private System.Void Internal_DrawCursor(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 pos, UnityEngine.Color cursorColor)
    // Offset: 0x1FEAB3C
    void Internal_DrawCursor(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int pos, ::UnityEngine::Color cursorColor);
    // private System.Void Internal_DrawWithTextSelection(UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus, System.Boolean drawSelectionAsComposition, System.Int32 cursorFirst, System.Int32 cursorLast, UnityEngine.Color cursorColor, UnityEngine.Color selectionColor)
    // Offset: 0x1FEAC28
    void Internal_DrawWithTextSelection(::UnityEngine::Rect screenRect, ::UnityEngine::GUIContent* content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ::UnityEngine::Color cursorColor, ::UnityEngine::Color selectionColor);
    // UnityEngine.Vector2 Internal_GetCursorPixelPosition(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex)
    // Offset: 0x1FEADBC
    ::UnityEngine::Vector2 Internal_GetCursorPixelPosition(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int cursorStringIndex);
    // System.Int32 Internal_GetCursorStringIndex(UnityEngine.Rect position, UnityEngine.GUIContent content, UnityEngine.Vector2 cursorPixelPosition)
    // Offset: 0x1FEAEA8
    int Internal_GetCursorStringIndex(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, ::UnityEngine::Vector2 cursorPixelPosition);
    // System.String Internal_GetSelectedRenderedText(UnityEngine.Rect localPosition, UnityEngine.GUIContent mContent, System.Int32 selectIndex, System.Int32 cursorIndex)
    // Offset: 0x1FEAF80
    ::StringW Internal_GetSelectedRenderedText(::UnityEngine::Rect localPosition, ::UnityEngine::GUIContent* mContent, int selectIndex, int cursorIndex);
    // UnityEngine.Vector2 Internal_CalcSize(UnityEngine.GUIContent content)
    // Offset: 0x1FEB070
    ::UnityEngine::Vector2 Internal_CalcSize(::UnityEngine::GUIContent* content);
    // UnityEngine.Vector2 Internal_CalcSizeWithConstraints(UnityEngine.GUIContent content, UnityEngine.Vector2 maxSize)
    // Offset: 0x1FEB128
    ::UnityEngine::Vector2 Internal_CalcSizeWithConstraints(::UnityEngine::GUIContent* content, ::UnityEngine::Vector2 maxSize);
    // private System.Single Internal_CalcHeight(UnityEngine.GUIContent content, System.Single width)
    // Offset: 0x1FEB1FC
    float Internal_CalcHeight(::UnityEngine::GUIContent* content, float width);
    // private UnityEngine.Vector2 Internal_CalcMinMaxWidth(UnityEngine.GUIContent content)
    // Offset: 0x1FEB25C
    ::UnityEngine::Vector2 Internal_CalcMinMaxWidth(::UnityEngine::GUIContent* content);
    // static System.Void SetMouseTooltip(System.String tooltip, UnityEngine.Rect screenRect)
    // Offset: 0x1FDCCA0
    static void SetMouseTooltip(::StringW tooltip, ::UnityEngine::Rect screenRect);
    // static private System.Single Internal_GetCursorFlashOffset()
    // Offset: 0x1FEB364
    static float Internal_GetCursorFlashOffset();
    // static System.Void SetDefaultFont(UnityEngine.Font font)
    // Offset: 0x1FE8DE0
    static void SetDefaultFont(::UnityEngine::Font* font);
    // public System.Void Draw(UnityEngine.Rect position, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)
    // Offset: 0x1FDF64C
    void Draw(::UnityEngine::Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    // public System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)
    // Offset: 0x1FDCC30
    void Draw(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    // public System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID)
    // Offset: 0x1FDE65C
    void Draw(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID);
    // public System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)
    // Offset: 0x1FDB9C4
    void Draw(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, bool on);
    // public System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on, System.Boolean hover)
    // Offset: 0x1FD9CE4
    void Draw(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, bool on, bool hover);
    // private System.Void Draw(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlId, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)
    // Offset: 0x1FEB718
    void Draw(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    // public System.Void DrawCursor(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 character)
    // Offset: 0x1FEB7E4
    void DrawCursor(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, int character);
    // System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Boolean isActive, System.Boolean hasKeyboardFocus, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter, System.Boolean drawSelectionAsComposition, UnityEngine.Color selectionColor)
    // Offset: 0x1FEBA40
    void DrawWithTextSelection(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, ::UnityEngine::Color selectionColor);
    // System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter, System.Boolean drawSelectionAsComposition)
    // Offset: 0x1FEBCA0
    void DrawWithTextSelection(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition);
    // public System.Void DrawWithTextSelection(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Int32 firstSelectedCharacter, System.Int32 lastSelectedCharacter)
    // Offset: 0x1FEBE28
    void DrawWithTextSelection(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter);
    // public UnityEngine.Vector2 GetCursorPixelPosition(UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex)
    // Offset: 0x1FEBF1C
    ::UnityEngine::Vector2 GetCursorPixelPosition(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, int cursorStringIndex);
    // public System.Int32 GetCursorStringIndex(UnityEngine.Rect position, UnityEngine.GUIContent content, UnityEngine.Vector2 cursorPixelPosition)
    // Offset: 0x1FEBF20
    int GetCursorStringIndex(::UnityEngine::Rect position, ::UnityEngine::GUIContent* content, ::UnityEngine::Vector2 cursorPixelPosition);
    // public UnityEngine.Vector2 CalcSize(UnityEngine.GUIContent content)
    // Offset: 0x1FEBF24
    ::UnityEngine::Vector2 CalcSize(::UnityEngine::GUIContent* content);
    // UnityEngine.Vector2 CalcSizeWithConstraints(UnityEngine.GUIContent content, UnityEngine.Vector2 constraints)
    // Offset: 0x1FE81D0
    ::UnityEngine::Vector2 CalcSizeWithConstraints(::UnityEngine::GUIContent* content, ::UnityEngine::Vector2 constraints);
    // public System.Single CalcHeight(UnityEngine.GUIContent content, System.Single width)
    // Offset: 0x1FEBF28
    float CalcHeight(::UnityEngine::GUIContent* content, float width);
    // public System.Void CalcMinMaxWidth(UnityEngine.GUIContent content, out System.Single minWidth, out System.Single maxWidth)
    // Offset: 0x1FEBF88
    void CalcMinMaxWidth(::UnityEngine::GUIContent* content, ByRef<float> minWidth, ByRef<float> maxWidth);
    // private System.Void get_contentOffset_Injected(out UnityEngine.Vector2 ret)
    // Offset: 0x1FEA544
    void get_contentOffset_Injected(ByRef<::UnityEngine::Vector2> ret);
    // private System.Void set_contentOffset_Injected(ref UnityEngine.Vector2 value)
    // Offset: 0x1FEA5E8
    void set_contentOffset_Injected(ByRef<::UnityEngine::Vector2> value);
    // private System.Void set_Internal_clipOffset_Injected(ref UnityEngine.Vector2 value)
    // Offset: 0x1FEA72C
    void set_Internal_clipOffset_Injected(ByRef<::UnityEngine::Vector2> value);
    // private System.Void Internal_Draw_Injected(ref UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus)
    // Offset: 0x1FEA9C4
    void Internal_Draw_Injected(ByRef<::UnityEngine::Rect> screenRect, ::UnityEngine::GUIContent* content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus);
    // private System.Void Internal_Draw2_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 controlID, System.Boolean on)
    // Offset: 0x1FEAACC
    void Internal_Draw2_Injected(ByRef<::UnityEngine::Rect> position, ::UnityEngine::GUIContent* content, int controlID, bool on);
    // private System.Void Internal_DrawCursor_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 pos, ref UnityEngine.Color cursorColor)
    // Offset: 0x1FEABB8
    void Internal_DrawCursor_Injected(ByRef<::UnityEngine::Rect> position, ::UnityEngine::GUIContent* content, int pos, ByRef<::UnityEngine::Color> cursorColor);
    // private System.Void Internal_DrawWithTextSelection_Injected(ref UnityEngine.Rect screenRect, UnityEngine.GUIContent content, System.Boolean isHover, System.Boolean isActive, System.Boolean on, System.Boolean hasKeyboardFocus, System.Boolean drawSelectionAsComposition, System.Int32 cursorFirst, System.Int32 cursorLast, ref UnityEngine.Color cursorColor, ref UnityEngine.Color selectionColor)
    // Offset: 0x1FEACFC
    void Internal_DrawWithTextSelection_Injected(ByRef<::UnityEngine::Rect> screenRect, ::UnityEngine::GUIContent* content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ByRef<::UnityEngine::Color> cursorColor, ByRef<::UnityEngine::Color> selectionColor);
    // private System.Void Internal_GetCursorPixelPosition_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, System.Int32 cursorStringIndex, out UnityEngine.Vector2 ret)
    // Offset: 0x1FEAE38
    void Internal_GetCursorPixelPosition_Injected(ByRef<::UnityEngine::Rect> position, ::UnityEngine::GUIContent* content, int cursorStringIndex, ByRef<::UnityEngine::Vector2> ret);
    // private System.Int32 Internal_GetCursorStringIndex_Injected(ref UnityEngine.Rect position, UnityEngine.GUIContent content, ref UnityEngine.Vector2 cursorPixelPosition)
    // Offset: 0x1FEAF18
    int Internal_GetCursorStringIndex_Injected(ByRef<::UnityEngine::Rect> position, ::UnityEngine::GUIContent* content, ByRef<::UnityEngine::Vector2> cursorPixelPosition);
    // private System.String Internal_GetSelectedRenderedText_Injected(ref UnityEngine.Rect localPosition, UnityEngine.GUIContent mContent, System.Int32 selectIndex, System.Int32 cursorIndex)
    // Offset: 0x1FEB000
    ::StringW Internal_GetSelectedRenderedText_Injected(ByRef<::UnityEngine::Rect> localPosition, ::UnityEngine::GUIContent* mContent, int selectIndex, int cursorIndex);
    // private System.Void Internal_CalcSize_Injected(UnityEngine.GUIContent content, out UnityEngine.Vector2 ret)
    // Offset: 0x1FEB0D0
    void Internal_CalcSize_Injected(::UnityEngine::GUIContent* content, ByRef<::UnityEngine::Vector2> ret);
    // private System.Void Internal_CalcSizeWithConstraints_Injected(UnityEngine.GUIContent content, ref UnityEngine.Vector2 maxSize, out UnityEngine.Vector2 ret)
    // Offset: 0x1FEB194
    void Internal_CalcSizeWithConstraints_Injected(::UnityEngine::GUIContent* content, ByRef<::UnityEngine::Vector2> maxSize, ByRef<::UnityEngine::Vector2> ret);
    // private System.Void Internal_CalcMinMaxWidth_Injected(UnityEngine.GUIContent content, out UnityEngine.Vector2 ret)
    // Offset: 0x1FEB2BC
    void Internal_CalcMinMaxWidth_Injected(::UnityEngine::GUIContent* content, ByRef<::UnityEngine::Vector2> ret);
    // static private System.Void SetMouseTooltip_Injected(System.String tooltip, ref UnityEngine.Rect screenRect)
    // Offset: 0x1FEB314
    static void SetMouseTooltip_Injected(::StringW tooltip, ByRef<::UnityEngine::Rect> screenRect);
    // protected override System.Void Finalize()
    // Offset: 0x1FEB480
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.String ToString()
    // Offset: 0x1FEBFB4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.GUIStyle
  #pragma pack(pop)
  static check_size<sizeof(GUIStyle), 120 + sizeof(::StringW)> __UnityEngine_GUIStyleSizeCheck;
  static_assert(sizeof(GUIStyle) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_rawName
// Il2CppName: get_rawName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_rawName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_rawName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_rawName
// Il2CppName: set_rawName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::StringW)>(&UnityEngine::GUIStyle::set_rawName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_rawName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_font
// Il2CppName: get_font
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Font* (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_font)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_imagePosition
// Il2CppName: get_imagePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ImagePosition (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_imagePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_imagePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_wordWrap
// Il2CppName: get_wordWrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_wordWrap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_wordWrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_wordWrap
// Il2CppName: set_wordWrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(bool)>(&UnityEngine::GUIStyle::set_wordWrap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_wordWrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_contentOffset
// Il2CppName: get_contentOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_contentOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_contentOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_contentOffset
// Il2CppName: set_contentOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::set_contentOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_contentOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_fixedWidth
// Il2CppName: get_fixedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_fixedWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_fixedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_fixedHeight
// Il2CppName: get_fixedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_fixedHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_fixedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_stretchWidth
// Il2CppName: get_stretchWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_stretchWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_stretchWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_stretchWidth
// Il2CppName: set_stretchWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(bool)>(&UnityEngine::GUIStyle::set_stretchWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_stretchWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_stretchHeight
// Il2CppName: get_stretchHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_stretchHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_stretchHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_stretchHeight
// Il2CppName: set_stretchHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(bool)>(&UnityEngine::GUIStyle::set_stretchHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_stretchHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_fontSize
// Il2CppName: set_fontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(int)>(&UnityEngine::GUIStyle::set_fontSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_richText
// Il2CppName: set_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(bool)>(&UnityEngine::GUIStyle::set_richText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_Internal_clipOffset
// Il2CppName: set_Internal_clipOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::set_Internal_clipOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_Internal_clipOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::StringW)>(&UnityEngine::GUIStyle::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_normal
// Il2CppName: get_normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GUIStyleState* (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_margin
// Il2CppName: get_margin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectOffset* (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_margin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_margin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_padding
// Il2CppName: get_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectOffset* (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_padding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_lineHeight
// Il2CppName: get_lineHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_lineHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_lineHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_none
// Il2CppName: get_none
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GUIStyle* (*)()>(&UnityEngine::GUIStyle::get_none)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_none", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_isHeightDependantOnWidth
// Il2CppName: get_isHeightDependantOnWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::get_isHeightDependantOnWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_isHeightDependantOnWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::GUIStyle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::GUIStyle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::GUIStyle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::UnityEngine::GUIStyle*)>(&UnityEngine::GUIStyle::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Copy
// Il2CppName: Internal_Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::UnityEngine::GUIStyle*, ::UnityEngine::GUIStyle*)>(&UnityEngine::GUIStyle::Internal_Copy)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIStyle")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, other});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Destroy
// Il2CppName: Internal_Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&UnityEngine::GUIStyle::Internal_Destroy)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::GetStyleStatePtr
// Il2CppName: GetStyleStatePtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::GUIStyle::*)(int)>(&UnityEngine::GUIStyle::GetStyleStatePtr)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "GetStyleStatePtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::GetRectOffsetPtr
// Il2CppName: GetRectOffsetPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::GUIStyle::*)(int)>(&UnityEngine::GUIStyle::GetRectOffsetPtr)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "GetRectOffsetPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetLineHeight
// Il2CppName: Internal_GetLineHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::System::IntPtr)>(&UnityEngine::GUIStyle::Internal_GetLineHeight)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetLineHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Draw
// Il2CppName: Internal_Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, bool, bool, bool, bool)>(&UnityEngine::GUIStyle::Internal_Draw)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, content, isHover, isActive, on, hasKeyboardFocus});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Draw2
// Il2CppName: Internal_Draw2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, bool)>(&UnityEngine::GUIStyle::Internal_Draw2)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Draw2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, on});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_DrawCursor
// Il2CppName: Internal_DrawCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, ::UnityEngine::Color)>(&UnityEngine::GUIStyle::Internal_DrawCursor)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_DrawCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, pos, cursorColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_DrawWithTextSelection
// Il2CppName: Internal_DrawWithTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, bool, bool, bool, bool, bool, int, int, ::UnityEngine::Color, ::UnityEngine::Color)>(&UnityEngine::GUIStyle::Internal_DrawWithTextSelection)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* drawSelectionAsComposition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cursorFirst = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorLast = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* selectionColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_DrawWithTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, content, isHover, isActive, on, hasKeyboardFocus, drawSelectionAsComposition, cursorFirst, cursorLast, cursorColor, selectionColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetCursorPixelPosition
// Il2CppName: Internal_GetCursorPixelPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int)>(&UnityEngine::GUIStyle::Internal_GetCursorPixelPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorStringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetCursorPixelPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorStringIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetCursorStringIndex
// Il2CppName: Internal_GetCursorStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, ::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::Internal_GetCursorStringIndex)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorPixelPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetCursorStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorPixelPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetSelectedRenderedText
// Il2CppName: Internal_GetSelectedRenderedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, int)>(&UnityEngine::GUIStyle::Internal_GetSelectedRenderedText)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* mContent = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* selectIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetSelectedRenderedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, mContent, selectIndex, cursorIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcSize
// Il2CppName: Internal_CalcSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*)>(&UnityEngine::GUIStyle::Internal_CalcSize)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcSizeWithConstraints
// Il2CppName: Internal_CalcSizeWithConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::Internal_CalcSizeWithConstraints)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* maxSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcSizeWithConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, maxSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcHeight
// Il2CppName: Internal_CalcHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, float)>(&UnityEngine::GUIStyle::Internal_CalcHeight)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, width});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcMinMaxWidth
// Il2CppName: Internal_CalcMinMaxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*)>(&UnityEngine::GUIStyle::Internal_CalcMinMaxWidth)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcMinMaxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::SetMouseTooltip
// Il2CppName: SetMouseTooltip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Rect)>(&UnityEngine::GUIStyle::SetMouseTooltip)> {
  static const MethodInfo* get() {
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "SetMouseTooltip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tooltip, screenRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetCursorFlashOffset
// Il2CppName: Internal_GetCursorFlashOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&UnityEngine::GUIStyle::Internal_GetCursorFlashOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetCursorFlashOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::SetDefaultFont
// Il2CppName: SetDefaultFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Font*)>(&UnityEngine::GUIStyle::SetDefaultFont)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "SetDefaultFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, bool, bool, bool, bool)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, isHover, isActive, on, hasKeyboardFocus});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, bool, bool, bool, bool)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, isHover, isActive, on, hasKeyboardFocus});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, bool)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, on});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, bool, bool)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, on, hover});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, bool, bool, bool, bool)>(&UnityEngine::GUIStyle::Draw)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlId, isHover, isActive, on, hasKeyboardFocus});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::DrawCursor
// Il2CppName: DrawCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, int)>(&UnityEngine::GUIStyle::DrawCursor)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "DrawCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, character});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::DrawWithTextSelection
// Il2CppName: DrawWithTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, bool, bool, int, int, bool, ::UnityEngine::Color)>(&UnityEngine::GUIStyle::DrawWithTextSelection)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* firstSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* drawSelectionAsComposition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* selectionColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "DrawWithTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, isActive, hasKeyboardFocus, firstSelectedCharacter, lastSelectedCharacter, drawSelectionAsComposition, selectionColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::DrawWithTextSelection
// Il2CppName: DrawWithTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, int, int, bool)>(&UnityEngine::GUIStyle::DrawWithTextSelection)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* firstSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* drawSelectionAsComposition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "DrawWithTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, firstSelectedCharacter, lastSelectedCharacter, drawSelectionAsComposition});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::DrawWithTextSelection
// Il2CppName: DrawWithTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int, int, int)>(&UnityEngine::GUIStyle::DrawWithTextSelection)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* firstSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastSelectedCharacter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "DrawWithTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, firstSelectedCharacter, lastSelectedCharacter});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::GetCursorPixelPosition
// Il2CppName: GetCursorPixelPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, int)>(&UnityEngine::GUIStyle::GetCursorPixelPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorStringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "GetCursorPixelPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorStringIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::GetCursorStringIndex
// Il2CppName: GetCursorStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::GUIStyle::*)(::UnityEngine::Rect, ::UnityEngine::GUIContent*, ::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::GetCursorStringIndex)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorPixelPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "GetCursorStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorPixelPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::CalcSize
// Il2CppName: CalcSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*)>(&UnityEngine::GUIStyle::CalcSize)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "CalcSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::CalcSizeWithConstraints
// Il2CppName: CalcSizeWithConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ::UnityEngine::Vector2)>(&UnityEngine::GUIStyle::CalcSizeWithConstraints)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* constraints = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "CalcSizeWithConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, constraints});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::CalcHeight
// Il2CppName: CalcHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, float)>(&UnityEngine::GUIStyle::CalcHeight)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "CalcHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, width});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::CalcMinMaxWidth
// Il2CppName: CalcMinMaxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ByRef<float>, ByRef<float>)>(&UnityEngine::GUIStyle::CalcMinMaxWidth)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* minWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "CalcMinMaxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, minWidth, maxWidth});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::get_contentOffset_Injected
// Il2CppName: get_contentOffset_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::get_contentOffset_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "get_contentOffset_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_contentOffset_Injected
// Il2CppName: set_contentOffset_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::set_contentOffset_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_contentOffset_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::set_Internal_clipOffset_Injected
// Il2CppName: set_Internal_clipOffset_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::set_Internal_clipOffset_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "set_Internal_clipOffset_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Draw_Injected
// Il2CppName: Internal_Draw_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, bool, bool, bool, bool)>(&UnityEngine::GUIStyle::Internal_Draw_Injected)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Draw_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, content, isHover, isActive, on, hasKeyboardFocus});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_Draw2_Injected
// Il2CppName: Internal_Draw2_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, int, bool)>(&UnityEngine::GUIStyle::Internal_Draw2_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* controlID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_Draw2_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, controlID, on});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_DrawCursor_Injected
// Il2CppName: Internal_DrawCursor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, int, ByRef<::UnityEngine::Color>)>(&UnityEngine::GUIStyle::Internal_DrawCursor_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_DrawCursor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, pos, cursorColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_DrawWithTextSelection_Injected
// Il2CppName: Internal_DrawWithTextSelection_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, bool, bool, bool, bool, bool, int, int, ByRef<::UnityEngine::Color>, ByRef<::UnityEngine::Color>)>(&UnityEngine::GUIStyle::Internal_DrawWithTextSelection_Injected)> {
  static const MethodInfo* get() {
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* isHover = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isActive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasKeyboardFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* drawSelectionAsComposition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* cursorFirst = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorLast = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    static auto* selectionColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_DrawWithTextSelection_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenRect, content, isHover, isActive, on, hasKeyboardFocus, drawSelectionAsComposition, cursorFirst, cursorLast, cursorColor, selectionColor});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetCursorPixelPosition_Injected
// Il2CppName: Internal_GetCursorPixelPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, int, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::Internal_GetCursorPixelPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorStringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetCursorPixelPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorStringIndex, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetCursorStringIndex_Injected
// Il2CppName: Internal_GetCursorStringIndex_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::Internal_GetCursorStringIndex_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* cursorPixelPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetCursorStringIndex_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, content, cursorPixelPosition});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_GetSelectedRenderedText_Injected
// Il2CppName: Internal_GetSelectedRenderedText_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::GUIStyle::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::GUIContent*, int, int)>(&UnityEngine::GUIStyle::Internal_GetSelectedRenderedText_Injected)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* mContent = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* selectIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cursorIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_GetSelectedRenderedText_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition, mContent, selectIndex, cursorIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcSize_Injected
// Il2CppName: Internal_CalcSize_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::Internal_CalcSize_Injected)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcSize_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcSizeWithConstraints_Injected
// Il2CppName: Internal_CalcSizeWithConstraints_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::Internal_CalcSizeWithConstraints_Injected)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* maxSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcSizeWithConstraints_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, maxSize, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Internal_CalcMinMaxWidth_Injected
// Il2CppName: Internal_CalcMinMaxWidth_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)(::UnityEngine::GUIContent*, ByRef<::UnityEngine::Vector2>)>(&UnityEngine::GUIStyle::Internal_CalcMinMaxWidth_Injected)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIContent")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Internal_CalcMinMaxWidth_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::SetMouseTooltip_Injected
// Il2CppName: SetMouseTooltip_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::UnityEngine::Rect>)>(&UnityEngine::GUIStyle::SetMouseTooltip_Injected)> {
  static const MethodInfo* get() {
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* screenRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "SetMouseTooltip_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tooltip, screenRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::GUIStyle::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::GUIStyle::*)()>(&UnityEngine::GUIStyle::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIStyle*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
