// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Skipping declaration: TrackingType because it is already included!
  // Skipping declaration: TrackedPose because it is already included!
  // Skipping declaration: DeviceType because it is already included!
  // Skipping declaration: UpdateType because it is already included!
  // Forward declaring type: PoseDataFlags
  struct PoseDataFlags;
}
// Forward declaring namespace: UnityEngine::Experimental::XR::Interaction
namespace UnityEngine::Experimental::XR::Interaction {
  // Forward declaring type: BasePoseProvider
  class BasePoseProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Forward declaring type: TrackedPoseDriver
  class TrackedPoseDriver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::SpatialTracking::TrackedPoseDriver);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::TrackedPoseDriver*, "UnityEngine.SpatialTracking", "TrackedPoseDriver");
// Type namespace: UnityEngine.SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.SpatialTracking.TrackedPoseDriver
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 96B294
  // [AddComponentMenu] Offset: 96B294
  // [HelpURLAttribute] Offset: 96B294
  class TrackedPoseDriver : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType
    struct DeviceType;
    // Nested type: ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose
    struct TrackedPose;
    // Nested type: ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType
    struct TrackingType;
    // Nested type: ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType
    struct UpdateType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeviceType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeviceType
      constexpr DeviceType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRDevice
      static constexpr const int GenericXRDevice = 0;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRDevice
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType _get_GenericXRDevice();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRDevice
      static void _set_GenericXRDevice(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRController
      static constexpr const int GenericXRController = 1;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRController
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType _get_GenericXRController();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRController
      static void _set_GenericXRController(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRRemote
      static constexpr const int GenericXRRemote = 2;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRRemote
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType _get_GenericXRRemote();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType GenericXRRemote
      static void _set_GenericXRRemote(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::DeviceType), 0 + sizeof(int)> __UnityEngine_SpatialTracking_TrackedPoseDriver_DeviceTypeSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::DeviceType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackedPose/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackedPose
      constexpr TrackedPose(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftEye
      static constexpr const int LeftEye = 0;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftEye
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_LeftEye();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftEye
      static void _set_LeftEye(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightEye
      static constexpr const int RightEye = 1;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightEye
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_RightEye();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightEye
      static void _set_RightEye(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Center
      static constexpr const int Center = 2;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Center
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_Center();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Center
      static void _set_Center(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Head
      static constexpr const int Head = 3;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Head
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_Head();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose Head
      static void _set_Head(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftPose
      static constexpr const int LeftPose = 4;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftPose
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_LeftPose();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose LeftPose
      static void _set_LeftPose(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightPose
      static constexpr const int RightPose = 5;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightPose
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_RightPose();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RightPose
      static void _set_RightPose(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose ColorCamera
      static constexpr const int ColorCamera = 6;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose ColorCamera
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_ColorCamera();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose ColorCamera
      static void _set_ColorCamera(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DepthCameraDeprecated
      static constexpr const int DepthCameraDeprecated = 7;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DepthCameraDeprecated
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_DepthCameraDeprecated();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DepthCameraDeprecated
      static void _set_DepthCameraDeprecated(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose FisheyeCameraDeprected
      static constexpr const int FisheyeCameraDeprected = 8;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose FisheyeCameraDeprected
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_FisheyeCameraDeprected();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose FisheyeCameraDeprected
      static void _set_FisheyeCameraDeprected(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DeviceDeprecated
      static constexpr const int DeviceDeprecated = 9;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DeviceDeprecated
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_DeviceDeprecated();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose DeviceDeprecated
      static void _set_DeviceDeprecated(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RemotePose
      static constexpr const int RemotePose = 10;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RemotePose
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose _get_RemotePose();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose RemotePose
      static void _set_RemotePose(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::TrackedPose), 0 + sizeof(int)> __UnityEngine_SpatialTracking_TrackedPoseDriver_TrackedPoseSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::TrackedPose) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackingType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackingType
      constexpr TrackingType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationAndPosition
      static constexpr const int RotationAndPosition = 0;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationAndPosition
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType _get_RotationAndPosition();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationAndPosition
      static void _set_RotationAndPosition(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationOnly
      static constexpr const int RotationOnly = 1;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationOnly
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType _get_RotationOnly();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType RotationOnly
      static void _set_RotationOnly(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType PositionOnly
      static constexpr const int PositionOnly = 2;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType PositionOnly
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType _get_PositionOnly();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType PositionOnly
      static void _set_PositionOnly(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::TrackingType), 0 + sizeof(int)> __UnityEngine_SpatialTracking_TrackedPoseDriver_TrackingTypeSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::TrackingType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateType
      constexpr UpdateType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType UpdateAndBeforeRender
      static constexpr const int UpdateAndBeforeRender = 0;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType UpdateAndBeforeRender
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType _get_UpdateAndBeforeRender();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType UpdateAndBeforeRender
      static void _set_UpdateAndBeforeRender(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType Update
      static constexpr const int Update = 1;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType Update
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType _get_Update();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType Update
      static void _set_Update(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType value);
      // static field const value: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType BeforeRender
      static constexpr const int BeforeRender = 2;
      // Get static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType BeforeRender
      static ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType _get_BeforeRender();
      // Set static field: static public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType BeforeRender
      static void _set_BeforeRender(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType
    #pragma pack(pop)
    static check_size<sizeof(TrackedPoseDriver::UpdateType), 0 + sizeof(int)> __UnityEngine_SpatialTracking_TrackedPoseDriver_UpdateTypeSizeCheck;
    static_assert(sizeof(TrackedPoseDriver::UpdateType) == 0x4);
    public:
    // private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType m_Device
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType m_Device;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType) == 0x4);
    // private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose m_PoseSource
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose m_PoseSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose) == 0x4);
    // private UnityEngine.Experimental.XR.Interaction.BasePoseProvider m_PoseProviderComponent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Experimental::XR::Interaction::BasePoseProvider* m_PoseProviderComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::Interaction::BasePoseProvider*) == 0x8);
    // private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType m_TrackingType
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType m_TrackingType;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType) == 0x4);
    // private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType m_UpdateType
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType m_UpdateType;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType) == 0x4);
    // private System.Boolean m_UseRelativeTransform
    // Size: 0x1
    // Offset: 0x30
    bool m_UseRelativeTransform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseRelativeTransform and: m_OriginPose
    char __padding5[0x3] = {};
    // protected UnityEngine.Pose m_OriginPose
    // Size: 0x1C
    // Offset: 0x34
    ::UnityEngine::Pose m_OriginPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType m_Device
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType& dyn_m_Device();
    // Get instance field reference: private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose m_PoseSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose& dyn_m_PoseSource();
    // Get instance field reference: private UnityEngine.Experimental.XR.Interaction.BasePoseProvider m_PoseProviderComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::Interaction::BasePoseProvider*& dyn_m_PoseProviderComponent();
    // Get instance field reference: private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType m_TrackingType
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType& dyn_m_TrackingType();
    // Get instance field reference: private UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType m_UpdateType
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType& dyn_m_UpdateType();
    // Get instance field reference: private System.Boolean m_UseRelativeTransform
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseRelativeTransform();
    // Get instance field reference: protected UnityEngine.Pose m_OriginPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_m_OriginPose();
    // public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType get_deviceType()
    // Offset: 0x1C1BFAC
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType get_deviceType();
    // System.Void set_deviceType(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType value)
    // Offset: 0x1C1BFB4
    void set_deviceType(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType value);
    // public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose get_poseSource()
    // Offset: 0x1C1BFBC
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose get_poseSource();
    // System.Void set_poseSource(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose value)
    // Offset: 0x1C1BFC4
    void set_poseSource(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose value);
    // public UnityEngine.Experimental.XR.Interaction.BasePoseProvider get_poseProviderComponent()
    // Offset: 0x1C1C100
    ::UnityEngine::Experimental::XR::Interaction::BasePoseProvider* get_poseProviderComponent();
    // public System.Void set_poseProviderComponent(UnityEngine.Experimental.XR.Interaction.BasePoseProvider value)
    // Offset: 0x1C1C108
    void set_poseProviderComponent(::UnityEngine::Experimental::XR::Interaction::BasePoseProvider* value);
    // public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType get_trackingType()
    // Offset: 0x1C1C1E8
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType get_trackingType();
    // public System.Void set_trackingType(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackingType value)
    // Offset: 0x1C1C1F0
    void set_trackingType(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType value);
    // public UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType get_updateType()
    // Offset: 0x1C1C1F8
    ::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType get_updateType();
    // public System.Void set_updateType(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.UpdateType value)
    // Offset: 0x1C1C200
    void set_updateType(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType value);
    // public System.Boolean get_UseRelativeTransform()
    // Offset: 0x1C1C208
    bool get_UseRelativeTransform();
    // public System.Void set_UseRelativeTransform(System.Boolean value)
    // Offset: 0x1C1C210
    void set_UseRelativeTransform(bool value);
    // public UnityEngine.Pose get_originPose()
    // Offset: 0x1C1C21C
    ::UnityEngine::Pose get_originPose();
    // public System.Void set_originPose(UnityEngine.Pose value)
    // Offset: 0x1C1C230
    void set_originPose(::UnityEngine::Pose value);
    // public System.Void .ctor()
    // Offset: 0x1C1C748
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackedPoseDriver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::SpatialTracking::TrackedPoseDriver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackedPoseDriver*, creationType>()));
    }
    // public System.Boolean SetPoseSource(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType deviceType, UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose pose)
    // Offset: 0x1C1BFCC
    bool SetPoseSource(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType deviceType, ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose pose);
    // private UnityEngine.SpatialTracking.PoseDataFlags GetPoseData(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.DeviceType device, UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose poseSource, out UnityEngine.Pose resultPose)
    // Offset: 0x1C1C110
    ::UnityEngine::SpatialTracking::PoseDataFlags GetPoseData(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType device, ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose poseSource, ByRef<::UnityEngine::Pose> resultPose);
    // private System.Void CacheLocalPosition()
    // Offset: 0x1C1C24C
    void CacheLocalPosition();
    // private System.Void ResetToCachedLocalPosition()
    // Offset: 0x1C1C2A8
    void ResetToCachedLocalPosition();
    // protected System.Void Awake()
    // Offset: 0x1C1C2C8
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x1C1C2CC
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x1C1C2D0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1C1C348
    void OnDisable();
    // protected System.Void FixedUpdate()
    // Offset: 0x1C1C3C8
    void FixedUpdate();
    // protected System.Void Update()
    // Offset: 0x1C1C3E4
    void Update();
    // protected System.Void OnBeforeRender()
    // Offset: 0x1C1C400
    void OnBeforeRender();
    // protected System.Void SetLocalTransform(UnityEngine.Vector3 newPosition, UnityEngine.Quaternion newRotation, UnityEngine.SpatialTracking.PoseDataFlags poseFlags)
    // Offset: 0x1C1C420
    void SetLocalTransform(::UnityEngine::Vector3 newPosition, ::UnityEngine::Quaternion newRotation, ::UnityEngine::SpatialTracking::PoseDataFlags poseFlags);
    // protected UnityEngine.Pose TransformPoseByOriginIfNeeded(UnityEngine.Pose pose)
    // Offset: 0x1C1C508
    ::UnityEngine::Pose TransformPoseByOriginIfNeeded(::UnityEngine::Pose pose);
    // private System.Boolean HasStereoCamera()
    // Offset: 0x1C1C560
    bool HasStereoCamera();
    // protected System.Void PerformUpdate()
    // Offset: 0x1C1C610
    void PerformUpdate();
  }; // UnityEngine.SpatialTracking.TrackedPoseDriver
  #pragma pack(pop)
  static check_size<sizeof(TrackedPoseDriver), 52 + sizeof(::UnityEngine::Pose)> __UnityEngine_SpatialTracking_TrackedPoseDriverSizeCheck;
  static_assert(sizeof(TrackedPoseDriver) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType, "UnityEngine.SpatialTracking", "TrackedPoseDriver/UpdateType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType, "UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackingType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose, "UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType, "UnityEngine.SpatialTracking", "TrackedPoseDriver/DeviceType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_deviceType
// Il2CppName: get_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_deviceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_deviceType
// Il2CppName: set_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_deviceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/DeviceType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_poseSource
// Il2CppName: get_poseSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_poseSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_poseSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_poseSource
// Il2CppName: set_poseSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_poseSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_poseSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_poseProviderComponent
// Il2CppName: get_poseProviderComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::XR::Interaction::BasePoseProvider* (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_poseProviderComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_poseProviderComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_poseProviderComponent
// Il2CppName: set_poseProviderComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::Experimental::XR::Interaction::BasePoseProvider*)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_poseProviderComponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR.Interaction", "BasePoseProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_poseProviderComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_trackingType
// Il2CppName: get_trackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_trackingType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_trackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_trackingType
// Il2CppName: set_trackingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackingType)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_trackingType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackingType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_trackingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_updateType
// Il2CppName: get_updateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_updateType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_updateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_updateType
// Il2CppName: set_updateType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::UpdateType)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_updateType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/UpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_updateType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_UseRelativeTransform
// Il2CppName: get_UseRelativeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_UseRelativeTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_UseRelativeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_UseRelativeTransform
// Il2CppName: set_UseRelativeTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(bool)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_UseRelativeTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_UseRelativeTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::get_originPose
// Il2CppName: get_originPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::get_originPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "get_originPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::set_originPose
// Il2CppName: set_originPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::Pose)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::set_originPose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "set_originPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::SetPoseSource
// Il2CppName: SetPoseSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType, ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::SetPoseSource)> {
  static const MethodInfo* get() {
    static auto* deviceType = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/DeviceType")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "SetPoseSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceType, pose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::GetPoseData
// Il2CppName: GetPoseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::PoseDataFlags (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::DeviceType, ::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose, ByRef<::UnityEngine::Pose>)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::GetPoseData)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/DeviceType")->byval_arg;
    static auto* poseSource = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose")->byval_arg;
    static auto* resultPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "GetPoseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, poseSource, resultPose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::CacheLocalPosition
// Il2CppName: CacheLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::CacheLocalPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "CacheLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::ResetToCachedLocalPosition
// Il2CppName: ResetToCachedLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::ResetToCachedLocalPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "ResetToCachedLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::SetLocalTransform
// Il2CppName: SetLocalTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::SpatialTracking::PoseDataFlags)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::SetLocalTransform)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* newRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* poseFlags = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "PoseDataFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "SetLocalTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition, newRotation, poseFlags});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::TransformPoseByOriginIfNeeded
// Il2CppName: TransformPoseByOriginIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (UnityEngine::SpatialTracking::TrackedPoseDriver::*)(::UnityEngine::Pose)>(&UnityEngine::SpatialTracking::TrackedPoseDriver::TransformPoseByOriginIfNeeded)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "TransformPoseByOriginIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::HasStereoCamera
// Il2CppName: HasStereoCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::HasStereoCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "HasStereoCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::TrackedPoseDriver::PerformUpdate
// Il2CppName: PerformUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::SpatialTracking::TrackedPoseDriver::*)()>(&UnityEngine::SpatialTracking::TrackedPoseDriver::PerformUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::TrackedPoseDriver*), "PerformUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
