// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
// Including type: UnityEngine.SpatialTracking.TrackedPoseDriver
#include "UnityEngine/SpatialTracking/TrackedPoseDriver.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Forward declaring type: PoseDataFlags
  struct PoseDataFlags;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Skipping declaration: XRNode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Pose because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Forward declaring type: PoseDataSource
  class PoseDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::SpatialTracking::PoseDataSource);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::SpatialTracking::PoseDataSource*, "UnityEngine.SpatialTracking", "PoseDataSource");
// Type namespace: UnityEngine.SpatialTracking
namespace UnityEngine::SpatialTracking {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.SpatialTracking.PoseDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class PoseDataSource : public ::Il2CppObject {
    public:
    // Get static field: static System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> nodeStates
    static ::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>* _get_nodeStates();
    // Set static field: static System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> nodeStates
    static void _set_nodeStates(::System::Collections::Generic::List_1<::UnityEngine::XR::XRNodeState>* value);
    // static private System.Void .cctor()
    // Offset: 0x1C1BF38
    static void _cctor();
    // static UnityEngine.SpatialTracking.PoseDataFlags GetNodePoseData(UnityEngine.XR.XRNode node, out UnityEngine.Pose resultPose)
    // Offset: 0x1C1B898
    static ::UnityEngine::SpatialTracking::PoseDataFlags GetNodePoseData(::UnityEngine::XR::XRNode node, ByRef<::UnityEngine::Pose> resultPose);
    // static public System.Boolean TryGetDataFromSource(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose poseSource, out UnityEngine.Pose resultPose)
    // Offset: 0x1C1BAD8
    static bool TryGetDataFromSource(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose poseSource, ByRef<::UnityEngine::Pose> resultPose);
    // static public UnityEngine.SpatialTracking.PoseDataFlags GetDataFromSource(UnityEngine.SpatialTracking.TrackedPoseDriver/UnityEngine.SpatialTracking.TrackedPose poseSource, out UnityEngine.Pose resultPose)
    // Offset: 0x1C1BB58
    static ::UnityEngine::SpatialTracking::PoseDataFlags GetDataFromSource(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose poseSource, ByRef<::UnityEngine::Pose> resultPose);
    // static private UnityEngine.SpatialTracking.PoseDataFlags TryGetTangoPose(out UnityEngine.Pose pose)
    // Offset: 0x1C1BE58
    static ::UnityEngine::SpatialTracking::PoseDataFlags TryGetTangoPose(ByRef<::UnityEngine::Pose> pose);
  }; // UnityEngine.SpatialTracking.PoseDataSource
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::PoseDataSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::SpatialTracking::PoseDataSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::PoseDataSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::PoseDataSource::GetNodePoseData
// Il2CppName: GetNodePoseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::PoseDataFlags (*)(::UnityEngine::XR::XRNode, ByRef<::UnityEngine::Pose>)>(&UnityEngine::SpatialTracking::PoseDataSource::GetNodePoseData)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* resultPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::PoseDataSource*), "GetNodePoseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, resultPose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::PoseDataSource::TryGetDataFromSource
// Il2CppName: TryGetDataFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose, ByRef<::UnityEngine::Pose>)>(&UnityEngine::SpatialTracking::PoseDataSource::TryGetDataFromSource)> {
  static const MethodInfo* get() {
    static auto* poseSource = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose")->byval_arg;
    static auto* resultPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::PoseDataSource*), "TryGetDataFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseSource, resultPose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::PoseDataSource::GetDataFromSource
// Il2CppName: GetDataFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::PoseDataFlags (*)(::UnityEngine::SpatialTracking::TrackedPoseDriver::TrackedPose, ByRef<::UnityEngine::Pose>)>(&UnityEngine::SpatialTracking::PoseDataSource::GetDataFromSource)> {
  static const MethodInfo* get() {
    static auto* poseSource = &::il2cpp_utils::GetClassFromName("UnityEngine.SpatialTracking", "TrackedPoseDriver/TrackedPose")->byval_arg;
    static auto* resultPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::PoseDataSource*), "GetDataFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseSource, resultPose});
  }
};
// Writing MetadataGetter for method: UnityEngine::SpatialTracking::PoseDataSource::TryGetTangoPose
// Il2CppName: TryGetTangoPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::SpatialTracking::PoseDataFlags (*)(ByRef<::UnityEngine::Pose>)>(&UnityEngine::SpatialTracking::PoseDataSource::TryGetTangoPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::SpatialTracking::PoseDataSource*), "TryGetTangoPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
