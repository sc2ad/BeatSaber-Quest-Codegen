// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::TriggerModule, "UnityEngine", "ParticleSystem/TriggerModule");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/UnityEngine.TriggerModule
  // [TokenAttribute] Offset: FFFFFFFF
  struct ParticleSystem::TriggerModule/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.ParticleSystem m_ParticleSystem
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::ParticleSystem* m_ParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Creating value type constructor for type: TriggerModule
    constexpr TriggerModule(::UnityEngine::ParticleSystem* m_ParticleSystem_ = {}) noexcept : m_ParticleSystem{m_ParticleSystem_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::ParticleSystem*
    constexpr operator ::UnityEngine::ParticleSystem*() const noexcept {
      return m_ParticleSystem;
    }
    // Get instance field reference: UnityEngine.ParticleSystem m_ParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_m_ParticleSystem();
    // System.Void .ctor(UnityEngine.ParticleSystem particleSystem)
    // Offset: 0xA7D8DC
    // ABORTED: conflicts with another method.  TriggerModule(::UnityEngine::ParticleSystem* particleSystem);
    // public System.Void SetCollider(System.Int32 index, UnityEngine.Component collider)
    // Offset: 0xA7D8E4
    void SetCollider(int index, ::UnityEngine::Component* collider);
    // static private System.Void SetCollider_Injected(ref UnityEngine.ParticleSystem/UnityEngine.TriggerModule _unity_self, System.Int32 index, UnityEngine.Component collider)
    // Offset: 0x1C20D0C
    static void SetCollider_Injected(ByRef<::UnityEngine::ParticleSystem::TriggerModule> _unity_self, int index, ::UnityEngine::Component* collider);
  }; // UnityEngine.ParticleSystem/UnityEngine.TriggerModule
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::TriggerModule), 0 + sizeof(::UnityEngine::ParticleSystem*)> __UnityEngine_ParticleSystem_TriggerModuleSizeCheck;
  static_assert(sizeof(ParticleSystem::TriggerModule) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerModule::TriggerModule
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerModule::SetCollider
// Il2CppName: SetCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::TriggerModule::*)(int, ::UnityEngine::Component*)>(&UnityEngine::ParticleSystem::TriggerModule::SetCollider)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::TriggerModule), "SetCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, collider});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::TriggerModule::SetCollider_Injected
// Il2CppName: SetCollider_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::ParticleSystem::TriggerModule>, int, ::UnityEngine::Component*)>(&UnityEngine::ParticleSystem::TriggerModule::SetCollider_Injected)> {
  static const MethodInfo* get() {
    static auto* _unity_self = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/TriggerModule")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::TriggerModule), "SetCollider_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_unity_self, index, collider});
  }
};
