// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: Vector2Mask
  struct Vector2Mask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ProBuilder::Vector2Mask, "UnityEngine.ProBuilder", "Vector2Mask");
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ProBuilder.Vector2Mask
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector2Mask/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Byte m_Mask
    // Size: 0x1
    // Offset: 0x0
    uint8_t m_Mask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: Vector2Mask
    constexpr Vector2Mask(uint8_t m_Mask_ = {}) noexcept : m_Mask{m_Mask_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return m_Mask;
    }
    // static field const value: static private System.Byte X
    static constexpr const uint8_t X = 1u;
    // Get static field: static private System.Byte X
    static uint8_t _get_X();
    // Set static field: static private System.Byte X
    static void _set_X(uint8_t value);
    // static field const value: static private System.Byte Y
    static constexpr const uint8_t Y = 2u;
    // Get static field: static private System.Byte Y
    static uint8_t _get_Y();
    // Set static field: static private System.Byte Y
    static void _set_Y(uint8_t value);
    // Get static field: static public readonly UnityEngine.ProBuilder.Vector2Mask XY
    static ::UnityEngine::ProBuilder::Vector2Mask _get_XY();
    // Set static field: static public readonly UnityEngine.ProBuilder.Vector2Mask XY
    static void _set_XY(::UnityEngine::ProBuilder::Vector2Mask value);
    // Get instance field reference: private System.Byte m_Mask
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Mask();
    // public System.Single get_x()
    // Offset: 0x29DE218
    float get_x();
    // public System.Single get_y()
    // Offset: 0x29DE230
    float get_y();
    // public System.Void .ctor(UnityEngine.Vector3 v, System.Single epsilon)
    // Offset: 0x29DE248
    Vector2Mask(::UnityEngine::Vector3 v, float epsilon);
    // public System.Void .ctor(System.Byte mask)
    // Offset: 0x29DE310
    // ABORTED: conflicts with another method.  Vector2Mask(uint8_t mask);
    // static private System.Void .cctor()
    // Offset: 0x29DE464
    static void _cctor();
  }; // UnityEngine.ProBuilder.Vector2Mask
  #pragma pack(pop)
  static check_size<sizeof(Vector2Mask), 0 + sizeof(uint8_t)> __UnityEngine_ProBuilder_Vector2MaskSizeCheck;
  static_assert(sizeof(Vector2Mask) == 0x1);
  // static public UnityEngine.ProBuilder.Vector2Mask op_BitwiseOr(UnityEngine.ProBuilder.Vector2Mask left, UnityEngine.ProBuilder.Vector2Mask right)
  // Offset: 0x29DE3F0
  ::UnityEngine::ProBuilder::Vector2Mask operator|(const ::UnityEngine::ProBuilder::Vector2Mask& left, const ::UnityEngine::ProBuilder::Vector2Mask& right);
  // static public UnityEngine.ProBuilder.Vector2Mask op_BitwiseAnd(UnityEngine.ProBuilder.Vector2Mask left, UnityEngine.ProBuilder.Vector2Mask right)
  // Offset: 0x29DE3FC
  ::UnityEngine::ProBuilder::Vector2Mask operator&(const ::UnityEngine::ProBuilder::Vector2Mask& left, const ::UnityEngine::ProBuilder::Vector2Mask& right);
  // static public UnityEngine.ProBuilder.Vector2Mask op_ExclusiveOr(UnityEngine.ProBuilder.Vector2Mask left, UnityEngine.ProBuilder.Vector2Mask right)
  // Offset: 0x29DE408
  ::UnityEngine::ProBuilder::Vector2Mask operator^(const ::UnityEngine::ProBuilder::Vector2Mask& left, const ::UnityEngine::ProBuilder::Vector2Mask& right);
  // static public UnityEngine.Vector2 op_Multiply(UnityEngine.ProBuilder.Vector2Mask mask, System.Single value)
  // Offset: 0x29DE414
  ::UnityEngine::Vector2 operator*(const ::UnityEngine::ProBuilder::Vector2Mask& mask, const float& value);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ProBuilder::Vector2Mask::*)()>(&UnityEngine::ProBuilder::Vector2Mask::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Vector2Mask), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::ProBuilder::Vector2Mask::*)()>(&UnityEngine::ProBuilder::Vector2Mask::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Vector2Mask), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::Vector2Mask
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::Vector2Mask
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::ProBuilder::Vector2Mask::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Vector2Mask), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::operator|
// Il2CppName: op_BitwiseOr
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::operator&
// Il2CppName: op_BitwiseAnd
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::operator^
// Il2CppName: op_ExclusiveOr
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Vector2Mask::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
