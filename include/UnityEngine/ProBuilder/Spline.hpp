// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ProBuilder.BezierPoint
#include "UnityEngine/ProBuilder/BezierPoint.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: ProBuilderMesh
  class ProBuilderMesh;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: Spline
  class Spline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::ProBuilder::Spline);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ProBuilder::Spline*, "UnityEngine.ProBuilder", "Spline");
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ProBuilder.Spline
  // [TokenAttribute] Offset: FFFFFFFF
  class Spline : public ::Il2CppObject {
    public:
    // static UnityEngine.ProBuilder.ProBuilderMesh Extrude(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.BezierPoint> points, System.Single radius, System.Int32 columns, System.Int32 rows, System.Boolean closeLoop, System.Boolean smooth)
    // Offset: 0x29D8F34
    static ::UnityEngine::ProBuilder::ProBuilderMesh* Extrude(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>* points, float radius, int columns, int rows, bool closeLoop, bool smooth);
    // static System.Void Extrude(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.BezierPoint> bezierPoints, System.Single radius, System.Int32 columns, System.Int32 rows, System.Boolean closeLoop, System.Boolean smooth, ref UnityEngine.ProBuilder.ProBuilderMesh target)
    // Offset: 0x29D8F64
    static void Extrude(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>* bezierPoints, float radius, int columns, int rows, bool closeLoop, bool smooth, ByRef<::UnityEngine::ProBuilder::ProBuilderMesh*> target);
    // static System.Collections.Generic.List`1<UnityEngine.Vector3> GetControlPoints(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.BezierPoint> bezierPoints, System.Int32 subdivisionsPerSegment, System.Boolean closeLoop, System.Collections.Generic.List`1<UnityEngine.Quaternion> rotations)
    // Offset: 0x29D9030
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* GetControlPoints(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>* bezierPoints, int subdivisionsPerSegment, bool closeLoop, ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>* rotations);
    // static System.Void Extrude(System.Collections.Generic.IList`1<UnityEngine.Vector3> points, System.Single radius, System.Int32 radiusRows, System.Boolean closeLoop, System.Boolean smooth, ref UnityEngine.ProBuilder.ProBuilderMesh target, System.Collections.Generic.IList`1<UnityEngine.Quaternion> pointRotations)
    // Offset: 0x29D94C4
    static void Extrude(::System::Collections::Generic::IList_1<::UnityEngine::Vector3>* points, float radius, int radiusRows, bool closeLoop, bool smooth, ByRef<::UnityEngine::ProBuilder::ProBuilderMesh*> target, ::System::Collections::Generic::IList_1<::UnityEngine::Quaternion>* pointRotations);
    // static private UnityEngine.Quaternion GetRingRotation(System.Collections.Generic.IList`1<UnityEngine.Vector3> points, System.Int32 i, System.Boolean closeLoop, out System.Single secant)
    // Offset: 0x29D9DA4
    static ::UnityEngine::Quaternion GetRingRotation(::System::Collections::Generic::IList_1<::UnityEngine::Vector3>* points, int i, bool closeLoop, ByRef<float> secant);
    // static private UnityEngine.Vector3[] VertexRing(UnityEngine.Quaternion orientation, UnityEngine.Vector3 offset, System.Single radius, System.Int32 segments)
    // Offset: 0x29DA4DC
    static ::ArrayW<::UnityEngine::Vector3> VertexRing(::UnityEngine::Quaternion orientation, ::UnityEngine::Vector3 offset, float radius, int segments);
  }; // UnityEngine.ProBuilder.Spline
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::Extrude
// Il2CppName: Extrude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ProBuilder::ProBuilderMesh* (*)(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>*, float, int, int, bool, bool)>(&UnityEngine::ProBuilder::Spline::Extrude)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ProBuilder", "BezierPoint")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* columns = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rows = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* smooth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "Extrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, radius, columns, rows, closeLoop, smooth});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::Extrude
// Il2CppName: Extrude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>*, float, int, int, bool, bool, ByRef<::UnityEngine::ProBuilder::ProBuilderMesh*>)>(&UnityEngine::ProBuilder::Spline::Extrude)> {
  static const MethodInfo* get() {
    static auto* bezierPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ProBuilder", "BezierPoint")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* columns = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rows = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* smooth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.ProBuilder", "ProBuilderMesh")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "Extrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bezierPoints, radius, columns, rows, closeLoop, smooth, target});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::GetControlPoints
// Il2CppName: GetControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (*)(::System::Collections::Generic::IList_1<::UnityEngine::ProBuilder::BezierPoint>*, int, bool, ::System::Collections::Generic::List_1<::UnityEngine::Quaternion>*)>(&UnityEngine::ProBuilder::Spline::GetControlPoints)> {
  static const MethodInfo* get() {
    static auto* bezierPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.ProBuilder", "BezierPoint")})->byval_arg;
    static auto* subdivisionsPerSegment = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rotations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "GetControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bezierPoints, subdivisionsPerSegment, closeLoop, rotations});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::Extrude
// Il2CppName: Extrude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::IList_1<::UnityEngine::Vector3>*, float, int, bool, bool, ByRef<::UnityEngine::ProBuilder::ProBuilderMesh*>, ::System::Collections::Generic::IList_1<::UnityEngine::Quaternion>*)>(&UnityEngine::ProBuilder::Spline::Extrude)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radiusRows = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* smooth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.ProBuilder", "ProBuilderMesh")->this_arg;
    static auto* pointRotations = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "Extrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, radius, radiusRows, closeLoop, smooth, target, pointRotations});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::GetRingRotation
// Il2CppName: GetRingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::System::Collections::Generic::IList_1<::UnityEngine::Vector3>*, int, bool, ByRef<float>)>(&UnityEngine::ProBuilder::Spline::GetRingRotation)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeLoop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* secant = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "GetRingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, i, closeLoop, secant});
  }
};
// Writing MetadataGetter for method: UnityEngine::ProBuilder::Spline::VertexRing
// Il2CppName: VertexRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3, float, int)>(&UnityEngine::ProBuilder::Spline::VertexRing)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* segments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ProBuilder::Spline*), "VertexRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation, offset, radius, segments});
  }
};
