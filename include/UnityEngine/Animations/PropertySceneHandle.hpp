// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Forward declaring type: PropertySceneHandle
  struct PropertySceneHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::PropertySceneHandle, "UnityEngine.Animations", "PropertySceneHandle");
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.PropertySceneHandle
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 9324D4
  // [MovedFromAttribute] Offset: 9324D4
  struct PropertySceneHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 valid
    // Size: 0x4
    // Offset: 0x0
    uint valid;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 handleIndex
    // Size: 0x4
    // Offset: 0x4
    int handleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PropertySceneHandle
    constexpr PropertySceneHandle(uint valid_ = {}, int handleIndex_ = {}) noexcept : valid{valid_}, handleIndex{handleIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 valid
    [[deprecated("Use field access instead!")]] uint& dyn_valid();
    // Get instance field reference: private System.Int32 handleIndex
    [[deprecated("Use field access instead!")]] int& dyn_handleIndex();
  }; // UnityEngine.Animations.PropertySceneHandle
  #pragma pack(pop)
  static check_size<sizeof(PropertySceneHandle), 4 + sizeof(int)> __UnityEngine_Animations_PropertySceneHandleSizeCheck;
  static_assert(sizeof(PropertySceneHandle) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
