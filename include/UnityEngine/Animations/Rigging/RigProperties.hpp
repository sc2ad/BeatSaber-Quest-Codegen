// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: RigProperties
  struct RigProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigProperties, "UnityEngine.Animations.Rigging", "RigProperties");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.RigProperties
  // [TokenAttribute] Offset: FFFFFFFF
  struct RigProperties/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Component component
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Component* component;
    // Field size check
    static_assert(sizeof(::UnityEngine::Component*) == 0x8);
    public:
    // Creating value type constructor for type: RigProperties
    constexpr RigProperties(::UnityEngine::Component* component_ = {}) noexcept : component{component_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Component*
    constexpr operator ::UnityEngine::Component*() const noexcept {
      return component;
    }
    // Get static field: static public System.String s_Weight
    static ::StringW _get_s_Weight();
    // Set static field: static public System.String s_Weight
    static void _set_s_Weight(::StringW value);
    // Get instance field reference: public UnityEngine.Component component
    [[deprecated("Use field access instead!")]] ::UnityEngine::Component*& dyn_component();
    // static private System.Void .cctor()
    // Offset: 0x11F301C
    static void _cctor();
  }; // UnityEngine.Animations.Rigging.RigProperties
  #pragma pack(pop)
  static check_size<sizeof(RigProperties), 0 + sizeof(::UnityEngine::Component*)> __UnityEngine_Animations_Rigging_RigPropertiesSizeCheck;
  static_assert(sizeof(RigProperties) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigProperties::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Animations::Rigging::RigProperties::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigProperties), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
