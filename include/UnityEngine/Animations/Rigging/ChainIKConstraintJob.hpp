// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightedAnimationJob
#include "UnityEngine/Animations/Rigging/IWeightedAnimationJob.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
#include "UnityEngine/Animations/Rigging/ReadWriteTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadOnlyTransformHandle
#include "UnityEngine/Animations/Rigging/ReadOnlyTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.AffineTransform
#include "UnityEngine/Animations/Rigging/AffineTransform.hpp"
// Including type: UnityEngine.Animations.Rigging.FloatProperty
#include "UnityEngine/Animations/Rigging/FloatProperty.hpp"
// Including type: UnityEngine.Animations.Rigging.CacheIndex
#include "UnityEngine/Animations/Rigging/CacheIndex.hpp"
// Including type: UnityEngine.Animations.Rigging.AnimationJobCache
#include "UnityEngine/Animations/Rigging/AnimationJobCache.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: ChainIKConstraintJob
  struct ChainIKConstraintJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::ChainIKConstraintJob, "UnityEngine.Animations.Rigging", "ChainIKConstraintJob");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.ChainIKConstraintJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct ChainIKConstraintJob/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IWeightedAnimationJob*/ {
    public:
    public:
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> chain
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> chain;
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle target
    // Size: 0x15
    // Offset: 0x10
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // public UnityEngine.Animations.Rigging.AffineTransform targetOffset
    // Size: 0x1C
    // Offset: 0x28
    ::UnityEngine::Animations::Rigging::AffineTransform targetOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::AffineTransform) == 0x1C);
    // public Unity.Collections.NativeArray`1<System.Single> linkLengths
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<float> linkLengths;
    // public Unity.Collections.NativeArray`1<UnityEngine.Vector3> linkPositions
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> linkPositions;
    // public UnityEngine.Animations.Rigging.FloatProperty chainRotationWeight
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Animations::Rigging::FloatProperty chainRotationWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.FloatProperty tipRotationWeight
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Animations::Rigging::FloatProperty tipRotationWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.CacheIndex toleranceIdx
    // Size: 0x4
    // Offset: 0x88
    ::UnityEngine::Animations::Rigging::CacheIndex toleranceIdx;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::CacheIndex) == 0x4);
    // public UnityEngine.Animations.Rigging.CacheIndex maxIterationsIdx
    // Size: 0x4
    // Offset: 0x8C
    ::UnityEngine::Animations::Rigging::CacheIndex maxIterationsIdx;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::CacheIndex) == 0x4);
    // public UnityEngine.Animations.Rigging.AnimationJobCache cache
    // Size: 0xFFFFFFFF
    // Offset: 0x90
    ::UnityEngine::Animations::Rigging::AnimationJobCache cache;
    // public System.Single maxReach
    // Size: 0x4
    // Offset: 0xA0
    float maxReach;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    // Size: 0x10
    // Offset: 0xA4
    ::UnityEngine::Animations::Rigging::FloatProperty jobWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    public:
    // Creating value type constructor for type: ChainIKConstraintJob
    constexpr ChainIKConstraintJob(::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> chain_ = {}, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle target_ = {}, ::UnityEngine::Animations::Rigging::AffineTransform targetOffset_ = {}, ::Unity::Collections::NativeArray_1<float> linkLengths_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> linkPositions_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty chainRotationWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty tipRotationWeight_ = {}, ::UnityEngine::Animations::Rigging::CacheIndex toleranceIdx_ = {}, ::UnityEngine::Animations::Rigging::CacheIndex maxIterationsIdx_ = {}, ::UnityEngine::Animations::Rigging::AnimationJobCache cache_ = {}, float maxReach_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty jobWeight_ = {}) noexcept : chain{chain_}, target{target_}, targetOffset{targetOffset_}, linkLengths{linkLengths_}, linkPositions{linkPositions_}, chainRotationWeight{chainRotationWeight_}, tipRotationWeight{tipRotationWeight_}, toleranceIdx{toleranceIdx_}, maxIterationsIdx{maxIterationsIdx_}, cache{cache_}, maxReach{maxReach_}, jobWeight{jobWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob
    operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightedAnimationJob*>(this);
    }
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> chain
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle>& dyn_chain();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_target();
    // Get instance field reference: public UnityEngine.Animations.Rigging.AffineTransform targetOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::AffineTransform& dyn_targetOffset();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> linkLengths
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_linkLengths();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Vector3> linkPositions
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>& dyn_linkPositions();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty chainRotationWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_chainRotationWeight();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty tipRotationWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_tipRotationWeight();
    // Get instance field reference: public UnityEngine.Animations.Rigging.CacheIndex toleranceIdx
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::CacheIndex& dyn_toleranceIdx();
    // Get instance field reference: public UnityEngine.Animations.Rigging.CacheIndex maxIterationsIdx
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::CacheIndex& dyn_maxIterationsIdx();
    // Get instance field reference: public UnityEngine.Animations.Rigging.AnimationJobCache cache
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::AnimationJobCache& dyn_cache();
    // Get instance field reference: public System.Single maxReach
    [[deprecated("Use field access instead!")]] float& dyn_maxReach();
    // Get instance field reference: private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_$jobWeight$k__BackingField();
    // public UnityEngine.Animations.Rigging.FloatProperty get_jobWeight()
    // Offset: 0xA57094
    ::UnityEngine::Animations::Rigging::FloatProperty get_jobWeight();
    // public System.Void set_jobWeight(UnityEngine.Animations.Rigging.FloatProperty value)
    // Offset: 0xA5709C
    void set_jobWeight(::UnityEngine::Animations::Rigging::FloatProperty value);
    // public System.Void ProcessRootMotion(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA570A4
    void ProcessRootMotion(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void ProcessAnimation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA570A8
    void ProcessAnimation(::UnityEngine::Animations::AnimationStream stream);
  }; // UnityEngine.Animations.Rigging.ChainIKConstraintJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintJob::get_jobWeight
// Il2CppName: get_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::FloatProperty (UnityEngine::Animations::Rigging::ChainIKConstraintJob::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintJob::get_jobWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintJob), "get_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintJob::set_jobWeight
// Il2CppName: set_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintJob::*)(::UnityEngine::Animations::Rigging::FloatProperty)>(&UnityEngine::Animations::Rigging::ChainIKConstraintJob::set_jobWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "FloatProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintJob), "set_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintJob::ProcessRootMotion
// Il2CppName: ProcessRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ChainIKConstraintJob::ProcessRootMotion)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintJob), "ProcessRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintJob::ProcessAnimation
// Il2CppName: ProcessAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ChainIKConstraintJob::ProcessAnimation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintJob), "ProcessAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
