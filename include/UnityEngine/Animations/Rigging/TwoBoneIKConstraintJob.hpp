// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightedAnimationJob
#include "UnityEngine/Animations/Rigging/IWeightedAnimationJob.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
#include "UnityEngine/Animations/Rigging/ReadWriteTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadOnlyTransformHandle
#include "UnityEngine/Animations/Rigging/ReadOnlyTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.AffineTransform
#include "UnityEngine/Animations/Rigging/AffineTransform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Animations.Rigging.FloatProperty
#include "UnityEngine/Animations/Rigging/FloatProperty.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: TwoBoneIKConstraintJob
  struct TwoBoneIKConstraintJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob, "UnityEngine.Animations.Rigging", "TwoBoneIKConstraintJob");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0xB8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.TwoBoneIKConstraintJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct TwoBoneIKConstraintJob/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IWeightedAnimationJob*/ {
    public:
    public:
    // public UnityEngine.Animations.Rigging.ReadWriteTransformHandle root
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle) == 0xC);
    // public UnityEngine.Animations.Rigging.ReadWriteTransformHandle mid
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle mid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle) == 0xC);
    // public UnityEngine.Animations.Rigging.ReadWriteTransformHandle tip
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle tip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle) == 0xC);
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle hint
    // Size: 0x15
    // Offset: 0x24
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle hint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // Padding between fields: hint and: target
    char __padding3[0x3] = {};
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle target
    // Size: 0x15
    // Offset: 0x3C
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // Padding between fields: target and: targetOffset
    char __padding4[0x3] = {};
    // public UnityEngine.Animations.Rigging.AffineTransform targetOffset
    // Size: 0x1C
    // Offset: 0x54
    ::UnityEngine::Animations::Rigging::AffineTransform targetOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::AffineTransform) == 0x1C);
    // public UnityEngine.Vector2 linkLengths
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Vector2 linkLengths;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Animations.Rigging.FloatProperty targetPositionWeight
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Animations::Rigging::FloatProperty targetPositionWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.FloatProperty targetRotationWeight
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Animations::Rigging::FloatProperty targetRotationWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.FloatProperty hintWeight
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Animations::Rigging::FloatProperty hintWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Animations::Rigging::FloatProperty jobWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    public:
    // Creating value type constructor for type: TwoBoneIKConstraintJob
    constexpr TwoBoneIKConstraintJob(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle root_ = {}, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle mid_ = {}, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle tip_ = {}, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle hint_ = {}, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle target_ = {}, ::UnityEngine::Animations::Rigging::AffineTransform targetOffset_ = {}, ::UnityEngine::Vector2 linkLengths_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty targetPositionWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty targetRotationWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty hintWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty jobWeight_ = {}) noexcept : root{root_}, mid{mid_}, tip{tip_}, hint{hint_}, target{target_}, targetOffset{targetOffset_}, linkLengths{linkLengths_}, targetPositionWeight{targetPositionWeight_}, targetRotationWeight{targetRotationWeight_}, hintWeight{hintWeight_}, jobWeight{jobWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob
    operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightedAnimationJob*>(this);
    }
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadWriteTransformHandle root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle& dyn_root();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadWriteTransformHandle mid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle& dyn_mid();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadWriteTransformHandle tip
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle& dyn_tip();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle hint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_hint();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_target();
    // Get instance field reference: public UnityEngine.Animations.Rigging.AffineTransform targetOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::AffineTransform& dyn_targetOffset();
    // Get instance field reference: public UnityEngine.Vector2 linkLengths
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_linkLengths();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty targetPositionWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_targetPositionWeight();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty targetRotationWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_targetRotationWeight();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty hintWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_hintWeight();
    // Get instance field reference: private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_$jobWeight$k__BackingField();
    // public UnityEngine.Animations.Rigging.FloatProperty get_jobWeight()
    // Offset: 0xA7C00C
    ::UnityEngine::Animations::Rigging::FloatProperty get_jobWeight();
    // public System.Void set_jobWeight(UnityEngine.Animations.Rigging.FloatProperty value)
    // Offset: 0xA7C014
    void set_jobWeight(::UnityEngine::Animations::Rigging::FloatProperty value);
    // public System.Void ProcessRootMotion(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA7C01C
    void ProcessRootMotion(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void ProcessAnimation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA7C020
    void ProcessAnimation(::UnityEngine::Animations::AnimationStream stream);
  }; // UnityEngine.Animations.Rigging.TwoBoneIKConstraintJob
  #pragma pack(pop)
  static check_size<sizeof(TwoBoneIKConstraintJob), 168 + sizeof(::UnityEngine::Animations::Rigging::FloatProperty)> __UnityEngine_Animations_Rigging_TwoBoneIKConstraintJobSizeCheck;
  static_assert(sizeof(TwoBoneIKConstraintJob) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::get_jobWeight
// Il2CppName: get_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::FloatProperty (UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::*)()>(&UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::get_jobWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob), "get_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::set_jobWeight
// Il2CppName: set_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::*)(::UnityEngine::Animations::Rigging::FloatProperty)>(&UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::set_jobWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "FloatProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob), "set_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::ProcessRootMotion
// Il2CppName: ProcessRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::ProcessRootMotion)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob), "ProcessRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::ProcessAnimation
// Il2CppName: ProcessAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob::ProcessAnimation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwoBoneIKConstraintJob), "ProcessAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
