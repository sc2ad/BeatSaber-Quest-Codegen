// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Forward declaring type: AnimationStream
  struct AnimationStream;
}
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: ReadWriteTransformHandle
  struct ReadWriteTransformHandle;
  // Forward declaring type: ReadOnlyTransformHandle
  struct ReadOnlyTransformHandle;
  // Forward declaring type: AffineTransform
  struct AffineTransform;
  // Forward declaring type: AnimationJobCache
  struct AnimationJobCache;
  // Forward declaring type: CacheIndex
  struct CacheIndex;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: AnimationRuntimeUtils
  class AnimationRuntimeUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::AnimationRuntimeUtils);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::AnimationRuntimeUtils*, "UnityEngine.Animations.Rigging", "AnimationRuntimeUtils");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.AnimationRuntimeUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class AnimationRuntimeUtils : public ::Il2CppObject {
    public:
    // static field const value: static private System.Single k_SqrEpsilon
    static constexpr const float k_SqrEpsilon = 1e-08;
    // Get static field: static private System.Single k_SqrEpsilon
    static float _get_k_SqrEpsilon();
    // Set static field: static private System.Single k_SqrEpsilon
    static void _set_k_SqrEpsilon(float value);
    // static public System.Void SolveTwoBoneIK(UnityEngine.Animations.AnimationStream stream, UnityEngine.Animations.Rigging.ReadWriteTransformHandle root, UnityEngine.Animations.Rigging.ReadWriteTransformHandle mid, UnityEngine.Animations.Rigging.ReadWriteTransformHandle tip, UnityEngine.Animations.Rigging.ReadOnlyTransformHandle target, UnityEngine.Animations.Rigging.ReadOnlyTransformHandle hint, System.Single posWeight, System.Single rotWeight, System.Single hintWeight, UnityEngine.Vector2 limbLengths, UnityEngine.Animations.Rigging.AffineTransform targetOffset)
    // Offset: 0x11E5D84
    static void SolveTwoBoneIK(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle root, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle mid, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle tip, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle target, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle hint, float posWeight, float rotWeight, float hintWeight, ::UnityEngine::Vector2 limbLengths, ::UnityEngine::Animations::Rigging::AffineTransform targetOffset);
    // static private System.Single TriangleAngle(System.Single aLen, System.Single aLen1, System.Single aLen2)
    // Offset: 0x11E6BD4
    static float TriangleAngle(float aLen, float aLen1, float aLen2);
    // static public System.Boolean SolveFABRIK(ref Unity.Collections.NativeArray`1<UnityEngine.Vector3> linkPositions, ref Unity.Collections.NativeArray`1<System.Single> linkLengths, UnityEngine.Vector3 target, System.Single tolerance, System.Single maxReach, System.Int32 maxIterations)
    // Offset: 0x11E7044
    static bool SolveFABRIK(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>> linkPositions, ByRef<::Unity::Collections::NativeArray_1<float>> linkLengths, ::UnityEngine::Vector3 target, float tolerance, float maxReach, int maxIterations);
    // static public System.Single SqrDistance(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1)
    // Offset: 0x11E74DC
    static float SqrDistance(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1);
    // static public System.Single Square(System.Single value)
    // Offset: 0x11E74D4
    static float Square(float value);
    // static public UnityEngine.Vector3 Lerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 t)
    // Offset: 0x11E75AC
    static ::UnityEngine::Vector3 Lerp(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 t);
    // static public System.Single Select(System.Single a, System.Single b, System.Single c)
    // Offset: 0x11E76CC
    static float Select(float a, float b, float c);
    // static public UnityEngine.Vector3 Select(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x11E76D8
    static ::UnityEngine::Vector3 Select(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public UnityEngine.Vector3 ProjectOnPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal)
    // Offset: 0x11E772C
    static ::UnityEngine::Vector3 ProjectOnPlane(::UnityEngine::Vector3 vector, ::UnityEngine::Vector3 planeNormal);
    // static public System.Single Sum(UnityEngine.Animations.Rigging.AnimationJobCache cache, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 count)
    // Offset: 0x11E784C
    static float Sum(::UnityEngine::Animations::Rigging::AnimationJobCache cache, ::UnityEngine::Animations::Rigging::CacheIndex index, int count);
    // static public System.Single Sum(Unity.Collections.NativeArray`1<System.Single> floatBuffer)
    // Offset: 0x11E7888
    static float Sum(::Unity::Collections::NativeArray_1<float> floatBuffer);
    // static public System.Void PassThrough(UnityEngine.Animations.AnimationStream stream, UnityEngine.Animations.Rigging.ReadWriteTransformHandle handle)
    // Offset: 0x11E78B4
    static void PassThrough(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle handle);
  }; // UnityEngine.Animations.Rigging.AnimationRuntimeUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SolveTwoBoneIK
// Il2CppName: SolveTwoBoneIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle, float, float, float, ::UnityEngine::Vector2, ::UnityEngine::Animations::Rigging::AffineTransform)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SolveTwoBoneIK)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadWriteTransformHandle")->byval_arg;
    static auto* mid = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadWriteTransformHandle")->byval_arg;
    static auto* tip = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadWriteTransformHandle")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadOnlyTransformHandle")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadOnlyTransformHandle")->byval_arg;
    static auto* posWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* hintWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* limbLengths = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* targetOffset = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "AffineTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "SolveTwoBoneIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, root, mid, tip, target, hint, posWeight, rotWeight, hintWeight, limbLengths, targetOffset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::TriangleAngle
// Il2CppName: TriangleAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::TriangleAngle)> {
  static const MethodInfo* get() {
    static auto* aLen = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aLen1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aLen2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "TriangleAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aLen, aLen1, aLen2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SolveFABRIK
// Il2CppName: SolveFABRIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::Unity::Collections::NativeArray_1<::UnityEngine::Vector3>>, ByRef<::Unity::Collections::NativeArray_1<float>>, ::UnityEngine::Vector3, float, float, int)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SolveFABRIK)> {
  static const MethodInfo* get() {
    static auto* linkPositions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    static auto* linkLengths = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->this_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tolerance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxReach = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxIterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "SolveFABRIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linkPositions, linkLengths, target, tolerance, maxReach, maxIterations});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SqrDistance
// Il2CppName: SqrDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::SqrDistance)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "SqrDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Square
// Il2CppName: Square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Square)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Lerp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Select)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Select)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::ProjectOnPlane
// Il2CppName: ProjectOnPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::ProjectOnPlane)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* planeNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "ProjectOnPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector, planeNormal});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Sum
// Il2CppName: Sum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Animations::Rigging::AnimationJobCache, ::UnityEngine::Animations::Rigging::CacheIndex, int)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Sum)> {
  static const MethodInfo* get() {
    static auto* cache = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "AnimationJobCache")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "CacheIndex")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Sum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cache, index, count});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Sum
// Il2CppName: Sum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Unity::Collections::NativeArray_1<float>)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::Sum)> {
  static const MethodInfo* get() {
    static auto* floatBuffer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Unity.Collections", "NativeArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "Sum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{floatBuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationRuntimeUtils::PassThrough
// Il2CppName: PassThrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle)>(&UnityEngine::Animations::Rigging::AnimationRuntimeUtils::PassThrough)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "ReadWriteTransformHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationRuntimeUtils*), "PassThrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, handle});
  }
};
