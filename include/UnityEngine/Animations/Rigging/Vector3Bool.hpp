// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: Vector3Bool
  struct Vector3Bool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::Vector3Bool, "UnityEngine.Animations.Rigging", "Vector3Bool");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x3
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.Vector3Bool
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector3Bool/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean x
    // Size: 0x1
    // Offset: 0x0
    bool x;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean y
    // Size: 0x1
    // Offset: 0x1
    bool y;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean z
    // Size: 0x1
    // Offset: 0x2
    bool z;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Vector3Bool
    constexpr Vector3Bool(bool x_ = {}, bool y_ = {}, bool z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean x
    [[deprecated("Use field access instead!")]] bool& dyn_x();
    // Get instance field reference: public System.Boolean y
    [[deprecated("Use field access instead!")]] bool& dyn_y();
    // Get instance field reference: public System.Boolean z
    [[deprecated("Use field access instead!")]] bool& dyn_z();
    // public System.Void .ctor(System.Boolean val)
    // Offset: 0xA7C128
    Vector3Bool(bool val);
    // public System.Void .ctor(System.Boolean x, System.Boolean y, System.Boolean z)
    // Offset: 0xA7C13C
    // ABORTED: conflicts with another method.  Vector3Bool(bool x, bool y, bool z);
  }; // UnityEngine.Animations.Rigging.Vector3Bool
  #pragma pack(pop)
  static check_size<sizeof(Vector3Bool), 2 + sizeof(bool)> __UnityEngine_Animations_Rigging_Vector3BoolSizeCheck;
  static_assert(sizeof(Vector3Bool) == 0x3);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector3Bool::Vector3Bool
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector3Bool::Vector3Bool
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
