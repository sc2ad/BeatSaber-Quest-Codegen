// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightedAnimationJob
#include "UnityEngine/Animations/Rigging/IWeightedAnimationJob.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadOnlyTransformHandle
#include "UnityEngine/Animations/Rigging/ReadOnlyTransformHandle.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
#include "UnityEngine/Animations/Rigging/ReadWriteTransformHandle.hpp"
// Including type: UnityEngine.Animations.PropertyStreamHandle
#include "UnityEngine/Animations/PropertyStreamHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.FloatProperty
#include "UnityEngine/Animations/Rigging/FloatProperty.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: TwistCorrectionJob
  struct TwistCorrectionJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::TwistCorrectionJob, "UnityEngine.Animations.Rigging", "TwistCorrectionJob");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.TwistCorrectionJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct TwistCorrectionJob/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IWeightedAnimationJob*/ {
    public:
    public:
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle source
    // Size: 0x15
    // Offset: 0x0
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle source;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // public UnityEngine.Quaternion sourceInverseBindRotation
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Quaternion sourceInverseBindRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 axisMask
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 axisMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> twistTransforms
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> twistTransforms;
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.PropertyStreamHandle> twistWeights
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::PropertyStreamHandle> twistWeights;
    // public Unity.Collections.NativeArray`1<UnityEngine.Quaternion> twistBindRotations
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion> twistBindRotations;
    // public Unity.Collections.NativeArray`1<System.Single> weightBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x68
    ::Unity::Collections::NativeArray_1<float> weightBuffer;
    // private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Animations::Rigging::FloatProperty jobWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    public:
    // Creating value type constructor for type: TwistCorrectionJob
    constexpr TwistCorrectionJob(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle source_ = {}, ::UnityEngine::Quaternion sourceInverseBindRotation_ = {}, ::UnityEngine::Vector3 axisMask_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> twistTransforms_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::PropertyStreamHandle> twistWeights_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion> twistBindRotations_ = {}, ::Unity::Collections::NativeArray_1<float> weightBuffer_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty jobWeight_ = {}) noexcept : source{source_}, sourceInverseBindRotation{sourceInverseBindRotation_}, axisMask{axisMask_}, twistTransforms{twistTransforms_}, twistWeights{twistWeights_}, twistBindRotations{twistBindRotations_}, weightBuffer{weightBuffer_}, jobWeight{jobWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob
    operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightedAnimationJob*>(this);
    }
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle source
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_source();
    // Get instance field reference: public UnityEngine.Quaternion sourceInverseBindRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_sourceInverseBindRotation();
    // Get instance field reference: public UnityEngine.Vector3 axisMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_axisMask();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> twistTransforms
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle>& dyn_twistTransforms();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.PropertyStreamHandle> twistWeights
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::PropertyStreamHandle>& dyn_twistWeights();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Quaternion> twistBindRotations
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Quaternion>& dyn_twistBindRotations();
    // Get instance field reference: public Unity.Collections.NativeArray`1<System.Single> weightBuffer
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_weightBuffer();
    // Get instance field reference: private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_$jobWeight$k__BackingField();
    // public UnityEngine.Animations.Rigging.FloatProperty get_jobWeight()
    // Offset: 0xA586A8
    ::UnityEngine::Animations::Rigging::FloatProperty get_jobWeight();
    // public System.Void set_jobWeight(UnityEngine.Animations.Rigging.FloatProperty value)
    // Offset: 0xA586B0
    void set_jobWeight(::UnityEngine::Animations::Rigging::FloatProperty value);
    // public System.Void ProcessRootMotion(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA586B8
    void ProcessRootMotion(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void ProcessAnimation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA586BC
    void ProcessAnimation(::UnityEngine::Animations::AnimationStream stream);
    // static private UnityEngine.Quaternion TwistRotation(UnityEngine.Vector3 axis, UnityEngine.Quaternion rot)
    // Offset: 0x11F5B80
    static ::UnityEngine::Quaternion TwistRotation(::UnityEngine::Vector3 axis, ::UnityEngine::Quaternion rot);
  }; // UnityEngine.Animations.Rigging.TwistCorrectionJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistCorrectionJob::get_jobWeight
// Il2CppName: get_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::FloatProperty (UnityEngine::Animations::Rigging::TwistCorrectionJob::*)()>(&UnityEngine::Animations::Rigging::TwistCorrectionJob::get_jobWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistCorrectionJob), "get_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistCorrectionJob::set_jobWeight
// Il2CppName: set_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistCorrectionJob::*)(::UnityEngine::Animations::Rigging::FloatProperty)>(&UnityEngine::Animations::Rigging::TwistCorrectionJob::set_jobWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "FloatProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistCorrectionJob), "set_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistCorrectionJob::ProcessRootMotion
// Il2CppName: ProcessRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistCorrectionJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::TwistCorrectionJob::ProcessRootMotion)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistCorrectionJob), "ProcessRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistCorrectionJob::ProcessAnimation
// Il2CppName: ProcessAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::TwistCorrectionJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::TwistCorrectionJob::ProcessAnimation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistCorrectionJob), "ProcessAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::TwistCorrectionJob::TwistRotation
// Il2CppName: TwistRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&UnityEngine::Animations::Rigging::TwistCorrectionJob::TwistRotation)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::TwistCorrectionJob), "TwistRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, rot});
  }
};
