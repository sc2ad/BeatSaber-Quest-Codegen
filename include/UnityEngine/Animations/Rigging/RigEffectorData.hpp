// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Skipping declaration: Style because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: RigEffectorData
  class RigEffectorData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::RigEffectorData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigEffectorData*, "UnityEngine.Animations.Rigging", "RigEffectorData");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.RigEffectorData
  // [TokenAttribute] Offset: FFFFFFFF
  class RigEffectorData : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Animations::Rigging::RigEffectorData::Style
    struct Style;
    // Size: 0x34
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style
    // [TokenAttribute] Offset: FFFFFFFF
    struct Style/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Mesh shape
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Mesh* shape;
      // Field size check
      static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
      // public UnityEngine.Color color
      // Size: 0x10
      // Offset: 0x8
      ::UnityEngine::Color color;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color) == 0x10);
      // public System.Single size
      // Size: 0x4
      // Offset: 0x18
      float size;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x1C
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 rotation
      // Size: 0xC
      // Offset: 0x28
      ::UnityEngine::Vector3 rotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: Style
      constexpr Style(::UnityEngine::Mesh* shape_ = {}, ::UnityEngine::Color color_ = {}, float size_ = {}, ::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Vector3 rotation_ = {}) noexcept : shape{shape_}, color{color_}, size{size_}, position{position_}, rotation{rotation_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Mesh shape
      [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_shape();
      // Get instance field reference: public UnityEngine.Color color
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
      // Get instance field reference: public System.Single size
      [[deprecated("Use field access instead!")]] float& dyn_size();
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Vector3 rotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    }; // UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style
    #pragma pack(pop)
    static check_size<sizeof(RigEffectorData::Style), 40 + sizeof(::UnityEngine::Vector3)> __UnityEngine_Animations_Rigging_RigEffectorData_StyleSizeCheck;
    static_assert(sizeof(RigEffectorData::Style) == 0x34);
    public:
    // private UnityEngine.Transform m_Transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* m_Transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style m_Style
    // Size: 0x34
    // Offset: 0x18
    ::UnityEngine::Animations::Rigging::RigEffectorData::Style m_Style;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::RigEffectorData::Style) == 0x34);
    // Padding between fields: m_Style and: m_Visible
    char __padding1[0x4] = {};
    // private System.Boolean m_Visible
    // Size: 0x1
    // Offset: 0x50
    bool m_Visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform m_Transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Transform();
    // Get instance field reference: private UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style m_Style
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::RigEffectorData::Style& dyn_m_Style();
    // Get instance field reference: private System.Boolean m_Visible
    [[deprecated("Use field access instead!")]] bool& dyn_m_Visible();
    // static public UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style get_defaultStyle()
    // Offset: 0x11F2EA8
    static ::UnityEngine::Animations::Rigging::RigEffectorData::Style get_defaultStyle();
    // public UnityEngine.Transform get_transform()
    // Offset: 0x11F2FAC
    ::UnityEngine::Transform* get_transform();
    // public UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style get_style()
    // Offset: 0x11F2FB4
    ::UnityEngine::Animations::Rigging::RigEffectorData::Style get_style();
    // public System.Boolean get_visible()
    // Offset: 0x11F2FD4
    bool get_visible();
    // public System.Void set_visible(System.Boolean value)
    // Offset: 0x11F2FDC
    void set_visible(bool value);
    // public System.Void .ctor()
    // Offset: 0x11F300C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RigEffectorData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::RigEffectorData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RigEffectorData*, creationType>()));
    }
    // public System.Void Initialize(UnityEngine.Transform transform, UnityEngine.Animations.Rigging.RigEffectorData/UnityEngine.Animations.Rigging.Style style)
    // Offset: 0x11F2FE8
    void Initialize(::UnityEngine::Transform* transform, ::UnityEngine::Animations::Rigging::RigEffectorData::Style style);
  }; // UnityEngine.Animations.Rigging.RigEffectorData
  #pragma pack(pop)
  static check_size<sizeof(RigEffectorData), 80 + sizeof(bool)> __UnityEngine_Animations_Rigging_RigEffectorDataSizeCheck;
  static_assert(sizeof(RigEffectorData) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigEffectorData::Style, "UnityEngine.Animations.Rigging", "RigEffectorData/Style");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::get_defaultStyle
// Il2CppName: get_defaultStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::RigEffectorData::Style (*)()>(&UnityEngine::Animations::Rigging::RigEffectorData::get_defaultStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "get_defaultStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::RigEffectorData::*)()>(&UnityEngine::Animations::Rigging::RigEffectorData::get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::get_style
// Il2CppName: get_style
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::RigEffectorData::Style (UnityEngine::Animations::Rigging::RigEffectorData::*)()>(&UnityEngine::Animations::Rigging::RigEffectorData::get_style)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "get_style", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::get_visible
// Il2CppName: get_visible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::RigEffectorData::*)()>(&UnityEngine::Animations::Rigging::RigEffectorData::get_visible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "get_visible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::set_visible
// Il2CppName: set_visible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigEffectorData::*)(bool)>(&UnityEngine::Animations::Rigging::RigEffectorData::set_visible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "set_visible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigEffectorData::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigEffectorData::*)(::UnityEngine::Transform*, ::UnityEngine::Animations::Rigging::RigEffectorData::Style)>(&UnityEngine::Animations::Rigging::RigEffectorData::Initialize)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "RigEffectorData/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigEffectorData*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, style});
  }
};
