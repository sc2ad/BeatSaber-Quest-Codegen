// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IAnimationJobData
#include "UnityEngine/Animations/Rigging/IAnimationJobData.hpp"
// Including type: UnityEngine.Animations.Rigging.IChainIKConstraintData
#include "UnityEngine/Animations/Rigging/IChainIKConstraintData.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: ChainIKConstraintData
  struct ChainIKConstraintData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::ChainIKConstraintData, "UnityEngine.Animations.Rigging", "ChainIKConstraintData");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x2A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.ChainIKConstraintData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ChainIKConstraintData/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IAnimationJobData, public ::UnityEngine::Animations::Rigging::IChainIKConstraintData*/ {
    public:
    public:
    // private UnityEngine.Transform m_Root
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* m_Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform m_Tip
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Transform* m_Tip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [SyncSceneToStreamAttribute] Offset: 0x97BFE8
    // private UnityEngine.Transform m_Target
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* m_Target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [SyncSceneToStreamAttribute] Offset: 0x97C020
    // [RangeAttribute] Offset: 0x97C020
    // private System.Single m_ChainRotationWeight
    // Size: 0x4
    // Offset: 0x18
    float m_ChainRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SyncSceneToStreamAttribute] Offset: 0x97C070
    // [RangeAttribute] Offset: 0x97C070
    // private System.Single m_TipRotationWeight
    // Size: 0x4
    // Offset: 0x1C
    float m_TipRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x97C0C0
    // private System.Int32 m_MaxIterations
    // Size: 0x4
    // Offset: 0x20
    int m_MaxIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0x97C114
    // private System.Single m_Tolerance
    // Size: 0x4
    // Offset: 0x24
    float m_Tolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_MaintainTargetPositionOffset
    // Size: 0x1
    // Offset: 0x28
    bool m_MaintainTargetPositionOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MaintainTargetRotationOffset
    // Size: 0x1
    // Offset: 0x29
    bool m_MaintainTargetRotationOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ChainIKConstraintData
    constexpr ChainIKConstraintData(::UnityEngine::Transform* m_Root_ = {}, ::UnityEngine::Transform* m_Tip_ = {}, ::UnityEngine::Transform* m_Target_ = {}, float m_ChainRotationWeight_ = {}, float m_TipRotationWeight_ = {}, int m_MaxIterations_ = {}, float m_Tolerance_ = {}, bool m_MaintainTargetPositionOffset_ = {}, bool m_MaintainTargetRotationOffset_ = {}) noexcept : m_Root{m_Root_}, m_Tip{m_Tip_}, m_Target{m_Target_}, m_ChainRotationWeight{m_ChainRotationWeight_}, m_TipRotationWeight{m_TipRotationWeight_}, m_MaxIterations{m_MaxIterations_}, m_Tolerance{m_Tolerance_}, m_MaintainTargetPositionOffset{m_MaintainTargetPositionOffset_}, m_MaintainTargetRotationOffset{m_MaintainTargetRotationOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IAnimationJobData
    operator ::UnityEngine::Animations::Rigging::IAnimationJobData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IAnimationJobData*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IChainIKConstraintData
    operator ::UnityEngine::Animations::Rigging::IChainIKConstraintData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IChainIKConstraintData*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform m_Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Root();
    // Get instance field reference: private UnityEngine.Transform m_Tip
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Tip();
    // Get instance field reference: private UnityEngine.Transform m_Target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_Target();
    // Get instance field reference: private System.Single m_ChainRotationWeight
    [[deprecated("Use field access instead!")]] float& dyn_m_ChainRotationWeight();
    // Get instance field reference: private System.Single m_TipRotationWeight
    [[deprecated("Use field access instead!")]] float& dyn_m_TipRotationWeight();
    // Get instance field reference: private System.Int32 m_MaxIterations
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxIterations();
    // Get instance field reference: private System.Single m_Tolerance
    [[deprecated("Use field access instead!")]] float& dyn_m_Tolerance();
    // Get instance field reference: private System.Boolean m_MaintainTargetPositionOffset
    [[deprecated("Use field access instead!")]] bool& dyn_m_MaintainTargetPositionOffset();
    // Get instance field reference: private System.Boolean m_MaintainTargetRotationOffset
    [[deprecated("Use field access instead!")]] bool& dyn_m_MaintainTargetRotationOffset();
    // public UnityEngine.Transform get_root()
    // Offset: 0xA56FC4
    ::UnityEngine::Transform* get_root();
    // public System.Void set_root(UnityEngine.Transform value)
    // Offset: 0xA56FCC
    void set_root(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_tip()
    // Offset: 0xA56FD4
    ::UnityEngine::Transform* get_tip();
    // public System.Void set_tip(UnityEngine.Transform value)
    // Offset: 0xA56FDC
    void set_tip(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_target()
    // Offset: 0xA56FE4
    ::UnityEngine::Transform* get_target();
    // public System.Void set_target(UnityEngine.Transform value)
    // Offset: 0xA56FEC
    void set_target(::UnityEngine::Transform* value);
    // public System.Single get_chainRotationWeight()
    // Offset: 0xA56FF4
    float get_chainRotationWeight();
    // public System.Void set_chainRotationWeight(System.Single value)
    // Offset: 0xA56FFC
    void set_chainRotationWeight(float value);
    // public System.Single get_tipRotationWeight()
    // Offset: 0xA57004
    float get_tipRotationWeight();
    // public System.Void set_tipRotationWeight(System.Single value)
    // Offset: 0xA5700C
    void set_tipRotationWeight(float value);
    // public System.Int32 get_maxIterations()
    // Offset: 0xA57014
    int get_maxIterations();
    // public System.Void set_maxIterations(System.Int32 value)
    // Offset: 0xA5701C
    void set_maxIterations(int value);
    // public System.Single get_tolerance()
    // Offset: 0xA57024
    float get_tolerance();
    // public System.Void set_tolerance(System.Single value)
    // Offset: 0xA5702C
    void set_tolerance(float value);
    // public System.Boolean get_maintainTargetPositionOffset()
    // Offset: 0xA57034
    bool get_maintainTargetPositionOffset();
    // public System.Void set_maintainTargetPositionOffset(System.Boolean value)
    // Offset: 0xA5703C
    void set_maintainTargetPositionOffset(bool value);
    // public System.Boolean get_maintainTargetRotationOffset()
    // Offset: 0xA57048
    bool get_maintainTargetRotationOffset();
    // public System.Void set_maintainTargetRotationOffset(System.Boolean value)
    // Offset: 0xA57050
    void set_maintainTargetRotationOffset(bool value);
    // private System.String UnityEngine.Animations.Rigging.IChainIKConstraintData.get_chainRotationWeightFloatProperty()
    // Offset: 0xA5705C
    ::StringW UnityEngine_Animations_Rigging_IChainIKConstraintData_get_chainRotationWeightFloatProperty();
    // private System.String UnityEngine.Animations.Rigging.IChainIKConstraintData.get_tipRotationWeightFloatProperty()
    // Offset: 0xA57060
    ::StringW UnityEngine_Animations_Rigging_IChainIKConstraintData_get_tipRotationWeightFloatProperty();
    // private System.Boolean UnityEngine.Animations.Rigging.IAnimationJobData.IsValid()
    // Offset: 0xA57064
    bool UnityEngine_Animations_Rigging_IAnimationJobData_IsValid();
    // private System.Void UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues()
    // Offset: 0xA5706C
    void UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues();
  }; // UnityEngine.Animations.Rigging.ChainIKConstraintData
  #pragma pack(pop)
  static check_size<sizeof(ChainIKConstraintData), 41 + sizeof(bool)> __UnityEngine_Animations_Rigging_ChainIKConstraintDataSizeCheck;
  static_assert(sizeof(ChainIKConstraintData) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_root
// Il2CppName: get_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_root
// Il2CppName: set_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_root)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tip
// Il2CppName: get_tip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_tip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tip
// Il2CppName: set_tip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_tip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_target
// Il2CppName: get_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_target
// Il2CppName: set_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_chainRotationWeight
// Il2CppName: get_chainRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_chainRotationWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_chainRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_chainRotationWeight
// Il2CppName: set_chainRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(float)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_chainRotationWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_chainRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tipRotationWeight
// Il2CppName: get_tipRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tipRotationWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_tipRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tipRotationWeight
// Il2CppName: set_tipRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(float)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tipRotationWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_tipRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maxIterations
// Il2CppName: get_maxIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maxIterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_maxIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maxIterations
// Il2CppName: set_maxIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(int)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maxIterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_maxIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tolerance
// Il2CppName: get_tolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_tolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_tolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tolerance
// Il2CppName: set_tolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(float)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_tolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_tolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maintainTargetPositionOffset
// Il2CppName: get_maintainTargetPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maintainTargetPositionOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_maintainTargetPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maintainTargetPositionOffset
// Il2CppName: set_maintainTargetPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maintainTargetPositionOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_maintainTargetPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maintainTargetRotationOffset
// Il2CppName: get_maintainTargetRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::get_maintainTargetRotationOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "get_maintainTargetRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maintainTargetRotationOffset
// Il2CppName: set_maintainTargetRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::set_maintainTargetRotationOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "set_maintainTargetRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IChainIKConstraintData_get_chainRotationWeightFloatProperty
// Il2CppName: UnityEngine.Animations.Rigging.IChainIKConstraintData.get_chainRotationWeightFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IChainIKConstraintData_get_chainRotationWeightFloatProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "UnityEngine.Animations.Rigging.IChainIKConstraintData.get_chainRotationWeightFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IChainIKConstraintData_get_tipRotationWeightFloatProperty
// Il2CppName: UnityEngine.Animations.Rigging.IChainIKConstraintData.get_tipRotationWeightFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IChainIKConstraintData_get_tipRotationWeightFloatProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "UnityEngine.Animations.Rigging.IChainIKConstraintData.get_tipRotationWeightFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ChainIKConstraintData::*)()>(&UnityEngine::Animations::Rigging::ChainIKConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ChainIKConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
