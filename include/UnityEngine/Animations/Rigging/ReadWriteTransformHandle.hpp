// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.TransformStreamHandle
#include "UnityEngine/Animations/TransformStreamHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Forward declaring type: AnimationStream
  struct AnimationStream;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: ReadWriteTransformHandle
  struct ReadWriteTransformHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle, "UnityEngine.Animations.Rigging", "ReadWriteTransformHandle");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct ReadWriteTransformHandle/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Animations.TransformStreamHandle m_Handle
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Animations::TransformStreamHandle m_Handle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::TransformStreamHandle) == 0xC);
    public:
    // Creating value type constructor for type: ReadWriteTransformHandle
    constexpr ReadWriteTransformHandle(::UnityEngine::Animations::TransformStreamHandle m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Animations::TransformStreamHandle
    constexpr operator ::UnityEngine::Animations::TransformStreamHandle() const noexcept {
      return m_Handle;
    }
    // Get instance field reference: private UnityEngine.Animations.TransformStreamHandle m_Handle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::TransformStreamHandle& dyn_m_Handle();
    // public UnityEngine.Vector3 GetLocalPosition(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA57E38
    ::UnityEngine::Vector3 GetLocalPosition(::UnityEngine::Animations::AnimationStream stream);
    // public UnityEngine.Quaternion GetLocalRotation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA57E78
    ::UnityEngine::Quaternion GetLocalRotation(::UnityEngine::Animations::AnimationStream stream);
    // public UnityEngine.Vector3 GetLocalScale(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA57EB8
    ::UnityEngine::Vector3 GetLocalScale(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void GetLocalTRS(UnityEngine.Animations.AnimationStream stream, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out UnityEngine.Vector3 scale)
    // Offset: 0xA57EF8
    void GetLocalTRS(::UnityEngine::Animations::AnimationStream stream, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<::UnityEngine::Vector3> scale);
    // public System.Void SetLocalPosition(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector3 position)
    // Offset: 0xA57F38
    void SetLocalPosition(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector3 position);
    // public System.Void SetLocalRotation(UnityEngine.Animations.AnimationStream stream, UnityEngine.Quaternion rotation)
    // Offset: 0xA57F78
    void SetLocalRotation(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Quaternion rotation);
    // public System.Void SetLocalScale(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector3 scale)
    // Offset: 0xA57FB8
    void SetLocalScale(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector3 scale);
    // public System.Void SetLocalTRS(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, System.Boolean useMask)
    // Offset: 0xA57FF8
    void SetLocalTRS(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale, bool useMask);
    // public UnityEngine.Vector3 GetPosition(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA5804C
    ::UnityEngine::Vector3 GetPosition(::UnityEngine::Animations::AnimationStream stream);
    // public UnityEngine.Quaternion GetRotation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA5808C
    ::UnityEngine::Quaternion GetRotation(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void GetGlobalTR(UnityEngine.Animations.AnimationStream stream, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)
    // Offset: 0xA580CC
    void GetGlobalTR(::UnityEngine::Animations::AnimationStream stream, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // public System.Void SetPosition(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector3 position)
    // Offset: 0xA5810C
    void SetPosition(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector3 position);
    // public System.Void SetRotation(UnityEngine.Animations.AnimationStream stream, UnityEngine.Quaternion rotation)
    // Offset: 0xA5814C
    void SetRotation(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Quaternion rotation);
    // public System.Void SetGlobalTR(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Boolean useMask)
    // Offset: 0xA5818C
    void SetGlobalTR(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, bool useMask);
    // public System.Boolean IsResolved(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA581D0
    bool IsResolved(::UnityEngine::Animations::AnimationStream stream);
    // public System.Boolean IsValid(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA58214
    bool IsValid(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void Resolve(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA58258
    void Resolve(::UnityEngine::Animations::AnimationStream stream);
    // static public UnityEngine.Animations.Rigging.ReadWriteTransformHandle Bind(UnityEngine.Animator animator, UnityEngine.Transform transform)
    // Offset: 0x11EFCAC
    static ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle Bind(::UnityEngine::Animator* animator, ::UnityEngine::Transform* transform);
  }; // UnityEngine.Animations.Rigging.ReadWriteTransformHandle
  #pragma pack(pop)
  static check_size<sizeof(ReadWriteTransformHandle), 0 + sizeof(::UnityEngine::Animations::TransformStreamHandle)> __UnityEngine_Animations_Rigging_ReadWriteTransformHandleSizeCheck;
  static_assert(sizeof(ReadWriteTransformHandle) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalPosition
// Il2CppName: GetLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalPosition)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalRotation
// Il2CppName: GetLocalRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalRotation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetLocalRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalScale
// Il2CppName: GetLocalScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalScale)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetLocalScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalTRS
// Il2CppName: GetLocalTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetLocalTRS)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetLocalTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position, rotation, scale});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalPosition
// Il2CppName: SetLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalPosition)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalRotation
// Il2CppName: SetLocalRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Quaternion)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalRotation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetLocalRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalScale
// Il2CppName: SetLocalScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalScale)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetLocalScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, scale});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalTRS
// Il2CppName: SetLocalTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, bool)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetLocalTRS)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* useMask = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetLocalTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position, rotation, scale, useMask});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetPosition)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetRotation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetGlobalTR
// Il2CppName: GetGlobalTR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::GetGlobalTR)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "GetGlobalTR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetPosition)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Quaternion)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetRotation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, rotation});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetGlobalTR
// Il2CppName: SetGlobalTR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, bool)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::SetGlobalTR)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* useMask = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "SetGlobalTR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position, rotation, useMask});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::IsResolved
// Il2CppName: IsResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::IsResolved)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "IsResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::IsValid)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::ReadWriteTransformHandle::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::Resolve)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::ReadWriteTransformHandle::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle (*)(::UnityEngine::Animator*, ::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::ReadWriteTransformHandle::Bind)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::ReadWriteTransformHandle), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, transform});
  }
};
