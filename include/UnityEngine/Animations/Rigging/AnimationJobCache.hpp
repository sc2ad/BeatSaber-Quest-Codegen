// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Animations.Rigging.CacheIndex
#include "UnityEngine/Animations/Rigging/CacheIndex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: AnimationJobCache
  struct AnimationJobCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::AnimationJobCache, "UnityEngine.Animations.Rigging", "AnimationJobCache");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.AnimationJobCache
  // [TokenAttribute] Offset: FFFFFFFF
  struct AnimationJobCache/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private Unity.Collections.NativeArray`1<System.Single> m_Data
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<float> m_Data;
    public:
    // Creating value type constructor for type: AnimationJobCache
    constexpr AnimationJobCache(::Unity::Collections::NativeArray_1<float> m_Data_ = {}) noexcept : m_Data{m_Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::Unity::Collections::NativeArray_1<float>
    constexpr operator ::Unity::Collections::NativeArray_1<float>() const noexcept {
      return m_Data;
    }
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Single> m_Data
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<float>& dyn_m_Data();
    // public System.Void .ctor(System.Single[] data)
    // Offset: 0xA56D6C
    AnimationJobCache(::ArrayW<float> data);
    // public System.Void Dispose()
    // Offset: 0xA56D74
    void Dispose();
    // public System.Single GetRaw(UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset)
    // Offset: 0xA56D7C
    float GetRaw(::UnityEngine::Animations::Rigging::CacheIndex index, int offset);
    // public System.Void SetRaw(System.Single val, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset)
    // Offset: 0xA56D8C
    void SetRaw(float val, ::UnityEngine::Animations::Rigging::CacheIndex index, int offset);
    // public T Get(UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Get(::UnityEngine::Animations::Rigging::CacheIndex index, int offset) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::AnimationJobCache::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Get", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(offset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, index, offset);
    }
    // public System.Void Set(T val, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void Set(T val, ::UnityEngine::Animations::Rigging::CacheIndex index, int offset) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::AnimationJobCache::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(offset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, val, index, offset);
    }
    // public System.Void SetArray(T[] v, UnityEngine.Animations.Rigging.CacheIndex index, System.Int32 offset)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetArray(::ArrayW<T> v, ::UnityEngine::Animations::Rigging::CacheIndex index, int offset) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::AnimationJobCache::SetArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(offset)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, v, index, offset);
    }
  }; // UnityEngine.Animations.Rigging.AnimationJobCache
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::AnimationJobCache
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::AnimationJobCache::*)()>(&UnityEngine::Animations::Rigging::AnimationJobCache::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationJobCache), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::GetRaw
// Il2CppName: GetRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::AnimationJobCache::*)(::UnityEngine::Animations::Rigging::CacheIndex, int)>(&UnityEngine::Animations::Rigging::AnimationJobCache::GetRaw)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "CacheIndex")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationJobCache), "GetRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::SetRaw
// Il2CppName: SetRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::AnimationJobCache::*)(float, ::UnityEngine::Animations::Rigging::CacheIndex, int)>(&UnityEngine::Animations::Rigging::AnimationJobCache::SetRaw)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "CacheIndex")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::AnimationJobCache), "SetRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val, index, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::Set
// Il2CppName: Set
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::AnimationJobCache::SetArray
// Il2CppName: SetArray
// Cannot write MetadataGetter for generic methods!
