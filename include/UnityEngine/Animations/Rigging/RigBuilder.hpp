// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Animations.Rigging.IRigEffectorHolder
#include "UnityEngine/Animations/Rigging/IRigEffectorHolder.hpp"
// Including type: UnityEngine.Experimental.Animations.IAnimationWindowPreview
#include "UnityEngine/Experimental/Animations/IAnimationWindowPreview.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Animations.AnimationScriptPlayable
#include "UnityEngine/Animations/AnimationScriptPlayable.hpp"
// Including type: UnityEngine.Animations.AnimationPlayableOutput
#include "UnityEngine/Animations/AnimationPlayableOutput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: Rig
  class Rig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: RigBuilder
  class RigBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Animations::Rigging::RigBuilder);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigBuilder*, "UnityEngine.Animations.Rigging", "RigBuilder");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animations.Rigging.RigBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 97BB00
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 97BB00
  // [HelpURLAttribute] Offset: 97BB00
  class RigBuilder : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::Animations::Rigging::IRigEffectorHolder, public ::UnityEngine::Experimental::Animations::IAnimationWindowPreview*/ {
    public:
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilder::RigLayer
    class RigLayer;
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilder::LayerData
    struct LayerData;
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer
    class SyncSceneToStreamLayer;
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilder::OnAddRigBuilderCallback
    class OnAddRigBuilderCallback;
    // Nested type: ::UnityEngine::Animations::Rigging::RigBuilder::OnRemoveRigBuilderCallback
    class OnRemoveRigBuilderCallback;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData
    // [TokenAttribute] Offset: FFFFFFFF
    struct LayerData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Animations.AnimationPlayableOutput output
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Animations::AnimationPlayableOutput output;
      // Field size check
      static_assert(sizeof(::UnityEngine::Animations::AnimationPlayableOutput) == 0xC);
      // Padding between fields: output and: playables
      char __padding0[0x4] = {};
      // public UnityEngine.Animations.AnimationScriptPlayable[] playables
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable> playables;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable>) == 0x8);
      public:
      // Creating value type constructor for type: LayerData
      constexpr LayerData(::UnityEngine::Animations::AnimationPlayableOutput output_ = {}, ::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable> playables_ = ::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable>(static_cast<void*>(nullptr))) noexcept : output{output_}, playables{playables_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Animations.AnimationPlayableOutput output
      [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::AnimationPlayableOutput& dyn_output();
      // Get instance field reference: public UnityEngine.Animations.AnimationScriptPlayable[] playables
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable>& dyn_playables();
    }; // UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData
    #pragma pack(pop)
    static check_size<sizeof(RigBuilder::LayerData), 16 + sizeof(::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable>)> __UnityEngine_Animations_Rigging_RigBuilder_LayerDataSizeCheck;
    static_assert(sizeof(RigBuilder::LayerData) == 0x18);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.RigLayer> m_RigLayers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>* m_RigLayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData> m_RigLayerData
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>* m_RigLayerData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData> m_PreviewRigLayerData
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>* m_PreviewRigLayerData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>*) == 0x8);
    // private UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.SyncSceneToStreamLayer m_SyncSceneToStreamLayer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer* m_SyncSceneToStreamLayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer*) == 0x8);
    // private UnityEngine.Playables.PlayableGraph <graph>k__BackingField
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Playables::PlayableGraph graph;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableGraph) == 0xC);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IRigEffectorHolder
    operator ::UnityEngine::Animations::Rigging::IRigEffectorHolder() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IRigEffectorHolder*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Experimental::Animations::IAnimationWindowPreview
    operator ::UnityEngine::Experimental::Animations::IAnimationWindowPreview() noexcept {
      return *reinterpret_cast<::UnityEngine::Experimental::Animations::IAnimationWindowPreview*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.UInt16 k_AnimationOutputPriority
    static uint16_t _get_k_AnimationOutputPriority();
    // Set static field: static private readonly System.UInt16 k_AnimationOutputPriority
    static void _set_k_AnimationOutputPriority(uint16_t value);
    // Get static field: static public UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.OnAddRigBuilderCallback onAddRigBuilder
    static ::UnityEngine::Animations::Rigging::RigBuilder::OnAddRigBuilderCallback* _get_onAddRigBuilder();
    // Set static field: static public UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.OnAddRigBuilderCallback onAddRigBuilder
    static void _set_onAddRigBuilder(::UnityEngine::Animations::Rigging::RigBuilder::OnAddRigBuilderCallback* value);
    // Get static field: static public UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.OnRemoveRigBuilderCallback onRemoveRigBuilder
    static ::UnityEngine::Animations::Rigging::RigBuilder::OnRemoveRigBuilderCallback* _get_onRemoveRigBuilder();
    // Set static field: static public UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.OnRemoveRigBuilderCallback onRemoveRigBuilder
    static void _set_onRemoveRigBuilder(::UnityEngine::Animations::Rigging::RigBuilder::OnRemoveRigBuilderCallback* value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.RigLayer> m_RigLayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>*& dyn_m_RigLayers();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData> m_RigLayerData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>*& dyn_m_RigLayerData();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.LayerData> m_PreviewRigLayerData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::LayerData>*& dyn_m_PreviewRigLayerData();
    // Get instance field reference: private UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.SyncSceneToStreamLayer m_SyncSceneToStreamLayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer*& dyn_m_SyncSceneToStreamLayer();
    // Get instance field reference: private UnityEngine.Playables.PlayableGraph <graph>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableGraph& dyn_$graph$k__BackingField();
    // public System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.RigLayer> get_layers()
    // Offset: 0x11F165C
    ::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>* get_layers();
    // public System.Void set_layers(System.Collections.Generic.List`1<UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.RigLayer> value)
    // Offset: 0x11F2C2C
    void set_layers(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>* value);
    // private UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.SyncSceneToStreamLayer get_syncSceneToStreamLayer()
    // Offset: 0x11F15F0
    ::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer* get_syncSceneToStreamLayer();
    // private System.Void set_syncSceneToStreamLayer(UnityEngine.Animations.Rigging.RigBuilder/UnityEngine.Animations.Rigging.SyncSceneToStreamLayer value)
    // Offset: 0x11F2C3C
    void set_syncSceneToStreamLayer(::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer* value);
    // public UnityEngine.Playables.PlayableGraph get_graph()
    // Offset: 0x11F2C44
    ::UnityEngine::Playables::PlayableGraph get_graph();
    // private System.Void set_graph(UnityEngine.Playables.PlayableGraph value)
    // Offset: 0x11F2C50
    void set_graph(::UnityEngine::Playables::PlayableGraph value);
    // public System.Void .ctor()
    // Offset: 0x11F2C58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RigBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Animations::Rigging::RigBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RigBuilder*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x11F2C60
    static void _cctor();
    // private System.Void OnEnable()
    // Offset: 0x11F0524
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x11F0EC8
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x11F1478
    void OnDestroy();
    // private System.Void Update()
    // Offset: 0x11F147C
    void Update();
    // public System.Boolean Build()
    // Offset: 0x11F05B8
    bool Build();
    // public System.Void Clear()
    // Offset: 0x11F0F5C
    void Clear();
    // private UnityEngine.Animations.AnimationScriptPlayable[] BuildRigPlayables(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Animations.Rigging.Rig rig)
    // Offset: 0x11F1B24
    ::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable> BuildRigPlayables(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Animations::Rigging::Rig* rig);
    // public System.Void StartPreview()
    // Offset: 0x11F237C
    void StartPreview();
    // public System.Void StopPreview()
    // Offset: 0x11F24D8
    void StopPreview();
    // public System.Void UpdatePreviewGraph(UnityEngine.Playables.PlayableGraph graph)
    // Offset: 0x11F251C
    void UpdatePreviewGraph(::UnityEngine::Playables::PlayableGraph graph);
    // public UnityEngine.Playables.Playable BuildPreviewGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable inputPlayable)
    // Offset: 0x11F2684
    ::UnityEngine::Playables::Playable BuildPreviewGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::Playables::Playable inputPlayable);
  }; // UnityEngine.Animations.Rigging.RigBuilder
  #pragma pack(pop)
  static check_size<sizeof(RigBuilder), 56 + sizeof(::UnityEngine::Playables::PlayableGraph)> __UnityEngine_Animations_Rigging_RigBuilderSizeCheck;
  static_assert(sizeof(RigBuilder) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::RigBuilder::LayerData, "UnityEngine.Animations.Rigging", "RigBuilder/LayerData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::get_layers
// Il2CppName: get_layers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>* (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::get_layers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "get_layers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::set_layers
// Il2CppName: set_layers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)(::System::Collections::Generic::List_1<::UnityEngine::Animations::Rigging::RigBuilder::RigLayer*>*)>(&UnityEngine::Animations::Rigging::RigBuilder::set_layers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "RigBuilder/RigLayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "set_layers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::get_syncSceneToStreamLayer
// Il2CppName: get_syncSceneToStreamLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer* (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::get_syncSceneToStreamLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "get_syncSceneToStreamLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::set_syncSceneToStreamLayer
// Il2CppName: set_syncSceneToStreamLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)(::UnityEngine::Animations::Rigging::RigBuilder::SyncSceneToStreamLayer*)>(&UnityEngine::Animations::Rigging::RigBuilder::set_syncSceneToStreamLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "RigBuilder/SyncSceneToStreamLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "set_syncSceneToStreamLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::get_graph
// Il2CppName: get_graph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableGraph (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::get_graph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "get_graph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::set_graph
// Il2CppName: set_graph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)(::UnityEngine::Playables::PlayableGraph)>(&UnityEngine::Animations::Rigging::RigBuilder::set_graph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "set_graph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Animations::Rigging::RigBuilder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::Build)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::BuildRigPlayables
// Il2CppName: BuildRigPlayables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Animations::AnimationScriptPlayable> (UnityEngine::Animations::Rigging::RigBuilder::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::Animations::Rigging::Rig*)>(&UnityEngine::Animations::Rigging::RigBuilder::BuildRigPlayables)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* rig = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "Rig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "BuildRigPlayables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, rig});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::StartPreview
// Il2CppName: StartPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::StartPreview)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "StartPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::StopPreview
// Il2CppName: StopPreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)()>(&UnityEngine::Animations::Rigging::RigBuilder::StopPreview)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "StopPreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::UpdatePreviewGraph
// Il2CppName: UpdatePreviewGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::RigBuilder::*)(::UnityEngine::Playables::PlayableGraph)>(&UnityEngine::Animations::Rigging::RigBuilder::UpdatePreviewGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "UpdatePreviewGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::RigBuilder::BuildPreviewGraph
// Il2CppName: BuildPreviewGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Animations::Rigging::RigBuilder::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::Playables::Playable)>(&UnityEngine::Animations::Rigging::RigBuilder::BuildPreviewGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* inputPlayable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::RigBuilder*), "BuildPreviewGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, inputPlayable});
  }
};
