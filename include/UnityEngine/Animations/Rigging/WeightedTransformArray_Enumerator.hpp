// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Animations.Rigging.WeightedTransformArray
#include "UnityEngine/Animations/Rigging/WeightedTransformArray.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.Animations.Rigging.WeightedTransform
#include "UnityEngine/Animations/Rigging/WeightedTransform.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator, "UnityEngine.Animations.Rigging", "WeightedTransformArray/Enumerator");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x8C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.WeightedTransformArray/UnityEngine.Animations.Rigging.Enumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct WeightedTransformArray::Enumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Animations::Rigging::WeightedTransform>*/ {
    public:
    public:
    // private UnityEngine.Animations.Rigging.WeightedTransformArray m_Array
    // Size: 0x84
    // Offset: 0x0
    ::UnityEngine::Animations::Rigging::WeightedTransformArray m_Array;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::WeightedTransformArray) == 0x84);
    // Padding between fields: m_Array and: m_Index
    char __padding0[0x4] = {};
    // private System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x88
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Enumerator
    constexpr Enumerator(::UnityEngine::Animations::Rigging::WeightedTransformArray m_Array_ = {}, int m_Index_ = {}) noexcept : m_Array{m_Array_}, m_Index{m_Index_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Animations::Rigging::WeightedTransform>
    operator ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Animations::Rigging::WeightedTransform>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Animations::Rigging::WeightedTransform>*>(this);
    }
    // Get instance field reference: private UnityEngine.Animations.Rigging.WeightedTransformArray m_Array
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::WeightedTransformArray& dyn_m_Array();
    // Get instance field reference: private System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // public UnityEngine.Animations.Rigging.WeightedTransform get_Current()
    // Offset: 0xA7C628
    ::UnityEngine::Animations::Rigging::WeightedTransform get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xA7C634
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(ref UnityEngine.Animations.Rigging.WeightedTransformArray array)
    // Offset: 0xA7C5C8
    Enumerator(ByRef<::UnityEngine::Animations::Rigging::WeightedTransformArray> array);
    // public System.Boolean MoveNext()
    // Offset: 0xA7C5F8
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xA7C618
    void Reset();
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xA7C624
    void System_IDisposable_Dispose();
  }; // UnityEngine.Animations.Rigging.WeightedTransformArray/UnityEngine.Animations.Rigging.Enumerator
  #pragma pack(pop)
  static check_size<sizeof(WeightedTransformArray::Enumerator), 136 + sizeof(int)> __UnityEngine_Animations_Rigging_WeightedTransformArray_EnumeratorSizeCheck;
  static_assert(sizeof(WeightedTransformArray::Enumerator) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::WeightedTransform (UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::*)()>(&UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::*)()>(&UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::Enumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::*)()>(&UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::*)()>(&UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::*)()>(&UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransformArray::Enumerator), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
