// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightedAnimationJob
#include "UnityEngine/Animations/Rigging/IWeightedAnimationJob.hpp"
// Including type: UnityEngine.Animations.Rigging.IntProperty
#include "UnityEngine/Animations/Rigging/IntProperty.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
#include "UnityEngine/Animations/Rigging/ReadWriteTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.AffineTransform
#include "UnityEngine/Animations/Rigging/AffineTransform.hpp"
// Including type: UnityEngine.Animations.Rigging.FloatProperty
#include "UnityEngine/Animations/Rigging/FloatProperty.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: MultiReferentialConstraintJob
  struct MultiReferentialConstraintJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::MultiReferentialConstraintJob, "UnityEngine.Animations.Rigging", "MultiReferentialConstraintJob");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.MultiReferentialConstraintJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct MultiReferentialConstraintJob/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IWeightedAnimationJob*/ {
    public:
    public:
    // public UnityEngine.Animations.Rigging.IntProperty driver
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Animations::Rigging::IntProperty driver;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::IntProperty) == 0x10);
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> sources
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> sources;
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.AffineTransform> sourceBindTx
    // Size: 0xFFFFFFFF
    // Offset: 0x20
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform> sourceBindTx;
    // public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.AffineTransform> offsetTx
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform> offsetTx;
    // public System.Int32 prevDriverIdx
    // Size: 0x4
    // Offset: 0x40
    int prevDriverIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Animations::Rigging::FloatProperty jobWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    public:
    // Creating value type constructor for type: MultiReferentialConstraintJob
    constexpr MultiReferentialConstraintJob(::UnityEngine::Animations::Rigging::IntProperty driver_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle> sources_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform> sourceBindTx_ = {}, ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform> offsetTx_ = {}, int prevDriverIdx_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty jobWeight_ = {}) noexcept : driver{driver_}, sources{sources_}, sourceBindTx{sourceBindTx_}, offsetTx{offsetTx_}, prevDriverIdx{prevDriverIdx_}, jobWeight{jobWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob
    operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightedAnimationJob*>(this);
    }
    // Get instance field reference: public UnityEngine.Animations.Rigging.IntProperty driver
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::IntProperty& dyn_driver();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.ReadWriteTransformHandle> sources
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::ReadWriteTransformHandle>& dyn_sources();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.AffineTransform> sourceBindTx
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform>& dyn_sourceBindTx();
    // Get instance field reference: public Unity.Collections.NativeArray`1<UnityEngine.Animations.Rigging.AffineTransform> offsetTx
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::UnityEngine::Animations::Rigging::AffineTransform>& dyn_offsetTx();
    // Get instance field reference: public System.Int32 prevDriverIdx
    [[deprecated("Use field access instead!")]] int& dyn_prevDriverIdx();
    // Get instance field reference: private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_$jobWeight$k__BackingField();
    // public UnityEngine.Animations.Rigging.FloatProperty get_jobWeight()
    // Offset: 0xA57814
    ::UnityEngine::Animations::Rigging::FloatProperty get_jobWeight();
    // public System.Void set_jobWeight(UnityEngine.Animations.Rigging.FloatProperty value)
    // Offset: 0xA5781C
    void set_jobWeight(::UnityEngine::Animations::Rigging::FloatProperty value);
    // public System.Void ProcessRootMotion(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA57824
    void ProcessRootMotion(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void ProcessAnimation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA57828
    void ProcessAnimation(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void UpdateOffsets(System.Int32 driver)
    // Offset: 0xA57864
    void UpdateOffsets(int driver);
  }; // UnityEngine.Animations.Rigging.MultiReferentialConstraintJob
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::get_jobWeight
// Il2CppName: get_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::FloatProperty (UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::*)()>(&UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::get_jobWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiReferentialConstraintJob), "get_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::set_jobWeight
// Il2CppName: set_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::*)(::UnityEngine::Animations::Rigging::FloatProperty)>(&UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::set_jobWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "FloatProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiReferentialConstraintJob), "set_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::ProcessRootMotion
// Il2CppName: ProcessRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::ProcessRootMotion)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiReferentialConstraintJob), "ProcessRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::ProcessAnimation
// Il2CppName: ProcessAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::ProcessAnimation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiReferentialConstraintJob), "ProcessAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::UpdateOffsets
// Il2CppName: UpdateOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::*)(int)>(&UnityEngine::Animations::Rigging::MultiReferentialConstraintJob::UpdateOffsets)> {
  static const MethodInfo* get() {
    static auto* driver = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiReferentialConstraintJob), "UpdateOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{driver});
  }
};
