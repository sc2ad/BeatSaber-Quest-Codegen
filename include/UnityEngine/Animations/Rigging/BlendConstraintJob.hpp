// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightedAnimationJob
#include "UnityEngine/Animations/Rigging/IWeightedAnimationJob.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadWriteTransformHandle
#include "UnityEngine/Animations/Rigging/ReadWriteTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.ReadOnlyTransformHandle
#include "UnityEngine/Animations/Rigging/ReadOnlyTransformHandle.hpp"
// Including type: UnityEngine.Animations.Rigging.AffineTransform
#include "UnityEngine/Animations/Rigging/AffineTransform.hpp"
// Including type: UnityEngine.Animations.Rigging.BoolProperty
#include "UnityEngine/Animations/Rigging/BoolProperty.hpp"
// Including type: UnityEngine.Animations.Rigging.FloatProperty
#include "UnityEngine/Animations/Rigging/FloatProperty.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: BlendConstraintJob
  struct BlendConstraintJob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::BlendConstraintJob, "UnityEngine.Animations.Rigging", "BlendConstraintJob");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0xC4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.BlendConstraintJob
  // [TokenAttribute] Offset: FFFFFFFF
  // [BurstCompileAttribute] Offset: FFFFFFFF
  struct BlendConstraintJob/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IWeightedAnimationJob*/ {
    public:
    public:
    // public UnityEngine.Animations.Rigging.ReadWriteTransformHandle driven
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle driven;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle) == 0xC);
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle sourceA
    // Size: 0x15
    // Offset: 0xC
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle sourceA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // Padding between fields: sourceA and: sourceB
    char __padding1[0x3] = {};
    // public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle sourceB
    // Size: 0x15
    // Offset: 0x24
    ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle sourceB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle) == 0x15);
    // Padding between fields: sourceB and: sourceAOffset
    char __padding2[0x3] = {};
    // public UnityEngine.Animations.Rigging.AffineTransform sourceAOffset
    // Size: 0x1C
    // Offset: 0x3C
    ::UnityEngine::Animations::Rigging::AffineTransform sourceAOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::AffineTransform) == 0x1C);
    // public UnityEngine.Animations.Rigging.AffineTransform sourceBOffset
    // Size: 0x1C
    // Offset: 0x58
    ::UnityEngine::Animations::Rigging::AffineTransform sourceBOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::AffineTransform) == 0x1C);
    // public UnityEngine.Animations.Rigging.BoolProperty blendPosition
    // Size: 0x10
    // Offset: 0x74
    ::UnityEngine::Animations::Rigging::BoolProperty blendPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::BoolProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.BoolProperty blendRotation
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Animations::Rigging::BoolProperty blendRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::BoolProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.FloatProperty positionWeight
    // Size: 0x10
    // Offset: 0x94
    ::UnityEngine::Animations::Rigging::FloatProperty positionWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // public UnityEngine.Animations.Rigging.FloatProperty rotationWeight
    // Size: 0x10
    // Offset: 0xA4
    ::UnityEngine::Animations::Rigging::FloatProperty rotationWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    // private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    // Size: 0x10
    // Offset: 0xB4
    ::UnityEngine::Animations::Rigging::FloatProperty jobWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::FloatProperty) == 0x10);
    public:
    // Creating value type constructor for type: BlendConstraintJob
    constexpr BlendConstraintJob(::UnityEngine::Animations::Rigging::ReadWriteTransformHandle driven_ = {}, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle sourceA_ = {}, ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle sourceB_ = {}, ::UnityEngine::Animations::Rigging::AffineTransform sourceAOffset_ = {}, ::UnityEngine::Animations::Rigging::AffineTransform sourceBOffset_ = {}, ::UnityEngine::Animations::Rigging::BoolProperty blendPosition_ = {}, ::UnityEngine::Animations::Rigging::BoolProperty blendRotation_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty positionWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty rotationWeight_ = {}, ::UnityEngine::Animations::Rigging::FloatProperty jobWeight_ = {}) noexcept : driven{driven_}, sourceA{sourceA_}, sourceB{sourceB_}, sourceAOffset{sourceAOffset_}, sourceBOffset{sourceBOffset_}, blendPosition{blendPosition_}, blendRotation{blendRotation_}, positionWeight{positionWeight_}, rotationWeight{rotationWeight_}, jobWeight{jobWeight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob
    operator ::UnityEngine::Animations::Rigging::IWeightedAnimationJob() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightedAnimationJob*>(this);
    }
    // static field const value: static public System.Int32 k_BlendTranslationMask
    static constexpr const int k_BlendTranslationMask = 1;
    // Get static field: static public System.Int32 k_BlendTranslationMask
    static int _get_k_BlendTranslationMask();
    // Set static field: static public System.Int32 k_BlendTranslationMask
    static void _set_k_BlendTranslationMask(int value);
    // static field const value: static public System.Int32 k_BlendRotationMask
    static constexpr const int k_BlendRotationMask = 2;
    // Get static field: static public System.Int32 k_BlendRotationMask
    static int _get_k_BlendRotationMask();
    // Set static field: static public System.Int32 k_BlendRotationMask
    static void _set_k_BlendRotationMask(int value);
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadWriteTransformHandle driven
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadWriteTransformHandle& dyn_driven();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle sourceA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_sourceA();
    // Get instance field reference: public UnityEngine.Animations.Rigging.ReadOnlyTransformHandle sourceB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::ReadOnlyTransformHandle& dyn_sourceB();
    // Get instance field reference: public UnityEngine.Animations.Rigging.AffineTransform sourceAOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::AffineTransform& dyn_sourceAOffset();
    // Get instance field reference: public UnityEngine.Animations.Rigging.AffineTransform sourceBOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::AffineTransform& dyn_sourceBOffset();
    // Get instance field reference: public UnityEngine.Animations.Rigging.BoolProperty blendPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::BoolProperty& dyn_blendPosition();
    // Get instance field reference: public UnityEngine.Animations.Rigging.BoolProperty blendRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::BoolProperty& dyn_blendRotation();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty positionWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_positionWeight();
    // Get instance field reference: public UnityEngine.Animations.Rigging.FloatProperty rotationWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_rotationWeight();
    // Get instance field reference: private UnityEngine.Animations.Rigging.FloatProperty <jobWeight>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::FloatProperty& dyn_$jobWeight$k__BackingField();
    // public UnityEngine.Animations.Rigging.FloatProperty get_jobWeight()
    // Offset: 0xA56EB0
    ::UnityEngine::Animations::Rigging::FloatProperty get_jobWeight();
    // public System.Void set_jobWeight(UnityEngine.Animations.Rigging.FloatProperty value)
    // Offset: 0xA56EB8
    void set_jobWeight(::UnityEngine::Animations::Rigging::FloatProperty value);
    // public System.Void ProcessRootMotion(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA56EC0
    void ProcessRootMotion(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void ProcessAnimation(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA56EC4
    void ProcessAnimation(::UnityEngine::Animations::AnimationStream stream);
  }; // UnityEngine.Animations.Rigging.BlendConstraintJob
  #pragma pack(pop)
  static check_size<sizeof(BlendConstraintJob), 180 + sizeof(::UnityEngine::Animations::Rigging::FloatProperty)> __UnityEngine_Animations_Rigging_BlendConstraintJobSizeCheck;
  static_assert(sizeof(BlendConstraintJob) == 0xC4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BlendConstraintJob::get_jobWeight
// Il2CppName: get_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::FloatProperty (UnityEngine::Animations::Rigging::BlendConstraintJob::*)()>(&UnityEngine::Animations::Rigging::BlendConstraintJob::get_jobWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::BlendConstraintJob), "get_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BlendConstraintJob::set_jobWeight
// Il2CppName: set_jobWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::BlendConstraintJob::*)(::UnityEngine::Animations::Rigging::FloatProperty)>(&UnityEngine::Animations::Rigging::BlendConstraintJob::set_jobWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "FloatProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::BlendConstraintJob), "set_jobWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BlendConstraintJob::ProcessRootMotion
// Il2CppName: ProcessRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::BlendConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::BlendConstraintJob::ProcessRootMotion)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::BlendConstraintJob), "ProcessRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::BlendConstraintJob::ProcessAnimation
// Il2CppName: ProcessAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::BlendConstraintJob::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::BlendConstraintJob::ProcessAnimation)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::BlendConstraintJob), "ProcessAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
