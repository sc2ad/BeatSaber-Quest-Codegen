// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IAnimatableProperty`1
#include "UnityEngine/Animations/Rigging/IAnimatableProperty_1.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Animations.PropertyStreamHandle
#include "UnityEngine/Animations/PropertyStreamHandle.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Component
  class Component;
}
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Skipping declaration: AnimationStream because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: Vector4Property
  struct Vector4Property;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::Vector4Property, "UnityEngine.Animations.Rigging", "Vector4Property");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0x40
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.Vector4Property
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector4Property/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IAnimatableProperty_1<::UnityEngine::Vector4>*/ {
    public:
    public:
    // public UnityEngine.Animations.PropertyStreamHandle x
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Animations::PropertyStreamHandle x;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::PropertyStreamHandle) == 0x10);
    // public UnityEngine.Animations.PropertyStreamHandle y
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Animations::PropertyStreamHandle y;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::PropertyStreamHandle) == 0x10);
    // public UnityEngine.Animations.PropertyStreamHandle z
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Animations::PropertyStreamHandle z;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::PropertyStreamHandle) == 0x10);
    // public UnityEngine.Animations.PropertyStreamHandle w
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Animations::PropertyStreamHandle w;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::PropertyStreamHandle) == 0x10);
    public:
    // Creating value type constructor for type: Vector4Property
    constexpr Vector4Property(::UnityEngine::Animations::PropertyStreamHandle x_ = {}, ::UnityEngine::Animations::PropertyStreamHandle y_ = {}, ::UnityEngine::Animations::PropertyStreamHandle z_ = {}, ::UnityEngine::Animations::PropertyStreamHandle w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IAnimatableProperty_1<::UnityEngine::Vector4>
    operator ::UnityEngine::Animations::Rigging::IAnimatableProperty_1<::UnityEngine::Vector4>() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IAnimatableProperty_1<::UnityEngine::Vector4>*>(this);
    }
    // Get instance field reference: public UnityEngine.Animations.PropertyStreamHandle x
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::PropertyStreamHandle& dyn_x();
    // Get instance field reference: public UnityEngine.Animations.PropertyStreamHandle y
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::PropertyStreamHandle& dyn_y();
    // Get instance field reference: public UnityEngine.Animations.PropertyStreamHandle z
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::PropertyStreamHandle& dyn_z();
    // Get instance field reference: public UnityEngine.Animations.PropertyStreamHandle w
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::PropertyStreamHandle& dyn_w();
    // static public UnityEngine.Animations.Rigging.Vector4Property Bind(UnityEngine.Animator animator, UnityEngine.Component component, System.String name)
    // Offset: 0x1C074A4
    static ::UnityEngine::Animations::Rigging::Vector4Property Bind(::UnityEngine::Animator* animator, ::UnityEngine::Component* component, ::StringW name);
    // static public UnityEngine.Animations.Rigging.Vector4Property BindCustom(UnityEngine.Animator animator, System.String name)
    // Offset: 0x1C0765C
    static ::UnityEngine::Animations::Rigging::Vector4Property BindCustom(::UnityEngine::Animator* animator, ::StringW name);
    // public UnityEngine.Vector4 Get(UnityEngine.Animations.AnimationStream stream)
    // Offset: 0xA7C2D0
    ::UnityEngine::Vector4 Get(::UnityEngine::Animations::AnimationStream stream);
    // public System.Void Set(UnityEngine.Animations.AnimationStream stream, UnityEngine.Vector4 value)
    // Offset: 0xA7C30C
    void Set(::UnityEngine::Animations::AnimationStream stream, ::UnityEngine::Vector4 value);
  }; // UnityEngine.Animations.Rigging.Vector4Property
  #pragma pack(pop)
  static check_size<sizeof(Vector4Property), 48 + sizeof(::UnityEngine::Animations::PropertyStreamHandle)> __UnityEngine_Animations_Rigging_Vector4PropertySizeCheck;
  static_assert(sizeof(Vector4Property) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector4Property::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::Vector4Property (*)(::UnityEngine::Animator*, ::UnityEngine::Component*, ::StringW)>(&UnityEngine::Animations::Rigging::Vector4Property::Bind)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Vector4Property), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, component, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector4Property::BindCustom
// Il2CppName: BindCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::Vector4Property (*)(::UnityEngine::Animator*, ::StringW)>(&UnityEngine::Animations::Rigging::Vector4Property::BindCustom)> {
  static const MethodInfo* get() {
    static auto* animator = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Vector4Property), "BindCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animator, name});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector4Property::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::Animations::Rigging::Vector4Property::*)(::UnityEngine::Animations::AnimationStream)>(&UnityEngine::Animations::Rigging::Vector4Property::Get)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Vector4Property), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::Vector4Property::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::Vector4Property::*)(::UnityEngine::Animations::AnimationStream, ::UnityEngine::Vector4)>(&UnityEngine::Animations::Rigging::Vector4Property::Set)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations", "AnimationStream")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::Vector4Property), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
