// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Animations.Rigging.IAnimationJobData
#include "UnityEngine/Animations/Rigging/IAnimationJobData.hpp"
// Including type: UnityEngine.Animations.Rigging.IMultiAimConstraintData
#include "UnityEngine/Animations/Rigging/IMultiAimConstraintData.hpp"
// Including type: UnityEngine.Animations.Rigging.WeightedTransformArray
#include "UnityEngine/Animations/Rigging/WeightedTransformArray.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Animations.Rigging.Vector3Bool
#include "UnityEngine/Animations/Rigging/Vector3Bool.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Animations::Rigging
namespace UnityEngine::Animations::Rigging {
  // Skipping declaration: Axis because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: MultiAimConstraintData
  struct MultiAimConstraintData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::MultiAimConstraintData, "UnityEngine.Animations.Rigging", "MultiAimConstraintData");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0xAC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.MultiAimConstraintData
  // [TokenAttribute] Offset: FFFFFFFF
  struct MultiAimConstraintData/*, public ::System::ValueType, public ::UnityEngine::Animations::Rigging::IAnimationJobData, public ::UnityEngine::Animations::Rigging::IMultiAimConstraintData*/ {
    public:
    // Nested type: ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis
    struct Axis;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis
    // [TokenAttribute] Offset: FFFFFFFF
    struct Axis/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Axis
      constexpr Axis(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X
      static constexpr const int X = 0;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_X();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X
      static void _set_X(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X_NEG
      static constexpr const int X_NEG = 1;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X_NEG
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_X_NEG();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis X_NEG
      static void _set_X_NEG(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y
      static constexpr const int Y = 2;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_Y();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y
      static void _set_Y(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y_NEG
      static constexpr const int Y_NEG = 3;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y_NEG
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_Y_NEG();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Y_NEG
      static void _set_Y_NEG(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z
      static constexpr const int Z = 4;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_Z();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z
      static void _set_Z(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // static field const value: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z_NEG
      static constexpr const int Z_NEG = 5;
      // Get static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z_NEG
      static ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis _get_Z_NEG();
      // Set static field: static public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis Z_NEG
      static void _set_Z_NEG(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis
    #pragma pack(pop)
    static check_size<sizeof(MultiAimConstraintData::Axis), 0 + sizeof(int)> __UnityEngine_Animations_Rigging_MultiAimConstraintData_AxisSizeCheck;
    static_assert(sizeof(MultiAimConstraintData::Axis) == 0x4);
    public:
    // private UnityEngine.Transform m_ConstrainedObject
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* m_ConstrainedObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [SyncSceneToStreamAttribute] Offset: 0x97C308
    // [RangeAttribute] Offset: 0x97C308
    // private UnityEngine.Animations.Rigging.WeightedTransformArray m_SourceObjects
    // Size: 0x84
    // Offset: 0x8
    ::UnityEngine::Animations::Rigging::WeightedTransformArray m_SourceObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::WeightedTransformArray) == 0x84);
    // Padding between fields: m_SourceObjects and: m_Offset
    char __padding1[0x4] = {};
    // [SyncSceneToStreamAttribute] Offset: 0x97C358
    // private UnityEngine.Vector3 m_Offset
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 m_Offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [SyncSceneToStreamAttribute] Offset: 0x97C390
    // [RangeAttribute] Offset: 0x97C390
    // private System.Single m_MinLimit
    // Size: 0x4
    // Offset: 0x9C
    float m_MinLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SyncSceneToStreamAttribute] Offset: 0x97C3E8
    // [RangeAttribute] Offset: 0x97C3E8
    // private System.Single m_MaxLimit
    // Size: 0x4
    // Offset: 0xA0
    float m_MaxLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis m_AimAxis
    // Size: 0x4
    // Offset: 0xA4
    ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis m_AimAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis) == 0x4);
    // private System.Boolean m_MaintainOffset
    // Size: 0x1
    // Offset: 0xA8
    bool m_MaintainOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Animations.Rigging.Vector3Bool m_ConstrainedAxes
    // Size: 0x3
    // Offset: 0xA9
    ::UnityEngine::Animations::Rigging::Vector3Bool m_ConstrainedAxes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animations::Rigging::Vector3Bool) == 0x3);
    public:
    // Creating value type constructor for type: MultiAimConstraintData
    constexpr MultiAimConstraintData(::UnityEngine::Transform* m_ConstrainedObject_ = {}, ::UnityEngine::Animations::Rigging::WeightedTransformArray m_SourceObjects_ = {}, ::UnityEngine::Vector3 m_Offset_ = {}, float m_MinLimit_ = {}, float m_MaxLimit_ = {}, ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis m_AimAxis_ = {}, bool m_MaintainOffset_ = {}, ::UnityEngine::Animations::Rigging::Vector3Bool m_ConstrainedAxes_ = {}) noexcept : m_ConstrainedObject{m_ConstrainedObject_}, m_SourceObjects{m_SourceObjects_}, m_Offset{m_Offset_}, m_MinLimit{m_MinLimit_}, m_MaxLimit{m_MaxLimit_}, m_AimAxis{m_AimAxis_}, m_MaintainOffset{m_MaintainOffset_}, m_ConstrainedAxes{m_ConstrainedAxes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IAnimationJobData
    operator ::UnityEngine::Animations::Rigging::IAnimationJobData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IAnimationJobData*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IMultiAimConstraintData
    operator ::UnityEngine::Animations::Rigging::IMultiAimConstraintData() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IMultiAimConstraintData*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform m_ConstrainedObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_ConstrainedObject();
    // Get instance field reference: private UnityEngine.Animations.Rigging.WeightedTransformArray m_SourceObjects
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::WeightedTransformArray& dyn_m_SourceObjects();
    // Get instance field reference: private UnityEngine.Vector3 m_Offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Offset();
    // Get instance field reference: private System.Single m_MinLimit
    [[deprecated("Use field access instead!")]] float& dyn_m_MinLimit();
    // Get instance field reference: private System.Single m_MaxLimit
    [[deprecated("Use field access instead!")]] float& dyn_m_MaxLimit();
    // Get instance field reference: private UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis m_AimAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis& dyn_m_AimAxis();
    // Get instance field reference: private System.Boolean m_MaintainOffset
    [[deprecated("Use field access instead!")]] bool& dyn_m_MaintainOffset();
    // Get instance field reference: private UnityEngine.Animations.Rigging.Vector3Bool m_ConstrainedAxes
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animations::Rigging::Vector3Bool& dyn_m_ConstrainedAxes();
    // public UnityEngine.Transform get_constrainedObject()
    // Offset: 0xA57364
    ::UnityEngine::Transform* get_constrainedObject();
    // public System.Void set_constrainedObject(UnityEngine.Transform value)
    // Offset: 0xA5736C
    void set_constrainedObject(::UnityEngine::Transform* value);
    // public UnityEngine.Animations.Rigging.WeightedTransformArray get_sourceObjects()
    // Offset: 0xA57374
    ::UnityEngine::Animations::Rigging::WeightedTransformArray get_sourceObjects();
    // public System.Void set_sourceObjects(UnityEngine.Animations.Rigging.WeightedTransformArray value)
    // Offset: 0xA57384
    void set_sourceObjects(::UnityEngine::Animations::Rigging::WeightedTransformArray value);
    // public System.Boolean get_maintainOffset()
    // Offset: 0xA573A0
    bool get_maintainOffset();
    // public System.Void set_maintainOffset(System.Boolean value)
    // Offset: 0xA573A8
    void set_maintainOffset(bool value);
    // public UnityEngine.Vector3 get_offset()
    // Offset: 0xA573B4
    ::UnityEngine::Vector3 get_offset();
    // public System.Void set_offset(UnityEngine.Vector3 value)
    // Offset: 0xA573C0
    void set_offset(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector2 get_limits()
    // Offset: 0xA573CC
    ::UnityEngine::Vector2 get_limits();
    // public System.Void set_limits(UnityEngine.Vector2 value)
    // Offset: 0xA573FC
    void set_limits(::UnityEngine::Vector2 value);
    // public UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis get_aimAxis()
    // Offset: 0xA57404
    ::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis get_aimAxis();
    // public System.Void set_aimAxis(UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis value)
    // Offset: 0xA5740C
    void set_aimAxis(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis value);
    // public System.Boolean get_constrainedXAxis()
    // Offset: 0xA57414
    bool get_constrainedXAxis();
    // public System.Void set_constrainedXAxis(System.Boolean value)
    // Offset: 0xA5741C
    void set_constrainedXAxis(bool value);
    // public System.Boolean get_constrainedYAxis()
    // Offset: 0xA57428
    bool get_constrainedYAxis();
    // public System.Void set_constrainedYAxis(System.Boolean value)
    // Offset: 0xA57430
    void set_constrainedYAxis(bool value);
    // public System.Boolean get_constrainedZAxis()
    // Offset: 0xA5743C
    bool get_constrainedZAxis();
    // public System.Void set_constrainedZAxis(System.Boolean value)
    // Offset: 0xA57444
    void set_constrainedZAxis(bool value);
    // private UnityEngine.Vector3 UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_aimAxis()
    // Offset: 0xA57450
    ::UnityEngine::Vector3 UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_aimAxis();
    // private System.String UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_offsetVector3Property()
    // Offset: 0xA57458
    ::StringW UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_offsetVector3Property();
    // private System.String UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_minLimitFloatProperty()
    // Offset: 0xA5745C
    ::StringW UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_minLimitFloatProperty();
    // private System.String UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_maxLimitFloatProperty()
    // Offset: 0xA57460
    ::StringW UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_maxLimitFloatProperty();
    // private System.String UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_sourceObjectsProperty()
    // Offset: 0xA57464
    ::StringW UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_sourceObjectsProperty();
    // private System.Boolean UnityEngine.Animations.Rigging.IAnimationJobData.IsValid()
    // Offset: 0xA57468
    bool UnityEngine_Animations_Rigging_IAnimationJobData_IsValid();
    // private System.Void UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues()
    // Offset: 0xA57470
    void UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues();
    // static private UnityEngine.Vector3 Convert(UnityEngine.Animations.Rigging.MultiAimConstraintData/UnityEngine.Animations.Rigging.Axis axis)
    // Offset: 0x11EA208
    static ::UnityEngine::Vector3 Convert(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis axis);
  }; // UnityEngine.Animations.Rigging.MultiAimConstraintData
  #pragma pack(pop)
  static check_size<sizeof(MultiAimConstraintData), 169 + sizeof(::UnityEngine::Animations::Rigging::Vector3Bool)> __UnityEngine_Animations_Rigging_MultiAimConstraintDataSizeCheck;
  static_assert(sizeof(MultiAimConstraintData) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis, "UnityEngine.Animations.Rigging", "MultiAimConstraintData/Axis");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedObject
// Il2CppName: get_constrainedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_constrainedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedObject
// Il2CppName: set_constrainedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_constrainedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_sourceObjects
// Il2CppName: get_sourceObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::WeightedTransformArray (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_sourceObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_sourceObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_sourceObjects
// Il2CppName: set_sourceObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(::UnityEngine::Animations::Rigging::WeightedTransformArray)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_sourceObjects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "WeightedTransformArray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_sourceObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_maintainOffset
// Il2CppName: get_maintainOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_maintainOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_maintainOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_maintainOffset
// Il2CppName: set_maintainOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_maintainOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_maintainOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_offset
// Il2CppName: get_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_offset
// Il2CppName: set_offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(::UnityEngine::Vector3)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_offset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_limits
// Il2CppName: get_limits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_limits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_limits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_limits
// Il2CppName: set_limits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(::UnityEngine::Vector2)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_limits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_limits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_aimAxis
// Il2CppName: get_aimAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_aimAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_aimAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_aimAxis
// Il2CppName: set_aimAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_aimAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "MultiAimConstraintData/Axis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_aimAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedXAxis
// Il2CppName: get_constrainedXAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedXAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_constrainedXAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedXAxis
// Il2CppName: set_constrainedXAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedXAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_constrainedXAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedYAxis
// Il2CppName: get_constrainedYAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedYAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_constrainedYAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedYAxis
// Il2CppName: set_constrainedYAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedYAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_constrainedYAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedZAxis
// Il2CppName: get_constrainedZAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::get_constrainedZAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "get_constrainedZAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedZAxis
// Il2CppName: set_constrainedZAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)(bool)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::set_constrainedZAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "set_constrainedZAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_aimAxis
// Il2CppName: UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_aimAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_aimAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_aimAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_offsetVector3Property
// Il2CppName: UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_offsetVector3Property
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_offsetVector3Property)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_offsetVector3Property", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_minLimitFloatProperty
// Il2CppName: UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_minLimitFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_minLimitFloatProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_minLimitFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_maxLimitFloatProperty
// Il2CppName: UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_maxLimitFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_maxLimitFloatProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_maxLimitFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_sourceObjectsProperty
// Il2CppName: UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_sourceObjectsProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IMultiAimConstraintData_get_sourceObjectsProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IMultiAimConstraintData.get_sourceObjectsProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues
// Il2CppName: UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::MultiAimConstraintData::*)()>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::UnityEngine_Animations_Rigging_IAnimationJobData_SetDefaultValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "UnityEngine.Animations.Rigging.IAnimationJobData.SetDefaultValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::MultiAimConstraintData::Convert
// Il2CppName: Convert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Animations::Rigging::MultiAimConstraintData::Axis)>(&UnityEngine::Animations::Rigging::MultiAimConstraintData::Convert)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "MultiAimConstraintData/Axis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::MultiAimConstraintData), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
