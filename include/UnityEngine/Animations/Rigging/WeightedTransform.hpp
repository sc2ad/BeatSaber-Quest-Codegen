// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Animations.Rigging.ITransformProvider
#include "UnityEngine/Animations/Rigging/ITransformProvider.hpp"
// Including type: UnityEngine.Animations.Rigging.IWeightProvider
#include "UnityEngine/Animations/Rigging/IWeightProvider.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Forward declaring type: WeightedTransform
  struct WeightedTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Animations::Rigging::WeightedTransform, "UnityEngine.Animations.Rigging", "WeightedTransform");
// Type namespace: UnityEngine.Animations.Rigging
namespace UnityEngine::Animations::Rigging {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.Rigging.WeightedTransform
  // [TokenAttribute] Offset: FFFFFFFF
  struct WeightedTransform/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Animations::Rigging::WeightedTransform>, public ::UnityEngine::Animations::Rigging::ITransformProvider, public ::UnityEngine::Animations::Rigging::IWeightProvider*/ {
    public:
    public:
    // public UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single weight
    // Size: 0x4
    // Offset: 0x8
    float weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: WeightedTransform
    constexpr WeightedTransform(::UnityEngine::Transform* transform_ = {}, float weight_ = {}) noexcept : transform{transform_}, weight{weight_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Animations::Rigging::WeightedTransform>
    operator ::System::IEquatable_1<::UnityEngine::Animations::Rigging::WeightedTransform>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Animations::Rigging::WeightedTransform>*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::ITransformProvider
    operator ::UnityEngine::Animations::Rigging::ITransformProvider() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::ITransformProvider*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Animations::Rigging::IWeightProvider
    operator ::UnityEngine::Animations::Rigging::IWeightProvider() noexcept {
      return *reinterpret_cast<::UnityEngine::Animations::Rigging::IWeightProvider*>(this);
    }
    // Get instance field reference: public UnityEngine.Transform transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transform();
    // Get instance field reference: public System.Single weight
    [[deprecated("Use field access instead!")]] float& dyn_weight();
    // private UnityEngine.Transform UnityEngine.Animations.Rigging.ITransformProvider.get_transform()
    // Offset: 0xA7C394
    ::UnityEngine::Transform* UnityEngine_Animations_Rigging_ITransformProvider_get_transform();
    // private System.Void UnityEngine.Animations.Rigging.ITransformProvider.set_transform(UnityEngine.Transform value)
    // Offset: 0xA7C39C
    void UnityEngine_Animations_Rigging_ITransformProvider_set_transform(::UnityEngine::Transform* value);
    // private System.Single UnityEngine.Animations.Rigging.IWeightProvider.get_weight()
    // Offset: 0xA7C3A4
    float UnityEngine_Animations_Rigging_IWeightProvider_get_weight();
    // private System.Void UnityEngine.Animations.Rigging.IWeightProvider.set_weight(System.Single value)
    // Offset: 0xA7C3AC
    void UnityEngine_Animations_Rigging_IWeightProvider_set_weight(float value);
    // public System.Void .ctor(UnityEngine.Transform transform, System.Single weight)
    // Offset: 0xA7C384
    // ABORTED: conflicts with another method.  WeightedTransform(::UnityEngine::Transform* transform, float weight);
    // static public UnityEngine.Animations.Rigging.WeightedTransform Default(System.Single weight)
    // Offset: 0x1C07A38
    static ::UnityEngine::Animations::Rigging::WeightedTransform Default(float weight);
    // public System.Boolean Equals(UnityEngine.Animations.Rigging.WeightedTransform other)
    // Offset: 0xA7C38C
    bool Equals(::UnityEngine::Animations::Rigging::WeightedTransform other);
  }; // UnityEngine.Animations.Rigging.WeightedTransform
  #pragma pack(pop)
  static check_size<sizeof(WeightedTransform), 8 + sizeof(float)> __UnityEngine_Animations_Rigging_WeightedTransformSizeCheck;
  static_assert(sizeof(WeightedTransform) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_ITransformProvider_get_transform
// Il2CppName: UnityEngine.Animations.Rigging.ITransformProvider.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (UnityEngine::Animations::Rigging::WeightedTransform::*)()>(&UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_ITransformProvider_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "UnityEngine.Animations.Rigging.ITransformProvider.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_ITransformProvider_set_transform
// Il2CppName: UnityEngine.Animations.Rigging.ITransformProvider.set_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::WeightedTransform::*)(::UnityEngine::Transform*)>(&UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_ITransformProvider_set_transform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "UnityEngine.Animations.Rigging.ITransformProvider.set_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_IWeightProvider_get_weight
// Il2CppName: UnityEngine.Animations.Rigging.IWeightProvider.get_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Animations::Rigging::WeightedTransform::*)()>(&UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_IWeightProvider_get_weight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "UnityEngine.Animations.Rigging.IWeightProvider.get_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_IWeightProvider_set_weight
// Il2CppName: UnityEngine.Animations.Rigging.IWeightProvider.set_weight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Animations::Rigging::WeightedTransform::*)(float)>(&UnityEngine::Animations::Rigging::WeightedTransform::UnityEngine_Animations_Rigging_IWeightProvider_set_weight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "UnityEngine.Animations.Rigging.IWeightProvider.set_weight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::WeightedTransform
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::Default
// Il2CppName: Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animations::Rigging::WeightedTransform (*)(float)>(&UnityEngine::Animations::Rigging::WeightedTransform::Default)> {
  static const MethodInfo* get() {
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{weight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Animations::Rigging::WeightedTransform::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Animations::Rigging::WeightedTransform::*)(::UnityEngine::Animations::Rigging::WeightedTransform)>(&UnityEngine::Animations::Rigging::WeightedTransform::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Animations.Rigging", "WeightedTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Animations::Rigging::WeightedTransform), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
