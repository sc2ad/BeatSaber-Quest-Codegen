// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AssetReferenceUIRestriction
#include "UnityEngine/AssetReferenceUIRestriction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AssetReferenceUILabelRestriction
  class AssetReferenceUILabelRestriction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AssetReferenceUILabelRestriction);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AssetReferenceUILabelRestriction*, "UnityEngine", "AssetReferenceUILabelRestriction");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AssetReferenceUILabelRestriction
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 1112860
  class AssetReferenceUILabelRestriction : public ::UnityEngine::AssetReferenceUIRestriction {
    public:
    public:
    // public System.String[] m_AllowedLabels
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> m_AllowedLabels;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String m_CachedToString
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_CachedToString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String[] m_AllowedLabels
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_AllowedLabels();
    // Get instance field reference: public System.String m_CachedToString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CachedToString();
    // public System.Void .ctor(params System.String[] allowedLabels)
    // Offset: 0x2B82FF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssetReferenceUILabelRestriction* New_ctor(::ArrayW<::StringW> allowedLabels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AssetReferenceUILabelRestriction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssetReferenceUILabelRestriction*, creationType>(allowedLabels)));
    }
    // public override System.Boolean ValidateAsset(UnityEngine.Object obj)
    // Offset: 0x2B8302C
    // Implemented from: UnityEngine.AssetReferenceUIRestriction
    // Base method: System.Boolean AssetReferenceUIRestriction::ValidateAsset(UnityEngine.Object obj)
    bool ValidateAsset(::UnityEngine::Object* obj);
    // public override System.Boolean ValidateAsset(System.String path)
    // Offset: 0x2B83034
    // Implemented from: UnityEngine.AssetReferenceUIRestriction
    // Base method: System.Boolean AssetReferenceUIRestriction::ValidateAsset(System.String path)
    bool ValidateAsset(::StringW path);
    // public override System.String ToString()
    // Offset: 0x2B8303C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.AssetReferenceUILabelRestriction
  #pragma pack(pop)
  static check_size<sizeof(AssetReferenceUILabelRestriction), 24 + sizeof(::StringW)> __UnityEngine_AssetReferenceUILabelRestrictionSizeCheck;
  static_assert(sizeof(AssetReferenceUILabelRestriction) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AssetReferenceUILabelRestriction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AssetReferenceUILabelRestriction::ValidateAsset
// Il2CppName: ValidateAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AssetReferenceUILabelRestriction::*)(::UnityEngine::Object*)>(&UnityEngine::AssetReferenceUILabelRestriction::ValidateAsset)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssetReferenceUILabelRestriction*), "ValidateAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssetReferenceUILabelRestriction::ValidateAsset
// Il2CppName: ValidateAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AssetReferenceUILabelRestriction::*)(::StringW)>(&UnityEngine::AssetReferenceUILabelRestriction::ValidateAsset)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssetReferenceUILabelRestriction*), "ValidateAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: UnityEngine::AssetReferenceUILabelRestriction::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::AssetReferenceUILabelRestriction::*)()>(&UnityEngine::AssetReferenceUILabelRestriction::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AssetReferenceUILabelRestriction*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
