// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.GUILayout
#include "UnityEngine/GUILayout.hpp"
// Including type: UnityEngine.GUI
#include "UnityEngine/GUI.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUILayoutOption
  class GUILayoutOption;
  // Forward declaring type: GUIStyle
  class GUIStyle;
  // Forward declaring type: GUIContent
  class GUIContent;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::GUILayout::LayoutedWindow);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GUILayout::LayoutedWindow*, "UnityEngine", "GUILayout/LayoutedWindow");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.GUILayout/UnityEngine.LayoutedWindow
  // [TokenAttribute] Offset: FFFFFFFF
  class GUILayout::LayoutedWindow : public ::Il2CppObject {
    public:
    public:
    // private readonly UnityEngine.GUI/UnityEngine.WindowFunction m_Func
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GUI::WindowFunction* m_Func;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUI::WindowFunction*) == 0x8);
    // private readonly UnityEngine.Rect m_ScreenRect
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Rect m_ScreenRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private readonly UnityEngine.GUILayoutOption[] m_Options
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GUILayoutOption*> m_Options;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GUILayoutOption*>) == 0x8);
    // private readonly UnityEngine.GUIStyle m_Style
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GUIStyle* m_Style;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyle*) == 0x8);
    public:
    // Get instance field reference: private readonly UnityEngine.GUI/UnityEngine.WindowFunction m_Func
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUI::WindowFunction*& dyn_m_Func();
    // Get instance field reference: private readonly UnityEngine.Rect m_ScreenRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_ScreenRect();
    // Get instance field reference: private readonly UnityEngine.GUILayoutOption[] m_Options
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GUILayoutOption*>& dyn_m_Options();
    // Get instance field reference: private readonly UnityEngine.GUIStyle m_Style
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyle*& dyn_m_Style();
    // System.Void .ctor(UnityEngine.GUI/UnityEngine.WindowFunction f, UnityEngine.Rect screenRect, UnityEngine.GUIContent content, UnityEngine.GUILayoutOption[] options, UnityEngine.GUIStyle style)
    // Offset: 0x1B48EF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GUILayout::LayoutedWindow* New_ctor(::UnityEngine::GUI::WindowFunction* f, ::UnityEngine::Rect screenRect, ::UnityEngine::GUIContent* content, ::ArrayW<::UnityEngine::GUILayoutOption*> options, ::UnityEngine::GUIStyle* style) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::GUILayout::LayoutedWindow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GUILayout::LayoutedWindow*, creationType>(f, screenRect, content, options, style)));
    }
    // public System.Void DoWindow(System.Int32 windowID)
    // Offset: 0x1B48F94
    void DoWindow(int windowID);
  }; // UnityEngine.GUILayout/UnityEngine.LayoutedWindow
  #pragma pack(pop)
  static check_size<sizeof(GUILayout::LayoutedWindow), 48 + sizeof(::UnityEngine::GUIStyle*)> __UnityEngine_GUILayout_LayoutedWindowSizeCheck;
  static_assert(sizeof(GUILayout::LayoutedWindow) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GUILayout::LayoutedWindow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::GUILayout::LayoutedWindow::DoWindow
// Il2CppName: DoWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUILayout::LayoutedWindow::*)(int)>(&UnityEngine::GUILayout::LayoutedWindow::DoWindow)> {
  static const MethodInfo* get() {
    static auto* windowID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUILayout::LayoutedWindow*), "DoWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowID});
  }
};
