// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.Experimental.Rendering.TextureCreationFlags
#include "UnityEngine/Experimental/Rendering/TextureCreationFlags.hpp"
// Including type: UnityEngine.Experimental.Rendering.DefaultFormat
#include "UnityEngine/Experimental/Rendering/DefaultFormat.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Texture2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Texture2D*, "UnityEngine", "Texture2D");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Texture2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: 108D32C
  // [NativeHeaderAttribute] Offset: 108D32C
  // [NativeHeaderAttribute] Offset: 108D32C
  class Texture2D : public ::UnityEngine::Texture {
    public:
    // Nested type: ::UnityEngine::Texture2D::EXRFlags
    struct EXRFlags;
    // public UnityEngine.TextureFormat get_format()
    // Offset: 0x28A5C68
    ::UnityEngine::TextureFormat get_format();
    // static public UnityEngine.Texture2D get_whiteTexture()
    // Offset: 0x28A5CA8
    static ::UnityEngine::Texture2D* get_whiteTexture();
    // static public UnityEngine.Texture2D get_blackTexture()
    // Offset: 0x28A5CDC
    static ::UnityEngine::Texture2D* get_blackTexture();
    // static public UnityEngine.Texture2D get_redTexture()
    // Offset: 0x28A5D10
    static ::UnityEngine::Texture2D* get_redTexture();
    // static public UnityEngine.Texture2D get_grayTexture()
    // Offset: 0x28A5D44
    static ::UnityEngine::Texture2D* get_grayTexture();
    // static public UnityEngine.Texture2D get_linearGrayTexture()
    // Offset: 0x28A5D78
    static ::UnityEngine::Texture2D* get_linearGrayTexture();
    // static public UnityEngine.Texture2D get_normalTexture()
    // Offset: 0x28A5DAC
    static ::UnityEngine::Texture2D* get_normalTexture();
    // System.Boolean get_isPreProcessed()
    // Offset: 0x28A6804
    bool get_isPreProcessed();
    // public System.Boolean get_streamingMipmaps()
    // Offset: 0x28A6844
    bool get_streamingMipmaps();
    // public System.Int32 get_streamingMipmapsPriority()
    // Offset: 0x28A6884
    int get_streamingMipmapsPriority();
    // public System.Int32 get_requestedMipmapLevel()
    // Offset: 0x28A68C4
    int get_requestedMipmapLevel();
    // public System.Void set_requestedMipmapLevel(System.Int32 value)
    // Offset: 0x28A6904
    void set_requestedMipmapLevel(int value);
    // public System.Int32 get_minimumMipmapLevel()
    // Offset: 0x28A6954
    int get_minimumMipmapLevel();
    // public System.Void set_minimumMipmapLevel(System.Int32 value)
    // Offset: 0x28A6994
    void set_minimumMipmapLevel(int value);
    // System.Boolean get_loadAllMips()
    // Offset: 0x28A69E4
    bool get_loadAllMips();
    // System.Void set_loadAllMips(System.Boolean value)
    // Offset: 0x28A6A24
    void set_loadAllMips(bool value);
    // public System.Int32 get_calculatedMipmapLevel()
    // Offset: 0x28A6A74
    int get_calculatedMipmapLevel();
    // public System.Int32 get_desiredMipmapLevel()
    // Offset: 0x28A6AB4
    int get_desiredMipmapLevel();
    // public System.Int32 get_loadingMipmapLevel()
    // Offset: 0x28A6AF4
    int get_loadingMipmapLevel();
    // public System.Int32 get_loadedMipmapLevel()
    // Offset: 0x28A6B34
    int get_loadedMipmapLevel();
    // System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.Int32 mipCount, System.IntPtr nativeTex)
    // Offset: 0x28A7068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags, int mipCount, ::System::IntPtr nativeTex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags, mipCount, nativeTex)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x28A7148
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::Experimental::Rendering::DefaultFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x28A71C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, System.Int32 mipCount, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x28A7264
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, int mipCount, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, mipCount, flags)));
    }
    // System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Int32 mipCount, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x28A72EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, int mipCount, bool linear, ::System::IntPtr nativeTex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipCount, linear, nativeTex)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Int32 mipCount, System.Boolean linear)
    // Offset: 0x28A73FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, int mipCount, bool linear) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipCount, linear)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain, System.Boolean linear)
    // Offset: 0x28A7484
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, bool mipChain, bool linear) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain, linear)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain)
    // Offset: 0x28A751C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, bool mipChain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height)
    // Offset: 0x28A75A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height)));
    }
    // public System.Void Compress(System.Boolean highQuality)
    // Offset: 0x28A5DE0
    void Compress(bool highQuality);
    // static private System.Boolean Internal_CreateImpl(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, System.Int32 mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x28A5E30
    static bool Internal_CreateImpl(::UnityEngine::Texture2D* mono, int w, int h, int mipCount, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags, ::System::IntPtr nativeTex);
    // static private System.Void Internal_Create(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, System.Int32 mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x28A5EB8
    static void Internal_Create(::UnityEngine::Texture2D* mono, int w, int h, int mipCount, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags, ::System::IntPtr nativeTex);
    // private System.Void ApplyImpl(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x28A5FE4
    void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
    // private System.Boolean ResizeImpl(System.Int32 width, System.Int32 height)
    // Offset: 0x28A603C
    bool ResizeImpl(int width, int height);
    // private System.Void SetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x28A6094
    void SetPixelImpl(int image, int x, int y, ::UnityEngine::Color color);
    // private UnityEngine.Color GetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y)
    // Offset: 0x28A6184
    ::UnityEngine::Color GetPixelImpl(int image, int x, int y);
    // private UnityEngine.Color GetPixelBilinearImpl(System.Int32 image, System.Single u, System.Single v)
    // Offset: 0x28A6278
    ::UnityEngine::Color GetPixelBilinearImpl(int image, float u, float v);
    // private System.Boolean ResizeWithFormatImpl(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x28A636C
    bool ResizeWithFormatImpl(int width, int height, ::UnityEngine::TextureFormat format, bool hasMipMap);
    // private System.Void ReadPixelsImpl(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x28A63DC
    void ReadPixelsImpl(::UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // private System.Void SetPixelsImpl(System.Int32 x, System.Int32 y, System.Int32 w, System.Int32 h, UnityEngine.Color[] pixel, System.Int32 miplevel, System.Int32 frame)
    // Offset: 0x28A64CC
    void SetPixelsImpl(int x, int y, int w, int h, ::ArrayW<::UnityEngine::Color> pixel, int miplevel, int frame);
    // private System.Boolean LoadRawTextureDataImpl(System.IntPtr data, System.Int32 size)
    // Offset: 0x28A6564
    bool LoadRawTextureDataImpl(::System::IntPtr data, int size);
    // private System.Boolean LoadRawTextureDataImplArray(System.Byte[] data)
    // Offset: 0x28A65BC
    bool LoadRawTextureDataImplArray(::ArrayW<uint8_t> data);
    // private System.Boolean SetPixelDataImplArray(System.Array data, System.Int32 mipLevel, System.Int32 elementSize, System.Int32 dataArraySize, System.Int32 sourceDataStartIndex)
    // Offset: 0x28A660C
    bool SetPixelDataImplArray(::System::Array* data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
    // private System.Boolean SetPixelDataImpl(System.IntPtr data, System.Int32 mipLevel, System.Int32 elementSize, System.Int32 dataArraySize, System.Int32 sourceDataStartIndex)
    // Offset: 0x28A668C
    bool SetPixelDataImpl(::System::IntPtr data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
    // private System.IntPtr GetWritableImageData(System.Int32 frame)
    // Offset: 0x28A670C
    ::System::IntPtr GetWritableImageData(int frame);
    // private System.Int64 GetRawImageDataSize()
    // Offset: 0x28A675C
    int64_t GetRawImageDataSize();
    // static private System.Void GenerateAtlasImpl(UnityEngine.Vector2[] sizes, System.Int32 padding, System.Int32 atlasSize, out UnityEngine.Rect[] rect)
    // Offset: 0x28A679C
    static void GenerateAtlasImpl(::ArrayW<::UnityEngine::Vector2> sizes, int padding, int atlasSize, ByRef<::ArrayW<::UnityEngine::Rect>> rect);
    // public System.Void ClearRequestedMipmapLevel()
    // Offset: 0x28A6B74
    void ClearRequestedMipmapLevel();
    // public System.Boolean IsRequestedMipmapLevelLoaded()
    // Offset: 0x28A6BB4
    bool IsRequestedMipmapLevelLoaded();
    // public System.Void ClearMinimumMipmapLevel()
    // Offset: 0x28A6BF4
    void ClearMinimumMipmapLevel();
    // public System.Void UpdateExternalTexture(System.IntPtr nativeTex)
    // Offset: 0x28A6C34
    void UpdateExternalTexture(::System::IntPtr nativeTex);
    // private System.Void SetAllPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x28A6C84
    void SetAllPixels32(::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // private System.Void SetBlockOfPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x28A6CDC
    void SetBlockOfPixels32(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // public System.Byte[] GetRawTextureData()
    // Offset: 0x28A6D64
    ::ArrayW<uint8_t> GetRawTextureData();
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, System.Int32 miplevel)
    // Offset: 0x28A6DA4
    ::ArrayW<::UnityEngine::Color> GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel);
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight)
    // Offset: 0x28A6E24
    ::ArrayW<::UnityEngine::Color> GetPixels(int x, int y, int blockWidth, int blockHeight);
    // public UnityEngine.Color32[] GetPixels32(System.Int32 miplevel)
    // Offset: 0x28A6E98
    ::ArrayW<::UnityEngine::Color32> GetPixels32(int miplevel);
    // public UnityEngine.Color32[] GetPixels32()
    // Offset: 0x28A6EE8
    ::ArrayW<::UnityEngine::Color32> GetPixels32();
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding, System.Int32 maximumAtlasSize, System.Boolean makeNoLongerReadable)
    // Offset: 0x28A6F2C
    ::ArrayW<::UnityEngine::Rect> PackTextures(::ArrayW<::UnityEngine::Texture2D*> textures, int padding, int maximumAtlasSize, bool makeNoLongerReadable);
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding, System.Int32 maximumAtlasSize)
    // Offset: 0x28A6F9C
    ::ArrayW<::UnityEngine::Rect> PackTextures(::ArrayW<::UnityEngine::Texture2D*> textures, int padding, int maximumAtlasSize);
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding)
    // Offset: 0x28A7008
    ::ArrayW<::UnityEngine::Rect> PackTextures(::ArrayW<::UnityEngine::Texture2D*> textures, int padding);
    // static public UnityEngine.Texture2D CreateExternalTexture(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean mipChain, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x28A763C
    static ::UnityEngine::Texture2D* CreateExternalTexture(int width, int height, ::UnityEngine::TextureFormat format, bool mipChain, bool linear, ::System::IntPtr nativeTex);
    // public System.Void SetPixel(System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x28A7738
    void SetPixel(int x, int y, ::UnityEngine::Color color);
    // public System.Void SetPixel(System.Int32 x, System.Int32 y, UnityEngine.Color color, System.Int32 mipLevel)
    // Offset: 0x28A77F4
    void SetPixel(int x, int y, ::UnityEngine::Color color, int mipLevel);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x28A78BC
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color> colors, int miplevel);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors)
    // Offset: 0x28A7998
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color> colors);
    // public System.Void SetPixels(UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x28A79A0
    void SetPixels(::ArrayW<::UnityEngine::Color> colors, int miplevel);
    // public System.Void SetPixels(UnityEngine.Color[] colors)
    // Offset: 0x28A7A1C
    void SetPixels(::ArrayW<::UnityEngine::Color> colors);
    // public UnityEngine.Color GetPixel(System.Int32 x, System.Int32 y)
    // Offset: 0x28A7A84
    ::UnityEngine::Color GetPixel(int x, int y);
    // public UnityEngine.Color GetPixel(System.Int32 x, System.Int32 y, System.Int32 mipLevel)
    // Offset: 0x28A7B10
    ::UnityEngine::Color GetPixel(int x, int y, int mipLevel);
    // public UnityEngine.Color GetPixelBilinear(System.Single u, System.Single v)
    // Offset: 0x28A7BA8
    ::UnityEngine::Color GetPixelBilinear(float u, float v);
    // public UnityEngine.Color GetPixelBilinear(System.Single u, System.Single v, System.Int32 mipLevel)
    // Offset: 0x28A7C34
    ::UnityEngine::Color GetPixelBilinear(float u, float v, int mipLevel);
    // public System.Void LoadRawTextureData(System.IntPtr data, System.Int32 size)
    // Offset: 0x28A7CCC
    void LoadRawTextureData(::System::IntPtr data, int size);
    // public System.Void LoadRawTextureData(System.Byte[] data)
    // Offset: 0x28A7E10
    void LoadRawTextureData(::ArrayW<uint8_t> data);
    // public System.Void LoadRawTextureData(Unity.Collections.NativeArray`1<T> data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void LoadRawTextureData(::Unity::Collections::NativeArray_1<T> data) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::LoadRawTextureData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRawTextureData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data);
    }
    // public System.Void SetPixelData(T[] data, System.Int32 mipLevel, System.Int32 sourceDataStartIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetPixelData(::ArrayW<T> data, int mipLevel, int sourceDataStartIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::SetPixelData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPixelData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mipLevel), ::il2cpp_utils::ExtractType(sourceDataStartIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, mipLevel, sourceDataStartIndex);
    }
    // public System.Void SetPixelData(Unity.Collections.NativeArray`1<T> data, System.Int32 mipLevel, System.Int32 sourceDataStartIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetPixelData(::Unity::Collections::NativeArray_1<T> data, int mipLevel, int sourceDataStartIndex) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::SetPixelData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPixelData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mipLevel), ::il2cpp_utils::ExtractType(sourceDataStartIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, data, mipLevel, sourceDataStartIndex);
    }
    // public Unity.Collections.NativeArray`1<T> GetRawTextureData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Unity::Collections::NativeArray_1<T> GetRawTextureData() {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::GetRawTextureData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawTextureData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Unity::Collections::NativeArray_1<T>, false>(this, ___generic__method);
    }
    // public System.Void Apply(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x28A7F40
    void Apply(bool updateMipmaps, bool makeNoLongerReadable);
    // public System.Void Apply(System.Boolean updateMipmaps)
    // Offset: 0x28A7FE8
    void Apply(bool updateMipmaps);
    // public System.Void Apply()
    // Offset: 0x28A7FF4
    void Apply();
    // public System.Boolean Resize(System.Int32 width, System.Int32 height)
    // Offset: 0x28A8000
    bool Resize(int width, int height);
    // public System.Boolean Resize(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x28A80A8
    bool Resize(int width, int height, ::UnityEngine::TextureFormat format, bool hasMipMap);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x28A8168
    void ReadPixels(::UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY)
    // Offset: 0x28A8230
    void ReadPixels(::UnityEngine::Rect source, int destX, int destY);
    // static public System.Boolean GenerateAtlas(UnityEngine.Vector2[] sizes, System.Int32 padding, System.Int32 atlasSize, System.Collections.Generic.List`1<UnityEngine.Rect> results)
    // Offset: 0x28A8238
    static bool GenerateAtlas(::ArrayW<::UnityEngine::Vector2> sizes, int padding, int atlasSize, ::System::Collections::Generic::List_1<::UnityEngine::Rect>* results);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x28A83C8
    void SetPixels32(::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors)
    // Offset: 0x28A8420
    void SetPixels32(::ArrayW<::UnityEngine::Color32> colors);
    // public System.Void SetPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x28A8474
    void SetPixels32(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // public System.Void SetPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors)
    // Offset: 0x28A84FC
    void SetPixels32(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color32> colors);
    // public UnityEngine.Color[] GetPixels(System.Int32 miplevel)
    // Offset: 0x28A8580
    ::ArrayW<::UnityEngine::Color> GetPixels(int miplevel);
    // public UnityEngine.Color[] GetPixels()
    // Offset: 0x28A8620
    ::ArrayW<::UnityEngine::Color> GetPixels();
    // private System.Void SetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, ref UnityEngine.Color color)
    // Offset: 0x28A6114
    void SetPixelImpl_Injected(int image, int x, int y, ByRef<::UnityEngine::Color> color);
    // private System.Void GetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, out UnityEngine.Color ret)
    // Offset: 0x28A6208
    void GetPixelImpl_Injected(int image, int x, int y, ByRef<::UnityEngine::Color> ret);
    // private System.Void GetPixelBilinearImpl_Injected(System.Int32 image, System.Single u, System.Single v, out UnityEngine.Color ret)
    // Offset: 0x28A62FC
    void GetPixelBilinearImpl_Injected(int image, float u, float v, ByRef<::UnityEngine::Color> ret);
    // private System.Void ReadPixelsImpl_Injected(ref UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x28A645C
    void ReadPixelsImpl_Injected(ByRef<::UnityEngine::Rect> source, int destX, int destY, bool recalculateMipMaps);
    // public override System.Boolean get_isReadable()
    // Offset: 0x28A5FA4
    // Implemented from: UnityEngine.Texture
    // Base method: System.Boolean Texture::get_isReadable()
    bool get_isReadable();
  }; // UnityEngine.Texture2D
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextureFormat (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_whiteTexture
// Il2CppName: get_whiteTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_whiteTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_whiteTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_blackTexture
// Il2CppName: get_blackTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_blackTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_blackTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_redTexture
// Il2CppName: get_redTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_redTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_redTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_grayTexture
// Il2CppName: get_grayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_grayTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_grayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_linearGrayTexture
// Il2CppName: get_linearGrayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_linearGrayTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_linearGrayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_normalTexture
// Il2CppName: get_normalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_normalTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_normalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_isPreProcessed
// Il2CppName: get_isPreProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_isPreProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_isPreProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_streamingMipmaps
// Il2CppName: get_streamingMipmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_streamingMipmaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_streamingMipmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_streamingMipmapsPriority
// Il2CppName: get_streamingMipmapsPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_streamingMipmapsPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_streamingMipmapsPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_requestedMipmapLevel
// Il2CppName: get_requestedMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_requestedMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_requestedMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::set_requestedMipmapLevel
// Il2CppName: set_requestedMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::set_requestedMipmapLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "set_requestedMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_minimumMipmapLevel
// Il2CppName: get_minimumMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_minimumMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_minimumMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::set_minimumMipmapLevel
// Il2CppName: set_minimumMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::set_minimumMipmapLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "set_minimumMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_loadAllMips
// Il2CppName: get_loadAllMips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_loadAllMips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_loadAllMips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::set_loadAllMips
// Il2CppName: set_loadAllMips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool)>(&UnityEngine::Texture2D::set_loadAllMips)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "set_loadAllMips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_calculatedMipmapLevel
// Il2CppName: get_calculatedMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_calculatedMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_calculatedMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_desiredMipmapLevel
// Il2CppName: get_desiredMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_desiredMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_desiredMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_loadingMipmapLevel
// Il2CppName: get_loadingMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_loadingMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_loadingMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_loadedMipmapLevel
// Il2CppName: get_loadedMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_loadedMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_loadedMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::Compress
// Il2CppName: Compress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool)>(&UnityEngine::Texture2D::Compress)> {
  static const MethodInfo* get() {
    static auto* highQuality = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Compress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{highQuality});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Internal_CreateImpl
// Il2CppName: Internal_CreateImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Texture2D*, int, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::TextureCreationFlags, ::System::IntPtr)>(&UnityEngine::Texture2D::Internal_CreateImpl)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "TextureCreationFlags")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Internal_CreateImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono, w, h, mipCount, format, flags, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture2D*, int, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::TextureCreationFlags, ::System::IntPtr)>(&UnityEngine::Texture2D::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "TextureCreationFlags")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono, w, h, mipCount, format, flags, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ApplyImpl
// Il2CppName: ApplyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool, bool)>(&UnityEngine::Texture2D::ApplyImpl)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ApplyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ResizeImpl
// Il2CppName: ResizeImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int)>(&UnityEngine::Texture2D::ResizeImpl)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ResizeImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelImpl
// Il2CppName: SetPixelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ::UnityEngine::Color)>(&UnityEngine::Texture2D::SetPixelImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelImpl
// Il2CppName: GetPixelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, int, int)>(&UnityEngine::Texture2D::GetPixelImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinearImpl
// Il2CppName: GetPixelBilinearImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, float, float)>(&UnityEngine::Texture2D::GetPixelBilinearImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinearImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, u, v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ResizeWithFormatImpl
// Il2CppName: ResizeWithFormatImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::TextureFormat, bool)>(&UnityEngine::Texture2D::ResizeWithFormatImpl)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* hasMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ResizeWithFormatImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, hasMipMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixelsImpl
// Il2CppName: ReadPixelsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int, bool)>(&UnityEngine::Texture2D::ReadPixelsImpl)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixelsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelsImpl
// Il2CppName: SetPixelsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>, int, int)>(&UnityEngine::Texture2D::SetPixelsImpl)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pixel = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, w, h, pixel, miplevel, frame});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureDataImpl
// Il2CppName: LoadRawTextureDataImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(::System::IntPtr, int)>(&UnityEngine::Texture2D::LoadRawTextureDataImpl)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureDataImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureDataImplArray
// Il2CppName: LoadRawTextureDataImplArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(::ArrayW<uint8_t>)>(&UnityEngine::Texture2D::LoadRawTextureDataImplArray)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureDataImplArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelDataImplArray
// Il2CppName: SetPixelDataImplArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(::System::Array*, int, int, int, int)>(&UnityEngine::Texture2D::SetPixelDataImplArray)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataArraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceDataStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelDataImplArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, mipLevel, elementSize, dataArraySize, sourceDataStartIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelDataImpl
// Il2CppName: SetPixelDataImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(::System::IntPtr, int, int, int, int)>(&UnityEngine::Texture2D::SetPixelDataImpl)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataArraySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceDataStartIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelDataImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, mipLevel, elementSize, dataArraySize, sourceDataStartIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetWritableImageData
// Il2CppName: GetWritableImageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::GetWritableImageData)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetWritableImageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetRawImageDataSize
// Il2CppName: GetRawImageDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetRawImageDataSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetRawImageDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GenerateAtlasImpl
// Il2CppName: GenerateAtlasImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector2>, int, int, ByRef<::ArrayW<::UnityEngine::Rect>>)>(&UnityEngine::Texture2D::GenerateAtlasImpl)> {
  static const MethodInfo* get() {
    static auto* sizes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rect = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Rect"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GenerateAtlasImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizes, padding, atlasSize, rect});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ClearRequestedMipmapLevel
// Il2CppName: ClearRequestedMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::ClearRequestedMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ClearRequestedMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::IsRequestedMipmapLevelLoaded
// Il2CppName: IsRequestedMipmapLevelLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::IsRequestedMipmapLevelLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "IsRequestedMipmapLevelLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ClearMinimumMipmapLevel
// Il2CppName: ClearMinimumMipmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::ClearMinimumMipmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ClearMinimumMipmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::UpdateExternalTexture
// Il2CppName: UpdateExternalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::System::IntPtr)>(&UnityEngine::Texture2D::UpdateExternalTexture)> {
  static const MethodInfo* get() {
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "UpdateExternalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetAllPixels32
// Il2CppName: SetAllPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetAllPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetAllPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetBlockOfPixels32
// Il2CppName: SetBlockOfPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetBlockOfPixels32)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetBlockOfPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetRawTextureData
// Il2CppName: GetRawTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetRawTextureData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetRawTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int, int, int, int, int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int, int, int, int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels32
// Il2CppName: GetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::GetPixels32)> {
  static const MethodInfo* get() {
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels32
// Il2CppName: GetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetPixels32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::PackTextures
// Il2CppName: PackTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rect> (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Texture2D*>, int, int, bool)>(&UnityEngine::Texture2D::PackTextures)> {
  static const MethodInfo* get() {
    static auto* textures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maximumAtlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "PackTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textures, padding, maximumAtlasSize, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::PackTextures
// Il2CppName: PackTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rect> (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Texture2D*>, int, int)>(&UnityEngine::Texture2D::PackTextures)> {
  static const MethodInfo* get() {
    static auto* textures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maximumAtlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "PackTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textures, padding, maximumAtlasSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::PackTextures
// Il2CppName: PackTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rect> (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Texture2D*>, int)>(&UnityEngine::Texture2D::PackTextures)> {
  static const MethodInfo* get() {
    static auto* textures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "PackTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textures, padding});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::CreateExternalTexture
// Il2CppName: CreateExternalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(int, int, ::UnityEngine::TextureFormat, bool, bool, ::System::IntPtr)>(&UnityEngine::Texture2D::CreateExternalTexture)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* mipChain = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* linear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "CreateExternalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, mipChain, linear, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixel
// Il2CppName: SetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::Color)>(&UnityEngine::Texture2D::SetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixel
// Il2CppName: SetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::Color, int)>(&UnityEngine::Texture2D::SetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, color, mipLevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>, int)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color>, int)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixel
// Il2CppName: GetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, int)>(&UnityEngine::Texture2D::GetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixel
// Il2CppName: GetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, int, int)>(&UnityEngine::Texture2D::GetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, mipLevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinear
// Il2CppName: GetPixelBilinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(float, float)>(&UnityEngine::Texture2D::GetPixelBilinear)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u, v});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinear
// Il2CppName: GetPixelBilinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(float, float, int)>(&UnityEngine::Texture2D::GetPixelBilinear)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mipLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u, v, mipLevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureData
// Il2CppName: LoadRawTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::System::IntPtr, int)>(&UnityEngine::Texture2D::LoadRawTextureData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureData
// Il2CppName: LoadRawTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<uint8_t>)>(&UnityEngine::Texture2D::LoadRawTextureData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureData
// Il2CppName: LoadRawTextureData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelData
// Il2CppName: SetPixelData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelData
// Il2CppName: SetPixelData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetRawTextureData
// Il2CppName: GetRawTextureData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool, bool)>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool)>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int)>(&UnityEngine::Texture2D::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::TextureFormat, bool)>(&UnityEngine::Texture2D::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* hasMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, hasMipMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixels
// Il2CppName: ReadPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int, bool)>(&UnityEngine::Texture2D::ReadPixels)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixels
// Il2CppName: ReadPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int)>(&UnityEngine::Texture2D::ReadPixels)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GenerateAtlas
// Il2CppName: GenerateAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector2>, int, int, ::System::Collections::Generic::List_1<::UnityEngine::Rect>*)>(&UnityEngine::Texture2D::GenerateAtlas)> {
  static const MethodInfo* get() {
    static auto* sizes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* atlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GenerateAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizes, padding, atlasSize, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color32>)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelImpl_Injected
// Il2CppName: SetPixelImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixelImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelImpl_Injected
// Il2CppName: GetPixelImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::GetPixelImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinearImpl_Injected
// Il2CppName: GetPixelBilinearImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, float, float, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::GetPixelBilinearImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinearImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, u, v, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixelsImpl_Injected
// Il2CppName: ReadPixelsImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(ByRef<::UnityEngine::Rect>, int, int, bool)>(&UnityEngine::Texture2D::ReadPixelsImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixelsImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_isReadable
// Il2CppName: get_isReadable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_isReadable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_isReadable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
