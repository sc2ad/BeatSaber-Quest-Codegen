// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputBindingComposite`1
#include "UnityEngine/InputSystem/InputBindingComposite_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: InputBindingCompositeContext because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Composites
namespace UnityEngine::InputSystem::Composites {
  // Forward declaring type: AxisComposite
  class AxisComposite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Composites::AxisComposite);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Composites::AxisComposite*, "UnityEngine.InputSystem.Composites", "AxisComposite");
// Type namespace: UnityEngine.InputSystem.Composites
namespace UnityEngine::InputSystem::Composites {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Composites.AxisComposite
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  // [DisplayStringFormatAttribute] Offset: 9593E8
  class AxisComposite : public ::UnityEngine::InputSystem::InputBindingComposite_1<float> {
    public:
    // Nested type: ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins
    struct WhichSideWins;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins
    // [TokenAttribute] Offset: FFFFFFFF
    struct WhichSideWins/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: WhichSideWins
      constexpr WhichSideWins(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Neither
      static constexpr const int Neither = 0;
      // Get static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Neither
      static ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins _get_Neither();
      // Set static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Neither
      static void _set_Neither(::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins value);
      // static field const value: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Positive
      static constexpr const int Positive = 1;
      // Get static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Positive
      static ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins _get_Positive();
      // Set static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Positive
      static void _set_Positive(::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins value);
      // static field const value: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Negative
      static constexpr const int Negative = 2;
      // Get static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Negative
      static ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins _get_Negative();
      // Set static field: static public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins Negative
      static void _set_Negative(::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins
    #pragma pack(pop)
    static check_size<sizeof(AxisComposite::WhichSideWins), 0 + sizeof(int)> __UnityEngine_InputSystem_Composites_AxisComposite_WhichSideWinsSizeCheck;
    static_assert(sizeof(AxisComposite::WhichSideWins) == 0x4);
    public:
    // [InputControlAttribute] Offset: 0x961294
    // public System.Int32 negative
    // Size: 0x4
    // Offset: 0x10
    int negative;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [InputControlAttribute] Offset: 0x9612D0
    // public System.Int32 positive
    // Size: 0x4
    // Offset: 0x14
    int positive;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0x96130C
    // public System.Single minValue
    // Size: 0x4
    // Offset: 0x18
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x961344
    // public System.Single maxValue
    // Size: 0x4
    // Offset: 0x1C
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x96137C
    // public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins whichSideWins
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins whichSideWins;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins) == 0x4);
    public:
    // Get instance field reference: public System.Int32 negative
    [[deprecated("Use field access instead!")]] int& dyn_negative();
    // Get instance field reference: public System.Int32 positive
    [[deprecated("Use field access instead!")]] int& dyn_positive();
    // Get instance field reference: public System.Single minValue
    [[deprecated("Use field access instead!")]] float& dyn_minValue();
    // Get instance field reference: public System.Single maxValue
    [[deprecated("Use field access instead!")]] float& dyn_maxValue();
    // Get instance field reference: public UnityEngine.InputSystem.Composites.AxisComposite/UnityEngine.InputSystem.Composites.WhichSideWins whichSideWins
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins& dyn_whichSideWins();
    // public System.Single get_midPoint()
    // Offset: 0xE12AE8
    float get_midPoint();
    // public System.Single ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context)
    // Offset: 0xE12AFC
    float ReadValue(ByRef<::UnityEngine::InputSystem::InputBindingCompositeContext> context);
    // public System.Void .ctor()
    // Offset: 0xE12CB4
    // Implemented from: UnityEngine.InputSystem.InputBindingComposite`1
    // Base method: System.Void InputBindingComposite_1::.ctor()
    // Base method: System.Void InputBindingComposite::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisComposite* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Composites::AxisComposite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisComposite*, creationType>()));
    }
    // public override System.Single EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context)
    // Offset: 0xE12BD4
    // Implemented from: UnityEngine.InputSystem.InputBindingComposite
    // Base method: System.Single InputBindingComposite::EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context)
    float EvaluateMagnitude(ByRef<::UnityEngine::InputSystem::InputBindingCompositeContext> context);
  }; // UnityEngine.InputSystem.Composites.AxisComposite
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Composites::AxisComposite::WhichSideWins, "UnityEngine.InputSystem.Composites", "AxisComposite/WhichSideWins");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Composites::AxisComposite::get_midPoint
// Il2CppName: get_midPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Composites::AxisComposite::*)()>(&UnityEngine::InputSystem::Composites::AxisComposite::get_midPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Composites::AxisComposite*), "get_midPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Composites::AxisComposite::ReadValue
// Il2CppName: ReadValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Composites::AxisComposite::*)(ByRef<::UnityEngine::InputSystem::InputBindingCompositeContext>)>(&UnityEngine::InputSystem::Composites::AxisComposite::ReadValue)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBindingCompositeContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Composites::AxisComposite*), "ReadValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Composites::AxisComposite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Composites::AxisComposite::EvaluateMagnitude
// Il2CppName: EvaluateMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Composites::AxisComposite::*)(ByRef<::UnityEngine::InputSystem::InputBindingCompositeContext>)>(&UnityEngine::InputSystem::Composites::AxisComposite::EvaluateMagnitude)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBindingCompositeContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Composites::AxisComposite*), "EvaluateMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
