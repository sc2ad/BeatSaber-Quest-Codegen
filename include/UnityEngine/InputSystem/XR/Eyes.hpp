// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: Eyes
  struct Eyes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::Eyes, "UnityEngine.InputSystem.XR", "Eyes");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0x4C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.Eyes
  // [TokenAttribute] Offset: FFFFFFFF
  struct Eyes/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector3 <leftEyePosition>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 leftEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <leftEyeRotation>k__BackingField
    // Size: 0x10
    // Offset: 0xC
    ::UnityEngine::Quaternion leftEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 <rightEyePosition>k__BackingField
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 rightEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <rightEyeRotation>k__BackingField
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Quaternion rightEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 <fixationPoint>k__BackingField
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 fixationPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <leftEyeOpenAmount>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    float leftEyeOpenAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <rightEyeOpenAmount>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float rightEyeOpenAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Eyes
    constexpr Eyes(::UnityEngine::Vector3 leftEyePosition_ = {}, ::UnityEngine::Quaternion leftEyeRotation_ = {}, ::UnityEngine::Vector3 rightEyePosition_ = {}, ::UnityEngine::Quaternion rightEyeRotation_ = {}, ::UnityEngine::Vector3 fixationPoint_ = {}, float leftEyeOpenAmount_ = {}, float rightEyeOpenAmount_ = {}) noexcept : leftEyePosition{leftEyePosition_}, leftEyeRotation{leftEyeRotation_}, rightEyePosition{rightEyePosition_}, rightEyeRotation{rightEyeRotation_}, fixationPoint{fixationPoint_}, leftEyeOpenAmount{leftEyeOpenAmount_}, rightEyeOpenAmount{rightEyeOpenAmount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 <leftEyePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$leftEyePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <leftEyeRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$leftEyeRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <rightEyePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$rightEyePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <rightEyeRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$rightEyeRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <fixationPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$fixationPoint$k__BackingField();
    // Get instance field reference: private System.Single <leftEyeOpenAmount>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$leftEyeOpenAmount$k__BackingField();
    // Get instance field reference: private System.Single <rightEyeOpenAmount>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$rightEyeOpenAmount$k__BackingField();
    // public UnityEngine.Vector3 get_leftEyePosition()
    // Offset: 0xA78868
    ::UnityEngine::Vector3 get_leftEyePosition();
    // public System.Void set_leftEyePosition(UnityEngine.Vector3 value)
    // Offset: 0xA78874
    void set_leftEyePosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_leftEyeRotation()
    // Offset: 0xA78880
    ::UnityEngine::Quaternion get_leftEyeRotation();
    // public System.Void set_leftEyeRotation(UnityEngine.Quaternion value)
    // Offset: 0xA7888C
    void set_leftEyeRotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_rightEyePosition()
    // Offset: 0xA78898
    ::UnityEngine::Vector3 get_rightEyePosition();
    // public System.Void set_rightEyePosition(UnityEngine.Vector3 value)
    // Offset: 0xA788A4
    void set_rightEyePosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rightEyeRotation()
    // Offset: 0xA788B0
    ::UnityEngine::Quaternion get_rightEyeRotation();
    // public System.Void set_rightEyeRotation(UnityEngine.Quaternion value)
    // Offset: 0xA788BC
    void set_rightEyeRotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_fixationPoint()
    // Offset: 0xA788C8
    ::UnityEngine::Vector3 get_fixationPoint();
    // public System.Void set_fixationPoint(UnityEngine.Vector3 value)
    // Offset: 0xA788D4
    void set_fixationPoint(::UnityEngine::Vector3 value);
    // public System.Single get_leftEyeOpenAmount()
    // Offset: 0xA788E0
    float get_leftEyeOpenAmount();
    // public System.Void set_leftEyeOpenAmount(System.Single value)
    // Offset: 0xA788E8
    void set_leftEyeOpenAmount(float value);
    // public System.Single get_rightEyeOpenAmount()
    // Offset: 0xA788F0
    float get_rightEyeOpenAmount();
    // public System.Void set_rightEyeOpenAmount(System.Single value)
    // Offset: 0xA788F8
    void set_rightEyeOpenAmount(float value);
  }; // UnityEngine.InputSystem.XR.Eyes
  #pragma pack(pop)
  static check_size<sizeof(Eyes), 72 + sizeof(float)> __UnityEngine_InputSystem_XR_EyesSizeCheck;
  static_assert(sizeof(Eyes) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_leftEyePosition
// Il2CppName: get_leftEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_leftEyePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_leftEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_leftEyePosition
// Il2CppName: set_leftEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(::UnityEngine::Vector3)>(&UnityEngine::InputSystem::XR::Eyes::set_leftEyePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_leftEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_leftEyeRotation
// Il2CppName: get_leftEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_leftEyeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_leftEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_leftEyeRotation
// Il2CppName: set_leftEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(::UnityEngine::Quaternion)>(&UnityEngine::InputSystem::XR::Eyes::set_leftEyeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_leftEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_rightEyePosition
// Il2CppName: get_rightEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_rightEyePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_rightEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_rightEyePosition
// Il2CppName: set_rightEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(::UnityEngine::Vector3)>(&UnityEngine::InputSystem::XR::Eyes::set_rightEyePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_rightEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_rightEyeRotation
// Il2CppName: get_rightEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_rightEyeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_rightEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_rightEyeRotation
// Il2CppName: set_rightEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(::UnityEngine::Quaternion)>(&UnityEngine::InputSystem::XR::Eyes::set_rightEyeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_rightEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_fixationPoint
// Il2CppName: get_fixationPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_fixationPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_fixationPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_fixationPoint
// Il2CppName: set_fixationPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(::UnityEngine::Vector3)>(&UnityEngine::InputSystem::XR::Eyes::set_fixationPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_fixationPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_leftEyeOpenAmount
// Il2CppName: get_leftEyeOpenAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_leftEyeOpenAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_leftEyeOpenAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_leftEyeOpenAmount
// Il2CppName: set_leftEyeOpenAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(float)>(&UnityEngine::InputSystem::XR::Eyes::set_leftEyeOpenAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_leftEyeOpenAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::get_rightEyeOpenAmount
// Il2CppName: get_rightEyeOpenAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::XR::Eyes::*)()>(&UnityEngine::InputSystem::XR::Eyes::get_rightEyeOpenAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "get_rightEyeOpenAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Eyes::set_rightEyeOpenAmount
// Il2CppName: set_rightEyeOpenAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Eyes::*)(float)>(&UnityEngine::InputSystem::XR::Eyes::set_rightEyeOpenAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Eyes), "set_rightEyeOpenAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
