// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.TrackedDevice
#include "UnityEngine/InputSystem/TrackedDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: Vector3Control
  class Vector3Control;
  // Forward declaring type: QuaternionControl
  class QuaternionControl;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: XRHMD
  class XRHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::XR::XRHMD);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::XRHMD*, "UnityEngine.InputSystem.XR", "XRHMD");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0x1A0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.XR.XRHMD
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 9580B0
  // [PreserveAttribute] Offset: FFFFFFFF
  class XRHMD : public ::UnityEngine::InputSystem::TrackedDevice {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.Vector3Control <leftEyePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::InputSystem::Controls::Vector3Control* leftEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.QuaternionControl <leftEyeRotation>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::InputSystem::Controls::QuaternionControl* leftEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <rightEyePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::InputSystem::Controls::Vector3Control* rightEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.QuaternionControl <rightEyeRotation>k__BackingField
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::InputSystem::Controls::QuaternionControl* rightEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <centerEyePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::InputSystem::Controls::Vector3Control* centerEyePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.QuaternionControl <centerEyeRotation>k__BackingField
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::InputSystem::Controls::QuaternionControl* centerEyeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <leftEyePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$leftEyePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.QuaternionControl <leftEyeRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::QuaternionControl*& dyn_$leftEyeRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <rightEyePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$rightEyePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.QuaternionControl <rightEyeRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::QuaternionControl*& dyn_$rightEyeRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <centerEyePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$centerEyePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.QuaternionControl <centerEyeRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::QuaternionControl*& dyn_$centerEyeRotation$k__BackingField();
    // public UnityEngine.InputSystem.Controls.Vector3Control get_leftEyePosition()
    // Offset: 0x1B59C8C
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_leftEyePosition();
    // private System.Void set_leftEyePosition(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0x1B59C94
    void set_leftEyePosition(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.QuaternionControl get_leftEyeRotation()
    // Offset: 0x1B59C9C
    ::UnityEngine::InputSystem::Controls::QuaternionControl* get_leftEyeRotation();
    // private System.Void set_leftEyeRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)
    // Offset: 0x1B59CA4
    void set_leftEyeRotation(::UnityEngine::InputSystem::Controls::QuaternionControl* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_rightEyePosition()
    // Offset: 0x1B59CAC
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_rightEyePosition();
    // private System.Void set_rightEyePosition(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0x1B59CB4
    void set_rightEyePosition(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.QuaternionControl get_rightEyeRotation()
    // Offset: 0x1B59CBC
    ::UnityEngine::InputSystem::Controls::QuaternionControl* get_rightEyeRotation();
    // private System.Void set_rightEyeRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)
    // Offset: 0x1B59CC4
    void set_rightEyeRotation(::UnityEngine::InputSystem::Controls::QuaternionControl* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_centerEyePosition()
    // Offset: 0x1B59CCC
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_centerEyePosition();
    // private System.Void set_centerEyePosition(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0x1B59CD4
    void set_centerEyePosition(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.QuaternionControl get_centerEyeRotation()
    // Offset: 0x1B59CDC
    ::UnityEngine::InputSystem::Controls::QuaternionControl* get_centerEyeRotation();
    // private System.Void set_centerEyeRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)
    // Offset: 0x1B59CE4
    void set_centerEyeRotation(::UnityEngine::InputSystem::Controls::QuaternionControl* value);
    // public System.Void .ctor()
    // Offset: 0x1B59DF8
    // Implemented from: UnityEngine.InputSystem.TrackedDevice
    // Base method: System.Void TrackedDevice::.ctor()
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::XR::XRHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRHMD*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0x1B59CEC
    // Implemented from: UnityEngine.InputSystem.TrackedDevice
    // Base method: System.Void TrackedDevice::FinishSetup()
    void FinishSetup();
  }; // UnityEngine.InputSystem.XR.XRHMD
  #pragma pack(pop)
  static check_size<sizeof(XRHMD), 408 + sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*)> __UnityEngine_InputSystem_XR_XRHMDSizeCheck;
  static_assert(sizeof(XRHMD) == 0x1A0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_leftEyePosition
// Il2CppName: get_leftEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_leftEyePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_leftEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_leftEyePosition
// Il2CppName: set_leftEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&UnityEngine::InputSystem::XR::XRHMD::set_leftEyePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_leftEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_leftEyeRotation
// Il2CppName: get_leftEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::QuaternionControl* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_leftEyeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_leftEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_leftEyeRotation
// Il2CppName: set_leftEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::QuaternionControl*)>(&UnityEngine::InputSystem::XR::XRHMD::set_leftEyeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "QuaternionControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_leftEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_rightEyePosition
// Il2CppName: get_rightEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_rightEyePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_rightEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_rightEyePosition
// Il2CppName: set_rightEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&UnityEngine::InputSystem::XR::XRHMD::set_rightEyePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_rightEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_rightEyeRotation
// Il2CppName: get_rightEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::QuaternionControl* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_rightEyeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_rightEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_rightEyeRotation
// Il2CppName: set_rightEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::QuaternionControl*)>(&UnityEngine::InputSystem::XR::XRHMD::set_rightEyeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "QuaternionControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_rightEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_centerEyePosition
// Il2CppName: get_centerEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_centerEyePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_centerEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_centerEyePosition
// Il2CppName: set_centerEyePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&UnityEngine::InputSystem::XR::XRHMD::set_centerEyePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_centerEyePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::get_centerEyeRotation
// Il2CppName: get_centerEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::QuaternionControl* (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::get_centerEyeRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "get_centerEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::set_centerEyeRotation
// Il2CppName: set_centerEyeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)(::UnityEngine::InputSystem::Controls::QuaternionControl*)>(&UnityEngine::InputSystem::XR::XRHMD::set_centerEyeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "QuaternionControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "set_centerEyeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRHMD::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::XRHMD::*)()>(&UnityEngine::InputSystem::XR::XRHMD::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRHMD*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
