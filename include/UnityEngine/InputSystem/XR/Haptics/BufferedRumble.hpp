// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.XR.Haptics.HapticCapabilities
#include "UnityEngine/InputSystem/XR/Haptics/HapticCapabilities.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Forward declaring type: BufferedRumble
  struct BufferedRumble;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::Haptics::BufferedRumble, "UnityEngine.InputSystem.XR.Haptics", "BufferedRumble");
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.Haptics.BufferedRumble
  // [TokenAttribute] Offset: FFFFFFFF
  struct BufferedRumble/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.InputSystem.XR.Haptics.HapticCapabilities <capabilities>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities capabilities;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities) == 0xC);
    // Padding between fields: capabilities and: device
    char __padding0[0x4] = {};
    // private UnityEngine.InputSystem.InputDevice <device>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputDevice* device;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputDevice*) == 0x8);
    public:
    // Creating value type constructor for type: BufferedRumble
    constexpr BufferedRumble(::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities capabilities_ = {}, ::UnityEngine::InputSystem::InputDevice* device_ = {}) noexcept : capabilities{capabilities_}, device{device_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.XR.Haptics.HapticCapabilities <capabilities>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities& dyn_$capabilities$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.InputDevice <device>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputDevice*& dyn_$device$k__BackingField();
    // public UnityEngine.InputSystem.XR.Haptics.HapticCapabilities get_capabilities()
    // Offset: 0xA7893C
    ::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities get_capabilities();
    // private System.Void set_capabilities(UnityEngine.InputSystem.XR.Haptics.HapticCapabilities value)
    // Offset: 0xA7894C
    void set_capabilities(::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities value);
    // private UnityEngine.InputSystem.InputDevice get_device()
    // Offset: 0xA78958
    ::UnityEngine::InputSystem::InputDevice* get_device();
    // private System.Void set_device(UnityEngine.InputSystem.InputDevice value)
    // Offset: 0xA78960
    void set_device(::UnityEngine::InputSystem::InputDevice* value);
    // public System.Void .ctor(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0xA78968
    BufferedRumble(::UnityEngine::InputSystem::InputDevice* device);
    // public System.Void EnqueueRumble(System.Byte[] samples)
    // Offset: 0xA78970
    void EnqueueRumble(::ArrayW<uint8_t> samples);
  }; // UnityEngine.InputSystem.XR.Haptics.BufferedRumble
  #pragma pack(pop)
  static check_size<sizeof(BufferedRumble), 16 + sizeof(::UnityEngine::InputSystem::InputDevice*)> __UnityEngine_InputSystem_XR_Haptics_BufferedRumbleSizeCheck;
  static_assert(sizeof(BufferedRumble) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::get_capabilities
// Il2CppName: get_capabilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities (UnityEngine::InputSystem::XR::Haptics::BufferedRumble::*)()>(&UnityEngine::InputSystem::XR::Haptics::BufferedRumble::get_capabilities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::BufferedRumble), "get_capabilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::set_capabilities
// Il2CppName: set_capabilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::BufferedRumble::*)(::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities)>(&UnityEngine::InputSystem::XR::Haptics::BufferedRumble::set_capabilities)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.XR.Haptics", "HapticCapabilities")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::BufferedRumble), "set_capabilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::get_device
// Il2CppName: get_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::XR::Haptics::BufferedRumble::*)()>(&UnityEngine::InputSystem::XR::Haptics::BufferedRumble::get_device)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::BufferedRumble), "get_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::set_device
// Il2CppName: set_device
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::BufferedRumble::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::XR::Haptics::BufferedRumble::set_device)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::BufferedRumble), "set_device", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::BufferedRumble
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::BufferedRumble::EnqueueRumble
// Il2CppName: EnqueueRumble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::BufferedRumble::*)(::ArrayW<uint8_t>)>(&UnityEngine::InputSystem::XR::Haptics::BufferedRumble::EnqueueRumble)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::BufferedRumble), "EnqueueRumble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
