// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Forward declaring type: HapticCapabilities
  struct HapticCapabilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::Haptics::HapticCapabilities, "UnityEngine.InputSystem.XR.Haptics", "HapticCapabilities");
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.Haptics.HapticCapabilities
  // [TokenAttribute] Offset: FFFFFFFF
  struct HapticCapabilities/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 <numChannels>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    uint numChannels;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <frequencyHz>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    uint frequencyHz;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 <maxBufferSize>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    uint maxBufferSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: HapticCapabilities
    constexpr HapticCapabilities(uint numChannels_ = {}, uint frequencyHz_ = {}, uint maxBufferSize_ = {}) noexcept : numChannels{numChannels_}, frequencyHz{frequencyHz_}, maxBufferSize{maxBufferSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 <numChannels>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$numChannels$k__BackingField();
    // Get instance field reference: private System.UInt32 <frequencyHz>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$frequencyHz$k__BackingField();
    // Get instance field reference: private System.UInt32 <maxBufferSize>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$maxBufferSize$k__BackingField();
    // public System.UInt32 get_numChannels()
    // Offset: 0xA78A10
    uint get_numChannels();
    // private System.Void set_numChannels(System.UInt32 value)
    // Offset: 0xA78A18
    void set_numChannels(uint value);
    // public System.UInt32 get_frequencyHz()
    // Offset: 0xA78A20
    uint get_frequencyHz();
    // private System.Void set_frequencyHz(System.UInt32 value)
    // Offset: 0xA78A28
    void set_frequencyHz(uint value);
    // public System.UInt32 get_maxBufferSize()
    // Offset: 0xA78A30
    uint get_maxBufferSize();
    // private System.Void set_maxBufferSize(System.UInt32 value)
    // Offset: 0xA78A38
    void set_maxBufferSize(uint value);
    // public System.Void .ctor(System.UInt32 numChannels, System.UInt32 frequencyHz, System.UInt32 maxBufferSize)
    // Offset: 0xA78A04
    // ABORTED: conflicts with another method.  HapticCapabilities(uint numChannels, uint frequencyHz, uint maxBufferSize);
  }; // UnityEngine.InputSystem.XR.Haptics.HapticCapabilities
  #pragma pack(pop)
  static check_size<sizeof(HapticCapabilities), 8 + sizeof(uint)> __UnityEngine_InputSystem_XR_Haptics_HapticCapabilitiesSizeCheck;
  static_assert(sizeof(HapticCapabilities) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_numChannels
// Il2CppName: get_numChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)()>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_numChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "get_numChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_numChannels
// Il2CppName: set_numChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)(uint)>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_numChannels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "set_numChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_frequencyHz
// Il2CppName: get_frequencyHz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)()>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_frequencyHz)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "get_frequencyHz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_frequencyHz
// Il2CppName: set_frequencyHz
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)(uint)>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_frequencyHz)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "set_frequencyHz", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_maxBufferSize
// Il2CppName: get_maxBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)()>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::get_maxBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "get_maxBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_maxBufferSize
// Il2CppName: set_maxBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::*)(uint)>(&UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::set_maxBufferSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::HapticCapabilities), "set_maxBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::HapticCapabilities::HapticCapabilities
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
