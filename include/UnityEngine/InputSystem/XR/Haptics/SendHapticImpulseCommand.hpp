// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
#include "UnityEngine/InputSystem/LowLevel/IInputDeviceCommandInfo.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputDeviceCommand
#include "UnityEngine/InputSystem/LowLevel/InputDeviceCommand.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Skipping declaration: FourCC because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Forward declaring type: SendHapticImpulseCommand
  struct SendHapticImpulseCommand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand, "UnityEngine.InputSystem.XR.Haptics", "SendHapticImpulseCommand");
// Type namespace: UnityEngine.InputSystem.XR.Haptics
namespace UnityEngine::InputSystem::XR::Haptics {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.Haptics.SendHapticImpulseCommand
  // [TokenAttribute] Offset: FFFFFFFF
  struct SendHapticImpulseCommand/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo*/ {
    public:
    public:
    // private UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::InputDeviceCommand baseCommand;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand) == 0x8);
    // private System.Int32 channel
    // Size: 0x4
    // Offset: 0x8
    int channel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single amplitude
    // Size: 0x4
    // Offset: 0xC
    float amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single duration
    // Size: 0x4
    // Offset: 0x10
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SendHapticImpulseCommand
    constexpr SendHapticImpulseCommand(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand baseCommand_ = {}, int channel_ = {}, float amplitude_ = {}, float duration_ = {}) noexcept : baseCommand{baseCommand_}, channel{channel_}, amplitude{amplitude_}, duration{duration_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo*>(this);
    }
    // static field const value: static private System.Int32 kSize
    static constexpr const int kSize = 20;
    // Get static field: static private System.Int32 kSize
    static int _get_kSize();
    // Set static field: static private System.Int32 kSize
    static void _set_kSize(int value);
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputDeviceCommand& dyn_baseCommand();
    // Get instance field reference: private System.Int32 channel
    [[deprecated("Use field access instead!")]] int& dyn_channel();
    // Get instance field reference: private System.Single amplitude
    [[deprecated("Use field access instead!")]] float& dyn_amplitude();
    // Get instance field reference: private System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // static private UnityEngine.InputSystem.Utilities.FourCC get_Type()
    // Offset: 0x1B58D94
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Type();
    // public UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()
    // Offset: 0xA78AA4
    ::UnityEngine::InputSystem::Utilities::FourCC get_typeStatic();
    // static public UnityEngine.InputSystem.XR.Haptics.SendHapticImpulseCommand Create(System.Int32 motorChannel, System.Single motorAmplitude, System.Single motorDuration)
    // Offset: 0x1B58E0C
    static ::UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand Create(int motorChannel, float motorAmplitude, float motorDuration);
  }; // UnityEngine.InputSystem.XR.Haptics.SendHapticImpulseCommand
  #pragma pack(pop)
  static check_size<sizeof(SendHapticImpulseCommand), 16 + sizeof(float)> __UnityEngine_InputSystem_XR_Haptics_SendHapticImpulseCommandSizeCheck;
  static_assert(sizeof(SendHapticImpulseCommand) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::get_typeStatic
// Il2CppName: get_typeStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::*)()>(&UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::get_typeStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand), "get_typeStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand (*)(int, float, float)>(&UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand::Create)> {
  static const MethodInfo* get() {
    static auto* motorChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* motorAmplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* motorDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::Haptics::SendHapticImpulseCommand), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{motorChannel, motorAmplitude, motorDuration});
  }
};
