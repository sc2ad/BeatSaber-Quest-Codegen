// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.XR.XRFeatureDescriptor
#include "UnityEngine/InputSystem/XR/XRFeatureDescriptor.hpp"
// Including type: UnityEngine.XR.InputDeviceCharacteristics
#include "UnityEngine/XR/InputDeviceCharacteristics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: XRDeviceDescriptor
  class XRDeviceDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::XR::XRDeviceDescriptor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::XRDeviceDescriptor*, "UnityEngine.InputSystem.XR", "XRDeviceDescriptor");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.XR.XRDeviceDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  class XRDeviceDescriptor : public ::Il2CppObject {
    public:
    public:
    // public System.String deviceName
    // Size: 0x8
    // Offset: 0x10
    ::StringW deviceName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String manufacturer
    // Size: 0x8
    // Offset: 0x18
    ::StringW manufacturer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String serialNumber
    // Size: 0x8
    // Offset: 0x20
    ::StringW serialNumber;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.XR.InputDeviceCharacteristics characteristics
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::XR::InputDeviceCharacteristics characteristics;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDeviceCharacteristics) == 0x4);
    // public System.Int32 deviceId
    // Size: 0x4
    // Offset: 0x2C
    int deviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Collections.Generic.List`1<UnityEngine.InputSystem.XR.XRFeatureDescriptor> inputFeatures
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::XRFeatureDescriptor>* inputFeatures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::XRFeatureDescriptor>*) == 0x8);
    public:
    // Get instance field reference: public System.String deviceName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_deviceName();
    // Get instance field reference: public System.String manufacturer
    [[deprecated("Use field access instead!")]] ::StringW& dyn_manufacturer();
    // Get instance field reference: public System.String serialNumber
    [[deprecated("Use field access instead!")]] ::StringW& dyn_serialNumber();
    // Get instance field reference: public UnityEngine.XR.InputDeviceCharacteristics characteristics
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDeviceCharacteristics& dyn_characteristics();
    // Get instance field reference: public System.Int32 deviceId
    [[deprecated("Use field access instead!")]] int& dyn_deviceId();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.InputSystem.XR.XRFeatureDescriptor> inputFeatures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::XRFeatureDescriptor>*& dyn_inputFeatures();
    // public System.Void .ctor()
    // Offset: 0x1B59C84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRDeviceDescriptor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::XR::XRDeviceDescriptor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRDeviceDescriptor*, creationType>()));
    }
    // public System.String ToJson()
    // Offset: 0x1B59C7C
    ::StringW ToJson();
    // static public UnityEngine.InputSystem.XR.XRDeviceDescriptor FromJson(System.String json)
    // Offset: 0x1B59B90
    static ::UnityEngine::InputSystem::XR::XRDeviceDescriptor* FromJson(::StringW json);
  }; // UnityEngine.InputSystem.XR.XRDeviceDescriptor
  #pragma pack(pop)
  static check_size<sizeof(XRDeviceDescriptor), 48 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::XRFeatureDescriptor>*)> __UnityEngine_InputSystem_XR_XRDeviceDescriptorSizeCheck;
  static_assert(sizeof(XRDeviceDescriptor) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRDeviceDescriptor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRDeviceDescriptor::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::XR::XRDeviceDescriptor::*)()>(&UnityEngine::InputSystem::XR::XRDeviceDescriptor::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRDeviceDescriptor*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XR::XRDeviceDescriptor::FromJson
// Il2CppName: FromJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XR::XRDeviceDescriptor* (*)(::StringW)>(&UnityEngine::InputSystem::XR::XRDeviceDescriptor::FromJson)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XR::XRDeviceDescriptor*), "FromJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
