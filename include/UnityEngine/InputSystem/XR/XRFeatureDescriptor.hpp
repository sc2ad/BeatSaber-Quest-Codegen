// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.XR.UsageHint
#include "UnityEngine/InputSystem/XR/UsageHint.hpp"
// Including type: UnityEngine.InputSystem.XR.FeatureType
#include "UnityEngine/InputSystem/XR/FeatureType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Forward declaring type: XRFeatureDescriptor
  struct XRFeatureDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XR::XRFeatureDescriptor, "UnityEngine.InputSystem.XR", "XRFeatureDescriptor");
// Type namespace: UnityEngine.InputSystem.XR
namespace UnityEngine::InputSystem::XR {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XR.XRFeatureDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  struct XRFeatureDescriptor/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.InputSystem.XR.UsageHint> usageHints
    // Size: 0x8
    // Offset: 0x8
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::UsageHint>* usageHints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::UsageHint>*) == 0x8);
    // public UnityEngine.InputSystem.XR.FeatureType featureType
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::InputSystem::XR::FeatureType featureType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XR::FeatureType) == 0x4);
    // public System.UInt32 customSize
    // Size: 0x4
    // Offset: 0x14
    uint customSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: XRFeatureDescriptor
    constexpr XRFeatureDescriptor(::StringW name_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::UsageHint>* usageHints_ = {}, ::UnityEngine::InputSystem::XR::FeatureType featureType_ = {}, uint customSize_ = {}) noexcept : name{name_}, usageHints{usageHints_}, featureType{featureType_}, customSize{customSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.InputSystem.XR.UsageHint> usageHints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::XR::UsageHint>*& dyn_usageHints();
    // Get instance field reference: public UnityEngine.InputSystem.XR.FeatureType featureType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XR::FeatureType& dyn_featureType();
    // Get instance field reference: public System.UInt32 customSize
    [[deprecated("Use field access instead!")]] uint& dyn_customSize();
  }; // UnityEngine.InputSystem.XR.XRFeatureDescriptor
  #pragma pack(pop)
  static check_size<sizeof(XRFeatureDescriptor), 20 + sizeof(uint)> __UnityEngine_InputSystem_XR_XRFeatureDescriptorSizeCheck;
  static_assert(sizeof(XRFeatureDescriptor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
