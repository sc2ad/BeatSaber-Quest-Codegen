// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: TouchState
  struct TouchState;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: TouchscreenState
  struct TouchscreenState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::TouchscreenState, "UnityEngine.InputSystem.LowLevel", "TouchscreenState");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x39
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.TouchscreenState
  // [TokenAttribute] Offset: FFFFFFFF
  struct TouchscreenState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer
    struct $primaryTouchData$e__FixedBuffer;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer
    struct $touchData$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<primaryTouchData>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $primaryTouchData$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $primaryTouchData$e__FixedBuffer
      constexpr $primaryTouchData$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<primaryTouchData>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(TouchscreenState::$primaryTouchData$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_InputSystem_LowLevel_TouchscreenState_$primaryTouchData$e__FixedBufferSizeCheck;
    static_assert(sizeof(TouchscreenState::$primaryTouchData$e__FixedBuffer) == 0x1);
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<touchData>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $touchData$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $touchData$e__FixedBuffer
      constexpr $touchData$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<touchData>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(TouchscreenState::$touchData$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_InputSystem_LowLevel_TouchscreenState_$touchData$e__FixedBufferSizeCheck;
    static_assert(sizeof(TouchscreenState::$touchData$e__FixedBuffer) == 0x1);
    public:
    // [FixedBufferAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // [InputControlAttribute] Offset: 0x9605F4
    // public UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<primaryTouchData>e__FixedBuffer primaryTouchData
    // Size: 0x1
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer primaryTouchData;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer) == 0x1);
    // Padding between fields: primaryTouchData and: touchData
    char __padding0[0x37] = {};
    // [FixedBufferAttribute] Offset: 0x96081C
    // [InputControlAttribute] Offset: 0x96081C
    // public UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<touchData>e__FixedBuffer touchData
    // Size: 0x1
    // Offset: 0x38
    ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer touchData;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: TouchscreenState
    constexpr TouchscreenState(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer primaryTouchData_ = {}, ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer touchData_ = {}) noexcept : primaryTouchData{primaryTouchData_}, touchData{touchData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // static field const value: static public System.Int32 MaxTouches
    static constexpr const int MaxTouches = 10;
    // Get static field: static public System.Int32 MaxTouches
    static int _get_MaxTouches();
    // Set static field: static public System.Int32 MaxTouches
    static void _set_MaxTouches(int value);
    // static field const value: static System.Int32 kTouchDataOffset
    static constexpr const int kTouchDataOffset = 56;
    // Get static field: static System.Int32 kTouchDataOffset
    static int _get_kTouchDataOffset();
    // Set static field: static System.Int32 kTouchDataOffset
    static void _set_kTouchDataOffset(int value);
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<primaryTouchData>e__FixedBuffer primaryTouchData
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer& dyn_primaryTouchData();
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.TouchscreenState/UnityEngine.InputSystem.LowLevel.<touchData>e__FixedBuffer touchData
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer& dyn_touchData();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_Format()
    // Offset: 0xCC7B74
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Format();
    // public UnityEngine.InputSystem.LowLevel.TouchState* get_primaryTouch()
    // Offset: 0xA3BA54
    ::UnityEngine::InputSystem::LowLevel::TouchState* get_primaryTouch();
    // public UnityEngine.InputSystem.LowLevel.TouchState* get_touches()
    // Offset: 0xA3BA5C
    ::UnityEngine::InputSystem::LowLevel::TouchState* get_touches();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA3BA64
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
  }; // UnityEngine.InputSystem.LowLevel.TouchscreenState
  #pragma pack(pop)
  static check_size<sizeof(TouchscreenState), 56 + sizeof(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer)> __UnityEngine_InputSystem_LowLevel_TouchscreenStateSizeCheck;
  static_assert(sizeof(TouchscreenState) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$touchData$e__FixedBuffer, "UnityEngine.InputSystem.LowLevel", "TouchscreenState/<touchData>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::TouchscreenState::$primaryTouchData$e__FixedBuffer, "UnityEngine.InputSystem.LowLevel", "TouchscreenState/<primaryTouchData>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchscreenState::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::TouchscreenState::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchscreenState), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchscreenState::get_primaryTouch
// Il2CppName: get_primaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TouchState* (UnityEngine::InputSystem::LowLevel::TouchscreenState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchscreenState::get_primaryTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchscreenState), "get_primaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchscreenState::get_touches
// Il2CppName: get_touches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TouchState* (UnityEngine::InputSystem::LowLevel::TouchscreenState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchscreenState::get_touches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchscreenState), "get_touches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TouchscreenState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::TouchscreenState::*)()>(&UnityEngine::InputSystem::LowLevel::TouchscreenState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TouchscreenState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
