// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IMECompositionString
#include "UnityEngine/InputSystem/LowLevel/IMECompositionString.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator, "UnityEngine.InputSystem.LowLevel", "IMECompositionString/Enumerator");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x8C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.IMECompositionString/UnityEngine.InputSystem.LowLevel.Enumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct IMECompositionString::Enumerator/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>*/ {
    public:
    public:
    // private UnityEngine.InputSystem.LowLevel.IMECompositionString m_CompositionString
    // Size: 0x6
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::IMECompositionString m_CompositionString;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::IMECompositionString) == 0x6);
    // Padding between fields: m_CompositionString and: m_CurrentCharacter
    char __padding0[0x7E] = {};
    // private System.Char m_CurrentCharacter
    // Size: 0x2
    // Offset: 0x84
    ::Il2CppChar m_CurrentCharacter;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: m_CurrentCharacter and: m_CurrentIndex
    char __padding1[0x2] = {};
    // private System.Int32 m_CurrentIndex
    // Size: 0x4
    // Offset: 0x88
    int m_CurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Enumerator
    constexpr Enumerator(::UnityEngine::InputSystem::LowLevel::IMECompositionString m_CompositionString_ = {}, ::Il2CppChar m_CurrentCharacter_ = {}, int m_CurrentIndex_ = {}) noexcept : m_CompositionString{m_CompositionString_}, m_CurrentCharacter{m_CurrentCharacter_}, m_CurrentIndex{m_CurrentIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppChar>*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.IMECompositionString m_CompositionString
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::IMECompositionString& dyn_m_CompositionString();
    // Get instance field reference: private System.Char m_CurrentCharacter
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_m_CurrentCharacter();
    // Get instance field reference: private System.Int32 m_CurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentIndex();
    // public System.Char get_Current()
    // Offset: 0xA560B4
    ::Il2CppChar get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xA560BC
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void .ctor(UnityEngine.InputSystem.LowLevel.IMECompositionString compositionString)
    // Offset: 0xA5603C
    Enumerator(::UnityEngine::InputSystem::LowLevel::IMECompositionString compositionString);
    // public System.Boolean MoveNext()
    // Offset: 0xA56070
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0xA560A4
    void Reset();
    // public System.Void Dispose()
    // Offset: 0xA560B0
    void Dispose();
  }; // UnityEngine.InputSystem.LowLevel.IMECompositionString/UnityEngine.InputSystem.LowLevel.Enumerator
  #pragma pack(pop)
  static check_size<sizeof(IMECompositionString::Enumerator), 136 + sizeof(int)> __UnityEngine_InputSystem_LowLevel_IMECompositionString_EnumeratorSizeCheck;
  static_assert(sizeof(IMECompositionString::Enumerator) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::*)()>(&UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::*)()>(&UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::Enumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::*)()>(&UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::*)()>(&UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::*)()>(&UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::IMECompositionString::Enumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
