// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.InputSystem.Key
#include "UnityEngine/InputSystem/Key.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: KeyboardState
  struct KeyboardState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::KeyboardState, "UnityEngine.InputSystem.LowLevel", "KeyboardState");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.KeyboardState
  // [TokenAttribute] Offset: FFFFFFFF
  struct KeyboardState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer
    struct $keys$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.KeyboardState/UnityEngine.InputSystem.LowLevel.<keys>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $keys$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $keys$e__FixedBuffer
      constexpr $keys$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.LowLevel.KeyboardState/UnityEngine.InputSystem.LowLevel.<keys>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(KeyboardState::$keys$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_InputSystem_LowLevel_KeyboardState_$keys$e__FixedBufferSizeCheck;
    static_assert(sizeof(KeyboardState::$keys$e__FixedBuffer) == 0x1);
    public:
    // [FixedBufferAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // [InputControlAttribute] Offset: 0x95D118
    // public UnityEngine.InputSystem.LowLevel.KeyboardState/UnityEngine.InputSystem.LowLevel.<keys>e__FixedBuffer keys
    // Size: 0x1
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer keys;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: KeyboardState
    constexpr KeyboardState(::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer keys_ = {}) noexcept : keys{keys_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer
    constexpr operator ::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer() const noexcept {
      return keys;
    }
    // static field const value: static private System.Int32 kSizeInBits
    static constexpr const int kSizeInBits = 110;
    // Get static field: static private System.Int32 kSizeInBits
    static int _get_kSizeInBits();
    // Set static field: static private System.Int32 kSizeInBits
    static void _set_kSizeInBits(int value);
    // static field const value: static System.Int32 kSizeInBytes
    static constexpr const int kSizeInBytes = 14;
    // Get static field: static System.Int32 kSizeInBytes
    static int _get_kSizeInBytes();
    // Set static field: static System.Int32 kSizeInBytes
    static void _set_kSizeInBytes(int value);
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.KeyboardState/UnityEngine.InputSystem.LowLevel.<keys>e__FixedBuffer keys
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer& dyn_keys();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_Format()
    // Offset: 0xCC5250
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Format();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA3B344
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public System.Void .ctor(params UnityEngine.InputSystem.Key[] pressedKeys)
    // Offset: 0xA3B30C
    KeyboardState(::ArrayW<::UnityEngine::InputSystem::Key> pressedKeys);
    // public System.Void Set(UnityEngine.InputSystem.Key key, System.Boolean state)
    // Offset: 0xA3B314
    void Set(::UnityEngine::InputSystem::Key key, bool state);
    // public System.Void Press(UnityEngine.InputSystem.Key key)
    // Offset: 0xA3B324
    void Press(::UnityEngine::InputSystem::Key key);
    // public System.Void Release(UnityEngine.InputSystem.Key key)
    // Offset: 0xA3B334
    void Release(::UnityEngine::InputSystem::Key key);
  }; // UnityEngine.InputSystem.LowLevel.KeyboardState
  #pragma pack(pop)
  static check_size<sizeof(KeyboardState), 0 + sizeof(::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer)> __UnityEngine_InputSystem_LowLevel_KeyboardStateSizeCheck;
  static_assert(sizeof(KeyboardState) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::KeyboardState::$keys$e__FixedBuffer, "UnityEngine.InputSystem.LowLevel", "KeyboardState/<keys>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::KeyboardState::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::KeyboardState), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::KeyboardState::*)()>(&UnityEngine::InputSystem::LowLevel::KeyboardState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::KeyboardState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::KeyboardState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::KeyboardState::*)(::UnityEngine::InputSystem::Key, bool)>(&UnityEngine::InputSystem::LowLevel::KeyboardState::Set)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Key")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::KeyboardState), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, state});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::Press
// Il2CppName: Press
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::KeyboardState::*)(::UnityEngine::InputSystem::Key)>(&UnityEngine::InputSystem::LowLevel::KeyboardState::Press)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::KeyboardState), "Press", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::KeyboardState::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::KeyboardState::*)(::UnityEngine::InputSystem::Key)>(&UnityEngine::InputSystem::LowLevel::KeyboardState::Release)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Key")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::KeyboardState), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
