// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: PenButton
  struct PenButton;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: PenState
  struct PenState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::PenState, "UnityEngine.InputSystem.LowLevel", "PenState");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.PenState
  // [TokenAttribute] Offset: FFFFFFFF
  struct PenState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    public:
    // [InputControlAttribute] Offset: 0x95F924
    // public UnityEngine.Vector2 position
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F960
    // public UnityEngine.Vector2 delta
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2 delta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F99C
    // public UnityEngine.Vector2 tilt
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Vector2 tilt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F9F8
    // public System.Single pressure
    // Size: 0x4
    // Offset: 0x18
    float pressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InputControlAttribute] Offset: 0x95FA90
    // public System.Single twist
    // Size: 0x4
    // Offset: 0x1C
    float twist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // [InputControlAttribute] Offset: 0x95FAEC
    // public System.UInt16 buttons
    // Size: 0x2
    // Offset: 0x20
    uint16_t buttons;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 displayIndex
    // Size: 0x2
    // Offset: 0x22
    uint16_t displayIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: PenState
    constexpr PenState(::UnityEngine::Vector2 position_ = {}, ::UnityEngine::Vector2 delta_ = {}, ::UnityEngine::Vector2 tilt_ = {}, float pressure_ = {}, float twist_ = {}, uint16_t buttons_ = {}, uint16_t displayIndex_ = {}) noexcept : position{position_}, delta{delta_}, tilt{tilt_}, pressure{pressure_}, twist{twist_}, buttons{buttons_}, displayIndex{displayIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_position();
    // Get instance field reference: public UnityEngine.Vector2 delta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_delta();
    // Get instance field reference: public UnityEngine.Vector2 tilt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_tilt();
    // Get instance field reference: public System.Single pressure
    [[deprecated("Use field access instead!")]] float& dyn_pressure();
    // Get instance field reference: public System.Single twist
    [[deprecated("Use field access instead!")]] float& dyn_twist();
    // Get instance field reference: public System.UInt16 buttons
    [[deprecated("Use field access instead!")]] uint16_t& dyn_buttons();
    // Get instance field reference: private System.UInt16 displayIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_displayIndex();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_Format()
    // Offset: 0xCC62B4
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Format();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA3B458
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public UnityEngine.InputSystem.LowLevel.PenState WithButton(UnityEngine.InputSystem.PenButton button, System.Boolean state)
    // Offset: 0xA3B424
    ::UnityEngine::InputSystem::LowLevel::PenState WithButton(::UnityEngine::InputSystem::PenButton button, bool state);
  }; // UnityEngine.InputSystem.LowLevel.PenState
  #pragma pack(pop)
  static check_size<sizeof(PenState), 34 + sizeof(uint16_t)> __UnityEngine_InputSystem_LowLevel_PenStateSizeCheck;
  static_assert(sizeof(PenState) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::PenState::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::PenState::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::PenState), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::PenState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::PenState::*)()>(&UnityEngine::InputSystem::LowLevel::PenState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::PenState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::PenState::WithButton
// Il2CppName: WithButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::PenState (UnityEngine::InputSystem::LowLevel::PenState::*)(::UnityEngine::InputSystem::PenButton, bool)>(&UnityEngine::InputSystem::LowLevel::PenState::WithButton)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PenButton")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::PenState), "WithButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, state});
  }
};
