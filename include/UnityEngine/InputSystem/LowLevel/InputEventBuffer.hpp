// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEvent
  struct InputEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventBuffer
  struct InputEventBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputEventBuffer, "UnityEngine.InputSystem.LowLevel", "InputEventBuffer");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputEventBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputEventBuffer/*, public ::System::ValueType, public ::System::ICloneable, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputEventBuffer::Enumerator
    struct Enumerator;
    public:
    // private Unity.Collections.NativeArray`1<System.Byte> m_Buffer
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::Unity::Collections::NativeArray_1<uint8_t> m_Buffer;
    // private System.Int64 m_SizeInBytes
    // Size: 0x8
    // Offset: 0x10
    int64_t m_SizeInBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 m_EventCount
    // Size: 0x4
    // Offset: 0x18
    int m_EventCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_WeOwnTheBuffer
    // Size: 0x1
    // Offset: 0x1C
    bool m_WeOwnTheBuffer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: InputEventBuffer
    constexpr InputEventBuffer(::Unity::Collections::NativeArray_1<uint8_t> m_Buffer_ = {}, int64_t m_SizeInBytes_ = {}, int m_EventCount_ = {}, bool m_WeOwnTheBuffer_ = {}) noexcept : m_Buffer{m_Buffer_}, m_SizeInBytes{m_SizeInBytes_}, m_EventCount{m_EventCount_}, m_WeOwnTheBuffer{m_WeOwnTheBuffer_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>
    operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>*>(this);
    }
    // static field const value: static public System.Int64 BufferSizeUnknown
    static constexpr const int64_t BufferSizeUnknown = -1;
    // Get static field: static public System.Int64 BufferSizeUnknown
    static int64_t _get_BufferSizeUnknown();
    // Set static field: static public System.Int64 BufferSizeUnknown
    static void _set_BufferSizeUnknown(int64_t value);
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Byte> m_Buffer
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint8_t>& dyn_m_Buffer();
    // Get instance field reference: private System.Int64 m_SizeInBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_m_SizeInBytes();
    // Get instance field reference: private System.Int32 m_EventCount
    [[deprecated("Use field access instead!")]] int& dyn_m_EventCount();
    // Get instance field reference: private System.Boolean m_WeOwnTheBuffer
    [[deprecated("Use field access instead!")]] bool& dyn_m_WeOwnTheBuffer();
    // public System.Int32 get_eventCount()
    // Offset: 0xA562D0
    int get_eventCount();
    // public System.Int64 get_sizeInBytes()
    // Offset: 0xA562D8
    int64_t get_sizeInBytes();
    // public System.Int64 get_capacityInBytes()
    // Offset: 0xA562E0
    int64_t get_capacityInBytes();
    // public Unity.Collections.NativeArray`1<System.Byte> get_data()
    // Offset: 0xA562E8
    ::Unity::Collections::NativeArray_1<uint8_t> get_data();
    // public UnityEngine.InputSystem.LowLevel.InputEventPtr get_bufferPtr()
    // Offset: 0xA562F4
    ::UnityEngine::InputSystem::LowLevel::InputEventPtr get_bufferPtr();
    // public System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, System.Int32 eventCount, System.Int32 sizeInBytes, System.Int32 capacityInBytes)
    // Offset: 0xA562FC
    InputEventBuffer(::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr, int eventCount, int sizeInBytes, int capacityInBytes);
    // public System.Void .ctor(Unity.Collections.NativeArray`1<System.Byte> buffer, System.Int32 eventCount, System.Int32 sizeInBytes)
    // Offset: 0xA56304
    InputEventBuffer(::Unity::Collections::NativeArray_1<uint8_t> buffer, int eventCount, int sizeInBytes);
    // public System.Void AppendEvent(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, System.Int32 capacityIncrementInBytes)
    // Offset: 0xA5630C
    void AppendEvent(::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr, int capacityIncrementInBytes);
    // public UnityEngine.InputSystem.LowLevel.InputEvent* AllocateEvent(System.Int32 sizeInBytes, System.Int32 capacityIncrementInBytes)
    // Offset: 0xA56314
    ::UnityEngine::InputSystem::LowLevel::InputEvent* AllocateEvent(int sizeInBytes, int capacityIncrementInBytes);
    // public System.Boolean Contains(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr)
    // Offset: 0xA5631C
    bool Contains(::UnityEngine::InputSystem::LowLevel::InputEvent* eventPtr);
    // public System.Void Reset()
    // Offset: 0xA56324
    void Reset();
    // System.Void AdvanceToNextEvent(ref UnityEngine.InputSystem.LowLevel.InputEvent* currentReadPos, ref UnityEngine.InputSystem.LowLevel.InputEvent* currentWritePos, ref System.Int32 numEventsRetainedInBuffer, ref System.Int32 numRemainingEvents, System.Boolean leaveEventInBuffer)
    // Offset: 0xA5633C
    void AdvanceToNextEvent(ByRef<::UnityEngine::InputSystem::LowLevel::InputEvent*> currentReadPos, ByRef<::UnityEngine::InputSystem::LowLevel::InputEvent*> currentWritePos, ByRef<int> numEventsRetainedInBuffer, ByRef<int> numRemainingEvents, bool leaveEventInBuffer);
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.LowLevel.InputEventPtr> GetEnumerator()
    // Offset: 0xA56348
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xA56350
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void Dispose()
    // Offset: 0xA56358
    void Dispose();
    // public UnityEngine.InputSystem.LowLevel.InputEventBuffer Clone()
    // Offset: 0xA56360
    ::UnityEngine::InputSystem::LowLevel::InputEventBuffer Clone();
    // private System.Object System.ICloneable.Clone()
    // Offset: 0xA56368
    ::Il2CppObject* System_ICloneable_Clone();
  }; // UnityEngine.InputSystem.LowLevel.InputEventBuffer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_eventCount
// Il2CppName: get_eventCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_eventCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "get_eventCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_sizeInBytes
// Il2CppName: get_sizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_sizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "get_sizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_capacityInBytes
// Il2CppName: get_capacityInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_capacityInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "get_capacityInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint8_t> (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_bufferPtr
// Il2CppName: get_bufferPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventPtr (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::get_bufferPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "get_bufferPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::InputEventBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::InputEventBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::AppendEvent
// Il2CppName: AppendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)(::UnityEngine::InputSystem::LowLevel::InputEvent*, int)>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::AppendEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    static auto* capacityIncrementInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "AppendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr, capacityIncrementInBytes});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::AllocateEvent
// Il2CppName: AllocateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEvent* (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)(int, int)>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::AllocateEvent)> {
  static const MethodInfo* get() {
    static auto* sizeInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* capacityIncrementInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "AllocateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeInBytes, capacityIncrementInBytes});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)(::UnityEngine::InputSystem::LowLevel::InputEvent*)>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::Contains)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::AdvanceToNextEvent
// Il2CppName: AdvanceToNextEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)(ByRef<::UnityEngine::InputSystem::LowLevel::InputEvent*>, ByRef<::UnityEngine::InputSystem::LowLevel::InputEvent*>, ByRef<int>, ByRef<int>, bool)>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::AdvanceToNextEvent)> {
  static const MethodInfo* get() {
    static auto* currentReadPos = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->this_arg;
    static auto* currentWritePos = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEvent"))->this_arg;
    static auto* numEventsRetainedInBuffer = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numRemainingEvents = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* leaveEventInBuffer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "AdvanceToNextEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentReadPos, currentWritePos, numEventsRetainedInBuffer, numRemainingEvents, leaveEventInBuffer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputEventPtr>* (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventBuffer (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputEventBuffer::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::LowLevel::InputEventBuffer::*)()>(&UnityEngine::InputSystem::LowLevel::InputEventBuffer::System_ICloneable_Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputEventBuffer), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
