// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.JoystickState
#include "UnityEngine/InputSystem/LowLevel/JoystickState.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::JoystickState::Button, "UnityEngine.InputSystem.LowLevel", "JoystickState/Button");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button
  // [TokenAttribute] Offset: FFFFFFFF
  struct JoystickState::Button/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Button
    constexpr Button(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchUp
    static constexpr const int HatSwitchUp = 0;
    // Get static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchUp
    static ::UnityEngine::InputSystem::LowLevel::JoystickState::Button _get_HatSwitchUp();
    // Set static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchUp
    static void _set_HatSwitchUp(::UnityEngine::InputSystem::LowLevel::JoystickState::Button value);
    // static field const value: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchDown
    static constexpr const int HatSwitchDown = 1;
    // Get static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchDown
    static ::UnityEngine::InputSystem::LowLevel::JoystickState::Button _get_HatSwitchDown();
    // Set static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchDown
    static void _set_HatSwitchDown(::UnityEngine::InputSystem::LowLevel::JoystickState::Button value);
    // static field const value: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchLeft
    static constexpr const int HatSwitchLeft = 2;
    // Get static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchLeft
    static ::UnityEngine::InputSystem::LowLevel::JoystickState::Button _get_HatSwitchLeft();
    // Set static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchLeft
    static void _set_HatSwitchLeft(::UnityEngine::InputSystem::LowLevel::JoystickState::Button value);
    // static field const value: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchRight
    static constexpr const int HatSwitchRight = 3;
    // Get static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchRight
    static ::UnityEngine::InputSystem::LowLevel::JoystickState::Button _get_HatSwitchRight();
    // Set static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button HatSwitchRight
    static void _set_HatSwitchRight(::UnityEngine::InputSystem::LowLevel::JoystickState::Button value);
    // static field const value: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button Trigger
    static constexpr const int Trigger = 4;
    // Get static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button Trigger
    static ::UnityEngine::InputSystem::LowLevel::JoystickState::Button _get_Trigger();
    // Set static field: static public UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button Trigger
    static void _set_Trigger(::UnityEngine::InputSystem::LowLevel::JoystickState::Button value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.InputSystem.LowLevel.JoystickState/UnityEngine.InputSystem.LowLevel.Button
  #pragma pack(pop)
  static check_size<sizeof(JoystickState::Button), 0 + sizeof(int)> __UnityEngine_InputSystem_LowLevel_JoystickState_ButtonSizeCheck;
  static_assert(sizeof(JoystickState::Button) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
