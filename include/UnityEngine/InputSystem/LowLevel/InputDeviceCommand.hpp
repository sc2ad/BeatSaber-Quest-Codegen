// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
#include "UnityEngine/InputSystem/LowLevel/IInputDeviceCommandInfo.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputDeviceCommand
  struct InputDeviceCommand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputDeviceCommand, "UnityEngine.InputSystem.LowLevel", "InputDeviceCommand");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputDeviceCommand
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputDeviceCommand/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo*/ {
    public:
    public:
    // public UnityEngine.InputSystem.Utilities.FourCC type
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::Utilities::FourCC type;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::FourCC) == 0x4);
    // public System.Int32 sizeInBytes
    // Size: 0x4
    // Offset: 0x4
    int sizeInBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InputDeviceCommand
    constexpr InputDeviceCommand(::UnityEngine::InputSystem::Utilities::FourCC type_ = {}, int sizeInBytes_ = {}) noexcept : type{type_}, sizeInBytes{sizeInBytes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo*>(this);
    }
    // static field const value: static System.Int32 kBaseCommandSize
    static constexpr const int kBaseCommandSize = 8;
    // Get static field: static System.Int32 kBaseCommandSize
    static int _get_kBaseCommandSize();
    // Set static field: static System.Int32 kBaseCommandSize
    static void _set_kBaseCommandSize(int value);
    // static field const value: static public System.Int32 BaseCommandSize
    static constexpr const int BaseCommandSize = 8;
    // Get static field: static public System.Int32 BaseCommandSize
    static int _get_BaseCommandSize();
    // Set static field: static public System.Int32 BaseCommandSize
    static void _set_BaseCommandSize(int value);
    // static field const value: static public System.Int64 GenericFailure
    static constexpr const int64_t GenericFailure = -1;
    // Get static field: static public System.Int64 GenericFailure
    static int64_t _get_GenericFailure();
    // Set static field: static public System.Int64 GenericFailure
    static void _set_GenericFailure(int64_t value);
    // static field const value: static public System.Int64 GenericSuccess
    static constexpr const int64_t GenericSuccess = 1;
    // Get static field: static public System.Int64 GenericSuccess
    static int64_t _get_GenericSuccess();
    // Set static field: static public System.Int64 GenericSuccess
    static void _set_GenericSuccess(int64_t value);
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.FourCC type
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::FourCC& dyn_type();
    // Get instance field reference: public System.Int32 sizeInBytes
    [[deprecated("Use field access instead!")]] int& dyn_sizeInBytes();
    // public System.Int32 get_payloadSizeInBytes()
    // Offset: 0xA56100
    int get_payloadSizeInBytes();
    // public System.Void* get_payloadPtr()
    // Offset: 0xA5610C
    void* get_payloadPtr();
    // public UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()
    // Offset: 0xA5611C
    ::UnityEngine::InputSystem::Utilities::FourCC get_typeStatic();
    // public System.Void .ctor(UnityEngine.InputSystem.Utilities.FourCC type, System.Int32 sizeInBytes)
    // Offset: 0xA56114
    // ABORTED: conflicts with another method.  InputDeviceCommand(::UnityEngine::InputSystem::Utilities::FourCC type, int sizeInBytes);
    // static public Unity.Collections.NativeArray`1<System.Byte> AllocateNative(UnityEngine.InputSystem.Utilities.FourCC type, System.Int32 payloadSize)
    // Offset: 0x11A5534
    static ::Unity::Collections::NativeArray_1<uint8_t> AllocateNative(::UnityEngine::InputSystem::Utilities::FourCC type, int payloadSize);
  }; // UnityEngine.InputSystem.LowLevel.InputDeviceCommand
  #pragma pack(pop)
  static check_size<sizeof(InputDeviceCommand), 4 + sizeof(int)> __UnityEngine_InputSystem_LowLevel_InputDeviceCommandSizeCheck;
  static_assert(sizeof(InputDeviceCommand) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_payloadSizeInBytes
// Il2CppName: get_payloadSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputDeviceCommand::*)()>(&UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_payloadSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputDeviceCommand), "get_payloadSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_payloadPtr
// Il2CppName: get_payloadPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (UnityEngine::InputSystem::LowLevel::InputDeviceCommand::*)()>(&UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_payloadPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputDeviceCommand), "get_payloadPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_typeStatic
// Il2CppName: get_typeStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::InputDeviceCommand::*)()>(&UnityEngine::InputSystem::LowLevel::InputDeviceCommand::get_typeStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputDeviceCommand), "get_typeStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputDeviceCommand::InputDeviceCommand
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputDeviceCommand::AllocateNative
// Il2CppName: AllocateNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint8_t> (*)(::UnityEngine::InputSystem::Utilities::FourCC, int)>(&UnityEngine::InputSystem::LowLevel::InputDeviceCommand::AllocateNative)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "FourCC")->byval_arg;
    static auto* payloadSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputDeviceCommand), "AllocateNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, payloadSize});
  }
};
