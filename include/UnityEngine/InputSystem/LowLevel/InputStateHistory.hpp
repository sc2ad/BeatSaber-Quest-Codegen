// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
#include "UnityEngine/InputSystem/LowLevel/IInputStateChangeMonitor.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputUpdateType
#include "UnityEngine/InputSystem/LowLevel/InputUpdateType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Skipping declaration: Record because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputStateHistory
  class InputStateHistory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::LowLevel::InputStateHistory);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputStateHistory*, "UnityEngine.InputSystem.LowLevel", "InputStateHistory");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputStateHistory
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 958CE4
  class InputStateHistory : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>, public ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Enumerator
    struct Enumerator;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader
    struct RecordHeader;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record
    struct Record;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record
    // [TokenAttribute] Offset: FFFFFFFF
    struct Record/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*/ {
      public:
      public:
      // private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory m_Owner
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory* m_Owner;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory*) == 0x8);
      // private readonly System.Int32 m_IndexPlusOne
      // Size: 0x4
      // Offset: 0x8
      int m_IndexPlusOne;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.UInt32 m_Version
      // Size: 0x4
      // Offset: 0xC
      uint m_Version;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: Record
      constexpr Record(::UnityEngine::InputSystem::LowLevel::InputStateHistory* m_Owner_ = {}, int m_IndexPlusOne_ = {}, uint m_Version_ = {}) noexcept : m_Owner{m_Owner_}, m_IndexPlusOne{m_IndexPlusOne_}, m_Version{m_Version_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>
      operator ::System::IEquatable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*>(this);
      }
      // Get instance field reference: private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory m_Owner
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory*& dyn_m_Owner();
      // Get instance field reference: private readonly System.Int32 m_IndexPlusOne
      [[deprecated("Use field access instead!")]] int& dyn_m_IndexPlusOne();
      // Get instance field reference: private System.UInt32 m_Version
      [[deprecated("Use field access instead!")]] uint& dyn_m_Version();
      // UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* get_header()
      // Offset: 0xA569BC
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* get_header();
      // System.Int32 get_recordIndex()
      // Offset: 0xA569C4
      int get_recordIndex();
      // System.UInt32 get_version()
      // Offset: 0xA569D0
      uint get_version();
      // public System.Boolean get_valid()
      // Offset: 0xA569D8
      bool get_valid();
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory get_owner()
      // Offset: 0xA569E0
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory* get_owner();
      // public System.Int32 get_index()
      // Offset: 0xA569E8
      int get_index();
      // public System.Double get_time()
      // Offset: 0xA569F0
      double get_time();
      // public UnityEngine.InputSystem.InputControl get_control()
      // Offset: 0xA569F8
      ::UnityEngine::InputSystem::InputControl* get_control();
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record get_next()
      // Offset: 0xA56A00
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record get_next();
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record get_previous()
      // Offset: 0xA56A08
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record get_previous();
      // System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory owner, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* header)
      // Offset: 0xA56A10
      Record(::UnityEngine::InputSystem::LowLevel::InputStateHistory* owner, int index, ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* header);
      // public TValue ReadValue()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<class TValue>
      TValue ReadValue() {
        static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record::ReadValue");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{})));
        static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method);
      }
      // public System.Object ReadValueAsObject()
      // Offset: 0xA56A38
      ::Il2CppObject* ReadValueAsObject();
      // public System.Void* GetUnsafeMemoryPtr()
      // Offset: 0xA56A40
      void* GetUnsafeMemoryPtr();
      // public System.Void* GetUnsafeExtraMemoryPtr()
      // Offset: 0xA56A48
      void* GetUnsafeExtraMemoryPtr();
      // public System.Void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record record)
      // Offset: 0xA56A50
      void CopyFrom(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record record);
      // System.Void CheckValid()
      // Offset: 0xA56A58
      void CheckValid();
      // public System.Boolean Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record other)
      // Offset: 0xA56A60
      bool Equals(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record other);
      // public override System.Boolean Equals(System.Object obj)
      // Offset: 0xA56A94
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object obj)
      bool Equals(::Il2CppObject* obj);
      // public override System.Int32 GetHashCode()
      // Offset: 0xA56A9C
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
      // public override System.String ToString()
      // Offset: 0xA56AF0
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record
    #pragma pack(pop)
    static check_size<sizeof(InputStateHistory::Record), 12 + sizeof(uint)> __UnityEngine_InputSystem_LowLevel_InputStateHistory_RecordSizeCheck;
    static_assert(sizeof(InputStateHistory::Record) == 0x10);
    public:
    // private System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record> <onRecordAdded>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* onRecordAdded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*) == 0x8);
    // private System.Func`4<UnityEngine.InputSystem.InputControl,System.Double,UnityEngine.InputSystem.LowLevel.InputEventPtr,System.Boolean> <onShouldRecordStateChange>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>* onShouldRecordStateChange;
    // Field size check
    static_assert(sizeof(::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>*) == 0x8);
    // private UnityEngine.InputSystem.InputControl[] m_Controls
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> m_Controls;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // private System.Int32 m_ControlCount
    // Size: 0x4
    // Offset: 0x28
    int m_ControlCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Unity.Collections.NativeArray`1<System.Byte> m_RecordBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::Unity::Collections::NativeArray_1<uint8_t> m_RecordBuffer;
    // private System.Int32 m_StateSizeInBytes
    // Size: 0x4
    // Offset: 0x40
    int m_StateSizeInBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_RecordCount
    // Size: 0x4
    // Offset: 0x44
    int m_RecordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_HistoryDepth
    // Size: 0x4
    // Offset: 0x48
    int m_HistoryDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ExtraMemoryPerRecord
    // Size: 0x4
    // Offset: 0x4C
    int m_ExtraMemoryPerRecord;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_HeadIndex
    // Size: 0x4
    // Offset: 0x50
    int m_HeadIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.UInt32 m_CurrentVersion
    // Size: 0x4
    // Offset: 0x54
    uint m_CurrentVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Nullable`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> m_UpdateMask
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::System::Nullable_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType> m_UpdateMask;
    // readonly System.Boolean m_AddNewControls
    // Size: 0x1
    // Offset: 0x60
    bool m_AddNewControls;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>
    operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateChangeMonitor*>(this);
    }
    // static field const value: static private System.Int32 kDefaultHistorySize
    static constexpr const int kDefaultHistorySize = 128;
    // Get static field: static private System.Int32 kDefaultHistorySize
    static int _get_kDefaultHistorySize();
    // Set static field: static private System.Int32 kDefaultHistorySize
    static void _set_kDefaultHistorySize(int value);
    // Get instance field reference: private System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record> <onRecordAdded>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*& dyn_$onRecordAdded$k__BackingField();
    // Get instance field reference: private System.Func`4<UnityEngine.InputSystem.InputControl,System.Double,UnityEngine.InputSystem.LowLevel.InputEventPtr,System.Boolean> <onShouldRecordStateChange>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>*& dyn_$onShouldRecordStateChange$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.InputControl[] m_Controls
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_m_Controls();
    // Get instance field reference: private System.Int32 m_ControlCount
    [[deprecated("Use field access instead!")]] int& dyn_m_ControlCount();
    // Get instance field reference: private Unity.Collections.NativeArray`1<System.Byte> m_RecordBuffer
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<uint8_t>& dyn_m_RecordBuffer();
    // Get instance field reference: private System.Int32 m_StateSizeInBytes
    [[deprecated("Use field access instead!")]] int& dyn_m_StateSizeInBytes();
    // Get instance field reference: private System.Int32 m_RecordCount
    [[deprecated("Use field access instead!")]] int& dyn_m_RecordCount();
    // Get instance field reference: private System.Int32 m_HistoryDepth
    [[deprecated("Use field access instead!")]] int& dyn_m_HistoryDepth();
    // Get instance field reference: private System.Int32 m_ExtraMemoryPerRecord
    [[deprecated("Use field access instead!")]] int& dyn_m_ExtraMemoryPerRecord();
    // Get instance field reference: System.Int32 m_HeadIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_HeadIndex();
    // Get instance field reference: System.UInt32 m_CurrentVersion
    [[deprecated("Use field access instead!")]] uint& dyn_m_CurrentVersion();
    // Get instance field reference: private System.Nullable`1<UnityEngine.InputSystem.LowLevel.InputUpdateType> m_UpdateMask
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::InputSystem::LowLevel::InputUpdateType>& dyn_m_UpdateMask();
    // Get instance field reference: readonly System.Boolean m_AddNewControls
    [[deprecated("Use field access instead!")]] bool& dyn_m_AddNewControls();
    // public System.Int32 get_Count()
    // Offset: 0x11AFA18
    int get_Count();
    // public System.UInt32 get_version()
    // Offset: 0x11AFA20
    uint get_version();
    // public System.Int32 get_historyDepth()
    // Offset: 0x11AFA28
    int get_historyDepth();
    // public System.Void set_historyDepth(System.Int32 value)
    // Offset: 0x11AFA30
    void set_historyDepth(int value);
    // public System.Int32 get_extraMemoryPerRecord()
    // Offset: 0x11AFB04
    int get_extraMemoryPerRecord();
    // public System.Void set_extraMemoryPerRecord(System.Int32 value)
    // Offset: 0x11AFB0C
    void set_extraMemoryPerRecord(int value);
    // public UnityEngine.InputSystem.LowLevel.InputUpdateType get_updateMask()
    // Offset: 0x11AFBE0
    ::UnityEngine::InputSystem::LowLevel::InputUpdateType get_updateMask();
    // public System.Void set_updateMask(UnityEngine.InputSystem.LowLevel.InputUpdateType value)
    // Offset: 0x11AFC68
    void set_updateMask(::UnityEngine::InputSystem::LowLevel::InputUpdateType value);
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControl> get_controls()
    // Offset: 0x11AFD24
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControl*> get_controls();
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record get_Item(System.Int32 index)
    // Offset: 0x11AFD94
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record get_Item(int index);
    // public System.Void set_Item(System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record value)
    // Offset: 0x11B0028
    void set_Item(int index, ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record value);
    // public System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record> get_onRecordAdded()
    // Offset: 0x11B04F8
    ::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* get_onRecordAdded();
    // public System.Void set_onRecordAdded(System.Action`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record> value)
    // Offset: 0x11B0500
    void set_onRecordAdded(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* value);
    // public System.Func`4<UnityEngine.InputSystem.InputControl,System.Double,UnityEngine.InputSystem.LowLevel.InputEventPtr,System.Boolean> get_onShouldRecordStateChange()
    // Offset: 0x11B0508
    ::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>* get_onShouldRecordStateChange();
    // public System.Void set_onShouldRecordStateChange(System.Func`4<UnityEngine.InputSystem.InputControl,System.Double,UnityEngine.InputSystem.LowLevel.InputEventPtr,System.Boolean> value)
    // Offset: 0x11B0510
    void set_onShouldRecordStateChange(::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>* value);
    // System.Int32 get_bytesPerRecord()
    // Offset: 0x11B16E4
    int get_bytesPerRecord();
    // public System.Void .ctor(System.Int32 maxStateSizeInBytes)
    // Offset: 0x11B0518
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory* New_ctor(int maxStateSizeInBytes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory*, creationType>(maxStateSizeInBytes)));
    }
    // public System.Void .ctor(System.String path)
    // Offset: 0x11B05E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory*, creationType>(path)));
    }
    // public System.Void .ctor(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x11B070C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory* New_ctor(::UnityEngine::InputSystem::InputControl* control) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory*, creationType>(control)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputControl> controls)
    // Offset: 0x11B0810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory* New_ctor(::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControl*>* controls) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory*, creationType>(controls)));
    }
    // public System.Void Clear()
    // Offset: 0x11B097C
    void Clear();
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record record)
    // Offset: 0x11B0990
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record AddRecord(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record record);
    // public System.Void StartRecording()
    // Offset: 0x11B0B08
    void StartRecording();
    // public System.Void StopRecording()
    // Offset: 0x11B0D24
    void StopRecording();
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record RecordStateChange(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x11B0F40
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record RecordStateChange(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record RecordStateChange(UnityEngine.InputSystem.InputControl control, System.Void* statePtr, System.Double time)
    // Offset: 0x11B10B8
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record RecordStateChange(::UnityEngine::InputSystem::InputControl* control, void* statePtr, double time);
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record> GetEnumerator()
    // Offset: 0x11B130C
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x11B1384
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void Dispose()
    // Offset: 0x11B0904
    void Dispose();
    // protected System.Void Destroy()
    // Offset: 0x11B1388
    void Destroy();
    // private System.Void Allocate()
    // Offset: 0x11B13FC
    void Allocate();
    // protected System.Int32 RecordIndexToUserIndex(System.Int32 index)
    // Offset: 0x11B1718
    int RecordIndexToUserIndex(int index);
    // protected System.Int32 UserIndexToRecordIndex(System.Int32 index)
    // Offset: 0x11AFEC0
    int UserIndexToRecordIndex(int index);
    // protected UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* GetRecord(System.Int32 index)
    // Offset: 0x11AFED8
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* GetRecord(int index);
    // protected UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* AllocateRecord(out System.Int32 index)
    // Offset: 0x11B0A08
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* AllocateRecord(ByRef<int> index);
    // protected TValue ReadValue(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ReadValue(::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* data) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method, data);
    }
    // protected System.Object ReadValueAsObject(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* data)
    // Offset: 0x11B173C
    ::Il2CppObject* ReadValueAsObject(::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* data);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Int64 monitorIndex)
    // Offset: 0x11B183C
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged(::UnityEngine::InputSystem::InputControl* control, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, int64_t monitorIndex);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired(UnityEngine.InputSystem.InputControl control, System.Double time, System.Int64 monitorIndex, System.Int32 timerIndex)
    // Offset: 0x11B1954
    void UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired(::UnityEngine::InputSystem::InputControl* control, double time, int64_t monitorIndex, int timerIndex);
    // protected override System.Void Finalize()
    // Offset: 0x11B089C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.InputSystem.LowLevel.InputStateHistory
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record, "UnityEngine.InputSystem.LowLevel", "InputStateHistory/Record");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_historyDepth
// Il2CppName: get_historyDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_historyDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_historyDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_historyDepth
// Il2CppName: set_historyDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_historyDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_historyDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_extraMemoryPerRecord
// Il2CppName: get_extraMemoryPerRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_extraMemoryPerRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_extraMemoryPerRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_extraMemoryPerRecord
// Il2CppName: set_extraMemoryPerRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_extraMemoryPerRecord)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_extraMemoryPerRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_updateMask
// Il2CppName: get_updateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputUpdateType (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_updateMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_updateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_updateMask
// Il2CppName: set_updateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::LowLevel::InputUpdateType)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_updateMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputUpdateType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_updateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_controls
// Il2CppName: get_controls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControl*> (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_controls)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_controls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int, ::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateHistory/Record")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_onRecordAdded
// Il2CppName: get_onRecordAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_onRecordAdded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_onRecordAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_onRecordAdded
// Il2CppName: set_onRecordAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::System::Action_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>*)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_onRecordAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateHistory/Record")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_onRecordAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_onShouldRecordStateChange
// Il2CppName: get_onShouldRecordStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_onShouldRecordStateChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_onShouldRecordStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::set_onShouldRecordStateChange
// Il2CppName: set_onShouldRecordStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::System::Func_4<::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, bool>*)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::set_onShouldRecordStateChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl"), ::il2cpp_utils::GetClassFromName("System", "Double"), ::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "set_onShouldRecordStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::get_bytesPerRecord
// Il2CppName: get_bytesPerRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::get_bytesPerRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "get_bytesPerRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::AddRecord
// Il2CppName: AddRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::AddRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateHistory/Record")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "AddRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::StartRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordStateChange
// Il2CppName: RecordStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordStateChange)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "RecordStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordStateChange
// Il2CppName: RecordStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::InputControl*, void*, double)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordStateChange)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "RecordStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr, time});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record>* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::Allocate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordIndexToUserIndex
// Il2CppName: RecordIndexToUserIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordIndexToUserIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "RecordIndexToUserIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::UserIndexToRecordIndex
// Il2CppName: UserIndexToRecordIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::UserIndexToRecordIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "UserIndexToRecordIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::GetRecord
// Il2CppName: GetRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::GetRecord)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "GetRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::AllocateRecord
// Il2CppName: AllocateRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(ByRef<int>)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::AllocateRecord)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "AllocateRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::ReadValueAsObject
// Il2CppName: ReadValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader*)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::ReadValueAsObject)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateHistory/RecordHeader"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "ReadValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, int64_t)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyControlStateChanged)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyControlStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, eventPtr, monitorIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)(::UnityEngine::InputSystem::InputControl*, double, int64_t, int)>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::UnityEngine_InputSystem_LowLevel_IInputStateChangeMonitor_NotifyTimerExpired)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* monitorIndex = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* timerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor.NotifyTimerExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, monitorIndex, timerIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputStateHistory::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::LowLevel::InputStateHistory::*)()>(&UnityEngine::InputSystem::LowLevel::InputStateHistory::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::InputStateHistory*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
