// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputEventTypeInfo.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEvent
#include "UnityEngine/InputSystem/LowLevel/InputEvent.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventPtr
  struct InputEventPtr;
}
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Forward declaring type: NativeArray`1<T>
  template<typename T>
  struct NativeArray_1;
  // Forward declaring type: Allocator
  struct Allocator;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: StateEvent
  struct StateEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::StateEvent, "UnityEngine.InputSystem.LowLevel", "StateEvent");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x19
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.StateEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct StateEvent/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer
    struct $stateData$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.StateEvent/UnityEngine.InputSystem.LowLevel.<stateData>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $stateData$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $stateData$e__FixedBuffer
      constexpr $stateData$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.LowLevel.StateEvent/UnityEngine.InputSystem.LowLevel.<stateData>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(StateEvent::$stateData$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_InputSystem_LowLevel_StateEvent_$stateData$e__FixedBufferSizeCheck;
    static_assert(sizeof(StateEvent::$stateData$e__FixedBuffer) == 0x1);
    public:
    // public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent
    // Size: 0x14
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::InputEvent baseEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent) == 0x14);
    // public UnityEngine.InputSystem.Utilities.FourCC stateFormat
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::InputSystem::Utilities::FourCC stateFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::FourCC) == 0x4);
    // [FixedBufferAttribute] Offset: 0x960ADC
    // UnityEngine.InputSystem.LowLevel.StateEvent/UnityEngine.InputSystem.LowLevel.<stateData>e__FixedBuffer stateData
    // Size: 0x1
    // Offset: 0x18
    ::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer stateData;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: StateEvent
    constexpr StateEvent(::UnityEngine::InputSystem::LowLevel::InputEvent baseEvent_ = {}, ::UnityEngine::InputSystem::Utilities::FourCC stateFormat_ = {}, ::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer stateData_ = {}) noexcept : baseEvent{baseEvent_}, stateFormat{stateFormat_}, stateData{stateData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo*>(this);
    }
    // static field const value: static public System.Int32 Type
    static constexpr const int Type = 1398030676;
    // Get static field: static public System.Int32 Type
    static int _get_Type();
    // Set static field: static public System.Int32 Type
    static void _set_Type(int value);
    // static field const value: static System.Int32 kStateDataSizeToSubtract
    static constexpr const int kStateDataSizeToSubtract = 1;
    // Get static field: static System.Int32 kStateDataSizeToSubtract
    static int _get_kStateDataSizeToSubtract();
    // Set static field: static System.Int32 kStateDataSizeToSubtract
    static void _set_kStateDataSizeToSubtract(int value);
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent& dyn_baseEvent();
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.FourCC stateFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::FourCC& dyn_stateFormat();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.StateEvent/UnityEngine.InputSystem.LowLevel.<stateData>e__FixedBuffer stateData
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer& dyn_stateData();
    // public System.UInt32 get_stateSizeInBytes()
    // Offset: 0xA3B89C
    uint get_stateSizeInBytes();
    // public System.Void* get_state()
    // Offset: 0xA3B8BC
    void* get_state();
    // public UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()
    // Offset: 0xA3B8CC
    ::UnityEngine::InputSystem::Utilities::FourCC get_typeStatic();
    // public UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr()
    // Offset: 0xA3B8C4
    ::UnityEngine::InputSystem::LowLevel::InputEventPtr ToEventPtr();
    // static public System.Int32 GetEventSizeWithPayload()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TState>
    static int GetEventSizeWithPayload() {
      static_assert(std::is_convertible_v<TState, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::StateEvent::GetEventSizeWithPayload");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.LowLevel", "StateEvent", "GetEventSizeWithPayload", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static public UnityEngine.InputSystem.LowLevel.StateEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr)
    // Offset: 0xCC7150
    static ::UnityEngine::InputSystem::LowLevel::StateEvent* From(::UnityEngine::InputSystem::LowLevel::InputEventPtr ptr);
    // static public Unity.Collections.NativeArray`1<System.Byte> From(UnityEngine.InputSystem.InputDevice device, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator)
    // Offset: 0xCC7280
    static ::Unity::Collections::NativeArray_1<uint8_t> From(::UnityEngine::InputSystem::InputDevice* device, ByRef<::UnityEngine::InputSystem::LowLevel::InputEventPtr> eventPtr, ::Unity::Collections::Allocator allocator);
  }; // UnityEngine.InputSystem.LowLevel.StateEvent
  #pragma pack(pop)
  static check_size<sizeof(StateEvent), 24 + sizeof(::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer)> __UnityEngine_InputSystem_LowLevel_StateEventSizeCheck;
  static_assert(sizeof(StateEvent) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::StateEvent::$stateData$e__FixedBuffer, "UnityEngine.InputSystem.LowLevel", "StateEvent/<stateData>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::get_stateSizeInBytes
// Il2CppName: get_stateSizeInBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::LowLevel::StateEvent::*)()>(&UnityEngine::InputSystem::LowLevel::StateEvent::get_stateSizeInBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "get_stateSizeInBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (UnityEngine::InputSystem::LowLevel::StateEvent::*)()>(&UnityEngine::InputSystem::LowLevel::StateEvent::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::get_typeStatic
// Il2CppName: get_typeStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::StateEvent::*)()>(&UnityEngine::InputSystem::LowLevel::StateEvent::get_typeStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "get_typeStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::ToEventPtr
// Il2CppName: ToEventPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventPtr (UnityEngine::InputSystem::LowLevel::StateEvent::*)()>(&UnityEngine::InputSystem::LowLevel::StateEvent::ToEventPtr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "ToEventPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::GetEventSizeWithPayload
// Il2CppName: GetEventSizeWithPayload
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::StateEvent* (*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::LowLevel::StateEvent::From)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::StateEvent::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Unity::Collections::NativeArray_1<uint8_t> (*)(::UnityEngine::InputSystem::InputDevice*, ByRef<::UnityEngine::InputSystem::LowLevel::InputEventPtr>, ::Unity::Collections::Allocator)>(&UnityEngine::InputSystem::LowLevel::StateEvent::From)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->this_arg;
    static auto* allocator = &::il2cpp_utils::GetClassFromName("Unity.Collections", "Allocator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::StateEvent), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, eventPtr, allocator});
  }
};
