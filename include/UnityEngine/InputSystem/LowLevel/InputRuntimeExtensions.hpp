// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: IInputDeviceCommandInfo
  class IInputDeviceCommandInfo;
  // Forward declaring type: IInputRuntime
  class IInputRuntime;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputRuntimeExtensions
  class InputRuntimeExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::LowLevel::InputRuntimeExtensions);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::InputRuntimeExtensions*, "UnityEngine.InputSystem.LowLevel", "InputRuntimeExtensions");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputRuntimeExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class InputRuntimeExtensions : public ::Il2CppObject {
    public:
    // static public System.Int64 DeviceCommand(UnityEngine.InputSystem.LowLevel.IInputRuntime runtime, System.Int32 deviceId, ref TCommand command)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TCommand>
    static int64_t DeviceCommand(::UnityEngine::InputSystem::LowLevel::IInputRuntime* runtime, int deviceId, ByRef<TCommand> command) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TCommand>, ::UnityEngine::InputSystem::LowLevel::IInputDeviceCommandInfo> && std::is_convertible_v<TCommand, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputRuntimeExtensions::DeviceCommand");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.LowLevel", "InputRuntimeExtensions", "DeviceCommand", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(runtime), ::il2cpp_utils::ExtractType(deviceId), ::il2cpp_utils::ExtractType(command)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCommand>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, runtime, deviceId, byref(command));
    }
  }; // UnityEngine.InputSystem.LowLevel.InputRuntimeExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::InputRuntimeExtensions::DeviceCommand
// Il2CppName: DeviceCommand
// Cannot write MetadataGetter for generic methods!
