// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputEventTypeInfo.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEvent
#include "UnityEngine/InputSystem/LowLevel/InputEvent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventPtr
  struct InputEventPtr;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: TextEvent
  struct TextEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::TextEvent, "UnityEngine.InputSystem.LowLevel", "TextEvent");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.TextEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct TextEvent/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo*/ {
    public:
    public:
    // public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent
    // Size: 0x14
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::InputEvent baseEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputEvent) == 0x14);
    // public System.Int32 character
    // Size: 0x4
    // Offset: 0x14
    int character;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TextEvent
    constexpr TextEvent(::UnityEngine::InputSystem::LowLevel::InputEvent baseEvent_ = {}, int character_ = {}) noexcept : baseEvent{baseEvent_}, character{character_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputEventTypeInfo*>(this);
    }
    // static field const value: static public System.Int32 Type
    static constexpr const int Type = 1413830740;
    // Get static field: static public System.Int32 Type
    static int _get_Type();
    // Set static field: static public System.Int32 Type
    static void _set_Type(int value);
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEvent& dyn_baseEvent();
    // Get instance field reference: public System.Int32 character
    [[deprecated("Use field access instead!")]] int& dyn_character();
    // public UnityEngine.InputSystem.Utilities.FourCC get_typeStatic()
    // Offset: 0xA3B8F0
    ::UnityEngine::InputSystem::Utilities::FourCC get_typeStatic();
    // static public UnityEngine.InputSystem.LowLevel.TextEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xCC753C
    static ::UnityEngine::InputSystem::LowLevel::TextEvent* From(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // static public UnityEngine.InputSystem.LowLevel.TextEvent Create(System.Int32 deviceId, System.Char character, System.Double time)
    // Offset: 0xCC766C
    static ::UnityEngine::InputSystem::LowLevel::TextEvent Create(int deviceId, ::Il2CppChar character, double time);
    // static public UnityEngine.InputSystem.LowLevel.TextEvent Create(System.Int32 deviceId, System.Int32 character, System.Double time)
    // Offset: 0xCC76F4
    static ::UnityEngine::InputSystem::LowLevel::TextEvent Create(int deviceId, int character, double time);
  }; // UnityEngine.InputSystem.LowLevel.TextEvent
  #pragma pack(pop)
  static check_size<sizeof(TextEvent), 20 + sizeof(int)> __UnityEngine_InputSystem_LowLevel_TextEventSizeCheck;
  static_assert(sizeof(TextEvent) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TextEvent::get_typeStatic
// Il2CppName: get_typeStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::TextEvent::*)()>(&UnityEngine::InputSystem::LowLevel::TextEvent::get_typeStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TextEvent), "get_typeStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TextEvent::From
// Il2CppName: From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TextEvent* (*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::LowLevel::TextEvent::From)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TextEvent), "From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TextEvent::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TextEvent (*)(int, ::Il2CppChar, double)>(&UnityEngine::InputSystem::LowLevel::TextEvent::Create)> {
  static const MethodInfo* get() {
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TextEvent), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceId, character, time});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::TextEvent::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TextEvent (*)(int, int, double)>(&UnityEngine::InputSystem::LowLevel::TextEvent::Create)> {
  static const MethodInfo* get() {
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::TextEvent), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceId, character, time});
  }
};
