// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputStateHistory
#include "UnityEngine/InputSystem/LowLevel/InputStateHistory.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Skipping declaration: Enumerator because it is already included!
  // Skipping declaration: Record because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl`1<TValue>
  template<typename TValue>
  class InputControl_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputStateHistory`1<TValue>
  template<typename TValue>
  class InputStateHistory_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1, "UnityEngine.InputSystem.LowLevel", "InputStateHistory`1");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 958D1C
  template<typename TValue>
  class InputStateHistory_1 : public ::UnityEngine::InputSystem::LowLevel::InputStateHistory/*, public ::System::Collections::Generic::IReadOnlyList_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator<TValue>
    struct Enumerator;
    // Nested type: ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record<TValue>
    struct Record;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*/ {
      public:
      using declaring_type = InputStateHistory_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> m_History
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* m_History;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*) == 0x8);
      // private System.Int32 m_Index
      // Size: 0x4
      // Offset: 0x0
      int m_Index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* m_History_ = {}, int m_Index_ = {}) noexcept : m_History{m_History_}, m_Index{m_Index_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>
      operator ::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> m_History
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*& dyn_m_History() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::dyn_m_History");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_History"))->offset;
        return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 m_Index
      [[deprecated("Use field access instead!")]] int& dyn_m_Index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::dyn_m_Index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> history)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Enumerator(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* history) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(history)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, history);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Enumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Enumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Enumerator
    // Could not write size check! Type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Enumerator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record
    // [TokenAttribute] Offset: FFFFFFFF
    struct Record : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::IEquatable_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*/ {
      public:
      using declaring_type = InputStateHistory_1<TValue>*;
      static constexpr std::string_view NESTED_NAME = "Record";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> m_Owner
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* m_Owner;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*) == 0x8);
      // private readonly System.Int32 m_IndexPlusOne
      // Size: 0x4
      // Offset: 0x0
      int m_IndexPlusOne;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.UInt32 m_Version
      // Size: 0x4
      // Offset: 0x0
      uint m_Version;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: Record
      constexpr Record(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* m_Owner_ = {}, int m_IndexPlusOne_ = {}, uint m_Version_ = {}) noexcept : m_Owner{m_Owner_}, m_IndexPlusOne{m_IndexPlusOne_}, m_Version{m_Version_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>
      operator ::System::IEquatable_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> m_Owner
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*& dyn_m_Owner() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::dyn_m_Owner");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Owner"))->offset;
        return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int32 m_IndexPlusOne
      [[deprecated("Use field access instead!")]] int& dyn_m_IndexPlusOne() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::dyn_m_IndexPlusOne");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IndexPlusOne"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.UInt32 m_Version
      [[deprecated("Use field access instead!")]] uint& dyn_m_Version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::dyn_m_Version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Version"))->offset;
        return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* get_header()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* get_header() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_header");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_header", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader*, false>(this, ___internal__method);
      }
      // System.Int32 get_recordIndex()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_recordIndex() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_recordIndex");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_recordIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public System.Boolean get_valid()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool get_valid() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_valid");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_valid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> get_owner()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* get_owner() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_owner");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_owner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*, false>(this, ___internal__method);
      }
      // public System.Int32 get_index()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_index");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public System.Double get_time()
      // Offset: 0xFFFFFFFFFFFFFFFF
      double get_time() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_time");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
      }
      // public UnityEngine.InputSystem.InputControl`1<TValue> get_control()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::UnityEngine::InputSystem::InputControl_1<TValue>* get_control() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_control");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_control", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputControl_1<TValue>*, false>(this, ___internal__method);
      }
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> get_next()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record get_next() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_next");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method);
      }
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> get_previous()
      // Offset: 0xFFFFFFFFFFFFFFFF
      typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record get_previous() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::get_previous");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_previous", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method);
      }
      // System.Void .ctor(UnityEngine.InputSystem.LowLevel.InputStateHistory`1<TValue> owner, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.RecordHeader* header)
      // Offset: 0xFFFFFFFFFFFFFFFF
      Record(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>* owner, int index, ::UnityEngine::InputSystem::LowLevel::InputStateHistory::RecordHeader* header) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(header)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, owner, index, header);
      }
      // public TValue ReadValue()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TValue ReadValue() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::ReadValue");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method);
      }
      // public System.Void* GetUnsafeMemoryPtr()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void* GetUnsafeMemoryPtr() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::GetUnsafeMemoryPtr");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetUnsafeMemoryPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<void*, false>(this, ___internal__method);
      }
      // public System.Void* GetUnsafeExtraMemoryPtr()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void* GetUnsafeExtraMemoryPtr() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::GetUnsafeExtraMemoryPtr");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetUnsafeExtraMemoryPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<void*, false>(this, ___internal__method);
      }
      // public System.Void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> record)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void CopyFrom(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record record) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::CopyFrom");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CopyFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(record)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, record);
      }
      // private System.Void CheckValid()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void CheckValid() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::CheckValid");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CheckValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> other)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool Equals(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record other) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::Equals");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
      }
      // public override System.Boolean Equals(System.Object obj)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object obj)
      bool Equals(::Il2CppObject* obj) {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::Equals");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
      }
      // public override System.Int32 GetHashCode()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::GetHashCode");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // public override System.String ToString()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Record::ToString");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
      }
    }; // UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record
    // Could not write size check! Type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record is generic, or has no fields that are valid for size checks!
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>
    operator ::System::Collections::Generic::IReadOnlyList_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*>(this);
    }
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::get_Item");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(int index, typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, index, value);
    }
    // public System.Void .ctor(System.Nullable`1<System.Int32> maxStateSizeInBytes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory_1<TValue>* New_ctor(::System::Nullable_1<int> maxStateSizeInBytes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory_1<TValue>*, creationType>(maxStateSizeInBytes)));
    }
    // public System.Void .ctor(UnityEngine.InputSystem.InputControl`1<TValue> control)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory_1<TValue>* New_ctor(::UnityEngine::InputSystem::InputControl_1<TValue>* control) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory_1<TValue>*, creationType>(control)));
    }
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> record)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record AddRecord(typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record record) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::AddRecord");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(record)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method, record);
    }
    // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue> RecordStateChange(UnityEngine.InputSystem.InputControl`1<TValue> control, TValue value, System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record RecordStateChange(::UnityEngine::InputSystem::InputControl_1<TValue>* control, TValue value, double time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::RecordStateChange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordStateChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record, false>(this, ___internal__method, control, value, time);
    }
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<TValue>> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>::Record>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<TValue>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.String path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.InputSystem.LowLevel.InputStateHistory
    // Base method: System.Void InputStateHistory::.ctor(System.String path)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputStateHistory_1<TValue>* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputStateHistory_1<TValue>*, creationType>(path)));
    }
    // protected override System.Void Finalize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.InputSystem.LowLevel.InputStateHistory
    // Base method: System.Void InputStateHistory::Finalize()
    void Finalize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::LowLevel::InputStateHistory_1::Finalize");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::InputSystem::LowLevel::InputStateHistory*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // UnityEngine.InputSystem.LowLevel.InputStateHistory`1
  // Could not write size check! Type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
