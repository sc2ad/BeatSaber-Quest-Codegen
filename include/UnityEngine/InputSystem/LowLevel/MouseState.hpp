// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: FourCC
  struct FourCC;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: MouseButton
  struct MouseButton;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: MouseState
  struct MouseState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::LowLevel::MouseState, "UnityEngine.InputSystem.LowLevel", "MouseState");
// Type namespace: UnityEngine.InputSystem.LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Size: 0x1E
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.LowLevel.MouseState
  // [TokenAttribute] Offset: FFFFFFFF
  struct MouseState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    public:
    // [InputControlAttribute] Offset: 0x95F370
    // public UnityEngine.Vector2 position
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F3AC
    // public UnityEngine.Vector2 delta
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::Vector2 delta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F3E8
    // [InputControlAttribute] Offset: 0x95F3E8
    // [InputControlAttribute] Offset: 0x95F3E8
    // public UnityEngine.Vector2 scroll
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Vector2 scroll;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // [InputControlAttribute] Offset: 0x95F53C
    // public System.UInt16 buttons
    // Size: 0x2
    // Offset: 0x18
    uint16_t buttons;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 displayIndex
    // Size: 0x2
    // Offset: 0x1A
    uint16_t displayIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // [InputControlAttribute] Offset: 0x95F8D0
    // public System.UInt16 clickCount
    // Size: 0x2
    // Offset: 0x1C
    uint16_t clickCount;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Creating value type constructor for type: MouseState
    constexpr MouseState(::UnityEngine::Vector2 position_ = {}, ::UnityEngine::Vector2 delta_ = {}, ::UnityEngine::Vector2 scroll_ = {}, uint16_t buttons_ = {}, uint16_t displayIndex_ = {}, uint16_t clickCount_ = {}) noexcept : position{position_}, delta{delta_}, scroll{scroll_}, buttons{buttons_}, displayIndex{displayIndex_}, clickCount{clickCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_position();
    // Get instance field reference: public UnityEngine.Vector2 delta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_delta();
    // Get instance field reference: public UnityEngine.Vector2 scroll
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_scroll();
    // Get instance field reference: public System.UInt16 buttons
    [[deprecated("Use field access instead!")]] uint16_t& dyn_buttons();
    // Get instance field reference: private System.UInt16 displayIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_displayIndex();
    // Get instance field reference: public System.UInt16 clickCount
    [[deprecated("Use field access instead!")]] uint16_t& dyn_clickCount();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_Format()
    // Offset: 0xCC5450
    static ::UnityEngine::InputSystem::Utilities::FourCC get_Format();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA3B3E8
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // public UnityEngine.InputSystem.LowLevel.MouseState WithButton(UnityEngine.InputSystem.LowLevel.MouseButton button, System.Boolean state)
    // Offset: 0xA3B3BC
    ::UnityEngine::InputSystem::LowLevel::MouseState WithButton(::UnityEngine::InputSystem::LowLevel::MouseButton button, bool state);
  }; // UnityEngine.InputSystem.LowLevel.MouseState
  #pragma pack(pop)
  static check_size<sizeof(MouseState), 28 + sizeof(uint16_t)> __UnityEngine_InputSystem_LowLevel_MouseStateSizeCheck;
  static_assert(sizeof(MouseState) == 0x1E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::MouseState::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::LowLevel::MouseState::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::MouseState), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::MouseState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::LowLevel::MouseState::*)()>(&UnityEngine::InputSystem::LowLevel::MouseState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::MouseState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::LowLevel::MouseState::WithButton
// Il2CppName: WithButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::MouseState (UnityEngine::InputSystem::LowLevel::MouseState::*)(::UnityEngine::InputSystem::LowLevel::MouseButton, bool)>(&UnityEngine::InputSystem::LowLevel::MouseState::WithButton)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "MouseButton")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::LowLevel::MouseState), "WithButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button, state});
  }
};
