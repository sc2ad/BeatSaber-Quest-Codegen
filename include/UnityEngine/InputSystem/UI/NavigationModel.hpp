// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.MoveDirection
#include "UnityEngine/EventSystems/MoveDirection.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState
#include "UnityEngine/EventSystems/PointerEventData_FramePressState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: AxisEventData
  class AxisEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: NavigationModel
  struct NavigationModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::NavigationModel, "UnityEngine.InputSystem.UI", "NavigationModel");
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.UI.NavigationModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct NavigationModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState
    struct ButtonState;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ButtonState/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Boolean m_IsPressed
      // Size: 0x1
      // Offset: 0x0
      bool m_IsPressed;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: m_IsPressed and: m_FramePressState
      char __padding0[0x3] = {};
      // private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState m_FramePressState
      // Size: 0x4
      // Offset: 0x4
      ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::PointerEventData::FramePressState) == 0x4);
      public:
      // Creating value type constructor for type: ButtonState
      constexpr ButtonState(bool m_IsPressed_ = {}, ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState_ = {}) noexcept : m_IsPressed{m_IsPressed_}, m_FramePressState{m_FramePressState_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Boolean m_IsPressed
      [[deprecated("Use field access instead!")]] bool& dyn_m_IsPressed();
      // Get instance field reference: private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState m_FramePressState
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData::FramePressState& dyn_m_FramePressState();
      // public System.Boolean get_isPressed()
      // Offset: 0xA4ED40
      bool get_isPressed();
      // public System.Void set_isPressed(System.Boolean value)
      // Offset: 0xA4ED48
      void set_isPressed(bool value);
      // public System.Boolean get_wasPressedThisFrame()
      // Offset: 0xA4ED54
      bool get_wasPressedThisFrame();
      // public System.Void OnFrameFinished()
      // Offset: 0xA4ED68
      void OnFrameFinished();
    }; // UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState
    #pragma pack(pop)
    static check_size<sizeof(NavigationModel::ButtonState), 4 + sizeof(::UnityEngine::EventSystems::PointerEventData::FramePressState)> __UnityEngine_InputSystem_UI_NavigationModel_ButtonStateSizeCheck;
    static_assert(sizeof(NavigationModel::ButtonState) == 0x8);
    public:
    // public UnityEngine.Vector2 move
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 move;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Int32 consecutiveMoveCount
    // Size: 0x4
    // Offset: 0x8
    int consecutiveMoveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.EventSystems.MoveDirection lastMoveDirection
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::EventSystems::MoveDirection lastMoveDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::MoveDirection) == 0x4);
    // public System.Single lastMoveTime
    // Size: 0x4
    // Offset: 0x10
    float lastMoveTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState submitButton
    // Size: 0x8
    // Offset: 0x14
    ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState submitButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::NavigationModel::ButtonState) == 0x8);
    // public UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState cancelButton
    // Size: 0x8
    // Offset: 0x1C
    ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState cancelButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::NavigationModel::ButtonState) == 0x8);
    // Padding between fields: cancelButton and: eventData
    char __padding5[0x4] = {};
    // public UnityEngine.EventSystems.AxisEventData eventData
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::EventSystems::AxisEventData* eventData;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::AxisEventData*) == 0x8);
    public:
    // Creating value type constructor for type: NavigationModel
    constexpr NavigationModel(::UnityEngine::Vector2 move_ = {}, int consecutiveMoveCount_ = {}, ::UnityEngine::EventSystems::MoveDirection lastMoveDirection_ = {}, float lastMoveTime_ = {}, ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState submitButton_ = {}, ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState cancelButton_ = {}, ::UnityEngine::EventSystems::AxisEventData* eventData_ = {}) noexcept : move{move_}, consecutiveMoveCount{consecutiveMoveCount_}, lastMoveDirection{lastMoveDirection_}, lastMoveTime{lastMoveTime_}, submitButton{submitButton_}, cancelButton{cancelButton_}, eventData{eventData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 move
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_move();
    // Get instance field reference: public System.Int32 consecutiveMoveCount
    [[deprecated("Use field access instead!")]] int& dyn_consecutiveMoveCount();
    // Get instance field reference: public UnityEngine.EventSystems.MoveDirection lastMoveDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::MoveDirection& dyn_lastMoveDirection();
    // Get instance field reference: public System.Single lastMoveTime
    [[deprecated("Use field access instead!")]] float& dyn_lastMoveTime();
    // Get instance field reference: public UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState submitButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState& dyn_submitButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.NavigationModel/UnityEngine.InputSystem.UI.ButtonState cancelButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::NavigationModel::ButtonState& dyn_cancelButton();
    // Get instance field reference: public UnityEngine.EventSystems.AxisEventData eventData
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::AxisEventData*& dyn_eventData();
    // public System.Void Reset()
    // Offset: 0xA4ECF4
    void Reset();
    // public System.Void OnFrameFinished()
    // Offset: 0xA4ECFC
    void OnFrameFinished();
  }; // UnityEngine.InputSystem.UI.NavigationModel
  #pragma pack(pop)
  static check_size<sizeof(NavigationModel), 40 + sizeof(::UnityEngine::EventSystems::AxisEventData*)> __UnityEngine_InputSystem_UI_NavigationModelSizeCheck;
  static_assert(sizeof(NavigationModel) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::NavigationModel::ButtonState, "UnityEngine.InputSystem.UI", "NavigationModel/ButtonState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::NavigationModel::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::NavigationModel::*)()>(&UnityEngine::InputSystem::UI::NavigationModel::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::NavigationModel), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::NavigationModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::NavigationModel::*)()>(&UnityEngine::InputSystem::UI::NavigationModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::NavigationModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
