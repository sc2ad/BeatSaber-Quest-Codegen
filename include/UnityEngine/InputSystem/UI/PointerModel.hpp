// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState
#include "UnityEngine/EventSystems/PointerEventData_FramePressState.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: ExtendedPointerEventData
  class ExtendedPointerEventData;
  // Forward declaring type: UIPointerType
  struct UIPointerType;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Skipping declaration: PointerEventData because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Forward declaring type: PointerModel
  struct PointerModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::PointerModel, "UnityEngine.InputSystem.UI", "PointerModel");
// Type namespace: UnityEngine.InputSystem.UI
namespace UnityEngine::InputSystem::UI {
  // Size: 0x1D4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.UI.PointerModel
  // [TokenAttribute] Offset: FFFFFFFF
  struct PointerModel/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::UI::PointerModel::ButtonState
    struct ButtonState;
    // Size: 0x81
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ButtonState/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Boolean m_IsPressed
      // Size: 0x1
      // Offset: 0x0
      bool m_IsPressed;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: m_IsPressed and: m_FramePressState
      char __padding0[0x3] = {};
      // private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState m_FramePressState
      // Size: 0x4
      // Offset: 0x4
      ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::PointerEventData::FramePressState) == 0x4);
      // private UnityEngine.EventSystems.RaycastResult pressRaycast
      // Size: 0x48
      // Offset: 0x8
      ::UnityEngine::EventSystems::RaycastResult pressRaycast;
      // Field size check
      static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x48);
      // private UnityEngine.GameObject pressObject
      // Size: 0x8
      // Offset: 0x50
      ::UnityEngine::GameObject* pressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject rawPressObject
      // Size: 0x8
      // Offset: 0x58
      ::UnityEngine::GameObject* rawPressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject lastPressObject
      // Size: 0x8
      // Offset: 0x60
      ::UnityEngine::GameObject* lastPressObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.GameObject dragObject
      // Size: 0x8
      // Offset: 0x68
      ::UnityEngine::GameObject* dragObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // private UnityEngine.Vector2 pressPosition
      // Size: 0x8
      // Offset: 0x70
      ::UnityEngine::Vector2 pressPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // private System.Single clickTime
      // Size: 0x4
      // Offset: 0x78
      float clickTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // private System.Int32 clickCount
      // Size: 0x4
      // Offset: 0x7C
      int clickCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Boolean dragging
      // Size: 0x1
      // Offset: 0x80
      bool dragging;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: ButtonState
      constexpr ButtonState(bool m_IsPressed_ = {}, ::UnityEngine::EventSystems::PointerEventData::FramePressState m_FramePressState_ = {}, ::UnityEngine::EventSystems::RaycastResult pressRaycast_ = {}, ::UnityEngine::GameObject* pressObject_ = {}, ::UnityEngine::GameObject* rawPressObject_ = {}, ::UnityEngine::GameObject* lastPressObject_ = {}, ::UnityEngine::GameObject* dragObject_ = {}, ::UnityEngine::Vector2 pressPosition_ = {}, float clickTime_ = {}, int clickCount_ = {}, bool dragging_ = {}) noexcept : m_IsPressed{m_IsPressed_}, m_FramePressState{m_FramePressState_}, pressRaycast{pressRaycast_}, pressObject{pressObject_}, rawPressObject{rawPressObject_}, lastPressObject{lastPressObject_}, dragObject{dragObject_}, pressPosition{pressPosition_}, clickTime{clickTime_}, clickCount{clickCount_}, dragging{dragging_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Boolean m_IsPressed
      [[deprecated("Use field access instead!")]] bool& dyn_m_IsPressed();
      // Get instance field reference: private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState m_FramePressState
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData::FramePressState& dyn_m_FramePressState();
      // Get instance field reference: private UnityEngine.EventSystems.RaycastResult pressRaycast
      [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_pressRaycast();
      // Get instance field reference: private UnityEngine.GameObject pressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_pressObject();
      // Get instance field reference: private UnityEngine.GameObject rawPressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rawPressObject();
      // Get instance field reference: private UnityEngine.GameObject lastPressObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_lastPressObject();
      // Get instance field reference: private UnityEngine.GameObject dragObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_dragObject();
      // Get instance field reference: private UnityEngine.Vector2 pressPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_pressPosition();
      // Get instance field reference: private System.Single clickTime
      [[deprecated("Use field access instead!")]] float& dyn_clickTime();
      // Get instance field reference: private System.Int32 clickCount
      [[deprecated("Use field access instead!")]] int& dyn_clickCount();
      // Get instance field reference: private System.Boolean dragging
      [[deprecated("Use field access instead!")]] bool& dyn_dragging();
      // public System.Boolean get_isPressed()
      // Offset: 0xA4EF30
      bool get_isPressed();
      // public System.Void set_isPressed(System.Boolean value)
      // Offset: 0xA4EF38
      void set_isPressed(bool value);
      // public System.Boolean get_wasPressedThisFrame()
      // Offset: 0xA4EF44
      bool get_wasPressedThisFrame();
      // public System.Boolean get_wasReleasedThisFrame()
      // Offset: 0xA4EF58
      bool get_wasReleasedThisFrame();
      // public System.Void CopyPressStateTo(UnityEngine.EventSystems.PointerEventData eventData)
      // Offset: 0xA4EF6C
      void CopyPressStateTo(::UnityEngine::EventSystems::PointerEventData* eventData);
      // public System.Void CopyPressStateFrom(UnityEngine.EventSystems.PointerEventData eventData)
      // Offset: 0xA4EF74
      void CopyPressStateFrom(::UnityEngine::EventSystems::PointerEventData* eventData);
      // public System.Void OnEndFrame()
      // Offset: 0xA4EF7C
      void OnEndFrame();
    }; // UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState
    #pragma pack(pop)
    static check_size<sizeof(PointerModel::ButtonState), 128 + sizeof(bool)> __UnityEngine_InputSystem_UI_PointerModel_ButtonStateSizeCheck;
    static_assert(sizeof(PointerModel::ButtonState) == 0x81);
    public:
    // public System.Boolean changedThisFrame
    // Size: 0x1
    // Offset: 0x0
    bool changedThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changedThisFrame and: leftButton
    char __padding0[0x7] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState leftButton
    // Size: 0x81
    // Offset: 0x8
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState leftButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x81);
    // Padding between fields: leftButton and: rightButton
    char __padding1[0x7] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState rightButton
    // Size: 0x81
    // Offset: 0x90
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState rightButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x81);
    // Padding between fields: rightButton and: middleButton
    char __padding2[0x7] = {};
    // public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState middleButton
    // Size: 0x81
    // Offset: 0x118
    ::UnityEngine::InputSystem::UI::PointerModel::ButtonState middleButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::PointerModel::ButtonState) == 0x81);
    // Padding between fields: middleButton and: eventData
    char __padding3[0x7] = {};
    // public UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::UI::ExtendedPointerEventData*) == 0x8);
    // private UnityEngine.Vector2 m_ScreenPosition
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Vector2 m_ScreenPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_ScrollDelta
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Vector2 m_ScrollDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector3 m_WorldPosition
    // Size: 0xC
    // Offset: 0x1B8
    ::UnityEngine::Vector3 m_WorldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_WorldOrientation
    // Size: 0x10
    // Offset: 0x1C4
    ::UnityEngine::Quaternion m_WorldOrientation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: PointerModel
    constexpr PointerModel(bool changedThisFrame_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState leftButton_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState rightButton_ = {}, ::UnityEngine::InputSystem::UI::PointerModel::ButtonState middleButton_ = {}, ::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData_ = {}, ::UnityEngine::Vector2 m_ScreenPosition_ = {}, ::UnityEngine::Vector2 m_ScrollDelta_ = {}, ::UnityEngine::Vector3 m_WorldPosition_ = {}, ::UnityEngine::Quaternion m_WorldOrientation_ = {}) noexcept : changedThisFrame{changedThisFrame_}, leftButton{leftButton_}, rightButton{rightButton_}, middleButton{middleButton_}, eventData{eventData_}, m_ScreenPosition{m_ScreenPosition_}, m_ScrollDelta{m_ScrollDelta_}, m_WorldPosition{m_WorldPosition_}, m_WorldOrientation{m_WorldOrientation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Boolean changedThisFrame
    [[deprecated("Use field access instead!")]] bool& dyn_changedThisFrame();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState leftButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_leftButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState rightButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_rightButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.PointerModel/UnityEngine.InputSystem.UI.ButtonState middleButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::PointerModel::ButtonState& dyn_middleButton();
    // Get instance field reference: public UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::UI::ExtendedPointerEventData*& dyn_eventData();
    // Get instance field reference: private UnityEngine.Vector2 m_ScreenPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScreenPosition();
    // Get instance field reference: private UnityEngine.Vector2 m_ScrollDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_ScrollDelta();
    // Get instance field reference: private UnityEngine.Vector3 m_WorldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_WorldPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_WorldOrientation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_WorldOrientation();
    // public UnityEngine.InputSystem.UI.UIPointerType get_pointerType()
    // Offset: 0xA4EDB0
    ::UnityEngine::InputSystem::UI::UIPointerType get_pointerType();
    // public UnityEngine.Vector2 get_screenPosition()
    // Offset: 0xA4EDCC
    ::UnityEngine::Vector2 get_screenPosition();
    // public System.Void set_screenPosition(UnityEngine.Vector2 value)
    // Offset: 0xA4EDD8
    void set_screenPosition(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector3 get_worldPosition()
    // Offset: 0xA4EDE0
    ::UnityEngine::Vector3 get_worldPosition();
    // public System.Void set_worldPosition(UnityEngine.Vector3 value)
    // Offset: 0xA4EDF0
    void set_worldPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_worldOrientation()
    // Offset: 0xA4EDF8
    ::UnityEngine::Quaternion get_worldOrientation();
    // public System.Void set_worldOrientation(UnityEngine.Quaternion value)
    // Offset: 0xA4EE0C
    void set_worldOrientation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector2 get_scrollDelta()
    // Offset: 0xA4EE14
    ::UnityEngine::Vector2 get_scrollDelta();
    // public System.Void set_scrollDelta(UnityEngine.Vector2 value)
    // Offset: 0xA4EE20
    void set_scrollDelta(::UnityEngine::Vector2 value);
    // public System.Void .ctor(System.Int32 pointerId, System.Int32 touchId, UnityEngine.InputSystem.UI.UIPointerType pointerType, UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.UI.ExtendedPointerEventData eventData)
    // Offset: 0xA4EE28
    PointerModel(int pointerId, int touchId, ::UnityEngine::InputSystem::UI::UIPointerType pointerType, ::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::UI::ExtendedPointerEventData* eventData);
    // public System.Void OnFrameFinished()
    // Offset: 0xA4EEB4
    void OnFrameFinished();
  }; // UnityEngine.InputSystem.UI.PointerModel
  #pragma pack(pop)
  static check_size<sizeof(PointerModel), 452 + sizeof(::UnityEngine::Quaternion)> __UnityEngine_InputSystem_UI_PointerModelSizeCheck;
  static_assert(sizeof(PointerModel) == 0x1D4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::UI::PointerModel::ButtonState, "UnityEngine.InputSystem.UI", "PointerModel/ButtonState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_pointerType
// Il2CppName: get_pointerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::UI::UIPointerType (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_pointerType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_pointerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_screenPosition
// Il2CppName: get_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_screenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_screenPosition
// Il2CppName: set_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector2)>(&UnityEngine::InputSystem::UI::PointerModel::set_screenPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_worldPosition
// Il2CppName: get_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_worldPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_worldPosition
// Il2CppName: set_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector3)>(&UnityEngine::InputSystem::UI::PointerModel::set_worldPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_worldOrientation
// Il2CppName: get_worldOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_worldOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_worldOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_worldOrientation
// Il2CppName: set_worldOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Quaternion)>(&UnityEngine::InputSystem::UI::PointerModel::set_worldOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_worldOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::get_scrollDelta
// Il2CppName: get_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::get_scrollDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "get_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::set_scrollDelta
// Il2CppName: set_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)(::UnityEngine::Vector2)>(&UnityEngine::InputSystem::UI::PointerModel::set_scrollDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "set_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::PointerModel
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::UI::PointerModel::OnFrameFinished
// Il2CppName: OnFrameFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::UI::PointerModel::*)()>(&UnityEngine::InputSystem::UI::PointerModel::OnFrameFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::UI::PointerModel), "OnFrameFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
