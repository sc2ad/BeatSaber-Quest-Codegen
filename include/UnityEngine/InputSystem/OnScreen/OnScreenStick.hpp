// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.OnScreen.OnScreenControl
#include "UnityEngine/InputSystem/OnScreen/OnScreenControl.hpp"
// Including type: UnityEngine.EventSystems.IPointerDownHandler
#include "UnityEngine/EventSystems/IPointerDownHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerUpHandler
#include "UnityEngine/EventSystems/IPointerUpHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.OnScreen
namespace UnityEngine::InputSystem::OnScreen {
  // Forward declaring type: OnScreenStick
  class OnScreenStick;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::OnScreen::OnScreenStick);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::OnScreen::OnScreenStick*, "UnityEngine.InputSystem.OnScreen", "OnScreenStick");
// Type namespace: UnityEngine.InputSystem.OnScreen
namespace UnityEngine::InputSystem::OnScreen {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.OnScreen.OnScreenStick
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 958344
  class OnScreenStick : public ::UnityEngine::InputSystem::OnScreen::OnScreenControl/*, public ::UnityEngine::EventSystems::IPointerDownHandler, public ::UnityEngine::EventSystems::IPointerUpHandler, public ::UnityEngine::EventSystems::IDragHandler*/ {
    public:
    public:
    // [FormerlySerializedAsAttribute] Offset: 0x95BAB0
    // private System.Single m_MovementRange
    // Size: 0x4
    // Offset: 0x30
    float m_MovementRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_MovementRange and: m_ControlPath
    char __padding0[0x4] = {};
    // [InputControlAttribute] Offset: 0x95BAFC
    // private System.String m_ControlPath
    // Size: 0x8
    // Offset: 0x38
    ::StringW m_ControlPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Vector3 m_StartPos
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 m_StartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 m_PointerDownPos
    // Size: 0x8
    // Offset: 0x4C
    ::UnityEngine::Vector2 m_PointerDownPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerDownHandler
    operator ::UnityEngine::EventSystems::IPointerDownHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerDownHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerUpHandler
    operator ::UnityEngine::EventSystems::IPointerUpHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerUpHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IDragHandler
    operator ::UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Get instance field reference: private System.Single m_MovementRange
    [[deprecated("Use field access instead!")]] float& dyn_m_MovementRange();
    // Get instance field reference: private System.String m_ControlPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ControlPath();
    // Get instance field reference: private UnityEngine.Vector3 m_StartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StartPos();
    // Get instance field reference: private UnityEngine.Vector2 m_PointerDownPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_PointerDownPos();
    // public System.Single get_movementRange()
    // Offset: 0xCC9994
    float get_movementRange();
    // public System.Void set_movementRange(System.Single value)
    // Offset: 0xCC999C
    void set_movementRange(float value);
    // public System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xCC9464
    void OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xCC957C
    void OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xCC97EC
    void OnPointerUp(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void Start()
    // Offset: 0xCC98D4
    void Start();
    // protected override System.String get_controlPathInternal()
    // Offset: 0xCC99A4
    // Implemented from: UnityEngine.InputSystem.OnScreen.OnScreenControl
    // Base method: System.String OnScreenControl::get_controlPathInternal()
    ::StringW get_controlPathInternal();
    // protected override System.Void set_controlPathInternal(System.String value)
    // Offset: 0xCC99AC
    // Implemented from: UnityEngine.InputSystem.OnScreen.OnScreenControl
    // Base method: System.Void OnScreenControl::set_controlPathInternal(System.String value)
    void set_controlPathInternal(::StringW value);
    // public System.Void .ctor()
    // Offset: 0xCC99B4
    // Implemented from: UnityEngine.InputSystem.OnScreen.OnScreenControl
    // Base method: System.Void OnScreenControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OnScreenStick* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::OnScreen::OnScreenStick::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OnScreenStick*, creationType>()));
    }
  }; // UnityEngine.InputSystem.OnScreen.OnScreenStick
  #pragma pack(pop)
  static check_size<sizeof(OnScreenStick), 76 + sizeof(::UnityEngine::Vector2)> __UnityEngine_InputSystem_OnScreen_OnScreenStickSizeCheck;
  static_assert(sizeof(OnScreenStick) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::get_movementRange
// Il2CppName: get_movementRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)()>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::get_movementRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "get_movementRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::set_movementRange
// Il2CppName: set_movementRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)(float)>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::set_movementRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "set_movementRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::OnPointerDown)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::OnDrag
// Il2CppName: OnDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::OnDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::OnPointerUp)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)()>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::get_controlPathInternal
// Il2CppName: get_controlPathInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)()>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::get_controlPathInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "get_controlPathInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::set_controlPathInternal
// Il2CppName: set_controlPathInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::OnScreen::OnScreenStick::*)(::StringW)>(&UnityEngine::InputSystem::OnScreen::OnScreenStick::set_controlPathInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::OnScreen::OnScreenStick*), "set_controlPathInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::OnScreen::OnScreenStick::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
