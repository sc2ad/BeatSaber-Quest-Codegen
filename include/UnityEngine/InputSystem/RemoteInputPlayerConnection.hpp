// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: System.IObservable`1
#include "System/IObservable_1.hpp"
// Including type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message
#include "UnityEngine/InputSystem/InputRemoting.hpp"
// Including type: System.IObserver`1
#include "System/IObserver_1.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
}
// Forward declaring namespace: UnityEngine::Networking::PlayerConnection
namespace UnityEngine::Networking::PlayerConnection {
  // Forward declaring type: IEditorPlayerConnection
  class IEditorPlayerConnection;
  // Forward declaring type: MessageEventArgs
  class MessageEventArgs;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: RemoteInputPlayerConnection
  class RemoteInputPlayerConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::RemoteInputPlayerConnection);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::RemoteInputPlayerConnection*, "UnityEngine.InputSystem", "RemoteInputPlayerConnection");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.RemoteInputPlayerConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteInputPlayerConnection : public ::UnityEngine::ScriptableObject/*, public ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>, public ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscriber
    class Subscriber;
    public:
    // private UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection m_Connection
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Networking::PlayerConnection::IEditorPlayerConnection* m_Connection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::PlayerConnection::IEditorPlayerConnection*) == 0x8);
    // private UnityEngine.InputSystem.RemoteInputPlayerConnection/UnityEngine.InputSystem.Subscriber[] m_Subscribers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscriber*> m_Subscribers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscriber*>) == 0x8);
    // private System.Int32[] m_ConnectedIds
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> m_ConnectedIds;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>
    operator ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>() noexcept {
      return *reinterpret_cast<::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>
    operator ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>() noexcept {
      return *reinterpret_cast<::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public readonly System.Guid kNewDeviceMsg
    static ::System::Guid _get_kNewDeviceMsg();
    // Set static field: static public readonly System.Guid kNewDeviceMsg
    static void _set_kNewDeviceMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kNewLayoutMsg
    static ::System::Guid _get_kNewLayoutMsg();
    // Set static field: static public readonly System.Guid kNewLayoutMsg
    static void _set_kNewLayoutMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kNewEventsMsg
    static ::System::Guid _get_kNewEventsMsg();
    // Set static field: static public readonly System.Guid kNewEventsMsg
    static void _set_kNewEventsMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kRemoveDeviceMsg
    static ::System::Guid _get_kRemoveDeviceMsg();
    // Set static field: static public readonly System.Guid kRemoveDeviceMsg
    static void _set_kRemoveDeviceMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kChangeUsagesMsg
    static ::System::Guid _get_kChangeUsagesMsg();
    // Set static field: static public readonly System.Guid kChangeUsagesMsg
    static void _set_kChangeUsagesMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kStartSendingMsg
    static ::System::Guid _get_kStartSendingMsg();
    // Set static field: static public readonly System.Guid kStartSendingMsg
    static void _set_kStartSendingMsg(::System::Guid value);
    // Get static field: static public readonly System.Guid kStopSendingMsg
    static ::System::Guid _get_kStopSendingMsg();
    // Set static field: static public readonly System.Guid kStopSendingMsg
    static void _set_kStopSendingMsg(::System::Guid value);
    // Get instance field reference: private UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection m_Connection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::PlayerConnection::IEditorPlayerConnection*& dyn_m_Connection();
    // Get instance field reference: private UnityEngine.InputSystem.RemoteInputPlayerConnection/UnityEngine.InputSystem.Subscriber[] m_Subscribers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscriber*>& dyn_m_Subscribers();
    // Get instance field reference: private System.Int32[] m_ConnectedIds
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_m_ConnectedIds();
    // public System.Void .ctor()
    // Offset: 0xCD3FA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteInputPlayerConnection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::RemoteInputPlayerConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteInputPlayerConnection*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xCD3FB0
    static void _cctor();
    // public System.Void Bind(UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection connection, System.Boolean isConnected)
    // Offset: 0xCD3180
    void Bind(::UnityEngine::Networking::PlayerConnection::IEditorPlayerConnection* connection, bool isConnected);
    // public System.IDisposable Subscribe(System.IObserver`1<UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message> observer)
    // Offset: 0xCD38D8
    ::System::IDisposable* Subscribe(::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>* observer);
    // private System.Void OnConnected(System.Int32 id)
    // Offset: 0xCD380C
    void OnConnected(int id);
    // private System.Void OnDisconnected(System.Int32 id)
    // Offset: 0xCD3B94
    void OnDisconnected(int id);
    // private System.Void OnNewDevice(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C60
    void OnNewDevice(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnNewLayout(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C6C
    void OnNewLayout(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnNewEvents(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C78
    void OnNewEvents(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnRemoveDevice(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C84
    void OnRemoveDevice(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnChangeUsages(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C90
    void OnChangeUsages(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnStartSending(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3C9C
    void OnStartSending(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void OnStopSending(UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3CA8
    void OnStopSending(::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void SendToSubscribers(UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType type, UnityEngine.Networking.PlayerConnection.MessageEventArgs args)
    // Offset: 0xCD3A70
    void SendToSubscribers(::UnityEngine::InputSystem::InputRemoting::MessageType type, ::UnityEngine::Networking::PlayerConnection::MessageEventArgs* args);
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext(UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message msg)
    // Offset: 0xCD3CB4
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext(::UnityEngine::InputSystem::InputRemoting::Message msg);
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError(System.Exception error)
    // Offset: 0xCD3FA0
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError(::System::Exception* error);
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted()
    // Offset: 0xCD3FA4
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted();
  }; // UnityEngine.InputSystem.RemoteInputPlayerConnection
  #pragma pack(pop)
  static check_size<sizeof(RemoteInputPlayerConnection), 40 + sizeof(::ArrayW<int>)> __UnityEngine_InputSystem_RemoteInputPlayerConnectionSizeCheck;
  static_assert(sizeof(RemoteInputPlayerConnection) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::IEditorPlayerConnection*, bool)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::Bind)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "IEditorPlayerConnection")->byval_arg;
    static auto* isConnected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, isConnected});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IDisposable* (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::Subscribe)> {
  static const MethodInfo* get() {
    static auto* observer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IObserver`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/Message")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{observer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnConnected
// Il2CppName: OnConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(int)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnConnected)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnDisconnected
// Il2CppName: OnDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(int)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnDisconnected)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewDevice
// Il2CppName: OnNewDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewDevice)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnNewDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewLayout
// Il2CppName: OnNewLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewLayout)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnNewLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewEvents
// Il2CppName: OnNewEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnNewEvents)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnNewEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnRemoveDevice
// Il2CppName: OnRemoveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnRemoveDevice)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnRemoveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnChangeUsages
// Il2CppName: OnChangeUsages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnChangeUsages)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnChangeUsages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnStartSending
// Il2CppName: OnStartSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnStartSending)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnStartSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::OnStopSending
// Il2CppName: OnStopSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::OnStopSending)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "OnStopSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::SendToSubscribers
// Il2CppName: SendToSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::InputSystem::InputRemoting::MessageType, ::UnityEngine::Networking::PlayerConnection::MessageEventArgs*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::SendToSubscribers)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/MessageType")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking.PlayerConnection", "MessageEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "SendToSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, args});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::UnityEngine::InputSystem::InputRemoting::Message)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)(::System::Exception*)>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::RemoteInputPlayerConnection::*)()>(&UnityEngine::InputSystem::RemoteInputPlayerConnection::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::RemoteInputPlayerConnection*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
