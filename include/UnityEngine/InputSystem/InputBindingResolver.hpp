// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.UnmanagedMemory
#include "UnityEngine/InputSystem/InputActionState.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.InputSystem.InputBinding
#include "UnityEngine/InputSystem/InputBinding.hpp"
// Including type: UnityEngine.InputSystem.Utilities.NameAndParameters
#include "UnityEngine/InputSystem/Utilities/NameAndParameters.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionMap
  class InputActionMap;
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: IInputInteraction
  class IInputInteraction;
  // Forward declaring type: InputProcessor
  class InputProcessor;
  // Forward declaring type: InputBindingComposite
  class InputBindingComposite;
  // Skipping declaration: InputActionState because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputBindingResolver
  struct InputBindingResolver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputBindingResolver, "UnityEngine.InputSystem", "InputBindingResolver");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputBindingResolver
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputBindingResolver/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public System.Int32 totalProcessorCount
    // Size: 0x4
    // Offset: 0x0
    int totalProcessorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalCompositeCount
    // Size: 0x4
    // Offset: 0x4
    int totalCompositeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalInteractionCount
    // Size: 0x4
    // Offset: 0x8
    int totalInteractionCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.InputSystem.InputActionMap[] maps
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::InputActionMap*> maps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputActionMap*>) == 0x8);
    // public UnityEngine.InputSystem.InputControl[] controls
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::InputSystem::InputControl*> controls;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControl*>) == 0x8);
    // public UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.UnmanagedMemory memory
    // Size: 0x70
    // Offset: 0x20
    ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory memory;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::UnmanagedMemory) == 0x70);
    // public UnityEngine.InputSystem.IInputInteraction[] interactions
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*> interactions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::IInputInteraction*>) == 0x8);
    // public UnityEngine.InputSystem.InputProcessor[] processors
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::InputSystem::InputProcessor*> processors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputProcessor*>) == 0x8);
    // public UnityEngine.InputSystem.InputBindingComposite[] composites
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*> composites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*>) == 0x8);
    // public System.Nullable`1<UnityEngine.InputSystem.InputBinding> bindingMask
    // Size: 0xFFFFFFFF
    // Offset: 0xA8
    ::System::Nullable_1<::UnityEngine::InputSystem::InputBinding> bindingMask;
    // private System.Collections.Generic.List`1<UnityEngine.InputSystem.Utilities.NameAndParameters> m_Parameters
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::NameAndParameters>* m_Parameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::NameAndParameters>*) == 0x8);
    public:
    // Creating value type constructor for type: InputBindingResolver
    constexpr InputBindingResolver(int totalProcessorCount_ = {}, int totalCompositeCount_ = {}, int totalInteractionCount_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputActionMap*> maps_ = ::ArrayW<::UnityEngine::InputSystem::InputActionMap*>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputControl*> controls_ = ::ArrayW<::UnityEngine::InputSystem::InputControl*>(static_cast<void*>(nullptr)), ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory memory_ = {}, ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*> interactions_ = ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputProcessor*> processors_ = ::ArrayW<::UnityEngine::InputSystem::InputProcessor*>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*> composites_ = ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*>(static_cast<void*>(nullptr)), ::System::Nullable_1<::UnityEngine::InputSystem::InputBinding> bindingMask_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::NameAndParameters>* m_Parameters_ = {}) noexcept : totalProcessorCount{totalProcessorCount_}, totalCompositeCount{totalCompositeCount_}, totalInteractionCount{totalInteractionCount_}, maps{maps_}, controls{controls_}, memory{memory_}, interactions{interactions_}, processors{processors_}, composites{composites_}, bindingMask{bindingMask_}, m_Parameters{m_Parameters_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: public System.Int32 totalProcessorCount
    [[deprecated("Use field access instead!")]] int& dyn_totalProcessorCount();
    // Get instance field reference: public System.Int32 totalCompositeCount
    [[deprecated("Use field access instead!")]] int& dyn_totalCompositeCount();
    // Get instance field reference: public System.Int32 totalInteractionCount
    [[deprecated("Use field access instead!")]] int& dyn_totalInteractionCount();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionMap[] maps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputActionMap*>& dyn_maps();
    // Get instance field reference: public UnityEngine.InputSystem.InputControl[] controls
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControl*>& dyn_controls();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.UnmanagedMemory memory
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::UnmanagedMemory& dyn_memory();
    // Get instance field reference: public UnityEngine.InputSystem.IInputInteraction[] interactions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::IInputInteraction*>& dyn_interactions();
    // Get instance field reference: public UnityEngine.InputSystem.InputProcessor[] processors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputProcessor*>& dyn_processors();
    // Get instance field reference: public UnityEngine.InputSystem.InputBindingComposite[] composites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputBindingComposite*>& dyn_composites();
    // Get instance field reference: public System.Nullable`1<UnityEngine.InputSystem.InputBinding> bindingMask
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::InputSystem::InputBinding>& dyn_bindingMask();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.InputSystem.Utilities.NameAndParameters> m_Parameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::NameAndParameters>*& dyn_m_Parameters();
    // public System.Int32 get_totalMapCount()
    // Offset: 0xA5BBB8
    int get_totalMapCount();
    // public System.Int32 get_totalActionCount()
    // Offset: 0xA5BBC0
    int get_totalActionCount();
    // public System.Int32 get_totalBindingCount()
    // Offset: 0xA5BBC8
    int get_totalBindingCount();
    // public System.Int32 get_totalControlCount()
    // Offset: 0xA5BBD0
    int get_totalControlCount();
    // public System.Void Dispose()
    // Offset: 0xA5BBD8
    void Dispose();
    // public System.Void StartWithArraysFrom(UnityEngine.InputSystem.InputActionState state)
    // Offset: 0xA5BC24
    void StartWithArraysFrom(::UnityEngine::InputSystem::InputActionState* state);
    // public System.Void AddActionMap(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0xA5BC2C
    void AddActionMap(::UnityEngine::InputSystem::InputActionMap* map);
    // private System.Int32 ResolveInteractions(System.String interactionString)
    // Offset: 0xA5BC94
    int ResolveInteractions(::StringW interactionString);
    // private System.Int32 ResolveProcessors(System.String processorString)
    // Offset: 0xA5BC9C
    int ResolveProcessors(::StringW processorString);
    // static private UnityEngine.InputSystem.InputBindingComposite InstantiateBindingComposite(System.String nameAndParameters)
    // Offset: 0x1377730
    static ::UnityEngine::InputSystem::InputBindingComposite* InstantiateBindingComposite(::StringW nameAndParameters);
    // static private System.Int32 AssignCompositePartIndex(System.Object composite, System.String name, ref System.Int32 currentCompositePartCount)
    // Offset: 0x13779C4
    static int AssignCompositePartIndex(::Il2CppObject* composite, ::StringW name, ByRef<int> currentCompositePartCount);
  }; // UnityEngine.InputSystem.InputBindingResolver
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::get_totalMapCount
// Il2CppName: get_totalMapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)()>(&UnityEngine::InputSystem::InputBindingResolver::get_totalMapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "get_totalMapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::get_totalActionCount
// Il2CppName: get_totalActionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)()>(&UnityEngine::InputSystem::InputBindingResolver::get_totalActionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "get_totalActionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::get_totalBindingCount
// Il2CppName: get_totalBindingCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)()>(&UnityEngine::InputSystem::InputBindingResolver::get_totalBindingCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "get_totalBindingCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::get_totalControlCount
// Il2CppName: get_totalControlCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)()>(&UnityEngine::InputSystem::InputBindingResolver::get_totalControlCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "get_totalControlCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBindingResolver::*)()>(&UnityEngine::InputSystem::InputBindingResolver::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::StartWithArraysFrom
// Il2CppName: StartWithArraysFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBindingResolver::*)(::UnityEngine::InputSystem::InputActionState*)>(&UnityEngine::InputSystem::InputBindingResolver::StartWithArraysFrom)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "StartWithArraysFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::AddActionMap
// Il2CppName: AddActionMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBindingResolver::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputBindingResolver::AddActionMap)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "AddActionMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::ResolveInteractions
// Il2CppName: ResolveInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)(::StringW)>(&UnityEngine::InputSystem::InputBindingResolver::ResolveInteractions)> {
  static const MethodInfo* get() {
    static auto* interactionString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "ResolveInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionString});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::ResolveProcessors
// Il2CppName: ResolveProcessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBindingResolver::*)(::StringW)>(&UnityEngine::InputSystem::InputBindingResolver::ResolveProcessors)> {
  static const MethodInfo* get() {
    static auto* processorString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "ResolveProcessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processorString});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::InstantiateBindingComposite
// Il2CppName: InstantiateBindingComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputBindingComposite* (*)(::StringW)>(&UnityEngine::InputSystem::InputBindingResolver::InstantiateBindingComposite)> {
  static const MethodInfo* get() {
    static auto* nameAndParameters = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "InstantiateBindingComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameAndParameters});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBindingResolver::AssignCompositePartIndex
// Il2CppName: AssignCompositePartIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppObject*, ::StringW, ByRef<int>)>(&UnityEngine::InputSystem::InputBindingResolver::AssignCompositePartIndex)> {
  static const MethodInfo* get() {
    static auto* composite = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* currentCompositePartCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBindingResolver), "AssignCompositePartIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{composite, name, currentCompositePartCount});
  }
};
