// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.IInputInteraction`1
#include "UnityEngine/InputSystem/IInputInteraction_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputInteractionContext
  struct InputInteractionContext;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Interactions
namespace UnityEngine::InputSystem::Interactions {
  // Forward declaring type: MultiTapInteraction
  class MultiTapInteraction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Interactions::MultiTapInteraction);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Interactions::MultiTapInteraction*, "UnityEngine.InputSystem.Interactions", "MultiTapInteraction");
// Type namespace: UnityEngine.InputSystem.Interactions
namespace UnityEngine::InputSystem::Interactions {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Interactions.MultiTapInteraction
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class MultiTapInteraction : public ::Il2CppObject/*, public ::UnityEngine::InputSystem::IInputInteraction_1<float>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase
    struct TapPhase;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase
    // [TokenAttribute] Offset: FFFFFFFF
    struct TapPhase/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TapPhase
      constexpr TapPhase(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase None
      static ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase _get_None();
      // Set static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase None
      static void _set_None(::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase value);
      // static field const value: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextRelease
      static constexpr const int WaitingForNextRelease = 1;
      // Get static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextRelease
      static ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase _get_WaitingForNextRelease();
      // Set static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextRelease
      static void _set_WaitingForNextRelease(::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase value);
      // static field const value: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextPress
      static constexpr const int WaitingForNextPress = 2;
      // Get static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextPress
      static ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase _get_WaitingForNextPress();
      // Set static field: static public UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase WaitingForNextPress
      static void _set_WaitingForNextPress(::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase
    #pragma pack(pop)
    static check_size<sizeof(MultiTapInteraction::TapPhase), 0 + sizeof(int)> __UnityEngine_InputSystem_Interactions_MultiTapInteraction_TapPhaseSizeCheck;
    static_assert(sizeof(MultiTapInteraction::TapPhase) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x96112C
    // public System.Single tapTime
    // Size: 0x4
    // Offset: 0x10
    float tapTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x961164
    // public System.Single tapDelay
    // Size: 0x4
    // Offset: 0x14
    float tapDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x96119C
    // public System.Int32 tapCount
    // Size: 0x4
    // Offset: 0x18
    int tapCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single pressPoint
    // Size: 0x4
    // Offset: 0x1C
    float pressPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase m_CurrentTapPhase
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase m_CurrentTapPhase;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase) == 0x4);
    // private System.Int32 m_CurrentTapCount
    // Size: 0x4
    // Offset: 0x24
    int m_CurrentTapCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Double m_CurrentTapStartTime
    // Size: 0x8
    // Offset: 0x28
    double m_CurrentTapStartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_LastTapReleaseTime
    // Size: 0x8
    // Offset: 0x30
    double m_LastTapReleaseTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::IInputInteraction_1<float>
    operator ::UnityEngine::InputSystem::IInputInteraction_1<float>() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::IInputInteraction_1<float>*>(this);
    }
    // Get instance field reference: public System.Single tapTime
    [[deprecated("Use field access instead!")]] float& dyn_tapTime();
    // Get instance field reference: public System.Single tapDelay
    [[deprecated("Use field access instead!")]] float& dyn_tapDelay();
    // Get instance field reference: public System.Int32 tapCount
    [[deprecated("Use field access instead!")]] int& dyn_tapCount();
    // Get instance field reference: public System.Single pressPoint
    [[deprecated("Use field access instead!")]] float& dyn_pressPoint();
    // Get instance field reference: private UnityEngine.InputSystem.Interactions.MultiTapInteraction/UnityEngine.InputSystem.Interactions.TapPhase m_CurrentTapPhase
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase& dyn_m_CurrentTapPhase();
    // Get instance field reference: private System.Int32 m_CurrentTapCount
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentTapCount();
    // Get instance field reference: private System.Double m_CurrentTapStartTime
    [[deprecated("Use field access instead!")]] double& dyn_m_CurrentTapStartTime();
    // Get instance field reference: private System.Double m_LastTapReleaseTime
    [[deprecated("Use field access instead!")]] double& dyn_m_LastTapReleaseTime();
    // private System.Single get_tapTimeOrDefault()
    // Offset: 0x1118F74
    float get_tapTimeOrDefault();
    // System.Single get_tapDelayOrDefault()
    // Offset: 0x1118FF4
    float get_tapDelayOrDefault();
    // private System.Single get_pressPointOrDefault()
    // Offset: 0x1119018
    float get_pressPointOrDefault();
    // public System.Void .ctor()
    // Offset: 0x111932C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiTapInteraction* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Interactions::MultiTapInteraction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiTapInteraction*, creationType>()));
    }
    // public System.Void Process(ref UnityEngine.InputSystem.InputInteractionContext context)
    // Offset: 0x1119078
    void Process(ByRef<::UnityEngine::InputSystem::InputInteractionContext> context);
    // public System.Void Reset()
    // Offset: 0x1119320
    void Reset();
  }; // UnityEngine.InputSystem.Interactions.MultiTapInteraction
  #pragma pack(pop)
  static check_size<sizeof(MultiTapInteraction), 48 + sizeof(double)> __UnityEngine_InputSystem_Interactions_MultiTapInteractionSizeCheck;
  static_assert(sizeof(MultiTapInteraction) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Interactions::MultiTapInteraction::TapPhase, "UnityEngine.InputSystem.Interactions", "MultiTapInteraction/TapPhase");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_tapTimeOrDefault
// Il2CppName: get_tapTimeOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Interactions::MultiTapInteraction::*)()>(&UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_tapTimeOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Interactions::MultiTapInteraction*), "get_tapTimeOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_tapDelayOrDefault
// Il2CppName: get_tapDelayOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Interactions::MultiTapInteraction::*)()>(&UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_tapDelayOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Interactions::MultiTapInteraction*), "get_tapDelayOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_pressPointOrDefault
// Il2CppName: get_pressPointOrDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Interactions::MultiTapInteraction::*)()>(&UnityEngine::InputSystem::Interactions::MultiTapInteraction::get_pressPointOrDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Interactions::MultiTapInteraction*), "get_pressPointOrDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Interactions::MultiTapInteraction::*)(ByRef<::UnityEngine::InputSystem::InputInteractionContext>)>(&UnityEngine::InputSystem::Interactions::MultiTapInteraction::Process)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputInteractionContext")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Interactions::MultiTapInteraction*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Interactions::MultiTapInteraction::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Interactions::MultiTapInteraction::*)()>(&UnityEngine::InputSystem::Interactions::MultiTapInteraction::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Interactions::MultiTapInteraction*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
