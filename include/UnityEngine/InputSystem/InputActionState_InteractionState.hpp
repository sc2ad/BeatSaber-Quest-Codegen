// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionState
#include "UnityEngine/InputSystem/InputActionState.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionPhase
  struct InputActionPhase;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState::InteractionState, "UnityEngine.InputSystem", "InputActionState/InteractionState");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.InteractionState
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionState::InteractionState/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputActionState::InteractionState::Flags
    struct Flags;
    public:
    // private System.UInt16 m_TriggerControlIndex
    // Size: 0x2
    // Offset: 0x0
    uint16_t m_TriggerControlIndex;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.Byte m_Phase
    // Size: 0x1
    // Offset: 0x2
    uint8_t m_Phase;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_Flags
    // Size: 0x1
    // Offset: 0x3
    uint8_t m_Flags;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Double m_StartTime
    // Size: 0x8
    // Offset: 0x4
    double m_StartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: InteractionState
    constexpr InteractionState(uint16_t m_TriggerControlIndex_ = {}, uint8_t m_Phase_ = {}, uint8_t m_Flags_ = {}, double m_StartTime_ = {}) noexcept : m_TriggerControlIndex{m_TriggerControlIndex_}, m_Phase{m_Phase_}, m_Flags{m_Flags_}, m_StartTime{m_StartTime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt16 m_TriggerControlIndex
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_TriggerControlIndex();
    // Get instance field reference: private System.Byte m_Phase
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Phase();
    // Get instance field reference: private System.Byte m_Flags
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_Flags();
    // Get instance field reference: private System.Double m_StartTime
    [[deprecated("Use field access instead!")]] double& dyn_m_StartTime();
    // public System.Int32 get_triggerControlIndex()
    // Offset: 0xA5B400
    int get_triggerControlIndex();
    // public System.Void set_triggerControlIndex(System.Int32 value)
    // Offset: 0xA5B408
    void set_triggerControlIndex(int value);
    // public System.Double get_startTime()
    // Offset: 0xA5B410
    double get_startTime();
    // public System.Void set_startTime(System.Double value)
    // Offset: 0xA5B418
    void set_startTime(double value);
    // public System.Boolean get_isTimerRunning()
    // Offset: 0xA5B420
    bool get_isTimerRunning();
    // public System.Void set_isTimerRunning(System.Boolean value)
    // Offset: 0xA5B42C
    void set_isTimerRunning(bool value);
    // public UnityEngine.InputSystem.InputActionPhase get_phase()
    // Offset: 0xA5B448
    ::UnityEngine::InputSystem::InputActionPhase get_phase();
    // public System.Void set_phase(UnityEngine.InputSystem.InputActionPhase value)
    // Offset: 0xA5B450
    void set_phase(::UnityEngine::InputSystem::InputActionPhase value);
  }; // UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.InteractionState
  #pragma pack(pop)
  static check_size<sizeof(InputActionState::InteractionState), 4 + sizeof(double)> __UnityEngine_InputSystem_InputActionState_InteractionStateSizeCheck;
  static_assert(sizeof(InputActionState::InteractionState) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::get_triggerControlIndex
// Il2CppName: get_triggerControlIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionState::InteractionState::*)()>(&UnityEngine::InputSystem::InputActionState::InteractionState::get_triggerControlIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "get_triggerControlIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::set_triggerControlIndex
// Il2CppName: set_triggerControlIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::InteractionState::*)(int)>(&UnityEngine::InputSystem::InputActionState::InteractionState::set_triggerControlIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "set_triggerControlIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputActionState::InteractionState::*)()>(&UnityEngine::InputSystem::InputActionState::InteractionState::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::InteractionState::*)(double)>(&UnityEngine::InputSystem::InputActionState::InteractionState::set_startTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::get_isTimerRunning
// Il2CppName: get_isTimerRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionState::InteractionState::*)()>(&UnityEngine::InputSystem::InputActionState::InteractionState::get_isTimerRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "get_isTimerRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::set_isTimerRunning
// Il2CppName: set_isTimerRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::InteractionState::*)(bool)>(&UnityEngine::InputSystem::InputActionState::InteractionState::set_isTimerRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "set_isTimerRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionPhase (UnityEngine::InputSystem::InputActionState::InteractionState::*)()>(&UnityEngine::InputSystem::InputActionState::InteractionState::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionState::InteractionState::set_phase
// Il2CppName: set_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionState::InteractionState::*)(::UnityEngine::InputSystem::InputActionPhase)>(&UnityEngine::InputSystem::InputActionState::InteractionState::set_phase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionState::InteractionState), "set_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
