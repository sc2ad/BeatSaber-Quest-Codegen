// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputDevice
#include "UnityEngine/InputSystem/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: IntegerControl
  class IntegerControl;
  // Forward declaring type: ButtonControl
  class ButtonControl;
  // Forward declaring type: Vector3Control
  class Vector3Control;
  // Forward declaring type: QuaternionControl
  class QuaternionControl;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: TrackedDevice
  class TrackedDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::TrackedDevice);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::TrackedDevice*, "UnityEngine.InputSystem", "TrackedDevice");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x170
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.TrackedDevice
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 957F90
  // [PreserveAttribute] Offset: FFFFFFFF
  class TrackedDevice : public ::UnityEngine::InputSystem::InputDevice {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.IntegerControl <trackingState>k__BackingField
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::InputSystem::Controls::IntegerControl* trackingState;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::IntegerControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <isTracked>k__BackingField
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::InputSystem::Controls::ButtonControl* isTracked;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.Vector3Control <devicePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::InputSystem::Controls::Vector3Control* devicePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::Vector3Control*) == 0x8);
    // private UnityEngine.InputSystem.Controls.QuaternionControl <deviceRotation>k__BackingField
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::InputSystem::Controls::QuaternionControl* deviceRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.Controls.IntegerControl <trackingState>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::IntegerControl*& dyn_$trackingState$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <isTracked>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$isTracked$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.Vector3Control <devicePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::Vector3Control*& dyn_$devicePosition$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.QuaternionControl <deviceRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::QuaternionControl*& dyn_$deviceRotation$k__BackingField();
    // public UnityEngine.InputSystem.Controls.IntegerControl get_trackingState()
    // Offset: 0xCD5838
    ::UnityEngine::InputSystem::Controls::IntegerControl* get_trackingState();
    // private System.Void set_trackingState(UnityEngine.InputSystem.Controls.IntegerControl value)
    // Offset: 0xCD5840
    void set_trackingState(::UnityEngine::InputSystem::Controls::IntegerControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_isTracked()
    // Offset: 0xCD5848
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_isTracked();
    // private System.Void set_isTracked(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xCD5850
    void set_isTracked(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.Vector3Control get_devicePosition()
    // Offset: 0xCD5858
    ::UnityEngine::InputSystem::Controls::Vector3Control* get_devicePosition();
    // private System.Void set_devicePosition(UnityEngine.InputSystem.Controls.Vector3Control value)
    // Offset: 0xCD5860
    void set_devicePosition(::UnityEngine::InputSystem::Controls::Vector3Control* value);
    // public UnityEngine.InputSystem.Controls.QuaternionControl get_deviceRotation()
    // Offset: 0xCD5868
    ::UnityEngine::InputSystem::Controls::QuaternionControl* get_deviceRotation();
    // private System.Void set_deviceRotation(UnityEngine.InputSystem.Controls.QuaternionControl value)
    // Offset: 0xCD5870
    void set_deviceRotation(::UnityEngine::InputSystem::Controls::QuaternionControl* value);
    // public System.Void .ctor()
    // Offset: 0xCD5954
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackedDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::TrackedDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackedDevice*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xCD5878
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Void InputControl::FinishSetup()
    void FinishSetup();
  }; // UnityEngine.InputSystem.TrackedDevice
  #pragma pack(pop)
  static check_size<sizeof(TrackedDevice), 360 + sizeof(::UnityEngine::InputSystem::Controls::QuaternionControl*)> __UnityEngine_InputSystem_TrackedDeviceSizeCheck;
  static_assert(sizeof(TrackedDevice) == 0x170);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::get_trackingState
// Il2CppName: get_trackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::IntegerControl* (UnityEngine::InputSystem::TrackedDevice::*)()>(&UnityEngine::InputSystem::TrackedDevice::get_trackingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "get_trackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::set_trackingState
// Il2CppName: set_trackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::TrackedDevice::*)(::UnityEngine::InputSystem::Controls::IntegerControl*)>(&UnityEngine::InputSystem::TrackedDevice::set_trackingState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "IntegerControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "set_trackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::get_isTracked
// Il2CppName: get_isTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::TrackedDevice::*)()>(&UnityEngine::InputSystem::TrackedDevice::get_isTracked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "get_isTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::set_isTracked
// Il2CppName: set_isTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::TrackedDevice::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::TrackedDevice::set_isTracked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "set_isTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::get_devicePosition
// Il2CppName: get_devicePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::Vector3Control* (UnityEngine::InputSystem::TrackedDevice::*)()>(&UnityEngine::InputSystem::TrackedDevice::get_devicePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "get_devicePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::set_devicePosition
// Il2CppName: set_devicePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::TrackedDevice::*)(::UnityEngine::InputSystem::Controls::Vector3Control*)>(&UnityEngine::InputSystem::TrackedDevice::set_devicePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "Vector3Control")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "set_devicePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::get_deviceRotation
// Il2CppName: get_deviceRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::QuaternionControl* (UnityEngine::InputSystem::TrackedDevice::*)()>(&UnityEngine::InputSystem::TrackedDevice::get_deviceRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "get_deviceRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::set_deviceRotation
// Il2CppName: set_deviceRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::TrackedDevice::*)(::UnityEngine::InputSystem::Controls::QuaternionControl*)>(&UnityEngine::InputSystem::TrackedDevice::set_deviceRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "QuaternionControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "set_deviceRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::TrackedDevice::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::TrackedDevice::*)()>(&UnityEngine::InputSystem::TrackedDevice::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::TrackedDevice*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
