// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlPath
#include "UnityEngine/InputSystem/InputControlPath.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.Utilities.Substring
#include "UnityEngine/InputSystem/Utilities/Substring.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent, "UnityEngine.InputSystem", "InputControlPath/ParsedPathComponent");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.ParsedPathComponent
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlPath::ParsedPathComponent/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.InputSystem.Utilities.Substring layout
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::InputSystem::Utilities::Substring layout;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::Substring) == 0x10);
    // public UnityEngine.InputSystem.Utilities.Substring[] usages
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::Utilities::Substring> usages;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Utilities::Substring>) == 0x8);
    // public UnityEngine.InputSystem.Utilities.Substring name
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::InputSystem::Utilities::Substring name;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::Substring) == 0x10);
    // public UnityEngine.InputSystem.Utilities.Substring displayName
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::InputSystem::Utilities::Substring displayName;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::Substring) == 0x10);
    public:
    // Creating value type constructor for type: ParsedPathComponent
    constexpr ParsedPathComponent(::UnityEngine::InputSystem::Utilities::Substring layout_ = {}, ::ArrayW<::UnityEngine::InputSystem::Utilities::Substring> usages_ = ::ArrayW<::UnityEngine::InputSystem::Utilities::Substring>(static_cast<void*>(nullptr)), ::UnityEngine::InputSystem::Utilities::Substring name_ = {}, ::UnityEngine::InputSystem::Utilities::Substring displayName_ = {}) noexcept : layout{layout_}, usages{usages_}, name{name_}, displayName{displayName_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.Substring layout
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::Substring& dyn_layout();
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.Substring[] usages
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Utilities::Substring>& dyn_usages();
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.Substring name
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::Substring& dyn_name();
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.Substring displayName
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::Substring& dyn_displayName();
    // public System.Boolean get_isWildcard()
    // Offset: 0xA41400
    bool get_isWildcard();
    // public System.Boolean get_isDoubleWildcard()
    // Offset: 0xA41408
    bool get_isDoubleWildcard();
    // public System.String ToHumanReadableString(System.String parentLayoutName, System.String parentControlPath, out System.String referencedLayoutName, out System.String controlPath, UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions options)
    // Offset: 0xA41410
    ::StringW ToHumanReadableString(::StringW parentLayoutName, ::StringW parentControlPath, ByRef<::StringW> referencedLayoutName, ByRef<::StringW> controlPath, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions options);
    // static private System.String ToHumanReadableString(UnityEngine.InputSystem.Utilities.Substring substring)
    // Offset: 0xD87F18
    static ::StringW ToHumanReadableString(::UnityEngine::InputSystem::Utilities::Substring substring);
    // public System.Boolean Matches(UnityEngine.InputSystem.InputControl control)
    // Offset: 0xA41418
    bool Matches(::UnityEngine::InputSystem::InputControl* control);
  }; // UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.ParsedPathComponent
  #pragma pack(pop)
  static check_size<sizeof(InputControlPath::ParsedPathComponent), 40 + sizeof(::UnityEngine::InputSystem::Utilities::Substring)> __UnityEngine_InputSystem_InputControlPath_ParsedPathComponentSizeCheck;
  static_assert(sizeof(InputControlPath::ParsedPathComponent) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::get_isWildcard
// Il2CppName: get_isWildcard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::*)()>(&UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::get_isWildcard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::ParsedPathComponent), "get_isWildcard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::get_isDoubleWildcard
// Il2CppName: get_isDoubleWildcard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::*)()>(&UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::get_isDoubleWildcard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::ParsedPathComponent), "get_isDoubleWildcard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::ToHumanReadableString
// Il2CppName: ToHumanReadableString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::*)(::StringW, ::StringW, ByRef<::StringW>, ByRef<::StringW>, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions)>(&UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::ToHumanReadableString)> {
  static const MethodInfo* get() {
    static auto* parentLayoutName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parentControlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* referencedLayoutName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/HumanReadableStringOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::ParsedPathComponent), "ToHumanReadableString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentLayoutName, parentControlPath, referencedLayoutName, controlPath, options});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::ToHumanReadableString
// Il2CppName: ToHumanReadableString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::InputSystem::Utilities::Substring)>(&UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::ToHumanReadableString)> {
  static const MethodInfo* get() {
    static auto* substring = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::ParsedPathComponent), "ToHumanReadableString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{substring});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::Matches
// Il2CppName: Matches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::ParsedPathComponent::Matches)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::ParsedPathComponent), "Matches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
