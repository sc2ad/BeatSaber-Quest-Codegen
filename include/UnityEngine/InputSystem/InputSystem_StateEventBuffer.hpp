// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputSystem
#include "UnityEngine/InputSystem/InputSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.StateEvent
#include "UnityEngine/InputSystem/LowLevel/StateEvent.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSystem::StateEventBuffer, "UnityEngine.InputSystem", "InputSystem/StateEventBuffer");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x1A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputSystem::StateEventBuffer/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer
    struct $data$e__FixedBuffer;
    // Size: 0x1
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer/UnityEngine.InputSystem.<data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte FixedElementField
      // Size: 0x1
      // Offset: 0x0
      uint8_t FixedElementField;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: $data$e__FixedBuffer
      constexpr $data$e__FixedBuffer(uint8_t FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Byte FixedElementField
      [[deprecated("Use field access instead!")]] uint8_t& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer/UnityEngine.InputSystem.<data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(InputSystem::StateEventBuffer::$data$e__FixedBuffer), 0 + sizeof(uint8_t)> __UnityEngine_InputSystem_InputSystem_StateEventBuffer_$data$e__FixedBufferSizeCheck;
    static_assert(sizeof(InputSystem::StateEventBuffer::$data$e__FixedBuffer) == 0x1);
    public:
    // public UnityEngine.InputSystem.LowLevel.StateEvent stateEvent
    // Size: 0x19
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::StateEvent stateEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::StateEvent) == 0x19);
    // [FixedBufferAttribute] Offset: 0x961628
    // public UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer/UnityEngine.InputSystem.<data>e__FixedBuffer data
    // Size: 0x1
    // Offset: 0x19
    ::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer data;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer) == 0x1);
    public:
    // Creating value type constructor for type: StateEventBuffer
    constexpr StateEventBuffer(::UnityEngine::InputSystem::LowLevel::StateEvent stateEvent_ = {}, ::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer data_ = {}) noexcept : stateEvent{stateEvent_}, data{data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 kMaxSize
    static constexpr const int kMaxSize = 512;
    // Get static field: static public System.Int32 kMaxSize
    static int _get_kMaxSize();
    // Set static field: static public System.Int32 kMaxSize
    static void _set_kMaxSize(int value);
    // Get instance field reference: public UnityEngine.InputSystem.LowLevel.StateEvent stateEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::StateEvent& dyn_stateEvent();
    // Get instance field reference: public UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer/UnityEngine.InputSystem.<data>e__FixedBuffer data
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer& dyn_data();
  }; // UnityEngine.InputSystem.InputSystem/UnityEngine.InputSystem.StateEventBuffer
  #pragma pack(pop)
  static check_size<sizeof(InputSystem::StateEventBuffer), 25 + sizeof(::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer)> __UnityEngine_InputSystem_InputSystem_StateEventBufferSizeCheck;
  static_assert(sizeof(InputSystem::StateEventBuffer) == 0x1A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputSystem::StateEventBuffer::$data$e__FixedBuffer, "UnityEngine.InputSystem", "InputSystem/StateEventBuffer/<data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
