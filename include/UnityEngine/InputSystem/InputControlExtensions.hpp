// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: InputControl`1<TValue>
  template<typename TValue>
  class InputControl_1;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: IInputStateTypeInfo
  class IInputStateTypeInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControlExtensions
  class InputControlExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputControlExtensions);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlExtensions*, "UnityEngine.InputSystem", "InputControlExtensions");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputControlExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class InputControlExtensions : public ::Il2CppObject {
    public:
    // static public TControl FindInParentChain(UnityEngine.InputSystem.InputControl control)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl FindInParentChain(::UnityEngine::InputSystem::InputControl* control) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::FindInParentChain");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "FindInParentChain", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control);
    }
    // static public System.Boolean IsPressed(UnityEngine.InputSystem.InputControl control, System.Single buttonPressPoint)
    // Offset: 0x1378BCC
    static bool IsPressed(::UnityEngine::InputSystem::InputControl* control, float buttonPressPoint);
    // static public System.Boolean IsActuated(UnityEngine.InputSystem.InputControl control, System.Single threshold)
    // Offset: 0x1378CE4
    static bool IsActuated(::UnityEngine::InputSystem::InputControl* control, float threshold);
    // static public System.Object ReadValueAsObject(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1372478
    static ::Il2CppObject* ReadValueAsObject(::UnityEngine::InputSystem::InputControl* control);
    // static public System.Void ReadValueIntoBuffer(UnityEngine.InputSystem.InputControl control, System.Void* buffer, System.Int32 bufferSize)
    // Offset: 0x1372220
    static void ReadValueIntoBuffer(::UnityEngine::InputSystem::InputControl* control, void* buffer, int bufferSize);
    // static public System.Object ReadDefaultValueAsObject(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1378DB0
    static ::Il2CppObject* ReadDefaultValueAsObject(::UnityEngine::InputSystem::InputControl* control);
    // static public TValue ReadValueFromEvent(UnityEngine.InputSystem.InputControl`1<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static TValue ReadValueFromEvent(::UnityEngine::InputSystem::InputControl_1<TValue>* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr inputEvent) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::ReadValueFromEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "ReadValueFromEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(inputEvent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, inputEvent);
    }
    // static public System.Boolean ReadValueFromEvent(UnityEngine.InputSystem.InputControl`1<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool ReadValueFromEvent(::UnityEngine::InputSystem::InputControl_1<TValue>* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr inputEvent, ByRef<TValue> value) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::ReadValueFromEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "ReadValueFromEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(inputEvent), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, inputEvent, byref(value));
    }
    // static public TValue ReadUnprocessedValueFromEvent(UnityEngine.InputSystem.InputControl`1<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static TValue ReadUnprocessedValueFromEvent(::UnityEngine::InputSystem::InputControl_1<TValue>* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::ReadUnprocessedValueFromEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "ReadUnprocessedValueFromEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(eventPtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, eventPtr);
    }
    // static public System.Boolean ReadUnprocessedValueFromEvent(UnityEngine.InputSystem.InputControl`1<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent, out TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool ReadUnprocessedValueFromEvent(::UnityEngine::InputSystem::InputControl_1<TValue>* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr inputEvent, ByRef<TValue> value) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::ReadUnprocessedValueFromEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "ReadUnprocessedValueFromEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(inputEvent), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, inputEvent, byref(value));
    }
    // static public System.Void WriteValueFromObjectIntoEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, System.Object value)
    // Offset: 0x1378E74
    static void WriteValueFromObjectIntoEvent(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, ::Il2CppObject* value);
    // static public System.Void WriteValueIntoState(UnityEngine.InputSystem.InputControl control, System.Void* statePtr)
    // Offset: 0x1379228
    static void WriteValueIntoState(::UnityEngine::InputSystem::InputControl* control, void* statePtr);
    // static public System.Void WriteValueIntoState(UnityEngine.InputSystem.InputControl control, TValue value, System.Void* statePtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void WriteValueIntoState(::UnityEngine::InputSystem::InputControl* control, TValue value, void* statePtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(statePtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, statePtr);
    }
    // static public System.Void WriteValueIntoState(UnityEngine.InputSystem.InputControl`1<TValue> control, TValue value, System.Void* statePtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void WriteValueIntoState(::UnityEngine::InputSystem::InputControl_1<TValue>* control, TValue value, void* statePtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(statePtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, statePtr);
    }
    // static public System.Void WriteValueIntoState(UnityEngine.InputSystem.InputControl`1<TValue> control, System.Void* statePtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void WriteValueIntoState(::UnityEngine::InputSystem::InputControl_1<TValue>* control, void* statePtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(statePtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, statePtr);
    }
    // static public System.Void WriteValueIntoState(UnityEngine.InputSystem.InputControl`1<TValue> control, TValue value, ref TState state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue, class TState>
    static void WriteValueIntoState(::UnityEngine::InputSystem::InputControl_1<TValue>* control, TValue value, ByRef<TState> state) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TState>, ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo> && std::is_convertible_v<TState, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(state)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, byref(state));
    }
    // static public System.Void WriteValueIntoEvent(UnityEngine.InputSystem.InputControl control, TValue value, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void WriteValueIntoEvent(::UnityEngine::InputSystem::InputControl* control, TValue value, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(eventPtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, eventPtr);
    }
    // static public System.Void WriteValueIntoEvent(UnityEngine.InputSystem.InputControl`1<TValue> control, TValue value, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void WriteValueIntoEvent(::UnityEngine::InputSystem::InputControl_1<TValue>* control, TValue value, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "WriteValueIntoEvent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(eventPtr)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, eventPtr);
    }
    // static public System.Void CopyState(UnityEngine.InputSystem.InputDevice device, System.Void* buffer, System.Int32 bufferSizeInBytes)
    // Offset: 0x13793A4
    static void CopyState(::UnityEngine::InputSystem::InputDevice* device, void* buffer, int bufferSizeInBytes);
    // static public System.Void CopyState(UnityEngine.InputSystem.InputDevice device, out TState state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TState>
    static void CopyState(::UnityEngine::InputSystem::InputDevice* device, ByRef<TState> state) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TState>, ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo> && std::is_convertible_v<TState, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::CopyState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "CopyState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractIndependentType<TState&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TState>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, device, byref(state));
    }
    // static public System.Boolean CheckStateIsAtDefault(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1370170
    static bool CheckStateIsAtDefault(::UnityEngine::InputSystem::InputControl* control);
    // static public System.Boolean CheckStateIsAtDefault(UnityEngine.InputSystem.InputControl control, System.Void* statePtr, System.Void* maskPtr)
    // Offset: 0x13794F8
    static bool CheckStateIsAtDefault(::UnityEngine::InputSystem::InputControl* control, void* statePtr, void* maskPtr);
    // static public System.Boolean CheckStateIsAtDefaultIgnoringNoise(UnityEngine.InputSystem.InputControl control)
    // Offset: 0x13796B0
    static bool CheckStateIsAtDefaultIgnoringNoise(::UnityEngine::InputSystem::InputControl* control);
    // static public System.Boolean CheckStateIsAtDefaultIgnoringNoise(UnityEngine.InputSystem.InputControl control, System.Void* statePtr)
    // Offset: 0x1379748
    static bool CheckStateIsAtDefaultIgnoringNoise(::UnityEngine::InputSystem::InputControl* control, void* statePtr);
    // static public System.Boolean CompareStateIgnoringNoise(UnityEngine.InputSystem.InputControl control, System.Void* statePtr)
    // Offset: 0x1379810
    static bool CompareStateIgnoringNoise(::UnityEngine::InputSystem::InputControl* control, void* statePtr);
    // static public System.Boolean CompareState(UnityEngine.InputSystem.InputControl control, System.Void* firstStatePtr, System.Void* secondStatePtr, System.Void* maskPtr)
    // Offset: 0x13795EC
    static bool CompareState(::UnityEngine::InputSystem::InputControl* control, void* firstStatePtr, void* secondStatePtr, void* maskPtr);
    // static public System.Boolean CompareState(UnityEngine.InputSystem.InputControl control, System.Void* statePtr, System.Void* maskPtr)
    // Offset: 0x1379914
    static bool CompareState(::UnityEngine::InputSystem::InputControl* control, void* statePtr, void* maskPtr);
    // static public System.Boolean HasValueChangeInState(UnityEngine.InputSystem.InputControl control, System.Void* statePtr)
    // Offset: 0x13799E4
    static bool HasValueChangeInState(::UnityEngine::InputSystem::InputControl* control, void* statePtr);
    // static public System.Boolean HasValueChangeInEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x1379AB4
    static bool HasValueChangeInEvent(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // static public System.Void* GetStatePtrFromStateEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0x1378F38
    static void* GetStatePtrFromStateEvent(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // static public System.Void QueueValueChange(UnityEngine.InputSystem.InputControl`1<TValue> control, TValue value, System.Double time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void QueueValueChange(::UnityEngine::InputSystem::InputControl_1<TValue>* control, TValue value, double time) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::QueueValueChange");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "QueueValueChange", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(time)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, value, time);
    }
    // static public System.Void AccumulateValueInEvent(UnityEngine.InputSystem.InputControl`1<System.Single> control, System.Void* currentStatePtr, UnityEngine.InputSystem.LowLevel.InputEventPtr newState)
    // Offset: 0x1379BA8
    static void AccumulateValueInEvent(::UnityEngine::InputSystem::InputControl_1<float>* control, void* currentStatePtr, ::UnityEngine::InputSystem::LowLevel::InputEventPtr newState);
    // static public System.Void FindControlsRecursive(UnityEngine.InputSystem.InputControl parent, System.Collections.Generic.IList`1<TControl> controls, System.Func`2<TControl,System.Boolean> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static void FindControlsRecursive(::UnityEngine::InputSystem::InputControl* parent, ::System::Collections::Generic::IList_1<TControl>* controls, ::System::Func_2<TControl, bool>* predicate) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlExtensions::FindControlsRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlExtensions", "FindControlsRecursive", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(controls), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, parent, controls, predicate);
    }
    // static System.String BuildPath(UnityEngine.InputSystem.InputControl control, System.String deviceLayout, System.Text.StringBuilder builder)
    // Offset: 0x1379C9C
    static ::StringW BuildPath(::UnityEngine::InputSystem::InputControl* control, ::StringW deviceLayout, ::System::Text::StringBuilder* builder);
  }; // UnityEngine.InputSystem.InputControlExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::FindInParentChain
// Il2CppName: FindInParentChain
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::IsPressed
// Il2CppName: IsPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, float)>(&UnityEngine::InputSystem::InputControlExtensions::IsPressed)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* buttonPressPoint = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "IsPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, buttonPressPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::IsActuated
// Il2CppName: IsActuated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, float)>(&UnityEngine::InputSystem::InputControlExtensions::IsActuated)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* threshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "IsActuated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, threshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadValueAsObject
// Il2CppName: ReadValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlExtensions::ReadValueAsObject)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "ReadValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadValueIntoBuffer
// Il2CppName: ReadValueIntoBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputControl*, void*, int)>(&UnityEngine::InputSystem::InputControlExtensions::ReadValueIntoBuffer)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "ReadValueIntoBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, buffer, bufferSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadDefaultValueAsObject
// Il2CppName: ReadDefaultValueAsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlExtensions::ReadDefaultValueAsObject)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "ReadDefaultValueAsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadValueFromEvent
// Il2CppName: ReadValueFromEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadValueFromEvent
// Il2CppName: ReadValueFromEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadUnprocessedValueFromEvent
// Il2CppName: ReadUnprocessedValueFromEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::ReadUnprocessedValueFromEvent
// Il2CppName: ReadUnprocessedValueFromEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueFromObjectIntoEvent
// Il2CppName: WriteValueFromObjectIntoEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::Il2CppObject*)>(&UnityEngine::InputSystem::InputControlExtensions::WriteValueFromObjectIntoEvent)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "WriteValueFromObjectIntoEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState
// Il2CppName: WriteValueIntoState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputControl*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "WriteValueIntoState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState
// Il2CppName: WriteValueIntoState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState
// Il2CppName: WriteValueIntoState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState
// Il2CppName: WriteValueIntoState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoState
// Il2CppName: WriteValueIntoState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoEvent
// Il2CppName: WriteValueIntoEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::WriteValueIntoEvent
// Il2CppName: WriteValueIntoEvent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CopyState
// Il2CppName: CopyState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputDevice*, void*, int)>(&UnityEngine::InputSystem::InputControlExtensions::CopyState)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* bufferSizeInBytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CopyState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, buffer, bufferSizeInBytes});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CopyState
// Il2CppName: CopyState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefault
// Il2CppName: CheckStateIsAtDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefault)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CheckStateIsAtDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefault
// Il2CppName: CheckStateIsAtDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefault)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* maskPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CheckStateIsAtDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr, maskPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefaultIgnoringNoise
// Il2CppName: CheckStateIsAtDefaultIgnoringNoise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefaultIgnoringNoise)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CheckStateIsAtDefaultIgnoringNoise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefaultIgnoringNoise
// Il2CppName: CheckStateIsAtDefaultIgnoringNoise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::CheckStateIsAtDefaultIgnoringNoise)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CheckStateIsAtDefaultIgnoringNoise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CompareStateIgnoringNoise
// Il2CppName: CompareStateIgnoringNoise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::CompareStateIgnoringNoise)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CompareStateIgnoringNoise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CompareState
// Il2CppName: CompareState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*, void*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::CompareState)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* firstStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* secondStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* maskPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CompareState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, firstStatePtr, secondStatePtr, maskPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::CompareState
// Il2CppName: CompareState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::CompareState)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* maskPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "CompareState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr, maskPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::HasValueChangeInState
// Il2CppName: HasValueChangeInState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, void*)>(&UnityEngine::InputSystem::InputControlExtensions::HasValueChangeInState)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "HasValueChangeInState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::HasValueChangeInEvent
// Il2CppName: HasValueChangeInEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputControlExtensions::HasValueChangeInEvent)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "HasValueChangeInEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::GetStatePtrFromStateEvent
// Il2CppName: GetStatePtrFromStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputControlExtensions::GetStatePtrFromStateEvent)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "GetStatePtrFromStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::QueueValueChange
// Il2CppName: QueueValueChange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::AccumulateValueInEvent
// Il2CppName: AccumulateValueInEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::InputControl_1<float>*, void*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::InputControlExtensions::AccumulateValueInEvent)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* currentStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "AccumulateValueInEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, currentStatePtr, newState});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::FindControlsRecursive
// Il2CppName: FindControlsRecursive
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlExtensions::BuildPath
// Il2CppName: BuildPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::InputSystem::InputControl*, ::StringW, ::System::Text::StringBuilder*)>(&UnityEngine::InputSystem::InputControlExtensions::BuildPath)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* deviceLayout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlExtensions*), "BuildPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, deviceLayout, builder});
  }
};
