// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
  // Forward declaring type: InputActionReference
  class InputActionReference;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionProperty
  struct InputActionProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionProperty, "UnityEngine.InputSystem", "InputActionProperty");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionProperty
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionProperty/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionProperty>, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputAction*>, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionReference*>*/ {
    public:
    public:
    // private System.Boolean m_UseReference
    // Size: 0x1
    // Offset: 0x0
    bool m_UseReference;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseReference and: m_Action
    char __padding0[0x7] = {};
    // private UnityEngine.InputSystem.InputAction m_Action
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::InputSystem::InputAction* m_Action;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputAction*) == 0x8);
    // private UnityEngine.InputSystem.InputActionReference m_Reference
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputActionReference* m_Reference;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionReference*) == 0x8);
    public:
    // Creating value type constructor for type: InputActionProperty
    constexpr InputActionProperty(bool m_UseReference_ = {}, ::UnityEngine::InputSystem::InputAction* m_Action_ = {}, ::UnityEngine::InputSystem::InputActionReference* m_Reference_ = {}) noexcept : m_UseReference{m_UseReference_}, m_Action{m_Action_}, m_Reference{m_Reference_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionProperty>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionProperty>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputActionProperty>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputAction*>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputAction*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputAction*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionReference*>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputActionReference*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputActionReference*>*>(this);
    }
    // Get instance field reference: private System.Boolean m_UseReference
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseReference();
    // Get instance field reference: private UnityEngine.InputSystem.InputAction m_Action
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputAction*& dyn_m_Action();
    // Get instance field reference: private UnityEngine.InputSystem.InputActionReference m_Reference
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionReference*& dyn_m_Reference();
    // public UnityEngine.InputSystem.InputAction get_action()
    // Offset: 0xA4A5B4
    ::UnityEngine::InputSystem::InputAction* get_action();
    // public UnityEngine.InputSystem.InputActionReference get_reference()
    // Offset: 0xA4A5BC
    ::UnityEngine::InputSystem::InputActionReference* get_reference();
    // public System.Void .ctor(UnityEngine.InputSystem.InputAction action)
    // Offset: 0xA4A5D4
    InputActionProperty(::UnityEngine::InputSystem::InputAction* action);
    // public System.Void .ctor(UnityEngine.InputSystem.InputActionReference reference)
    // Offset: 0xA4A5E0
    InputActionProperty(::UnityEngine::InputSystem::InputActionReference* reference);
    // public System.Boolean Equals(UnityEngine.InputSystem.InputActionProperty other)
    // Offset: 0xA4A5F0
    bool Equals(::UnityEngine::InputSystem::InputActionProperty other);
    // public System.Boolean Equals(UnityEngine.InputSystem.InputAction other)
    // Offset: 0xA4A628
    bool Equals(::UnityEngine::InputSystem::InputAction* other);
    // public System.Boolean Equals(UnityEngine.InputSystem.InputActionReference other)
    // Offset: 0xA4A654
    bool Equals(::UnityEngine::InputSystem::InputActionReference* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA4A65C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA4A664
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.InputActionProperty
  #pragma pack(pop)
  static check_size<sizeof(InputActionProperty), 16 + sizeof(::UnityEngine::InputSystem::InputActionReference*)> __UnityEngine_InputSystem_InputActionPropertySizeCheck;
  static_assert(sizeof(InputActionProperty) == 0x18);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.InputActionProperty left, UnityEngine.InputSystem.InputActionProperty right)
  // Offset: 0xF44560
  bool operator ==(const ::UnityEngine::InputSystem::InputActionProperty& left, const ::UnityEngine::InputSystem::InputActionProperty& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.InputActionProperty left, UnityEngine.InputSystem.InputActionProperty right)
  // Offset: 0xF44594
  bool operator !=(const ::UnityEngine::InputSystem::InputActionProperty& left, const ::UnityEngine::InputSystem::InputActionProperty& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::get_action
// Il2CppName: get_action
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::InputActionProperty::*)()>(&UnityEngine::InputSystem::InputActionProperty::get_action)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "get_action", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::get_reference
// Il2CppName: get_reference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionReference* (UnityEngine::InputSystem::InputActionProperty::*)()>(&UnityEngine::InputSystem::InputActionProperty::get_reference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "get_reference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::InputActionProperty
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::InputActionProperty
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionProperty::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::InputActionProperty::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionProperty::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::InputActionProperty::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionProperty::*)(::UnityEngine::InputSystem::InputActionReference*)>(&UnityEngine::InputSystem::InputActionProperty::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionReference")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputActionProperty::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::InputActionProperty::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputActionProperty::*)()>(&UnityEngine::InputSystem::InputActionProperty::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionProperty), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionProperty::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
