// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IObservable`1
#include "System/IObservable_1.hpp"
// Including type: System.IObserver`1
#include "System/IObserver_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputDeviceDescription
#include "UnityEngine/InputSystem/Layouts/InputDeviceDescription.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: MessageType because it is already included!
  // Forward declaring type: InputManager
  class InputManager;
  // Skipping declaration: Message because it is already included!
  // Skipping declaration: RemoteInputDevice because it is already included!
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputDeviceChange
  struct InputDeviceChange;
  // Forward declaring type: InputControlLayoutChange
  struct InputControlLayoutChange;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventPtr
  struct InputEventPtr;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputRemoting
  class InputRemoting;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputRemoting);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting*, "UnityEngine.InputSystem", "InputRemoting");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputRemoting
  // [TokenAttribute] Offset: FFFFFFFF
  class InputRemoting : public ::Il2CppObject/*, public ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>, public ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::MessageType
    struct MessageType;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::Message
    struct Message;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::Flags
    struct Flags;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::RemoteSender
    struct RemoteSender;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice
    struct RemoteInputDevice;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::Subscriber
    class Subscriber;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::ConnectMsg
    class ConnectMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::StartSendingMsg
    class StartSendingMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::StopSendingMsg
    class StopSendingMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::DisconnectMsg
    class DisconnectMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::NewLayoutMsg
    class NewLayoutMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::RemoveLayoutMsg
    class RemoveLayoutMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::NewDeviceMsg
    class NewDeviceMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::NewEventsMsg
    class NewEventsMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::ChangeUsageMsg
    class ChangeUsageMsg;
    // Nested type: ::UnityEngine::InputSystem::InputRemoting::RemoveDeviceMsg
    class RemoveDeviceMsg;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MessageType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MessageType
      constexpr MessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Connect
      static constexpr const int Connect = 0;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Connect
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_Connect();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Connect
      static void _set_Connect(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Disconnect
      static constexpr const int Disconnect = 1;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Disconnect
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_Disconnect();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType Disconnect
      static void _set_Disconnect(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewLayout
      static constexpr const int NewLayout = 2;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewLayout
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_NewLayout();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewLayout
      static void _set_NewLayout(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewDevice
      static constexpr const int NewDevice = 3;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewDevice
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_NewDevice();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewDevice
      static void _set_NewDevice(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewEvents
      static constexpr const int NewEvents = 4;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewEvents
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_NewEvents();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType NewEvents
      static void _set_NewEvents(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveDevice
      static constexpr const int RemoveDevice = 5;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveDevice
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_RemoveDevice();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveDevice
      static void _set_RemoveDevice(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveLayout
      static constexpr const int RemoveLayout = 6;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveLayout
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_RemoveLayout();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType RemoveLayout
      static void _set_RemoveLayout(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType ChangeUsages
      static constexpr const int ChangeUsages = 7;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType ChangeUsages
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_ChangeUsages();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType ChangeUsages
      static void _set_ChangeUsages(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StartSending
      static constexpr const int StartSending = 8;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StartSending
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_StartSending();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StartSending
      static void _set_StartSending(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StopSending
      static constexpr const int StopSending = 9;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StopSending
      static ::UnityEngine::InputSystem::InputRemoting::MessageType _get_StopSending();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType StopSending
      static void _set_StopSending(::UnityEngine::InputSystem::InputRemoting::MessageType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType
    #pragma pack(pop)
    static check_size<sizeof(InputRemoting::MessageType), 0 + sizeof(int)> __UnityEngine_InputSystem_InputRemoting_MessageTypeSizeCheck;
    static_assert(sizeof(InputRemoting::MessageType) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message
    // [TokenAttribute] Offset: FFFFFFFF
    struct Message/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 participantId
      // Size: 0x4
      // Offset: 0x0
      int participantId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType type
      // Size: 0x4
      // Offset: 0x4
      ::UnityEngine::InputSystem::InputRemoting::MessageType type;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputRemoting::MessageType) == 0x4);
      // public System.Byte[] data
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<uint8_t> data;
      // Field size check
      static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
      public:
      // Creating value type constructor for type: Message
      constexpr Message(int participantId_ = {}, ::UnityEngine::InputSystem::InputRemoting::MessageType type_ = {}, ::ArrayW<uint8_t> data_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : participantId{participantId_}, type{type_}, data{data_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 participantId
      [[deprecated("Use field access instead!")]] int& dyn_participantId();
      // Get instance field reference: public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.MessageType type
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputRemoting::MessageType& dyn_type();
      // Get instance field reference: public System.Byte[] data
      [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_data();
    }; // UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message
    #pragma pack(pop)
    static check_size<sizeof(InputRemoting::Message), 8 + sizeof(::ArrayW<uint8_t>)> __UnityEngine_InputSystem_InputRemoting_MessageSizeCheck;
    static_assert(sizeof(InputRemoting::Message) == 0x10);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Flags
      constexpr Flags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags Sending
      static constexpr const int Sending = 1;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags Sending
      static ::UnityEngine::InputSystem::InputRemoting::Flags _get_Sending();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags Sending
      static void _set_Sending(::UnityEngine::InputSystem::InputRemoting::Flags value);
      // static field const value: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags StartSendingOnConnect
      static constexpr const int StartSendingOnConnect = 2;
      // Get static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags StartSendingOnConnect
      static ::UnityEngine::InputSystem::InputRemoting::Flags _get_StartSendingOnConnect();
      // Set static field: static public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags StartSendingOnConnect
      static void _set_StartSendingOnConnect(::UnityEngine::InputSystem::InputRemoting::Flags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags
    #pragma pack(pop)
    static check_size<sizeof(InputRemoting::Flags), 0 + sizeof(int)> __UnityEngine_InputSystem_InputRemoting_FlagsSizeCheck;
    static_assert(sizeof(InputRemoting::Flags) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteSender
    // [TokenAttribute] Offset: FFFFFFFF
    struct RemoteSender/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 senderId
      // Size: 0x4
      // Offset: 0x0
      int senderId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: senderId and: layouts
      char __padding0[0x4] = {};
      // public System.String[] layouts
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::StringW> layouts;
      // Field size check
      static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
      // public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteInputDevice[] devices
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice> devices;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice>) == 0x8);
      public:
      // Creating value type constructor for type: RemoteSender
      constexpr RemoteSender(int senderId_ = {}, ::ArrayW<::StringW> layouts_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice> devices_ = ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice>(static_cast<void*>(nullptr))) noexcept : senderId{senderId_}, layouts{layouts_}, devices{devices_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 senderId
      [[deprecated("Use field access instead!")]] int& dyn_senderId();
      // Get instance field reference: public System.String[] layouts
      [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_layouts();
      // Get instance field reference: public UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteInputDevice[] devices
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice>& dyn_devices();
    }; // UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteSender
    #pragma pack(pop)
    static check_size<sizeof(InputRemoting::RemoteSender), 16 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice>)> __UnityEngine_InputSystem_InputRemoting_RemoteSenderSizeCheck;
    static_assert(sizeof(InputRemoting::RemoteSender) == 0x18);
    // Size: 0x48
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteInputDevice
    // [TokenAttribute] Offset: FFFFFFFF
    struct RemoteInputDevice/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 remoteId
      // Size: 0x4
      // Offset: 0x0
      int remoteId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 localId
      // Size: 0x4
      // Offset: 0x4
      int localId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.String layoutName
      // Size: 0x8
      // Offset: 0x8
      ::StringW layoutName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public UnityEngine.InputSystem.Layouts.InputDeviceDescription description
      // Size: 0x38
      // Offset: 0x10
      ::UnityEngine::InputSystem::Layouts::InputDeviceDescription description;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::Layouts::InputDeviceDescription) == 0x38);
      public:
      // Creating value type constructor for type: RemoteInputDevice
      constexpr RemoteInputDevice(int remoteId_ = {}, int localId_ = {}, ::StringW layoutName_ = {}, ::UnityEngine::InputSystem::Layouts::InputDeviceDescription description_ = {}) noexcept : remoteId{remoteId_}, localId{localId_}, layoutName{layoutName_}, description{description_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 remoteId
      [[deprecated("Use field access instead!")]] int& dyn_remoteId();
      // Get instance field reference: public System.Int32 localId
      [[deprecated("Use field access instead!")]] int& dyn_localId();
      // Get instance field reference: public System.String layoutName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_layoutName();
      // Get instance field reference: public UnityEngine.InputSystem.Layouts.InputDeviceDescription description
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Layouts::InputDeviceDescription& dyn_description();
    }; // UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteInputDevice
    #pragma pack(pop)
    static check_size<sizeof(InputRemoting::RemoteInputDevice), 16 + sizeof(::UnityEngine::InputSystem::Layouts::InputDeviceDescription)> __UnityEngine_InputSystem_InputRemoting_RemoteInputDeviceSizeCheck;
    static_assert(sizeof(InputRemoting::RemoteInputDevice) == 0x48);
    public:
    // private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags m_Flags
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputRemoting::Flags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputRemoting::Flags) == 0x4);
    // Padding between fields: m_Flags and: m_LocalManager
    char __padding0[0x4] = {};
    // private UnityEngine.InputSystem.InputManager m_LocalManager
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::InputSystem::InputManager* m_LocalManager;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputManager*) == 0x8);
    // private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Subscriber[] m_Subscribers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::InputSystem::InputRemoting::Subscriber*> m_Subscribers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputRemoting::Subscriber*>) == 0x8);
    // private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteSender[] m_Senders
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteSender> m_Senders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteSender>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>
    operator ::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>() noexcept {
      return *reinterpret_cast<::System::IObservable_1<::UnityEngine::InputSystem::InputRemoting::Message>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>
    operator ::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>() noexcept {
      return *reinterpret_cast<::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*>(this);
    }
    // Get instance field reference: private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Flags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputRemoting::Flags& dyn_m_Flags();
    // Get instance field reference: private UnityEngine.InputSystem.InputManager m_LocalManager
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputManager*& dyn_m_LocalManager();
    // Get instance field reference: private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Subscriber[] m_Subscribers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputRemoting::Subscriber*>& dyn_m_Subscribers();
    // Get instance field reference: private UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.RemoteSender[] m_Senders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteSender>& dyn_m_Senders();
    // public System.Boolean get_sending()
    // Offset: 0xD95A48
    bool get_sending();
    // private System.Void set_sending(System.Boolean value)
    // Offset: 0xD95A54
    void set_sending(bool value);
    // System.Void .ctor(UnityEngine.InputSystem.InputManager manager, System.Boolean startSendingOnConnect)
    // Offset: 0xD95A70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputRemoting* New_ctor(::UnityEngine::InputSystem::InputManager* manager, bool startSendingOnConnect) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputRemoting::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputRemoting*, creationType>(manager, startSendingOnConnect)));
    }
    // public System.Void StartSending()
    // Offset: 0xD95B20
    void StartSending();
    // public System.Void StopSending()
    // Offset: 0xD95EA8
    void StopSending();
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext(UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message msg)
    // Offset: 0xD95FE0
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext(::UnityEngine::InputSystem::InputRemoting::Message msg);
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError(System.Exception error)
    // Offset: 0xD969D8
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError(::System::Exception* error);
    // private System.Void System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted()
    // Offset: 0xD969DC
    void System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted();
    // public System.IDisposable Subscribe(System.IObserver`1<UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message> observer)
    // Offset: 0xD969E0
    ::System::IDisposable* Subscribe(::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>* observer);
    // private System.Void SendAllDevices()
    // Offset: 0xD95C6C
    void SendAllDevices();
    // private System.Void SendDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0xD96AB8
    void SendDevice(::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void SendEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.InputDevice device)
    // Offset: 0xD96D20
    void SendEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, ::UnityEngine::InputSystem::InputDevice* device);
    // private System.Void SendDeviceChange(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.InputDeviceChange change)
    // Offset: 0xD96E58
    void SendDeviceChange(::UnityEngine::InputSystem::InputDevice* device, ::UnityEngine::InputSystem::InputDeviceChange change);
    // private System.Void SendLayoutChange(System.String layout, UnityEngine.InputSystem.InputControlLayoutChange change)
    // Offset: 0xD970E4
    void SendLayoutChange(::StringW layout, ::UnityEngine::InputSystem::InputControlLayoutChange change);
    // private System.Void Send(UnityEngine.InputSystem.InputRemoting/UnityEngine.InputSystem.Message msg)
    // Offset: 0xD96C04
    void Send(::UnityEngine::InputSystem::InputRemoting::Message msg);
    // private System.Int32 FindOrCreateSenderRecord(System.Int32 senderId)
    // Offset: 0xD9742C
    int FindOrCreateSenderRecord(int senderId);
    // private System.Int32 FindLocalDeviceId(System.Int32 remoteDeviceId, System.Int32 senderIndex)
    // Offset: 0xD974E0
    int FindLocalDeviceId(int remoteDeviceId, int senderIndex);
    // private UnityEngine.InputSystem.InputDevice TryGetDeviceByRemoteId(System.Int32 remoteDeviceId, System.Int32 senderIndex)
    // Offset: 0xD97560
    ::UnityEngine::InputSystem::InputDevice* TryGetDeviceByRemoteId(int remoteDeviceId, int senderIndex);
    // public System.Void RemoveRemoteDevices(System.Int32 participantId)
    // Offset: 0xD97594
    void RemoveRemoteDevices(int participantId);
    // static private System.Byte[] SerializeData(TData data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    static ::ArrayW<uint8_t> SerializeData(TData data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputRemoting::SerializeData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputRemoting", "SerializeData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<uint8_t>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, data);
    }
    // static private TData DeserializeData(System.Byte[] data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    static TData DeserializeData(::ArrayW<uint8_t> data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputRemoting::DeserializeData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputRemoting", "DeserializeData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TData, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, data);
    }
  }; // UnityEngine.InputSystem.InputRemoting
  #pragma pack(pop)
  static check_size<sizeof(InputRemoting), 40 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputRemoting::RemoteSender>)> __UnityEngine_InputSystem_InputRemotingSizeCheck;
  static_assert(sizeof(InputRemoting) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting::RemoteInputDevice, "UnityEngine.InputSystem", "InputRemoting/RemoteInputDevice");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting::RemoteSender, "UnityEngine.InputSystem", "InputRemoting/RemoteSender");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting::Flags, "UnityEngine.InputSystem", "InputRemoting/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting::Message, "UnityEngine.InputSystem", "InputRemoting/Message");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputRemoting::MessageType, "UnityEngine.InputSystem", "InputRemoting/MessageType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::get_sending
// Il2CppName: get_sending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputRemoting::*)()>(&UnityEngine::InputSystem::InputRemoting::get_sending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "get_sending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::set_sending
// Il2CppName: set_sending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(bool)>(&UnityEngine::InputSystem::InputRemoting::set_sending)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "set_sending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::StartSending
// Il2CppName: StartSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)()>(&UnityEngine::InputSystem::InputRemoting::StartSending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "StartSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::StopSending
// Il2CppName: StopSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)()>(&UnityEngine::InputSystem::InputRemoting::StopSending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "StopSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::UnityEngine::InputSystem::InputRemoting::Message)>(&UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnNext)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::System::Exception*)>(&UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted
// Il2CppName: System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)()>(&UnityEngine::InputSystem::InputRemoting::System_IObserver$UnityEngine_InputSystem_InputRemoting_Message$_OnCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>.OnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IDisposable* (UnityEngine::InputSystem::InputRemoting::*)(::System::IObserver_1<::UnityEngine::InputSystem::InputRemoting::Message>*)>(&UnityEngine::InputSystem::InputRemoting::Subscribe)> {
  static const MethodInfo* get() {
    static auto* observer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IObserver`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/Message")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{observer});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SendAllDevices
// Il2CppName: SendAllDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)()>(&UnityEngine::InputSystem::InputRemoting::SendAllDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "SendAllDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SendDevice
// Il2CppName: SendDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputRemoting::SendDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "SendDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputRemoting::SendEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr, device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SendDeviceChange
// Il2CppName: SendDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDeviceChange)>(&UnityEngine::InputSystem::InputRemoting::SendDeviceChange)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDeviceChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "SendDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SendLayoutChange
// Il2CppName: SendLayoutChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::StringW, ::UnityEngine::InputSystem::InputControlLayoutChange)>(&UnityEngine::InputSystem::InputRemoting::SendLayoutChange)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlLayoutChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "SendLayoutChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout, change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(::UnityEngine::InputSystem::InputRemoting::Message)>(&UnityEngine::InputSystem::InputRemoting::Send)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputRemoting/Message")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::FindOrCreateSenderRecord
// Il2CppName: FindOrCreateSenderRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputRemoting::*)(int)>(&UnityEngine::InputSystem::InputRemoting::FindOrCreateSenderRecord)> {
  static const MethodInfo* get() {
    static auto* senderId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "FindOrCreateSenderRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{senderId});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::FindLocalDeviceId
// Il2CppName: FindLocalDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputRemoting::*)(int, int)>(&UnityEngine::InputSystem::InputRemoting::FindLocalDeviceId)> {
  static const MethodInfo* get() {
    static auto* remoteDeviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* senderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "FindLocalDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteDeviceId, senderIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::TryGetDeviceByRemoteId
// Il2CppName: TryGetDeviceByRemoteId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputDevice* (UnityEngine::InputSystem::InputRemoting::*)(int, int)>(&UnityEngine::InputSystem::InputRemoting::TryGetDeviceByRemoteId)> {
  static const MethodInfo* get() {
    static auto* remoteDeviceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* senderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "TryGetDeviceByRemoteId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteDeviceId, senderIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::RemoveRemoteDevices
// Il2CppName: RemoveRemoteDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputRemoting::*)(int)>(&UnityEngine::InputSystem::InputRemoting::RemoveRemoteDevices)> {
  static const MethodInfo* get() {
    static auto* participantId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputRemoting*), "RemoveRemoteDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{participantId});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::SerializeData
// Il2CppName: SerializeData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputRemoting::DeserializeData
// Il2CppName: DeserializeData
// Cannot write MetadataGetter for generic methods!
