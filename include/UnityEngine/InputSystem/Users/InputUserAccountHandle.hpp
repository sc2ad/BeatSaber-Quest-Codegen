// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.InputSystem.Users
namespace UnityEngine::InputSystem::Users {
  // Forward declaring type: InputUserAccountHandle
  struct InputUserAccountHandle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Users::InputUserAccountHandle, "UnityEngine.InputSystem.Users", "InputUserAccountHandle");
// Type namespace: UnityEngine.InputSystem.Users
namespace UnityEngine::InputSystem::Users {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Users.InputUserAccountHandle
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputUserAccountHandle/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle>*/ {
    public:
    public:
    // private System.String m_ApiName
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_ApiName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UInt64 m_Handle
    // Size: 0x8
    // Offset: 0x8
    uint64_t m_Handle;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: InputUserAccountHandle
    constexpr InputUserAccountHandle(::StringW m_ApiName_ = {}, uint64_t m_Handle_ = {}) noexcept : m_ApiName{m_ApiName_}, m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle>*>(this);
    }
    // Get instance field reference: private System.String m_ApiName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ApiName();
    // Get instance field reference: private System.UInt64 m_Handle
    [[deprecated("Use field access instead!")]] uint64_t& dyn_m_Handle();
    // public System.String get_apiName()
    // Offset: 0xA4F348
    ::StringW get_apiName();
    // public System.UInt64 get_handle()
    // Offset: 0xA4F350
    uint64_t get_handle();
    // public System.Void .ctor(System.String apiName, System.UInt64 handle)
    // Offset: 0xA4F358
    // ABORTED: conflicts with another method.  InputUserAccountHandle(::StringW apiName, uint64_t handle);
    // public System.Boolean Equals(UnityEngine.InputSystem.Users.InputUserAccountHandle other)
    // Offset: 0xA4F368
    bool Equals(::UnityEngine::InputSystem::Users::InputUserAccountHandle other);
    // public override System.String ToString()
    // Offset: 0xA4F360
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA4F370
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA4F378
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.Users.InputUserAccountHandle
  #pragma pack(pop)
  static check_size<sizeof(InputUserAccountHandle), 8 + sizeof(uint64_t)> __UnityEngine_InputSystem_Users_InputUserAccountHandleSizeCheck;
  static_assert(sizeof(InputUserAccountHandle) == 0x10);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Users.InputUserAccountHandle left, UnityEngine.InputSystem.Users.InputUserAccountHandle right)
  // Offset: 0x100D0FC
  bool operator ==(const ::UnityEngine::InputSystem::Users::InputUserAccountHandle& left, const ::UnityEngine::InputSystem::Users::InputUserAccountHandle& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Users.InputUserAccountHandle left, UnityEngine.InputSystem.Users.InputUserAccountHandle right)
  // Offset: 0x100E308
  bool operator !=(const ::UnityEngine::InputSystem::Users::InputUserAccountHandle& left, const ::UnityEngine::InputSystem::Users::InputUserAccountHandle& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)()>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::get_apiName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::get_handle
// Il2CppName: get_handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)()>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::get_handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "get_handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::InputUserAccountHandle
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)(::UnityEngine::InputSystem::Users::InputUserAccountHandle)>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Users", "InputUserAccountHandle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)()>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Users::InputUserAccountHandle::*)()>(&UnityEngine::InputSystem::Users::InputUserAccountHandle::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUserAccountHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUserAccountHandle::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
