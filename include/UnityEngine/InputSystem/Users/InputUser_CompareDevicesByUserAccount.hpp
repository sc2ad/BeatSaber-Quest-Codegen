// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Users.InputUser
#include "UnityEngine/InputSystem/Users/InputUser.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IComparer`1
#include "System/Collections/Generic/IComparer_1.hpp"
// Including type: UnityEngine.InputSystem.Users.InputUserAccountHandle
#include "UnityEngine/InputSystem/Users/InputUserAccountHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount, "UnityEngine.InputSystem.Users", "InputUser/CompareDevicesByUserAccount");
// Type namespace: UnityEngine.InputSystem.Users
namespace UnityEngine::InputSystem::Users {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Users.InputUser/UnityEngine.InputSystem.Users.CompareDevicesByUserAccount
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputUser::CompareDevicesByUserAccount/*, public ::System::ValueType, public ::System::Collections::Generic::IComparer_1<::UnityEngine::InputSystem::InputDevice*>*/ {
    public:
    public:
    // public UnityEngine.InputSystem.Users.InputUserAccountHandle platformUserAccountHandle
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::InputSystem::Users::InputUserAccountHandle platformUserAccountHandle;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Users::InputUserAccountHandle) == 0x10);
    public:
    // Creating value type constructor for type: CompareDevicesByUserAccount
    constexpr CompareDevicesByUserAccount(::UnityEngine::InputSystem::Users::InputUserAccountHandle platformUserAccountHandle_ = {}) noexcept : platformUserAccountHandle{platformUserAccountHandle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IComparer_1<::UnityEngine::InputSystem::InputDevice*>
    operator ::System::Collections::Generic::IComparer_1<::UnityEngine::InputSystem::InputDevice*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IComparer_1<::UnityEngine::InputSystem::InputDevice*>*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::InputSystem::Users::InputUserAccountHandle
    constexpr operator ::UnityEngine::InputSystem::Users::InputUserAccountHandle() const noexcept {
      return platformUserAccountHandle;
    }
    // Get instance field reference: public UnityEngine.InputSystem.Users.InputUserAccountHandle platformUserAccountHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Users::InputUserAccountHandle& dyn_platformUserAccountHandle();
    // public System.Int32 Compare(UnityEngine.InputSystem.InputDevice x, UnityEngine.InputSystem.InputDevice y)
    // Offset: 0xA4F264
    int Compare(::UnityEngine::InputSystem::InputDevice* x, ::UnityEngine::InputSystem::InputDevice* y);
    // static private System.Nullable`1<UnityEngine.InputSystem.Users.InputUserAccountHandle> GetUserAccountHandleForDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0x100ECF0
    static ::System::Nullable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle> GetUserAccountHandleForDevice(::UnityEngine::InputSystem::InputDevice* device);
  }; // UnityEngine.InputSystem.Users.InputUser/UnityEngine.InputSystem.Users.CompareDevicesByUserAccount
  #pragma pack(pop)
  static check_size<sizeof(InputUser::CompareDevicesByUserAccount), 0 + sizeof(::UnityEngine::InputSystem::Users::InputUserAccountHandle)> __UnityEngine_InputSystem_Users_InputUser_CompareDevicesByUserAccountSizeCheck;
  static_assert(sizeof(InputUser::CompareDevicesByUserAccount) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount::*)(::UnityEngine::InputSystem::InputDevice*, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount::Compare)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount::GetUserAccountHandleForDevice
// Il2CppName: GetUserAccountHandleForDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::UnityEngine::InputSystem::Users::InputUserAccountHandle> (*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount::GetUserAccountHandleForDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Users::InputUser::CompareDevicesByUserAccount), "GetUserAccountHandleForDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
