// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionMap
#include "UnityEngine/InputSystem/InputActionMap.hpp"
// Including type: UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteActionJson
#include "UnityEngine/InputSystem/InputActionMap_WriteActionJson.hpp"
// Including type: UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson
#include "UnityEngine/InputSystem/InputActionMap_BindingJson.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionMap::WriteMapJson, "UnityEngine.InputSystem", "InputActionMap/WriteMapJson");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteMapJson
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionMap::WriteMapJson/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x8
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteActionJson[] actions
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::InputActionMap::WriteActionJson> actions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputActionMap::WriteActionJson>) == 0x8);
    // public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson[] bindings
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson> bindings;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson>) == 0x8);
    public:
    // Creating value type constructor for type: WriteMapJson
    constexpr WriteMapJson(::StringW name_ = {}, ::StringW id_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputActionMap::WriteActionJson> actions_ = ::ArrayW<::UnityEngine::InputSystem::InputActionMap::WriteActionJson>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson> bindings_ = ::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson>(static_cast<void*>(nullptr))) noexcept : name{name_}, id{id_}, actions{actions_}, bindings{bindings_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteActionJson[] actions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputActionMap::WriteActionJson>& dyn_actions();
    // Get instance field reference: public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson[] bindings
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson>& dyn_bindings();
    // static public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteMapJson FromMap(UnityEngine.InputSystem.InputActionMap map)
    // Offset: 0xF44000
    static ::UnityEngine::InputSystem::InputActionMap::WriteMapJson FromMap(::UnityEngine::InputSystem::InputActionMap* map);
  }; // UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.WriteMapJson
  #pragma pack(pop)
  static check_size<sizeof(InputActionMap::WriteMapJson), 24 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputActionMap::BindingJson>)> __UnityEngine_InputSystem_InputActionMap_WriteMapJsonSizeCheck;
  static_assert(sizeof(InputActionMap::WriteMapJson) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionMap::WriteMapJson::FromMap
// Il2CppName: FromMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionMap::WriteMapJson (*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::InputActionMap::WriteMapJson::FromMap)> {
  static const MethodInfo* get() {
    static auto* map = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionMap::WriteMapJson), "FromMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{map});
  }
};
