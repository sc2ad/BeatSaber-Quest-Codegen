// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::InputSystem::Android::LowLevel
namespace UnityEngine::InputSystem::Android::LowLevel {
  // Forward declaring type: AndroidKeyCode
  struct AndroidKeyCode;
  // Forward declaring type: AndroidAxis
  struct AndroidAxis;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Android.LowLevel
namespace UnityEngine::InputSystem::Android::LowLevel {
  // Forward declaring type: AndroidGameControllerState
  struct AndroidGameControllerState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState, "UnityEngine.InputSystem.Android.LowLevel", "AndroidGameControllerState");
// Type namespace: UnityEngine.InputSystem.Android.LowLevel
namespace UnityEngine::InputSystem::Android::LowLevel {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState
  // [TokenAttribute] Offset: FFFFFFFF
  struct AndroidGameControllerState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer
    struct $buttons$e__FixedBuffer;
    // Nested type: ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer
    struct $axis$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<buttons>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $buttons$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt32 FixedElementField
      // Size: 0x4
      // Offset: 0x0
      uint FixedElementField;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      public:
      // Creating value type constructor for type: $buttons$e__FixedBuffer
      constexpr $buttons$e__FixedBuffer(uint FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator uint
      constexpr operator uint() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.UInt32 FixedElementField
      [[deprecated("Use field access instead!")]] uint& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<buttons>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(AndroidGameControllerState::$buttons$e__FixedBuffer), 0 + sizeof(uint)> __UnityEngine_InputSystem_Android_LowLevel_AndroidGameControllerState_$buttons$e__FixedBufferSizeCheck;
    static_assert(sizeof(AndroidGameControllerState::$buttons$e__FixedBuffer) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<axis>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $axis$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single FixedElementField
      // Size: 0x4
      // Offset: 0x0
      float FixedElementField;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: $axis$e__FixedBuffer
      constexpr $axis$e__FixedBuffer(float FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator float
      constexpr operator float() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Single FixedElementField
      [[deprecated("Use field access instead!")]] float& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<axis>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(AndroidGameControllerState::$axis$e__FixedBuffer), 0 + sizeof(float)> __UnityEngine_InputSystem_Android_LowLevel_AndroidGameControllerState_$axis$e__FixedBufferSizeCheck;
    static_assert(sizeof(AndroidGameControllerState::$axis$e__FixedBuffer) == 0x4);
    public:
    // [FixedBufferAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // [InputControlAttribute] Offset: 0x95BC18
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<buttons>e__FixedBuffer buttons
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer buttons;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer) == 0x4);
    // Padding between fields: buttons and: axis
    char __padding0[0x18] = {};
    // [FixedBufferAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // [InputControlAttribute] Offset: 0x95BEC4
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<axis>e__FixedBuffer axis
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer axis;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer) == 0x4);
    public:
    // Creating value type constructor for type: AndroidGameControllerState
    constexpr AndroidGameControllerState(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer buttons_ = {}, ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer axis_ = {}) noexcept : buttons{buttons_}, axis{axis_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // static field const value: static public System.Int32 MaxAxes
    static constexpr const int MaxAxes = 48;
    // Get static field: static public System.Int32 MaxAxes
    static int _get_MaxAxes();
    // Set static field: static public System.Int32 MaxAxes
    static void _set_MaxAxes(int value);
    // static field const value: static public System.Int32 MaxButtons
    static constexpr const int MaxButtons = 220;
    // Get static field: static public System.Int32 MaxButtons
    static int _get_MaxButtons();
    // Set static field: static public System.Int32 MaxButtons
    static void _set_MaxButtons(int value);
    // static field const value: static System.String kVariantGamepad
    static constexpr const char* kVariantGamepad = "Gamepad";
    // Get static field: static System.String kVariantGamepad
    static ::StringW _get_kVariantGamepad();
    // Set static field: static System.String kVariantGamepad
    static void _set_kVariantGamepad(::StringW value);
    // static field const value: static System.String kVariantJoystick
    static constexpr const char* kVariantJoystick = "Joystick";
    // Get static field: static System.String kVariantJoystick
    static ::StringW _get_kVariantJoystick();
    // Set static field: static System.String kVariantJoystick
    static void _set_kVariantJoystick(::StringW value);
    // static field const value: static System.UInt32 kAxisOffset
    static constexpr const uint kAxisOffset = 28u;
    // Get static field: static System.UInt32 kAxisOffset
    static uint _get_kAxisOffset();
    // Set static field: static System.UInt32 kAxisOffset
    static void _set_kAxisOffset(uint value);
    // Get static field: static public UnityEngine.InputSystem.Utilities.FourCC kFormat
    static ::UnityEngine::InputSystem::Utilities::FourCC _get_kFormat();
    // Set static field: static public UnityEngine.InputSystem.Utilities.FourCC kFormat
    static void _set_kFormat(::UnityEngine::InputSystem::Utilities::FourCC value);
    // Get instance field reference: public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<buttons>e__FixedBuffer buttons
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer& dyn_buttons();
    // Get instance field reference: public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState/UnityEngine.InputSystem.Android.LowLevel.<axis>e__FixedBuffer axis
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer& dyn_axis();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA44680
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // static private System.Void .cctor()
    // Offset: 0xE11FE4
    static void _cctor();
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState WithButton(UnityEngine.InputSystem.Android.LowLevel.AndroidKeyCode code, System.Boolean value)
    // Offset: 0xA446E8
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState WithButton(::UnityEngine::InputSystem::Android::LowLevel::AndroidKeyCode code, bool value);
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState WithAxis(UnityEngine.InputSystem.Android.LowLevel.AndroidAxis axis, System.Single value)
    // Offset: 0xA4472C
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState WithAxis(::UnityEngine::InputSystem::Android::LowLevel::AndroidAxis axis, float value);
  }; // UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState
  #pragma pack(pop)
  static check_size<sizeof(AndroidGameControllerState), 28 + sizeof(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer)> __UnityEngine_InputSystem_Android_LowLevel_AndroidGameControllerStateSizeCheck;
  static_assert(sizeof(AndroidGameControllerState) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$axis$e__FixedBuffer, "UnityEngine.InputSystem.Android.LowLevel", "AndroidGameControllerState/<axis>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::$buttons$e__FixedBuffer, "UnityEngine.InputSystem.Android.LowLevel", "AndroidGameControllerState/<buttons>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::*)()>(&UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::WithButton
// Il2CppName: WithButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState (UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::*)(::UnityEngine::InputSystem::Android::LowLevel::AndroidKeyCode, bool)>(&UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::WithButton)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Android.LowLevel", "AndroidKeyCode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState), "WithButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::WithAxis
// Il2CppName: WithAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState (UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::*)(::UnityEngine::InputSystem::Android::LowLevel::AndroidAxis, float)>(&UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState::WithAxis)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Android.LowLevel", "AndroidAxis")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidGameControllerState), "WithAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, value});
  }
};
