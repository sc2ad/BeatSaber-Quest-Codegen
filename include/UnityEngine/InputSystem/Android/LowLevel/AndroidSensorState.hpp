// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
#include "UnityEngine/InputSystem/LowLevel/IInputStateTypeInfo.hpp"
// Including type: UnityEngine.InputSystem.Utilities.FourCC
#include "UnityEngine/InputSystem/Utilities/FourCC.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem.Android.LowLevel
namespace UnityEngine::InputSystem::Android::LowLevel {
  // Forward declaring type: AndroidSensorState
  struct AndroidSensorState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState, "UnityEngine.InputSystem.Android.LowLevel", "AndroidSensorState");
// Type namespace: UnityEngine.InputSystem.Android.LowLevel
namespace UnityEngine::InputSystem::Android::LowLevel {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState
  // [TokenAttribute] Offset: FFFFFFFF
  struct AndroidSensorState/*, public ::System::ValueType, public ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer
    struct $data$e__FixedBuffer;
    // Size: 0x4
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState/UnityEngine.InputSystem.Android.LowLevel.<data>e__FixedBuffer
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    // [UnsafeValueTypeAttribute] Offset: FFFFFFFF
    struct $data$e__FixedBuffer/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single FixedElementField
      // Size: 0x4
      // Offset: 0x0
      float FixedElementField;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: $data$e__FixedBuffer
      constexpr $data$e__FixedBuffer(float FixedElementField_ = {}) noexcept : FixedElementField{FixedElementField_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator float
      constexpr operator float() const noexcept {
        return FixedElementField;
      }
      // Get instance field reference: public System.Single FixedElementField
      [[deprecated("Use field access instead!")]] float& dyn_FixedElementField();
    }; // UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState/UnityEngine.InputSystem.Android.LowLevel.<data>e__FixedBuffer
    #pragma pack(pop)
    static check_size<sizeof(AndroidSensorState::$data$e__FixedBuffer), 0 + sizeof(float)> __UnityEngine_InputSystem_Android_LowLevel_AndroidSensorState_$data$e__FixedBufferSizeCheck;
    static_assert(sizeof(AndroidSensorState::$data$e__FixedBuffer) == 0x4);
    public:
    // [FixedBufferAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // [InputControlAttribute] Offset: 0x95C1EC
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState/UnityEngine.InputSystem.Android.LowLevel.<data>e__FixedBuffer data
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer data;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer) == 0x4);
    public:
    // Creating value type constructor for type: AndroidSensorState
    constexpr AndroidSensorState(::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer data_ = {}) noexcept : data{data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo
    operator ::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::LowLevel::IInputStateTypeInfo*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer
    constexpr operator ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer() const noexcept {
      return data;
    }
    // Get static field: static public UnityEngine.InputSystem.Utilities.FourCC kFormat
    static ::UnityEngine::InputSystem::Utilities::FourCC _get_kFormat();
    // Set static field: static public UnityEngine.InputSystem.Utilities.FourCC kFormat
    static void _set_kFormat(::UnityEngine::InputSystem::Utilities::FourCC value);
    // Get instance field reference: public UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState/UnityEngine.InputSystem.Android.LowLevel.<data>e__FixedBuffer data
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer& dyn_data();
    // public UnityEngine.InputSystem.Utilities.FourCC get_format()
    // Offset: 0xA44760
    ::UnityEngine::InputSystem::Utilities::FourCC get_format();
    // static private System.Void .cctor()
    // Offset: 0xE12374
    static void _cctor();
    // public UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState WithData(params System.Single[] data)
    // Offset: 0xA44758
    ::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState WithData(::ArrayW<float> data);
  }; // UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState
  #pragma pack(pop)
  static check_size<sizeof(AndroidSensorState), 0 + sizeof(::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer)> __UnityEngine_InputSystem_Android_LowLevel_AndroidSensorStateSizeCheck;
  static_assert(sizeof(AndroidSensorState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::$data$e__FixedBuffer, "UnityEngine.InputSystem.Android.LowLevel", "AndroidSensorState/<data>e__FixedBuffer");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::*)()>(&UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::WithData
// Il2CppName: WithData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState (UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::*)(::ArrayW<float>)>(&UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState::WithData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Android::LowLevel::AndroidSensorState), "WithData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
