// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.XInput.XInputController
#include "UnityEngine/InputSystem/XInput/XInputController.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceType
#include "UnityEngine/InputSystem/XInput/XInputController_DeviceType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XInput::XInputController::Capabilities, "UnityEngine.InputSystem.XInput", "XInputController/Capabilities");
// Type namespace: UnityEngine.InputSystem.XInput
namespace UnityEngine::InputSystem::XInput {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.Capabilities
  // [TokenAttribute] Offset: FFFFFFFF
  struct XInputController::Capabilities/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceType type
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceType type;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceType) == 0x4);
    // public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType subType
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType subType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType) == 0x4);
    // public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags flags
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags) == 0x4);
    public:
    // Creating value type constructor for type: Capabilities
    constexpr Capabilities(::UnityEngine::InputSystem::XInput::XInputController::DeviceType type_ = {}, ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType subType_ = {}, ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags flags_ = {}) noexcept : type{type_}, subType{subType_}, flags{flags_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceType type
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XInput::XInputController::DeviceType& dyn_type();
    // Get instance field reference: public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType subType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType& dyn_subType();
    // Get instance field reference: public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags& dyn_flags();
  }; // UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.Capabilities
  #pragma pack(pop)
  static check_size<sizeof(XInputController::Capabilities), 8 + sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags)> __UnityEngine_InputSystem_XInput_XInputController_CapabilitiesSizeCheck;
  static_assert(sizeof(XInputController::Capabilities) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
