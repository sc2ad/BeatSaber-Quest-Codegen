// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Gamepad
#include "UnityEngine/InputSystem/Gamepad.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::XInput
namespace UnityEngine::InputSystem::XInput {
  // Skipping declaration: DeviceFlags because it is already included!
  // Skipping declaration: DeviceSubType because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: ButtonControl
  class ButtonControl;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.XInput
namespace UnityEngine::InputSystem::XInput {
  // Forward declaring type: XInputController
  class XInputController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::XInput::XInputController);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XInput::XInputController*, "UnityEngine.InputSystem.XInput", "XInputController");
// Type namespace: UnityEngine.InputSystem.XInput
namespace UnityEngine::InputSystem::XInput {
  // Size: 0x1EC
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.XInput.XInputController
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 958228
  // [PreserveAttribute] Offset: FFFFFFFF
  class XInputController : public ::UnityEngine::InputSystem::Gamepad {
    public:
    // Nested type: ::UnityEngine::InputSystem::XInput::XInputController::DeviceType
    struct DeviceType;
    // Nested type: ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType
    struct DeviceSubType;
    // Nested type: ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags
    struct DeviceFlags;
    // Nested type: ::UnityEngine::InputSystem::XInput::XInputController::Capabilities
    struct Capabilities;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeviceSubType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeviceSubType
      constexpr DeviceSubType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Unknown
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_Unknown();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Unknown
      static void _set_Unknown(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Gamepad
      static constexpr const int Gamepad = 1;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Gamepad
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_Gamepad();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Gamepad
      static void _set_Gamepad(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Wheel
      static constexpr const int Wheel = 2;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Wheel
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_Wheel();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Wheel
      static void _set_Wheel(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadeStick
      static constexpr const int ArcadeStick = 3;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadeStick
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_ArcadeStick();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadeStick
      static void _set_ArcadeStick(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType FlightStick
      static constexpr const int FlightStick = 4;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType FlightStick
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_FlightStick();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType FlightStick
      static void _set_FlightStick(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DancePad
      static constexpr const int DancePad = 5;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DancePad
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_DancePad();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DancePad
      static void _set_DancePad(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Guitar
      static constexpr const int Guitar = 6;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Guitar
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_Guitar();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType Guitar
      static void _set_Guitar(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarAlternate
      static constexpr const int GuitarAlternate = 7;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarAlternate
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_GuitarAlternate();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarAlternate
      static void _set_GuitarAlternate(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DrumKit
      static constexpr const int DrumKit = 8;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DrumKit
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_DrumKit();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType DrumKit
      static void _set_DrumKit(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarBass
      static constexpr const int GuitarBass = 11;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarBass
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_GuitarBass();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType GuitarBass
      static void _set_GuitarBass(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadePad
      static constexpr const int ArcadePad = 19;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadePad
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType _get_ArcadePad();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType ArcadePad
      static void _set_ArcadePad(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType
    #pragma pack(pop)
    static check_size<sizeof(XInputController::DeviceSubType), 0 + sizeof(int)> __UnityEngine_InputSystem_XInput_XInputController_DeviceSubTypeSizeCheck;
    static_assert(sizeof(XInputController::DeviceSubType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct DeviceFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeviceFlags
      constexpr DeviceFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags ForceFeedbackSupported
      static constexpr const int ForceFeedbackSupported = 1;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags ForceFeedbackSupported
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags _get_ForceFeedbackSupported();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags ForceFeedbackSupported
      static void _set_ForceFeedbackSupported(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags Wireless
      static constexpr const int Wireless = 2;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags Wireless
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags _get_Wireless();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags Wireless
      static void _set_Wireless(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags VoiceSupported
      static constexpr const int VoiceSupported = 4;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags VoiceSupported
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags _get_VoiceSupported();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags VoiceSupported
      static void _set_VoiceSupported(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags PluginModulesSupported
      static constexpr const int PluginModulesSupported = 8;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags PluginModulesSupported
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags _get_PluginModulesSupported();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags PluginModulesSupported
      static void _set_PluginModulesSupported(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags value);
      // static field const value: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags NoNavigation
      static constexpr const int NoNavigation = 16;
      // Get static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags NoNavigation
      static ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags _get_NoNavigation();
      // Set static field: static public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags NoNavigation
      static void _set_NoNavigation(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags
    #pragma pack(pop)
    static check_size<sizeof(XInputController::DeviceFlags), 0 + sizeof(int)> __UnityEngine_InputSystem_XInput_XInputController_DeviceFlagsSizeCheck;
    static_assert(sizeof(XInputController::DeviceFlags) == 0x4);
    public:
    // private UnityEngine.InputSystem.Controls.ButtonControl <menu>k__BackingField
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::InputSystem::Controls::ButtonControl* menu;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <view>k__BackingField
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::InputSystem::Controls::ButtonControl* view;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private System.Boolean m_HaveParsedCapabilities
    // Size: 0x1
    // Offset: 0x1E0
    bool m_HaveParsedCapabilities;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HaveParsedCapabilities and: m_SubType
    char __padding2[0x3] = {};
    // private UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType m_SubType
    // Size: 0x4
    // Offset: 0x1E4
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType m_SubType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType) == 0x4);
    // private UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags m_Flags
    // Size: 0x4
    // Offset: 0x1E8
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <menu>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$menu$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <view>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$view$k__BackingField();
    // Get instance field reference: private System.Boolean m_HaveParsedCapabilities
    [[deprecated("Use field access instead!")]] bool& dyn_m_HaveParsedCapabilities();
    // Get instance field reference: private UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType m_SubType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType& dyn_m_SubType();
    // Get instance field reference: private UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags& dyn_m_Flags();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_menu()
    // Offset: 0x1B57E2C
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_menu();
    // private System.Void set_menu(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0x1B57E34
    void set_menu(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_view()
    // Offset: 0x1B57E3C
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_view();
    // private System.Void set_view(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0x1B57E44
    void set_view(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceSubType get_subType()
    // Offset: 0x1B57E4C
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType get_subType();
    // public UnityEngine.InputSystem.XInput.XInputController/UnityEngine.InputSystem.XInput.DeviceFlags get_flags()
    // Offset: 0x1B57EF4
    ::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags get_flags();
    // private System.Void ParseCapabilities()
    // Offset: 0x1B57E7C
    void ParseCapabilities();
    // public System.Void .ctor()
    // Offset: 0x1B57F50
    // Implemented from: UnityEngine.InputSystem.Gamepad
    // Base method: System.Void Gamepad::.ctor()
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XInputController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::XInput::XInputController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XInputController*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0x1B57F24
    // Implemented from: UnityEngine.InputSystem.Gamepad
    // Base method: System.Void Gamepad::FinishSetup()
    void FinishSetup();
  }; // UnityEngine.InputSystem.XInput.XInputController
  #pragma pack(pop)
  static check_size<sizeof(XInputController), 488 + sizeof(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags)> __UnityEngine_InputSystem_XInput_XInputControllerSizeCheck;
  static_assert(sizeof(XInputController) == 0x1EC);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags, "UnityEngine.InputSystem.XInput", "XInputController/DeviceFlags");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType, "UnityEngine.InputSystem.XInput", "XInputController/DeviceSubType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::get_menu
// Il2CppName: get_menu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::get_menu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "get_menu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::set_menu
// Il2CppName: set_menu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XInput::XInputController::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::XInput::XInputController::set_menu)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "set_menu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::get_view
// Il2CppName: get_view
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::get_view)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "get_view", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::set_view
// Il2CppName: set_view
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XInput::XInputController::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::XInput::XInputController::set_view)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "set_view", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::get_subType
// Il2CppName: get_subType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XInput::XInputController::DeviceSubType (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::get_subType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "get_subType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::get_flags
// Il2CppName: get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::XInput::XInputController::DeviceFlags (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::get_flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::ParseCapabilities
// Il2CppName: ParseCapabilities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::ParseCapabilities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "ParseCapabilities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::XInput::XInputController::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::XInput::XInputController::*)()>(&UnityEngine::InputSystem::XInput::XInputController::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::XInput::XInputController*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
