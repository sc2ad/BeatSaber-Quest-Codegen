// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Char
#include "System/Char.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputBinding
  struct InputBinding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputBinding, "UnityEngine.InputSystem", "InputBinding");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x58
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputBinding
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputBinding/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputBinding>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputBinding::DisplayStringOptions
    struct DisplayStringOptions;
    // Nested type: ::UnityEngine::InputSystem::InputBinding::MatchOptions
    struct MatchOptions;
    // Nested type: ::UnityEngine::InputSystem::InputBinding::Flags
    struct Flags;
    // Nested type: ::UnityEngine::InputSystem::InputBinding::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Flags
      constexpr Flags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags None
      static ::UnityEngine::InputSystem::InputBinding::Flags _get_None();
      // Set static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags None
      static void _set_None(::UnityEngine::InputSystem::InputBinding::Flags value);
      // static field const value: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags Composite
      static constexpr const int Composite = 4;
      // Get static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags Composite
      static ::UnityEngine::InputSystem::InputBinding::Flags _get_Composite();
      // Set static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags Composite
      static void _set_Composite(::UnityEngine::InputSystem::InputBinding::Flags value);
      // static field const value: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags PartOfComposite
      static constexpr const int PartOfComposite = 8;
      // Get static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags PartOfComposite
      static ::UnityEngine::InputSystem::InputBinding::Flags _get_PartOfComposite();
      // Set static field: static public UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags PartOfComposite
      static void _set_PartOfComposite(::UnityEngine::InputSystem::InputBinding::Flags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags
    #pragma pack(pop)
    static check_size<sizeof(InputBinding::Flags), 0 + sizeof(int)> __UnityEngine_InputSystem_InputBinding_FlagsSizeCheck;
    static_assert(sizeof(InputBinding::Flags) == 0x4);
    public:
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String m_Id
    // Size: 0x8
    // Offset: 0x8
    ::StringW m_Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Path
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_Path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Interactions
    // Size: 0x8
    // Offset: 0x18
    ::StringW m_Interactions;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Processors
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_Processors;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Groups
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_Groups;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Action
    // Size: 0x8
    // Offset: 0x30
    ::StringW m_Action;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags m_Flags
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::InputSystem::InputBinding::Flags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputBinding::Flags) == 0x4);
    // Padding between fields: m_Flags and: m_OverridePath
    char __padding7[0x4] = {};
    // private System.String m_OverridePath
    // Size: 0x8
    // Offset: 0x40
    ::StringW m_OverridePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_OverrideInteractions
    // Size: 0x8
    // Offset: 0x48
    ::StringW m_OverrideInteractions;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_OverrideProcessors
    // Size: 0x8
    // Offset: 0x50
    ::StringW m_OverrideProcessors;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: InputBinding
    constexpr InputBinding(::StringW m_Name_ = {}, ::StringW m_Id_ = {}, ::StringW m_Path_ = {}, ::StringW m_Interactions_ = {}, ::StringW m_Processors_ = {}, ::StringW m_Groups_ = {}, ::StringW m_Action_ = {}, ::UnityEngine::InputSystem::InputBinding::Flags m_Flags_ = {}, ::StringW m_OverridePath_ = {}, ::StringW m_OverrideInteractions_ = {}, ::StringW m_OverrideProcessors_ = {}) noexcept : m_Name{m_Name_}, m_Id{m_Id_}, m_Path{m_Path_}, m_Interactions{m_Interactions_}, m_Processors{m_Processors_}, m_Groups{m_Groups_}, m_Action{m_Action_}, m_Flags{m_Flags_}, m_OverridePath{m_OverridePath_}, m_OverrideInteractions{m_OverrideInteractions_}, m_OverrideProcessors{m_OverrideProcessors_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputBinding>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputBinding>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputBinding>*>(this);
    }
    // static field const value: static public System.Char Separator
    static constexpr const ::Il2CppChar Separator = u';';
    // Get static field: static public System.Char Separator
    static ::Il2CppChar _get_Separator();
    // Set static field: static public System.Char Separator
    static void _set_Separator(::Il2CppChar value);
    // static field const value: static System.String kSeparatorString
    static constexpr const char* kSeparatorString = ";";
    // Get static field: static System.String kSeparatorString
    static ::StringW _get_kSeparatorString();
    // Set static field: static System.String kSeparatorString
    static void _set_kSeparatorString(::StringW value);
    // Get instance field reference: private System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: System.String m_Id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Id();
    // Get instance field reference: private System.String m_Path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Path();
    // Get instance field reference: private System.String m_Interactions
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Interactions();
    // Get instance field reference: private System.String m_Processors
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Processors();
    // Get instance field reference: private System.String m_Groups
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Groups();
    // Get instance field reference: private System.String m_Action
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Action();
    // Get instance field reference: UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.Flags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputBinding::Flags& dyn_m_Flags();
    // Get instance field reference: private System.String m_OverridePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_OverridePath();
    // Get instance field reference: private System.String m_OverrideInteractions
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_OverrideInteractions();
    // Get instance field reference: private System.String m_OverrideProcessors
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_OverrideProcessors();
    // public System.String get_name()
    // Offset: 0xA5B8B8
    ::StringW get_name();
    // public System.Void set_name(System.String value)
    // Offset: 0xA5B8C0
    void set_name(::StringW value);
    // public System.Guid get_id()
    // Offset: 0xA5B8C8
    ::System::Guid get_id();
    // public System.Void set_id(System.Guid value)
    // Offset: 0xA5B8D0
    void set_id(::System::Guid value);
    // public System.String get_path()
    // Offset: 0xA5B908
    ::StringW get_path();
    // public System.Void set_path(System.String value)
    // Offset: 0xA5B910
    void set_path(::StringW value);
    // public System.String get_overridePath()
    // Offset: 0xA5B918
    ::StringW get_overridePath();
    // public System.Void set_overridePath(System.String value)
    // Offset: 0xA5B920
    void set_overridePath(::StringW value);
    // public System.String get_interactions()
    // Offset: 0xA5B928
    ::StringW get_interactions();
    // public System.Void set_interactions(System.String value)
    // Offset: 0xA5B930
    void set_interactions(::StringW value);
    // public System.String get_overrideInteractions()
    // Offset: 0xA5B938
    ::StringW get_overrideInteractions();
    // public System.Void set_overrideInteractions(System.String value)
    // Offset: 0xA5B940
    void set_overrideInteractions(::StringW value);
    // public System.String get_processors()
    // Offset: 0xA5B948
    ::StringW get_processors();
    // public System.Void set_processors(System.String value)
    // Offset: 0xA5B950
    void set_processors(::StringW value);
    // public System.String get_overrideProcessors()
    // Offset: 0xA5B958
    ::StringW get_overrideProcessors();
    // public System.Void set_overrideProcessors(System.String value)
    // Offset: 0xA5B960
    void set_overrideProcessors(::StringW value);
    // public System.String get_groups()
    // Offset: 0xA5B968
    ::StringW get_groups();
    // public System.Void set_groups(System.String value)
    // Offset: 0xA5B970
    void set_groups(::StringW value);
    // public System.String get_action()
    // Offset: 0xA5B978
    ::StringW get_action();
    // public System.Void set_action(System.String value)
    // Offset: 0xA5B980
    void set_action(::StringW value);
    // public System.Boolean get_isComposite()
    // Offset: 0xA5B988
    bool get_isComposite();
    // public System.Void set_isComposite(System.Boolean value)
    // Offset: 0xA5B994
    void set_isComposite(bool value);
    // public System.Boolean get_isPartOfComposite()
    // Offset: 0xA5B9B0
    bool get_isPartOfComposite();
    // public System.Void set_isPartOfComposite(System.Boolean value)
    // Offset: 0xA5B9BC
    void set_isPartOfComposite(bool value);
    // public System.String get_effectivePath()
    // Offset: 0xA5BA08
    ::StringW get_effectivePath();
    // public System.String get_effectiveInteractions()
    // Offset: 0xA5BA20
    ::StringW get_effectiveInteractions();
    // public System.String get_effectiveProcessors()
    // Offset: 0xA5BA38
    ::StringW get_effectiveProcessors();
    // System.Boolean get_isEmpty()
    // Offset: 0xA5BA50
    bool get_isEmpty();
    // public System.Void .ctor(System.String path, System.String action, System.String groups, System.String processors, System.String interactions, System.String name)
    // Offset: 0xA5B9D8
    InputBinding(::StringW path, ::StringW action, ::StringW groups, ::StringW processors, ::StringW interactions, ::StringW name);
    // public System.String GetNameOfComposite()
    // Offset: 0xA5B9F8
    ::StringW GetNameOfComposite();
    // System.Void GenerateId()
    // Offset: 0xA5BA00
    void GenerateId();
    // static public UnityEngine.InputSystem.InputBinding MaskByGroup(System.String group)
    // Offset: 0x13740C8
    static ::UnityEngine::InputSystem::InputBinding MaskByGroup(::StringW group);
    // static public UnityEngine.InputSystem.InputBinding MaskByGroups(params System.String[] groups)
    // Offset: 0x13740E4
    static ::UnityEngine::InputSystem::InputBinding MaskByGroups(::ArrayW<::StringW> groups);
    // public System.Boolean Equals(UnityEngine.InputSystem.InputBinding other)
    // Offset: 0xA5BA58
    bool Equals(::UnityEngine::InputSystem::InputBinding other);
    // public System.String ToDisplayString(UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.DisplayStringOptions options, UnityEngine.InputSystem.InputControl control)
    // Offset: 0xA5BAB0
    ::StringW ToDisplayString(::UnityEngine::InputSystem::InputBinding::DisplayStringOptions options, ::UnityEngine::InputSystem::InputControl* control);
    // public System.String ToDisplayString(out System.String deviceLayoutName, out System.String controlPath, UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.DisplayStringOptions options, UnityEngine.InputSystem.InputControl control)
    // Offset: 0xA5BAE4
    ::StringW ToDisplayString(ByRef<::StringW> deviceLayoutName, ByRef<::StringW> controlPath, ::UnityEngine::InputSystem::InputBinding::DisplayStringOptions options, ::UnityEngine::InputSystem::InputControl* control);
    // public System.Boolean Matches(UnityEngine.InputSystem.InputBinding binding)
    // Offset: 0xA5BAEC
    bool Matches(::UnityEngine::InputSystem::InputBinding binding);
    // System.Boolean Matches(ref UnityEngine.InputSystem.InputBinding binding, UnityEngine.InputSystem.InputBinding/UnityEngine.InputSystem.MatchOptions options)
    // Offset: 0xA5BB30
    bool Matches(ByRef<::UnityEngine::InputSystem::InputBinding> binding, ::UnityEngine::InputSystem::InputBinding::MatchOptions options);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA5BA98
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA5BAA0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xA5BAA8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.InputSystem.InputBinding
  #pragma pack(pop)
  static check_size<sizeof(InputBinding), 80 + sizeof(::StringW)> __UnityEngine_InputSystem_InputBindingSizeCheck;
  static_assert(sizeof(InputBinding) == 0x58);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right)
  // Offset: 0x136CC60
  bool operator ==(const ::UnityEngine::InputSystem::InputBinding& left, const ::UnityEngine::InputSystem::InputBinding& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right)
  // Offset: 0x1374424
  bool operator !=(const ::UnityEngine::InputSystem::InputBinding& left, const ::UnityEngine::InputSystem::InputBinding& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputBinding::Flags, "UnityEngine.InputSystem", "InputBinding/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::System::Guid)>(&UnityEngine::InputSystem::InputBinding::set_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_path
// Il2CppName: get_path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_path
// Il2CppName: set_path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_path)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_overridePath
// Il2CppName: get_overridePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_overridePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_overridePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_overridePath
// Il2CppName: set_overridePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_overridePath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_overridePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_interactions
// Il2CppName: get_interactions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_interactions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_interactions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_interactions
// Il2CppName: set_interactions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_interactions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_interactions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_overrideInteractions
// Il2CppName: get_overrideInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_overrideInteractions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_overrideInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_overrideInteractions
// Il2CppName: set_overrideInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_overrideInteractions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_overrideInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_processors
// Il2CppName: get_processors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_processors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_processors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_processors
// Il2CppName: set_processors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_processors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_processors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_overrideProcessors
// Il2CppName: get_overrideProcessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_overrideProcessors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_overrideProcessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_overrideProcessors
// Il2CppName: set_overrideProcessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_overrideProcessors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_overrideProcessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_groups
// Il2CppName: get_groups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_groups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_groups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_groups
// Il2CppName: set_groups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_groups)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_groups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_action
// Il2CppName: get_action
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_action)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_action", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_action
// Il2CppName: set_action
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::set_action)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_action", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_isComposite
// Il2CppName: get_isComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_isComposite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_isComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_isComposite
// Il2CppName: set_isComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(bool)>(&UnityEngine::InputSystem::InputBinding::set_isComposite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_isComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_isPartOfComposite
// Il2CppName: get_isPartOfComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_isPartOfComposite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_isPartOfComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::set_isPartOfComposite
// Il2CppName: set_isPartOfComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)(bool)>(&UnityEngine::InputSystem::InputBinding::set_isPartOfComposite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "set_isPartOfComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_effectivePath
// Il2CppName: get_effectivePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_effectivePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_effectivePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_effectiveInteractions
// Il2CppName: get_effectiveInteractions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_effectiveInteractions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_effectiveInteractions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_effectiveProcessors
// Il2CppName: get_effectiveProcessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_effectiveProcessors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_effectiveProcessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::InputBinding
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::GetNameOfComposite
// Il2CppName: GetNameOfComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::GetNameOfComposite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "GetNameOfComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::GenerateId
// Il2CppName: GenerateId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::GenerateId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "GenerateId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::MaskByGroup
// Il2CppName: MaskByGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputBinding (*)(::StringW)>(&UnityEngine::InputSystem::InputBinding::MaskByGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "MaskByGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::MaskByGroups
// Il2CppName: MaskByGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputBinding (*)(::ArrayW<::StringW>)>(&UnityEngine::InputSystem::InputBinding::MaskByGroups)> {
  static const MethodInfo* get() {
    static auto* groups = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "MaskByGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groups});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)(::UnityEngine::InputSystem::InputBinding)>(&UnityEngine::InputSystem::InputBinding::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::ToDisplayString
// Il2CppName: ToDisplayString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)(::UnityEngine::InputSystem::InputBinding::DisplayStringOptions, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputBinding::ToDisplayString)> {
  static const MethodInfo* get() {
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding/DisplayStringOptions")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "ToDisplayString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{options, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::ToDisplayString
// Il2CppName: ToDisplayString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)(ByRef<::StringW>, ByRef<::StringW>, ::UnityEngine::InputSystem::InputBinding::DisplayStringOptions, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputBinding::ToDisplayString)> {
  static const MethodInfo* get() {
    static auto* deviceLayoutName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding/DisplayStringOptions")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "ToDisplayString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceLayoutName, controlPath, options, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::Matches
// Il2CppName: Matches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)(::UnityEngine::InputSystem::InputBinding)>(&UnityEngine::InputSystem::InputBinding::Matches)> {
  static const MethodInfo* get() {
    static auto* binding = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "Matches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binding});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::Matches
// Il2CppName: Matches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)(ByRef<::UnityEngine::InputSystem::InputBinding>, ::UnityEngine::InputSystem::InputBinding::MatchOptions)>(&UnityEngine::InputSystem::InputBinding::Matches)> {
  static const MethodInfo* get() {
    static auto* binding = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding/MatchOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "Matches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binding, options});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputBinding::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::InputBinding::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputBinding::*)()>(&UnityEngine::InputSystem::InputBinding::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputBinding), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputBinding::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
